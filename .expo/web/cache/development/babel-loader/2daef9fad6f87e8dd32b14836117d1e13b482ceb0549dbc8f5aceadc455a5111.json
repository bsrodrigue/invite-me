{"ast":null,"code":"import NativePerformanceObserver from './NativePerformanceObserver';\nimport { warnNoNativePerformanceObserver } from './PerformanceObserver';\nlet cachedEventCounts;\nfunction getCachedEventCounts() {\n  if (cachedEventCounts) {\n    return cachedEventCounts;\n  }\n  if (!NativePerformanceObserver) {\n    warnNoNativePerformanceObserver();\n    return new Map();\n  }\n  cachedEventCounts = new Map(NativePerformanceObserver.getEventCounts());\n  global.queueMicrotask(() => {\n    cachedEventCounts = null;\n  });\n  return cachedEventCounts ?? new Map();\n}\nexport default class EventCounts {\n  get size() {\n    return getCachedEventCounts().size;\n  }\n  entries() {\n    return getCachedEventCounts().entries();\n  }\n  forEach(callback) {\n    return getCachedEventCounts().forEach(callback);\n  }\n  get(key) {\n    return getCachedEventCounts().get(key);\n  }\n  has(key) {\n    return getCachedEventCounts().has(key);\n  }\n  keys() {\n    return getCachedEventCounts().keys();\n  }\n  values() {\n    return getCachedEventCounts().values();\n  }\n}","map":{"version":3,"names":["NativePerformanceObserver","warnNoNativePerformanceObserver","cachedEventCounts","getCachedEventCounts","Map","getEventCounts","global","queueMicrotask","EventCounts","size","entries","forEach","callback","get","key","has","keys","values"],"sources":["/home/rodo/workspace/passion/apps/muh-money/node_modules/react-native/src/private/webapis/performance/EventCounts.js"],"sourcesContent":["/**\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @flow strict\n * @format\n */\n\nimport NativePerformanceObserver from './NativePerformanceObserver';\nimport {warnNoNativePerformanceObserver} from './PerformanceObserver';\n\ntype EventCountsForEachCallbackType =\n  | (() => void)\n  | ((value: number) => void)\n  | ((value: number, key: string) => void)\n  | ((value: number, key: string, map: Map<string, number>) => void);\n\nlet cachedEventCounts: ?Map<string, number>;\n\nfunction getCachedEventCounts(): Map<string, number> {\n  if (cachedEventCounts) {\n    return cachedEventCounts;\n  }\n  if (!NativePerformanceObserver) {\n    warnNoNativePerformanceObserver();\n    return new Map();\n  }\n\n  cachedEventCounts = new Map<string, number>(\n    NativePerformanceObserver.getEventCounts(),\n  );\n  // $FlowFixMe[incompatible-call]\n  global.queueMicrotask(() => {\n    // To be consistent with the calls to the API from the same task,\n    // but also not to refetch the data from native too often,\n    // schedule to invalidate the cache later,\n    // after the current task is guaranteed to have finished.\n    cachedEventCounts = null;\n  });\n  return cachedEventCounts ?? new Map();\n}\n/**\n * Implementation of the EventCounts Web Performance API\n * corresponding to the standard in\n * https://www.w3.org/TR/event-timing/#eventcounts\n */\nexport default class EventCounts {\n  // flowlint unsafe-getters-setters:off\n  get size(): number {\n    return getCachedEventCounts().size;\n  }\n\n  entries(): Iterator<[string, number]> {\n    return getCachedEventCounts().entries();\n  }\n\n  forEach(callback: EventCountsForEachCallbackType): void {\n    return getCachedEventCounts().forEach(callback);\n  }\n\n  get(key: string): ?number {\n    return getCachedEventCounts().get(key);\n  }\n\n  has(key: string): boolean {\n    return getCachedEventCounts().has(key);\n  }\n\n  keys(): Iterator<string> {\n    return getCachedEventCounts().keys();\n  }\n\n  values(): Iterator<number> {\n    return getCachedEventCounts().values();\n  }\n}\n"],"mappings":"AAUA,OAAOA,yBAAyB,MAAM,6BAA6B;AACnE,SAAQC,+BAA+B,QAAO,uBAAuB;AAQrE,IAAIC,iBAAuC;AAE3C,SAASC,oBAAoBA,CAAA,EAAwB;EACnD,IAAID,iBAAiB,EAAE;IACrB,OAAOA,iBAAiB;EAC1B;EACA,IAAI,CAACF,yBAAyB,EAAE;IAC9BC,+BAA+B,CAAC,CAAC;IACjC,OAAO,IAAIG,GAAG,CAAC,CAAC;EAClB;EAEAF,iBAAiB,GAAG,IAAIE,GAAG,CACzBJ,yBAAyB,CAACK,cAAc,CAAC,CAC3C,CAAC;EAEDC,MAAM,CAACC,cAAc,CAAC,MAAM;IAK1BL,iBAAiB,GAAG,IAAI;EAC1B,CAAC,CAAC;EACF,OAAOA,iBAAiB,IAAI,IAAIE,GAAG,CAAC,CAAC;AACvC;AAMA,eAAe,MAAMI,WAAW,CAAC;EAE/B,IAAIC,IAAIA,CAAA,EAAW;IACjB,OAAON,oBAAoB,CAAC,CAAC,CAACM,IAAI;EACpC;EAEAC,OAAOA,CAAA,EAA+B;IACpC,OAAOP,oBAAoB,CAAC,CAAC,CAACO,OAAO,CAAC,CAAC;EACzC;EAEAC,OAAOA,CAACC,QAAwC,EAAQ;IACtD,OAAOT,oBAAoB,CAAC,CAAC,CAACQ,OAAO,CAACC,QAAQ,CAAC;EACjD;EAEAC,GAAGA,CAACC,GAAW,EAAW;IACxB,OAAOX,oBAAoB,CAAC,CAAC,CAACU,GAAG,CAACC,GAAG,CAAC;EACxC;EAEAC,GAAGA,CAACD,GAAW,EAAW;IACxB,OAAOX,oBAAoB,CAAC,CAAC,CAACY,GAAG,CAACD,GAAG,CAAC;EACxC;EAEAE,IAAIA,CAAA,EAAqB;IACvB,OAAOb,oBAAoB,CAAC,CAAC,CAACa,IAAI,CAAC,CAAC;EACtC;EAEAC,MAAMA,CAAA,EAAqB;IACzB,OAAOd,oBAAoB,CAAC,CAAC,CAACc,MAAM,CAAC,CAAC;EACxC;AACF","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}