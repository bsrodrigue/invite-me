{"ast":null,"code":"var _jsxFileName = \"/home/rodo/workspace/passion/apps/muh-money/node_modules/react-native/Libraries/LogBox/UI/LogBoxInspector.js\";\nimport Keyboard from '../../Components/Keyboard/Keyboard';\nimport ScrollView from '../../Components/ScrollView/ScrollView';\nimport View from '../../Components/View/View';\nimport StyleSheet from '../../StyleSheet/StyleSheet';\nimport * as LogBoxData from '../Data/LogBoxData';\nimport LogBoxLog from '../Data/LogBoxLog';\nimport LogBoxInspectorCodeFrame from './LogBoxInspectorCodeFrame';\nimport LogBoxInspectorFooter from './LogBoxInspectorFooter';\nimport LogBoxInspectorHeader from './LogBoxInspectorHeader';\nimport LogBoxInspectorMessageHeader from './LogBoxInspectorMessageHeader';\nimport LogBoxInspectorReactFrames from './LogBoxInspectorReactFrames';\nimport LogBoxInspectorStackFrames from './LogBoxInspectorStackFrames';\nimport * as LogBoxStyle from './LogBoxStyle';\nimport * as React from 'react';\nimport { jsxDEV as _jsxDEV, Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nfunction LogBoxInspector(props) {\n  const {\n    logs,\n    selectedIndex\n  } = props;\n  let log = logs[selectedIndex];\n  React.useEffect(() => {\n    if (log) {\n      LogBoxData.symbolicateLogNow(log);\n    }\n  }, [log]);\n  React.useEffect(() => {\n    if (logs.length > 1) {\n      const selected = selectedIndex;\n      const lastIndex = logs.length - 1;\n      const prevIndex = selected - 1 < 0 ? lastIndex : selected - 1;\n      const nextIndex = selected + 1 > lastIndex ? 0 : selected + 1;\n      LogBoxData.symbolicateLogLazy(logs[prevIndex]);\n      LogBoxData.symbolicateLogLazy(logs[nextIndex]);\n    }\n  }, [logs, selectedIndex]);\n  React.useEffect(() => {\n    Keyboard.dismiss();\n  }, []);\n  function _handleRetry() {\n    LogBoxData.retrySymbolicateLogNow(log);\n  }\n  if (log == null) {\n    return null;\n  }\n  return _jsxDEV(View, {\n    style: styles.root,\n    children: [_jsxDEV(LogBoxInspectorHeader, {\n      onSelectIndex: props.onChangeSelectedIndex,\n      selectedIndex: selectedIndex,\n      total: logs.length,\n      level: log.level\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 71,\n      columnNumber: 7\n    }, this), _jsxDEV(LogBoxInspectorBody, {\n      log: log,\n      onRetry: _handleRetry\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 77,\n      columnNumber: 7\n    }, this), _jsxDEV(LogBoxInspectorFooter, {\n      onDismiss: props.onDismiss,\n      onMinimize: props.onMinimize,\n      level: log.level\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 78,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 70,\n    columnNumber: 5\n  }, this);\n}\nconst headerTitleMap = {\n  warn: 'Console Warning',\n  error: 'Console Error',\n  fatal: 'Uncaught Error',\n  syntax: 'Syntax Error',\n  component: 'Render Error'\n};\nfunction LogBoxInspectorBody(props) {\n  const [collapsed, setCollapsed] = React.useState(true);\n  React.useEffect(() => {\n    setCollapsed(true);\n  }, [props.log]);\n  const headerTitle = props.log.type ?? headerTitleMap[props.log.isComponentError ? 'component' : props.log.level];\n  if (collapsed) {\n    return _jsxDEV(_Fragment, {\n      children: [_jsxDEV(LogBoxInspectorMessageHeader, {\n        collapsed: collapsed,\n        onPress: () => setCollapsed(!collapsed),\n        message: props.log.message,\n        level: props.log.level,\n        title: headerTitle\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 109,\n        columnNumber: 9\n      }, this), _jsxDEV(ScrollView, {\n        style: styles.scrollBody,\n        children: [_jsxDEV(LogBoxInspectorCodeFrame, {\n          codeFrame: props.log.codeFrame\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 117,\n          columnNumber: 11\n        }, this), _jsxDEV(LogBoxInspectorReactFrames, {\n          log: props.log\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 118,\n          columnNumber: 11\n        }, this), _jsxDEV(LogBoxInspectorStackFrames, {\n          log: props.log,\n          onRetry: props.onRetry\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 119,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 116,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true);\n  }\n  return _jsxDEV(ScrollView, {\n    style: styles.scrollBody,\n    children: [_jsxDEV(LogBoxInspectorMessageHeader, {\n      collapsed: collapsed,\n      onPress: () => setCollapsed(!collapsed),\n      message: props.log.message,\n      level: props.log.level,\n      title: headerTitle\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 126,\n      columnNumber: 7\n    }, this), _jsxDEV(LogBoxInspectorCodeFrame, {\n      codeFrame: props.log.codeFrame\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 133,\n      columnNumber: 7\n    }, this), _jsxDEV(LogBoxInspectorReactFrames, {\n      log: props.log\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 134,\n      columnNumber: 7\n    }, this), _jsxDEV(LogBoxInspectorStackFrames, {\n      log: props.log,\n      onRetry: props.onRetry\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 135,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 125,\n    columnNumber: 5\n  }, this);\n}\nconst styles = StyleSheet.create({\n  root: {\n    flex: 1,\n    backgroundColor: LogBoxStyle.getTextColor()\n  },\n  scrollBody: {\n    backgroundColor: LogBoxStyle.getBackgroundColor(0.9),\n    flex: 1\n  }\n});\nexport default LogBoxInspector;","map":{"version":3,"names":["Keyboard","ScrollView","View","StyleSheet","LogBoxData","LogBoxLog","LogBoxInspectorCodeFrame","LogBoxInspectorFooter","LogBoxInspectorHeader","LogBoxInspectorMessageHeader","LogBoxInspectorReactFrames","LogBoxInspectorStackFrames","LogBoxStyle","React","jsxDEV","_jsxDEV","Fragment","_Fragment","LogBoxInspector","props","logs","selectedIndex","log","useEffect","symbolicateLogNow","length","selected","lastIndex","prevIndex","nextIndex","symbolicateLogLazy","dismiss","_handleRetry","retrySymbolicateLogNow","style","styles","root","children","onSelectIndex","onChangeSelectedIndex","total","level","fileName","_jsxFileName","lineNumber","columnNumber","LogBoxInspectorBody","onRetry","onDismiss","onMinimize","headerTitleMap","warn","error","fatal","syntax","component","collapsed","setCollapsed","useState","headerTitle","type","isComponentError","onPress","message","title","scrollBody","codeFrame","create","flex","backgroundColor","getTextColor","getBackgroundColor"],"sources":["/home/rodo/workspace/passion/apps/muh-money/node_modules/react-native/Libraries/LogBox/UI/LogBoxInspector.js"],"sourcesContent":["/**\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @flow strict-local\n * @format\n */\n\nimport Keyboard from '../../Components/Keyboard/Keyboard';\nimport ScrollView from '../../Components/ScrollView/ScrollView';\nimport View from '../../Components/View/View';\nimport StyleSheet from '../../StyleSheet/StyleSheet';\nimport * as LogBoxData from '../Data/LogBoxData';\nimport LogBoxLog, {type LogLevel} from '../Data/LogBoxLog';\nimport LogBoxInspectorCodeFrame from './LogBoxInspectorCodeFrame';\nimport LogBoxInspectorFooter from './LogBoxInspectorFooter';\nimport LogBoxInspectorHeader from './LogBoxInspectorHeader';\nimport LogBoxInspectorMessageHeader from './LogBoxInspectorMessageHeader';\nimport LogBoxInspectorReactFrames from './LogBoxInspectorReactFrames';\nimport LogBoxInspectorStackFrames from './LogBoxInspectorStackFrames';\nimport * as LogBoxStyle from './LogBoxStyle';\nimport * as React from 'react';\n\ntype Props = $ReadOnly<{|\n  onDismiss: () => void,\n  onChangeSelectedIndex: (index: number) => void,\n  onMinimize: () => void,\n  logs: $ReadOnlyArray<LogBoxLog>,\n  selectedIndex: number,\n  fatalType?: ?LogLevel,\n|}>;\n\nfunction LogBoxInspector(props: Props): React.Node {\n  const {logs, selectedIndex} = props;\n  let log = logs[selectedIndex];\n\n  React.useEffect(() => {\n    if (log) {\n      LogBoxData.symbolicateLogNow(log);\n    }\n  }, [log]);\n\n  React.useEffect(() => {\n    // Optimistically symbolicate the last and next logs.\n    if (logs.length > 1) {\n      const selected = selectedIndex;\n      const lastIndex = logs.length - 1;\n      const prevIndex = selected - 1 < 0 ? lastIndex : selected - 1;\n      const nextIndex = selected + 1 > lastIndex ? 0 : selected + 1;\n      LogBoxData.symbolicateLogLazy(logs[prevIndex]);\n      LogBoxData.symbolicateLogLazy(logs[nextIndex]);\n    }\n  }, [logs, selectedIndex]);\n\n  React.useEffect(() => {\n    Keyboard.dismiss();\n  }, []);\n\n  function _handleRetry() {\n    LogBoxData.retrySymbolicateLogNow(log);\n  }\n\n  if (log == null) {\n    return null;\n  }\n\n  return (\n    <View style={styles.root}>\n      <LogBoxInspectorHeader\n        onSelectIndex={props.onChangeSelectedIndex}\n        selectedIndex={selectedIndex}\n        total={logs.length}\n        level={log.level}\n      />\n      <LogBoxInspectorBody log={log} onRetry={_handleRetry} />\n      <LogBoxInspectorFooter\n        onDismiss={props.onDismiss}\n        onMinimize={props.onMinimize}\n        level={log.level}\n      />\n    </View>\n  );\n}\n\nconst headerTitleMap = {\n  warn: 'Console Warning',\n  error: 'Console Error',\n  fatal: 'Uncaught Error',\n  syntax: 'Syntax Error',\n  component: 'Render Error',\n};\n\nfunction LogBoxInspectorBody(props: {log: LogBoxLog, onRetry: () => void}) {\n  const [collapsed, setCollapsed] = React.useState(true);\n\n  React.useEffect(() => {\n    setCollapsed(true);\n  }, [props.log]);\n\n  const headerTitle =\n    props.log.type ??\n    headerTitleMap[props.log.isComponentError ? 'component' : props.log.level];\n\n  if (collapsed) {\n    return (\n      <>\n        <LogBoxInspectorMessageHeader\n          collapsed={collapsed}\n          onPress={() => setCollapsed(!collapsed)}\n          message={props.log.message}\n          level={props.log.level}\n          title={headerTitle}\n        />\n        <ScrollView style={styles.scrollBody}>\n          <LogBoxInspectorCodeFrame codeFrame={props.log.codeFrame} />\n          <LogBoxInspectorReactFrames log={props.log} />\n          <LogBoxInspectorStackFrames log={props.log} onRetry={props.onRetry} />\n        </ScrollView>\n      </>\n    );\n  }\n  return (\n    <ScrollView style={styles.scrollBody}>\n      <LogBoxInspectorMessageHeader\n        collapsed={collapsed}\n        onPress={() => setCollapsed(!collapsed)}\n        message={props.log.message}\n        level={props.log.level}\n        title={headerTitle}\n      />\n      <LogBoxInspectorCodeFrame codeFrame={props.log.codeFrame} />\n      <LogBoxInspectorReactFrames log={props.log} />\n      <LogBoxInspectorStackFrames log={props.log} onRetry={props.onRetry} />\n    </ScrollView>\n  );\n}\n\nconst styles = StyleSheet.create({\n  root: {\n    flex: 1,\n    backgroundColor: LogBoxStyle.getTextColor(),\n  },\n  scrollBody: {\n    backgroundColor: LogBoxStyle.getBackgroundColor(0.9),\n    flex: 1,\n  },\n});\n\nexport default LogBoxInspector;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}