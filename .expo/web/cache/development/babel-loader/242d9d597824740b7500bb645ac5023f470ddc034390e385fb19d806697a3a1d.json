{"ast":null,"code":"import _classPrivateFieldLooseBase from \"@babel/runtime/helpers/classPrivateFieldLooseBase\";\nimport _classPrivateFieldLooseKey from \"@babel/runtime/helpers/classPrivateFieldLooseKey\";\nimport { findNodeHandle, isChildPublicInstance } from '../ReactNative/RendererProxy';\nimport processColor from '../StyleSheet/processColor';\nconst reactDevToolsHook = window.__REACT_DEVTOOLS_GLOBAL_HOOK__;\nvar _registry = _classPrivateFieldLooseKey(\"registry\");\nvar _reactDevToolsAgent = _classPrivateFieldLooseKey(\"reactDevToolsAgent\");\nvar _onReactDevToolsAgentAttached = _classPrivateFieldLooseKey(\"onReactDevToolsAgentAttached\");\nvar _getPublicInstanceFromInstance = _classPrivateFieldLooseKey(\"getPublicInstanceFromInstance\");\nvar _findLowestParentFromRegistryForInstance = _classPrivateFieldLooseKey(\"findLowestParentFromRegistryForInstance\");\nvar _findLowestParentFromRegistryForInstanceLegacy = _classPrivateFieldLooseKey(\"findLowestParentFromRegistryForInstanceLegacy\");\nvar _onDrawTraceUpdates = _classPrivateFieldLooseKey(\"onDrawTraceUpdates\");\nvar _drawTraceUpdatesModern = _classPrivateFieldLooseKey(\"drawTraceUpdatesModern\");\nvar _drawTraceUpdatesLegacy = _classPrivateFieldLooseKey(\"drawTraceUpdatesLegacy\");\nvar _onHighlightElements = _classPrivateFieldLooseKey(\"onHighlightElements\");\nvar _onHighlightElementsModern = _classPrivateFieldLooseKey(\"onHighlightElementsModern\");\nvar _onHighlightElementsLegacy = _classPrivateFieldLooseKey(\"onHighlightElementsLegacy\");\nvar _onClearElementsHighlights = _classPrivateFieldLooseKey(\"onClearElementsHighlights\");\nclass DebuggingOverlayRegistry {\n  constructor() {\n    Object.defineProperty(this, _onHighlightElementsLegacy, {\n      value: _onHighlightElementsLegacy2\n    });\n    Object.defineProperty(this, _onHighlightElementsModern, {\n      value: _onHighlightElementsModern2\n    });\n    Object.defineProperty(this, _drawTraceUpdatesLegacy, {\n      value: _drawTraceUpdatesLegacy2\n    });\n    Object.defineProperty(this, _drawTraceUpdatesModern, {\n      value: _drawTraceUpdatesModern2\n    });\n    Object.defineProperty(this, _findLowestParentFromRegistryForInstanceLegacy, {\n      value: _findLowestParentFromRegistryForInstanceLegacy2\n    });\n    Object.defineProperty(this, _findLowestParentFromRegistryForInstance, {\n      value: _findLowestParentFromRegistryForInstance2\n    });\n    Object.defineProperty(this, _registry, {\n      writable: true,\n      value: new Set()\n    });\n    Object.defineProperty(this, _reactDevToolsAgent, {\n      writable: true,\n      value: null\n    });\n    Object.defineProperty(this, _onReactDevToolsAgentAttached, {\n      writable: true,\n      value: agent => {\n        _classPrivateFieldLooseBase(this, _reactDevToolsAgent)[_reactDevToolsAgent] = agent;\n        agent.addListener('drawTraceUpdates', _classPrivateFieldLooseBase(this, _onDrawTraceUpdates)[_onDrawTraceUpdates]);\n        agent.addListener('showNativeHighlight', _classPrivateFieldLooseBase(this, _onHighlightElements)[_onHighlightElements]);\n        agent.addListener('hideNativeHighlight', _classPrivateFieldLooseBase(this, _onClearElementsHighlights)[_onClearElementsHighlights]);\n      }\n    });\n    Object.defineProperty(this, _getPublicInstanceFromInstance, {\n      writable: true,\n      value: instanceHandle => {\n        if (instanceHandle.canonical?.publicInstance != null) {\n          return instanceHandle.canonical?.publicInstance;\n        }\n        if (instanceHandle.canonical != null) {\n          return instanceHandle.canonical;\n        }\n        if (instanceHandle.measure != null) {\n          return instanceHandle;\n        }\n        return null;\n      }\n    });\n    Object.defineProperty(this, _onDrawTraceUpdates, {\n      writable: true,\n      value: traceUpdates => {\n        const modernNodesUpdates = [];\n        const legacyNodesUpdates = [];\n        for (const {\n          node,\n          color\n        } of traceUpdates) {\n          const publicInstance = _classPrivateFieldLooseBase(this, _getPublicInstanceFromInstance)[_getPublicInstanceFromInstance](node);\n          if (publicInstance == null) {\n            return;\n          }\n          const instanceReactTag = findNodeHandle(node);\n          if (instanceReactTag == null) {\n            return;\n          }\n          const ReactNativeElementClass = require('../../src/private/webapis/dom/nodes/ReactNativeElement').default;\n          if (publicInstance instanceof ReactNativeElementClass) {\n            modernNodesUpdates.push({\n              id: instanceReactTag,\n              instance: publicInstance,\n              color\n            });\n          } else {\n            legacyNodesUpdates.push({\n              id: instanceReactTag,\n              instance: publicInstance,\n              color\n            });\n          }\n        }\n        if (modernNodesUpdates.length > 0) {\n          _classPrivateFieldLooseBase(this, _drawTraceUpdatesModern)[_drawTraceUpdatesModern](modernNodesUpdates);\n        }\n        if (legacyNodesUpdates.length > 0) {\n          _classPrivateFieldLooseBase(this, _drawTraceUpdatesLegacy)[_drawTraceUpdatesLegacy](legacyNodesUpdates);\n        }\n      }\n    });\n    Object.defineProperty(this, _onHighlightElements, {\n      writable: true,\n      value: nodes => {\n        for (const subscriber of _classPrivateFieldLooseBase(this, _registry)[_registry]) {\n          subscriber.debuggingOverlayRef.current?.clearElementsHighlight();\n        }\n        const ReactNativeElementClass = require('../../src/private/webapis/dom/nodes/ReactNativeElement').default;\n        const reactNativeElements = [];\n        const legacyPublicInstances = [];\n        for (const node of nodes) {\n          const publicInstance = _classPrivateFieldLooseBase(this, _getPublicInstanceFromInstance)[_getPublicInstanceFromInstance](node);\n          if (publicInstance == null) {\n            continue;\n          }\n          if (publicInstance instanceof ReactNativeElementClass) {\n            reactNativeElements.push(publicInstance);\n          } else {\n            legacyPublicInstances.push(publicInstance);\n          }\n        }\n        if (reactNativeElements.length > 0) {\n          _classPrivateFieldLooseBase(this, _onHighlightElementsModern)[_onHighlightElementsModern](reactNativeElements);\n        }\n        if (legacyPublicInstances.length > 0) {\n          _classPrivateFieldLooseBase(this, _onHighlightElementsLegacy)[_onHighlightElementsLegacy](legacyPublicInstances);\n        }\n      }\n    });\n    Object.defineProperty(this, _onClearElementsHighlights, {\n      writable: true,\n      value: () => {\n        for (const subscriber of _classPrivateFieldLooseBase(this, _registry)[_registry]) {\n          subscriber.debuggingOverlayRef.current?.clearElementsHighlight();\n        }\n      }\n    });\n    if (reactDevToolsHook?.reactDevtoolsAgent != null) {\n      _classPrivateFieldLooseBase(this, _onReactDevToolsAgentAttached)[_onReactDevToolsAgentAttached](reactDevToolsHook.reactDevtoolsAgent);\n      return;\n    }\n    reactDevToolsHook?.on?.('react-devtools', _classPrivateFieldLooseBase(this, _onReactDevToolsAgentAttached)[_onReactDevToolsAgentAttached]);\n  }\n  subscribe(subscriber) {\n    _classPrivateFieldLooseBase(this, _registry)[_registry].add(subscriber);\n  }\n  unsubscribe(subscriber) {\n    const wasPresent = _classPrivateFieldLooseBase(this, _registry)[_registry].delete(subscriber);\n    if (!wasPresent) {\n      console.error('[DebuggingOverlayRegistry] Unexpected argument for unsubscription, which was not previously subscribed:', subscriber);\n    }\n  }\n}\nfunction _findLowestParentFromRegistryForInstance2(instance) {\n  let iterator = instance;\n  while (iterator != null) {\n    for (const subscriber of _classPrivateFieldLooseBase(this, _registry)[_registry]) {\n      if (subscriber.rootViewRef.current === iterator) {\n        return subscriber;\n      }\n    }\n    iterator = iterator.parentElement;\n  }\n  return null;\n}\nfunction _findLowestParentFromRegistryForInstanceLegacy2(instance) {\n  const candidates = [];\n  for (const subscriber of _classPrivateFieldLooseBase(this, _registry)[_registry]) {\n    if (subscriber.rootViewRef.current != null && isChildPublicInstance(subscriber.rootViewRef.current, instance)) {\n      candidates.push(subscriber);\n    }\n  }\n  if (candidates.length === 0) {\n    return null;\n  }\n  if (candidates.length === 1) {\n    return candidates[0];\n  }\n  const candidatesWithNoChildren = [];\n  for (const potentialParent of candidates) {\n    let shouldSkipThisParent = false;\n    if (potentialParent.rootViewRef.current == null) {\n      continue;\n    }\n    for (const potentialChild of candidates) {\n      if (potentialChild === potentialParent) {\n        continue;\n      }\n      if (potentialChild.rootViewRef.current == null) {\n        continue;\n      }\n      if (isChildPublicInstance(potentialParent.rootViewRef.current, potentialChild.rootViewRef.current)) {\n        shouldSkipThisParent = true;\n        break;\n      }\n    }\n    if (!shouldSkipThisParent) {\n      candidatesWithNoChildren.push(potentialParent);\n    }\n  }\n  if (candidatesWithNoChildren.length === 0) {\n    console.error('[DebuggingOverlayRegistry] Unexpected circular relationship between AppContainers');\n    return null;\n  } else if (candidatesWithNoChildren.length > 1) {\n    console.error('[DebuggingOverlayRegistry] Unexpected multiple options for lowest parent AppContainer');\n    return null;\n  }\n  return candidatesWithNoChildren[0];\n}\nfunction _drawTraceUpdatesModern2(updates) {\n  const parentToTraceUpdatesMap = new Map();\n  for (const {\n    id,\n    instance,\n    color\n  } of updates) {\n    const parent = _classPrivateFieldLooseBase(this, _findLowestParentFromRegistryForInstance)[_findLowestParentFromRegistryForInstance](instance);\n    if (parent == null) {\n      continue;\n    }\n    let traceUpdatesForParent = parentToTraceUpdatesMap.get(parent);\n    if (traceUpdatesForParent == null) {\n      traceUpdatesForParent = [];\n      parentToTraceUpdatesMap.set(parent, traceUpdatesForParent);\n    }\n    const {\n      x,\n      y,\n      width,\n      height\n    } = instance.getBoundingClientRect();\n    const rootViewInstance = parent.rootViewRef.current;\n    if (rootViewInstance == null) {\n      continue;\n    }\n    const {\n      x: parentX,\n      y: parentY\n    } = rootViewInstance.getBoundingClientRect();\n    traceUpdatesForParent.push({\n      id,\n      rectangle: {\n        x: x - parentX,\n        y: y - parentY,\n        width,\n        height\n      },\n      color: processColor(color)\n    });\n  }\n  for (const [parent, traceUpdates] of parentToTraceUpdatesMap.entries()) {\n    const {\n      debuggingOverlayRef\n    } = parent;\n    debuggingOverlayRef.current?.highlightTraceUpdates(traceUpdates);\n  }\n}\nfunction _drawTraceUpdatesLegacy2(updates) {\n  const parentToTraceUpdatesPromisesMap = new Map();\n  for (const {\n    id,\n    instance,\n    color\n  } of updates) {\n    const parent = _classPrivateFieldLooseBase(this, _findLowestParentFromRegistryForInstanceLegacy)[_findLowestParentFromRegistryForInstanceLegacy](instance);\n    if (parent == null) {\n      continue;\n    }\n    let traceUpdatesPromisesForParent = parentToTraceUpdatesPromisesMap.get(parent);\n    if (traceUpdatesPromisesForParent == null) {\n      traceUpdatesPromisesForParent = [];\n      parentToTraceUpdatesPromisesMap.set(parent, traceUpdatesPromisesForParent);\n    }\n    const frameToDrawPromise = new Promise((resolve, reject) => {\n      instance.measure((x, y, width, height, left, top) => {\n        if (left == null || top == null || width == null || height == null) {\n          reject('Unexpectedly failed to call measure on an instance.');\n        }\n        resolve({\n          id,\n          rectangle: {\n            x: left,\n            y: top,\n            width,\n            height\n          },\n          color: processColor(color)\n        });\n      });\n    });\n    traceUpdatesPromisesForParent.push(frameToDrawPromise);\n  }\n  for (const [parent, traceUpdatesPromises] of parentToTraceUpdatesPromisesMap.entries()) {\n    Promise.all(traceUpdatesPromises).then(resolvedTraceUpdates => parent.debuggingOverlayRef.current?.highlightTraceUpdates(resolvedTraceUpdates)).catch(() => {});\n  }\n}\nfunction _onHighlightElementsModern2(elements) {\n  const parentToElementsMap = new Map();\n  for (const element of elements) {\n    const parent = _classPrivateFieldLooseBase(this, _findLowestParentFromRegistryForInstance)[_findLowestParentFromRegistryForInstance](element);\n    if (parent == null) {\n      continue;\n    }\n    let childElementOfAParent = parentToElementsMap.get(parent);\n    if (childElementOfAParent == null) {\n      childElementOfAParent = [];\n      parentToElementsMap.set(parent, childElementOfAParent);\n    }\n    childElementOfAParent.push(element);\n  }\n  for (const [parent, elementsToHighlight] of parentToElementsMap.entries()) {\n    const rootViewInstance = parent.rootViewRef.current;\n    if (rootViewInstance == null) {\n      return;\n    }\n    const {\n      x: parentX,\n      y: parentY\n    } = rootViewInstance.getBoundingClientRect();\n    const elementsRectangles = elementsToHighlight.map(element => {\n      const {\n        x,\n        y,\n        width,\n        height\n      } = element.getBoundingClientRect();\n      return {\n        x: x - parentX,\n        y: y - parentY,\n        width,\n        height\n      };\n    });\n    parent.debuggingOverlayRef.current?.highlightElements(elementsRectangles);\n  }\n}\nfunction _onHighlightElementsLegacy2(elements) {\n  const parentToElementsMap = new Map();\n  for (const element of elements) {\n    const parent = _classPrivateFieldLooseBase(this, _findLowestParentFromRegistryForInstanceLegacy)[_findLowestParentFromRegistryForInstanceLegacy](element);\n    if (parent == null) {\n      continue;\n    }\n    let childElementOfAParent = parentToElementsMap.get(parent);\n    if (childElementOfAParent == null) {\n      childElementOfAParent = [];\n      parentToElementsMap.set(parent, childElementOfAParent);\n    }\n    childElementOfAParent.push(element);\n  }\n  for (const [parent, elementsToHighlight] of parentToElementsMap.entries()) {\n    const promises = elementsToHighlight.map(element => new Promise((resolve, reject) => {\n      element.measure((x, y, width, height, left, top) => {\n        if (left == null || top == null || width == null || height == null) {\n          reject('Unexpectedly failed to call measure on an instance.');\n        }\n        resolve({\n          x: left,\n          y: top,\n          width,\n          height\n        });\n      });\n    }));\n    Promise.all(promises).then(resolvedElementsRectangles => parent.debuggingOverlayRef.current?.highlightElements(resolvedElementsRectangles)).catch(() => {});\n  }\n}\nconst debuggingOverlayRegistryInstance = new DebuggingOverlayRegistry();\nexport default debuggingOverlayRegistryInstance;","map":{"version":3,"names":["findNodeHandle","isChildPublicInstance","processColor","reactDevToolsHook","window","__REACT_DEVTOOLS_GLOBAL_HOOK__","_registry","_classPrivateFieldLooseKey","_reactDevToolsAgent","_onReactDevToolsAgentAttached","_getPublicInstanceFromInstance","_findLowestParentFromRegistryForInstance","_findLowestParentFromRegistryForInstanceLegacy","_onDrawTraceUpdates","_drawTraceUpdatesModern","_drawTraceUpdatesLegacy","_onHighlightElements","_onHighlightElementsModern","_onHighlightElementsLegacy","_onClearElementsHighlights","DebuggingOverlayRegistry","constructor","Object","defineProperty","value","_onHighlightElementsLegacy2","_onHighlightElementsModern2","_drawTraceUpdatesLegacy2","_drawTraceUpdatesModern2","_findLowestParentFromRegistryForInstanceLegacy2","_findLowestParentFromRegistryForInstance2","writable","Set","agent","_classPrivateFieldLooseBase","addListener","instanceHandle","canonical","publicInstance","measure","traceUpdates","modernNodesUpdates","legacyNodesUpdates","node","color","instanceReactTag","ReactNativeElementClass","require","default","push","id","instance","length","nodes","subscriber","debuggingOverlayRef","current","clearElementsHighlight","reactNativeElements","legacyPublicInstances","reactDevtoolsAgent","on","subscribe","add","unsubscribe","wasPresent","delete","console","error","iterator","rootViewRef","parentElement","candidates","candidatesWithNoChildren","potentialParent","shouldSkipThisParent","potentialChild","updates","parentToTraceUpdatesMap","Map","parent","traceUpdatesForParent","get","set","x","y","width","height","getBoundingClientRect","rootViewInstance","parentX","parentY","rectangle","entries","highlightTraceUpdates","parentToTraceUpdatesPromisesMap","traceUpdatesPromisesForParent","frameToDrawPromise","Promise","resolve","reject","left","top","traceUpdatesPromises","all","then","resolvedTraceUpdates","catch","elements","parentToElementsMap","element","childElementOfAParent","elementsToHighlight","elementsRectangles","map","highlightElements","promises","resolvedElementsRectangles","debuggingOverlayRegistryInstance"],"sources":["/home/rodo/workspace/passion/apps/muh-money/node_modules/react-native/Libraries/Debugging/DebuggingOverlayRegistry.js"],"sourcesContent":["/**\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @flow strict-local\n * @format\n * @oncall react_native\n */\n\nimport type ReactNativeElement from '../../src/private/webapis/dom/nodes/ReactNativeElement';\nimport type ReadOnlyElement from '../../src/private/webapis/dom/nodes/ReadOnlyElement';\nimport type {\n  AppContainerRootViewRef,\n  DebuggingOverlayRef,\n} from '../ReactNative/AppContainer-dev';\nimport type {NativeMethods} from '../Renderer/shims/ReactNativeTypes';\nimport type {\n  InstanceFromReactDevTools,\n  ReactDevToolsAgent,\n  ReactDevToolsAgentEvents,\n  ReactDevToolsGlobalHook,\n} from '../Types/ReactDevToolsTypes';\nimport type {\n  ElementRectangle,\n  TraceUpdate,\n} from './DebuggingOverlayNativeComponent';\n\nimport {\n  findNodeHandle,\n  isChildPublicInstance,\n} from '../ReactNative/RendererProxy';\nimport processColor from '../StyleSheet/processColor';\n\n// TODO(T171193075): __REACT_DEVTOOLS_GLOBAL_HOOK__ is always injected in dev-bundles,\n// but it is not mocked in some Jest tests. We should update Jest tests setup, so it would be the same as expected testing environment.\nconst reactDevToolsHook: ?ReactDevToolsGlobalHook =\n  window.__REACT_DEVTOOLS_GLOBAL_HOOK__;\n\nexport type DebuggingOverlayRegistrySubscriberProtocol = {\n  rootViewRef: AppContainerRootViewRef,\n  debuggingOverlayRef: DebuggingOverlayRef,\n};\n\ntype ModernNodeUpdate = {\n  id: number,\n  instance: ReactNativeElement,\n  color: string,\n};\n\ntype LegacyNodeUpdate = {\n  id: number,\n  instance: NativeMethods,\n  color: string,\n};\n\nclass DebuggingOverlayRegistry {\n  #registry: Set<DebuggingOverlayRegistrySubscriberProtocol> = new Set();\n  #reactDevToolsAgent: ReactDevToolsAgent | null = null;\n\n  constructor() {\n    if (reactDevToolsHook?.reactDevtoolsAgent != null) {\n      this.#onReactDevToolsAgentAttached(reactDevToolsHook.reactDevtoolsAgent);\n      return;\n    }\n\n    reactDevToolsHook?.on?.(\n      'react-devtools',\n      this.#onReactDevToolsAgentAttached,\n    );\n  }\n\n  subscribe(subscriber: DebuggingOverlayRegistrySubscriberProtocol) {\n    this.#registry.add(subscriber);\n  }\n\n  unsubscribe(subscriber: DebuggingOverlayRegistrySubscriberProtocol) {\n    const wasPresent = this.#registry.delete(subscriber);\n    if (!wasPresent) {\n      console.error(\n        '[DebuggingOverlayRegistry] Unexpected argument for unsubscription, which was not previously subscribed:',\n        subscriber,\n      );\n    }\n  }\n\n  #onReactDevToolsAgentAttached = (agent: ReactDevToolsAgent): void => {\n    this.#reactDevToolsAgent = agent;\n\n    agent.addListener('drawTraceUpdates', this.#onDrawTraceUpdates);\n    agent.addListener('showNativeHighlight', this.#onHighlightElements);\n    agent.addListener('hideNativeHighlight', this.#onClearElementsHighlights);\n  };\n\n  #getPublicInstanceFromInstance = (\n    instanceHandle: InstanceFromReactDevTools,\n  ): NativeMethods | null => {\n    // `canonical.publicInstance` => Fabric\n    if (instanceHandle.canonical?.publicInstance != null) {\n      return instanceHandle.canonical?.publicInstance;\n    }\n\n    // `canonical` => Legacy Fabric\n    if (instanceHandle.canonical != null) {\n      // $FlowFixMe[incompatible-return]\n      return instanceHandle.canonical;\n    }\n\n    // `instanceHandle` => Legacy renderer\n    if (instanceHandle.measure != null) {\n      // $FlowFixMe[incompatible-return]\n      return instanceHandle;\n    }\n\n    return null;\n  };\n\n  #findLowestParentFromRegistryForInstance(\n    instance: ReactNativeElement,\n  ): ?DebuggingOverlayRegistrySubscriberProtocol {\n    let iterator: ?ReadOnlyElement = instance;\n    while (iterator != null) {\n      for (const subscriber of this.#registry) {\n        if (subscriber.rootViewRef.current === iterator) {\n          return subscriber;\n        }\n      }\n\n      iterator = iterator.parentElement;\n    }\n\n    return null;\n  }\n\n  #findLowestParentFromRegistryForInstanceLegacy(\n    instance: NativeMethods,\n  ): ?DebuggingOverlayRegistrySubscriberProtocol {\n    const candidates: Array<DebuggingOverlayRegistrySubscriberProtocol> = [];\n\n    for (const subscriber of this.#registry) {\n      if (\n        subscriber.rootViewRef.current != null &&\n        // $FlowFixMe[incompatible-call] There is a lot of stuff to untangle to make types for refs work.\n        isChildPublicInstance(subscriber.rootViewRef.current, instance)\n      ) {\n        candidates.push(subscriber);\n      }\n    }\n\n    if (candidates.length === 0) {\n      // In some cases, like with LogBox in custom integrations, the whole subtree for specific React root might not have an AppContainer.\n      return null;\n    }\n\n    if (candidates.length === 1) {\n      return candidates[0];\n    }\n\n    // If there are multiple candidates, we need to find the lowest.\n    // Imagine the case when there is a modal on the screen, both of them will have their own AppContainers,\n    // but modal's AppContainer is a child of screen's AppContainer.\n    const candidatesWithNoChildren: Array<DebuggingOverlayRegistrySubscriberProtocol> =\n      [];\n    for (const potentialParent of candidates) {\n      let shouldSkipThisParent = false;\n\n      if (potentialParent.rootViewRef.current == null) {\n        continue;\n      }\n\n      for (const potentialChild of candidates) {\n        if (potentialChild === potentialParent) {\n          continue;\n        }\n\n        if (potentialChild.rootViewRef.current == null) {\n          continue;\n        }\n\n        if (\n          isChildPublicInstance(\n            // $FlowFixMe[incompatible-call] There is a lot of stuff to untangle to make types for refs work.\n            potentialParent.rootViewRef.current,\n            // $FlowFixMe[incompatible-call] There is a lot of stuff to untangle to make types for refs work.\n            potentialChild.rootViewRef.current,\n          )\n        ) {\n          shouldSkipThisParent = true;\n          break;\n        }\n      }\n\n      if (!shouldSkipThisParent) {\n        candidatesWithNoChildren.push(potentialParent);\n      }\n    }\n\n    if (candidatesWithNoChildren.length === 0) {\n      console.error(\n        '[DebuggingOverlayRegistry] Unexpected circular relationship between AppContainers',\n      );\n      return null;\n    } else if (candidatesWithNoChildren.length > 1) {\n      console.error(\n        '[DebuggingOverlayRegistry] Unexpected multiple options for lowest parent AppContainer',\n      );\n      return null;\n    }\n\n    return candidatesWithNoChildren[0];\n  }\n\n  #onDrawTraceUpdates: (\n    ...ReactDevToolsAgentEvents['drawTraceUpdates']\n  ) => void = traceUpdates => {\n    const modernNodesUpdates: Array<ModernNodeUpdate> = [];\n    const legacyNodesUpdates: Array<LegacyNodeUpdate> = [];\n\n    for (const {node, color} of traceUpdates) {\n      const publicInstance = this.#getPublicInstanceFromInstance(node);\n      if (publicInstance == null) {\n        return;\n      }\n\n      const instanceReactTag = findNodeHandle(node);\n      if (instanceReactTag == null) {\n        return;\n      }\n\n      // Lazy import to avoid dependency cycle.\n      const ReactNativeElementClass =\n        require('../../src/private/webapis/dom/nodes/ReactNativeElement').default;\n      if (publicInstance instanceof ReactNativeElementClass) {\n        modernNodesUpdates.push({\n          id: instanceReactTag,\n          instance: publicInstance,\n          color,\n        });\n      } else {\n        legacyNodesUpdates.push({\n          id: instanceReactTag,\n          instance: publicInstance,\n          color,\n        });\n      }\n    }\n\n    if (modernNodesUpdates.length > 0) {\n      this.#drawTraceUpdatesModern(modernNodesUpdates);\n    }\n\n    if (legacyNodesUpdates.length > 0) {\n      this.#drawTraceUpdatesLegacy(legacyNodesUpdates);\n    }\n  };\n\n  #drawTraceUpdatesModern(updates: Array<ModernNodeUpdate>): void {\n    const parentToTraceUpdatesMap = new Map<\n      DebuggingOverlayRegistrySubscriberProtocol,\n      Array<TraceUpdate>,\n    >();\n    for (const {id, instance, color} of updates) {\n      const parent = this.#findLowestParentFromRegistryForInstance(instance);\n      if (parent == null) {\n        continue;\n      }\n\n      let traceUpdatesForParent = parentToTraceUpdatesMap.get(parent);\n      if (traceUpdatesForParent == null) {\n        traceUpdatesForParent = [];\n        parentToTraceUpdatesMap.set(parent, traceUpdatesForParent);\n      }\n\n      const {x, y, width, height} = instance.getBoundingClientRect();\n\n      const rootViewInstance = parent.rootViewRef.current;\n      if (rootViewInstance == null) {\n        continue;\n      }\n\n      const {x: parentX, y: parentY} =\n        // $FlowFixMe[prop-missing] React Native View is not a descendant of ReactNativeElement yet. We should be able to remove it once Paper is no longer supported.\n        rootViewInstance.getBoundingClientRect();\n\n      // DebuggingOverlay will scale to the same size as a Root view. Substract Root view position from the element position\n      // to calculate the element's position relatively to its parent DebuggingOverlay.\n      // We can't call `getBoundingClientRect` on the debuggingOverlayRef, because its a ref for the native component, which doesn't have it, hopefully yet.\n      traceUpdatesForParent.push({\n        id,\n        rectangle: {x: x - parentX, y: y - parentY, width, height},\n        color: processColor(color),\n      });\n    }\n\n    for (const [parent, traceUpdates] of parentToTraceUpdatesMap.entries()) {\n      const {debuggingOverlayRef} = parent;\n      debuggingOverlayRef.current?.highlightTraceUpdates(traceUpdates);\n    }\n  }\n\n  // TODO: remove once DOM Node APIs are opt-in by default and Paper is no longer supported.\n  #drawTraceUpdatesLegacy(updates: Array<LegacyNodeUpdate>): void {\n    const parentToTraceUpdatesPromisesMap = new Map<\n      DebuggingOverlayRegistrySubscriberProtocol,\n      Array<Promise<TraceUpdate>>,\n    >();\n\n    for (const {id, instance, color} of updates) {\n      const parent =\n        this.#findLowestParentFromRegistryForInstanceLegacy(instance);\n\n      if (parent == null) {\n        continue;\n      }\n\n      let traceUpdatesPromisesForParent =\n        parentToTraceUpdatesPromisesMap.get(parent);\n      if (traceUpdatesPromisesForParent == null) {\n        traceUpdatesPromisesForParent = [];\n        parentToTraceUpdatesPromisesMap.set(\n          parent,\n          traceUpdatesPromisesForParent,\n        );\n      }\n\n      const frameToDrawPromise = new Promise<TraceUpdate>((resolve, reject) => {\n        instance.measure((x, y, width, height, left, top) => {\n          // measure can execute callback without any values provided to signal error.\n          if (left == null || top == null || width == null || height == null) {\n            reject('Unexpectedly failed to call measure on an instance.');\n          }\n\n          resolve({\n            id,\n            rectangle: {x: left, y: top, width, height},\n            color: processColor(color),\n          });\n        });\n      });\n\n      traceUpdatesPromisesForParent.push(frameToDrawPromise);\n    }\n\n    for (const [\n      parent,\n      traceUpdatesPromises,\n    ] of parentToTraceUpdatesPromisesMap.entries()) {\n      Promise.all(traceUpdatesPromises)\n        .then(resolvedTraceUpdates =>\n          parent.debuggingOverlayRef.current?.highlightTraceUpdates(\n            resolvedTraceUpdates,\n          ),\n        )\n        .catch(() => {\n          // noop. For legacy architecture (Paper) this can happen for root views or LogBox button.\n          // LogBox case: it has a separate React root, so `measure` fails.\n          // Calling `console.error` here would trigger rendering a new LogBox button, for which we will call measure again, this is a cycle.\n          // Don't spam the UI with errors for such cases.\n        });\n    }\n  }\n\n  #onHighlightElements: (\n    ...ReactDevToolsAgentEvents['showNativeHighlight']\n  ) => void = nodes => {\n    // First clear highlights for every container\n    for (const subscriber of this.#registry) {\n      subscriber.debuggingOverlayRef.current?.clearElementsHighlight();\n    }\n\n    // Lazy import to avoid dependency cycle.\n    const ReactNativeElementClass =\n      require('../../src/private/webapis/dom/nodes/ReactNativeElement').default;\n\n    const reactNativeElements: Array<ReactNativeElement> = [];\n    const legacyPublicInstances: Array<NativeMethods> = [];\n\n    for (const node of nodes) {\n      const publicInstance = this.#getPublicInstanceFromInstance(node);\n      if (publicInstance == null) {\n        continue;\n      }\n\n      if (publicInstance instanceof ReactNativeElementClass) {\n        reactNativeElements.push(publicInstance);\n      } else {\n        legacyPublicInstances.push(publicInstance);\n      }\n    }\n\n    if (reactNativeElements.length > 0) {\n      this.#onHighlightElementsModern(reactNativeElements);\n    }\n\n    if (legacyPublicInstances.length > 0) {\n      this.#onHighlightElementsLegacy(legacyPublicInstances);\n    }\n  };\n\n  #onHighlightElementsModern(elements: Array<ReactNativeElement>): void {\n    const parentToElementsMap = new Map<\n      DebuggingOverlayRegistrySubscriberProtocol,\n      Array<ReactNativeElement>,\n    >();\n\n    for (const element of elements) {\n      const parent = this.#findLowestParentFromRegistryForInstance(element);\n      if (parent == null) {\n        continue;\n      }\n\n      let childElementOfAParent = parentToElementsMap.get(parent);\n      if (childElementOfAParent == null) {\n        childElementOfAParent = [];\n        parentToElementsMap.set(parent, childElementOfAParent);\n      }\n\n      childElementOfAParent.push(element);\n    }\n\n    for (const [parent, elementsToHighlight] of parentToElementsMap.entries()) {\n      const rootViewInstance = parent.rootViewRef.current;\n      if (rootViewInstance == null) {\n        return;\n      }\n\n      const {x: parentX, y: parentY} =\n        // $FlowFixMe[prop-missing] React Native View is not a descendant of ReactNativeElement yet. We should be able to remove it once Paper is no longer supported.\n        rootViewInstance.getBoundingClientRect();\n\n      // DebuggingOverlay will scale to the same size as a Root view. Substract Root view position from the element position\n      // to calculate the element's position relatively to its parent DebuggingOverlay.\n      // We can't call `getBoundingClientRect` on the debuggingOverlayRef, because its a ref for the native component, which doesn't have it, hopefully yet.\n      const elementsRectangles = elementsToHighlight.map(element => {\n        const {x, y, width, height} = element.getBoundingClientRect();\n        return {x: x - parentX, y: y - parentY, width, height};\n      });\n\n      parent.debuggingOverlayRef.current?.highlightElements(elementsRectangles);\n    }\n  }\n\n  // TODO: remove once DOM Node APIs are opt-in by default and Paper is no longer supported.\n  #onHighlightElementsLegacy(elements: Array<NativeMethods>): void {\n    const parentToElementsMap = new Map<\n      DebuggingOverlayRegistrySubscriberProtocol,\n      Array<NativeMethods>,\n    >();\n\n    for (const element of elements) {\n      const parent =\n        this.#findLowestParentFromRegistryForInstanceLegacy(element);\n      if (parent == null) {\n        continue;\n      }\n\n      let childElementOfAParent = parentToElementsMap.get(parent);\n      if (childElementOfAParent == null) {\n        childElementOfAParent = [];\n        parentToElementsMap.set(parent, childElementOfAParent);\n      }\n\n      childElementOfAParent.push(element);\n    }\n\n    for (const [parent, elementsToHighlight] of parentToElementsMap.entries()) {\n      const promises = elementsToHighlight.map(\n        element =>\n          new Promise<ElementRectangle>((resolve, reject) => {\n            element.measure((x, y, width, height, left, top) => {\n              // measure can execute callback without any values provided to signal error.\n              if (\n                left == null ||\n                top == null ||\n                width == null ||\n                height == null\n              ) {\n                reject('Unexpectedly failed to call measure on an instance.');\n              }\n\n              resolve({x: left, y: top, width, height});\n            });\n          }),\n      );\n\n      Promise.all(promises)\n        .then(resolvedElementsRectangles =>\n          parent.debuggingOverlayRef.current?.highlightElements(\n            resolvedElementsRectangles,\n          ),\n        )\n        .catch(() => {\n          // noop. For legacy architecture (Paper) this can happen for root views or LogBox button.\n          // LogBox case: it has a separate React root, so `measure` fails.\n          // Calling `console.error` here would trigger rendering a new LogBox button, for which we will call measure again, this is a cycle.\n          // Don't spam the UI with errors for such cases.\n        });\n    }\n  }\n\n  #onClearElementsHighlights: (\n    ...ReactDevToolsAgentEvents['hideNativeHighlight']\n  ) => void = () => {\n    for (const subscriber of this.#registry) {\n      subscriber.debuggingOverlayRef.current?.clearElementsHighlight();\n    }\n  };\n}\n\nconst debuggingOverlayRegistryInstance: DebuggingOverlayRegistry =\n  new DebuggingOverlayRegistry();\nexport default debuggingOverlayRegistryInstance;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}