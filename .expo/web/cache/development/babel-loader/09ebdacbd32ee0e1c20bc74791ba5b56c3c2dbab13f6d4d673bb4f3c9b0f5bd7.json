{"ast":null,"code":"var _jsxFileName = \"/home/rodo/workspace/passion/apps/muh-money/src/screens/ChangeEmailScreen/ChangeEmailScreen.tsx\";\nimport { Formik } from \"formik\";\nimport View from \"react-native-web/dist/exports/View\";\nimport * as Yup from \"yup\";\nimport useCall from \"../../api/useCall\";\nimport { AuthForm, Button, TextInput } from \"../../components\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst changeEmailSchema = Yup.object().shape({\n  email: Yup.string().email(\"Email invalide\").required(\"Champ requis\"),\n  password: Yup.string().required(\"Champ requis\")\n});\nexport default function ChangeEmailScreen({\n  navigation\n}) {\n  const {\n    call,\n    isLoading\n  } = useCall(() => {}, {\n    successMessage: \"Votre adresse email a été changée avec succès\",\n    onSuccess() {}\n  });\n  return _jsxDEV(AuthForm, {\n    children: _jsxDEV(Formik, {\n      validationSchema: changeEmailSchema,\n      initialValues: {\n        email: \"\",\n        password: \"\"\n      },\n      onSubmit: async ({\n        email,\n        password\n      }) => {\n        await call({\n          email,\n          password\n        });\n      },\n      children: ({\n        values,\n        errors,\n        handleChange,\n        handleSubmit\n      }) => _jsxDEV(View, {\n        style: {\n          flex: 1,\n          justifyContent: \"space-between\"\n        },\n        children: [_jsxDEV(View, {\n          children: [_jsxDEV(TextInput, {\n            value: values.email,\n            onChangeText: handleChange(\"email\"),\n            errorMessage: errors.email,\n            label: \"Nouvelle adresse email\",\n            placeholder: \"Veuillez saisir votre nouvelle adresse email\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 40,\n            columnNumber: 15\n          }, this), _jsxDEV(TextInput, {\n            secureTextEntry: true,\n            value: values.password,\n            onChangeText: handleChange(\"password\"),\n            errorMessage: errors.password,\n            label: \"Mot de passe\",\n            placeholder: \"Veuillez saisir votre mot de passe\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 46,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 39,\n          columnNumber: 13\n        }, this), _jsxDEV(Button, {\n          onPress: handleSubmit,\n          loading: isLoading,\n          children: \"Confirmer\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 54,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 38,\n        columnNumber: 11\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 27,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 25,\n    columnNumber: 5\n  }, this);\n}","map":{"version":3,"names":["Formik","View","Yup","useCall","AuthForm","Button","TextInput","jsxDEV","_jsxDEV","changeEmailSchema","object","shape","email","string","required","password","ChangeEmailScreen","navigation","call","isLoading","successMessage","onSuccess","children","validationSchema","initialValues","onSubmit","values","errors","handleChange","handleSubmit","style","flex","justifyContent","value","onChangeText","errorMessage","label","placeholder","fileName","_jsxFileName","lineNumber","columnNumber","secureTextEntry","onPress","loading"],"sources":["/home/rodo/workspace/passion/apps/muh-money/src/screens/ChangeEmailScreen/ChangeEmailScreen.tsx"],"sourcesContent":["import { NativeStackScreenProps } from \"@react-navigation/native-stack\";\nimport { Formik } from \"formik\";\nimport { View } from \"react-native\";\nimport * as Yup from \"yup\";\nimport useCall from \"../../api/useCall\";\nimport { AuthForm, Button, TextInput } from \"../../components\";\nimport { RootStackParamList } from \"../../types\";\n\nconst changeEmailSchema = Yup.object().shape({\n  email: Yup.string().email(\"Email invalide\").required(\"Champ requis\"),\n  password: Yup.string().required(\"Champ requis\"),\n});\n\ntype ChangeEmailScreenProps = NativeStackScreenProps<RootStackParamList, 'ChangeEmail'>;\n\nexport default function ChangeEmailScreen({ navigation }: ChangeEmailScreenProps) {\n\n  const { call, isLoading } = useCall(() => { }, {\n    successMessage: \"Votre adresse email a été changée avec succès\",\n    onSuccess() {\n    },\n  })\n\n  return (\n    <AuthForm\n    >\n      <Formik\n        validationSchema={changeEmailSchema}\n        initialValues={{\n          email: \"\",\n          password: \"\",\n        }}\n        onSubmit={\n          async ({ email, password }) => {\n            await call({ email, password });\n          }}>\n        {({ values, errors, handleChange, handleSubmit }) => (\n          <View style={{ flex: 1, justifyContent: \"space-between\" }}>\n            <View>\n              <TextInput\n                value={values.email}\n                onChangeText={handleChange(\"email\")}\n                errorMessage={errors.email}\n                label=\"Nouvelle adresse email\"\n                placeholder=\"Veuillez saisir votre nouvelle adresse email\" />\n              <TextInput\n                secureTextEntry\n                value={values.password}\n                onChangeText={handleChange(\"password\")}\n                errorMessage={errors.password}\n                label=\"Mot de passe\"\n                placeholder=\"Veuillez saisir votre mot de passe\" />\n            </View>\n            <Button onPress={handleSubmit} loading={isLoading}>Confirmer</Button>\n          </View>\n        )}\n      </Formik>\n    </AuthForm>\n  )\n}\n"],"mappings":";AACA,SAASA,MAAM,QAAQ,QAAQ;AAAC,OAAAC,IAAA;AAEhC,OAAO,KAAKC,GAAG,MAAM,KAAK;AAC1B,OAAOC,OAAO,MAAM,mBAAmB;AACvC,SAASC,QAAQ,EAAEC,MAAM,EAAEC,SAAS,QAAQ,kBAAkB;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAG/D,MAAMC,iBAAiB,GAAGP,GAAG,CAACQ,MAAM,CAAC,CAAC,CAACC,KAAK,CAAC;EAC3CC,KAAK,EAAEV,GAAG,CAACW,MAAM,CAAC,CAAC,CAACD,KAAK,CAAC,gBAAgB,CAAC,CAACE,QAAQ,CAAC,cAAc,CAAC;EACpEC,QAAQ,EAAEb,GAAG,CAACW,MAAM,CAAC,CAAC,CAACC,QAAQ,CAAC,cAAc;AAChD,CAAC,CAAC;AAIF,eAAe,SAASE,iBAAiBA,CAAC;EAAEC;AAAmC,CAAC,EAAE;EAEhF,MAAM;IAAEC,IAAI;IAAEC;EAAU,CAAC,GAAGhB,OAAO,CAAC,MAAM,CAAE,CAAC,EAAE;IAC7CiB,cAAc,EAAE,+CAA+C;IAC/DC,SAASA,CAAA,EAAG,CACZ;EACF,CAAC,CAAC;EAEF,OACEb,OAAA,CAACJ,QAAQ;IAAAkB,QAAA,EAEPd,OAAA,CAACR,MAAM;MACLuB,gBAAgB,EAAEd,iBAAkB;MACpCe,aAAa,EAAE;QACbZ,KAAK,EAAE,EAAE;QACTG,QAAQ,EAAE;MACZ,CAAE;MACFU,QAAQ,EACN,MAAAA,CAAO;QAAEb,KAAK;QAAEG;MAAS,CAAC,KAAK;QAC7B,MAAMG,IAAI,CAAC;UAAEN,KAAK;UAAEG;QAAS,CAAC,CAAC;MACjC,CAAE;MAAAO,QAAA,EACHA,CAAC;QAAEI,MAAM;QAAEC,MAAM;QAAEC,YAAY;QAAEC;MAAa,CAAC,KAC9CrB,OAAA,CAACP,IAAI;QAAC6B,KAAK,EAAE;UAAEC,IAAI,EAAE,CAAC;UAAEC,cAAc,EAAE;QAAgB,CAAE;QAAAV,QAAA,GACxDd,OAAA,CAACP,IAAI;UAAAqB,QAAA,GACHd,OAAA,CAACF,SAAS;YACR2B,KAAK,EAAEP,MAAM,CAACd,KAAM;YACpBsB,YAAY,EAAEN,YAAY,CAAC,OAAO,CAAE;YACpCO,YAAY,EAAER,MAAM,CAACf,KAAM;YAC3BwB,KAAK,EAAC,wBAAwB;YAC9BC,WAAW,EAAC;UAA8C;YAAAC,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OAAE,CAAC,EAC/DjC,OAAA,CAACF,SAAS;YACRoC,eAAe;YACfT,KAAK,EAAEP,MAAM,CAACX,QAAS;YACvBmB,YAAY,EAAEN,YAAY,CAAC,UAAU,CAAE;YACvCO,YAAY,EAAER,MAAM,CAACZ,QAAS;YAC9BqB,KAAK,EAAC,cAAc;YACpBC,WAAW,EAAC;UAAoC;YAAAC,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OAAE,CAAC;QAAA;UAAAH,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OACjD,CAAC,EACPjC,OAAA,CAACH,MAAM;UAACsC,OAAO,EAAEd,YAAa;UAACe,OAAO,EAAEzB,SAAU;UAAAG,QAAA,EAAC;QAAS;UAAAgB,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAQ,CAAC;MAAA;QAAAH,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OACjE;IACP;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACK;EAAC;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACD,CAAC;AAEf","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}