{"ast":null,"code":"import _defineProperty from \"@babel/runtime/helpers/defineProperty\";\nfunction ownKeys(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }\nfunction _objectSpread(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? ownKeys(Object(t), !0).forEach(function (r) { _defineProperty(e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; }\nimport parseErrorStack from '../../Core/Devtools/parseErrorStack';\nimport UTFSequence from '../../UTFSequence';\nimport stringifySafe from '../../Utilities/stringifySafe';\nimport ansiRegex from 'ansi-regex';\nconst ANSI_REGEX = ansiRegex().source;\nconst BABEL_TRANSFORM_ERROR_FORMAT = /^(?:TransformError )?(?:SyntaxError: |ReferenceError: )(.*): (.*) \\((\\d+):(\\d+)\\)\\n\\n([\\s\\S]+)/;\nconst BABEL_CODE_FRAME_MARKER_PATTERN = new RegExp(['^', `(?:${ANSI_REGEX})*`, '>', `(?:${ANSI_REGEX})*`, ' +', '[0-9]+', ' \\\\|'].join(''), 'm');\nconst BABEL_CODE_FRAME_ERROR_FORMAT = /^(?:TransformError )?(?:.*):? (?:.*?)(\\/.*): ([\\s\\S]+?)\\n([ >]{2}[\\d\\s]+ \\|[\\s\\S]+|\\u{001b}[\\s\\S]+)/u;\nconst METRO_ERROR_FORMAT = /^(?:InternalError Metro has encountered an error:) (.*): (.*) \\((\\d+):(\\d+)\\)\\n\\n([\\s\\S]+)/u;\nconst SUBSTITUTION = UTFSequence.BOM + '%s';\nexport function parseInterpolation(args) {\n  const categoryParts = [];\n  const contentParts = [];\n  const substitutionOffsets = [];\n  const remaining = [...args];\n  if (typeof remaining[0] === 'string') {\n    const formatString = String(remaining.shift());\n    const formatStringParts = formatString.split('%s');\n    const substitutionCount = formatStringParts.length - 1;\n    const substitutions = remaining.splice(0, substitutionCount);\n    let categoryString = '';\n    let contentString = '';\n    let substitutionIndex = 0;\n    for (const formatStringPart of formatStringParts) {\n      categoryString += formatStringPart;\n      contentString += formatStringPart;\n      if (substitutionIndex < substitutionCount) {\n        if (substitutionIndex < substitutions.length) {\n          const substitution = typeof substitutions[substitutionIndex] === 'string' ? substitutions[substitutionIndex] : stringifySafe(substitutions[substitutionIndex]);\n          substitutionOffsets.push({\n            length: substitution.length,\n            offset: contentString.length\n          });\n          categoryString += SUBSTITUTION;\n          contentString += substitution;\n        } else {\n          substitutionOffsets.push({\n            length: 2,\n            offset: contentString.length\n          });\n          categoryString += '%s';\n          contentString += '%s';\n        }\n        substitutionIndex++;\n      }\n    }\n    categoryParts.push(categoryString);\n    contentParts.push(contentString);\n  }\n  const remainingArgs = remaining.map(arg => {\n    return typeof arg === 'string' ? arg : stringifySafe(arg);\n  });\n  categoryParts.push(...remainingArgs);\n  contentParts.push(...remainingArgs);\n  return {\n    category: categoryParts.join(' '),\n    message: {\n      content: contentParts.join(' '),\n      substitutions: substitutionOffsets\n    }\n  };\n}\nfunction isComponentStack(consoleArgument) {\n  const isOldComponentStackFormat = / {4}in/.test(consoleArgument);\n  const isNewComponentStackFormat = / {4}at/.test(consoleArgument);\n  const isNewJSCComponentStackFormat = /@.*\\n/.test(consoleArgument);\n  return isOldComponentStackFormat || isNewComponentStackFormat || isNewJSCComponentStackFormat;\n}\nexport function parseComponentStack(message) {\n  const stack = parseErrorStack(message);\n  if (stack && stack.length > 0) {\n    return stack.map(frame => ({\n      content: frame.methodName,\n      collapse: frame.collapse || false,\n      fileName: frame.file == null ? 'unknown' : frame.file,\n      location: {\n        column: frame.column == null ? -1 : frame.column,\n        row: frame.lineNumber == null ? -1 : frame.lineNumber\n      }\n    }));\n  }\n  return message.split(/\\n {4}in /g).map(s => {\n    if (!s) {\n      return null;\n    }\n    const match = s.match(/(.*) \\(at (.*\\.(?:js|jsx|ts|tsx)):([\\d]+)\\)/);\n    if (!match) {\n      return null;\n    }\n    let [content, fileName, row] = match.slice(1);\n    return {\n      content,\n      fileName,\n      location: {\n        column: -1,\n        row: parseInt(row, 10)\n      }\n    };\n  }).filter(Boolean);\n}\nexport function parseLogBoxException(error) {\n  const message = error.originalMessage != null ? error.originalMessage : 'Unknown';\n  const metroInternalError = message.match(METRO_ERROR_FORMAT);\n  if (metroInternalError) {\n    const [content, fileName, row, column, codeFrame] = metroInternalError.slice(1);\n    return {\n      level: 'fatal',\n      type: 'Metro Error',\n      stack: [],\n      isComponentError: false,\n      componentStack: [],\n      codeFrame: {\n        fileName,\n        location: {\n          row: parseInt(row, 10),\n          column: parseInt(column, 10)\n        },\n        content: codeFrame\n      },\n      message: {\n        content,\n        substitutions: []\n      },\n      category: `${fileName}-${row}-${column}`,\n      extraData: error.extraData\n    };\n  }\n  const babelTransformError = message.match(BABEL_TRANSFORM_ERROR_FORMAT);\n  if (babelTransformError) {\n    const [fileName, content, row, column, codeFrame] = babelTransformError.slice(1);\n    return {\n      level: 'syntax',\n      stack: [],\n      isComponentError: false,\n      componentStack: [],\n      codeFrame: {\n        fileName,\n        location: {\n          row: parseInt(row, 10),\n          column: parseInt(column, 10)\n        },\n        content: codeFrame\n      },\n      message: {\n        content,\n        substitutions: []\n      },\n      category: `${fileName}-${row}-${column}`,\n      extraData: error.extraData\n    };\n  }\n  if (BABEL_CODE_FRAME_MARKER_PATTERN.test(message)) {\n    const babelCodeFrameError = message.match(BABEL_CODE_FRAME_ERROR_FORMAT);\n    if (babelCodeFrameError) {\n      const [fileName, content, codeFrame] = babelCodeFrameError.slice(1);\n      return {\n        level: 'syntax',\n        stack: [],\n        isComponentError: false,\n        componentStack: [],\n        codeFrame: {\n          fileName,\n          location: null,\n          content: codeFrame\n        },\n        message: {\n          content,\n          substitutions: []\n        },\n        category: `${fileName}-${1}-${1}`,\n        extraData: error.extraData\n      };\n    }\n  }\n  if (message.match(/^TransformError /)) {\n    return {\n      level: 'syntax',\n      stack: error.stack,\n      isComponentError: error.isComponentError,\n      componentStack: [],\n      message: {\n        content: message,\n        substitutions: []\n      },\n      category: message,\n      extraData: error.extraData\n    };\n  }\n  const componentStack = error.componentStack;\n  if (error.isFatal || error.isComponentError) {\n    return _objectSpread({\n      level: 'fatal',\n      stack: error.stack,\n      isComponentError: error.isComponentError,\n      componentStack: componentStack != null ? parseComponentStack(componentStack) : [],\n      extraData: error.extraData\n    }, parseInterpolation([message]));\n  }\n  if (componentStack != null) {\n    return _objectSpread({\n      level: 'error',\n      stack: error.stack,\n      isComponentError: error.isComponentError,\n      componentStack: parseComponentStack(componentStack),\n      extraData: error.extraData\n    }, parseInterpolation([message]));\n  }\n  return _objectSpread({\n    level: 'error',\n    stack: error.stack,\n    isComponentError: error.isComponentError,\n    extraData: error.extraData\n  }, parseLogBoxLog([message]));\n}\nexport function parseLogBoxLog(args) {\n  const message = args[0];\n  let argsWithoutComponentStack = [];\n  let componentStack = [];\n  if (typeof message === 'string' && message.slice(-2) === '%s' && args.length > 0) {\n    const lastArg = args[args.length - 1];\n    if (typeof lastArg === 'string' && isComponentStack(lastArg)) {\n      argsWithoutComponentStack = args.slice(0, -1);\n      argsWithoutComponentStack[0] = message.slice(0, -2);\n      componentStack = parseComponentStack(lastArg);\n    }\n  }\n  if (componentStack.length === 0) {\n    for (const arg of args) {\n      if (typeof arg === 'string' && isComponentStack(arg)) {\n        let messageEndIndex = arg.search(/\\n {4}(in|at) /);\n        if (messageEndIndex < 0) {\n          messageEndIndex = arg.search(/\\n/);\n        }\n        if (messageEndIndex > 0) {\n          argsWithoutComponentStack.push(arg.slice(0, messageEndIndex));\n        }\n        componentStack = parseComponentStack(arg);\n      } else {\n        argsWithoutComponentStack.push(arg);\n      }\n    }\n  }\n  return _objectSpread(_objectSpread({}, parseInterpolation(argsWithoutComponentStack)), {}, {\n    componentStack\n  });\n}","map":{"version":3,"names":["parseErrorStack","UTFSequence","stringifySafe","ansiRegex","ANSI_REGEX","source","BABEL_TRANSFORM_ERROR_FORMAT","BABEL_CODE_FRAME_MARKER_PATTERN","RegExp","join","BABEL_CODE_FRAME_ERROR_FORMAT","METRO_ERROR_FORMAT","SUBSTITUTION","BOM","parseInterpolation","args","categoryParts","contentParts","substitutionOffsets","remaining","formatString","String","shift","formatStringParts","split","substitutionCount","length","substitutions","splice","categoryString","contentString","substitutionIndex","formatStringPart","substitution","push","offset","remainingArgs","map","arg","category","message","content","isComponentStack","consoleArgument","isOldComponentStackFormat","test","isNewComponentStackFormat","isNewJSCComponentStackFormat","parseComponentStack","stack","frame","methodName","collapse","fileName","file","location","column","row","lineNumber","s","match","slice","parseInt","filter","Boolean","parseLogBoxException","error","originalMessage","metroInternalError","codeFrame","level","type","isComponentError","componentStack","extraData","babelTransformError","babelCodeFrameError","isFatal","_objectSpread","parseLogBoxLog","argsWithoutComponentStack","lastArg","messageEndIndex","search"],"sources":["/home/rodo/workspace/passion/apps/muh-money/node_modules/react-native/Libraries/LogBox/Data/parseLogBoxLog.js"],"sourcesContent":["/**\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @flow strict\n * @format\n */\n\nimport type {ExceptionData} from '../../Core/NativeExceptionsManager';\nimport type {LogBoxLogData} from './LogBoxLog';\n\nimport parseErrorStack from '../../Core/Devtools/parseErrorStack';\nimport UTFSequence from '../../UTFSequence';\nimport stringifySafe from '../../Utilities/stringifySafe';\nimport ansiRegex from 'ansi-regex';\n\nconst ANSI_REGEX = ansiRegex().source;\n\nconst BABEL_TRANSFORM_ERROR_FORMAT =\n  /^(?:TransformError )?(?:SyntaxError: |ReferenceError: )(.*): (.*) \\((\\d+):(\\d+)\\)\\n\\n([\\s\\S]+)/;\n\n// https://github.com/babel/babel/blob/33dbb85e9e9fe36915273080ecc42aee62ed0ade/packages/babel-code-frame/src/index.ts#L183-L184\nconst BABEL_CODE_FRAME_MARKER_PATTERN = new RegExp(\n  [\n    // Beginning of a line (per 'm' flag)\n    '^',\n    // Optional ANSI escapes for colors\n    `(?:${ANSI_REGEX})*`,\n    // Marker\n    '>',\n    // Optional ANSI escapes for colors\n    `(?:${ANSI_REGEX})*`,\n    // Left padding for line number\n    ' +',\n    // Line number\n    '[0-9]+',\n    // Gutter\n    ' \\\\|',\n  ].join(''),\n  'm',\n);\n\nconst BABEL_CODE_FRAME_ERROR_FORMAT =\n  // eslint-disable-next-line no-control-regex\n  /^(?:TransformError )?(?:.*):? (?:.*?)(\\/.*): ([\\s\\S]+?)\\n([ >]{2}[\\d\\s]+ \\|[\\s\\S]+|\\u{001b}[\\s\\S]+)/u;\n\nconst METRO_ERROR_FORMAT =\n  /^(?:InternalError Metro has encountered an error:) (.*): (.*) \\((\\d+):(\\d+)\\)\\n\\n([\\s\\S]+)/u;\n\nexport type ExtendedExceptionData = ExceptionData & {\n  isComponentError: boolean,\n  ...\n};\nexport type Category = string;\nexport type CodeFrame = $ReadOnly<{|\n  content: string,\n  location: ?{\n    row: number,\n    column: number,\n    ...\n  },\n  fileName: string,\n\n  // TODO: When React switched to using call stack frames,\n  // we gained the ability to use the collapse flag, but\n  // it is not integrated into the LogBox UI.\n  collapse?: boolean,\n|}>;\nexport type Message = $ReadOnly<{|\n  content: string,\n  substitutions: $ReadOnlyArray<\n    $ReadOnly<{|\n      length: number,\n      offset: number,\n    |}>,\n  >,\n|}>;\n\nexport type ComponentStack = $ReadOnlyArray<CodeFrame>;\n\nconst SUBSTITUTION = UTFSequence.BOM + '%s';\n\nexport function parseInterpolation(args: $ReadOnlyArray<mixed>): $ReadOnly<{|\n  category: Category,\n  message: Message,\n|}> {\n  const categoryParts = [];\n  const contentParts = [];\n  const substitutionOffsets = [];\n\n  const remaining = [...args];\n  if (typeof remaining[0] === 'string') {\n    const formatString = String(remaining.shift());\n    const formatStringParts = formatString.split('%s');\n    const substitutionCount = formatStringParts.length - 1;\n    const substitutions = remaining.splice(0, substitutionCount);\n\n    let categoryString = '';\n    let contentString = '';\n\n    let substitutionIndex = 0;\n    for (const formatStringPart of formatStringParts) {\n      categoryString += formatStringPart;\n      contentString += formatStringPart;\n\n      if (substitutionIndex < substitutionCount) {\n        if (substitutionIndex < substitutions.length) {\n          // Don't stringify a string type.\n          // It adds quotation mark wrappers around the string,\n          // which causes the LogBox to look odd.\n          const substitution =\n            typeof substitutions[substitutionIndex] === 'string'\n              ? substitutions[substitutionIndex]\n              : stringifySafe(substitutions[substitutionIndex]);\n          substitutionOffsets.push({\n            length: substitution.length,\n            offset: contentString.length,\n          });\n\n          categoryString += SUBSTITUTION;\n          contentString += substitution;\n        } else {\n          substitutionOffsets.push({\n            length: 2,\n            offset: contentString.length,\n          });\n\n          categoryString += '%s';\n          contentString += '%s';\n        }\n\n        substitutionIndex++;\n      }\n    }\n\n    categoryParts.push(categoryString);\n    contentParts.push(contentString);\n  }\n\n  const remainingArgs = remaining.map(arg => {\n    // Don't stringify a string type.\n    // It adds quotation mark wrappers around the string,\n    // which causes the LogBox to look odd.\n    return typeof arg === 'string' ? arg : stringifySafe(arg);\n  });\n  categoryParts.push(...remainingArgs);\n  contentParts.push(...remainingArgs);\n\n  return {\n    category: categoryParts.join(' '),\n    message: {\n      content: contentParts.join(' '),\n      substitutions: substitutionOffsets,\n    },\n  };\n}\n\nfunction isComponentStack(consoleArgument: string) {\n  const isOldComponentStackFormat = / {4}in/.test(consoleArgument);\n  const isNewComponentStackFormat = / {4}at/.test(consoleArgument);\n  const isNewJSCComponentStackFormat = /@.*\\n/.test(consoleArgument);\n\n  return (\n    isOldComponentStackFormat ||\n    isNewComponentStackFormat ||\n    isNewJSCComponentStackFormat\n  );\n}\n\nexport function parseComponentStack(message: string): ComponentStack {\n  // In newer versions of React, the component stack is formatted as a call stack frame.\n  // First try to parse the component stack as a call stack frame, and if that doesn't\n  // work then we'll fallback to the old custom component stack format parsing.\n  const stack = parseErrorStack(message);\n  if (stack && stack.length > 0) {\n    return stack.map(frame => ({\n      content: frame.methodName,\n      collapse: frame.collapse || false,\n      fileName: frame.file == null ? 'unknown' : frame.file,\n      location: {\n        column: frame.column == null ? -1 : frame.column,\n        row: frame.lineNumber == null ? -1 : frame.lineNumber,\n      },\n    }));\n  }\n\n  return message\n    .split(/\\n {4}in /g)\n    .map(s => {\n      if (!s) {\n        return null;\n      }\n      const match = s.match(/(.*) \\(at (.*\\.(?:js|jsx|ts|tsx)):([\\d]+)\\)/);\n      if (!match) {\n        return null;\n      }\n\n      let [content, fileName, row] = match.slice(1);\n      return {\n        content,\n        fileName,\n        location: {column: -1, row: parseInt(row, 10)},\n      };\n    })\n    .filter(Boolean);\n}\n\nexport function parseLogBoxException(\n  error: ExtendedExceptionData,\n): LogBoxLogData {\n  const message =\n    error.originalMessage != null ? error.originalMessage : 'Unknown';\n\n  const metroInternalError = message.match(METRO_ERROR_FORMAT);\n  if (metroInternalError) {\n    const [content, fileName, row, column, codeFrame] =\n      metroInternalError.slice(1);\n\n    return {\n      level: 'fatal',\n      type: 'Metro Error',\n      stack: [],\n      isComponentError: false,\n      componentStack: [],\n      codeFrame: {\n        fileName,\n        location: {\n          row: parseInt(row, 10),\n          column: parseInt(column, 10),\n        },\n        content: codeFrame,\n      },\n      message: {\n        content,\n        substitutions: [],\n      },\n      category: `${fileName}-${row}-${column}`,\n      extraData: error.extraData,\n    };\n  }\n\n  const babelTransformError = message.match(BABEL_TRANSFORM_ERROR_FORMAT);\n  if (babelTransformError) {\n    // Transform errors are thrown from inside the Babel transformer.\n    const [fileName, content, row, column, codeFrame] =\n      babelTransformError.slice(1);\n\n    return {\n      level: 'syntax',\n      stack: [],\n      isComponentError: false,\n      componentStack: [],\n      codeFrame: {\n        fileName,\n        location: {\n          row: parseInt(row, 10),\n          column: parseInt(column, 10),\n        },\n        content: codeFrame,\n      },\n      message: {\n        content,\n        substitutions: [],\n      },\n      category: `${fileName}-${row}-${column}`,\n      extraData: error.extraData,\n    };\n  }\n\n  // Perform a cheap match first before trying to parse the full message, which\n  // can get expensive for arbitrary input.\n  if (BABEL_CODE_FRAME_MARKER_PATTERN.test(message)) {\n    const babelCodeFrameError = message.match(BABEL_CODE_FRAME_ERROR_FORMAT);\n\n    if (babelCodeFrameError) {\n      // Codeframe errors are thrown from any use of buildCodeFrameError.\n      const [fileName, content, codeFrame] = babelCodeFrameError.slice(1);\n      return {\n        level: 'syntax',\n        stack: [],\n        isComponentError: false,\n        componentStack: [],\n        codeFrame: {\n          fileName,\n          location: null, // We are not given the location.\n          content: codeFrame,\n        },\n        message: {\n          content,\n          substitutions: [],\n        },\n        category: `${fileName}-${1}-${1}`,\n        extraData: error.extraData,\n      };\n    }\n  }\n\n  if (message.match(/^TransformError /)) {\n    return {\n      level: 'syntax',\n      stack: error.stack,\n      isComponentError: error.isComponentError,\n      componentStack: [],\n      message: {\n        content: message,\n        substitutions: [],\n      },\n      category: message,\n      extraData: error.extraData,\n    };\n  }\n\n  const componentStack = error.componentStack;\n  if (error.isFatal || error.isComponentError) {\n    return {\n      level: 'fatal',\n      stack: error.stack,\n      isComponentError: error.isComponentError,\n      componentStack:\n        componentStack != null ? parseComponentStack(componentStack) : [],\n      extraData: error.extraData,\n      ...parseInterpolation([message]),\n    };\n  }\n\n  if (componentStack != null) {\n    // It is possible that console errors have a componentStack.\n    return {\n      level: 'error',\n      stack: error.stack,\n      isComponentError: error.isComponentError,\n      componentStack: parseComponentStack(componentStack),\n      extraData: error.extraData,\n      ...parseInterpolation([message]),\n    };\n  }\n\n  // Most `console.error` calls won't have a componentStack. We parse them like\n  // regular logs which have the component stack buried in the message.\n  return {\n    level: 'error',\n    stack: error.stack,\n    isComponentError: error.isComponentError,\n    extraData: error.extraData,\n    ...parseLogBoxLog([message]),\n  };\n}\n\nexport function parseLogBoxLog(args: $ReadOnlyArray<mixed>): {|\n  componentStack: ComponentStack,\n  category: Category,\n  message: Message,\n|} {\n  const message = args[0];\n  let argsWithoutComponentStack: Array<mixed> = [];\n  let componentStack: ComponentStack = [];\n\n  // Extract component stack from warnings like \"Some warning%s\".\n  if (\n    typeof message === 'string' &&\n    message.slice(-2) === '%s' &&\n    args.length > 0\n  ) {\n    const lastArg = args[args.length - 1];\n    if (typeof lastArg === 'string' && isComponentStack(lastArg)) {\n      argsWithoutComponentStack = args.slice(0, -1);\n      argsWithoutComponentStack[0] = message.slice(0, -2);\n      componentStack = parseComponentStack(lastArg);\n    }\n  }\n\n  if (componentStack.length === 0) {\n    // Try finding the component stack elsewhere.\n    for (const arg of args) {\n      if (typeof arg === 'string' && isComponentStack(arg)) {\n        // Strip out any messages before the component stack.\n        let messageEndIndex = arg.search(/\\n {4}(in|at) /);\n        if (messageEndIndex < 0) {\n          // Handle JSC component stacks.\n          messageEndIndex = arg.search(/\\n/);\n        }\n        if (messageEndIndex > 0) {\n          argsWithoutComponentStack.push(arg.slice(0, messageEndIndex));\n        }\n\n        componentStack = parseComponentStack(arg);\n      } else {\n        argsWithoutComponentStack.push(arg);\n      }\n    }\n  }\n\n  return {\n    ...parseInterpolation(argsWithoutComponentStack),\n    componentStack,\n  };\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}