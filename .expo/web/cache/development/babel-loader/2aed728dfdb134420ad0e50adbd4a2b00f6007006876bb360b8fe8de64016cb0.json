{"ast":null,"code":"import Networking from '../../Network/RCTNetworking';\nimport HMRClient from '../../Utilities/HMRClient';\nimport LoadingView from '../../Utilities/LoadingView';\nimport getDevServer from './getDevServer';\nlet pendingRequests = 0;\nconst cachedPromisesByUrl = new Map();\nfunction asyncRequest(url) {\n  let id = null;\n  let responseText = null;\n  let headers = null;\n  let dataListener;\n  let completeListener;\n  let responseListener;\n  let incrementalDataListener;\n  return new Promise((resolve, reject) => {\n    dataListener = Networking.addListener('didReceiveNetworkData', ([requestId, response]) => {\n      if (requestId === id) {\n        responseText = response;\n      }\n    });\n    incrementalDataListener = Networking.addListener('didReceiveNetworkIncrementalData', ([requestId, data]) => {\n      if (requestId === id) {\n        if (responseText != null) {\n          responseText += data;\n        } else {\n          responseText = data;\n        }\n      }\n    });\n    responseListener = Networking.addListener('didReceiveNetworkResponse', ([requestId, status, responseHeaders]) => {\n      if (requestId === id) {\n        headers = responseHeaders;\n      }\n    });\n    completeListener = Networking.addListener('didCompleteNetworkResponse', ([requestId, error]) => {\n      if (requestId === id) {\n        if (error) {\n          reject(error);\n        } else {\n          resolve({\n            body: responseText,\n            headers\n          });\n        }\n      }\n    });\n    Networking.sendRequest('GET', 'asyncRequest', url, {}, '', 'text', true, 0, requestId => {\n      id = requestId;\n    }, true);\n  }).finally(() => {\n    dataListener?.remove();\n    completeListener?.remove();\n    responseListener?.remove();\n    incrementalDataListener?.remove();\n  });\n}\nfunction buildUrlForBundle(bundlePathAndQuery) {\n  const {\n    url: serverUrl\n  } = getDevServer();\n  return serverUrl.replace(/\\/+$/, '') + '/' + bundlePathAndQuery.replace(/^\\/+/, '');\n}\nmodule.exports = function (bundlePathAndQuery) {\n  const requestUrl = buildUrlForBundle(bundlePathAndQuery);\n  let loadPromise = cachedPromisesByUrl.get(requestUrl);\n  if (loadPromise) {\n    return loadPromise;\n  }\n  LoadingView.showMessage('Downloading...', 'load');\n  ++pendingRequests;\n  loadPromise = asyncRequest(requestUrl).then(({\n    body,\n    headers\n  }) => {\n    if (headers['Content-Type'] != null && headers['Content-Type'].indexOf('application/json') >= 0) {\n      throw new Error(JSON.parse(body).message || `Unknown error fetching '${bundlePathAndQuery}'`);\n    }\n    HMRClient.registerBundle(requestUrl);\n    if (global.globalEvalWithSourceUrl) {\n      global.globalEvalWithSourceUrl(body, requestUrl);\n    } else {\n      eval(body);\n    }\n  }).catch(e => {\n    cachedPromisesByUrl.delete(requestUrl);\n    throw e;\n  }).finally(() => {\n    if (! --pendingRequests) {\n      LoadingView.hide();\n    }\n  });\n  cachedPromisesByUrl.set(requestUrl, loadPromise);\n  return loadPromise;\n};","map":{"version":3,"names":["Networking","HMRClient","LoadingView","getDevServer","pendingRequests","cachedPromisesByUrl","Map","asyncRequest","url","id","responseText","headers","dataListener","completeListener","responseListener","incrementalDataListener","Promise","resolve","reject","addListener","requestId","response","data","status","responseHeaders","error","body","sendRequest","finally","remove","buildUrlForBundle","bundlePathAndQuery","serverUrl","replace","module","exports","requestUrl","loadPromise","get","showMessage","then","indexOf","Error","JSON","parse","message","registerBundle","global","globalEvalWithSourceUrl","eval","catch","e","delete","hide","set"],"sources":["/home/rodo/workspace/passion/apps/muh-money/node_modules/react-native/Libraries/Core/Devtools/loadBundleFromServer.js"],"sourcesContent":["/**\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @flow strict-local\n * @format\n * @oncall react_native\n */\n\nimport Networking from '../../Network/RCTNetworking';\nimport HMRClient from '../../Utilities/HMRClient';\nimport LoadingView from '../../Utilities/LoadingView';\nimport getDevServer from './getDevServer';\n\ndeclare var global: {globalEvalWithSourceUrl?: (string, string) => mixed, ...};\n\nlet pendingRequests = 0;\n\nconst cachedPromisesByUrl = new Map<string, Promise<void>>();\n\nfunction asyncRequest(\n  url: string,\n): Promise<{body: string, headers: {[string]: string}}> {\n  let id = null;\n  let responseText = null;\n  let headers = null;\n  let dataListener;\n  let completeListener;\n  let responseListener;\n  let incrementalDataListener;\n  return new Promise<{body: string, headers: {[string]: string}}>(\n    (resolve, reject) => {\n      dataListener = Networking.addListener(\n        'didReceiveNetworkData',\n        ([requestId, response]) => {\n          if (requestId === id) {\n            responseText = response;\n          }\n        },\n      );\n      incrementalDataListener = Networking.addListener(\n        'didReceiveNetworkIncrementalData',\n        ([requestId, data]) => {\n          if (requestId === id) {\n            if (responseText != null) {\n              responseText += data;\n            } else {\n              responseText = data;\n            }\n          }\n        },\n      );\n      responseListener = Networking.addListener(\n        'didReceiveNetworkResponse',\n        ([requestId, status, responseHeaders]) => {\n          if (requestId === id) {\n            headers = responseHeaders;\n          }\n        },\n      );\n      completeListener = Networking.addListener(\n        'didCompleteNetworkResponse',\n        ([requestId, error]) => {\n          if (requestId === id) {\n            if (error) {\n              reject(error);\n            } else {\n              //$FlowFixMe[incompatible-call]\n              resolve({body: responseText, headers});\n            }\n          }\n        },\n      );\n      Networking.sendRequest(\n        'GET',\n        'asyncRequest',\n        url,\n        {},\n        '',\n        'text',\n        true,\n        0,\n        requestId => {\n          id = requestId;\n        },\n        true,\n      );\n    },\n  ).finally(() => {\n    dataListener?.remove();\n    completeListener?.remove();\n    responseListener?.remove();\n    incrementalDataListener?.remove();\n  });\n}\n\nfunction buildUrlForBundle(bundlePathAndQuery: string) {\n  const {url: serverUrl} = getDevServer();\n  return (\n    serverUrl.replace(/\\/+$/, '') + '/' + bundlePathAndQuery.replace(/^\\/+/, '')\n  );\n}\n\nmodule.exports = function (bundlePathAndQuery: string): Promise<void> {\n  const requestUrl = buildUrlForBundle(bundlePathAndQuery);\n  let loadPromise = cachedPromisesByUrl.get(requestUrl);\n\n  if (loadPromise) {\n    return loadPromise;\n  }\n  LoadingView.showMessage('Downloading...', 'load');\n  ++pendingRequests;\n\n  loadPromise = asyncRequest(requestUrl)\n    .then<void>(({body, headers}) => {\n      if (\n        headers['Content-Type'] != null &&\n        headers['Content-Type'].indexOf('application/json') >= 0\n      ) {\n        // Errors are returned as JSON.\n        throw new Error(\n          JSON.parse(body).message ||\n            `Unknown error fetching '${bundlePathAndQuery}'`,\n        );\n      }\n\n      HMRClient.registerBundle(requestUrl);\n\n      // Some engines do not support `sourceURL` as a comment. We expose a\n      // `globalEvalWithSourceUrl` function to handle updates in that case.\n      if (global.globalEvalWithSourceUrl) {\n        global.globalEvalWithSourceUrl(body, requestUrl);\n      } else {\n        // eslint-disable-next-line no-eval\n        eval(body);\n      }\n    })\n    .catch<void>(e => {\n      cachedPromisesByUrl.delete(requestUrl);\n      throw e;\n    })\n    .finally(() => {\n      if (!--pendingRequests) {\n        LoadingView.hide();\n      }\n    });\n\n  cachedPromisesByUrl.set(requestUrl, loadPromise);\n  return loadPromise;\n};\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}