{"ast":null,"code":"import Platform from '../Utilities/Platform';\nlet isEnabled = false;\nif (Platform.OS === 'web') {\n  const canUseDOM = Boolean(true && window.document && window.document.createElement);\n  if (canUseDOM) {\n    const HOVER_THRESHOLD_MS = 1000;\n    let lastTouchTimestamp = 0;\n    const enableHover = () => {\n      if (isEnabled || Date.now() - lastTouchTimestamp < HOVER_THRESHOLD_MS) {\n        return;\n      }\n      isEnabled = true;\n    };\n    const disableHover = () => {\n      lastTouchTimestamp = Date.now();\n      if (isEnabled) {\n        isEnabled = false;\n      }\n    };\n    document.addEventListener('touchstart', disableHover, true);\n    document.addEventListener('touchmove', disableHover, true);\n    document.addEventListener('mousemove', enableHover, true);\n  }\n}\nexport function isHoverEnabled() {\n  return isEnabled;\n}","map":{"version":3,"names":["Platform","isEnabled","OS","canUseDOM","Boolean","window","document","createElement","HOVER_THRESHOLD_MS","lastTouchTimestamp","enableHover","Date","now","disableHover","addEventListener","isHoverEnabled"],"sources":["/home/rodo/workspace/passion/apps/muh-money/node_modules/react-native/Libraries/Pressability/HoverState.js"],"sourcesContent":["/**\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @flow strict\n * @format\n */\n\nimport Platform from '../Utilities/Platform';\n\nlet isEnabled = false;\n\nif (Platform.OS === 'web') {\n  const canUseDOM = Boolean(\n    typeof window !== 'undefined' &&\n      window.document &&\n      window.document.createElement,\n  );\n\n  if (canUseDOM) {\n    /**\n     * Web browsers emulate mouse events (and hover states) after touch events.\n     * This code infers when the currently-in-use modality supports hover\n     * (including for multi-modality devices) and considers \"hover\" to be enabled\n     * if a mouse movement occurs more than 1 second after the last touch event.\n     * This threshold is long enough to account for longer delays between the\n     * browser firing touch and mouse events on low-powered devices.\n     */\n    const HOVER_THRESHOLD_MS = 1000;\n    let lastTouchTimestamp = 0;\n\n    const enableHover = () => {\n      if (isEnabled || Date.now() - lastTouchTimestamp < HOVER_THRESHOLD_MS) {\n        return;\n      }\n      isEnabled = true;\n    };\n\n    const disableHover = () => {\n      lastTouchTimestamp = Date.now();\n      if (isEnabled) {\n        isEnabled = false;\n      }\n    };\n\n    document.addEventListener('touchstart', disableHover, true);\n    document.addEventListener('touchmove', disableHover, true);\n    document.addEventListener('mousemove', enableHover, true);\n  }\n}\n\nexport function isHoverEnabled(): boolean {\n  return isEnabled;\n}\n"],"mappings":"AAUA,OAAOA,QAAQ,MAAM,uBAAuB;AAE5C,IAAIC,SAAS,GAAG,KAAK;AAErB,IAAID,QAAQ,CAACE,EAAE,KAAK,KAAK,EAAE;EACzB,MAAMC,SAAS,GAAGC,OAAO,CACvB,QACEC,MAAM,CAACC,QAAQ,IACfD,MAAM,CAACC,QAAQ,CAACC,aACpB,CAAC;EAED,IAAIJ,SAAS,EAAE;IASb,MAAMK,kBAAkB,GAAG,IAAI;IAC/B,IAAIC,kBAAkB,GAAG,CAAC;IAE1B,MAAMC,WAAW,GAAGA,CAAA,KAAM;MACxB,IAAIT,SAAS,IAAIU,IAAI,CAACC,GAAG,CAAC,CAAC,GAAGH,kBAAkB,GAAGD,kBAAkB,EAAE;QACrE;MACF;MACAP,SAAS,GAAG,IAAI;IAClB,CAAC;IAED,MAAMY,YAAY,GAAGA,CAAA,KAAM;MACzBJ,kBAAkB,GAAGE,IAAI,CAACC,GAAG,CAAC,CAAC;MAC/B,IAAIX,SAAS,EAAE;QACbA,SAAS,GAAG,KAAK;MACnB;IACF,CAAC;IAEDK,QAAQ,CAACQ,gBAAgB,CAAC,YAAY,EAAED,YAAY,EAAE,IAAI,CAAC;IAC3DP,QAAQ,CAACQ,gBAAgB,CAAC,WAAW,EAAED,YAAY,EAAE,IAAI,CAAC;IAC1DP,QAAQ,CAACQ,gBAAgB,CAAC,WAAW,EAAEJ,WAAW,EAAE,IAAI,CAAC;EAC3D;AACF;AAEA,OAAO,SAASK,cAAcA,CAAA,EAAY;EACxC,OAAOd,SAAS;AAClB","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}