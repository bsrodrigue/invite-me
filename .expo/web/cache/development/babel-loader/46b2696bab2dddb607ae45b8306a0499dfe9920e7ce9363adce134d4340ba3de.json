{"ast":null,"code":"import _defineProperty from \"@babel/runtime/helpers/defineProperty\";\nfunction ownKeys(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }\nfunction _objectSpread(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? ownKeys(Object(t), !0).forEach(function (r) { _defineProperty(e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; }\nimport processColor from '../../StyleSheet/processColor';\nimport Platform from '../../Utilities/Platform';\nimport NativeStatusBarManagerAndroid from './NativeStatusBarManagerAndroid';\nimport NativeStatusBarManagerIOS from './NativeStatusBarManagerIOS';\nimport invariant from 'invariant';\nimport * as React from 'react';\nfunction mergePropsStack(propsStack, defaultValues) {\n  return propsStack.reduce((prev, cur) => {\n    for (const prop in cur) {\n      if (cur[prop] != null) {\n        prev[prop] = cur[prop];\n      }\n    }\n    return prev;\n  }, _objectSpread({}, defaultValues));\n}\nfunction createStackEntry(props) {\n  const animated = props.animated ?? false;\n  const showHideTransition = props.showHideTransition ?? 'fade';\n  return {\n    backgroundColor: props.backgroundColor != null ? {\n      value: props.backgroundColor,\n      animated\n    } : null,\n    barStyle: props.barStyle != null ? {\n      value: props.barStyle,\n      animated\n    } : null,\n    translucent: props.translucent,\n    hidden: props.hidden != null ? {\n      value: props.hidden,\n      animated,\n      transition: showHideTransition\n    } : null,\n    networkActivityIndicatorVisible: props.networkActivityIndicatorVisible\n  };\n}\nclass StatusBar extends React.Component {\n  static _propsStack = [];\n  static _defaultProps = createStackEntry({\n    backgroundColor: Platform.OS === 'android' ? NativeStatusBarManagerAndroid.getConstants().DEFAULT_BACKGROUND_COLOR ?? 'black' : 'black',\n    barStyle: 'default',\n    translucent: false,\n    hidden: false,\n    networkActivityIndicatorVisible: false\n  });\n  static _updateImmediate = null;\n  static _currentValues = null;\n  static currentHeight = Platform.OS === 'android' ? NativeStatusBarManagerAndroid.getConstants().HEIGHT : null;\n  static setHidden(hidden, animation) {\n    animation = animation || 'none';\n    StatusBar._defaultProps.hidden.value = hidden;\n    if (Platform.OS === 'ios') {\n      NativeStatusBarManagerIOS.setHidden(hidden, animation);\n    } else if (Platform.OS === 'android') {\n      NativeStatusBarManagerAndroid.setHidden(hidden);\n    }\n  }\n  static setBarStyle(style, animated) {\n    animated = animated || false;\n    StatusBar._defaultProps.barStyle.value = style;\n    if (Platform.OS === 'ios') {\n      NativeStatusBarManagerIOS.setStyle(style, animated);\n    } else if (Platform.OS === 'android') {\n      NativeStatusBarManagerAndroid.setStyle(style);\n    }\n  }\n  static setNetworkActivityIndicatorVisible(visible) {\n    if (Platform.OS !== 'ios') {\n      console.warn('`setNetworkActivityIndicatorVisible` is only available on iOS');\n      return;\n    }\n    StatusBar._defaultProps.networkActivityIndicatorVisible = visible;\n    NativeStatusBarManagerIOS.setNetworkActivityIndicatorVisible(visible);\n  }\n  static setBackgroundColor(color, animated) {\n    if (Platform.OS !== 'android') {\n      console.warn('`setBackgroundColor` is only available on Android');\n      return;\n    }\n    animated = animated || false;\n    StatusBar._defaultProps.backgroundColor.value = color;\n    const processedColor = processColor(color);\n    if (processedColor == null) {\n      console.warn(`\\`StatusBar.setBackgroundColor\\`: Color ${color} parsed to null or undefined`);\n      return;\n    }\n    invariant(typeof processedColor === 'number', 'Unexpected color given for StatusBar.setBackgroundColor');\n    NativeStatusBarManagerAndroid.setColor(processedColor, animated);\n  }\n  static setTranslucent(translucent) {\n    if (Platform.OS !== 'android') {\n      console.warn('`setTranslucent` is only available on Android');\n      return;\n    }\n    StatusBar._defaultProps.translucent = translucent;\n    NativeStatusBarManagerAndroid.setTranslucent(translucent);\n  }\n  static pushStackEntry(props) {\n    const entry = createStackEntry(props);\n    StatusBar._propsStack.push(entry);\n    StatusBar._updatePropsStack();\n    return entry;\n  }\n  static popStackEntry(entry) {\n    const index = StatusBar._propsStack.indexOf(entry);\n    if (index !== -1) {\n      StatusBar._propsStack.splice(index, 1);\n    }\n    StatusBar._updatePropsStack();\n  }\n  static replaceStackEntry(entry, props) {\n    const newEntry = createStackEntry(props);\n    const index = StatusBar._propsStack.indexOf(entry);\n    if (index !== -1) {\n      StatusBar._propsStack[index] = newEntry;\n    }\n    StatusBar._updatePropsStack();\n    return newEntry;\n  }\n  _stackEntry = null;\n  componentDidMount() {\n    this._stackEntry = StatusBar.pushStackEntry(this.props);\n  }\n  componentWillUnmount() {\n    StatusBar.popStackEntry(this._stackEntry);\n  }\n  componentDidUpdate() {\n    this._stackEntry = StatusBar.replaceStackEntry(this._stackEntry, this.props);\n  }\n  static _updatePropsStack = () => {\n    clearImmediate(StatusBar._updateImmediate);\n    StatusBar._updateImmediate = setImmediate(() => {\n      const oldProps = StatusBar._currentValues;\n      const mergedProps = mergePropsStack(StatusBar._propsStack, StatusBar._defaultProps);\n      if (Platform.OS === 'ios') {\n        if (!oldProps || oldProps.barStyle.value !== mergedProps.barStyle.value) {\n          NativeStatusBarManagerIOS.setStyle(mergedProps.barStyle.value, mergedProps.barStyle.animated || false);\n        }\n        if (!oldProps || oldProps.hidden.value !== mergedProps.hidden.value) {\n          NativeStatusBarManagerIOS.setHidden(mergedProps.hidden.value, mergedProps.hidden.animated ? mergedProps.hidden.transition : 'none');\n        }\n        if (!oldProps || oldProps.networkActivityIndicatorVisible !== mergedProps.networkActivityIndicatorVisible) {\n          NativeStatusBarManagerIOS.setNetworkActivityIndicatorVisible(mergedProps.networkActivityIndicatorVisible);\n        }\n      } else if (Platform.OS === 'android') {\n        NativeStatusBarManagerAndroid.setStyle(mergedProps.barStyle.value);\n        const processedColor = processColor(mergedProps.backgroundColor.value);\n        if (processedColor == null) {\n          console.warn(`\\`StatusBar._updatePropsStack\\`: Color ${mergedProps.backgroundColor.value} parsed to null or undefined`);\n        } else {\n          invariant(typeof processedColor === 'number', 'Unexpected color given in StatusBar._updatePropsStack');\n          NativeStatusBarManagerAndroid.setColor(processedColor, mergedProps.backgroundColor.animated);\n        }\n        if (!oldProps || oldProps.hidden.value !== mergedProps.hidden.value) {\n          NativeStatusBarManagerAndroid.setHidden(mergedProps.hidden.value);\n        }\n        if (!oldProps || oldProps.translucent !== mergedProps.translucent || mergedProps.translucent) {\n          NativeStatusBarManagerAndroid.setTranslucent(mergedProps.translucent);\n        }\n      }\n      StatusBar._currentValues = mergedProps;\n    });\n  };\n  render() {\n    return null;\n  }\n}\nmodule.exports = StatusBar;","map":{"version":3,"names":["processColor","Platform","NativeStatusBarManagerAndroid","NativeStatusBarManagerIOS","invariant","React","mergePropsStack","propsStack","defaultValues","reduce","prev","cur","prop","_objectSpread","createStackEntry","props","animated","showHideTransition","backgroundColor","value","barStyle","translucent","hidden","transition","networkActivityIndicatorVisible","StatusBar","Component","_propsStack","_defaultProps","OS","getConstants","DEFAULT_BACKGROUND_COLOR","_updateImmediate","_currentValues","currentHeight","HEIGHT","setHidden","animation","setBarStyle","style","setStyle","setNetworkActivityIndicatorVisible","visible","console","warn","setBackgroundColor","color","processedColor","setColor","setTranslucent","pushStackEntry","entry","push","_updatePropsStack","popStackEntry","index","indexOf","splice","replaceStackEntry","newEntry","_stackEntry","componentDidMount","componentWillUnmount","componentDidUpdate","clearImmediate","setImmediate","oldProps","mergedProps","render","module","exports"],"sources":["/home/rodo/workspace/passion/apps/muh-money/node_modules/react-native/Libraries/Components/StatusBar/StatusBar.js"],"sourcesContent":["/**\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @format\n * @flow\n */\n\nimport type {ColorValue} from '../../StyleSheet/StyleSheet';\n\nimport processColor from '../../StyleSheet/processColor';\nimport Platform from '../../Utilities/Platform';\nimport NativeStatusBarManagerAndroid from './NativeStatusBarManagerAndroid';\nimport NativeStatusBarManagerIOS from './NativeStatusBarManagerIOS';\nimport invariant from 'invariant';\nimport * as React from 'react';\n\n/**\n * Status bar style\n */\nexport type StatusBarStyle = $Keys<{\n  /**\n   * Default status bar style (dark for iOS, light for Android)\n   */\n  default: string,\n  /**\n   * Dark background, white texts and icons\n   */\n  'light-content': string,\n  /**\n   * Light background, dark texts and icons\n   */\n  'dark-content': string,\n  ...\n}>;\n\n/**\n * Status bar animation\n */\nexport type StatusBarAnimation = $Keys<{\n  /**\n   * No animation\n   */\n  none: string,\n  /**\n   * Fade animation\n   */\n  fade: string,\n  /**\n   * Slide animation\n   */\n  slide: string,\n  ...\n}>;\n\ntype AndroidProps = $ReadOnly<{|\n  /**\n   * The background color of the status bar.\n   * @platform android\n   */\n  backgroundColor?: ?ColorValue,\n  /**\n   * If the status bar is translucent.\n   * When translucent is set to true, the app will draw under the status bar.\n   * This is useful when using a semi transparent status bar color.\n   *\n   * @platform android\n   */\n  translucent?: ?boolean,\n|}>;\n\ntype IOSProps = $ReadOnly<{|\n  /**\n   * If the network activity indicator should be visible.\n   *\n   * @platform ios\n   */\n  networkActivityIndicatorVisible?: ?boolean,\n  /**\n   * The transition effect when showing and hiding the status bar using the `hidden`\n   * prop. Defaults to 'fade'.\n   *\n   * @platform ios\n   */\n  showHideTransition?: ?('fade' | 'slide' | 'none'),\n|}>;\n\ntype Props = $ReadOnly<{|\n  ...AndroidProps,\n  ...IOSProps,\n  /**\n   * If the status bar is hidden.\n   */\n  hidden?: ?boolean,\n  /**\n   * If the transition between status bar property changes should be animated.\n   * Supported for backgroundColor, barStyle and hidden.\n   */\n  animated?: ?boolean,\n  /**\n   * Sets the color of the status bar text.\n   */\n  barStyle?: ?('default' | 'light-content' | 'dark-content'),\n|}>;\n\n/**\n * Merges the prop stack with the default values.\n */\nfunction mergePropsStack(\n  propsStack: Array<Object>,\n  defaultValues: Object,\n): Object {\n  return propsStack.reduce(\n    (prev, cur) => {\n      for (const prop in cur) {\n        if (cur[prop] != null) {\n          prev[prop] = cur[prop];\n        }\n      }\n      return prev;\n    },\n    {...defaultValues},\n  );\n}\n\n/**\n * Returns an object to insert in the props stack from the props\n * and the transition/animation info.\n */\nfunction createStackEntry(props: any): any {\n  const animated = props.animated ?? false;\n  const showHideTransition = props.showHideTransition ?? 'fade';\n  return {\n    backgroundColor:\n      props.backgroundColor != null\n        ? {\n            value: props.backgroundColor,\n            animated,\n          }\n        : null,\n    barStyle:\n      props.barStyle != null\n        ? {\n            value: props.barStyle,\n            animated,\n          }\n        : null,\n    translucent: props.translucent,\n    hidden:\n      props.hidden != null\n        ? {\n            value: props.hidden,\n            animated,\n            transition: showHideTransition,\n          }\n        : null,\n    networkActivityIndicatorVisible: props.networkActivityIndicatorVisible,\n  };\n}\n\n/**\n * Component to control the app status bar.\n *\n * ### Usage with Navigator\n *\n * It is possible to have multiple `StatusBar` components mounted at the same\n * time. The props will be merged in the order the `StatusBar` components were\n * mounted. One use case is to specify status bar styles per route using `Navigator`.\n *\n * ```\n *  <View>\n *    <StatusBar\n *      backgroundColor=\"blue\"\n *      barStyle=\"light-content\"\n *    />\n *    <Navigator\n *      initialRoute={{statusBarHidden: true}}\n *      renderScene={(route, navigator) =>\n *        <View>\n *          <StatusBar hidden={route.statusBarHidden} />\n *          ...\n *        </View>\n *      }\n *    />\n *  </View>\n * ```\n *\n * ### Imperative API\n *\n * For cases where using a component is not ideal, there are static methods\n * to manipulate the `StatusBar` display stack. These methods have the same\n * behavior as mounting and unmounting a `StatusBar` component.\n *\n * For example, you can call `StatusBar.pushStackEntry` to update the status bar\n * before launching a third-party native UI component, and then call\n * `StatusBar.popStackEntry` when completed.\n *\n * ```\n * const openThirdPartyBugReporter = async () => {\n *   // The bug reporter has a dark background, so we push a new status bar style.\n *   const stackEntry = StatusBar.pushStackEntry({barStyle: 'light-content'});\n *\n *   // `open` returns a promise that resolves when the UI is dismissed.\n *   await BugReporter.open();\n *\n *   // Don't forget to call `popStackEntry` when you're done.\n *   StatusBar.popStackEntry(stackEntry);\n * };\n * ```\n *\n * There is a legacy imperative API that enables you to manually update the\n * status bar styles. However, the legacy API does not update the internal\n * `StatusBar` display stack, which means that any changes will be overridden\n * whenever a `StatusBar` component is mounted or unmounted.\n *\n * It is strongly advised that you use `pushStackEntry`, `popStackEntry`, or\n * `replaceStackEntry` instead of the static methods beginning with `set`.\n *\n * ### Constants\n *\n * `currentHeight` (Android only) The height of the status bar.\n */\nclass StatusBar extends React.Component<Props> {\n  static _propsStack: Array<any> = [];\n\n  static _defaultProps: any = createStackEntry({\n    backgroundColor:\n      Platform.OS === 'android'\n        ? NativeStatusBarManagerAndroid.getConstants()\n            .DEFAULT_BACKGROUND_COLOR ?? 'black'\n        : 'black',\n    barStyle: 'default',\n    translucent: false,\n    hidden: false,\n    networkActivityIndicatorVisible: false,\n  });\n\n  // Timer for updating the native module values at the end of the frame.\n  // $FlowFixMe[missing-local-annot]\n  static _updateImmediate = null;\n\n  // The current merged values from the props stack.\n  // $FlowFixMe[missing-local-annot]\n  static _currentValues = null;\n\n  // TODO(janic): Provide a real API to deal with status bar height. See the\n  // discussion in #6195.\n  /**\n   * The current height of the status bar on the device.\n   *\n   * @platform android\n   */\n  static currentHeight: ?number =\n    Platform.OS === 'android'\n      ? NativeStatusBarManagerAndroid.getConstants().HEIGHT\n      : null;\n\n  // Provide an imperative API as static functions of the component.\n  // See the corresponding prop for more detail.\n\n  /**\n   * Show or hide the status bar\n   * @param hidden Hide the status bar.\n   * @param animation Optional animation when\n   *    changing the status bar hidden property.\n   */\n  static setHidden(hidden: boolean, animation?: StatusBarAnimation) {\n    animation = animation || 'none';\n    StatusBar._defaultProps.hidden.value = hidden;\n    if (Platform.OS === 'ios') {\n      NativeStatusBarManagerIOS.setHidden(hidden, animation);\n    } else if (Platform.OS === 'android') {\n      NativeStatusBarManagerAndroid.setHidden(hidden);\n    }\n  }\n\n  /**\n   * Set the status bar style\n   * @param style Status bar style to set\n   * @param animated Animate the style change.\n   */\n  static setBarStyle(style: StatusBarStyle, animated?: boolean) {\n    animated = animated || false;\n    StatusBar._defaultProps.barStyle.value = style;\n    if (Platform.OS === 'ios') {\n      NativeStatusBarManagerIOS.setStyle(style, animated);\n    } else if (Platform.OS === 'android') {\n      NativeStatusBarManagerAndroid.setStyle(style);\n    }\n  }\n\n  /**\n   * Control the visibility of the network activity indicator\n   * @param visible Show the indicator.\n   */\n  static setNetworkActivityIndicatorVisible(visible: boolean) {\n    if (Platform.OS !== 'ios') {\n      console.warn(\n        '`setNetworkActivityIndicatorVisible` is only available on iOS',\n      );\n      return;\n    }\n    StatusBar._defaultProps.networkActivityIndicatorVisible = visible;\n    NativeStatusBarManagerIOS.setNetworkActivityIndicatorVisible(visible);\n  }\n\n  /**\n   * Set the background color for the status bar\n   * @param color Background color.\n   * @param animated Animate the style change.\n   */\n  static setBackgroundColor(color: string, animated?: boolean): void {\n    if (Platform.OS !== 'android') {\n      console.warn('`setBackgroundColor` is only available on Android');\n      return;\n    }\n    animated = animated || false;\n    StatusBar._defaultProps.backgroundColor.value = color;\n\n    const processedColor = processColor(color);\n    if (processedColor == null) {\n      console.warn(\n        `\\`StatusBar.setBackgroundColor\\`: Color ${color} parsed to null or undefined`,\n      );\n      return;\n    }\n    invariant(\n      typeof processedColor === 'number',\n      'Unexpected color given for StatusBar.setBackgroundColor',\n    );\n\n    NativeStatusBarManagerAndroid.setColor(processedColor, animated);\n  }\n\n  /**\n   * Control the translucency of the status bar\n   * @param translucent Set as translucent.\n   */\n  static setTranslucent(translucent: boolean) {\n    if (Platform.OS !== 'android') {\n      console.warn('`setTranslucent` is only available on Android');\n      return;\n    }\n    StatusBar._defaultProps.translucent = translucent;\n    NativeStatusBarManagerAndroid.setTranslucent(translucent);\n  }\n\n  /**\n   * Push a StatusBar entry onto the stack.\n   * The return value should be passed to `popStackEntry` when complete.\n   *\n   * @param props Object containing the StatusBar props to use in the stack entry.\n   */\n  static pushStackEntry(props: any): any {\n    const entry = createStackEntry(props);\n    StatusBar._propsStack.push(entry);\n    StatusBar._updatePropsStack();\n    return entry;\n  }\n\n  /**\n   * Pop a StatusBar entry from the stack.\n   *\n   * @param entry Entry returned from `pushStackEntry`.\n   */\n  static popStackEntry(entry: any) {\n    const index = StatusBar._propsStack.indexOf(entry);\n    if (index !== -1) {\n      StatusBar._propsStack.splice(index, 1);\n    }\n    StatusBar._updatePropsStack();\n  }\n\n  /**\n   * Replace an existing StatusBar stack entry with new props.\n   *\n   * @param entry Entry returned from `pushStackEntry` to replace.\n   * @param props Object containing the StatusBar props to use in the replacement stack entry.\n   */\n  static replaceStackEntry(entry: any, props: any): any {\n    const newEntry = createStackEntry(props);\n    const index = StatusBar._propsStack.indexOf(entry);\n    if (index !== -1) {\n      StatusBar._propsStack[index] = newEntry;\n    }\n    StatusBar._updatePropsStack();\n    return newEntry;\n  }\n\n  // $FlowFixMe[missing-local-annot]\n  _stackEntry = null;\n\n  componentDidMount() {\n    // Every time a StatusBar component is mounted, we push it's prop to a stack\n    // and always update the native status bar with the props from the top of then\n    // stack. This allows having multiple StatusBar components and the one that is\n    // added last or is deeper in the view hierarchy will have priority.\n    this._stackEntry = StatusBar.pushStackEntry(this.props);\n  }\n\n  componentWillUnmount() {\n    // When a StatusBar is unmounted, remove itself from the stack and update\n    // the native bar with the next props.\n    StatusBar.popStackEntry(this._stackEntry);\n  }\n\n  componentDidUpdate() {\n    this._stackEntry = StatusBar.replaceStackEntry(\n      this._stackEntry,\n      this.props,\n    );\n  }\n\n  /**\n   * Updates the native status bar with the props from the stack.\n   */\n  static _updatePropsStack = () => {\n    // Send the update to the native module only once at the end of the frame.\n    clearImmediate(StatusBar._updateImmediate);\n    StatusBar._updateImmediate = setImmediate(() => {\n      const oldProps = StatusBar._currentValues;\n      const mergedProps = mergePropsStack(\n        StatusBar._propsStack,\n        StatusBar._defaultProps,\n      );\n\n      // Update the props that have changed using the merged values from the props stack.\n      if (Platform.OS === 'ios') {\n        if (\n          !oldProps ||\n          oldProps.barStyle.value !== mergedProps.barStyle.value\n        ) {\n          NativeStatusBarManagerIOS.setStyle(\n            mergedProps.barStyle.value,\n            mergedProps.barStyle.animated || false,\n          );\n        }\n        if (!oldProps || oldProps.hidden.value !== mergedProps.hidden.value) {\n          NativeStatusBarManagerIOS.setHidden(\n            mergedProps.hidden.value,\n            mergedProps.hidden.animated\n              ? mergedProps.hidden.transition\n              : 'none',\n          );\n        }\n\n        if (\n          !oldProps ||\n          oldProps.networkActivityIndicatorVisible !==\n            mergedProps.networkActivityIndicatorVisible\n        ) {\n          NativeStatusBarManagerIOS.setNetworkActivityIndicatorVisible(\n            mergedProps.networkActivityIndicatorVisible,\n          );\n        }\n      } else if (Platform.OS === 'android') {\n        //todo(T60684787): Add back optimization to only update bar style and\n        //background color if the new value is different from the old value.\n        NativeStatusBarManagerAndroid.setStyle(mergedProps.barStyle.value);\n        const processedColor = processColor(mergedProps.backgroundColor.value);\n        if (processedColor == null) {\n          console.warn(\n            `\\`StatusBar._updatePropsStack\\`: Color ${mergedProps.backgroundColor.value} parsed to null or undefined`,\n          );\n        } else {\n          invariant(\n            typeof processedColor === 'number',\n            'Unexpected color given in StatusBar._updatePropsStack',\n          );\n          NativeStatusBarManagerAndroid.setColor(\n            processedColor,\n            mergedProps.backgroundColor.animated,\n          );\n        }\n        if (!oldProps || oldProps.hidden.value !== mergedProps.hidden.value) {\n          NativeStatusBarManagerAndroid.setHidden(mergedProps.hidden.value);\n        }\n        // Activities are not translucent by default, so always set if true.\n        if (\n          !oldProps ||\n          oldProps.translucent !== mergedProps.translucent ||\n          mergedProps.translucent\n        ) {\n          NativeStatusBarManagerAndroid.setTranslucent(mergedProps.translucent);\n        }\n      }\n      // Update the current prop values.\n      StatusBar._currentValues = mergedProps;\n    });\n  };\n\n  render(): React.Node {\n    return null;\n  }\n}\n\nmodule.exports = StatusBar;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}