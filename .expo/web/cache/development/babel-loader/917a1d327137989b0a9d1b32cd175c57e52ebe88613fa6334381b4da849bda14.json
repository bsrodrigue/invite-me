{"ast":null,"code":"'use strict';\n\nimport NativeAnimatedHelper from '../NativeAnimatedHelper';\nimport AnimatedColor from '../nodes/AnimatedColor';\nimport * as SpringConfig from '../SpringConfig';\nimport Animation from './Animation';\nimport invariant from 'invariant';\nexport default class SpringAnimation extends Animation {\n  constructor(config) {\n    super();\n    this._overshootClamping = config.overshootClamping ?? false;\n    this._restDisplacementThreshold = config.restDisplacementThreshold ?? 0.001;\n    this._restSpeedThreshold = config.restSpeedThreshold ?? 0.001;\n    this._initialVelocity = config.velocity ?? 0;\n    this._lastVelocity = config.velocity ?? 0;\n    this._toValue = config.toValue;\n    this._delay = config.delay ?? 0;\n    this._useNativeDriver = NativeAnimatedHelper.shouldUseNativeDriver(config);\n    this._platformConfig = config.platformConfig;\n    this.__isInteraction = config.isInteraction ?? !this._useNativeDriver;\n    this.__iterations = config.iterations ?? 1;\n    if (config.stiffness !== undefined || config.damping !== undefined || config.mass !== undefined) {\n      invariant(config.bounciness === undefined && config.speed === undefined && config.tension === undefined && config.friction === undefined, 'You can define one of bounciness/speed, tension/friction, or stiffness/damping/mass, but not more than one');\n      this._stiffness = config.stiffness ?? 100;\n      this._damping = config.damping ?? 10;\n      this._mass = config.mass ?? 1;\n    } else if (config.bounciness !== undefined || config.speed !== undefined) {\n      invariant(config.tension === undefined && config.friction === undefined && config.stiffness === undefined && config.damping === undefined && config.mass === undefined, 'You can define one of bounciness/speed, tension/friction, or stiffness/damping/mass, but not more than one');\n      const springConfig = SpringConfig.fromBouncinessAndSpeed(config.bounciness ?? 8, config.speed ?? 12);\n      this._stiffness = springConfig.stiffness;\n      this._damping = springConfig.damping;\n      this._mass = 1;\n    } else {\n      const springConfig = SpringConfig.fromOrigamiTensionAndFriction(config.tension ?? 40, config.friction ?? 7);\n      this._stiffness = springConfig.stiffness;\n      this._damping = springConfig.damping;\n      this._mass = 1;\n    }\n    invariant(this._stiffness > 0, 'Stiffness value must be greater than 0');\n    invariant(this._damping > 0, 'Damping value must be greater than 0');\n    invariant(this._mass > 0, 'Mass value must be greater than 0');\n  }\n  __getNativeAnimationConfig() {\n    return {\n      type: 'spring',\n      overshootClamping: this._overshootClamping,\n      restDisplacementThreshold: this._restDisplacementThreshold,\n      restSpeedThreshold: this._restSpeedThreshold,\n      stiffness: this._stiffness,\n      damping: this._damping,\n      mass: this._mass,\n      initialVelocity: this._initialVelocity ?? this._lastVelocity,\n      toValue: this._toValue,\n      iterations: this.__iterations,\n      platformConfig: this._platformConfig\n    };\n  }\n  start(fromValue, onUpdate, onEnd, previousAnimation, animatedValue) {\n    this.__active = true;\n    this._startPosition = fromValue;\n    this._lastPosition = this._startPosition;\n    this._onUpdate = onUpdate;\n    this.__onEnd = onEnd;\n    this._lastTime = Date.now();\n    this._frameTime = 0.0;\n    if (previousAnimation instanceof SpringAnimation) {\n      const internalState = previousAnimation.getInternalState();\n      this._lastPosition = internalState.lastPosition;\n      this._lastVelocity = internalState.lastVelocity;\n      this._initialVelocity = this._lastVelocity;\n      this._lastTime = internalState.lastTime;\n    }\n    const start = () => {\n      if (!this._useNativeDriver && animatedValue.__isNative === true) {\n        throw new Error('Attempting to run JS driven animation on animated node ' + 'that has been moved to \"native\" earlier by starting an ' + 'animation with `useNativeDriver: true`');\n      }\n      if (this._useNativeDriver) {\n        this.__startNativeAnimation(animatedValue);\n      } else {\n        this.onUpdate();\n      }\n    };\n    if (this._delay) {\n      this._timeout = setTimeout(start, this._delay);\n    } else {\n      start();\n    }\n  }\n  getInternalState() {\n    return {\n      lastPosition: this._lastPosition,\n      lastVelocity: this._lastVelocity,\n      lastTime: this._lastTime\n    };\n  }\n  onUpdate() {\n    const MAX_STEPS = 64;\n    let now = Date.now();\n    if (now > this._lastTime + MAX_STEPS) {\n      now = this._lastTime + MAX_STEPS;\n    }\n    const deltaTime = (now - this._lastTime) / 1000;\n    this._frameTime += deltaTime;\n    const c = this._damping;\n    const m = this._mass;\n    const k = this._stiffness;\n    const v0 = -this._initialVelocity;\n    const zeta = c / (2 * Math.sqrt(k * m));\n    const omega0 = Math.sqrt(k / m);\n    const omega1 = omega0 * Math.sqrt(1.0 - zeta * zeta);\n    const x0 = this._toValue - this._startPosition;\n    let position = 0.0;\n    let velocity = 0.0;\n    const t = this._frameTime;\n    if (zeta < 1) {\n      const envelope = Math.exp(-zeta * omega0 * t);\n      position = this._toValue - envelope * ((v0 + zeta * omega0 * x0) / omega1 * Math.sin(omega1 * t) + x0 * Math.cos(omega1 * t));\n      velocity = zeta * omega0 * envelope * (Math.sin(omega1 * t) * (v0 + zeta * omega0 * x0) / omega1 + x0 * Math.cos(omega1 * t)) - envelope * (Math.cos(omega1 * t) * (v0 + zeta * omega0 * x0) - omega1 * x0 * Math.sin(omega1 * t));\n    } else {\n      const envelope = Math.exp(-omega0 * t);\n      position = this._toValue - envelope * (x0 + (v0 + omega0 * x0) * t);\n      velocity = envelope * (v0 * (t * omega0 - 1) + t * x0 * (omega0 * omega0));\n    }\n    this._lastTime = now;\n    this._lastPosition = position;\n    this._lastVelocity = velocity;\n    this._onUpdate(position);\n    if (!this.__active) {\n      return;\n    }\n    let isOvershooting = false;\n    if (this._overshootClamping && this._stiffness !== 0) {\n      if (this._startPosition < this._toValue) {\n        isOvershooting = position > this._toValue;\n      } else {\n        isOvershooting = position < this._toValue;\n      }\n    }\n    const isVelocity = Math.abs(velocity) <= this._restSpeedThreshold;\n    let isDisplacement = true;\n    if (this._stiffness !== 0) {\n      isDisplacement = Math.abs(this._toValue - position) <= this._restDisplacementThreshold;\n    }\n    if (isOvershooting || isVelocity && isDisplacement) {\n      if (this._stiffness !== 0) {\n        this._lastPosition = this._toValue;\n        this._lastVelocity = 0;\n        this._onUpdate(this._toValue);\n      }\n      this.__debouncedOnEnd({\n        finished: true\n      });\n      return;\n    }\n    this._animationFrame = requestAnimationFrame(this.onUpdate.bind(this));\n  }\n  stop() {\n    super.stop();\n    this.__active = false;\n    clearTimeout(this._timeout);\n    global.cancelAnimationFrame(this._animationFrame);\n    this.__debouncedOnEnd({\n      finished: false\n    });\n  }\n}","map":{"version":3,"names":["NativeAnimatedHelper","AnimatedColor","SpringConfig","Animation","invariant","SpringAnimation","constructor","config","_overshootClamping","overshootClamping","_restDisplacementThreshold","restDisplacementThreshold","_restSpeedThreshold","restSpeedThreshold","_initialVelocity","velocity","_lastVelocity","_toValue","toValue","_delay","delay","_useNativeDriver","shouldUseNativeDriver","_platformConfig","platformConfig","__isInteraction","isInteraction","__iterations","iterations","stiffness","undefined","damping","mass","bounciness","speed","tension","friction","_stiffness","_damping","_mass","springConfig","fromBouncinessAndSpeed","fromOrigamiTensionAndFriction","__getNativeAnimationConfig","type","initialVelocity","start","fromValue","onUpdate","onEnd","previousAnimation","animatedValue","__active","_startPosition","_lastPosition","_onUpdate","__onEnd","_lastTime","Date","now","_frameTime","internalState","getInternalState","lastPosition","lastVelocity","lastTime","__isNative","Error","__startNativeAnimation","_timeout","setTimeout","MAX_STEPS","deltaTime","c","m","k","v0","zeta","Math","sqrt","omega0","omega1","x0","position","t","envelope","exp","sin","cos","isOvershooting","isVelocity","abs","isDisplacement","__debouncedOnEnd","finished","_animationFrame","requestAnimationFrame","bind","stop","clearTimeout","global","cancelAnimationFrame"],"sources":["/home/rodo/workspace/passion/apps/muh-money/node_modules/react-native/Libraries/Animated/animations/SpringAnimation.js"],"sourcesContent":["/**\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @flow\n * @format\n */\n\n'use strict';\n\nimport type {PlatformConfig} from '../AnimatedPlatformConfig';\nimport type AnimatedInterpolation from '../nodes/AnimatedInterpolation';\nimport type AnimatedValue from '../nodes/AnimatedValue';\nimport type AnimatedValueXY from '../nodes/AnimatedValueXY';\nimport type {AnimationConfig, EndCallback} from './Animation';\n\nimport NativeAnimatedHelper from '../NativeAnimatedHelper';\nimport AnimatedColor from '../nodes/AnimatedColor';\nimport * as SpringConfig from '../SpringConfig';\nimport Animation from './Animation';\nimport invariant from 'invariant';\n\nexport type SpringAnimationConfig = {\n  ...AnimationConfig,\n  toValue:\n    | number\n    | AnimatedValue\n    | {\n        x: number,\n        y: number,\n        ...\n      }\n    | AnimatedValueXY\n    | {\n        r: number,\n        g: number,\n        b: number,\n        a: number,\n        ...\n      }\n    | AnimatedColor\n    | AnimatedInterpolation<number>,\n  overshootClamping?: boolean,\n  restDisplacementThreshold?: number,\n  restSpeedThreshold?: number,\n  velocity?:\n    | number\n    | {\n        x: number,\n        y: number,\n        ...\n      },\n  bounciness?: number,\n  speed?: number,\n  tension?: number,\n  friction?: number,\n  stiffness?: number,\n  damping?: number,\n  mass?: number,\n  delay?: number,\n};\n\nexport type SpringAnimationConfigSingle = {\n  ...AnimationConfig,\n  toValue: number,\n  overshootClamping?: boolean,\n  restDisplacementThreshold?: number,\n  restSpeedThreshold?: number,\n  velocity?: number,\n  bounciness?: number,\n  speed?: number,\n  tension?: number,\n  friction?: number,\n  stiffness?: number,\n  damping?: number,\n  mass?: number,\n  delay?: number,\n};\n\nexport default class SpringAnimation extends Animation {\n  _overshootClamping: boolean;\n  _restDisplacementThreshold: number;\n  _restSpeedThreshold: number;\n  _lastVelocity: number;\n  _startPosition: number;\n  _lastPosition: number;\n  _fromValue: number;\n  _toValue: number;\n  _stiffness: number;\n  _damping: number;\n  _mass: number;\n  _initialVelocity: number;\n  _delay: number;\n  _timeout: any;\n  _startTime: number;\n  _lastTime: number;\n  _frameTime: number;\n  _onUpdate: (value: number) => void;\n  _animationFrame: any;\n  _useNativeDriver: boolean;\n  _platformConfig: ?PlatformConfig;\n\n  constructor(config: SpringAnimationConfigSingle) {\n    super();\n\n    this._overshootClamping = config.overshootClamping ?? false;\n    this._restDisplacementThreshold = config.restDisplacementThreshold ?? 0.001;\n    this._restSpeedThreshold = config.restSpeedThreshold ?? 0.001;\n    this._initialVelocity = config.velocity ?? 0;\n    this._lastVelocity = config.velocity ?? 0;\n    this._toValue = config.toValue;\n    this._delay = config.delay ?? 0;\n    this._useNativeDriver = NativeAnimatedHelper.shouldUseNativeDriver(config);\n    this._platformConfig = config.platformConfig;\n    this.__isInteraction = config.isInteraction ?? !this._useNativeDriver;\n    this.__iterations = config.iterations ?? 1;\n\n    if (\n      config.stiffness !== undefined ||\n      config.damping !== undefined ||\n      config.mass !== undefined\n    ) {\n      invariant(\n        config.bounciness === undefined &&\n          config.speed === undefined &&\n          config.tension === undefined &&\n          config.friction === undefined,\n        'You can define one of bounciness/speed, tension/friction, or stiffness/damping/mass, but not more than one',\n      );\n      this._stiffness = config.stiffness ?? 100;\n      this._damping = config.damping ?? 10;\n      this._mass = config.mass ?? 1;\n    } else if (config.bounciness !== undefined || config.speed !== undefined) {\n      // Convert the origami bounciness/speed values to stiffness/damping\n      // We assume mass is 1.\n      invariant(\n        config.tension === undefined &&\n          config.friction === undefined &&\n          config.stiffness === undefined &&\n          config.damping === undefined &&\n          config.mass === undefined,\n        'You can define one of bounciness/speed, tension/friction, or stiffness/damping/mass, but not more than one',\n      );\n      const springConfig = SpringConfig.fromBouncinessAndSpeed(\n        config.bounciness ?? 8,\n        config.speed ?? 12,\n      );\n      this._stiffness = springConfig.stiffness;\n      this._damping = springConfig.damping;\n      this._mass = 1;\n    } else {\n      // Convert the origami tension/friction values to stiffness/damping\n      // We assume mass is 1.\n      const springConfig = SpringConfig.fromOrigamiTensionAndFriction(\n        config.tension ?? 40,\n        config.friction ?? 7,\n      );\n      this._stiffness = springConfig.stiffness;\n      this._damping = springConfig.damping;\n      this._mass = 1;\n    }\n\n    invariant(this._stiffness > 0, 'Stiffness value must be greater than 0');\n    invariant(this._damping > 0, 'Damping value must be greater than 0');\n    invariant(this._mass > 0, 'Mass value must be greater than 0');\n  }\n\n  __getNativeAnimationConfig(): {|\n    damping: number,\n    initialVelocity: number,\n    iterations: number,\n    mass: number,\n    platformConfig: ?PlatformConfig,\n    overshootClamping: boolean,\n    restDisplacementThreshold: number,\n    restSpeedThreshold: number,\n    stiffness: number,\n    toValue: any,\n    type: $TEMPORARY$string<'spring'>,\n  |} {\n    return {\n      type: 'spring',\n      overshootClamping: this._overshootClamping,\n      restDisplacementThreshold: this._restDisplacementThreshold,\n      restSpeedThreshold: this._restSpeedThreshold,\n      stiffness: this._stiffness,\n      damping: this._damping,\n      mass: this._mass,\n      initialVelocity: this._initialVelocity ?? this._lastVelocity,\n      toValue: this._toValue,\n      iterations: this.__iterations,\n      platformConfig: this._platformConfig,\n    };\n  }\n\n  start(\n    fromValue: number,\n    onUpdate: (value: number) => void,\n    onEnd: ?EndCallback,\n    previousAnimation: ?Animation,\n    animatedValue: AnimatedValue,\n  ): void {\n    this.__active = true;\n    this._startPosition = fromValue;\n    this._lastPosition = this._startPosition;\n\n    this._onUpdate = onUpdate;\n    this.__onEnd = onEnd;\n    this._lastTime = Date.now();\n    this._frameTime = 0.0;\n\n    if (previousAnimation instanceof SpringAnimation) {\n      const internalState = previousAnimation.getInternalState();\n      this._lastPosition = internalState.lastPosition;\n      this._lastVelocity = internalState.lastVelocity;\n      // Set the initial velocity to the last velocity\n      this._initialVelocity = this._lastVelocity;\n      this._lastTime = internalState.lastTime;\n    }\n\n    const start = () => {\n      if (!this._useNativeDriver && animatedValue.__isNative === true) {\n        throw new Error(\n          'Attempting to run JS driven animation on animated node ' +\n            'that has been moved to \"native\" earlier by starting an ' +\n            'animation with `useNativeDriver: true`',\n        );\n      }\n\n      if (this._useNativeDriver) {\n        this.__startNativeAnimation(animatedValue);\n      } else {\n        this.onUpdate();\n      }\n    };\n\n    //  If this._delay is more than 0, we start after the timeout.\n    if (this._delay) {\n      this._timeout = setTimeout(start, this._delay);\n    } else {\n      start();\n    }\n  }\n\n  getInternalState(): Object {\n    return {\n      lastPosition: this._lastPosition,\n      lastVelocity: this._lastVelocity,\n      lastTime: this._lastTime,\n    };\n  }\n\n  /**\n   * This spring model is based off of a damped harmonic oscillator\n   * (https://en.wikipedia.org/wiki/Harmonic_oscillator#Damped_harmonic_oscillator).\n   *\n   * We use the closed form of the second order differential equation:\n   *\n   * x'' + (2ζ⍵_0)x' + ⍵^2x = 0\n   *\n   * where\n   *    ⍵_0 = √(k / m) (undamped angular frequency of the oscillator),\n   *    ζ = c / 2√mk (damping ratio),\n   *    c = damping constant\n   *    k = stiffness\n   *    m = mass\n   *\n   * The derivation of the closed form is described in detail here:\n   * http://planetmath.org/sites/default/files/texpdf/39745.pdf\n   *\n   * This algorithm happens to match the algorithm used by CASpringAnimation,\n   * a QuartzCore (iOS) API that creates spring animations.\n   */\n  onUpdate(): void {\n    // If for some reason we lost a lot of frames (e.g. process large payload or\n    // stopped in the debugger), we only advance by 4 frames worth of\n    // computation and will continue on the next frame. It's better to have it\n    // running at faster speed than jumping to the end.\n    const MAX_STEPS = 64;\n    let now = Date.now();\n    if (now > this._lastTime + MAX_STEPS) {\n      now = this._lastTime + MAX_STEPS;\n    }\n\n    const deltaTime = (now - this._lastTime) / 1000;\n    this._frameTime += deltaTime;\n\n    const c: number = this._damping;\n    const m: number = this._mass;\n    const k: number = this._stiffness;\n    const v0: number = -this._initialVelocity;\n\n    const zeta = c / (2 * Math.sqrt(k * m)); // damping ratio\n    const omega0 = Math.sqrt(k / m); // undamped angular frequency of the oscillator (rad/ms)\n    const omega1 = omega0 * Math.sqrt(1.0 - zeta * zeta); // exponential decay\n    const x0 = this._toValue - this._startPosition; // calculate the oscillation from x0 = 1 to x = 0\n\n    let position = 0.0;\n    let velocity = 0.0;\n    const t = this._frameTime;\n    if (zeta < 1) {\n      // Under damped\n      const envelope = Math.exp(-zeta * omega0 * t);\n      position =\n        this._toValue -\n        envelope *\n          (((v0 + zeta * omega0 * x0) / omega1) * Math.sin(omega1 * t) +\n            x0 * Math.cos(omega1 * t));\n      // This looks crazy -- it's actually just the derivative of the\n      // oscillation function\n      velocity =\n        zeta *\n          omega0 *\n          envelope *\n          ((Math.sin(omega1 * t) * (v0 + zeta * omega0 * x0)) / omega1 +\n            x0 * Math.cos(omega1 * t)) -\n        envelope *\n          (Math.cos(omega1 * t) * (v0 + zeta * omega0 * x0) -\n            omega1 * x0 * Math.sin(omega1 * t));\n    } else {\n      // Critically damped\n      const envelope = Math.exp(-omega0 * t);\n      position = this._toValue - envelope * (x0 + (v0 + omega0 * x0) * t);\n      velocity =\n        envelope * (v0 * (t * omega0 - 1) + t * x0 * (omega0 * omega0));\n    }\n\n    this._lastTime = now;\n    this._lastPosition = position;\n    this._lastVelocity = velocity;\n\n    this._onUpdate(position);\n    if (!this.__active) {\n      // a listener might have stopped us in _onUpdate\n      return;\n    }\n\n    // Conditions for stopping the spring animation\n    let isOvershooting = false;\n    if (this._overshootClamping && this._stiffness !== 0) {\n      if (this._startPosition < this._toValue) {\n        isOvershooting = position > this._toValue;\n      } else {\n        isOvershooting = position < this._toValue;\n      }\n    }\n    const isVelocity = Math.abs(velocity) <= this._restSpeedThreshold;\n    let isDisplacement = true;\n    if (this._stiffness !== 0) {\n      isDisplacement =\n        Math.abs(this._toValue - position) <= this._restDisplacementThreshold;\n    }\n\n    if (isOvershooting || (isVelocity && isDisplacement)) {\n      if (this._stiffness !== 0) {\n        // Ensure that we end up with a round value\n        this._lastPosition = this._toValue;\n        this._lastVelocity = 0;\n        this._onUpdate(this._toValue);\n      }\n\n      this.__debouncedOnEnd({finished: true});\n      return;\n    }\n    // $FlowFixMe[method-unbinding] added when improving typing for this parameters\n    this._animationFrame = requestAnimationFrame(this.onUpdate.bind(this));\n  }\n\n  stop(): void {\n    super.stop();\n    this.__active = false;\n    clearTimeout(this._timeout);\n    global.cancelAnimationFrame(this._animationFrame);\n    this.__debouncedOnEnd({finished: false});\n  }\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}