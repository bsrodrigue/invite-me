{"ast":null,"code":"class PressabilityPerformanceEventEmitter {\n  _listeners = [];\n  constructor() {}\n  addListener(listener) {\n    this._listeners.push(listener);\n  }\n  removeListener(listener) {\n    const index = this._listeners.indexOf(listener);\n    if (index > -1) {\n      this._listeners.splice(index, 1);\n    }\n  }\n  emitEvent(constructEvent) {\n    if (this._listeners.length === 0) {\n      return;\n    }\n    const event = constructEvent();\n    this._listeners.forEach(listener => listener(event));\n  }\n}\nconst PressabilityPerformanceEventEmitterSingleton = new PressabilityPerformanceEventEmitter();\nexport default PressabilityPerformanceEventEmitterSingleton;","map":{"version":3,"names":["PressabilityPerformanceEventEmitter","_listeners","constructor","addListener","listener","push","removeListener","index","indexOf","splice","emitEvent","constructEvent","length","event","forEach","PressabilityPerformanceEventEmitterSingleton"],"sources":["/home/rodo/workspace/passion/apps/muh-money/node_modules/react-native/Libraries/Pressability/PressabilityPerformanceEventEmitter.js"],"sourcesContent":["/**\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @flow strict-local\n * @format\n */\n\nimport {type PressabilityTouchSignal as TouchSignal} from './PressabilityTypes.js';\n\nexport type PressabilityPerformanceEvent = $ReadOnly<{|\n  signal: TouchSignal,\n  nativeTimestamp: number,\n|}>;\nexport type PressabilityPerformanceEventListener =\n  PressabilityPerformanceEvent => void;\n\nclass PressabilityPerformanceEventEmitter {\n  _listeners: Array<PressabilityPerformanceEventListener> = [];\n\n  constructor() {}\n\n  addListener(listener: PressabilityPerformanceEventListener): void {\n    this._listeners.push(listener);\n  }\n\n  removeListener(listener: PressabilityPerformanceEventListener): void {\n    const index = this._listeners.indexOf(listener);\n    if (index > -1) {\n      this._listeners.splice(index, 1);\n    }\n  }\n\n  emitEvent(constructEvent: () => PressabilityPerformanceEvent): void {\n    if (this._listeners.length === 0) {\n      return;\n    }\n\n    const event = constructEvent();\n    this._listeners.forEach(listener => listener(event));\n  }\n}\n\nconst PressabilityPerformanceEventEmitterSingleton: PressabilityPerformanceEventEmitter =\n  new PressabilityPerformanceEventEmitter();\n\nexport default PressabilityPerformanceEventEmitterSingleton;\n"],"mappings":"AAmBA,MAAMA,mCAAmC,CAAC;EACxCC,UAAU,GAAgD,EAAE;EAE5DC,WAAWA,CAAA,EAAG,CAAC;EAEfC,WAAWA,CAACC,QAA8C,EAAQ;IAChE,IAAI,CAACH,UAAU,CAACI,IAAI,CAACD,QAAQ,CAAC;EAChC;EAEAE,cAAcA,CAACF,QAA8C,EAAQ;IACnE,MAAMG,KAAK,GAAG,IAAI,CAACN,UAAU,CAACO,OAAO,CAACJ,QAAQ,CAAC;IAC/C,IAAIG,KAAK,GAAG,CAAC,CAAC,EAAE;MACd,IAAI,CAACN,UAAU,CAACQ,MAAM,CAACF,KAAK,EAAE,CAAC,CAAC;IAClC;EACF;EAEAG,SAASA,CAACC,cAAkD,EAAQ;IAClE,IAAI,IAAI,CAACV,UAAU,CAACW,MAAM,KAAK,CAAC,EAAE;MAChC;IACF;IAEA,MAAMC,KAAK,GAAGF,cAAc,CAAC,CAAC;IAC9B,IAAI,CAACV,UAAU,CAACa,OAAO,CAACV,QAAQ,IAAIA,QAAQ,CAACS,KAAK,CAAC,CAAC;EACtD;AACF;AAEA,MAAME,4CAAiF,GACrF,IAAIf,mCAAmC,CAAC,CAAC;AAE3C,eAAee,4CAA4C","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}