{"ast":null,"code":"import * as React from 'react';\nimport createElement from '../createElement';\nimport * as forwardedProps from '../../modules/forwardedProps';\nimport pick from '../../modules/pick';\nimport useElementLayout from '../../modules/useElementLayout';\nimport useLayoutEffect from '../../modules/useLayoutEffect';\nimport useMergeRefs from '../../modules/useMergeRefs';\nimport usePlatformMethods from '../../modules/usePlatformMethods';\nimport useResponderEvents from '../../modules/useResponderEvents';\nimport { getLocaleDirection, useLocaleContext } from '../../modules/useLocale';\nimport StyleSheet from '../StyleSheet';\nimport TextInputState from '../../modules/TextInputState';\nimport { warnOnce } from '../../modules/warnOnce';\nvar isSelectionStale = (node, selection) => {\n  var selectionEnd = node.selectionEnd,\n    selectionStart = node.selectionStart;\n  var start = selection.start,\n    end = selection.end;\n  return start !== selectionStart || end !== selectionEnd;\n};\nvar setSelection = (node, selection) => {\n  if (isSelectionStale(node, selection)) {\n    var start = selection.start,\n      end = selection.end;\n    try {\n      node.setSelectionRange(start, end || start);\n    } catch (e) {}\n  }\n};\nvar forwardPropsList = Object.assign({}, forwardedProps.defaultProps, forwardedProps.accessibilityProps, forwardedProps.clickProps, forwardedProps.focusProps, forwardedProps.keyboardProps, forwardedProps.mouseProps, forwardedProps.touchProps, forwardedProps.styleProps, {\n  autoCapitalize: true,\n  autoComplete: true,\n  autoCorrect: true,\n  autoFocus: true,\n  defaultValue: true,\n  disabled: true,\n  lang: true,\n  maxLength: true,\n  onChange: true,\n  onScroll: true,\n  placeholder: true,\n  pointerEvents: true,\n  readOnly: true,\n  rows: true,\n  spellCheck: true,\n  value: true,\n  type: true\n});\nvar pickProps = props => pick(props, forwardPropsList);\nfunction isEventComposing(nativeEvent) {\n  return nativeEvent.isComposing || nativeEvent.keyCode === 229;\n}\nvar focusTimeout = null;\nvar TextInput = React.forwardRef((props, forwardedRef) => {\n  var _props$autoCapitalize = props.autoCapitalize,\n    autoCapitalize = _props$autoCapitalize === void 0 ? 'sentences' : _props$autoCapitalize,\n    autoComplete = props.autoComplete,\n    autoCompleteType = props.autoCompleteType,\n    _props$autoCorrect = props.autoCorrect,\n    autoCorrect = _props$autoCorrect === void 0 ? true : _props$autoCorrect,\n    blurOnSubmit = props.blurOnSubmit,\n    caretHidden = props.caretHidden,\n    clearTextOnFocus = props.clearTextOnFocus,\n    dir = props.dir,\n    editable = props.editable,\n    enterKeyHint = props.enterKeyHint,\n    inputMode = props.inputMode,\n    keyboardType = props.keyboardType,\n    _props$multiline = props.multiline,\n    multiline = _props$multiline === void 0 ? false : _props$multiline,\n    numberOfLines = props.numberOfLines,\n    onBlur = props.onBlur,\n    onChange = props.onChange,\n    onChangeText = props.onChangeText,\n    onContentSizeChange = props.onContentSizeChange,\n    onFocus = props.onFocus,\n    onKeyPress = props.onKeyPress,\n    onLayout = props.onLayout,\n    onMoveShouldSetResponder = props.onMoveShouldSetResponder,\n    onMoveShouldSetResponderCapture = props.onMoveShouldSetResponderCapture,\n    onResponderEnd = props.onResponderEnd,\n    onResponderGrant = props.onResponderGrant,\n    onResponderMove = props.onResponderMove,\n    onResponderReject = props.onResponderReject,\n    onResponderRelease = props.onResponderRelease,\n    onResponderStart = props.onResponderStart,\n    onResponderTerminate = props.onResponderTerminate,\n    onResponderTerminationRequest = props.onResponderTerminationRequest,\n    onScrollShouldSetResponder = props.onScrollShouldSetResponder,\n    onScrollShouldSetResponderCapture = props.onScrollShouldSetResponderCapture,\n    onSelectionChange = props.onSelectionChange,\n    onSelectionChangeShouldSetResponder = props.onSelectionChangeShouldSetResponder,\n    onSelectionChangeShouldSetResponderCapture = props.onSelectionChangeShouldSetResponderCapture,\n    onStartShouldSetResponder = props.onStartShouldSetResponder,\n    onStartShouldSetResponderCapture = props.onStartShouldSetResponderCapture,\n    onSubmitEditing = props.onSubmitEditing,\n    placeholderTextColor = props.placeholderTextColor,\n    _props$readOnly = props.readOnly,\n    readOnly = _props$readOnly === void 0 ? false : _props$readOnly,\n    returnKeyType = props.returnKeyType,\n    rows = props.rows,\n    _props$secureTextEntr = props.secureTextEntry,\n    secureTextEntry = _props$secureTextEntr === void 0 ? false : _props$secureTextEntr,\n    selection = props.selection,\n    selectTextOnFocus = props.selectTextOnFocus,\n    showSoftInputOnFocus = props.showSoftInputOnFocus,\n    spellCheck = props.spellCheck;\n  var type;\n  var _inputMode;\n  if (inputMode != null) {\n    _inputMode = inputMode;\n    if (inputMode === 'email') {\n      type = 'email';\n    } else if (inputMode === 'tel') {\n      type = 'tel';\n    } else if (inputMode === 'search') {\n      type = 'search';\n    } else if (inputMode === 'url') {\n      type = 'url';\n    } else {\n      type = 'text';\n    }\n  } else if (keyboardType != null) {\n    warnOnce('keyboardType', 'keyboardType is deprecated. Use inputMode.');\n    switch (keyboardType) {\n      case 'email-address':\n        type = 'email';\n        break;\n      case 'number-pad':\n      case 'numeric':\n        _inputMode = 'numeric';\n        break;\n      case 'decimal-pad':\n        _inputMode = 'decimal';\n        break;\n      case 'phone-pad':\n        type = 'tel';\n        break;\n      case 'search':\n      case 'web-search':\n        type = 'search';\n        break;\n      case 'url':\n        type = 'url';\n        break;\n      default:\n        type = 'text';\n    }\n  }\n  if (secureTextEntry) {\n    type = 'password';\n  }\n  var dimensions = React.useRef({\n    height: null,\n    width: null\n  });\n  var hostRef = React.useRef(null);\n  var prevSelection = React.useRef(null);\n  var prevSecureTextEntry = React.useRef(false);\n  React.useEffect(() => {\n    if (hostRef.current && prevSelection.current) {\n      setSelection(hostRef.current, prevSelection.current);\n    }\n    prevSecureTextEntry.current = secureTextEntry;\n  }, [secureTextEntry]);\n  var handleContentSizeChange = React.useCallback(hostNode => {\n    if (multiline && onContentSizeChange && hostNode != null) {\n      var newHeight = hostNode.scrollHeight;\n      var newWidth = hostNode.scrollWidth;\n      if (newHeight !== dimensions.current.height || newWidth !== dimensions.current.width) {\n        dimensions.current.height = newHeight;\n        dimensions.current.width = newWidth;\n        onContentSizeChange({\n          nativeEvent: {\n            contentSize: {\n              height: dimensions.current.height,\n              width: dimensions.current.width\n            }\n          }\n        });\n      }\n    }\n  }, [multiline, onContentSizeChange]);\n  var imperativeRef = React.useMemo(() => hostNode => {\n    if (hostNode != null) {\n      hostNode.clear = function () {\n        if (hostNode != null) {\n          hostNode.value = '';\n        }\n      };\n      hostNode.isFocused = function () {\n        return hostNode != null && TextInputState.currentlyFocusedField() === hostNode;\n      };\n      handleContentSizeChange(hostNode);\n    }\n  }, [handleContentSizeChange]);\n  function handleBlur(e) {\n    TextInputState._currentlyFocusedNode = null;\n    if (onBlur) {\n      e.nativeEvent.text = e.target.value;\n      onBlur(e);\n    }\n  }\n  function handleChange(e) {\n    var hostNode = e.target;\n    var text = hostNode.value;\n    e.nativeEvent.text = text;\n    handleContentSizeChange(hostNode);\n    if (onChange) {\n      onChange(e);\n    }\n    if (onChangeText) {\n      onChangeText(text);\n    }\n  }\n  function handleFocus(e) {\n    var hostNode = e.target;\n    if (onFocus) {\n      e.nativeEvent.text = hostNode.value;\n      onFocus(e);\n    }\n    if (hostNode != null) {\n      TextInputState._currentlyFocusedNode = hostNode;\n      if (clearTextOnFocus) {\n        hostNode.value = '';\n      }\n      if (selectTextOnFocus) {\n        if (focusTimeout != null) {\n          clearTimeout(focusTimeout);\n        }\n        focusTimeout = setTimeout(() => {\n          if (hostNode != null) {\n            hostNode.select();\n          }\n        }, 0);\n      }\n    }\n  }\n  function handleKeyDown(e) {\n    var hostNode = e.target;\n    e.stopPropagation();\n    var blurOnSubmitDefault = !multiline;\n    var shouldBlurOnSubmit = blurOnSubmit == null ? blurOnSubmitDefault : blurOnSubmit;\n    var nativeEvent = e.nativeEvent;\n    var isComposing = isEventComposing(nativeEvent);\n    if (onKeyPress) {\n      onKeyPress(e);\n    }\n    if (e.key === 'Enter' && !e.shiftKey && !isComposing && !e.isDefaultPrevented()) {\n      if ((blurOnSubmit || !multiline) && onSubmitEditing) {\n        e.preventDefault();\n        nativeEvent.text = e.target.value;\n        onSubmitEditing(e);\n      }\n      if (shouldBlurOnSubmit && hostNode != null) {\n        setTimeout(() => hostNode.blur(), 0);\n      }\n    }\n  }\n  function handleSelectionChange(e) {\n    try {\n      var _e$target = e.target,\n        selectionStart = _e$target.selectionStart,\n        selectionEnd = _e$target.selectionEnd;\n      var _selection = {\n        start: selectionStart,\n        end: selectionEnd\n      };\n      if (onSelectionChange) {\n        e.nativeEvent.selection = _selection;\n        e.nativeEvent.text = e.target.value;\n        onSelectionChange(e);\n      }\n      if (prevSecureTextEntry.current === secureTextEntry) {\n        prevSelection.current = _selection;\n      }\n    } catch (e) {}\n  }\n  useLayoutEffect(() => {\n    var node = hostRef.current;\n    if (node != null && selection != null) {\n      setSelection(node, selection);\n    }\n    if (document.activeElement === node) {\n      TextInputState._currentlyFocusedNode = node;\n    }\n  }, [hostRef, selection]);\n  var component = multiline ? 'textarea' : 'input';\n  useElementLayout(hostRef, onLayout);\n  useResponderEvents(hostRef, {\n    onMoveShouldSetResponder,\n    onMoveShouldSetResponderCapture,\n    onResponderEnd,\n    onResponderGrant,\n    onResponderMove,\n    onResponderReject,\n    onResponderRelease,\n    onResponderStart,\n    onResponderTerminate,\n    onResponderTerminationRequest,\n    onScrollShouldSetResponder,\n    onScrollShouldSetResponderCapture,\n    onSelectionChangeShouldSetResponder,\n    onSelectionChangeShouldSetResponderCapture,\n    onStartShouldSetResponder,\n    onStartShouldSetResponderCapture\n  });\n  var _useLocaleContext = useLocaleContext(),\n    contextDirection = _useLocaleContext.direction;\n  var supportedProps = pickProps(props);\n  supportedProps.autoCapitalize = autoCapitalize;\n  supportedProps.autoComplete = autoComplete || autoCompleteType || 'on';\n  supportedProps.autoCorrect = autoCorrect ? 'on' : 'off';\n  supportedProps.dir = dir !== undefined ? dir : 'auto';\n  if (returnKeyType != null) {\n    warnOnce('returnKeyType', 'returnKeyType is deprecated. Use enterKeyHint.');\n  }\n  supportedProps.enterKeyHint = enterKeyHint || returnKeyType;\n  supportedProps.inputMode = _inputMode;\n  supportedProps.onBlur = handleBlur;\n  supportedProps.onChange = handleChange;\n  supportedProps.onFocus = handleFocus;\n  supportedProps.onKeyDown = handleKeyDown;\n  supportedProps.onSelect = handleSelectionChange;\n  if (editable != null) {\n    warnOnce('editable', 'editable is deprecated. Use readOnly.');\n  }\n  supportedProps.readOnly = readOnly === true || editable === false;\n  if (numberOfLines != null) {\n    warnOnce('numberOfLines', 'TextInput numberOfLines is deprecated. Use rows.');\n  }\n  supportedProps.rows = multiline ? rows != null ? rows : numberOfLines : 1;\n  supportedProps.spellCheck = spellCheck != null ? spellCheck : autoCorrect;\n  supportedProps.style = [{\n    '--placeholderTextColor': placeholderTextColor\n  }, styles.textinput$raw, styles.placeholder, props.style, caretHidden && styles.caretHidden];\n  supportedProps.type = multiline ? undefined : type;\n  supportedProps.virtualkeyboardpolicy = showSoftInputOnFocus === false ? 'manual' : 'auto';\n  var platformMethodsRef = usePlatformMethods(supportedProps);\n  var setRef = useMergeRefs(hostRef, platformMethodsRef, imperativeRef, forwardedRef);\n  supportedProps.ref = setRef;\n  var langDirection = props.lang != null ? getLocaleDirection(props.lang) : null;\n  var componentDirection = props.dir || langDirection;\n  var writingDirection = componentDirection || contextDirection;\n  var element = createElement(component, supportedProps, {\n    writingDirection\n  });\n  return element;\n});\nTextInput.displayName = 'TextInput';\nTextInput.State = TextInputState;\nvar styles = StyleSheet.create({\n  textinput$raw: {\n    MozAppearance: 'textfield',\n    WebkitAppearance: 'none',\n    backgroundColor: 'transparent',\n    border: '0 solid black',\n    borderRadius: 0,\n    boxSizing: 'border-box',\n    font: '14px System',\n    margin: 0,\n    padding: 0,\n    resize: 'none'\n  },\n  placeholder: {\n    placeholderTextColor: 'var(--placeholderTextColor)'\n  },\n  caretHidden: {\n    caretColor: 'transparent'\n  }\n});\nexport default TextInput;","map":{"version":3,"names":["React","createElement","forwardedProps","pick","useElementLayout","useLayoutEffect","useMergeRefs","usePlatformMethods","useResponderEvents","getLocaleDirection","useLocaleContext","StyleSheet","TextInputState","warnOnce","isSelectionStale","node","selection","selectionEnd","selectionStart","start","end","setSelection","setSelectionRange","e","forwardPropsList","Object","assign","defaultProps","accessibilityProps","clickProps","focusProps","keyboardProps","mouseProps","touchProps","styleProps","autoCapitalize","autoComplete","autoCorrect","autoFocus","defaultValue","disabled","lang","maxLength","onChange","onScroll","placeholder","pointerEvents","readOnly","rows","spellCheck","value","type","pickProps","props","isEventComposing","nativeEvent","isComposing","keyCode","focusTimeout","TextInput","forwardRef","forwardedRef","_props$autoCapitalize","autoCompleteType","_props$autoCorrect","blurOnSubmit","caretHidden","clearTextOnFocus","dir","editable","enterKeyHint","inputMode","keyboardType","_props$multiline","multiline","numberOfLines","onBlur","onChangeText","onContentSizeChange","onFocus","onKeyPress","onLayout","onMoveShouldSetResponder","onMoveShouldSetResponderCapture","onResponderEnd","onResponderGrant","onResponderMove","onResponderReject","onResponderRelease","onResponderStart","onResponderTerminate","onResponderTerminationRequest","onScrollShouldSetResponder","onScrollShouldSetResponderCapture","onSelectionChange","onSelectionChangeShouldSetResponder","onSelectionChangeShouldSetResponderCapture","onStartShouldSetResponder","onStartShouldSetResponderCapture","onSubmitEditing","placeholderTextColor","_props$readOnly","returnKeyType","_props$secureTextEntr","secureTextEntry","selectTextOnFocus","showSoftInputOnFocus","_inputMode","dimensions","useRef","height","width","hostRef","prevSelection","prevSecureTextEntry","useEffect","current","handleContentSizeChange","useCallback","hostNode","newHeight","scrollHeight","newWidth","scrollWidth","contentSize","imperativeRef","useMemo","clear","isFocused","currentlyFocusedField","handleBlur","_currentlyFocusedNode","text","target","handleChange","handleFocus","clearTimeout","setTimeout","select","handleKeyDown","stopPropagation","blurOnSubmitDefault","shouldBlurOnSubmit","key","shiftKey","isDefaultPrevented","preventDefault","blur","handleSelectionChange","_e$target","_selection","document","activeElement","component","_useLocaleContext","contextDirection","direction","supportedProps","undefined","onKeyDown","onSelect","style","styles","textinput$raw","virtualkeyboardpolicy","platformMethodsRef","setRef","ref","langDirection","componentDirection","writingDirection","element","displayName","State","create","MozAppearance","WebkitAppearance","backgroundColor","border","borderRadius","boxSizing","font","margin","padding","resize","caretColor"],"sources":["/home/rodo/workspace/passion/apps/muh-money/node_modules/react-native-web/dist/exports/TextInput/index.js"],"sourcesContent":["/**\n * Copyright (c) Nicolas Gallagher.\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * \n */\n\nimport * as React from 'react';\nimport createElement from '../createElement';\nimport * as forwardedProps from '../../modules/forwardedProps';\nimport pick from '../../modules/pick';\nimport useElementLayout from '../../modules/useElementLayout';\nimport useLayoutEffect from '../../modules/useLayoutEffect';\nimport useMergeRefs from '../../modules/useMergeRefs';\nimport usePlatformMethods from '../../modules/usePlatformMethods';\nimport useResponderEvents from '../../modules/useResponderEvents';\nimport { getLocaleDirection, useLocaleContext } from '../../modules/useLocale';\nimport StyleSheet from '../StyleSheet';\nimport TextInputState from '../../modules/TextInputState';\nimport { warnOnce } from '../../modules/warnOnce';\n\n/**\n * Determines whether a 'selection' prop differs from a node's existing\n * selection state.\n */\nvar isSelectionStale = (node, selection) => {\n  var selectionEnd = node.selectionEnd,\n    selectionStart = node.selectionStart;\n  var start = selection.start,\n    end = selection.end;\n  return start !== selectionStart || end !== selectionEnd;\n};\n\n/**\n * Certain input types do no support 'selectSelectionRange' and will throw an\n * error.\n */\nvar setSelection = (node, selection) => {\n  if (isSelectionStale(node, selection)) {\n    var start = selection.start,\n      end = selection.end;\n    try {\n      node.setSelectionRange(start, end || start);\n    } catch (e) {}\n  }\n};\nvar forwardPropsList = Object.assign({}, forwardedProps.defaultProps, forwardedProps.accessibilityProps, forwardedProps.clickProps, forwardedProps.focusProps, forwardedProps.keyboardProps, forwardedProps.mouseProps, forwardedProps.touchProps, forwardedProps.styleProps, {\n  autoCapitalize: true,\n  autoComplete: true,\n  autoCorrect: true,\n  autoFocus: true,\n  defaultValue: true,\n  disabled: true,\n  lang: true,\n  maxLength: true,\n  onChange: true,\n  onScroll: true,\n  placeholder: true,\n  pointerEvents: true,\n  readOnly: true,\n  rows: true,\n  spellCheck: true,\n  value: true,\n  type: true\n});\nvar pickProps = props => pick(props, forwardPropsList);\n\n// If an Input Method Editor is processing key input, the 'keyCode' is 229.\n// https://www.w3.org/TR/uievents/#determine-keydown-keyup-keyCode\nfunction isEventComposing(nativeEvent) {\n  return nativeEvent.isComposing || nativeEvent.keyCode === 229;\n}\nvar focusTimeout = null;\nvar TextInput = /*#__PURE__*/React.forwardRef((props, forwardedRef) => {\n  var _props$autoCapitalize = props.autoCapitalize,\n    autoCapitalize = _props$autoCapitalize === void 0 ? 'sentences' : _props$autoCapitalize,\n    autoComplete = props.autoComplete,\n    autoCompleteType = props.autoCompleteType,\n    _props$autoCorrect = props.autoCorrect,\n    autoCorrect = _props$autoCorrect === void 0 ? true : _props$autoCorrect,\n    blurOnSubmit = props.blurOnSubmit,\n    caretHidden = props.caretHidden,\n    clearTextOnFocus = props.clearTextOnFocus,\n    dir = props.dir,\n    editable = props.editable,\n    enterKeyHint = props.enterKeyHint,\n    inputMode = props.inputMode,\n    keyboardType = props.keyboardType,\n    _props$multiline = props.multiline,\n    multiline = _props$multiline === void 0 ? false : _props$multiline,\n    numberOfLines = props.numberOfLines,\n    onBlur = props.onBlur,\n    onChange = props.onChange,\n    onChangeText = props.onChangeText,\n    onContentSizeChange = props.onContentSizeChange,\n    onFocus = props.onFocus,\n    onKeyPress = props.onKeyPress,\n    onLayout = props.onLayout,\n    onMoveShouldSetResponder = props.onMoveShouldSetResponder,\n    onMoveShouldSetResponderCapture = props.onMoveShouldSetResponderCapture,\n    onResponderEnd = props.onResponderEnd,\n    onResponderGrant = props.onResponderGrant,\n    onResponderMove = props.onResponderMove,\n    onResponderReject = props.onResponderReject,\n    onResponderRelease = props.onResponderRelease,\n    onResponderStart = props.onResponderStart,\n    onResponderTerminate = props.onResponderTerminate,\n    onResponderTerminationRequest = props.onResponderTerminationRequest,\n    onScrollShouldSetResponder = props.onScrollShouldSetResponder,\n    onScrollShouldSetResponderCapture = props.onScrollShouldSetResponderCapture,\n    onSelectionChange = props.onSelectionChange,\n    onSelectionChangeShouldSetResponder = props.onSelectionChangeShouldSetResponder,\n    onSelectionChangeShouldSetResponderCapture = props.onSelectionChangeShouldSetResponderCapture,\n    onStartShouldSetResponder = props.onStartShouldSetResponder,\n    onStartShouldSetResponderCapture = props.onStartShouldSetResponderCapture,\n    onSubmitEditing = props.onSubmitEditing,\n    placeholderTextColor = props.placeholderTextColor,\n    _props$readOnly = props.readOnly,\n    readOnly = _props$readOnly === void 0 ? false : _props$readOnly,\n    returnKeyType = props.returnKeyType,\n    rows = props.rows,\n    _props$secureTextEntr = props.secureTextEntry,\n    secureTextEntry = _props$secureTextEntr === void 0 ? false : _props$secureTextEntr,\n    selection = props.selection,\n    selectTextOnFocus = props.selectTextOnFocus,\n    showSoftInputOnFocus = props.showSoftInputOnFocus,\n    spellCheck = props.spellCheck;\n  var type;\n  var _inputMode;\n  if (inputMode != null) {\n    _inputMode = inputMode;\n    if (inputMode === 'email') {\n      type = 'email';\n    } else if (inputMode === 'tel') {\n      type = 'tel';\n    } else if (inputMode === 'search') {\n      type = 'search';\n    } else if (inputMode === 'url') {\n      type = 'url';\n    } else {\n      type = 'text';\n    }\n  } else if (keyboardType != null) {\n    warnOnce('keyboardType', 'keyboardType is deprecated. Use inputMode.');\n    switch (keyboardType) {\n      case 'email-address':\n        type = 'email';\n        break;\n      case 'number-pad':\n      case 'numeric':\n        _inputMode = 'numeric';\n        break;\n      case 'decimal-pad':\n        _inputMode = 'decimal';\n        break;\n      case 'phone-pad':\n        type = 'tel';\n        break;\n      case 'search':\n      case 'web-search':\n        type = 'search';\n        break;\n      case 'url':\n        type = 'url';\n        break;\n      default:\n        type = 'text';\n    }\n  }\n  if (secureTextEntry) {\n    type = 'password';\n  }\n  var dimensions = React.useRef({\n    height: null,\n    width: null\n  });\n  var hostRef = React.useRef(null);\n  var prevSelection = React.useRef(null);\n  var prevSecureTextEntry = React.useRef(false);\n  React.useEffect(() => {\n    if (hostRef.current && prevSelection.current) {\n      setSelection(hostRef.current, prevSelection.current);\n    }\n    prevSecureTextEntry.current = secureTextEntry;\n  }, [secureTextEntry]);\n  var handleContentSizeChange = React.useCallback(hostNode => {\n    if (multiline && onContentSizeChange && hostNode != null) {\n      var newHeight = hostNode.scrollHeight;\n      var newWidth = hostNode.scrollWidth;\n      if (newHeight !== dimensions.current.height || newWidth !== dimensions.current.width) {\n        dimensions.current.height = newHeight;\n        dimensions.current.width = newWidth;\n        onContentSizeChange({\n          nativeEvent: {\n            contentSize: {\n              height: dimensions.current.height,\n              width: dimensions.current.width\n            }\n          }\n        });\n      }\n    }\n  }, [multiline, onContentSizeChange]);\n  var imperativeRef = React.useMemo(() => hostNode => {\n    // TextInput needs to add more methods to the hostNode in addition to those\n    // added by `usePlatformMethods`. This is temporarily until an API like\n    // `TextInput.clear(hostRef)` is added to React Native.\n    if (hostNode != null) {\n      hostNode.clear = function () {\n        if (hostNode != null) {\n          hostNode.value = '';\n        }\n      };\n      hostNode.isFocused = function () {\n        return hostNode != null && TextInputState.currentlyFocusedField() === hostNode;\n      };\n      handleContentSizeChange(hostNode);\n    }\n  }, [handleContentSizeChange]);\n  function handleBlur(e) {\n    TextInputState._currentlyFocusedNode = null;\n    if (onBlur) {\n      e.nativeEvent.text = e.target.value;\n      onBlur(e);\n    }\n  }\n  function handleChange(e) {\n    var hostNode = e.target;\n    var text = hostNode.value;\n    e.nativeEvent.text = text;\n    handleContentSizeChange(hostNode);\n    if (onChange) {\n      onChange(e);\n    }\n    if (onChangeText) {\n      onChangeText(text);\n    }\n  }\n  function handleFocus(e) {\n    var hostNode = e.target;\n    if (onFocus) {\n      e.nativeEvent.text = hostNode.value;\n      onFocus(e);\n    }\n    if (hostNode != null) {\n      TextInputState._currentlyFocusedNode = hostNode;\n      if (clearTextOnFocus) {\n        hostNode.value = '';\n      }\n      if (selectTextOnFocus) {\n        // Safari requires selection to occur in a setTimeout\n        if (focusTimeout != null) {\n          clearTimeout(focusTimeout);\n        }\n        focusTimeout = setTimeout(() => {\n          if (hostNode != null) {\n            hostNode.select();\n          }\n        }, 0);\n      }\n    }\n  }\n  function handleKeyDown(e) {\n    var hostNode = e.target;\n    // Prevent key events bubbling (see #612)\n    e.stopPropagation();\n    var blurOnSubmitDefault = !multiline;\n    var shouldBlurOnSubmit = blurOnSubmit == null ? blurOnSubmitDefault : blurOnSubmit;\n    var nativeEvent = e.nativeEvent;\n    var isComposing = isEventComposing(nativeEvent);\n    if (onKeyPress) {\n      onKeyPress(e);\n    }\n    if (e.key === 'Enter' && !e.shiftKey &&\n    // Do not call submit if composition is occuring.\n    !isComposing && !e.isDefaultPrevented()) {\n      if ((blurOnSubmit || !multiline) && onSubmitEditing) {\n        // prevent \"Enter\" from inserting a newline or submitting a form\n        e.preventDefault();\n        nativeEvent.text = e.target.value;\n        onSubmitEditing(e);\n      }\n      if (shouldBlurOnSubmit && hostNode != null) {\n        setTimeout(() => hostNode.blur(), 0);\n      }\n    }\n  }\n  function handleSelectionChange(e) {\n    try {\n      var _e$target = e.target,\n        selectionStart = _e$target.selectionStart,\n        selectionEnd = _e$target.selectionEnd;\n      var _selection = {\n        start: selectionStart,\n        end: selectionEnd\n      };\n      if (onSelectionChange) {\n        e.nativeEvent.selection = _selection;\n        e.nativeEvent.text = e.target.value;\n        onSelectionChange(e);\n      }\n      if (prevSecureTextEntry.current === secureTextEntry) {\n        prevSelection.current = _selection;\n      }\n    } catch (e) {}\n  }\n  useLayoutEffect(() => {\n    var node = hostRef.current;\n    if (node != null && selection != null) {\n      setSelection(node, selection);\n    }\n    if (document.activeElement === node) {\n      TextInputState._currentlyFocusedNode = node;\n    }\n  }, [hostRef, selection]);\n  var component = multiline ? 'textarea' : 'input';\n  useElementLayout(hostRef, onLayout);\n  useResponderEvents(hostRef, {\n    onMoveShouldSetResponder,\n    onMoveShouldSetResponderCapture,\n    onResponderEnd,\n    onResponderGrant,\n    onResponderMove,\n    onResponderReject,\n    onResponderRelease,\n    onResponderStart,\n    onResponderTerminate,\n    onResponderTerminationRequest,\n    onScrollShouldSetResponder,\n    onScrollShouldSetResponderCapture,\n    onSelectionChangeShouldSetResponder,\n    onSelectionChangeShouldSetResponderCapture,\n    onStartShouldSetResponder,\n    onStartShouldSetResponderCapture\n  });\n  var _useLocaleContext = useLocaleContext(),\n    contextDirection = _useLocaleContext.direction;\n  var supportedProps = pickProps(props);\n  supportedProps.autoCapitalize = autoCapitalize;\n  supportedProps.autoComplete = autoComplete || autoCompleteType || 'on';\n  supportedProps.autoCorrect = autoCorrect ? 'on' : 'off';\n  // 'auto' by default allows browsers to infer writing direction\n  supportedProps.dir = dir !== undefined ? dir : 'auto';\n  if (returnKeyType != null) {\n    warnOnce('returnKeyType', 'returnKeyType is deprecated. Use enterKeyHint.');\n  }\n  supportedProps.enterKeyHint = enterKeyHint || returnKeyType;\n  supportedProps.inputMode = _inputMode;\n  supportedProps.onBlur = handleBlur;\n  supportedProps.onChange = handleChange;\n  supportedProps.onFocus = handleFocus;\n  supportedProps.onKeyDown = handleKeyDown;\n  supportedProps.onSelect = handleSelectionChange;\n  if (editable != null) {\n    warnOnce('editable', 'editable is deprecated. Use readOnly.');\n  }\n  supportedProps.readOnly = readOnly === true || editable === false;\n  if (numberOfLines != null) {\n    warnOnce('numberOfLines', 'TextInput numberOfLines is deprecated. Use rows.');\n  }\n  supportedProps.rows = multiline ? rows != null ? rows : numberOfLines : 1;\n  supportedProps.spellCheck = spellCheck != null ? spellCheck : autoCorrect;\n  supportedProps.style = [{\n    '--placeholderTextColor': placeholderTextColor\n  }, styles.textinput$raw, styles.placeholder, props.style, caretHidden && styles.caretHidden];\n  supportedProps.type = multiline ? undefined : type;\n  supportedProps.virtualkeyboardpolicy = showSoftInputOnFocus === false ? 'manual' : 'auto';\n  var platformMethodsRef = usePlatformMethods(supportedProps);\n  var setRef = useMergeRefs(hostRef, platformMethodsRef, imperativeRef, forwardedRef);\n  supportedProps.ref = setRef;\n  var langDirection = props.lang != null ? getLocaleDirection(props.lang) : null;\n  var componentDirection = props.dir || langDirection;\n  var writingDirection = componentDirection || contextDirection;\n  var element = createElement(component, supportedProps, {\n    writingDirection\n  });\n  return element;\n});\nTextInput.displayName = 'TextInput';\n// $FlowFixMe\nTextInput.State = TextInputState;\nvar styles = StyleSheet.create({\n  textinput$raw: {\n    MozAppearance: 'textfield',\n    WebkitAppearance: 'none',\n    backgroundColor: 'transparent',\n    border: '0 solid black',\n    borderRadius: 0,\n    boxSizing: 'border-box',\n    font: '14px System',\n    margin: 0,\n    padding: 0,\n    resize: 'none'\n  },\n  placeholder: {\n    placeholderTextColor: 'var(--placeholderTextColor)'\n  },\n  caretHidden: {\n    caretColor: 'transparent'\n  }\n});\nexport default TextInput;"],"mappings":"AAUA,OAAO,KAAKA,KAAK,MAAM,OAAO;AAC9B,OAAOC,aAAa,MAAM,kBAAkB;AAC5C,OAAO,KAAKC,cAAc,MAAM,8BAA8B;AAC9D,OAAOC,IAAI,MAAM,oBAAoB;AACrC,OAAOC,gBAAgB,MAAM,gCAAgC;AAC7D,OAAOC,eAAe,MAAM,+BAA+B;AAC3D,OAAOC,YAAY,MAAM,4BAA4B;AACrD,OAAOC,kBAAkB,MAAM,kCAAkC;AACjE,OAAOC,kBAAkB,MAAM,kCAAkC;AACjE,SAASC,kBAAkB,EAAEC,gBAAgB,QAAQ,yBAAyB;AAC9E,OAAOC,UAAU,MAAM,eAAe;AACtC,OAAOC,cAAc,MAAM,8BAA8B;AACzD,SAASC,QAAQ,QAAQ,wBAAwB;AAMjD,IAAIC,gBAAgB,GAAGA,CAACC,IAAI,EAAEC,SAAS,KAAK;EAC1C,IAAIC,YAAY,GAAGF,IAAI,CAACE,YAAY;IAClCC,cAAc,GAAGH,IAAI,CAACG,cAAc;EACtC,IAAIC,KAAK,GAAGH,SAAS,CAACG,KAAK;IACzBC,GAAG,GAAGJ,SAAS,CAACI,GAAG;EACrB,OAAOD,KAAK,KAAKD,cAAc,IAAIE,GAAG,KAAKH,YAAY;AACzD,CAAC;AAMD,IAAII,YAAY,GAAGA,CAACN,IAAI,EAAEC,SAAS,KAAK;EACtC,IAAIF,gBAAgB,CAACC,IAAI,EAAEC,SAAS,CAAC,EAAE;IACrC,IAAIG,KAAK,GAAGH,SAAS,CAACG,KAAK;MACzBC,GAAG,GAAGJ,SAAS,CAACI,GAAG;IACrB,IAAI;MACFL,IAAI,CAACO,iBAAiB,CAACH,KAAK,EAAEC,GAAG,IAAID,KAAK,CAAC;IAC7C,CAAC,CAAC,OAAOI,CAAC,EAAE,CAAC;EACf;AACF,CAAC;AACD,IAAIC,gBAAgB,GAAGC,MAAM,CAACC,MAAM,CAAC,CAAC,CAAC,EAAExB,cAAc,CAACyB,YAAY,EAAEzB,cAAc,CAAC0B,kBAAkB,EAAE1B,cAAc,CAAC2B,UAAU,EAAE3B,cAAc,CAAC4B,UAAU,EAAE5B,cAAc,CAAC6B,aAAa,EAAE7B,cAAc,CAAC8B,UAAU,EAAE9B,cAAc,CAAC+B,UAAU,EAAE/B,cAAc,CAACgC,UAAU,EAAE;EAC5QC,cAAc,EAAE,IAAI;EACpBC,YAAY,EAAE,IAAI;EAClBC,WAAW,EAAE,IAAI;EACjBC,SAAS,EAAE,IAAI;EACfC,YAAY,EAAE,IAAI;EAClBC,QAAQ,EAAE,IAAI;EACdC,IAAI,EAAE,IAAI;EACVC,SAAS,EAAE,IAAI;EACfC,QAAQ,EAAE,IAAI;EACdC,QAAQ,EAAE,IAAI;EACdC,WAAW,EAAE,IAAI;EACjBC,aAAa,EAAE,IAAI;EACnBC,QAAQ,EAAE,IAAI;EACdC,IAAI,EAAE,IAAI;EACVC,UAAU,EAAE,IAAI;EAChBC,KAAK,EAAE,IAAI;EACXC,IAAI,EAAE;AACR,CAAC,CAAC;AACF,IAAIC,SAAS,GAAGC,KAAK,IAAIlD,IAAI,CAACkD,KAAK,EAAE7B,gBAAgB,CAAC;AAItD,SAAS8B,gBAAgBA,CAACC,WAAW,EAAE;EACrC,OAAOA,WAAW,CAACC,WAAW,IAAID,WAAW,CAACE,OAAO,KAAK,GAAG;AAC/D;AACA,IAAIC,YAAY,GAAG,IAAI;AACvB,IAAIC,SAAS,GAAgB3D,KAAK,CAAC4D,UAAU,CAAC,CAACP,KAAK,EAAEQ,YAAY,KAAK;EACrE,IAAIC,qBAAqB,GAAGT,KAAK,CAAClB,cAAc;IAC9CA,cAAc,GAAG2B,qBAAqB,KAAK,KAAK,CAAC,GAAG,WAAW,GAAGA,qBAAqB;IACvF1B,YAAY,GAAGiB,KAAK,CAACjB,YAAY;IACjC2B,gBAAgB,GAAGV,KAAK,CAACU,gBAAgB;IACzCC,kBAAkB,GAAGX,KAAK,CAAChB,WAAW;IACtCA,WAAW,GAAG2B,kBAAkB,KAAK,KAAK,CAAC,GAAG,IAAI,GAAGA,kBAAkB;IACvEC,YAAY,GAAGZ,KAAK,CAACY,YAAY;IACjCC,WAAW,GAAGb,KAAK,CAACa,WAAW;IAC/BC,gBAAgB,GAAGd,KAAK,CAACc,gBAAgB;IACzCC,GAAG,GAAGf,KAAK,CAACe,GAAG;IACfC,QAAQ,GAAGhB,KAAK,CAACgB,QAAQ;IACzBC,YAAY,GAAGjB,KAAK,CAACiB,YAAY;IACjCC,SAAS,GAAGlB,KAAK,CAACkB,SAAS;IAC3BC,YAAY,GAAGnB,KAAK,CAACmB,YAAY;IACjCC,gBAAgB,GAAGpB,KAAK,CAACqB,SAAS;IAClCA,SAAS,GAAGD,gBAAgB,KAAK,KAAK,CAAC,GAAG,KAAK,GAAGA,gBAAgB;IAClEE,aAAa,GAAGtB,KAAK,CAACsB,aAAa;IACnCC,MAAM,GAAGvB,KAAK,CAACuB,MAAM;IACrBjC,QAAQ,GAAGU,KAAK,CAACV,QAAQ;IACzBkC,YAAY,GAAGxB,KAAK,CAACwB,YAAY;IACjCC,mBAAmB,GAAGzB,KAAK,CAACyB,mBAAmB;IAC/CC,OAAO,GAAG1B,KAAK,CAAC0B,OAAO;IACvBC,UAAU,GAAG3B,KAAK,CAAC2B,UAAU;IAC7BC,QAAQ,GAAG5B,KAAK,CAAC4B,QAAQ;IACzBC,wBAAwB,GAAG7B,KAAK,CAAC6B,wBAAwB;IACzDC,+BAA+B,GAAG9B,KAAK,CAAC8B,+BAA+B;IACvEC,cAAc,GAAG/B,KAAK,CAAC+B,cAAc;IACrCC,gBAAgB,GAAGhC,KAAK,CAACgC,gBAAgB;IACzCC,eAAe,GAAGjC,KAAK,CAACiC,eAAe;IACvCC,iBAAiB,GAAGlC,KAAK,CAACkC,iBAAiB;IAC3CC,kBAAkB,GAAGnC,KAAK,CAACmC,kBAAkB;IAC7CC,gBAAgB,GAAGpC,KAAK,CAACoC,gBAAgB;IACzCC,oBAAoB,GAAGrC,KAAK,CAACqC,oBAAoB;IACjDC,6BAA6B,GAAGtC,KAAK,CAACsC,6BAA6B;IACnEC,0BAA0B,GAAGvC,KAAK,CAACuC,0BAA0B;IAC7DC,iCAAiC,GAAGxC,KAAK,CAACwC,iCAAiC;IAC3EC,iBAAiB,GAAGzC,KAAK,CAACyC,iBAAiB;IAC3CC,mCAAmC,GAAG1C,KAAK,CAAC0C,mCAAmC;IAC/EC,0CAA0C,GAAG3C,KAAK,CAAC2C,0CAA0C;IAC7FC,yBAAyB,GAAG5C,KAAK,CAAC4C,yBAAyB;IAC3DC,gCAAgC,GAAG7C,KAAK,CAAC6C,gCAAgC;IACzEC,eAAe,GAAG9C,KAAK,CAAC8C,eAAe;IACvCC,oBAAoB,GAAG/C,KAAK,CAAC+C,oBAAoB;IACjDC,eAAe,GAAGhD,KAAK,CAACN,QAAQ;IAChCA,QAAQ,GAAGsD,eAAe,KAAK,KAAK,CAAC,GAAG,KAAK,GAAGA,eAAe;IAC/DC,aAAa,GAAGjD,KAAK,CAACiD,aAAa;IACnCtD,IAAI,GAAGK,KAAK,CAACL,IAAI;IACjBuD,qBAAqB,GAAGlD,KAAK,CAACmD,eAAe;IAC7CA,eAAe,GAAGD,qBAAqB,KAAK,KAAK,CAAC,GAAG,KAAK,GAAGA,qBAAqB;IAClFvF,SAAS,GAAGqC,KAAK,CAACrC,SAAS;IAC3ByF,iBAAiB,GAAGpD,KAAK,CAACoD,iBAAiB;IAC3CC,oBAAoB,GAAGrD,KAAK,CAACqD,oBAAoB;IACjDzD,UAAU,GAAGI,KAAK,CAACJ,UAAU;EAC/B,IAAIE,IAAI;EACR,IAAIwD,UAAU;EACd,IAAIpC,SAAS,IAAI,IAAI,EAAE;IACrBoC,UAAU,GAAGpC,SAAS;IACtB,IAAIA,SAAS,KAAK,OAAO,EAAE;MACzBpB,IAAI,GAAG,OAAO;IAChB,CAAC,MAAM,IAAIoB,SAAS,KAAK,KAAK,EAAE;MAC9BpB,IAAI,GAAG,KAAK;IACd,CAAC,MAAM,IAAIoB,SAAS,KAAK,QAAQ,EAAE;MACjCpB,IAAI,GAAG,QAAQ;IACjB,CAAC,MAAM,IAAIoB,SAAS,KAAK,KAAK,EAAE;MAC9BpB,IAAI,GAAG,KAAK;IACd,CAAC,MAAM;MACLA,IAAI,GAAG,MAAM;IACf;EACF,CAAC,MAAM,IAAIqB,YAAY,IAAI,IAAI,EAAE;IAC/B3D,QAAQ,CAAC,cAAc,EAAE,4CAA4C,CAAC;IACtE,QAAQ2D,YAAY;MAClB,KAAK,eAAe;QAClBrB,IAAI,GAAG,OAAO;QACd;MACF,KAAK,YAAY;MACjB,KAAK,SAAS;QACZwD,UAAU,GAAG,SAAS;QACtB;MACF,KAAK,aAAa;QAChBA,UAAU,GAAG,SAAS;QACtB;MACF,KAAK,WAAW;QACdxD,IAAI,GAAG,KAAK;QACZ;MACF,KAAK,QAAQ;MACb,KAAK,YAAY;QACfA,IAAI,GAAG,QAAQ;QACf;MACF,KAAK,KAAK;QACRA,IAAI,GAAG,KAAK;QACZ;MACF;QACEA,IAAI,GAAG,MAAM;IACjB;EACF;EACA,IAAIqD,eAAe,EAAE;IACnBrD,IAAI,GAAG,UAAU;EACnB;EACA,IAAIyD,UAAU,GAAG5G,KAAK,CAAC6G,MAAM,CAAC;IAC5BC,MAAM,EAAE,IAAI;IACZC,KAAK,EAAE;EACT,CAAC,CAAC;EACF,IAAIC,OAAO,GAAGhH,KAAK,CAAC6G,MAAM,CAAC,IAAI,CAAC;EAChC,IAAII,aAAa,GAAGjH,KAAK,CAAC6G,MAAM,CAAC,IAAI,CAAC;EACtC,IAAIK,mBAAmB,GAAGlH,KAAK,CAAC6G,MAAM,CAAC,KAAK,CAAC;EAC7C7G,KAAK,CAACmH,SAAS,CAAC,MAAM;IACpB,IAAIH,OAAO,CAACI,OAAO,IAAIH,aAAa,CAACG,OAAO,EAAE;MAC5C/F,YAAY,CAAC2F,OAAO,CAACI,OAAO,EAAEH,aAAa,CAACG,OAAO,CAAC;IACtD;IACAF,mBAAmB,CAACE,OAAO,GAAGZ,eAAe;EAC/C,CAAC,EAAE,CAACA,eAAe,CAAC,CAAC;EACrB,IAAIa,uBAAuB,GAAGrH,KAAK,CAACsH,WAAW,CAACC,QAAQ,IAAI;IAC1D,IAAI7C,SAAS,IAAII,mBAAmB,IAAIyC,QAAQ,IAAI,IAAI,EAAE;MACxD,IAAIC,SAAS,GAAGD,QAAQ,CAACE,YAAY;MACrC,IAAIC,QAAQ,GAAGH,QAAQ,CAACI,WAAW;MACnC,IAAIH,SAAS,KAAKZ,UAAU,CAACQ,OAAO,CAACN,MAAM,IAAIY,QAAQ,KAAKd,UAAU,CAACQ,OAAO,CAACL,KAAK,EAAE;QACpFH,UAAU,CAACQ,OAAO,CAACN,MAAM,GAAGU,SAAS;QACrCZ,UAAU,CAACQ,OAAO,CAACL,KAAK,GAAGW,QAAQ;QACnC5C,mBAAmB,CAAC;UAClBvB,WAAW,EAAE;YACXqE,WAAW,EAAE;cACXd,MAAM,EAAEF,UAAU,CAACQ,OAAO,CAACN,MAAM;cACjCC,KAAK,EAAEH,UAAU,CAACQ,OAAO,CAACL;YAC5B;UACF;QACF,CAAC,CAAC;MACJ;IACF;EACF,CAAC,EAAE,CAACrC,SAAS,EAAEI,mBAAmB,CAAC,CAAC;EACpC,IAAI+C,aAAa,GAAG7H,KAAK,CAAC8H,OAAO,CAAC,MAAMP,QAAQ,IAAI;IAIlD,IAAIA,QAAQ,IAAI,IAAI,EAAE;MACpBA,QAAQ,CAACQ,KAAK,GAAG,YAAY;QAC3B,IAAIR,QAAQ,IAAI,IAAI,EAAE;UACpBA,QAAQ,CAACrE,KAAK,GAAG,EAAE;QACrB;MACF,CAAC;MACDqE,QAAQ,CAACS,SAAS,GAAG,YAAY;QAC/B,OAAOT,QAAQ,IAAI,IAAI,IAAI3G,cAAc,CAACqH,qBAAqB,CAAC,CAAC,KAAKV,QAAQ;MAChF,CAAC;MACDF,uBAAuB,CAACE,QAAQ,CAAC;IACnC;EACF,CAAC,EAAE,CAACF,uBAAuB,CAAC,CAAC;EAC7B,SAASa,UAAUA,CAAC3G,CAAC,EAAE;IACrBX,cAAc,CAACuH,qBAAqB,GAAG,IAAI;IAC3C,IAAIvD,MAAM,EAAE;MACVrD,CAAC,CAACgC,WAAW,CAAC6E,IAAI,GAAG7G,CAAC,CAAC8G,MAAM,CAACnF,KAAK;MACnC0B,MAAM,CAACrD,CAAC,CAAC;IACX;EACF;EACA,SAAS+G,YAAYA,CAAC/G,CAAC,EAAE;IACvB,IAAIgG,QAAQ,GAAGhG,CAAC,CAAC8G,MAAM;IACvB,IAAID,IAAI,GAAGb,QAAQ,CAACrE,KAAK;IACzB3B,CAAC,CAACgC,WAAW,CAAC6E,IAAI,GAAGA,IAAI;IACzBf,uBAAuB,CAACE,QAAQ,CAAC;IACjC,IAAI5E,QAAQ,EAAE;MACZA,QAAQ,CAACpB,CAAC,CAAC;IACb;IACA,IAAIsD,YAAY,EAAE;MAChBA,YAAY,CAACuD,IAAI,CAAC;IACpB;EACF;EACA,SAASG,WAAWA,CAAChH,CAAC,EAAE;IACtB,IAAIgG,QAAQ,GAAGhG,CAAC,CAAC8G,MAAM;IACvB,IAAItD,OAAO,EAAE;MACXxD,CAAC,CAACgC,WAAW,CAAC6E,IAAI,GAAGb,QAAQ,CAACrE,KAAK;MACnC6B,OAAO,CAACxD,CAAC,CAAC;IACZ;IACA,IAAIgG,QAAQ,IAAI,IAAI,EAAE;MACpB3G,cAAc,CAACuH,qBAAqB,GAAGZ,QAAQ;MAC/C,IAAIpD,gBAAgB,EAAE;QACpBoD,QAAQ,CAACrE,KAAK,GAAG,EAAE;MACrB;MACA,IAAIuD,iBAAiB,EAAE;QAErB,IAAI/C,YAAY,IAAI,IAAI,EAAE;UACxB8E,YAAY,CAAC9E,YAAY,CAAC;QAC5B;QACAA,YAAY,GAAG+E,UAAU,CAAC,MAAM;UAC9B,IAAIlB,QAAQ,IAAI,IAAI,EAAE;YACpBA,QAAQ,CAACmB,MAAM,CAAC,CAAC;UACnB;QACF,CAAC,EAAE,CAAC,CAAC;MACP;IACF;EACF;EACA,SAASC,aAAaA,CAACpH,CAAC,EAAE;IACxB,IAAIgG,QAAQ,GAAGhG,CAAC,CAAC8G,MAAM;IAEvB9G,CAAC,CAACqH,eAAe,CAAC,CAAC;IACnB,IAAIC,mBAAmB,GAAG,CAACnE,SAAS;IACpC,IAAIoE,kBAAkB,GAAG7E,YAAY,IAAI,IAAI,GAAG4E,mBAAmB,GAAG5E,YAAY;IAClF,IAAIV,WAAW,GAAGhC,CAAC,CAACgC,WAAW;IAC/B,IAAIC,WAAW,GAAGF,gBAAgB,CAACC,WAAW,CAAC;IAC/C,IAAIyB,UAAU,EAAE;MACdA,UAAU,CAACzD,CAAC,CAAC;IACf;IACA,IAAIA,CAAC,CAACwH,GAAG,KAAK,OAAO,IAAI,CAACxH,CAAC,CAACyH,QAAQ,IAEpC,CAACxF,WAAW,IAAI,CAACjC,CAAC,CAAC0H,kBAAkB,CAAC,CAAC,EAAE;MACvC,IAAI,CAAChF,YAAY,IAAI,CAACS,SAAS,KAAKyB,eAAe,EAAE;QAEnD5E,CAAC,CAAC2H,cAAc,CAAC,CAAC;QAClB3F,WAAW,CAAC6E,IAAI,GAAG7G,CAAC,CAAC8G,MAAM,CAACnF,KAAK;QACjCiD,eAAe,CAAC5E,CAAC,CAAC;MACpB;MACA,IAAIuH,kBAAkB,IAAIvB,QAAQ,IAAI,IAAI,EAAE;QAC1CkB,UAAU,CAAC,MAAMlB,QAAQ,CAAC4B,IAAI,CAAC,CAAC,EAAE,CAAC,CAAC;MACtC;IACF;EACF;EACA,SAASC,qBAAqBA,CAAC7H,CAAC,EAAE;IAChC,IAAI;MACF,IAAI8H,SAAS,GAAG9H,CAAC,CAAC8G,MAAM;QACtBnH,cAAc,GAAGmI,SAAS,CAACnI,cAAc;QACzCD,YAAY,GAAGoI,SAAS,CAACpI,YAAY;MACvC,IAAIqI,UAAU,GAAG;QACfnI,KAAK,EAAED,cAAc;QACrBE,GAAG,EAAEH;MACP,CAAC;MACD,IAAI6E,iBAAiB,EAAE;QACrBvE,CAAC,CAACgC,WAAW,CAACvC,SAAS,GAAGsI,UAAU;QACpC/H,CAAC,CAACgC,WAAW,CAAC6E,IAAI,GAAG7G,CAAC,CAAC8G,MAAM,CAACnF,KAAK;QACnC4C,iBAAiB,CAACvE,CAAC,CAAC;MACtB;MACA,IAAI2F,mBAAmB,CAACE,OAAO,KAAKZ,eAAe,EAAE;QACnDS,aAAa,CAACG,OAAO,GAAGkC,UAAU;MACpC;IACF,CAAC,CAAC,OAAO/H,CAAC,EAAE,CAAC;EACf;EACAlB,eAAe,CAAC,MAAM;IACpB,IAAIU,IAAI,GAAGiG,OAAO,CAACI,OAAO;IAC1B,IAAIrG,IAAI,IAAI,IAAI,IAAIC,SAAS,IAAI,IAAI,EAAE;MACrCK,YAAY,CAACN,IAAI,EAAEC,SAAS,CAAC;IAC/B;IACA,IAAIuI,QAAQ,CAACC,aAAa,KAAKzI,IAAI,EAAE;MACnCH,cAAc,CAACuH,qBAAqB,GAAGpH,IAAI;IAC7C;EACF,CAAC,EAAE,CAACiG,OAAO,EAAEhG,SAAS,CAAC,CAAC;EACxB,IAAIyI,SAAS,GAAG/E,SAAS,GAAG,UAAU,GAAG,OAAO;EAChDtE,gBAAgB,CAAC4G,OAAO,EAAE/B,QAAQ,CAAC;EACnCzE,kBAAkB,CAACwG,OAAO,EAAE;IAC1B9B,wBAAwB;IACxBC,+BAA+B;IAC/BC,cAAc;IACdC,gBAAgB;IAChBC,eAAe;IACfC,iBAAiB;IACjBC,kBAAkB;IAClBC,gBAAgB;IAChBC,oBAAoB;IACpBC,6BAA6B;IAC7BC,0BAA0B;IAC1BC,iCAAiC;IACjCE,mCAAmC;IACnCC,0CAA0C;IAC1CC,yBAAyB;IACzBC;EACF,CAAC,CAAC;EACF,IAAIwD,iBAAiB,GAAGhJ,gBAAgB,CAAC,CAAC;IACxCiJ,gBAAgB,GAAGD,iBAAiB,CAACE,SAAS;EAChD,IAAIC,cAAc,GAAGzG,SAAS,CAACC,KAAK,CAAC;EACrCwG,cAAc,CAAC1H,cAAc,GAAGA,cAAc;EAC9C0H,cAAc,CAACzH,YAAY,GAAGA,YAAY,IAAI2B,gBAAgB,IAAI,IAAI;EACtE8F,cAAc,CAACxH,WAAW,GAAGA,WAAW,GAAG,IAAI,GAAG,KAAK;EAEvDwH,cAAc,CAACzF,GAAG,GAAGA,GAAG,KAAK0F,SAAS,GAAG1F,GAAG,GAAG,MAAM;EACrD,IAAIkC,aAAa,IAAI,IAAI,EAAE;IACzBzF,QAAQ,CAAC,eAAe,EAAE,gDAAgD,CAAC;EAC7E;EACAgJ,cAAc,CAACvF,YAAY,GAAGA,YAAY,IAAIgC,aAAa;EAC3DuD,cAAc,CAACtF,SAAS,GAAGoC,UAAU;EACrCkD,cAAc,CAACjF,MAAM,GAAGsD,UAAU;EAClC2B,cAAc,CAAClH,QAAQ,GAAG2F,YAAY;EACtCuB,cAAc,CAAC9E,OAAO,GAAGwD,WAAW;EACpCsB,cAAc,CAACE,SAAS,GAAGpB,aAAa;EACxCkB,cAAc,CAACG,QAAQ,GAAGZ,qBAAqB;EAC/C,IAAI/E,QAAQ,IAAI,IAAI,EAAE;IACpBxD,QAAQ,CAAC,UAAU,EAAE,uCAAuC,CAAC;EAC/D;EACAgJ,cAAc,CAAC9G,QAAQ,GAAGA,QAAQ,KAAK,IAAI,IAAIsB,QAAQ,KAAK,KAAK;EACjE,IAAIM,aAAa,IAAI,IAAI,EAAE;IACzB9D,QAAQ,CAAC,eAAe,EAAE,kDAAkD,CAAC;EAC/E;EACAgJ,cAAc,CAAC7G,IAAI,GAAG0B,SAAS,GAAG1B,IAAI,IAAI,IAAI,GAAGA,IAAI,GAAG2B,aAAa,GAAG,CAAC;EACzEkF,cAAc,CAAC5G,UAAU,GAAGA,UAAU,IAAI,IAAI,GAAGA,UAAU,GAAGZ,WAAW;EACzEwH,cAAc,CAACI,KAAK,GAAG,CAAC;IACtB,wBAAwB,EAAE7D;EAC5B,CAAC,EAAE8D,MAAM,CAACC,aAAa,EAAED,MAAM,CAACrH,WAAW,EAAEQ,KAAK,CAAC4G,KAAK,EAAE/F,WAAW,IAAIgG,MAAM,CAAChG,WAAW,CAAC;EAC5F2F,cAAc,CAAC1G,IAAI,GAAGuB,SAAS,GAAGoF,SAAS,GAAG3G,IAAI;EAClD0G,cAAc,CAACO,qBAAqB,GAAG1D,oBAAoB,KAAK,KAAK,GAAG,QAAQ,GAAG,MAAM;EACzF,IAAI2D,kBAAkB,GAAG9J,kBAAkB,CAACsJ,cAAc,CAAC;EAC3D,IAAIS,MAAM,GAAGhK,YAAY,CAAC0G,OAAO,EAAEqD,kBAAkB,EAAExC,aAAa,EAAEhE,YAAY,CAAC;EACnFgG,cAAc,CAACU,GAAG,GAAGD,MAAM;EAC3B,IAAIE,aAAa,GAAGnH,KAAK,CAACZ,IAAI,IAAI,IAAI,GAAGhC,kBAAkB,CAAC4C,KAAK,CAACZ,IAAI,CAAC,GAAG,IAAI;EAC9E,IAAIgI,kBAAkB,GAAGpH,KAAK,CAACe,GAAG,IAAIoG,aAAa;EACnD,IAAIE,gBAAgB,GAAGD,kBAAkB,IAAId,gBAAgB;EAC7D,IAAIgB,OAAO,GAAG1K,aAAa,CAACwJ,SAAS,EAAEI,cAAc,EAAE;IACrDa;EACF,CAAC,CAAC;EACF,OAAOC,OAAO;AAChB,CAAC,CAAC;AACFhH,SAAS,CAACiH,WAAW,GAAG,WAAW;AAEnCjH,SAAS,CAACkH,KAAK,GAAGjK,cAAc;AAChC,IAAIsJ,MAAM,GAAGvJ,UAAU,CAACmK,MAAM,CAAC;EAC7BX,aAAa,EAAE;IACbY,aAAa,EAAE,WAAW;IAC1BC,gBAAgB,EAAE,MAAM;IACxBC,eAAe,EAAE,aAAa;IAC9BC,MAAM,EAAE,eAAe;IACvBC,YAAY,EAAE,CAAC;IACfC,SAAS,EAAE,YAAY;IACvBC,IAAI,EAAE,aAAa;IACnBC,MAAM,EAAE,CAAC;IACTC,OAAO,EAAE,CAAC;IACVC,MAAM,EAAE;EACV,CAAC;EACD3I,WAAW,EAAE;IACXuD,oBAAoB,EAAE;EACxB,CAAC;EACDlC,WAAW,EAAE;IACXuH,UAAU,EAAE;EACd;AACF,CAAC,CAAC;AACF,eAAe9H,SAAS","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}