{"ast":null,"code":"import _defineProperty from \"@babel/runtime/helpers/defineProperty\";\nfunction ownKeys(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }\nfunction _objectSpread(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? ownKeys(Object(t), !0).forEach(function (r) { _defineProperty(e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; }\nimport React, { Children } from 'react';\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport View from \"react-native-web/dist/exports/View\";\nexport const childrenWithOverriddenStyle = children => {\n  return Children.map(children, child => {\n    const element = child;\n    return React.createElement(View, {\n      style: StyleSheet.absoluteFill,\n      collapsable: false\n    }, React.cloneElement(element, _objectSpread(_objectSpread({}, element.props), {}, {\n      style: [element.props.style, StyleSheet.absoluteFill]\n    })));\n  });\n};","map":{"version":3,"names":["React","Children","StyleSheet","View","childrenWithOverriddenStyle","children","map","child","element","createElement","style","absoluteFill","collapsable","cloneElement","_objectSpread","props"],"sources":["/home/rodo/workspace/passion/apps/muh-money/node_modules/react-native-pager-view/lib/module/utils.tsx"],"sourcesContent":["import React, { Children, ReactNode } from 'react';\nimport { StyleSheet, View } from 'react-native';\n\nexport const childrenWithOverriddenStyle = (children?: ReactNode) => {\n  return Children.map(children, (child) => {\n    const element = child as React.ReactElement;\n    return (\n      // Add a wrapper to ensure layout is calculated correctly\n      <View style={StyleSheet.absoluteFill} collapsable={false}>\n        {/* @ts-ignore */}\n        {React.cloneElement(element, {\n          ...element.props,\n          // Override styles so that each page will fill the parent.\n          style: [element.props.style, StyleSheet.absoluteFill],\n        })}\n      </View>\n    );\n  });\n};\n"],"mappings":";;;AAAA,OAAOA,KAAK,IAAIC,QAAQ,QAAmB,OAAO;AAAA,OAAAC,UAAA;AAAA,OAAAC,IAAA;AAGlD,OAAO,MAAMC,2BAA2B,GAAIC,QAAoB,IAAK;EACnE,OAAOJ,QAAQ,CAACK,GAAG,CAACD,QAAQ,EAAGE,KAAK,IAAK;IACvC,MAAMC,OAAO,GAAGD,KAA2B;IAC3C,OAEEP,KAAA,CAAAS,aAAA,CAACN,IAAI;MAACO,KAAK,EAAER,UAAU,CAACS,YAAa;MAACC,WAAW,EAAE;IAAM,GAEtDZ,KAAK,CAACa,YAAY,CAACL,OAAO,EAAAM,aAAA,CAAAA,aAAA,KACtBN,OAAO,CAACO,KAAK;MAEhBL,KAAK,EAAE,CAACF,OAAO,CAACO,KAAK,CAACL,KAAK,EAAER,UAAU,CAACS,YAAY;IAAA,EACrD,CACG;EAEV,CAAC,CAAC;AACJ,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}