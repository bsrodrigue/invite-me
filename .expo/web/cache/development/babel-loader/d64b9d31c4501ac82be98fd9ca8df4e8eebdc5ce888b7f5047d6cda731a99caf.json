{"ast":null,"code":"'use strict';\n\nimport * as ReactNativeFeatureFlags from '../../src/private/featureflags/ReactNativeFeatureFlags';\nimport { getFabricUIManager } from '../ReactNative/FabricUIManager';\nimport Platform from '../Utilities/Platform';\nconst UIManager = require('../ReactNative/UIManager');\nlet isLayoutAnimationEnabled = ReactNativeFeatureFlags.isLayoutAnimationEnabled();\nfunction setEnabled(value) {\n  isLayoutAnimationEnabled = isLayoutAnimationEnabled;\n}\nfunction configureNext(config, onAnimationDidEnd, onAnimationDidFail) {\n  if (Platform.isDisableAnimations) {\n    return;\n  }\n  if (!isLayoutAnimationEnabled) {\n    return;\n  }\n  let animationCompletionHasRun = false;\n  const onAnimationComplete = () => {\n    if (animationCompletionHasRun) {\n      return;\n    }\n    animationCompletionHasRun = true;\n    clearTimeout(raceWithAnimationId);\n    onAnimationDidEnd?.();\n  };\n  const raceWithAnimationId = setTimeout(onAnimationComplete, (config.duration ?? 0) + 17);\n  const FabricUIManager = getFabricUIManager();\n  if (FabricUIManager?.configureNextLayoutAnimation) {\n    global?.nativeFabricUIManager?.configureNextLayoutAnimation(config, onAnimationComplete, onAnimationDidFail ?? function () {});\n    return;\n  }\n  if (UIManager?.configureNextLayoutAnimation) {\n    UIManager.configureNextLayoutAnimation(config, onAnimationComplete ?? function () {}, onAnimationDidFail ?? function () {});\n  }\n}\nfunction create(duration, type, property) {\n  return {\n    duration,\n    create: {\n      type,\n      property\n    },\n    update: {\n      type\n    },\n    delete: {\n      type,\n      property\n    }\n  };\n}\nconst Presets = {\n  easeInEaseOut: create(300, 'easeInEaseOut', 'opacity'),\n  linear: create(500, 'linear', 'opacity'),\n  spring: {\n    duration: 700,\n    create: {\n      type: 'linear',\n      property: 'opacity'\n    },\n    update: {\n      type: 'spring',\n      springDamping: 0.4\n    },\n    delete: {\n      type: 'linear',\n      property: 'opacity'\n    }\n  }\n};\nconst LayoutAnimation = {\n  configureNext,\n  create,\n  Types: Object.freeze({\n    spring: 'spring',\n    linear: 'linear',\n    easeInEaseOut: 'easeInEaseOut',\n    easeIn: 'easeIn',\n    easeOut: 'easeOut',\n    keyboard: 'keyboard'\n  }),\n  Properties: Object.freeze({\n    opacity: 'opacity',\n    scaleX: 'scaleX',\n    scaleY: 'scaleY',\n    scaleXY: 'scaleXY'\n  }),\n  checkConfig(...args) {\n    console.error('LayoutAnimation.checkConfig(...) has been disabled.');\n  },\n  Presets,\n  easeInEaseOut: configureNext.bind(null, Presets.easeInEaseOut),\n  linear: configureNext.bind(null, Presets.linear),\n  spring: configureNext.bind(null, Presets.spring),\n  setEnabled\n};\nmodule.exports = LayoutAnimation;","map":{"version":3,"names":["ReactNativeFeatureFlags","getFabricUIManager","Platform","UIManager","require","isLayoutAnimationEnabled","setEnabled","value","configureNext","config","onAnimationDidEnd","onAnimationDidFail","isDisableAnimations","animationCompletionHasRun","onAnimationComplete","clearTimeout","raceWithAnimationId","setTimeout","duration","FabricUIManager","configureNextLayoutAnimation","global","nativeFabricUIManager","create","type","property","update","delete","Presets","easeInEaseOut","linear","spring","springDamping","LayoutAnimation","Types","Object","freeze","easeIn","easeOut","keyboard","Properties","opacity","scaleX","scaleY","scaleXY","checkConfig","args","console","error","bind","module","exports"],"sources":["/home/rodo/workspace/passion/apps/muh-money/node_modules/react-native/Libraries/LayoutAnimation/LayoutAnimation.js"],"sourcesContent":["/**\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @flow strict-local\n * @format\n */\n\n'use strict';\n\nimport type {\n  LayoutAnimationConfig as LayoutAnimationConfig_,\n  LayoutAnimationProperty,\n  LayoutAnimationType,\n} from '../Renderer/shims/ReactNativeTypes';\n\nimport * as ReactNativeFeatureFlags from '../../src/private/featureflags/ReactNativeFeatureFlags';\nimport {getFabricUIManager} from '../ReactNative/FabricUIManager';\nimport Platform from '../Utilities/Platform';\n\nconst UIManager = require('../ReactNative/UIManager');\n\n// Reexport type\nexport type LayoutAnimationConfig = LayoutAnimationConfig_;\n\ntype OnAnimationDidEndCallback = () => void;\ntype OnAnimationDidFailCallback = () => void;\n\nlet isLayoutAnimationEnabled: boolean =\n  ReactNativeFeatureFlags.isLayoutAnimationEnabled();\n\nfunction setEnabled(value: boolean) {\n  isLayoutAnimationEnabled = isLayoutAnimationEnabled;\n}\n\n/**\n * Configures the next commit to be animated.\n *\n * onAnimationDidEnd is guaranteed to be called when the animation completes.\n * onAnimationDidFail is *never* called in the classic, pre-Fabric renderer,\n * and never has been. In the new renderer (Fabric) it is called only if configuration\n * parsing fails.\n */\nfunction configureNext(\n  config: LayoutAnimationConfig,\n  onAnimationDidEnd?: OnAnimationDidEndCallback,\n  onAnimationDidFail?: OnAnimationDidFailCallback,\n) {\n  if (Platform.isDisableAnimations) {\n    return;\n  }\n\n  if (!isLayoutAnimationEnabled) {\n    return;\n  }\n\n  // Since LayoutAnimations may possibly be disabled for now on iOS (Fabric),\n  // or Android (non-Fabric) we race a setTimeout with animation completion,\n  // in case onComplete is never called\n  // from native. Once LayoutAnimations+Fabric unconditionally ship everywhere, we can\n  // delete this mechanism at least in the Fabric branch.\n  let animationCompletionHasRun = false;\n  const onAnimationComplete = () => {\n    if (animationCompletionHasRun) {\n      return;\n    }\n    animationCompletionHasRun = true;\n    clearTimeout(raceWithAnimationId);\n    onAnimationDidEnd?.();\n  };\n  const raceWithAnimationId = setTimeout(\n    onAnimationComplete,\n    (config.duration ?? 0) + 17 /* one frame + 1ms */,\n  );\n\n  // In Fabric, LayoutAnimations are unconditionally enabled for Android, and\n  // conditionally enabled on iOS (pending fully shipping; this is a temporary state).\n  const FabricUIManager = getFabricUIManager();\n  if (FabricUIManager?.configureNextLayoutAnimation) {\n    global?.nativeFabricUIManager?.configureNextLayoutAnimation(\n      config,\n      onAnimationComplete,\n      onAnimationDidFail ??\n        function () {} /* this will only be called if configuration parsing fails */,\n    );\n    return;\n  }\n\n  // This will only run if Fabric is *not* installed.\n  // If you have Fabric + non-Fabric running in the same VM, non-Fabric LayoutAnimations\n  // will not work.\n  if (UIManager?.configureNextLayoutAnimation) {\n    UIManager.configureNextLayoutAnimation(\n      config,\n      onAnimationComplete ?? function () {},\n      onAnimationDidFail ??\n        function () {} /* this should never be called in Non-Fabric */,\n    );\n  }\n}\n\nfunction create(\n  duration: number,\n  type: LayoutAnimationType,\n  property: LayoutAnimationProperty,\n): LayoutAnimationConfig {\n  return {\n    duration,\n    create: {type, property},\n    update: {type},\n    delete: {type, property},\n  };\n}\n\nconst Presets = {\n  easeInEaseOut: (create(\n    300,\n    'easeInEaseOut',\n    'opacity',\n  ): LayoutAnimationConfig),\n  linear: (create(500, 'linear', 'opacity'): LayoutAnimationConfig),\n  spring: {\n    duration: 700,\n    create: {\n      type: 'linear',\n      property: 'opacity',\n    },\n    update: {\n      type: 'spring',\n      springDamping: 0.4,\n    },\n    delete: {\n      type: 'linear',\n      property: 'opacity',\n    },\n  },\n};\n\n/**\n * Automatically animates views to their new positions when the\n * next layout happens.\n *\n * A common way to use this API is to call it before calling `setState`.\n *\n * Note that in order to get this to work on **Android** you need to set the following flags via `UIManager`:\n *\n *     UIManager.setLayoutAnimationEnabledExperimental && UIManager.setLayoutAnimationEnabledExperimental(true);\n */\nconst LayoutAnimation = {\n  /**\n   * Schedules an animation to happen on the next layout.\n   *\n   * @param config Specifies animation properties:\n   *\n   *   - `duration` in milliseconds\n   *   - `create`, `AnimationConfig` for animating in new views\n   *   - `update`, `AnimationConfig` for animating views that have been updated\n   *\n   * @param onAnimationDidEnd Called when the animation finished.\n   * Only supported on iOS.\n   * @param onError Called on error. Only supported on iOS.\n   */\n  configureNext,\n  /**\n   * Helper for creating a config for `configureNext`.\n   */\n  create,\n  Types: Object.freeze({\n    spring: 'spring',\n    linear: 'linear',\n    easeInEaseOut: 'easeInEaseOut',\n    easeIn: 'easeIn',\n    easeOut: 'easeOut',\n    keyboard: 'keyboard',\n  }),\n  Properties: Object.freeze({\n    opacity: 'opacity',\n    scaleX: 'scaleX',\n    scaleY: 'scaleY',\n    scaleXY: 'scaleXY',\n  }),\n  checkConfig(...args: Array<mixed>) {\n    console.error('LayoutAnimation.checkConfig(...) has been disabled.');\n  },\n  Presets,\n  easeInEaseOut: (configureNext.bind(null, Presets.easeInEaseOut): (\n    onAnimationDidEnd?: OnAnimationDidEndCallback,\n  ) => void),\n  linear: (configureNext.bind(null, Presets.linear): (\n    onAnimationDidEnd?: OnAnimationDidEndCallback,\n  ) => void),\n  spring: (configureNext.bind(null, Presets.spring): (\n    onAnimationDidEnd?: OnAnimationDidEndCallback,\n  ) => void),\n  setEnabled,\n};\n\nmodule.exports = LayoutAnimation;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}