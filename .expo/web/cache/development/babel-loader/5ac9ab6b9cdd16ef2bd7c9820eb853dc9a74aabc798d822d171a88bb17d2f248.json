{"ast":null,"code":"import * as TurboModuleRegistry from '../../../../Libraries/TurboModule/TurboModuleRegistry';\nconst Platform = require('../../../../Libraries/Utilities/Platform');\nconst NativeModule = TurboModuleRegistry.getEnforcing('ExceptionsManager');\nconst ExceptionsManager = {\n  reportFatalException(message, stack, exceptionId) {\n    NativeModule.reportFatalException(message, stack, exceptionId);\n  },\n  reportSoftException(message, stack, exceptionId) {\n    NativeModule.reportSoftException(message, stack, exceptionId);\n  },\n  updateExceptionMessage(message, stack, exceptionId) {\n    NativeModule.updateExceptionMessage(message, stack, exceptionId);\n  },\n  dismissRedbox() {\n    if (Platform.OS !== 'ios' && NativeModule.dismissRedbox) {\n      NativeModule.dismissRedbox();\n    }\n  },\n  reportException(data) {\n    if (NativeModule.reportException) {\n      NativeModule.reportException(data);\n      return;\n    }\n    if (data.isFatal) {\n      ExceptionsManager.reportFatalException(data.message, data.stack, data.id);\n    } else {\n      ExceptionsManager.reportSoftException(data.message, data.stack, data.id);\n    }\n  }\n};\nexport default ExceptionsManager;","map":{"version":3,"names":["TurboModuleRegistry","Platform","require","NativeModule","getEnforcing","ExceptionsManager","reportFatalException","message","stack","exceptionId","reportSoftException","updateExceptionMessage","dismissRedbox","OS","reportException","data","isFatal","id"],"sources":["/home/rodo/workspace/passion/apps/muh-money/node_modules/react-native/src/private/specs/modules/NativeExceptionsManager.js"],"sourcesContent":["/**\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @flow strict\n * @format\n */\n\nimport type {TurboModule} from '../../../../Libraries/TurboModule/RCTExport';\n\nimport * as TurboModuleRegistry from '../../../../Libraries/TurboModule/TurboModuleRegistry';\n\nconst Platform = require('../../../../Libraries/Utilities/Platform');\n\nexport type StackFrame = {|\n  column: ?number,\n  file: ?string,\n  lineNumber: ?number,\n  methodName: string,\n  collapse?: boolean,\n|};\nexport type ExceptionData = {\n  message: string,\n  originalMessage: ?string,\n  name: ?string,\n  componentStack: ?string,\n  stack: Array<StackFrame>,\n  id: number,\n  isFatal: boolean,\n  // flowlint-next-line unclear-type:off\n  extraData?: Object,\n  ...\n};\nexport interface Spec extends TurboModule {\n  // Deprecated: Use `reportException`\n  +reportFatalException: (\n    message: string,\n    stack: Array<StackFrame>,\n    exceptionId: number,\n  ) => void;\n  // Deprecated: Use `reportException`\n  +reportSoftException: (\n    message: string,\n    stack: Array<StackFrame>,\n    exceptionId: number,\n  ) => void;\n  +reportException?: (data: ExceptionData) => void;\n  +updateExceptionMessage: (\n    message: string,\n    stack: Array<StackFrame>,\n    exceptionId: number,\n  ) => void;\n  // TODO(T53311281): This is a noop on iOS now. Implement it.\n  +dismissRedbox?: () => void;\n}\n\nconst NativeModule =\n  TurboModuleRegistry.getEnforcing<Spec>('ExceptionsManager');\n\nconst ExceptionsManager = {\n  reportFatalException(\n    message: string,\n    stack: Array<StackFrame>,\n    exceptionId: number,\n  ) {\n    NativeModule.reportFatalException(message, stack, exceptionId);\n  },\n  reportSoftException(\n    message: string,\n    stack: Array<StackFrame>,\n    exceptionId: number,\n  ) {\n    NativeModule.reportSoftException(message, stack, exceptionId);\n  },\n  updateExceptionMessage(\n    message: string,\n    stack: Array<StackFrame>,\n    exceptionId: number,\n  ) {\n    NativeModule.updateExceptionMessage(message, stack, exceptionId);\n  },\n  dismissRedbox(): void {\n    if (Platform.OS !== 'ios' && NativeModule.dismissRedbox) {\n      // TODO(T53311281): This is a noop on iOS now. Implement it.\n      NativeModule.dismissRedbox();\n    }\n  },\n  reportException(data: ExceptionData): void {\n    if (NativeModule.reportException) {\n      NativeModule.reportException(data);\n      return;\n    }\n    if (data.isFatal) {\n      ExceptionsManager.reportFatalException(data.message, data.stack, data.id);\n    } else {\n      ExceptionsManager.reportSoftException(data.message, data.stack, data.id);\n    }\n  },\n};\n\nexport default ExceptionsManager;\n"],"mappings":"AAYA,OAAO,KAAKA,mBAAmB,MAAM,uDAAuD;AAE5F,MAAMC,QAAQ,GAAGC,OAAO,CAAC,0CAA0C,CAAC;AA4CpE,MAAMC,YAAY,GAChBH,mBAAmB,CAACI,YAAY,CAAO,mBAAmB,CAAC;AAE7D,MAAMC,iBAAiB,GAAG;EACxBC,oBAAoBA,CAClBC,OAAe,EACfC,KAAwB,EACxBC,WAAmB,EACnB;IACAN,YAAY,CAACG,oBAAoB,CAACC,OAAO,EAAEC,KAAK,EAAEC,WAAW,CAAC;EAChE,CAAC;EACDC,mBAAmBA,CACjBH,OAAe,EACfC,KAAwB,EACxBC,WAAmB,EACnB;IACAN,YAAY,CAACO,mBAAmB,CAACH,OAAO,EAAEC,KAAK,EAAEC,WAAW,CAAC;EAC/D,CAAC;EACDE,sBAAsBA,CACpBJ,OAAe,EACfC,KAAwB,EACxBC,WAAmB,EACnB;IACAN,YAAY,CAACQ,sBAAsB,CAACJ,OAAO,EAAEC,KAAK,EAAEC,WAAW,CAAC;EAClE,CAAC;EACDG,aAAaA,CAAA,EAAS;IACpB,IAAIX,QAAQ,CAACY,EAAE,KAAK,KAAK,IAAIV,YAAY,CAACS,aAAa,EAAE;MAEvDT,YAAY,CAACS,aAAa,CAAC,CAAC;IAC9B;EACF,CAAC;EACDE,eAAeA,CAACC,IAAmB,EAAQ;IACzC,IAAIZ,YAAY,CAACW,eAAe,EAAE;MAChCX,YAAY,CAACW,eAAe,CAACC,IAAI,CAAC;MAClC;IACF;IACA,IAAIA,IAAI,CAACC,OAAO,EAAE;MAChBX,iBAAiB,CAACC,oBAAoB,CAACS,IAAI,CAACR,OAAO,EAAEQ,IAAI,CAACP,KAAK,EAAEO,IAAI,CAACE,EAAE,CAAC;IAC3E,CAAC,MAAM;MACLZ,iBAAiB,CAACK,mBAAmB,CAACK,IAAI,CAACR,OAAO,EAAEQ,IAAI,CAACP,KAAK,EAAEO,IAAI,CAACE,EAAE,CAAC;IAC1E;EACF;AACF,CAAC;AAED,eAAeZ,iBAAiB","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}