{"ast":null,"code":"import RCTDeviceEventEmitter from '../EventEmitter/RCTDeviceEventEmitter';\nimport EventEmitter from '../vendor/emitter/EventEmitter';\nimport NativeDeviceInfo from './NativeDeviceInfo';\nimport invariant from 'invariant';\nconst eventEmitter = new EventEmitter();\nlet dimensionsInitialized = false;\nlet dimensions;\nclass Dimensions {\n  static get(dim) {\n    invariant(dimensions[dim], 'No dimension set for key ' + dim);\n    return dimensions[dim];\n  }\n  static set(dims) {\n    let {\n      screen,\n      window\n    } = dims;\n    const {\n      windowPhysicalPixels\n    } = dims;\n    if (windowPhysicalPixels) {\n      window = {\n        width: windowPhysicalPixels.width / windowPhysicalPixels.scale,\n        height: windowPhysicalPixels.height / windowPhysicalPixels.scale,\n        scale: windowPhysicalPixels.scale,\n        fontScale: windowPhysicalPixels.fontScale\n      };\n    }\n    const {\n      screenPhysicalPixels\n    } = dims;\n    if (screenPhysicalPixels) {\n      screen = {\n        width: screenPhysicalPixels.width / screenPhysicalPixels.scale,\n        height: screenPhysicalPixels.height / screenPhysicalPixels.scale,\n        scale: screenPhysicalPixels.scale,\n        fontScale: screenPhysicalPixels.fontScale\n      };\n    } else if (screen == null) {\n      screen = window;\n    }\n    dimensions = {\n      window,\n      screen\n    };\n    if (dimensionsInitialized) {\n      eventEmitter.emit('change', dimensions);\n    } else {\n      dimensionsInitialized = true;\n    }\n  }\n  static addEventListener(type, handler) {\n    invariant(type === 'change', 'Trying to subscribe to unknown event: \"%s\"', type);\n    return eventEmitter.addListener(type, handler);\n  }\n}\nRCTDeviceEventEmitter.addListener('didUpdateDimensions', update => {\n  Dimensions.set(update);\n});\nDimensions.set(NativeDeviceInfo.getConstants().Dimensions);\nexport default Dimensions;","map":{"version":3,"names":["RCTDeviceEventEmitter","EventEmitter","NativeDeviceInfo","invariant","eventEmitter","dimensionsInitialized","dimensions","Dimensions","get","dim","set","dims","screen","window","windowPhysicalPixels","width","scale","height","fontScale","screenPhysicalPixels","emit","addEventListener","type","handler","addListener","update","getConstants"],"sources":["/home/rodo/workspace/passion/apps/muh-money/node_modules/react-native/Libraries/Utilities/Dimensions.js"],"sourcesContent":["/**\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @format\n * @flow\n */\n\nimport RCTDeviceEventEmitter from '../EventEmitter/RCTDeviceEventEmitter';\nimport EventEmitter, {\n  type EventSubscription,\n} from '../vendor/emitter/EventEmitter';\nimport NativeDeviceInfo, {\n  type DimensionsPayload,\n  type DisplayMetrics,\n  type DisplayMetricsAndroid,\n} from './NativeDeviceInfo';\nimport invariant from 'invariant';\n\nconst eventEmitter = new EventEmitter<{\n  change: [DimensionsPayload],\n}>();\nlet dimensionsInitialized = false;\nlet dimensions: DimensionsPayload;\n\nclass Dimensions {\n  /**\n   * NOTE: `useWindowDimensions` is the preferred API for React components.\n   *\n   * Initial dimensions are set before `runApplication` is called so they should\n   * be available before any other require's are run, but may be updated later.\n   *\n   * Note: Although dimensions are available immediately, they may change (e.g\n   * due to device rotation) so any rendering logic or styles that depend on\n   * these constants should try to call this function on every render, rather\n   * than caching the value (for example, using inline styles rather than\n   * setting a value in a `StyleSheet`).\n   *\n   * Example: `const {height, width} = Dimensions.get('window');`\n   *\n   * @param {string} dim Name of dimension as defined when calling `set`.\n   * @returns {DisplayMetrics? | DisplayMetricsAndroid?} Value for the dimension.\n   */\n  static get(dim: string): DisplayMetrics | DisplayMetricsAndroid {\n    invariant(dimensions[dim], 'No dimension set for key ' + dim);\n    return dimensions[dim];\n  }\n\n  /**\n   * This should only be called from native code by sending the\n   * didUpdateDimensions event.\n   *\n   * @param {DimensionsPayload} dims Simple string-keyed object of dimensions to set\n   */\n  static set(dims: $ReadOnly<DimensionsPayload>): void {\n    // We calculate the window dimensions in JS so that we don't encounter loss of\n    // precision in transferring the dimensions (which could be non-integers) over\n    // the bridge.\n    let {screen, window} = dims;\n    const {windowPhysicalPixels} = dims;\n    if (windowPhysicalPixels) {\n      window = {\n        width: windowPhysicalPixels.width / windowPhysicalPixels.scale,\n        height: windowPhysicalPixels.height / windowPhysicalPixels.scale,\n        scale: windowPhysicalPixels.scale,\n        fontScale: windowPhysicalPixels.fontScale,\n      };\n    }\n    const {screenPhysicalPixels} = dims;\n    if (screenPhysicalPixels) {\n      screen = {\n        width: screenPhysicalPixels.width / screenPhysicalPixels.scale,\n        height: screenPhysicalPixels.height / screenPhysicalPixels.scale,\n        scale: screenPhysicalPixels.scale,\n        fontScale: screenPhysicalPixels.fontScale,\n      };\n    } else if (screen == null) {\n      screen = window;\n    }\n\n    dimensions = {window, screen};\n    if (dimensionsInitialized) {\n      // Don't fire 'change' the first time the dimensions are set.\n      eventEmitter.emit('change', dimensions);\n    } else {\n      dimensionsInitialized = true;\n    }\n  }\n\n  /**\n   * Add an event handler. Supported events:\n   *\n   * - `change`: Fires when a property within the `Dimensions` object changes. The argument\n   *   to the event handler is an object with `window` and `screen` properties whose values\n   *   are the same as the return values of `Dimensions.get('window')` and\n   *   `Dimensions.get('screen')`, respectively.\n   */\n  static addEventListener(\n    type: 'change',\n    handler: Function,\n  ): EventSubscription {\n    invariant(\n      type === 'change',\n      'Trying to subscribe to unknown event: \"%s\"',\n      type,\n    );\n    return eventEmitter.addListener(type, handler);\n  }\n}\n\n// Subscribe before calling getConstants to make sure we don't miss any updates in between.\nRCTDeviceEventEmitter.addListener(\n  'didUpdateDimensions',\n  (update: DimensionsPayload) => {\n    Dimensions.set(update);\n  },\n);\nDimensions.set(NativeDeviceInfo.getConstants().Dimensions);\n\nexport default Dimensions;\n"],"mappings":"AAUA,OAAOA,qBAAqB,MAAM,uCAAuC;AACzE,OAAOC,YAAY,MAEZ,gCAAgC;AACvC,OAAOC,gBAAgB,MAIhB,oBAAoB;AAC3B,OAAOC,SAAS,MAAM,WAAW;AAEjC,MAAMC,YAAY,GAAG,IAAIH,YAAY,CAElC,CAAC;AACJ,IAAII,qBAAqB,GAAG,KAAK;AACjC,IAAIC,UAA6B;AAEjC,MAAMC,UAAU,CAAC;EAkBf,OAAOC,GAAGA,CAACC,GAAW,EAA0C;IAC9DN,SAAS,CAACG,UAAU,CAACG,GAAG,CAAC,EAAE,2BAA2B,GAAGA,GAAG,CAAC;IAC7D,OAAOH,UAAU,CAACG,GAAG,CAAC;EACxB;EAQA,OAAOC,GAAGA,CAACC,IAAkC,EAAQ;IAInD,IAAI;MAACC,MAAM;MAAEC;IAAM,CAAC,GAAGF,IAAI;IAC3B,MAAM;MAACG;IAAoB,CAAC,GAAGH,IAAI;IACnC,IAAIG,oBAAoB,EAAE;MACxBD,MAAM,GAAG;QACPE,KAAK,EAAED,oBAAoB,CAACC,KAAK,GAAGD,oBAAoB,CAACE,KAAK;QAC9DC,MAAM,EAAEH,oBAAoB,CAACG,MAAM,GAAGH,oBAAoB,CAACE,KAAK;QAChEA,KAAK,EAAEF,oBAAoB,CAACE,KAAK;QACjCE,SAAS,EAAEJ,oBAAoB,CAACI;MAClC,CAAC;IACH;IACA,MAAM;MAACC;IAAoB,CAAC,GAAGR,IAAI;IACnC,IAAIQ,oBAAoB,EAAE;MACxBP,MAAM,GAAG;QACPG,KAAK,EAAEI,oBAAoB,CAACJ,KAAK,GAAGI,oBAAoB,CAACH,KAAK;QAC9DC,MAAM,EAAEE,oBAAoB,CAACF,MAAM,GAAGE,oBAAoB,CAACH,KAAK;QAChEA,KAAK,EAAEG,oBAAoB,CAACH,KAAK;QACjCE,SAAS,EAAEC,oBAAoB,CAACD;MAClC,CAAC;IACH,CAAC,MAAM,IAAIN,MAAM,IAAI,IAAI,EAAE;MACzBA,MAAM,GAAGC,MAAM;IACjB;IAEAP,UAAU,GAAG;MAACO,MAAM;MAAED;IAAM,CAAC;IAC7B,IAAIP,qBAAqB,EAAE;MAEzBD,YAAY,CAACgB,IAAI,CAAC,QAAQ,EAAEd,UAAU,CAAC;IACzC,CAAC,MAAM;MACLD,qBAAqB,GAAG,IAAI;IAC9B;EACF;EAUA,OAAOgB,gBAAgBA,CACrBC,IAAc,EACdC,OAAiB,EACE;IACnBpB,SAAS,CACPmB,IAAI,KAAK,QAAQ,EACjB,4CAA4C,EAC5CA,IACF,CAAC;IACD,OAAOlB,YAAY,CAACoB,WAAW,CAACF,IAAI,EAAEC,OAAO,CAAC;EAChD;AACF;AAGAvB,qBAAqB,CAACwB,WAAW,CAC/B,qBAAqB,EACpBC,MAAyB,IAAK;EAC7BlB,UAAU,CAACG,GAAG,CAACe,MAAM,CAAC;AACxB,CACF,CAAC;AACDlB,UAAU,CAACG,GAAG,CAACR,gBAAgB,CAACwB,YAAY,CAAC,CAAC,CAACnB,UAAU,CAAC;AAE1D,eAAeA,UAAU","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}