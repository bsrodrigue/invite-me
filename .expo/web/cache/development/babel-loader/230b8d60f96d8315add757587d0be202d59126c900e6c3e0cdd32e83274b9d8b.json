{"ast":null,"code":"import Platform from '../Utilities/Platform';\nconst ReactNativeVersion = require('./ReactNativeVersion');\nconst checkVersions = function checkVersions() {\n  const nativeVersion = Platform.constants.reactNativeVersion;\n  if (ReactNativeVersion.version.major !== nativeVersion.major || ReactNativeVersion.version.minor !== nativeVersion.minor) {\n    console.error(`React Native version mismatch.\\n\\nJavaScript version: ${_formatVersion(ReactNativeVersion.version)}\\n` + `Native version: ${_formatVersion(nativeVersion)}\\n\\n` + 'Make sure that you have rebuilt the native code. If the problem ' + 'persists try clearing the Watchman and packager caches with ' + '`watchman watch-del-all && npx react-native start --reset-cache`.');\n  }\n};\nfunction _formatVersion(version) {\n  return `${version.major}.${version.minor}.${version.patch}` + (version.prerelease != undefined ? `-${version.prerelease}` : '');\n}\nmodule.exports = {\n  checkVersions\n};","map":{"version":3,"names":["Platform","ReactNativeVersion","require","checkVersions","nativeVersion","constants","reactNativeVersion","version","major","minor","console","error","_formatVersion","patch","prerelease","undefined","module","exports"],"sources":["/home/rodo/workspace/passion/apps/muh-money/node_modules/react-native/Libraries/Core/ReactNativeVersionCheck.js"],"sourcesContent":["/**\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @flow strict\n * @format\n */\n\nimport Platform from '../Utilities/Platform';\n\nconst ReactNativeVersion = require('./ReactNativeVersion');\n\n/**\n * Checks that the version of this React Native JS is compatible with the native\n * code, throwing an error if it isn't.\n *\n * The existence of this module is part of the public interface of React Native\n * even though it is used only internally within React Native. React Native\n * implementations for other platforms (ex: Windows) may override this module\n * and rely on its existence as a separate module.\n */\nconst checkVersions = function checkVersions(): void {\n  const nativeVersion = Platform.constants.reactNativeVersion;\n  if (\n    ReactNativeVersion.version.major !== nativeVersion.major ||\n    ReactNativeVersion.version.minor !== nativeVersion.minor\n  ) {\n    console.error(\n      `React Native version mismatch.\\n\\nJavaScript version: ${_formatVersion(\n        (ReactNativeVersion.version: $FlowFixMe),\n      )}\\n` +\n        `Native version: ${_formatVersion(nativeVersion)}\\n\\n` +\n        'Make sure that you have rebuilt the native code. If the problem ' +\n        'persists try clearing the Watchman and packager caches with ' +\n        '`watchman watch-del-all && npx react-native start --reset-cache`.',\n    );\n  }\n};\n\nfunction _formatVersion(\n  version: (typeof Platform)['constants']['reactNativeVersion'],\n): string {\n  return (\n    `${version.major}.${version.minor}.${version.patch}` +\n    // eslint-disable-next-line eqeqeq\n    (version.prerelease != undefined ? `-${version.prerelease}` : '')\n  );\n}\n\nmodule.exports = {checkVersions};\n"],"mappings":"AAUA,OAAOA,QAAQ,MAAM,uBAAuB;AAE5C,MAAMC,kBAAkB,GAAGC,OAAO,CAAC,sBAAsB,CAAC;AAW1D,MAAMC,aAAa,GAAG,SAASA,aAAaA,CAAA,EAAS;EACnD,MAAMC,aAAa,GAAGJ,QAAQ,CAACK,SAAS,CAACC,kBAAkB;EAC3D,IACEL,kBAAkB,CAACM,OAAO,CAACC,KAAK,KAAKJ,aAAa,CAACI,KAAK,IACxDP,kBAAkB,CAACM,OAAO,CAACE,KAAK,KAAKL,aAAa,CAACK,KAAK,EACxD;IACAC,OAAO,CAACC,KAAK,CACX,yDAAyDC,cAAc,CACpEX,kBAAkB,CAACM,OACtB,CAAC,IAAI,GACH,mBAAmBK,cAAc,CAACR,aAAa,CAAC,MAAM,GACtD,kEAAkE,GAClE,8DAA8D,GAC9D,mEACJ,CAAC;EACH;AACF,CAAC;AAED,SAASQ,cAAcA,CACrBL,OAA6D,EACrD;EACR,OACE,GAAGA,OAAO,CAACC,KAAK,IAAID,OAAO,CAACE,KAAK,IAAIF,OAAO,CAACM,KAAK,EAAE,IAEnDN,OAAO,CAACO,UAAU,IAAIC,SAAS,GAAG,IAAIR,OAAO,CAACO,UAAU,EAAE,GAAG,EAAE,CAAC;AAErE;AAEAE,MAAM,CAACC,OAAO,GAAG;EAACd;AAAa,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}