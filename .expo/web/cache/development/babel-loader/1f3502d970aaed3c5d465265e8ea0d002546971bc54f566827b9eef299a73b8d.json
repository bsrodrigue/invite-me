{"ast":null,"code":"'use strict';\n\nconst {\n  isNativeFunction\n} = require('../Utilities/FeatureDetection');\nconst {\n  polyfillGlobal\n} = require('../Utilities/PolyfillFunctions');\nif (__DEV__) {\n  if (typeof global.Promise !== 'function') {\n    console.error('Promise should exist before setting up timers.');\n  }\n}\nconst hasHermesPromiseQueuedToJSVM = global.HermesInternal?.hasPromise?.() === true && global.HermesInternal?.useEngineQueue?.() === true;\nconst hasNativePromise = isNativeFunction(Promise);\nconst hasPromiseQueuedToJSVM = hasNativePromise || hasHermesPromiseQueuedToJSVM;\nif (global.RN$Bridgeless !== true) {\n  const defineLazyTimer = name => {\n    polyfillGlobal(name, () => require('./Timers/JSTimers')[name]);\n  };\n  defineLazyTimer('setTimeout');\n  defineLazyTimer('clearTimeout');\n  defineLazyTimer('setInterval');\n  defineLazyTimer('clearInterval');\n  defineLazyTimer('requestAnimationFrame');\n  defineLazyTimer('cancelAnimationFrame');\n  defineLazyTimer('requestIdleCallback');\n  defineLazyTimer('cancelIdleCallback');\n}\nif (hasPromiseQueuedToJSVM) {\n  polyfillGlobal('setImmediate', () => require('./Timers/immediateShim').setImmediate);\n  polyfillGlobal('clearImmediate', () => require('./Timers/immediateShim').clearImmediate);\n} else {\n  if (global.RN$Bridgeless !== true) {\n    polyfillGlobal('setImmediate', () => require('./Timers/JSTimers').queueReactNativeMicrotask);\n    polyfillGlobal('clearImmediate', () => require('./Timers/JSTimers').clearReactNativeMicrotask);\n  }\n}\nif (hasHermesPromiseQueuedToJSVM) {\n  polyfillGlobal('queueMicrotask', () => global.HermesInternal?.enqueueJob);\n} else {\n  polyfillGlobal('queueMicrotask', () => require('./Timers/queueMicrotask.js').default);\n}","map":{"version":3,"names":["isNativeFunction","require","polyfillGlobal","__DEV__","global","Promise","console","error","hasHermesPromiseQueuedToJSVM","HermesInternal","hasPromise","useEngineQueue","hasNativePromise","hasPromiseQueuedToJSVM","RN$Bridgeless","defineLazyTimer","name","setImmediate","clearImmediate","queueReactNativeMicrotask","clearReactNativeMicrotask","enqueueJob","default"],"sources":["/home/rodo/workspace/passion/apps/muh-money/node_modules/react-native/Libraries/Core/setUpTimers.js"],"sourcesContent":["/**\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @flow strict-local\n * @format\n */\n\n'use strict';\n\nconst {isNativeFunction} = require('../Utilities/FeatureDetection');\nconst {polyfillGlobal} = require('../Utilities/PolyfillFunctions');\n\nif (__DEV__) {\n  if (typeof global.Promise !== 'function') {\n    console.error('Promise should exist before setting up timers.');\n  }\n}\n\n// Currently, Hermes `Promise` is implemented via Internal Bytecode.\nconst hasHermesPromiseQueuedToJSVM =\n  global.HermesInternal?.hasPromise?.() === true &&\n  global.HermesInternal?.useEngineQueue?.() === true;\n\nconst hasNativePromise = isNativeFunction(Promise);\nconst hasPromiseQueuedToJSVM = hasNativePromise || hasHermesPromiseQueuedToJSVM;\n\n// In bridgeless mode, timers are host functions installed from cpp.\nif (global.RN$Bridgeless !== true) {\n  /**\n   * Set up timers.\n   * You can use this module directly, or just require InitializeCore.\n   */\n  const defineLazyTimer = (\n    name:\n      | $TEMPORARY$string<'cancelAnimationFrame'>\n      | $TEMPORARY$string<'cancelIdleCallback'>\n      | $TEMPORARY$string<'clearInterval'>\n      | $TEMPORARY$string<'clearTimeout'>\n      | $TEMPORARY$string<'requestAnimationFrame'>\n      | $TEMPORARY$string<'requestIdleCallback'>\n      | $TEMPORARY$string<'setInterval'>\n      | $TEMPORARY$string<'setTimeout'>,\n  ) => {\n    polyfillGlobal(name, () => require('./Timers/JSTimers')[name]);\n  };\n  defineLazyTimer('setTimeout');\n  defineLazyTimer('clearTimeout');\n  defineLazyTimer('setInterval');\n  defineLazyTimer('clearInterval');\n  defineLazyTimer('requestAnimationFrame');\n  defineLazyTimer('cancelAnimationFrame');\n  defineLazyTimer('requestIdleCallback');\n  defineLazyTimer('cancelIdleCallback');\n}\n\n/**\n * Set up immediate APIs, which is required to use the same microtask queue\n * as the Promise.\n */\nif (hasPromiseQueuedToJSVM) {\n  // When promise queues to the JSVM microtasks queue, we shim the immediate\n  // APIs via `queueMicrotask` to maintain the backward compatibility.\n  polyfillGlobal(\n    'setImmediate',\n    () => require('./Timers/immediateShim').setImmediate,\n  );\n  polyfillGlobal(\n    'clearImmediate',\n    () => require('./Timers/immediateShim').clearImmediate,\n  );\n} else {\n  // When promise was polyfilled hence is queued to the RN microtask queue,\n  // we polyfill the immediate APIs as aliases to the ReactNativeMicrotask APIs.\n  // Note that in bridgeless mode, immediate APIs are installed from cpp.\n  if (global.RN$Bridgeless !== true) {\n    polyfillGlobal(\n      'setImmediate',\n      () => require('./Timers/JSTimers').queueReactNativeMicrotask,\n    );\n    polyfillGlobal(\n      'clearImmediate',\n      () => require('./Timers/JSTimers').clearReactNativeMicrotask,\n    );\n  }\n}\n\n/**\n * Set up the microtask queueing API, which is required to use the same\n * microtask queue as the Promise.\n */\nif (hasHermesPromiseQueuedToJSVM) {\n  // Fast path for Hermes.\n  polyfillGlobal('queueMicrotask', () => global.HermesInternal?.enqueueJob);\n} else {\n  // Polyfill it with promise (regardless it's polyfilled or native) otherwise.\n  polyfillGlobal(\n    'queueMicrotask',\n    () => require('./Timers/queueMicrotask.js').default,\n  );\n}\n"],"mappings":"AAUA,YAAY;;AAEZ,MAAM;EAACA;AAAgB,CAAC,GAAGC,OAAO,CAAC,+BAA+B,CAAC;AACnE,MAAM;EAACC;AAAc,CAAC,GAAGD,OAAO,CAAC,gCAAgC,CAAC;AAElE,IAAIE,OAAO,EAAE;EACX,IAAI,OAAOC,MAAM,CAACC,OAAO,KAAK,UAAU,EAAE;IACxCC,OAAO,CAACC,KAAK,CAAC,gDAAgD,CAAC;EACjE;AACF;AAGA,MAAMC,4BAA4B,GAChCJ,MAAM,CAACK,cAAc,EAAEC,UAAU,GAAG,CAAC,KAAK,IAAI,IAC9CN,MAAM,CAACK,cAAc,EAAEE,cAAc,GAAG,CAAC,KAAK,IAAI;AAEpD,MAAMC,gBAAgB,GAAGZ,gBAAgB,CAACK,OAAO,CAAC;AAClD,MAAMQ,sBAAsB,GAAGD,gBAAgB,IAAIJ,4BAA4B;AAG/E,IAAIJ,MAAM,CAACU,aAAa,KAAK,IAAI,EAAE;EAKjC,MAAMC,eAAe,GACnBC,IAQmC,IAChC;IACHd,cAAc,CAACc,IAAI,EAAE,MAAMf,OAAO,CAAC,mBAAmB,CAAC,CAACe,IAAI,CAAC,CAAC;EAChE,CAAC;EACDD,eAAe,CAAC,YAAY,CAAC;EAC7BA,eAAe,CAAC,cAAc,CAAC;EAC/BA,eAAe,CAAC,aAAa,CAAC;EAC9BA,eAAe,CAAC,eAAe,CAAC;EAChCA,eAAe,CAAC,uBAAuB,CAAC;EACxCA,eAAe,CAAC,sBAAsB,CAAC;EACvCA,eAAe,CAAC,qBAAqB,CAAC;EACtCA,eAAe,CAAC,oBAAoB,CAAC;AACvC;AAMA,IAAIF,sBAAsB,EAAE;EAG1BX,cAAc,CACZ,cAAc,EACd,MAAMD,OAAO,CAAC,wBAAwB,CAAC,CAACgB,YAC1C,CAAC;EACDf,cAAc,CACZ,gBAAgB,EAChB,MAAMD,OAAO,CAAC,wBAAwB,CAAC,CAACiB,cAC1C,CAAC;AACH,CAAC,MAAM;EAIL,IAAId,MAAM,CAACU,aAAa,KAAK,IAAI,EAAE;IACjCZ,cAAc,CACZ,cAAc,EACd,MAAMD,OAAO,CAAC,mBAAmB,CAAC,CAACkB,yBACrC,CAAC;IACDjB,cAAc,CACZ,gBAAgB,EAChB,MAAMD,OAAO,CAAC,mBAAmB,CAAC,CAACmB,yBACrC,CAAC;EACH;AACF;AAMA,IAAIZ,4BAA4B,EAAE;EAEhCN,cAAc,CAAC,gBAAgB,EAAE,MAAME,MAAM,CAACK,cAAc,EAAEY,UAAU,CAAC;AAC3E,CAAC,MAAM;EAELnB,cAAc,CACZ,gBAAgB,EAChB,MAAMD,OAAO,CAAC,4BAA4B,CAAC,CAACqB,OAC9C,CAAC;AACH","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}