{"ast":null,"code":"const {\n  dispatchCommand\n} = require('../ReactNative/RendererProxy');\nfunction codegenNativeCommands(options) {\n  const commandObj = {};\n  options.supportedCommands.forEach(command => {\n    commandObj[command] = (ref, ...args) => {\n      dispatchCommand(ref, command, args);\n    };\n  });\n  return commandObj;\n}\nexport default codegenNativeCommands;","map":{"version":3,"names":["dispatchCommand","require","codegenNativeCommands","options","commandObj","supportedCommands","forEach","command","ref","args"],"sources":["/home/rodo/workspace/passion/apps/muh-money/node_modules/react-native/Libraries/Utilities/codegenNativeCommands.js"],"sourcesContent":["/**\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @format\n * @flow\n */\n\nconst {dispatchCommand} = require('../ReactNative/RendererProxy');\n\ntype Options<T = string> = $ReadOnly<{|\n  supportedCommands: $ReadOnlyArray<T>,\n|}>;\n\nfunction codegenNativeCommands<T: interface {}>(options: Options<$Keys<T>>): T {\n  const commandObj: {[$Keys<T>]: (...$ReadOnlyArray<mixed>) => void} = {};\n\n  options.supportedCommands.forEach(command => {\n    // $FlowFixMe[missing-local-annot]\n    commandObj[command] = (ref, ...args) => {\n      // $FlowFixMe[incompatible-call]\n      dispatchCommand(ref, command, args);\n    };\n  });\n\n  return ((commandObj: any): T);\n}\n\nexport default codegenNativeCommands;\n"],"mappings":"AAUA,MAAM;EAACA;AAAe,CAAC,GAAGC,OAAO,CAAC,8BAA8B,CAAC;AAMjE,SAASC,qBAAqBA,CAAkBC,OAA0B,EAAK;EAC7E,MAAMC,UAA4D,GAAG,CAAC,CAAC;EAEvED,OAAO,CAACE,iBAAiB,CAACC,OAAO,CAACC,OAAO,IAAI;IAE3CH,UAAU,CAACG,OAAO,CAAC,GAAG,CAACC,GAAG,EAAE,GAAGC,IAAI,KAAK;MAEtCT,eAAe,CAACQ,GAAG,EAAED,OAAO,EAAEE,IAAI,CAAC;IACrC,CAAC;EACH,CAAC,CAAC;EAEF,OAASL,UAAU;AACrB;AAEA,eAAeF,qBAAqB","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}