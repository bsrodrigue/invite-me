{"ast":null,"code":"import Pressability from './Pressability';\nimport { useEffect, useRef } from 'react';\nexport default function usePressability(config) {\n  const pressabilityRef = useRef(null);\n  if (config != null && pressabilityRef.current == null) {\n    pressabilityRef.current = new Pressability(config);\n  }\n  const pressability = pressabilityRef.current;\n  useEffect(() => {\n    if (config != null && pressability != null) {\n      pressability.configure(config);\n    }\n  }, [config, pressability]);\n  useEffect(() => {\n    if (pressability != null) {\n      return () => {\n        pressability.reset();\n      };\n    }\n  }, [pressability]);\n  return pressability == null ? null : pressability.getEventHandlers();\n}","map":{"version":3,"names":["Pressability","useEffect","useRef","usePressability","config","pressabilityRef","current","pressability","configure","reset","getEventHandlers"],"sources":["/home/rodo/workspace/passion/apps/muh-money/node_modules/react-native/Libraries/Pressability/usePressability.js"],"sourcesContent":["/**\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @flow strict-local\n * @format\n */\n\nimport Pressability, {\n  type EventHandlers,\n  type PressabilityConfig,\n} from './Pressability';\nimport {useEffect, useRef} from 'react';\n\n/**\n * Creates a persistent instance of `Pressability` that automatically configures\n * itself and resets. Accepts null `config` to support lazy initialization. Once\n * initialized, will not un-initialize until the component has been unmounted.\n *\n * In order to use `usePressability`, do the following:\n *\n *   const config = useMemo(...);\n *   const eventHandlers = usePressability(config);\n *   const pressableView = <View {...eventHandlers} />;\n *\n */\nexport default function usePressability(\n  config: ?PressabilityConfig,\n): ?EventHandlers {\n  const pressabilityRef = useRef<?Pressability>(null);\n  if (config != null && pressabilityRef.current == null) {\n    pressabilityRef.current = new Pressability(config);\n  }\n  const pressability = pressabilityRef.current;\n\n  // On the initial mount, this is a no-op. On updates, `pressability` will be\n  // re-configured to use the new configuration.\n  useEffect(() => {\n    if (config != null && pressability != null) {\n      pressability.configure(config);\n    }\n  }, [config, pressability]);\n\n  // On unmount, reset pending state and timers inside `pressability`. This is\n  // a separate effect because we do not want to reset when `config` changes.\n  useEffect(() => {\n    if (pressability != null) {\n      return () => {\n        pressability.reset();\n      };\n    }\n  }, [pressability]);\n\n  return pressability == null ? null : pressability.getEventHandlers();\n}\n"],"mappings":"AAUA,OAAOA,YAAY,MAGZ,gBAAgB;AACvB,SAAQC,SAAS,EAAEC,MAAM,QAAO,OAAO;AAcvC,eAAe,SAASC,eAAeA,CACrCC,MAA2B,EACX;EAChB,MAAMC,eAAe,GAAGH,MAAM,CAAgB,IAAI,CAAC;EACnD,IAAIE,MAAM,IAAI,IAAI,IAAIC,eAAe,CAACC,OAAO,IAAI,IAAI,EAAE;IACrDD,eAAe,CAACC,OAAO,GAAG,IAAIN,YAAY,CAACI,MAAM,CAAC;EACpD;EACA,MAAMG,YAAY,GAAGF,eAAe,CAACC,OAAO;EAI5CL,SAAS,CAAC,MAAM;IACd,IAAIG,MAAM,IAAI,IAAI,IAAIG,YAAY,IAAI,IAAI,EAAE;MAC1CA,YAAY,CAACC,SAAS,CAACJ,MAAM,CAAC;IAChC;EACF,CAAC,EAAE,CAACA,MAAM,EAAEG,YAAY,CAAC,CAAC;EAI1BN,SAAS,CAAC,MAAM;IACd,IAAIM,YAAY,IAAI,IAAI,EAAE;MACxB,OAAO,MAAM;QACXA,YAAY,CAACE,KAAK,CAAC,CAAC;MACtB,CAAC;IACH;EACF,CAAC,EAAE,CAACF,YAAY,CAAC,CAAC;EAElB,OAAOA,YAAY,IAAI,IAAI,GAAG,IAAI,GAAGA,YAAY,CAACG,gBAAgB,CAAC,CAAC;AACtE","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}