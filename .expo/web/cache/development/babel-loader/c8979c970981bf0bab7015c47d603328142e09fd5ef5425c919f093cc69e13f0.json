{"ast":null,"code":"import { SyntheticError, handleException } from './ExceptionsManager';\nconst ReactFiberErrorDialog = {\n  showErrorDialog({\n    componentStack,\n    error: errorValue\n  }) {\n    let error;\n    if (errorValue instanceof Error) {\n      error = errorValue;\n    } else if (typeof errorValue === 'string') {\n      error = new SyntheticError(errorValue);\n    } else {\n      error = new SyntheticError('Unspecified error');\n    }\n    try {\n      error.componentStack = componentStack;\n      error.isComponentError = true;\n    } catch {}\n    handleException(error, false);\n    return false;\n  }\n};\nexport default ReactFiberErrorDialog;","map":{"version":3,"names":["SyntheticError","handleException","ReactFiberErrorDialog","showErrorDialog","componentStack","error","errorValue","Error","isComponentError"],"sources":["/home/rodo/workspace/passion/apps/muh-money/node_modules/react-native/Libraries/Core/ReactFiberErrorDialog.js"],"sourcesContent":["/**\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @format\n * @flow strict-local\n */\n\nimport type {ExtendedError} from './ExtendedError';\n\nimport {SyntheticError, handleException} from './ExceptionsManager';\n\nexport type CapturedError = {\n  +componentStack: string,\n  +error: mixed,\n  +errorBoundary: ?{...},\n  ...\n};\n\nconst ReactFiberErrorDialog = {\n  /**\n   * Intercept lifecycle errors and ensure they are shown with the correct stack\n   * trace within the native redbox component.\n   */\n  showErrorDialog({componentStack, error: errorValue}: CapturedError): boolean {\n    let error: ?ExtendedError;\n\n    // Typically, `errorValue` should be an error. However, other values such as\n    // strings (or even null) are sometimes thrown.\n    if (errorValue instanceof Error) {\n      /* $FlowFixMe[class-object-subtyping] added when improving typing for\n       * this parameters */\n      error = (errorValue: ExtendedError);\n    } else if (typeof errorValue === 'string') {\n      /* $FlowFixMe[class-object-subtyping] added when improving typing for\n       * this parameters */\n      error = (new SyntheticError(errorValue): ExtendedError);\n    } else {\n      /* $FlowFixMe[class-object-subtyping] added when improving typing for\n       * this parameters */\n      error = (new SyntheticError('Unspecified error'): ExtendedError);\n    }\n    try {\n      error.componentStack = componentStack;\n      error.isComponentError = true;\n    } catch {\n      // Ignored.\n    }\n\n    handleException(error, false);\n\n    // Return false here to prevent ReactFiberErrorLogger default behavior of\n    // logging error details to console.error. Calls to console.error are\n    // automatically routed to the native redbox controller, which we've already\n    // done above by calling ExceptionsManager.\n    return false;\n  },\n};\n\nexport default ReactFiberErrorDialog;\n"],"mappings":"AAYA,SAAQA,cAAc,EAAEC,eAAe,QAAO,qBAAqB;AASnE,MAAMC,qBAAqB,GAAG;EAK5BC,eAAeA,CAAC;IAACC,cAAc;IAAEC,KAAK,EAAEC;EAAyB,CAAC,EAAW;IAC3E,IAAID,KAAqB;IAIzB,IAAIC,UAAU,YAAYC,KAAK,EAAE;MAG/BF,KAAK,GAAIC,UAA0B;IACrC,CAAC,MAAM,IAAI,OAAOA,UAAU,KAAK,QAAQ,EAAE;MAGzCD,KAAK,GAAI,IAAIL,cAAc,CAACM,UAAU,CAAiB;IACzD,CAAC,MAAM;MAGLD,KAAK,GAAI,IAAIL,cAAc,CAAC,mBAAmB,CAAiB;IAClE;IACA,IAAI;MACFK,KAAK,CAACD,cAAc,GAAGA,cAAc;MACrCC,KAAK,CAACG,gBAAgB,GAAG,IAAI;IAC/B,CAAC,CAAC,MAAM,CAER;IAEAP,eAAe,CAACI,KAAK,EAAE,KAAK,CAAC;IAM7B,OAAO,KAAK;EACd;AACF,CAAC;AAED,eAAeH,qBAAqB","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}