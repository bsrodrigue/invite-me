{"ast":null,"code":"'use strict';\n\nvar _defineProperty = require(\"@babel/runtime/helpers/defineProperty\");\nfunction ownKeys(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }\nfunction _objectSpread(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? ownKeys(Object(t), !0).forEach(function (r) { _defineProperty(e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; }\nconst infoLog = require('../Utilities/infoLog');\nconst invariant = require('invariant');\nconst DEBUG = false;\nclass TaskQueue {\n  constructor({\n    onMoreTasks\n  }) {\n    this._onMoreTasks = onMoreTasks;\n    this._queueStack = [{\n      tasks: [],\n      popable: false\n    }];\n  }\n  enqueue(task) {\n    this._getCurrentQueue().push(task);\n  }\n  enqueueTasks(tasks) {\n    tasks.forEach(task => this.enqueue(task));\n  }\n  cancelTasks(tasksToCancel) {\n    this._queueStack = this._queueStack.map(queue => _objectSpread(_objectSpread({}, queue), {}, {\n      tasks: queue.tasks.filter(task => tasksToCancel.indexOf(task) === -1)\n    })).filter((queue, idx) => queue.tasks.length > 0 || idx === 0);\n  }\n  hasTasksToProcess() {\n    return this._getCurrentQueue().length > 0;\n  }\n  processNext() {\n    const queue = this._getCurrentQueue();\n    if (queue.length) {\n      const task = queue.shift();\n      try {\n        if (typeof task === 'object' && task.gen) {\n          DEBUG && infoLog('TaskQueue: genPromise for task ' + task.name);\n          this._genPromise(task);\n        } else if (typeof task === 'object' && task.run) {\n          DEBUG && infoLog('TaskQueue: run task ' + task.name);\n          task.run();\n        } else {\n          invariant(typeof task === 'function', 'Expected Function, SimpleTask, or PromiseTask, but got:\\n' + JSON.stringify(task, null, 2));\n          DEBUG && infoLog('TaskQueue: run anonymous task');\n          task();\n        }\n      } catch (e) {\n        e.message = 'TaskQueue: Error with task ' + (task.name || '') + ': ' + e.message;\n        throw e;\n      }\n    }\n  }\n  _getCurrentQueue() {\n    const stackIdx = this._queueStack.length - 1;\n    const queue = this._queueStack[stackIdx];\n    if (queue.popable && queue.tasks.length === 0 && this._queueStack.length > 1) {\n      this._queueStack.pop();\n      DEBUG && infoLog('TaskQueue: popped queue: ', {\n        stackIdx,\n        queueStackSize: this._queueStack.length\n      });\n      return this._getCurrentQueue();\n    } else {\n      return queue.tasks;\n    }\n  }\n  _genPromise(task) {\n    this._queueStack.push({\n      tasks: [],\n      popable: false\n    });\n    const stackIdx = this._queueStack.length - 1;\n    const stackItem = this._queueStack[stackIdx];\n    DEBUG && infoLog('TaskQueue: push new queue: ', {\n      stackIdx\n    });\n    DEBUG && infoLog('TaskQueue: exec gen task ' + task.name);\n    task.gen().then(() => {\n      DEBUG && infoLog('TaskQueue: onThen for gen task ' + task.name, {\n        stackIdx,\n        queueStackSize: this._queueStack.length\n      });\n      stackItem.popable = true;\n      this.hasTasksToProcess() && this._onMoreTasks();\n    }).catch(ex => {\n      setTimeout(() => {\n        ex.message = `TaskQueue: Error resolving Promise in task ${task.name}: ${ex.message}`;\n        throw ex;\n      }, 0);\n    });\n  }\n}\nmodule.exports = TaskQueue;","map":{"version":3,"names":["_defineProperty","require","ownKeys","e","r","t","Object","keys","getOwnPropertySymbols","o","filter","getOwnPropertyDescriptor","enumerable","push","apply","_objectSpread","arguments","length","forEach","getOwnPropertyDescriptors","defineProperties","defineProperty","infoLog","invariant","DEBUG","TaskQueue","constructor","onMoreTasks","_onMoreTasks","_queueStack","tasks","popable","enqueue","task","_getCurrentQueue","enqueueTasks","cancelTasks","tasksToCancel","map","queue","indexOf","idx","hasTasksToProcess","processNext","shift","gen","name","_genPromise","run","JSON","stringify","message","stackIdx","pop","queueStackSize","stackItem","then","catch","ex","setTimeout","module","exports"],"sources":["/home/rodo/workspace/passion/apps/muh-money/node_modules/react-native/Libraries/Interaction/TaskQueue.js"],"sourcesContent":["/**\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @format\n * @flow strict\n */\n\n'use strict';\n\nconst infoLog = require('../Utilities/infoLog');\nconst invariant = require('invariant');\n\ntype SimpleTask = {\n  name: string,\n  run: () => void,\n};\ntype PromiseTask = {\n  name: string,\n  gen: () => Promise<void>,\n};\nexport type Task = SimpleTask | PromiseTask | (() => void);\n\nconst DEBUG: false = false;\n\n/**\n * TaskQueue - A system for queueing and executing a mix of simple callbacks and\n * trees of dependent tasks based on Promises. No tasks are executed unless\n * `processNext` is called.\n *\n * `enqueue` takes a Task object with either a simple `run` callback, or a\n * `gen` function that returns a `Promise` and puts it in the queue.  If a gen\n * function is supplied, then the promise it returns will block execution of\n * tasks already in the queue until it resolves. This can be used to make sure\n * the first task is fully resolved (including asynchronous dependencies that\n * also schedule more tasks via `enqueue`) before starting on the next task.\n * The `onMoreTasks` constructor argument is used to inform the owner that an\n * async task has resolved and that the queue should be processed again.\n *\n * Note: Tasks are only actually executed with explicit calls to `processNext`.\n */\nclass TaskQueue {\n  /**\n   * TaskQueue instances are self contained and independent, so multiple tasks\n   * of varying semantics and priority can operate together.\n   *\n   * `onMoreTasks` is invoked when `PromiseTask`s resolve if there are more\n   * tasks to process.\n   */\n  constructor({onMoreTasks}: {onMoreTasks: () => void, ...}) {\n    this._onMoreTasks = onMoreTasks;\n    this._queueStack = [{tasks: [], popable: false}];\n  }\n\n  /**\n   * Add a task to the queue.  It is recommended to name your tasks for easier\n   * async debugging. Tasks will not be executed until `processNext` is called\n   * explicitly.\n   */\n  enqueue(task: Task): void {\n    this._getCurrentQueue().push(task);\n  }\n\n  enqueueTasks(tasks: Array<Task>): void {\n    tasks.forEach(task => this.enqueue(task));\n  }\n\n  cancelTasks(tasksToCancel: Array<Task>): void {\n    // search through all tasks and remove them.\n    this._queueStack = this._queueStack\n      .map(queue => ({\n        ...queue,\n        tasks: queue.tasks.filter(task => tasksToCancel.indexOf(task) === -1),\n      }))\n      .filter((queue, idx) => queue.tasks.length > 0 || idx === 0);\n  }\n\n  /**\n   * Check to see if `processNext` should be called.\n   *\n   * @returns {boolean} Returns true if there are tasks that are ready to be\n   * processed with `processNext`, or returns false if there are no more tasks\n   * to be processed right now, although there may be tasks in the queue that\n   * are blocked by earlier `PromiseTask`s that haven't resolved yet.\n   * `onMoreTasks` will be called after each `PromiseTask` resolves if there are\n   * tasks ready to run at that point.\n   */\n  hasTasksToProcess(): boolean {\n    return this._getCurrentQueue().length > 0;\n  }\n\n  /**\n   * Executes the next task in the queue.\n   */\n  processNext(): void {\n    const queue = this._getCurrentQueue();\n    if (queue.length) {\n      const task = queue.shift();\n      try {\n        if (typeof task === 'object' && task.gen) {\n          DEBUG && infoLog('TaskQueue: genPromise for task ' + task.name);\n          this._genPromise(task);\n        } else if (typeof task === 'object' && task.run) {\n          DEBUG && infoLog('TaskQueue: run task ' + task.name);\n          task.run();\n        } else {\n          invariant(\n            typeof task === 'function',\n            'Expected Function, SimpleTask, or PromiseTask, but got:\\n' +\n              JSON.stringify(task, null, 2),\n          );\n          DEBUG && infoLog('TaskQueue: run anonymous task');\n          task();\n        }\n      } catch (e) {\n        e.message =\n          'TaskQueue: Error with task ' + (task.name || '') + ': ' + e.message;\n        throw e;\n      }\n    }\n  }\n\n  _queueStack: Array<{\n    tasks: Array<Task>,\n    popable: boolean,\n    ...\n  }>;\n  _onMoreTasks: () => void;\n\n  _getCurrentQueue(): Array<Task> {\n    const stackIdx = this._queueStack.length - 1;\n    const queue = this._queueStack[stackIdx];\n    if (\n      queue.popable &&\n      queue.tasks.length === 0 &&\n      this._queueStack.length > 1\n    ) {\n      this._queueStack.pop();\n      DEBUG &&\n        infoLog('TaskQueue: popped queue: ', {\n          stackIdx,\n          queueStackSize: this._queueStack.length,\n        });\n      return this._getCurrentQueue();\n    } else {\n      return queue.tasks;\n    }\n  }\n\n  _genPromise(task: PromiseTask) {\n    // Each async task pushes it's own queue onto the queue stack. This\n    // effectively defers execution of previously queued tasks until the promise\n    // resolves, at which point we allow the new queue to be popped, which\n    // happens once it is fully processed.\n    this._queueStack.push({tasks: [], popable: false});\n    const stackIdx = this._queueStack.length - 1;\n    const stackItem = this._queueStack[stackIdx];\n    DEBUG && infoLog('TaskQueue: push new queue: ', {stackIdx});\n    DEBUG && infoLog('TaskQueue: exec gen task ' + task.name);\n    task\n      .gen()\n      .then(() => {\n        DEBUG &&\n          infoLog('TaskQueue: onThen for gen task ' + task.name, {\n            stackIdx,\n            queueStackSize: this._queueStack.length,\n          });\n        stackItem.popable = true;\n        this.hasTasksToProcess() && this._onMoreTasks();\n      })\n      .catch(ex => {\n        setTimeout(() => {\n          ex.message = `TaskQueue: Error resolving Promise in task ${task.name}: ${ex.message}`;\n          throw ex;\n        }, 0);\n      });\n  }\n}\n\nmodule.exports = TaskQueue;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}