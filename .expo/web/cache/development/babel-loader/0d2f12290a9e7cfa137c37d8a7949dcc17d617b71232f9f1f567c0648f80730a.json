{"ast":null,"code":"import PlatformBaseViewConfig from '../NativeComponent/PlatformBaseViewConfig';\nconst IGNORED_KEYS = ['transform', 'hitSlop'];\nexport default function verifyComponentAttributeEquivalence(nativeViewConfig, staticViewConfig) {\n  for (const prop of ['validAttributes', 'bubblingEventTypes', 'directEventTypes']) {\n    const diff = Object.keys(lefthandObjectDiff(nativeViewConfig[prop], staticViewConfig[prop]));\n    if (diff.length > 0) {\n      const name = staticViewConfig.uiViewClassName ?? nativeViewConfig.uiViewClassName;\n      console.error(`'${name}' has a view config that does not match native. ` + `'${prop}' is missing: ${diff.join(', ')}`);\n    }\n  }\n}\nfunction lefthandObjectDiff(leftObj, rightObj) {\n  const differentKeys = {};\n  function compare(leftItem, rightItem, key) {\n    if (typeof leftItem !== typeof rightItem && leftItem != null) {\n      differentKeys[key] = rightItem;\n      return;\n    }\n    if (typeof leftItem === 'object') {\n      const objDiff = lefthandObjectDiff(leftItem, rightItem);\n      if (Object.keys(objDiff).length > 1) {\n        differentKeys[key] = objDiff;\n      }\n      return;\n    }\n    if (leftItem !== rightItem) {\n      differentKeys[key] = rightItem;\n      return;\n    }\n  }\n  for (const key in leftObj) {\n    if (IGNORED_KEYS.includes(key)) {\n      continue;\n    }\n    if (!rightObj) {\n      differentKeys[key] = {};\n    } else if (leftObj.hasOwnProperty(key)) {\n      compare(leftObj[key], rightObj[key], key);\n    }\n  }\n  return differentKeys;\n}\nexport function getConfigWithoutViewProps(viewConfig, propName) {\n  if (!viewConfig[propName]) {\n    return {};\n  }\n  return Object.keys(viewConfig[propName]).filter(prop => !PlatformBaseViewConfig[propName][prop]).reduce((obj, prop) => {\n    obj[prop] = viewConfig[propName][prop];\n    return obj;\n  }, {});\n}\nexport function stringifyViewConfig(viewConfig) {\n  return JSON.stringify(viewConfig, (key, val) => {\n    if (typeof val === 'function') {\n      return `ƒ ${val.name}`;\n    }\n    return val;\n  }, 2);\n}","map":{"version":3,"names":["PlatformBaseViewConfig","IGNORED_KEYS","verifyComponentAttributeEquivalence","nativeViewConfig","staticViewConfig","prop","diff","Object","keys","lefthandObjectDiff","length","name","uiViewClassName","console","error","join","leftObj","rightObj","differentKeys","compare","leftItem","rightItem","key","objDiff","includes","hasOwnProperty","getConfigWithoutViewProps","viewConfig","propName","filter","reduce","obj","stringifyViewConfig","JSON","stringify","val"],"sources":["/home/rodo/workspace/passion/apps/muh-money/node_modules/react-native/Libraries/Utilities/verifyComponentAttributeEquivalence.js"],"sourcesContent":["/**\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @format\n * @flow\n */\n\nimport PlatformBaseViewConfig from '../NativeComponent/PlatformBaseViewConfig';\nimport {type ViewConfig} from '../Renderer/shims/ReactNativeTypes';\n\nconst IGNORED_KEYS = ['transform', 'hitSlop'];\n\n/**\n * The purpose of this function is to validate that the view config that\n * native exposes for a given view manager is the same as the view config\n * that is specified for that view manager in JS.\n *\n * In order to improve perf, we want to avoid calling into native to get\n * the view config when each view manager is used. To do this, we are moving\n * the configs to JS. In the future we will use these JS based view configs\n * to codegen the view manager on native to ensure they stay in sync without\n * this runtime check.\n *\n * If this function fails, that likely means a change was made to the native\n * view manager without updating the JS config as well. Ideally you can make\n * that direct change to the JS config. If you don't know what the differences\n * are, the best approach I've found is to create a view that prints\n * the return value of getNativeComponentAttributes, and then copying that\n * text and pasting it back into JS:\n * <Text selectable={true}>{JSON.stringify(getNativeComponentAttributes('RCTView'))}</Text>\n *\n * This is meant to be a stopgap until the time comes when we only have a\n * single source of truth. I wonder if this message will still be here two\n * years from now...\n */\nexport default function verifyComponentAttributeEquivalence(\n  nativeViewConfig: ViewConfig,\n  staticViewConfig: ViewConfig,\n) {\n  for (const prop of [\n    'validAttributes',\n    'bubblingEventTypes',\n    'directEventTypes',\n  ]) {\n    const diff = Object.keys(\n      lefthandObjectDiff(nativeViewConfig[prop], staticViewConfig[prop]),\n    );\n\n    if (diff.length > 0) {\n      const name =\n        staticViewConfig.uiViewClassName ?? nativeViewConfig.uiViewClassName;\n      console.error(\n        `'${name}' has a view config that does not match native. ` +\n          `'${prop}' is missing: ${diff.join(', ')}`,\n      );\n    }\n  }\n}\n\n// Return the different key-value pairs of the right object, by iterating through the keys in the left object\n// Note it won't return a difference where a key is missing in the left but exists the right.\nfunction lefthandObjectDiff(leftObj: Object, rightObj: Object): Object {\n  const differentKeys: {[string]: any | {...}} = {};\n\n  function compare(leftItem: any, rightItem: any, key: string) {\n    if (typeof leftItem !== typeof rightItem && leftItem != null) {\n      differentKeys[key] = rightItem;\n      return;\n    }\n\n    if (typeof leftItem === 'object') {\n      const objDiff = lefthandObjectDiff(leftItem, rightItem);\n      if (Object.keys(objDiff).length > 1) {\n        differentKeys[key] = objDiff;\n      }\n      return;\n    }\n\n    if (leftItem !== rightItem) {\n      differentKeys[key] = rightItem;\n      return;\n    }\n  }\n\n  for (const key in leftObj) {\n    if (IGNORED_KEYS.includes(key)) {\n      continue;\n    }\n\n    if (!rightObj) {\n      differentKeys[key] = {};\n    } else if (leftObj.hasOwnProperty(key)) {\n      compare(leftObj[key], rightObj[key], key);\n    }\n  }\n\n  return differentKeys;\n}\n\nexport function getConfigWithoutViewProps(\n  viewConfig: ViewConfig,\n  propName: string,\n): {...} {\n  if (!viewConfig[propName]) {\n    return {};\n  }\n\n  return Object.keys(viewConfig[propName])\n    .filter(prop => !PlatformBaseViewConfig[propName][prop])\n    .reduce<{[string]: any}>((obj, prop) => {\n      obj[prop] = viewConfig[propName][prop];\n      return obj;\n    }, {});\n}\n\nexport function stringifyViewConfig(viewConfig: any): string {\n  return JSON.stringify(\n    viewConfig,\n    (key, val) => {\n      if (typeof val === 'function') {\n        return `ƒ ${val.name}`;\n      }\n      return val;\n    },\n    2,\n  );\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}