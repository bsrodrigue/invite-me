{"ast":null,"code":"import Platform from '../Utilities/Platform';\nif (__DEV__) {\n  require('./setUpReactDevTools');\n  const JSInspector = require('../JSInspector/JSInspector');\n  JSInspector.registerAgent(require('../JSInspector/NetworkAgent'));\n  const isLikelyARealBrowser = global.navigator != null && global.navigator.appName === 'Netscape';\n  if (!Platform.isTesting) {\n    const HMRClient = require('../Utilities/HMRClient');\n    if (console._isPolyfilled) {\n      ['trace', 'info', 'warn', 'error', 'log', 'group', 'groupCollapsed', 'groupEnd', 'debug'].forEach(level => {\n        const originalFunction = console[level];\n        console[level] = function (...args) {\n          HMRClient.log(level, args);\n          originalFunction.apply(console, args);\n        };\n      });\n    } else {\n      HMRClient.log('log', [`JavaScript logs will appear in your ${isLikelyARealBrowser ? 'browser' : 'environment'} console`]);\n    }\n  }\n  require('./setUpReactRefresh');\n  global[`${global.__METRO_GLOBAL_PREFIX__ ?? ''}__loadBundleAsync`] = require('./Devtools/loadBundleFromServer');\n}","map":{"version":3,"names":["Platform","__DEV__","require","JSInspector","registerAgent","isLikelyARealBrowser","global","navigator","appName","isTesting","HMRClient","console","_isPolyfilled","forEach","level","originalFunction","args","log","apply","__METRO_GLOBAL_PREFIX__"],"sources":["/home/rodo/workspace/passion/apps/muh-money/node_modules/react-native/Libraries/Core/setUpDeveloperTools.js"],"sourcesContent":["/**\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @flow strict-local\n * @format\n */\n\nimport Platform from '../Utilities/Platform';\n\ndeclare var console: {[string]: $FlowFixMe};\n\n/**\n * Sets up developer tools for React Native.\n * You can use this module directly, or just require InitializeCore.\n */\nif (__DEV__) {\n  require('./setUpReactDevTools');\n\n  // Set up inspector\n  const JSInspector = require('../JSInspector/JSInspector');\n  JSInspector.registerAgent(require('../JSInspector/NetworkAgent'));\n\n  // Note we can't check if console is \"native\" because it would appear \"native\" in JSC and Hermes.\n  // We also can't check any properties that don't exist in the Chrome worker environment.\n  // So we check a navigator property that's set to a particular value (\"Netscape\") in all real browsers.\n  const isLikelyARealBrowser =\n    global.navigator != null &&\n    /*              _\n     *             | |\n     *   _ __   ___| |_ ___  ___ __ _ _ __   ___\n     *  | '_ \\ / _ \\ __/ __|/ __/ _` | '_ \\ / _ \\\n     *  | | | |  __/ |_\\__ \\ (_| (_| | |_) |  __/\n     *  |_| |_|\\___|\\__|___/\\___\\__,_| .__/ \\___|\n     *                               | |\n     *                               |_|\n     */\n    global.navigator.appName === 'Netscape'; // Any real browser\n\n  if (!Platform.isTesting) {\n    const HMRClient = require('../Utilities/HMRClient');\n\n    if (console._isPolyfilled) {\n      // We assume full control over the console and send JavaScript logs to Metro.\n      [\n        'trace',\n        'info',\n        'warn',\n        'error',\n        'log',\n        'group',\n        'groupCollapsed',\n        'groupEnd',\n        'debug',\n      ].forEach(level => {\n        const originalFunction = console[level];\n        console[level] = function (...args: $ReadOnlyArray<mixed>) {\n          HMRClient.log(level, args);\n          originalFunction.apply(console, args);\n        };\n      });\n    } else {\n      // We assume the environment has a real rich console (like Chrome), and don't hijack it to log to Metro.\n      // It's likely the developer is using rich console to debug anyway, and hijacking it would\n      // lose the filenames in console.log calls: https://github.com/facebook/react-native/issues/26788.\n      HMRClient.log('log', [\n        `JavaScript logs will appear in your ${\n          isLikelyARealBrowser ? 'browser' : 'environment'\n        } console`,\n      ]);\n    }\n  }\n\n  require('./setUpReactRefresh');\n\n  global[\n    `${global.__METRO_GLOBAL_PREFIX__ ?? ''}__loadBundleAsync`\n  ] = require('./Devtools/loadBundleFromServer');\n}\n"],"mappings":"AAUA,OAAOA,QAAQ,MAAM,uBAAuB;AAQ5C,IAAIC,OAAO,EAAE;EACXC,OAAO,CAAC,sBAAsB,CAAC;EAG/B,MAAMC,WAAW,GAAGD,OAAO,CAAC,4BAA4B,CAAC;EACzDC,WAAW,CAACC,aAAa,CAACF,OAAO,CAAC,6BAA6B,CAAC,CAAC;EAKjE,MAAMG,oBAAoB,GACxBC,MAAM,CAACC,SAAS,IAAI,IAAI,IAUxBD,MAAM,CAACC,SAAS,CAACC,OAAO,KAAK,UAAU;EAEzC,IAAI,CAACR,QAAQ,CAACS,SAAS,EAAE;IACvB,MAAMC,SAAS,GAAGR,OAAO,CAAC,wBAAwB,CAAC;IAEnD,IAAIS,OAAO,CAACC,aAAa,EAAE;MAEzB,CACE,OAAO,EACP,MAAM,EACN,MAAM,EACN,OAAO,EACP,KAAK,EACL,OAAO,EACP,gBAAgB,EAChB,UAAU,EACV,OAAO,CACR,CAACC,OAAO,CAACC,KAAK,IAAI;QACjB,MAAMC,gBAAgB,GAAGJ,OAAO,CAACG,KAAK,CAAC;QACvCH,OAAO,CAACG,KAAK,CAAC,GAAG,UAAU,GAAGE,IAA2B,EAAE;UACzDN,SAAS,CAACO,GAAG,CAACH,KAAK,EAAEE,IAAI,CAAC;UAC1BD,gBAAgB,CAACG,KAAK,CAACP,OAAO,EAAEK,IAAI,CAAC;QACvC,CAAC;MACH,CAAC,CAAC;IACJ,CAAC,MAAM;MAILN,SAAS,CAACO,GAAG,CAAC,KAAK,EAAE,CACnB,uCACEZ,oBAAoB,GAAG,SAAS,GAAG,aAAa,UACxC,CACX,CAAC;IACJ;EACF;EAEAH,OAAO,CAAC,qBAAqB,CAAC;EAE9BI,MAAM,CACJ,GAAGA,MAAM,CAACa,uBAAuB,IAAI,EAAE,mBAAmB,CAC3D,GAAGjB,OAAO,CAAC,iCAAiC,CAAC;AAChD","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}