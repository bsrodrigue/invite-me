{"ast":null,"code":"import RCTDeviceEventEmitter from '../EventEmitter/RCTDeviceEventEmitter';\nimport NativeRedBox from '../NativeModules/specs/NativeRedBox';\nimport NativeBugReporting from './NativeBugReporting';\nfunction defaultExtras() {\n  BugReporting.addFileSource('react_hierarchy.txt', () => require('./dumpReactTree')());\n}\nclass BugReporting {\n  static _extraSources = new Map();\n  static _fileSources = new Map();\n  static _subscription = null;\n  static _redboxSubscription = null;\n  static _maybeInit() {\n    if (!BugReporting._subscription) {\n      BugReporting._subscription = RCTDeviceEventEmitter.addListener('collectBugExtraData', BugReporting.collectExtraData, null);\n      defaultExtras();\n    }\n    if (!BugReporting._redboxSubscription) {\n      BugReporting._redboxSubscription = RCTDeviceEventEmitter.addListener('collectRedBoxExtraData', BugReporting.collectExtraData, null);\n    }\n  }\n  static addSource(key, callback) {\n    return this._addSource(key, callback, BugReporting._extraSources);\n  }\n  static addFileSource(key, callback) {\n    return this._addSource(key, callback, BugReporting._fileSources);\n  }\n  static _addSource(key, callback, source) {\n    BugReporting._maybeInit();\n    if (source.has(key)) {\n      console.warn(`BugReporting.add* called multiple times for same key '${key}'`);\n    }\n    source.set(key, callback);\n    return {\n      remove: () => {\n        source.delete(key);\n      }\n    };\n  }\n  static collectExtraData() {\n    const extraData = {};\n    for (const [key, callback] of BugReporting._extraSources) {\n      extraData[key] = callback();\n    }\n    const fileData = {};\n    for (const [key, callback] of BugReporting._fileSources) {\n      fileData[key] = callback();\n    }\n    if (NativeBugReporting != null && NativeBugReporting.setExtraData != null) {\n      NativeBugReporting.setExtraData(extraData, fileData);\n    }\n    if (NativeRedBox != null && NativeRedBox.setExtraData != null) {\n      NativeRedBox.setExtraData(extraData, 'From BugReporting.js');\n    }\n    return {\n      extras: extraData,\n      files: fileData\n    };\n  }\n}\nmodule.exports = BugReporting;","map":{"version":3,"names":["RCTDeviceEventEmitter","NativeRedBox","NativeBugReporting","defaultExtras","BugReporting","addFileSource","require","_extraSources","Map","_fileSources","_subscription","_redboxSubscription","_maybeInit","addListener","collectExtraData","addSource","key","callback","_addSource","source","has","console","warn","set","remove","delete","extraData","fileData","setExtraData","extras","files","module","exports"],"sources":["/home/rodo/workspace/passion/apps/muh-money/node_modules/react-native/Libraries/BugReporting/BugReporting.js"],"sourcesContent":["/**\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @format\n * @flow strict-local\n */\n\nimport RCTDeviceEventEmitter from '../EventEmitter/RCTDeviceEventEmitter';\nimport NativeRedBox from '../NativeModules/specs/NativeRedBox';\nimport {type EventSubscription} from '../vendor/emitter/EventEmitter';\nimport NativeBugReporting from './NativeBugReporting';\n\ntype ExtraData = {[key: string]: string, ...};\ntype SourceCallback = () => string;\ntype DebugData = {\n  extras: ExtraData,\n  files: ExtraData,\n  ...\n};\n\nfunction defaultExtras() {\n  BugReporting.addFileSource('react_hierarchy.txt', () =>\n    require('./dumpReactTree')(),\n  );\n}\n\n/**\n * A simple class for collecting bug report data. Components can add sources that will be queried when a bug report\n * is created via `collectExtraData`. For example, a list component might add a source that provides the list of rows\n * that are currently visible on screen. Components should also remember to call `remove()` on the object that is\n * returned by `addSource` when they are unmounted.\n */\nclass BugReporting {\n  static _extraSources: Map<string, SourceCallback> = new Map();\n  static _fileSources: Map<string, SourceCallback> = new Map();\n  static _subscription: ?EventSubscription = null;\n  static _redboxSubscription: ?EventSubscription = null;\n\n  static _maybeInit() {\n    if (!BugReporting._subscription) {\n      BugReporting._subscription = RCTDeviceEventEmitter.addListener(\n        'collectBugExtraData',\n        // $FlowFixMe[method-unbinding]\n        BugReporting.collectExtraData,\n        null,\n      );\n      defaultExtras();\n    }\n\n    if (!BugReporting._redboxSubscription) {\n      BugReporting._redboxSubscription = RCTDeviceEventEmitter.addListener(\n        'collectRedBoxExtraData',\n        // $FlowFixMe[method-unbinding]\n        BugReporting.collectExtraData,\n        null,\n      );\n    }\n  }\n\n  /**\n   * Maps a string key to a simple callback that should return a string payload to be attached\n   * to a bug report. Source callbacks are called when `collectExtraData` is called.\n   *\n   * Returns an object to remove the source when the component unmounts.\n   *\n   * Conflicts trample with a warning.\n   */\n  static addSource(\n    key: string,\n    callback: SourceCallback,\n  ): {remove: () => void, ...} {\n    return this._addSource(key, callback, BugReporting._extraSources);\n  }\n\n  /**\n   * Maps a string key to a simple callback that should return a string payload to be attached\n   * to a bug report. Source callbacks are called when `collectExtraData` is called.\n   *\n   * Returns an object to remove the source when the component unmounts.\n   *\n   * Conflicts trample with a warning.\n   */\n  static addFileSource(\n    key: string,\n    callback: SourceCallback,\n  ): {remove: () => void, ...} {\n    return this._addSource(key, callback, BugReporting._fileSources);\n  }\n\n  static _addSource(\n    key: string,\n    callback: SourceCallback,\n    source: Map<string, SourceCallback>,\n  ): {remove: () => void, ...} {\n    BugReporting._maybeInit();\n    if (source.has(key)) {\n      console.warn(\n        `BugReporting.add* called multiple times for same key '${key}'`,\n      );\n    }\n    source.set(key, callback);\n    return {\n      remove: () => {\n        source.delete(key);\n      },\n    };\n  }\n\n  /**\n   * This can be called from a native bug reporting flow, or from JS code.\n   *\n   * If available, this will call `NativeModules.BugReporting.setExtraData(extraData)`\n   * after collecting `extraData`.\n   */\n  static collectExtraData(): DebugData {\n    const extraData: ExtraData = {};\n    for (const [key, callback] of BugReporting._extraSources) {\n      extraData[key] = callback();\n    }\n    const fileData: ExtraData = {};\n    for (const [key, callback] of BugReporting._fileSources) {\n      fileData[key] = callback();\n    }\n\n    if (NativeBugReporting != null && NativeBugReporting.setExtraData != null) {\n      NativeBugReporting.setExtraData(extraData, fileData);\n    }\n\n    if (NativeRedBox != null && NativeRedBox.setExtraData != null) {\n      NativeRedBox.setExtraData(extraData, 'From BugReporting.js');\n    }\n\n    return {extras: extraData, files: fileData};\n  }\n}\n\nmodule.exports = BugReporting;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}