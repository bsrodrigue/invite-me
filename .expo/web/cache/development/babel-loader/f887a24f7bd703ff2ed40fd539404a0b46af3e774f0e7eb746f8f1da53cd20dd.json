{"ast":null,"code":"'use strict';\n\nimport _objectSpread from \"@babel/runtime/helpers/objectSpread2\";\nclass Info {\n  constructor() {\n    this.any_blank_count = 0;\n    this.any_blank_ms = 0;\n    this.any_blank_speed_sum = 0;\n    this.mostly_blank_count = 0;\n    this.mostly_blank_ms = 0;\n    this.pixels_blank = 0;\n    this.pixels_sampled = 0;\n    this.pixels_scrolled = 0;\n    this.total_time_spent = 0;\n    this.sample_count = 0;\n  }\n}\nvar DEBUG = false;\nvar _listeners = [];\nvar _minSampleCount = 10;\nvar _sampleRate = DEBUG ? 1 : null;\nclass FillRateHelper {\n  static addListener(callback) {\n    if (_sampleRate === null) {\n      console.warn('Call `FillRateHelper.setSampleRate` before `addListener`.');\n    }\n    _listeners.push(callback);\n    return {\n      remove: () => {\n        _listeners = _listeners.filter(listener => callback !== listener);\n      }\n    };\n  }\n  static setSampleRate(sampleRate) {\n    _sampleRate = sampleRate;\n  }\n  static setMinSampleCount(minSampleCount) {\n    _minSampleCount = minSampleCount;\n  }\n  constructor(getFrameMetrics) {\n    this._anyBlankStartTime = null;\n    this._enabled = false;\n    this._info = new Info();\n    this._mostlyBlankStartTime = null;\n    this._samplesStartTime = null;\n    this._getFrameMetrics = getFrameMetrics;\n    this._enabled = (_sampleRate || 0) > Math.random();\n    this._resetData();\n  }\n  activate() {\n    if (this._enabled && this._samplesStartTime == null) {\n      DEBUG && console.debug('FillRateHelper: activate');\n      this._samplesStartTime = global.performance.now();\n    }\n  }\n  deactivateAndFlush() {\n    if (!this._enabled) {\n      return;\n    }\n    var start = this._samplesStartTime;\n    if (start == null) {\n      DEBUG && console.debug('FillRateHelper: bail on deactivate with no start time');\n      return;\n    }\n    if (this._info.sample_count < _minSampleCount) {\n      this._resetData();\n      return;\n    }\n    var total_time_spent = global.performance.now() - start;\n    var info = _objectSpread(_objectSpread({}, this._info), {}, {\n      total_time_spent\n    });\n    if (DEBUG) {\n      var derived = {\n        avg_blankness: this._info.pixels_blank / this._info.pixels_sampled,\n        avg_speed: this._info.pixels_scrolled / (total_time_spent / 1000),\n        avg_speed_when_any_blank: this._info.any_blank_speed_sum / this._info.any_blank_count,\n        any_blank_per_min: this._info.any_blank_count / (total_time_spent / 1000 / 60),\n        any_blank_time_frac: this._info.any_blank_ms / total_time_spent,\n        mostly_blank_per_min: this._info.mostly_blank_count / (total_time_spent / 1000 / 60),\n        mostly_blank_time_frac: this._info.mostly_blank_ms / total_time_spent\n      };\n      for (var key in derived) {\n        derived[key] = Math.round(1000 * derived[key]) / 1000;\n      }\n      console.debug('FillRateHelper deactivateAndFlush: ', {\n        derived,\n        info\n      });\n    }\n    _listeners.forEach(listener => listener(info));\n    this._resetData();\n  }\n  computeBlankness(props, cellsAroundViewport, scrollMetrics) {\n    if (!this._enabled || props.getItemCount(props.data) === 0 || cellsAroundViewport.last < cellsAroundViewport.first || this._samplesStartTime == null) {\n      return 0;\n    }\n    var dOffset = scrollMetrics.dOffset,\n      offset = scrollMetrics.offset,\n      velocity = scrollMetrics.velocity,\n      visibleLength = scrollMetrics.visibleLength;\n    this._info.sample_count++;\n    this._info.pixels_sampled += Math.round(visibleLength);\n    this._info.pixels_scrolled += Math.round(Math.abs(dOffset));\n    var scrollSpeed = Math.round(Math.abs(velocity) * 1000);\n    var now = global.performance.now();\n    if (this._anyBlankStartTime != null) {\n      this._info.any_blank_ms += now - this._anyBlankStartTime;\n    }\n    this._anyBlankStartTime = null;\n    if (this._mostlyBlankStartTime != null) {\n      this._info.mostly_blank_ms += now - this._mostlyBlankStartTime;\n    }\n    this._mostlyBlankStartTime = null;\n    var blankTop = 0;\n    var first = cellsAroundViewport.first;\n    var firstFrame = this._getFrameMetrics(first, props);\n    while (first <= cellsAroundViewport.last && (!firstFrame || !firstFrame.inLayout)) {\n      firstFrame = this._getFrameMetrics(first, props);\n      first++;\n    }\n    if (firstFrame && first > 0) {\n      blankTop = Math.min(visibleLength, Math.max(0, firstFrame.offset - offset));\n    }\n    var blankBottom = 0;\n    var last = cellsAroundViewport.last;\n    var lastFrame = this._getFrameMetrics(last, props);\n    while (last >= cellsAroundViewport.first && (!lastFrame || !lastFrame.inLayout)) {\n      lastFrame = this._getFrameMetrics(last, props);\n      last--;\n    }\n    if (lastFrame && last < props.getItemCount(props.data) - 1) {\n      var bottomEdge = lastFrame.offset + lastFrame.length;\n      blankBottom = Math.min(visibleLength, Math.max(0, offset + visibleLength - bottomEdge));\n    }\n    var pixels_blank = Math.round(blankTop + blankBottom);\n    var blankness = pixels_blank / visibleLength;\n    if (blankness > 0) {\n      this._anyBlankStartTime = now;\n      this._info.any_blank_speed_sum += scrollSpeed;\n      this._info.any_blank_count++;\n      this._info.pixels_blank += pixels_blank;\n      if (blankness > 0.5) {\n        this._mostlyBlankStartTime = now;\n        this._info.mostly_blank_count++;\n      }\n    } else if (scrollSpeed < 0.01 || Math.abs(dOffset) < 1) {\n      this.deactivateAndFlush();\n    }\n    return blankness;\n  }\n  enabled() {\n    return this._enabled;\n  }\n  _resetData() {\n    this._anyBlankStartTime = null;\n    this._info = new Info();\n    this._mostlyBlankStartTime = null;\n    this._samplesStartTime = null;\n  }\n}\nexport default FillRateHelper;","map":{"version":3,"names":["_objectSpread","Info","constructor","any_blank_count","any_blank_ms","any_blank_speed_sum","mostly_blank_count","mostly_blank_ms","pixels_blank","pixels_sampled","pixels_scrolled","total_time_spent","sample_count","DEBUG","_listeners","_minSampleCount","_sampleRate","FillRateHelper","addListener","callback","console","warn","push","remove","filter","listener","setSampleRate","sampleRate","setMinSampleCount","minSampleCount","getFrameMetrics","_anyBlankStartTime","_enabled","_info","_mostlyBlankStartTime","_samplesStartTime","_getFrameMetrics","Math","random","_resetData","activate","debug","global","performance","now","deactivateAndFlush","start","info","derived","avg_blankness","avg_speed","avg_speed_when_any_blank","any_blank_per_min","any_blank_time_frac","mostly_blank_per_min","mostly_blank_time_frac","key","round","forEach","computeBlankness","props","cellsAroundViewport","scrollMetrics","getItemCount","data","last","first","dOffset","offset","velocity","visibleLength","abs","scrollSpeed","blankTop","firstFrame","inLayout","min","max","blankBottom","lastFrame","bottomEdge","length","blankness","enabled"],"sources":["/home/rodo/workspace/passion/apps/muh-money/node_modules/react-native-web/dist/vendor/react-native/FillRateHelper/index.js"],"sourcesContent":["/**\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * \n * @format\n */\n\n'use strict';\n\nimport _objectSpread from \"@babel/runtime/helpers/objectSpread2\";\nclass Info {\n  constructor() {\n    this.any_blank_count = 0;\n    this.any_blank_ms = 0;\n    this.any_blank_speed_sum = 0;\n    this.mostly_blank_count = 0;\n    this.mostly_blank_ms = 0;\n    this.pixels_blank = 0;\n    this.pixels_sampled = 0;\n    this.pixels_scrolled = 0;\n    this.total_time_spent = 0;\n    this.sample_count = 0;\n  }\n}\nvar DEBUG = false;\nvar _listeners = [];\nvar _minSampleCount = 10;\nvar _sampleRate = DEBUG ? 1 : null;\n\n/**\n * A helper class for detecting when the maximem fill rate of `VirtualizedList` is exceeded.\n * By default the sampling rate is set to zero and this will do nothing. If you want to collect\n * samples (e.g. to log them), make sure to call `FillRateHelper.setSampleRate(0.0-1.0)`.\n *\n * Listeners and sample rate are global for all `VirtualizedList`s - typical usage will combine with\n * `SceneTracker.getActiveScene` to determine the context of the events.\n */\nclass FillRateHelper {\n  static addListener(callback) {\n    if (_sampleRate === null) {\n      console.warn('Call `FillRateHelper.setSampleRate` before `addListener`.');\n    }\n    _listeners.push(callback);\n    return {\n      remove: () => {\n        _listeners = _listeners.filter(listener => callback !== listener);\n      }\n    };\n  }\n  static setSampleRate(sampleRate) {\n    _sampleRate = sampleRate;\n  }\n  static setMinSampleCount(minSampleCount) {\n    _minSampleCount = minSampleCount;\n  }\n  constructor(getFrameMetrics) {\n    this._anyBlankStartTime = null;\n    this._enabled = false;\n    this._info = new Info();\n    this._mostlyBlankStartTime = null;\n    this._samplesStartTime = null;\n    this._getFrameMetrics = getFrameMetrics;\n    this._enabled = (_sampleRate || 0) > Math.random();\n    this._resetData();\n  }\n  activate() {\n    if (this._enabled && this._samplesStartTime == null) {\n      DEBUG && console.debug('FillRateHelper: activate');\n      this._samplesStartTime = global.performance.now();\n    }\n  }\n  deactivateAndFlush() {\n    if (!this._enabled) {\n      return;\n    }\n    var start = this._samplesStartTime; // const for flow\n    if (start == null) {\n      DEBUG && console.debug('FillRateHelper: bail on deactivate with no start time');\n      return;\n    }\n    if (this._info.sample_count < _minSampleCount) {\n      // Don't bother with under-sampled events.\n      this._resetData();\n      return;\n    }\n    var total_time_spent = global.performance.now() - start;\n    var info = _objectSpread(_objectSpread({}, this._info), {}, {\n      total_time_spent\n    });\n    if (DEBUG) {\n      var derived = {\n        avg_blankness: this._info.pixels_blank / this._info.pixels_sampled,\n        avg_speed: this._info.pixels_scrolled / (total_time_spent / 1000),\n        avg_speed_when_any_blank: this._info.any_blank_speed_sum / this._info.any_blank_count,\n        any_blank_per_min: this._info.any_blank_count / (total_time_spent / 1000 / 60),\n        any_blank_time_frac: this._info.any_blank_ms / total_time_spent,\n        mostly_blank_per_min: this._info.mostly_blank_count / (total_time_spent / 1000 / 60),\n        mostly_blank_time_frac: this._info.mostly_blank_ms / total_time_spent\n      };\n      for (var key in derived) {\n        // $FlowFixMe[prop-missing]\n        derived[key] = Math.round(1000 * derived[key]) / 1000;\n      }\n      console.debug('FillRateHelper deactivateAndFlush: ', {\n        derived,\n        info\n      });\n    }\n    _listeners.forEach(listener => listener(info));\n    this._resetData();\n  }\n  computeBlankness(props, cellsAroundViewport, scrollMetrics) {\n    if (!this._enabled || props.getItemCount(props.data) === 0 || cellsAroundViewport.last < cellsAroundViewport.first || this._samplesStartTime == null) {\n      return 0;\n    }\n    var dOffset = scrollMetrics.dOffset,\n      offset = scrollMetrics.offset,\n      velocity = scrollMetrics.velocity,\n      visibleLength = scrollMetrics.visibleLength;\n\n    // Denominator metrics that we track for all events - most of the time there is no blankness and\n    // we want to capture that.\n    this._info.sample_count++;\n    this._info.pixels_sampled += Math.round(visibleLength);\n    this._info.pixels_scrolled += Math.round(Math.abs(dOffset));\n    var scrollSpeed = Math.round(Math.abs(velocity) * 1000); // px / sec\n\n    // Whether blank now or not, record the elapsed time blank if we were blank last time.\n    var now = global.performance.now();\n    if (this._anyBlankStartTime != null) {\n      this._info.any_blank_ms += now - this._anyBlankStartTime;\n    }\n    this._anyBlankStartTime = null;\n    if (this._mostlyBlankStartTime != null) {\n      this._info.mostly_blank_ms += now - this._mostlyBlankStartTime;\n    }\n    this._mostlyBlankStartTime = null;\n    var blankTop = 0;\n    var first = cellsAroundViewport.first;\n    var firstFrame = this._getFrameMetrics(first, props);\n    while (first <= cellsAroundViewport.last && (!firstFrame || !firstFrame.inLayout)) {\n      firstFrame = this._getFrameMetrics(first, props);\n      first++;\n    }\n    // Only count blankTop if we aren't rendering the first item, otherwise we will count the header\n    // as blank.\n    if (firstFrame && first > 0) {\n      blankTop = Math.min(visibleLength, Math.max(0, firstFrame.offset - offset));\n    }\n    var blankBottom = 0;\n    var last = cellsAroundViewport.last;\n    var lastFrame = this._getFrameMetrics(last, props);\n    while (last >= cellsAroundViewport.first && (!lastFrame || !lastFrame.inLayout)) {\n      lastFrame = this._getFrameMetrics(last, props);\n      last--;\n    }\n    // Only count blankBottom if we aren't rendering the last item, otherwise we will count the\n    // footer as blank.\n    if (lastFrame && last < props.getItemCount(props.data) - 1) {\n      var bottomEdge = lastFrame.offset + lastFrame.length;\n      blankBottom = Math.min(visibleLength, Math.max(0, offset + visibleLength - bottomEdge));\n    }\n    var pixels_blank = Math.round(blankTop + blankBottom);\n    var blankness = pixels_blank / visibleLength;\n    if (blankness > 0) {\n      this._anyBlankStartTime = now;\n      this._info.any_blank_speed_sum += scrollSpeed;\n      this._info.any_blank_count++;\n      this._info.pixels_blank += pixels_blank;\n      if (blankness > 0.5) {\n        this._mostlyBlankStartTime = now;\n        this._info.mostly_blank_count++;\n      }\n    } else if (scrollSpeed < 0.01 || Math.abs(dOffset) < 1) {\n      this.deactivateAndFlush();\n    }\n    return blankness;\n  }\n  enabled() {\n    return this._enabled;\n  }\n  _resetData() {\n    this._anyBlankStartTime = null;\n    this._info = new Info();\n    this._mostlyBlankStartTime = null;\n    this._samplesStartTime = null;\n  }\n}\nexport default FillRateHelper;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}