{"ast":null,"code":"import { createJavaScriptFlagGetter, createNativeFlagGetter, setOverrides } from './ReactNativeFeatureFlagsBase';\nexport const jsOnlyTestFlag = createJavaScriptFlagGetter('jsOnlyTestFlag', false);\nexport const isLayoutAnimationEnabled = createJavaScriptFlagGetter('isLayoutAnimationEnabled', true);\nexport const animatedShouldDebounceQueueFlush = createJavaScriptFlagGetter('animatedShouldDebounceQueueFlush', false);\nexport const animatedShouldUseSingleOp = createJavaScriptFlagGetter('animatedShouldUseSingleOp', false);\nexport const enableAccessToHostTreeInFabric = createJavaScriptFlagGetter('enableAccessToHostTreeInFabric', false);\nexport const shouldUseAnimatedObjectForTransform = createJavaScriptFlagGetter('shouldUseAnimatedObjectForTransform', false);\nexport const shouldUseSetNativePropsInFabric = createJavaScriptFlagGetter('shouldUseSetNativePropsInFabric', true);\nexport const shouldUseRemoveClippedSubviewsAsDefaultOnIOS = createJavaScriptFlagGetter('shouldUseRemoveClippedSubviewsAsDefaultOnIOS', false);\nexport const commonTestFlag = createNativeFlagGetter('commonTestFlag', false);\nexport const androidEnablePendingFabricTransactions = createNativeFlagGetter('androidEnablePendingFabricTransactions', false);\nexport const batchRenderingUpdatesInEventLoop = createNativeFlagGetter('batchRenderingUpdatesInEventLoop', false);\nexport const destroyFabricSurfacesInReactInstanceManager = createNativeFlagGetter('destroyFabricSurfacesInReactInstanceManager', false);\nexport const enableBackgroundExecutor = createNativeFlagGetter('enableBackgroundExecutor', false);\nexport const useModernRuntimeScheduler = createNativeFlagGetter('useModernRuntimeScheduler', false);\nexport const enableMicrotasks = createNativeFlagGetter('enableMicrotasks', false);\nexport const enableSpannableBuildingUnification = createNativeFlagGetter('enableSpannableBuildingUnification', false);\nexport const enableCustomDrawOrderFabric = createNativeFlagGetter('enableCustomDrawOrderFabric', false);\nexport const enableFixForClippedSubviewsCrash = createNativeFlagGetter('enableFixForClippedSubviewsCrash', false);\nexport const inspectorEnableCxxInspectorPackagerConnection = createNativeFlagGetter('inspectorEnableCxxInspectorPackagerConnection', false);\nexport const inspectorEnableModernCDPRegistry = createNativeFlagGetter('inspectorEnableModernCDPRegistry', false);\nexport const override = setOverrides;","map":{"version":3,"names":["createJavaScriptFlagGetter","createNativeFlagGetter","setOverrides","jsOnlyTestFlag","isLayoutAnimationEnabled","animatedShouldDebounceQueueFlush","animatedShouldUseSingleOp","enableAccessToHostTreeInFabric","shouldUseAnimatedObjectForTransform","shouldUseSetNativePropsInFabric","shouldUseRemoveClippedSubviewsAsDefaultOnIOS","commonTestFlag","androidEnablePendingFabricTransactions","batchRenderingUpdatesInEventLoop","destroyFabricSurfacesInReactInstanceManager","enableBackgroundExecutor","useModernRuntimeScheduler","enableMicrotasks","enableSpannableBuildingUnification","enableCustomDrawOrderFabric","enableFixForClippedSubviewsCrash","inspectorEnableCxxInspectorPackagerConnection","inspectorEnableModernCDPRegistry","override"],"sources":["/home/rodo/workspace/passion/apps/muh-money/node_modules/react-native/src/private/featureflags/ReactNativeFeatureFlags.js"],"sourcesContent":["/**\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @generated SignedSource<<b7ebc6e4360a4b7733335f283300a4bb>>\n * @flow strict-local\n */\n\n/**\n * IMPORTANT: Do NOT modify this file directly.\n *\n * To change the definition of the flags, edit\n *   packages/react-native/scripts/featureflags/ReactNativeFeatureFlags.config.js.\n *\n * To regenerate this code, run the following script from the repo root:\n *   yarn featureflags-update\n */\n\nimport {\n  type Getter,\n  createJavaScriptFlagGetter,\n  createNativeFlagGetter,\n  setOverrides,\n} from './ReactNativeFeatureFlagsBase';\n\nexport type ReactNativeFeatureFlagsJsOnly = {\n  jsOnlyTestFlag: Getter<boolean>,\n  isLayoutAnimationEnabled: Getter<boolean>,\n  animatedShouldDebounceQueueFlush: Getter<boolean>,\n  animatedShouldUseSingleOp: Getter<boolean>,\n  enableAccessToHostTreeInFabric: Getter<boolean>,\n  shouldUseAnimatedObjectForTransform: Getter<boolean>,\n  shouldUseSetNativePropsInFabric: Getter<boolean>,\n  shouldUseRemoveClippedSubviewsAsDefaultOnIOS: Getter<boolean>,\n};\n\nexport type ReactNativeFeatureFlagsJsOnlyOverrides = Partial<ReactNativeFeatureFlagsJsOnly>;\n\nexport type ReactNativeFeatureFlags = {\n  ...ReactNativeFeatureFlagsJsOnly,\n  commonTestFlag: Getter<boolean>,\n  androidEnablePendingFabricTransactions: Getter<boolean>,\n  batchRenderingUpdatesInEventLoop: Getter<boolean>,\n  destroyFabricSurfacesInReactInstanceManager: Getter<boolean>,\n  enableBackgroundExecutor: Getter<boolean>,\n  useModernRuntimeScheduler: Getter<boolean>,\n  enableMicrotasks: Getter<boolean>,\n  enableSpannableBuildingUnification: Getter<boolean>,\n  enableCustomDrawOrderFabric: Getter<boolean>,\n  enableFixForClippedSubviewsCrash: Getter<boolean>,\n  inspectorEnableCxxInspectorPackagerConnection: Getter<boolean>,\n  inspectorEnableModernCDPRegistry: Getter<boolean>,\n}\n\n/**\n * JS-only flag for testing. Do NOT modify.\n */\nexport const jsOnlyTestFlag: Getter<boolean> = createJavaScriptFlagGetter('jsOnlyTestFlag', false);\n\n/**\n * Function used to enable / disabled Layout Animations in React Native.\n */\nexport const isLayoutAnimationEnabled: Getter<boolean> = createJavaScriptFlagGetter('isLayoutAnimationEnabled', true);\n\n/**\n * Enables an experimental flush-queue debouncing in Animated.js.\n */\nexport const animatedShouldDebounceQueueFlush: Getter<boolean> = createJavaScriptFlagGetter('animatedShouldDebounceQueueFlush', false);\n\n/**\n * Enables an experimental mega-operation for Animated.js that replaces many calls to native with a single call into native, to reduce JSI/JNI traffic.\n */\nexport const animatedShouldUseSingleOp: Getter<boolean> = createJavaScriptFlagGetter('animatedShouldUseSingleOp', false);\n\n/**\n * Enables access to the host tree in Fabric using DOM-compatible APIs.\n */\nexport const enableAccessToHostTreeInFabric: Getter<boolean> = createJavaScriptFlagGetter('enableAccessToHostTreeInFabric', false);\n\n/**\n * Enables use of AnimatedObject for animating transform values.\n */\nexport const shouldUseAnimatedObjectForTransform: Getter<boolean> = createJavaScriptFlagGetter('shouldUseAnimatedObjectForTransform', false);\n\n/**\n * Enables use of setNativeProps in JS driven animations.\n */\nexport const shouldUseSetNativePropsInFabric: Getter<boolean> = createJavaScriptFlagGetter('shouldUseSetNativePropsInFabric', true);\n\n/**\n * removeClippedSubviews prop will be used as the default in FlatList on iOS to match Android\n */\nexport const shouldUseRemoveClippedSubviewsAsDefaultOnIOS: Getter<boolean> = createJavaScriptFlagGetter('shouldUseRemoveClippedSubviewsAsDefaultOnIOS', false);\n\n/**\n * Common flag for testing. Do NOT modify.\n */\nexport const commonTestFlag: Getter<boolean> = createNativeFlagGetter('commonTestFlag', false);\n/**\n * To be used with batchRenderingUpdatesInEventLoop. When enbled, the Android mounting layer will concatenate pending transactions to ensure they're applied atomatically\n */\nexport const androidEnablePendingFabricTransactions: Getter<boolean> = createNativeFlagGetter('androidEnablePendingFabricTransactions', false);\n/**\n * When enabled, the RuntimeScheduler processing the event loop will batch all rendering updates and dispatch them together at the end of each iteration of the loop.\n */\nexport const batchRenderingUpdatesInEventLoop: Getter<boolean> = createNativeFlagGetter('batchRenderingUpdatesInEventLoop', false);\n/**\n * When enabled, ReactInstanceManager will clean up Fabric surfaces on destroy().\n */\nexport const destroyFabricSurfacesInReactInstanceManager: Getter<boolean> = createNativeFlagGetter('destroyFabricSurfacesInReactInstanceManager', false);\n/**\n * Enables the use of a background executor to compute layout and commit updates on Fabric (this system is deprecated and should not be used).\n */\nexport const enableBackgroundExecutor: Getter<boolean> = createNativeFlagGetter('enableBackgroundExecutor', false);\n/**\n * When enabled, it uses the modern fork of RuntimeScheduler that allows scheduling tasks with priorities from any thread.\n */\nexport const useModernRuntimeScheduler: Getter<boolean> = createNativeFlagGetter('useModernRuntimeScheduler', false);\n/**\n * Enables the use of microtasks in Hermes (scheduling) and RuntimeScheduler (execution).\n */\nexport const enableMicrotasks: Getter<boolean> = createNativeFlagGetter('enableMicrotasks', false);\n/**\n * Uses new, deduplicated logic for constructing Android Spannables from text fragments\n */\nexport const enableSpannableBuildingUnification: Getter<boolean> = createNativeFlagGetter('enableSpannableBuildingUnification', false);\n/**\n * When enabled, Fabric will use customDrawOrder in ReactViewGroup (similar to old architecture).\n */\nexport const enableCustomDrawOrderFabric: Getter<boolean> = createNativeFlagGetter('enableCustomDrawOrderFabric', false);\n/**\n * Attempt at fixing a crash related to subview clipping on Android. This is a kill switch for the fix\n */\nexport const enableFixForClippedSubviewsCrash: Getter<boolean> = createNativeFlagGetter('enableFixForClippedSubviewsCrash', false);\n/**\n * Flag determining if the C++ implementation of InspectorPackagerConnection should be used instead of the per-platform one. This flag is global and should not be changed across React Host lifetimes.\n */\nexport const inspectorEnableCxxInspectorPackagerConnection: Getter<boolean> = createNativeFlagGetter('inspectorEnableCxxInspectorPackagerConnection', false);\n/**\n * Flag determining if the modern CDP backend should be enabled. This flag is global and should not be changed across React Host lifetimes.\n */\nexport const inspectorEnableModernCDPRegistry: Getter<boolean> = createNativeFlagGetter('inspectorEnableModernCDPRegistry', false);\n\n/**\n * Overrides the feature flags with the provided methods.\n * NOTE: Only JS-only flags can be overridden from JavaScript using this API.\n */\nexport const override = setOverrides;\n"],"mappings":"AAoBA,SAEEA,0BAA0B,EAC1BC,sBAAsB,EACtBC,YAAY,QACP,+BAA+B;AAkCtC,OAAO,MAAMC,cAA+B,GAAGH,0BAA0B,CAAC,gBAAgB,EAAE,KAAK,CAAC;AAKlG,OAAO,MAAMI,wBAAyC,GAAGJ,0BAA0B,CAAC,0BAA0B,EAAE,IAAI,CAAC;AAKrH,OAAO,MAAMK,gCAAiD,GAAGL,0BAA0B,CAAC,kCAAkC,EAAE,KAAK,CAAC;AAKtI,OAAO,MAAMM,yBAA0C,GAAGN,0BAA0B,CAAC,2BAA2B,EAAE,KAAK,CAAC;AAKxH,OAAO,MAAMO,8BAA+C,GAAGP,0BAA0B,CAAC,gCAAgC,EAAE,KAAK,CAAC;AAKlI,OAAO,MAAMQ,mCAAoD,GAAGR,0BAA0B,CAAC,qCAAqC,EAAE,KAAK,CAAC;AAK5I,OAAO,MAAMS,+BAAgD,GAAGT,0BAA0B,CAAC,iCAAiC,EAAE,IAAI,CAAC;AAKnI,OAAO,MAAMU,4CAA6D,GAAGV,0BAA0B,CAAC,8CAA8C,EAAE,KAAK,CAAC;AAK9J,OAAO,MAAMW,cAA+B,GAAGV,sBAAsB,CAAC,gBAAgB,EAAE,KAAK,CAAC;AAI9F,OAAO,MAAMW,sCAAuD,GAAGX,sBAAsB,CAAC,wCAAwC,EAAE,KAAK,CAAC;AAI9I,OAAO,MAAMY,gCAAiD,GAAGZ,sBAAsB,CAAC,kCAAkC,EAAE,KAAK,CAAC;AAIlI,OAAO,MAAMa,2CAA4D,GAAGb,sBAAsB,CAAC,6CAA6C,EAAE,KAAK,CAAC;AAIxJ,OAAO,MAAMc,wBAAyC,GAAGd,sBAAsB,CAAC,0BAA0B,EAAE,KAAK,CAAC;AAIlH,OAAO,MAAMe,yBAA0C,GAAGf,sBAAsB,CAAC,2BAA2B,EAAE,KAAK,CAAC;AAIpH,OAAO,MAAMgB,gBAAiC,GAAGhB,sBAAsB,CAAC,kBAAkB,EAAE,KAAK,CAAC;AAIlG,OAAO,MAAMiB,kCAAmD,GAAGjB,sBAAsB,CAAC,oCAAoC,EAAE,KAAK,CAAC;AAItI,OAAO,MAAMkB,2BAA4C,GAAGlB,sBAAsB,CAAC,6BAA6B,EAAE,KAAK,CAAC;AAIxH,OAAO,MAAMmB,gCAAiD,GAAGnB,sBAAsB,CAAC,kCAAkC,EAAE,KAAK,CAAC;AAIlI,OAAO,MAAMoB,6CAA8D,GAAGpB,sBAAsB,CAAC,+CAA+C,EAAE,KAAK,CAAC;AAI5J,OAAO,MAAMqB,gCAAiD,GAAGrB,sBAAsB,CAAC,kCAAkC,EAAE,KAAK,CAAC;AAMlI,OAAO,MAAMsB,QAAQ,GAAGrB,YAAY","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}