{"ast":null,"code":"import _defineProperty from \"@babel/runtime/helpers/defineProperty\";\nvar _jsxFileName = \"/home/rodo/workspace/passion/apps/muh-money/node_modules/react-native-vector-icons/lib/create-multi-style-icon-set.js\";\nfunction ownKeys(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }\nfunction _objectSpread(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? ownKeys(Object(t), !0).forEach(function (r) { _defineProperty(e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; }\nimport React, { PureComponent } from 'react';\nimport PropTypes from 'prop-types';\nimport createIconSet, { DEFAULT_ICON_COLOR, DEFAULT_ICON_SIZE } from './create-icon-set';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default function createMultiStyleIconSet(styles, optionsInput = {}) {\n  const styleNames = Object.keys(styles);\n  if (styleNames.length === 0) {\n    throw new Error('You need to add at least one style');\n  }\n  const options = _objectSpread({\n    defaultStyle: styleNames[0],\n    fallbackFamily: () => styleNames[0],\n    glyphValidator: () => true\n  }, optionsInput);\n  const iconSets = styleNames.reduce((acc, name) => {\n    const style = styles[name];\n    acc[name] = createIconSet(style.glyphMap || {}, style.fontFamily || '', style.fontFile || '', style.fontStyle || {});\n    return acc;\n  }, {});\n  function styleFromProps(props) {\n    return Object.keys(props).reduce((result, propName) => styleNames.indexOf(propName) !== -1 && props[propName] === true ? propName : result, options.defaultStyle);\n  }\n  function getIconSetForProps(props) {\n    const {\n      name\n    } = props;\n    const style = styleFromProps(props);\n    if (options.glyphValidator(name, style)) return iconSets[style];\n    const family = options.fallbackFamily(name);\n    if (styleNames.indexOf(family) === -1) {\n      return options.defaultStyle;\n    }\n    return iconSets[family];\n  }\n  function selectIconClass(iconSet, iconClass) {\n    return iconClass.length > 0 ? iconSet[iconClass] : iconSet;\n  }\n  function reduceProps(props) {\n    return Object.keys(props).reduce((acc, prop) => {\n      if (styleNames.indexOf(prop) === -1) {\n        acc[prop] = props[prop];\n      }\n      return acc;\n    }, {});\n  }\n  function getStyledIconSet(style, name = '') {\n    if (styleNames.indexOf(style) === -1) {\n      return iconSets[options.defaultStyle];\n    }\n    return !name ? iconSets[styleFromProps({\n      [style]: true\n    })] : getIconSetForProps({\n      name,\n      [style]: true\n    });\n  }\n  function getImageSource(name, size = DEFAULT_ICON_SIZE, color = DEFAULT_ICON_COLOR, style = options.defaultStyle) {\n    return getStyledIconSet(style, name).getImageSource(name, size, color);\n  }\n  function getImageSourceSync(name, size = DEFAULT_ICON_SIZE, color = DEFAULT_ICON_COLOR, style = options.defaultStyle) {\n    return getStyledIconSet(style, name).getImageSourceSync(name, size, color);\n  }\n  function getFontFamily(style = options.defaultStyle) {\n    return getStyledIconSet(style).getFontFamily();\n  }\n  function getRawGlyphMap(style = options.defaultStyle) {\n    return getStyledIconSet(style).getRawGlyphMap();\n  }\n  function hasIcon(name, style = options.defaultStyle) {\n    return options.glyphValidator(name, style);\n  }\n  function createStyledIconClass(selectClass = '') {\n    class IconClass extends PureComponent {\n      static propTypes = styleNames.reduce((acc, name) => {\n        acc[name] = PropTypes.bool;\n        return acc;\n      }, {});\n      static defaultProps = styleNames.reduce((acc, name) => {\n        acc[name] = false;\n        return acc;\n      }, {});\n      render() {\n        const selectedIconSet = getIconSetForProps(this.props);\n        const SelectedIconClass = selectIconClass(selectedIconSet, selectClass);\n        const props = reduceProps(this.props);\n        return _jsxDEV(SelectedIconClass, _objectSpread({}, props), void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 132,\n          columnNumber: 16\n        }, this);\n      }\n    }\n    return IconClass;\n  }\n  const Icon = createStyledIconClass();\n  Icon.Button = createStyledIconClass('Button');\n  Icon.getStyledIconSet = getStyledIconSet;\n  Icon.getImageSource = getImageSource;\n  Icon.getImageSourceSync = getImageSourceSync;\n  Icon.getFontFamily = getFontFamily;\n  Icon.getRawGlyphMap = getRawGlyphMap;\n  Icon.hasIcon = hasIcon;\n  return Icon;\n}","map":{"version":3,"names":["React","PureComponent","PropTypes","createIconSet","DEFAULT_ICON_COLOR","DEFAULT_ICON_SIZE","jsxDEV","_jsxDEV","createMultiStyleIconSet","styles","optionsInput","styleNames","Object","keys","length","Error","options","_objectSpread","defaultStyle","fallbackFamily","glyphValidator","iconSets","reduce","acc","name","style","glyphMap","fontFamily","fontFile","fontStyle","styleFromProps","props","result","propName","indexOf","getIconSetForProps","family","selectIconClass","iconSet","iconClass","reduceProps","prop","getStyledIconSet","getImageSource","size","color","getImageSourceSync","getFontFamily","getRawGlyphMap","hasIcon","createStyledIconClass","selectClass","IconClass","propTypes","bool","defaultProps","render","selectedIconSet","SelectedIconClass","fileName","_jsxFileName","lineNumber","columnNumber","Icon","Button"],"sources":["/home/rodo/workspace/passion/apps/muh-money/node_modules/react-native-vector-icons/lib/create-multi-style-icon-set.js"],"sourcesContent":["import React, { PureComponent } from 'react';\nimport PropTypes from 'prop-types';\n\nimport createIconSet, {\n  DEFAULT_ICON_COLOR,\n  DEFAULT_ICON_SIZE,\n} from './create-icon-set';\n\nexport default function createMultiStyleIconSet(styles, optionsInput = {}) {\n  const styleNames = Object.keys(styles);\n\n  if (styleNames.length === 0) {\n    throw new Error('You need to add at least one style');\n  }\n\n  const options = {\n    defaultStyle: styleNames[0],\n    fallbackFamily: () => styleNames[0],\n    glyphValidator: () => true,\n    ...optionsInput,\n  };\n\n  const iconSets = styleNames.reduce((acc, name) => {\n    const style = styles[name];\n\n    acc[name] = createIconSet(\n      style.glyphMap || {},\n      style.fontFamily || '',\n      style.fontFile || '',\n      style.fontStyle || {}\n    );\n\n    return acc;\n  }, {});\n\n  function styleFromProps(props) {\n    return Object.keys(props).reduce(\n      (result, propName) =>\n        styleNames.indexOf(propName) !== -1 && props[propName] === true\n          ? propName\n          : result,\n      options.defaultStyle\n    );\n  }\n\n  function getIconSetForProps(props) {\n    const { name } = props;\n    const style = styleFromProps(props);\n\n    if (options.glyphValidator(name, style)) return iconSets[style];\n\n    const family = options.fallbackFamily(name);\n\n    if (styleNames.indexOf(family) === -1) {\n      return options.defaultStyle;\n    }\n\n    return iconSets[family];\n  }\n\n  function selectIconClass(iconSet, iconClass) {\n    return iconClass.length > 0 ? iconSet[iconClass] : iconSet;\n  }\n\n  function reduceProps(props) {\n    return Object.keys(props).reduce((acc, prop) => {\n      if (styleNames.indexOf(prop) === -1) {\n        acc[prop] = props[prop];\n      }\n\n      return acc;\n    }, {});\n  }\n\n  function getStyledIconSet(style, name = '') {\n    if (styleNames.indexOf(style) === -1) {\n      return iconSets[options.defaultStyle];\n    }\n\n    return !name\n      ? iconSets[styleFromProps({ [style]: true })]\n      : getIconSetForProps({ name, [style]: true });\n  }\n\n  function getImageSource(\n    name,\n    size = DEFAULT_ICON_SIZE,\n    color = DEFAULT_ICON_COLOR,\n    style = options.defaultStyle\n  ) {\n    return getStyledIconSet(style, name).getImageSource(name, size, color);\n  }\n\n  function getImageSourceSync(\n    name,\n    size = DEFAULT_ICON_SIZE,\n    color = DEFAULT_ICON_COLOR,\n    style = options.defaultStyle\n  ) {\n    return getStyledIconSet(style, name).getImageSourceSync(name, size, color);\n  }\n\n  function getFontFamily(style = options.defaultStyle) {\n    return getStyledIconSet(style).getFontFamily();\n  }\n\n  function getRawGlyphMap(style = options.defaultStyle) {\n    return getStyledIconSet(style).getRawGlyphMap();\n  }\n\n  function hasIcon(name, style = options.defaultStyle) {\n    return options.glyphValidator(name, style);\n  }\n\n  function createStyledIconClass(selectClass = '') {\n    class IconClass extends PureComponent {\n      static propTypes = styleNames.reduce((acc, name) => {\n        acc[name] = PropTypes.bool;\n        return acc;\n      }, {});\n\n      static defaultProps = styleNames.reduce((acc, name) => {\n        acc[name] = false;\n        return acc;\n      }, {});\n\n      render() {\n        const selectedIconSet = getIconSetForProps(this.props);\n        const SelectedIconClass = selectIconClass(selectedIconSet, selectClass);\n        const props = reduceProps(this.props);\n\n        return <SelectedIconClass {...props} />;\n      }\n    }\n\n    return IconClass;\n  }\n\n  const Icon = createStyledIconClass();\n  Icon.Button = createStyledIconClass('Button');\n  Icon.getStyledIconSet = getStyledIconSet;\n  Icon.getImageSource = getImageSource;\n  Icon.getImageSourceSync = getImageSourceSync;\n  Icon.getFontFamily = getFontFamily;\n  Icon.getRawGlyphMap = getRawGlyphMap;\n  Icon.hasIcon = hasIcon;\n\n  return Icon;\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}