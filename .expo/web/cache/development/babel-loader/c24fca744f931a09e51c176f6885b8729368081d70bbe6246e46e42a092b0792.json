{"ast":null,"code":"import _defineProperty from \"@babel/runtime/helpers/defineProperty\";\nfunction ownKeys(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }\nfunction _objectSpread(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? ownKeys(Object(t), !0).forEach(function (r) { _defineProperty(e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; }\nimport * as Systrace from '../Performance/Systrace';\nimport infoLog from './infoLog';\nconst _cookies = {};\nconst PRINT_TO_CONSOLE = false;\nexport const getCurrentTimestamp = global.nativeQPLTimestamp ?? (() => global.performance.now());\nclass PerformanceLogger {\n  _timespans = {};\n  _extras = {};\n  _points = {};\n  _pointExtras = {};\n  _closed = false;\n  addTimespan(key, startTime, endTime, startExtras, endExtras) {\n    if (this._closed) {\n      if (PRINT_TO_CONSOLE && __DEV__) {\n        infoLog('PerformanceLogger: addTimespan - has closed ignoring: ', key);\n      }\n      return;\n    }\n    if (this._timespans[key]) {\n      if (PRINT_TO_CONSOLE && __DEV__) {\n        infoLog('PerformanceLogger: Attempting to add a timespan that already exists ', key);\n      }\n      return;\n    }\n    this._timespans[key] = {\n      startTime,\n      endTime,\n      totalTime: endTime - (startTime || 0),\n      startExtras,\n      endExtras\n    };\n  }\n  append(performanceLogger) {\n    this._timespans = _objectSpread(_objectSpread({}, performanceLogger.getTimespans()), this._timespans);\n    this._extras = _objectSpread(_objectSpread({}, performanceLogger.getExtras()), this._extras);\n    this._points = _objectSpread(_objectSpread({}, performanceLogger.getPoints()), this._points);\n    this._pointExtras = _objectSpread(_objectSpread({}, performanceLogger.getPointExtras()), this._pointExtras);\n  }\n  clear() {\n    this._timespans = {};\n    this._extras = {};\n    this._points = {};\n    if (PRINT_TO_CONSOLE) {\n      infoLog('PerformanceLogger.js', 'clear');\n    }\n  }\n  clearCompleted() {\n    for (const key in this._timespans) {\n      if (this._timespans[key]?.totalTime != null) {\n        delete this._timespans[key];\n      }\n    }\n    this._extras = {};\n    this._points = {};\n    if (PRINT_TO_CONSOLE) {\n      infoLog('PerformanceLogger.js', 'clearCompleted');\n    }\n  }\n  close() {\n    this._closed = true;\n  }\n  currentTimestamp() {\n    return getCurrentTimestamp();\n  }\n  getExtras() {\n    return this._extras;\n  }\n  getPoints() {\n    return this._points;\n  }\n  getPointExtras() {\n    return this._pointExtras;\n  }\n  getTimespans() {\n    return this._timespans;\n  }\n  hasTimespan(key) {\n    return !!this._timespans[key];\n  }\n  isClosed() {\n    return this._closed;\n  }\n  logEverything() {\n    if (PRINT_TO_CONSOLE) {\n      for (const key in this._timespans) {\n        if (this._timespans[key]?.totalTime != null) {\n          infoLog(key + ': ' + this._timespans[key].totalTime + 'ms');\n        }\n      }\n      infoLog(this._extras);\n      for (const key in this._points) {\n        if (this._points[key] != null) {\n          infoLog(key + ': ' + this._points[key] + 'ms');\n        }\n      }\n    }\n  }\n  markPoint(key, timestamp = getCurrentTimestamp(), extras) {\n    if (this._closed) {\n      if (PRINT_TO_CONSOLE && __DEV__) {\n        infoLog('PerformanceLogger: markPoint - has closed ignoring: ', key);\n      }\n      return;\n    }\n    if (this._points[key] != null) {\n      if (PRINT_TO_CONSOLE && __DEV__) {\n        infoLog('PerformanceLogger: Attempting to mark a point that has been already logged ', key);\n      }\n      return;\n    }\n    this._points[key] = timestamp;\n    if (extras) {\n      this._pointExtras[key] = extras;\n    }\n  }\n  removeExtra(key) {\n    const value = this._extras[key];\n    delete this._extras[key];\n    return value;\n  }\n  setExtra(key, value) {\n    if (this._closed) {\n      if (PRINT_TO_CONSOLE && __DEV__) {\n        infoLog('PerformanceLogger: setExtra - has closed ignoring: ', key);\n      }\n      return;\n    }\n    if (this._extras.hasOwnProperty(key)) {\n      if (PRINT_TO_CONSOLE && __DEV__) {\n        infoLog('PerformanceLogger: Attempting to set an extra that already exists ', {\n          key,\n          currentValue: this._extras[key],\n          attemptedValue: value\n        });\n      }\n      return;\n    }\n    this._extras[key] = value;\n  }\n  startTimespan(key, timestamp = getCurrentTimestamp(), extras) {\n    if (this._closed) {\n      if (PRINT_TO_CONSOLE && __DEV__) {\n        infoLog('PerformanceLogger: startTimespan - has closed ignoring: ', key);\n      }\n      return;\n    }\n    if (this._timespans[key]) {\n      if (PRINT_TO_CONSOLE && __DEV__) {\n        infoLog('PerformanceLogger: Attempting to start a timespan that already exists ', key);\n      }\n      return;\n    }\n    this._timespans[key] = {\n      startTime: timestamp,\n      startExtras: extras\n    };\n    _cookies[key] = Systrace.beginAsyncEvent(key);\n    if (PRINT_TO_CONSOLE) {\n      infoLog('PerformanceLogger.js', 'start: ' + key);\n    }\n  }\n  stopTimespan(key, timestamp = getCurrentTimestamp(), extras) {\n    if (this._closed) {\n      if (PRINT_TO_CONSOLE && __DEV__) {\n        infoLog('PerformanceLogger: stopTimespan - has closed ignoring: ', key);\n      }\n      return;\n    }\n    const timespan = this._timespans[key];\n    if (!timespan || timespan.startTime == null) {\n      if (PRINT_TO_CONSOLE && __DEV__) {\n        infoLog('PerformanceLogger: Attempting to end a timespan that has not started ', key);\n      }\n      return;\n    }\n    if (timespan.endTime != null) {\n      if (PRINT_TO_CONSOLE && __DEV__) {\n        infoLog('PerformanceLogger: Attempting to end a timespan that has already ended ', key);\n      }\n      return;\n    }\n    timespan.endExtras = extras;\n    timespan.endTime = timestamp;\n    timespan.totalTime = timespan.endTime - (timespan.startTime || 0);\n    if (PRINT_TO_CONSOLE) {\n      infoLog('PerformanceLogger.js', 'end: ' + key);\n    }\n    if (_cookies[key] != null) {\n      Systrace.endAsyncEvent(key, _cookies[key]);\n      delete _cookies[key];\n    }\n  }\n}\nexport default function createPerformanceLogger() {\n  return new PerformanceLogger();\n}","map":{"version":3,"names":["Systrace","infoLog","_cookies","PRINT_TO_CONSOLE","getCurrentTimestamp","global","nativeQPLTimestamp","performance","now","PerformanceLogger","_timespans","_extras","_points","_pointExtras","_closed","addTimespan","key","startTime","endTime","startExtras","endExtras","__DEV__","totalTime","append","performanceLogger","_objectSpread","getTimespans","getExtras","getPoints","getPointExtras","clear","clearCompleted","close","currentTimestamp","hasTimespan","isClosed","logEverything","markPoint","timestamp","extras","removeExtra","value","setExtra","hasOwnProperty","currentValue","attemptedValue","startTimespan","beginAsyncEvent","stopTimespan","timespan","endAsyncEvent","createPerformanceLogger"],"sources":["/home/rodo/workspace/passion/apps/muh-money/node_modules/react-native/Libraries/Utilities/createPerformanceLogger.js"],"sourcesContent":["/**\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @flow strict\n * @format\n */\n\nimport type {\n  Extras,\n  ExtraValue,\n  IPerformanceLogger,\n  Timespan,\n} from './IPerformanceLogger';\n\nimport * as Systrace from '../Performance/Systrace';\nimport infoLog from './infoLog';\n\nconst _cookies: {[key: string]: number, ...} = {};\n\nconst PRINT_TO_CONSOLE: false = false; // Type as false to prevent accidentally committing `true`;\n\nexport const getCurrentTimestamp: () => number =\n  global.nativeQPLTimestamp ?? (() => global.performance.now());\n\nclass PerformanceLogger implements IPerformanceLogger {\n  _timespans: {[key: string]: ?Timespan} = {};\n  _extras: {[key: string]: ?ExtraValue} = {};\n  _points: {[key: string]: ?number} = {};\n  _pointExtras: {[key: string]: ?Extras, ...} = {};\n  _closed: boolean = false;\n\n  addTimespan(\n    key: string,\n    startTime: number,\n    endTime: number,\n    startExtras?: Extras,\n    endExtras?: Extras,\n  ) {\n    if (this._closed) {\n      if (PRINT_TO_CONSOLE && __DEV__) {\n        infoLog('PerformanceLogger: addTimespan - has closed ignoring: ', key);\n      }\n      return;\n    }\n    if (this._timespans[key]) {\n      if (PRINT_TO_CONSOLE && __DEV__) {\n        infoLog(\n          'PerformanceLogger: Attempting to add a timespan that already exists ',\n          key,\n        );\n      }\n      return;\n    }\n\n    this._timespans[key] = {\n      startTime,\n      endTime,\n      totalTime: endTime - (startTime || 0),\n      startExtras,\n      endExtras,\n    };\n  }\n\n  append(performanceLogger: IPerformanceLogger) {\n    this._timespans = {\n      ...performanceLogger.getTimespans(),\n      ...this._timespans,\n    };\n    this._extras = {...performanceLogger.getExtras(), ...this._extras};\n    this._points = {...performanceLogger.getPoints(), ...this._points};\n    this._pointExtras = {\n      ...performanceLogger.getPointExtras(),\n      ...this._pointExtras,\n    };\n  }\n\n  clear() {\n    this._timespans = {};\n    this._extras = {};\n    this._points = {};\n    if (PRINT_TO_CONSOLE) {\n      infoLog('PerformanceLogger.js', 'clear');\n    }\n  }\n\n  clearCompleted() {\n    for (const key in this._timespans) {\n      if (this._timespans[key]?.totalTime != null) {\n        delete this._timespans[key];\n      }\n    }\n    this._extras = {};\n    this._points = {};\n    if (PRINT_TO_CONSOLE) {\n      infoLog('PerformanceLogger.js', 'clearCompleted');\n    }\n  }\n\n  close() {\n    this._closed = true;\n  }\n\n  currentTimestamp(): number {\n    return getCurrentTimestamp();\n  }\n\n  getExtras(): {[key: string]: ?ExtraValue} {\n    return this._extras;\n  }\n\n  getPoints(): {[key: string]: ?number} {\n    return this._points;\n  }\n\n  getPointExtras(): {[key: string]: ?Extras} {\n    return this._pointExtras;\n  }\n\n  getTimespans(): {[key: string]: ?Timespan} {\n    return this._timespans;\n  }\n\n  hasTimespan(key: string): boolean {\n    return !!this._timespans[key];\n  }\n\n  isClosed(): boolean {\n    return this._closed;\n  }\n\n  logEverything() {\n    if (PRINT_TO_CONSOLE) {\n      // log timespans\n      for (const key in this._timespans) {\n        if (this._timespans[key]?.totalTime != null) {\n          infoLog(key + ': ' + this._timespans[key].totalTime + 'ms');\n        }\n      }\n\n      // log extras\n      infoLog(this._extras);\n\n      // log points\n      for (const key in this._points) {\n        if (this._points[key] != null) {\n          infoLog(key + ': ' + this._points[key] + 'ms');\n        }\n      }\n    }\n  }\n\n  markPoint(\n    key: string,\n    timestamp?: number = getCurrentTimestamp(),\n    extras?: Extras,\n  ) {\n    if (this._closed) {\n      if (PRINT_TO_CONSOLE && __DEV__) {\n        infoLog('PerformanceLogger: markPoint - has closed ignoring: ', key);\n      }\n      return;\n    }\n    if (this._points[key] != null) {\n      if (PRINT_TO_CONSOLE && __DEV__) {\n        infoLog(\n          'PerformanceLogger: Attempting to mark a point that has been already logged ',\n          key,\n        );\n      }\n      return;\n    }\n    this._points[key] = timestamp;\n    if (extras) {\n      this._pointExtras[key] = extras;\n    }\n  }\n\n  removeExtra(key: string): ?ExtraValue {\n    const value = this._extras[key];\n    delete this._extras[key];\n    return value;\n  }\n\n  setExtra(key: string, value: ExtraValue) {\n    if (this._closed) {\n      if (PRINT_TO_CONSOLE && __DEV__) {\n        infoLog('PerformanceLogger: setExtra - has closed ignoring: ', key);\n      }\n      return;\n    }\n\n    if (this._extras.hasOwnProperty(key)) {\n      if (PRINT_TO_CONSOLE && __DEV__) {\n        infoLog(\n          'PerformanceLogger: Attempting to set an extra that already exists ',\n          {key, currentValue: this._extras[key], attemptedValue: value},\n        );\n      }\n      return;\n    }\n    this._extras[key] = value;\n  }\n\n  startTimespan(\n    key: string,\n    timestamp?: number = getCurrentTimestamp(),\n    extras?: Extras,\n  ) {\n    if (this._closed) {\n      if (PRINT_TO_CONSOLE && __DEV__) {\n        infoLog(\n          'PerformanceLogger: startTimespan - has closed ignoring: ',\n          key,\n        );\n      }\n      return;\n    }\n\n    if (this._timespans[key]) {\n      if (PRINT_TO_CONSOLE && __DEV__) {\n        infoLog(\n          'PerformanceLogger: Attempting to start a timespan that already exists ',\n          key,\n        );\n      }\n      return;\n    }\n\n    this._timespans[key] = {\n      startTime: timestamp,\n      startExtras: extras,\n    };\n    _cookies[key] = Systrace.beginAsyncEvent(key);\n    if (PRINT_TO_CONSOLE) {\n      infoLog('PerformanceLogger.js', 'start: ' + key);\n    }\n  }\n\n  stopTimespan(\n    key: string,\n    timestamp?: number = getCurrentTimestamp(),\n    extras?: Extras,\n  ) {\n    if (this._closed) {\n      if (PRINT_TO_CONSOLE && __DEV__) {\n        infoLog('PerformanceLogger: stopTimespan - has closed ignoring: ', key);\n      }\n      return;\n    }\n\n    const timespan = this._timespans[key];\n    if (!timespan || timespan.startTime == null) {\n      if (PRINT_TO_CONSOLE && __DEV__) {\n        infoLog(\n          'PerformanceLogger: Attempting to end a timespan that has not started ',\n          key,\n        );\n      }\n      return;\n    }\n    if (timespan.endTime != null) {\n      if (PRINT_TO_CONSOLE && __DEV__) {\n        infoLog(\n          'PerformanceLogger: Attempting to end a timespan that has already ended ',\n          key,\n        );\n      }\n      return;\n    }\n\n    timespan.endExtras = extras;\n    timespan.endTime = timestamp;\n    timespan.totalTime = timespan.endTime - (timespan.startTime || 0);\n    if (PRINT_TO_CONSOLE) {\n      infoLog('PerformanceLogger.js', 'end: ' + key);\n    }\n\n    if (_cookies[key] != null) {\n      Systrace.endAsyncEvent(key, _cookies[key]);\n      delete _cookies[key];\n    }\n  }\n}\n\n// Re-exporting for backwards compatibility with all the clients that\n// may still import it from this module.\nexport type {Extras, ExtraValue, IPerformanceLogger, Timespan};\n\n/**\n * This function creates performance loggers that can be used to collect and log\n * various performance data such as timespans, points and extras.\n * The loggers need to have minimal overhead since they're used in production.\n */\nexport default function createPerformanceLogger(): IPerformanceLogger {\n  return new PerformanceLogger();\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}