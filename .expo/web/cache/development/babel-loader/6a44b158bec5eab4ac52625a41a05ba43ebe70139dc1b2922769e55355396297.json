{"ast":null,"code":"import _defineProperty from \"@babel/runtime/helpers/defineProperty\";\nimport _objectWithoutProperties from \"@babel/runtime/helpers/objectWithoutProperties\";\nconst _excluded = [\"enabled\", \"colors\", \"progressBackgroundColor\", \"size\"],\n  _excluded2 = [\"tintColor\", \"titleColor\", \"title\"];\nvar _jsxFileName = \"/home/rodo/workspace/passion/apps/muh-money/node_modules/react-native/Libraries/Components/RefreshControl/RefreshControl.js\";\nfunction ownKeys(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }\nfunction _objectSpread(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? ownKeys(Object(t), !0).forEach(function (r) { _defineProperty(e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; }\nimport AndroidSwipeRefreshLayoutNativeComponent, { Commands as AndroidSwipeRefreshLayoutCommands } from './AndroidSwipeRefreshLayoutNativeComponent';\nimport PullToRefreshViewNativeComponent, { Commands as PullToRefreshCommands } from './PullToRefreshViewNativeComponent';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst Platform = require('../../Utilities/Platform');\nconst React = require('react');\nclass RefreshControl extends React.Component {\n  _lastNativeRefreshing = false;\n  componentDidMount() {\n    this._lastNativeRefreshing = this.props.refreshing;\n  }\n  componentDidUpdate(prevProps) {\n    if (this.props.refreshing !== prevProps.refreshing) {\n      this._lastNativeRefreshing = this.props.refreshing;\n    } else if (this.props.refreshing !== this._lastNativeRefreshing && this._nativeRef) {\n      if (Platform.OS === 'android') {\n        AndroidSwipeRefreshLayoutCommands.setNativeRefreshing(this._nativeRef, this.props.refreshing);\n      } else {\n        PullToRefreshCommands.setNativeRefreshing(this._nativeRef, this.props.refreshing);\n      }\n      this._lastNativeRefreshing = this.props.refreshing;\n    }\n  }\n  render() {\n    if (Platform.OS === 'ios') {\n      const _this$props = this.props,\n        {\n          enabled,\n          colors,\n          progressBackgroundColor,\n          size\n        } = _this$props,\n        props = _objectWithoutProperties(_this$props, _excluded);\n      return _jsxDEV(PullToRefreshViewNativeComponent, _objectSpread(_objectSpread({}, props), {}, {\n        ref: this._setNativeRef,\n        onRefresh: this._onRefresh\n      }), void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 165,\n        columnNumber: 9\n      }, this);\n    } else {\n      const _this$props2 = this.props,\n        {\n          tintColor,\n          titleColor,\n          title\n        } = _this$props2,\n        props = _objectWithoutProperties(_this$props2, _excluded2);\n      return _jsxDEV(AndroidSwipeRefreshLayoutNativeComponent, _objectSpread(_objectSpread({}, props), {}, {\n        ref: this._setNativeRef,\n        onRefresh: this._onRefresh\n      }), void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 174,\n        columnNumber: 9\n      }, this);\n    }\n  }\n  _onRefresh = () => {\n    this._lastNativeRefreshing = true;\n    this.props.onRefresh && this.props.onRefresh();\n    this.forceUpdate();\n  };\n  _setNativeRef = ref => {\n    this._nativeRef = ref;\n  };\n}\nmodule.exports = RefreshControl;","map":{"version":3,"names":["AndroidSwipeRefreshLayoutNativeComponent","Commands","AndroidSwipeRefreshLayoutCommands","PullToRefreshViewNativeComponent","PullToRefreshCommands","jsxDEV","_jsxDEV","Platform","require","React","RefreshControl","Component","_lastNativeRefreshing","componentDidMount","props","refreshing","componentDidUpdate","prevProps","_nativeRef","OS","setNativeRefreshing","render","_this$props","enabled","colors","progressBackgroundColor","size","_objectWithoutProperties","_excluded","_objectSpread","ref","_setNativeRef","onRefresh","_onRefresh","fileName","_jsxFileName","lineNumber","columnNumber","_this$props2","tintColor","titleColor","title","_excluded2","forceUpdate","module","exports"],"sources":["/home/rodo/workspace/passion/apps/muh-money/node_modules/react-native/Libraries/Components/RefreshControl/RefreshControl.js"],"sourcesContent":["/**\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @format\n * @flow strict-local\n */\n\nimport type {ColorValue} from '../../StyleSheet/StyleSheet';\nimport type {ViewProps} from '../View/ViewPropTypes';\n\nimport AndroidSwipeRefreshLayoutNativeComponent, {\n  Commands as AndroidSwipeRefreshLayoutCommands,\n} from './AndroidSwipeRefreshLayoutNativeComponent';\nimport PullToRefreshViewNativeComponent, {\n  Commands as PullToRefreshCommands,\n} from './PullToRefreshViewNativeComponent';\n\nconst Platform = require('../../Utilities/Platform');\nconst React = require('react');\n\ntype IOSProps = $ReadOnly<{|\n  /**\n   * The color of the refresh indicator.\n   */\n  tintColor?: ?ColorValue,\n  /**\n   * Title color.\n   */\n  titleColor?: ?ColorValue,\n  /**\n   * The title displayed under the refresh indicator.\n   */\n  title?: ?string,\n|}>;\n\ntype AndroidProps = $ReadOnly<{|\n  /**\n   * Whether the pull to refresh functionality is enabled.\n   */\n  enabled?: ?boolean,\n  /**\n   * The colors (at least one) that will be used to draw the refresh indicator.\n   */\n  colors?: ?$ReadOnlyArray<ColorValue>,\n  /**\n   * The background color of the refresh indicator.\n   */\n  progressBackgroundColor?: ?ColorValue,\n  /**\n   * Size of the refresh indicator.\n   */\n  size?: ?('default' | 'large'),\n|}>;\n\nexport type RefreshControlProps = $ReadOnly<{|\n  ...ViewProps,\n  ...IOSProps,\n  ...AndroidProps,\n\n  /**\n   * Called when the view starts refreshing.\n   */\n  onRefresh?: ?() => void | Promise<void>,\n\n  /**\n   * Whether the view should be indicating an active refresh.\n   */\n  refreshing: boolean,\n\n  /**\n   * Progress view top offset\n   */\n  progressViewOffset?: ?number,\n|}>;\n\n/**\n * This component is used inside a ScrollView or ListView to add pull to refresh\n * functionality. When the ScrollView is at `scrollY: 0`, swiping down\n * triggers an `onRefresh` event.\n *\n * ### Usage example\n *\n * ``` js\n * class RefreshableList extends Component {\n *   constructor(props) {\n *     super(props);\n *     this.state = {\n *       refreshing: false,\n *     };\n *   }\n *\n *   _onRefresh() {\n *     this.setState({refreshing: true});\n *     fetchData().then(() => {\n *       this.setState({refreshing: false});\n *     });\n *   }\n *\n *   render() {\n *     return (\n *       <ListView\n *         refreshControl={\n *           <RefreshControl\n *             refreshing={this.state.refreshing}\n *             onRefresh={this._onRefresh.bind(this)}\n *           />\n *         }\n *         ...\n *       >\n *       ...\n *       </ListView>\n *     );\n *   }\n *   ...\n * }\n * ```\n *\n * __Note:__ `refreshing` is a controlled prop, this is why it needs to be set to true\n * in the `onRefresh` function otherwise the refresh indicator will stop immediately.\n */\nclass RefreshControl extends React.Component<RefreshControlProps> {\n  _nativeRef: ?React.ElementRef<\n    | typeof PullToRefreshViewNativeComponent\n    | typeof AndroidSwipeRefreshLayoutNativeComponent,\n  >;\n  _lastNativeRefreshing = false;\n\n  componentDidMount() {\n    this._lastNativeRefreshing = this.props.refreshing;\n  }\n\n  componentDidUpdate(prevProps: RefreshControlProps) {\n    // RefreshControl is a controlled component so if the native refreshing\n    // value doesn't match the current js refreshing prop update it to\n    // the js value.\n    if (this.props.refreshing !== prevProps.refreshing) {\n      this._lastNativeRefreshing = this.props.refreshing;\n    } else if (\n      this.props.refreshing !== this._lastNativeRefreshing &&\n      this._nativeRef\n    ) {\n      if (Platform.OS === 'android') {\n        AndroidSwipeRefreshLayoutCommands.setNativeRefreshing(\n          this._nativeRef,\n          this.props.refreshing,\n        );\n      } else {\n        PullToRefreshCommands.setNativeRefreshing(\n          this._nativeRef,\n          this.props.refreshing,\n        );\n      }\n      this._lastNativeRefreshing = this.props.refreshing;\n    }\n  }\n\n  render(): React.Node {\n    if (Platform.OS === 'ios') {\n      const {enabled, colors, progressBackgroundColor, size, ...props} =\n        this.props;\n      return (\n        <PullToRefreshViewNativeComponent\n          {...props}\n          ref={this._setNativeRef}\n          onRefresh={this._onRefresh}\n        />\n      );\n    } else {\n      const {tintColor, titleColor, title, ...props} = this.props;\n      return (\n        <AndroidSwipeRefreshLayoutNativeComponent\n          {...props}\n          ref={this._setNativeRef}\n          onRefresh={this._onRefresh}\n        />\n      );\n    }\n  }\n\n  _onRefresh = () => {\n    this._lastNativeRefreshing = true;\n\n    // $FlowFixMe[unused-promise]\n    this.props.onRefresh && this.props.onRefresh();\n\n    // The native component will start refreshing so force an update to\n    // make sure it stays in sync with the js component.\n    this.forceUpdate();\n  };\n\n  _setNativeRef = (\n    ref: ?React.ElementRef<\n      | typeof PullToRefreshViewNativeComponent\n      | typeof AndroidSwipeRefreshLayoutNativeComponent,\n    >,\n  ) => {\n    this._nativeRef = ref;\n  };\n}\n\nmodule.exports = RefreshControl;\n"],"mappings":";;;;;;;AAaA,OAAOA,wCAAwC,IAC7CC,QAAQ,IAAIC,iCAAiC,QACxC,4CAA4C;AACnD,OAAOC,gCAAgC,IACrCF,QAAQ,IAAIG,qBAAqB,QAC5B,oCAAoC;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAE5C,MAAMC,QAAQ,GAAGC,OAAO,CAAC,0BAA0B,CAAC;AACpD,MAAMC,KAAK,GAAGD,OAAO,CAAC,OAAO,CAAC;AAsG9B,MAAME,cAAc,SAASD,KAAK,CAACE,SAAS,CAAsB;EAKhEC,qBAAqB,GAAG,KAAK;EAE7BC,iBAAiBA,CAAA,EAAG;IAClB,IAAI,CAACD,qBAAqB,GAAG,IAAI,CAACE,KAAK,CAACC,UAAU;EACpD;EAEAC,kBAAkBA,CAACC,SAA8B,EAAE;IAIjD,IAAI,IAAI,CAACH,KAAK,CAACC,UAAU,KAAKE,SAAS,CAACF,UAAU,EAAE;MAClD,IAAI,CAACH,qBAAqB,GAAG,IAAI,CAACE,KAAK,CAACC,UAAU;IACpD,CAAC,MAAM,IACL,IAAI,CAACD,KAAK,CAACC,UAAU,KAAK,IAAI,CAACH,qBAAqB,IACpD,IAAI,CAACM,UAAU,EACf;MACA,IAAIX,QAAQ,CAACY,EAAE,KAAK,SAAS,EAAE;QAC7BjB,iCAAiC,CAACkB,mBAAmB,CACnD,IAAI,CAACF,UAAU,EACf,IAAI,CAACJ,KAAK,CAACC,UACb,CAAC;MACH,CAAC,MAAM;QACLX,qBAAqB,CAACgB,mBAAmB,CACvC,IAAI,CAACF,UAAU,EACf,IAAI,CAACJ,KAAK,CAACC,UACb,CAAC;MACH;MACA,IAAI,CAACH,qBAAqB,GAAG,IAAI,CAACE,KAAK,CAACC,UAAU;IACpD;EACF;EAEAM,MAAMA,CAAA,EAAe;IACnB,IAAId,QAAQ,CAACY,EAAE,KAAK,KAAK,EAAE;MACzB,MAAAG,WAAA,GACE,IAAI,CAACR,KAAK;QADN;UAACS,OAAO;UAAEC,MAAM;UAAEC,uBAAuB;UAAEC;QAAc,CAAC,GAAAJ,WAAA;QAANR,KAAK,GAAAa,wBAAA,CAAAL,WAAA,EAAAM,SAAA;MAE/D,OACEtB,OAAA,CAACH,gCAAgC,EAAA0B,aAAA,CAAAA,aAAA,KAC3Bf,KAAK;QACTgB,GAAG,EAAE,IAAI,CAACC,aAAc;QACxBC,SAAS,EAAE,IAAI,CAACC;MAAW;QAAAC,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAC5B,CAAC;IAEN,CAAC,MAAM;MACL,MAAAC,YAAA,GAAiD,IAAI,CAACxB,KAAK;QAArD;UAACyB,SAAS;UAAEC,UAAU;UAAEC;QAAe,CAAC,GAAAH,YAAA;QAANxB,KAAK,GAAAa,wBAAA,CAAAW,YAAA,EAAAI,UAAA;MAC7C,OACEpC,OAAA,CAACN,wCAAwC,EAAA6B,aAAA,CAAAA,aAAA,KACnCf,KAAK;QACTgB,GAAG,EAAE,IAAI,CAACC,aAAc;QACxBC,SAAS,EAAE,IAAI,CAACC;MAAW;QAAAC,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAC5B,CAAC;IAEN;EACF;EAEAJ,UAAU,GAAGA,CAAA,KAAM;IACjB,IAAI,CAACrB,qBAAqB,GAAG,IAAI;IAGjC,IAAI,CAACE,KAAK,CAACkB,SAAS,IAAI,IAAI,CAAClB,KAAK,CAACkB,SAAS,CAAC,CAAC;IAI9C,IAAI,CAACW,WAAW,CAAC,CAAC;EACpB,CAAC;EAEDZ,aAAa,GACXD,GAGC,IACE;IACH,IAAI,CAACZ,UAAU,GAAGY,GAAG;EACvB,CAAC;AACH;AAEAc,MAAM,CAACC,OAAO,GAAGnC,cAAc","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}