{"ast":null,"code":"'use strict';\n\nimport invariant from 'invariant';\nexport const customBubblingEventTypes = {};\nexport const customDirectEventTypes = {};\nconst viewConfigCallbacks = new Map();\nconst viewConfigs = new Map();\nfunction processEventTypes(viewConfig) {\n  const {\n    bubblingEventTypes,\n    directEventTypes\n  } = viewConfig;\n  if (__DEV__) {\n    if (bubblingEventTypes != null && directEventTypes != null) {\n      for (const topLevelType in directEventTypes) {\n        invariant(bubblingEventTypes[topLevelType] == null, 'Event cannot be both direct and bubbling: %s', topLevelType);\n      }\n    }\n  }\n  if (bubblingEventTypes != null) {\n    for (const topLevelType in bubblingEventTypes) {\n      if (customBubblingEventTypes[topLevelType] == null) {\n        customBubblingEventTypes[topLevelType] = bubblingEventTypes[topLevelType];\n      }\n    }\n  }\n  if (directEventTypes != null) {\n    for (const topLevelType in directEventTypes) {\n      if (customDirectEventTypes[topLevelType] == null) {\n        customDirectEventTypes[topLevelType] = directEventTypes[topLevelType];\n      }\n    }\n  }\n}\nexport function register(name, callback) {\n  invariant(!viewConfigCallbacks.has(name), 'Tried to register two views with the same name %s', name);\n  invariant(typeof callback === 'function', 'View config getter callback for component `%s` must be a function (received `%s`)', name, callback === null ? 'null' : typeof callback);\n  viewConfigCallbacks.set(name, callback);\n  return name;\n}\nexport function get(name) {\n  let viewConfig;\n  if (!viewConfigs.has(name)) {\n    const callback = viewConfigCallbacks.get(name);\n    if (typeof callback !== 'function') {\n      invariant(false, 'View config getter callback for component `%s` must be a function (received `%s`).%s', name, callback === null ? 'null' : typeof callback, typeof name[0] === 'string' && /[a-z]/.test(name[0]) ? ' Make sure to start component names with a capital letter.' : '');\n    }\n    viewConfig = callback();\n    processEventTypes(viewConfig);\n    viewConfigs.set(name, viewConfig);\n    viewConfigCallbacks.set(name, null);\n  } else {\n    viewConfig = viewConfigs.get(name);\n  }\n  invariant(viewConfig, 'View config not found for name %s', name);\n  return viewConfig;\n}","map":{"version":3,"names":["invariant","customBubblingEventTypes","customDirectEventTypes","viewConfigCallbacks","Map","viewConfigs","processEventTypes","viewConfig","bubblingEventTypes","directEventTypes","__DEV__","topLevelType","register","name","callback","has","set","get","test"],"sources":["/home/rodo/workspace/passion/apps/muh-money/node_modules/react-native/Libraries/Renderer/shims/ReactNativeViewConfigRegistry.js"],"sourcesContent":["/**\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @noformat\n * @flow strict-local\n * @nolint\n * @generated SignedSource<<73af5b3fe29d226634ed64bc861634df>>\n */\n\n'use strict';\n\nimport {type ViewConfig} from './ReactNativeTypes';\nimport invariant from 'invariant';\n\n// Event configs\nexport const customBubblingEventTypes: {\n  [eventName: string]: $ReadOnly<{\n    phasedRegistrationNames: $ReadOnly<{\n      captured: string,\n      bubbled: string,\n      skipBubbling?: ?boolean,\n    }>,\n  }>,\n} = {};\nexport const customDirectEventTypes: {\n  [eventName: string]: $ReadOnly<{\n    registrationName: string,\n  }>,\n} = {};\n\nconst viewConfigCallbacks = new Map<string, ?() => ViewConfig>();\nconst viewConfigs = new Map<string, ViewConfig>();\n\nfunction processEventTypes(viewConfig: ViewConfig): void {\n  const {bubblingEventTypes, directEventTypes} = viewConfig;\n\n  if (__DEV__) {\n    if (bubblingEventTypes != null && directEventTypes != null) {\n      for (const topLevelType in directEventTypes) {\n        invariant(\n          bubblingEventTypes[topLevelType] == null,\n          'Event cannot be both direct and bubbling: %s',\n          topLevelType,\n        );\n      }\n    }\n  }\n\n  if (bubblingEventTypes != null) {\n    for (const topLevelType in bubblingEventTypes) {\n      if (customBubblingEventTypes[topLevelType] == null) {\n        customBubblingEventTypes[topLevelType] =\n          bubblingEventTypes[topLevelType];\n      }\n    }\n  }\n\n  if (directEventTypes != null) {\n    for (const topLevelType in directEventTypes) {\n      if (customDirectEventTypes[topLevelType] == null) {\n        customDirectEventTypes[topLevelType] = directEventTypes[topLevelType];\n      }\n    }\n  }\n}\n\n/**\n * Registers a native view/component by name.\n * A callback is provided to load the view config from UIManager.\n * The callback is deferred until the view is actually rendered.\n */\nexport function register(name: string, callback: () => ViewConfig): string {\n  invariant(\n    !viewConfigCallbacks.has(name),\n    'Tried to register two views with the same name %s',\n    name,\n  );\n  invariant(\n    typeof callback === 'function',\n    'View config getter callback for component `%s` must be a function (received `%s`)',\n    name,\n    callback === null ? 'null' : typeof callback,\n  );\n  viewConfigCallbacks.set(name, callback);\n  return name;\n}\n\n/**\n * Retrieves a config for the specified view.\n * If this is the first time the view has been used,\n * This configuration will be lazy-loaded from UIManager.\n */\nexport function get(name: string): ViewConfig {\n  let viewConfig;\n  if (!viewConfigs.has(name)) {\n    const callback = viewConfigCallbacks.get(name);\n    if (typeof callback !== 'function') {\n      invariant(\n        false,\n        'View config getter callback for component `%s` must be a function (received `%s`).%s',\n        name,\n        callback === null ? 'null' : typeof callback,\n        // $FlowFixMe[recursive-definition]\n        typeof name[0] === 'string' && /[a-z]/.test(name[0])\n          ? ' Make sure to start component names with a capital letter.'\n          : '',\n      );\n    }\n    viewConfig = callback();\n    processEventTypes(viewConfig);\n    viewConfigs.set(name, viewConfig);\n\n    // Clear the callback after the config is set so that\n    // we don't mask any errors during registration.\n    viewConfigCallbacks.set(name, null);\n  } else {\n    viewConfig = viewConfigs.get(name);\n  }\n  invariant(viewConfig, 'View config not found for name %s', name);\n  return viewConfig;\n}\n"],"mappings":"AAYA,YAAY;;AAGZ,OAAOA,SAAS,MAAM,WAAW;AAGjC,OAAO,MAAMC,wBAQZ,GAAG,CAAC,CAAC;AACN,OAAO,MAAMC,sBAIZ,GAAG,CAAC,CAAC;AAEN,MAAMC,mBAAmB,GAAG,IAAIC,GAAG,CAA4B,CAAC;AAChE,MAAMC,WAAW,GAAG,IAAID,GAAG,CAAqB,CAAC;AAEjD,SAASE,iBAAiBA,CAACC,UAAsB,EAAQ;EACvD,MAAM;IAACC,kBAAkB;IAAEC;EAAgB,CAAC,GAAGF,UAAU;EAEzD,IAAIG,OAAO,EAAE;IACX,IAAIF,kBAAkB,IAAI,IAAI,IAAIC,gBAAgB,IAAI,IAAI,EAAE;MAC1D,KAAK,MAAME,YAAY,IAAIF,gBAAgB,EAAE;QAC3CT,SAAS,CACPQ,kBAAkB,CAACG,YAAY,CAAC,IAAI,IAAI,EACxC,8CAA8C,EAC9CA,YACF,CAAC;MACH;IACF;EACF;EAEA,IAAIH,kBAAkB,IAAI,IAAI,EAAE;IAC9B,KAAK,MAAMG,YAAY,IAAIH,kBAAkB,EAAE;MAC7C,IAAIP,wBAAwB,CAACU,YAAY,CAAC,IAAI,IAAI,EAAE;QAClDV,wBAAwB,CAACU,YAAY,CAAC,GACpCH,kBAAkB,CAACG,YAAY,CAAC;MACpC;IACF;EACF;EAEA,IAAIF,gBAAgB,IAAI,IAAI,EAAE;IAC5B,KAAK,MAAME,YAAY,IAAIF,gBAAgB,EAAE;MAC3C,IAAIP,sBAAsB,CAACS,YAAY,CAAC,IAAI,IAAI,EAAE;QAChDT,sBAAsB,CAACS,YAAY,CAAC,GAAGF,gBAAgB,CAACE,YAAY,CAAC;MACvE;IACF;EACF;AACF;AAOA,OAAO,SAASC,QAAQA,CAACC,IAAY,EAAEC,QAA0B,EAAU;EACzEd,SAAS,CACP,CAACG,mBAAmB,CAACY,GAAG,CAACF,IAAI,CAAC,EAC9B,mDAAmD,EACnDA,IACF,CAAC;EACDb,SAAS,CACP,OAAOc,QAAQ,KAAK,UAAU,EAC9B,mFAAmF,EACnFD,IAAI,EACJC,QAAQ,KAAK,IAAI,GAAG,MAAM,GAAG,OAAOA,QACtC,CAAC;EACDX,mBAAmB,CAACa,GAAG,CAACH,IAAI,EAAEC,QAAQ,CAAC;EACvC,OAAOD,IAAI;AACb;AAOA,OAAO,SAASI,GAAGA,CAACJ,IAAY,EAAc;EAC5C,IAAIN,UAAU;EACd,IAAI,CAACF,WAAW,CAACU,GAAG,CAACF,IAAI,CAAC,EAAE;IAC1B,MAAMC,QAAQ,GAAGX,mBAAmB,CAACc,GAAG,CAACJ,IAAI,CAAC;IAC9C,IAAI,OAAOC,QAAQ,KAAK,UAAU,EAAE;MAClCd,SAAS,CACP,KAAK,EACL,sFAAsF,EACtFa,IAAI,EACJC,QAAQ,KAAK,IAAI,GAAG,MAAM,GAAG,OAAOA,QAAQ,EAE5C,OAAOD,IAAI,CAAC,CAAC,CAAC,KAAK,QAAQ,IAAI,OAAO,CAACK,IAAI,CAACL,IAAI,CAAC,CAAC,CAAC,CAAC,GAChD,4DAA4D,GAC5D,EACN,CAAC;IACH;IACAN,UAAU,GAAGO,QAAQ,CAAC,CAAC;IACvBR,iBAAiB,CAACC,UAAU,CAAC;IAC7BF,WAAW,CAACW,GAAG,CAACH,IAAI,EAAEN,UAAU,CAAC;IAIjCJ,mBAAmB,CAACa,GAAG,CAACH,IAAI,EAAE,IAAI,CAAC;EACrC,CAAC,MAAM;IACLN,UAAU,GAAGF,WAAW,CAACY,GAAG,CAACJ,IAAI,CAAC;EACpC;EACAb,SAAS,CAACO,UAAU,EAAE,mCAAmC,EAAEM,IAAI,CAAC;EAChE,OAAON,UAAU;AACnB","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}