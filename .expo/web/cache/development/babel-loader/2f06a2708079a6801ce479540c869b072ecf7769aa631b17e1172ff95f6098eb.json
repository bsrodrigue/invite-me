{"ast":null,"code":"'use strict';\n\nconst PixelRatio = require('../Utilities/PixelRatio').default;\nconst Platform = require('../Utilities/Platform');\nconst {\n  pickScale\n} = require('./AssetUtils');\nconst {\n  getAndroidResourceFolderName,\n  getAndroidResourceIdentifier,\n  getBasePath\n} = require('@react-native/assets-registry/path-support');\nconst invariant = require('invariant');\nfunction getScaledAssetPath(asset) {\n  const scale = pickScale(asset.scales, PixelRatio.get());\n  const scaleSuffix = scale === 1 ? '' : '@' + scale + 'x';\n  const assetDir = getBasePath(asset);\n  return assetDir + '/' + asset.name + scaleSuffix + '.' + asset.type;\n}\nfunction getAssetPathInDrawableFolder(asset) {\n  const scale = pickScale(asset.scales, PixelRatio.get());\n  const drawableFolder = getAndroidResourceFolderName(asset, scale);\n  const fileName = getAndroidResourceIdentifier(asset);\n  return drawableFolder + '/' + fileName + '.' + asset.type;\n}\nclass AssetSourceResolver {\n  constructor(serverUrl, jsbundleUrl, asset) {\n    this.serverUrl = serverUrl;\n    this.jsbundleUrl = jsbundleUrl;\n    this.asset = asset;\n  }\n  isLoadedFromServer() {\n    return !!this.serverUrl;\n  }\n  isLoadedFromFileSystem() {\n    return this.jsbundleUrl != null && this.jsbundleUrl?.startsWith('file://');\n  }\n  defaultAsset() {\n    if (this.isLoadedFromServer()) {\n      return this.assetServerURL();\n    }\n    if (Platform.OS === 'android') {\n      return this.isLoadedFromFileSystem() ? this.drawableFolderInBundle() : this.resourceIdentifierWithoutScale();\n    } else {\n      return this.scaledAssetURLNearBundle();\n    }\n  }\n  assetServerURL() {\n    invariant(this.serverUrl != null, 'need server to load from');\n    return this.fromSource(this.serverUrl + getScaledAssetPath(this.asset) + '?platform=' + Platform.OS + '&hash=' + this.asset.hash);\n  }\n  scaledAssetPath() {\n    return this.fromSource(getScaledAssetPath(this.asset));\n  }\n  scaledAssetURLNearBundle() {\n    const path = this.jsbundleUrl ?? 'file://';\n    return this.fromSource(path + getScaledAssetPath(this.asset).replace(/\\.\\.\\//g, '_'));\n  }\n  resourceIdentifierWithoutScale() {\n    invariant(Platform.OS === 'android', 'resource identifiers work on Android');\n    return this.fromSource(getAndroidResourceIdentifier(this.asset));\n  }\n  drawableFolderInBundle() {\n    const path = this.jsbundleUrl ?? 'file://';\n    return this.fromSource(path + getAssetPathInDrawableFolder(this.asset));\n  }\n  fromSource(source) {\n    return {\n      __packager_asset: true,\n      width: this.asset.width,\n      height: this.asset.height,\n      uri: source,\n      scale: pickScale(this.asset.scales, PixelRatio.get())\n    };\n  }\n  static pickScale = pickScale;\n}\nmodule.exports = AssetSourceResolver;","map":{"version":3,"names":["PixelRatio","require","default","Platform","pickScale","getAndroidResourceFolderName","getAndroidResourceIdentifier","getBasePath","invariant","getScaledAssetPath","asset","scale","scales","get","scaleSuffix","assetDir","name","type","getAssetPathInDrawableFolder","drawableFolder","fileName","AssetSourceResolver","constructor","serverUrl","jsbundleUrl","isLoadedFromServer","isLoadedFromFileSystem","startsWith","defaultAsset","assetServerURL","OS","drawableFolderInBundle","resourceIdentifierWithoutScale","scaledAssetURLNearBundle","fromSource","hash","scaledAssetPath","path","replace","source","__packager_asset","width","height","uri","module","exports"],"sources":["/home/rodo/workspace/passion/apps/muh-money/node_modules/react-native/Libraries/Image/AssetSourceResolver.js"],"sourcesContent":["/**\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @flow strict-local\n * @format\n */\n\n'use strict';\n\nexport type ResolvedAssetSource = {|\n  +__packager_asset: boolean,\n  +width: ?number,\n  +height: ?number,\n  +uri: string,\n  +scale: number,\n|};\n\nimport type {PackagerAsset} from '@react-native/assets-registry/registry';\n\nconst PixelRatio = require('../Utilities/PixelRatio').default;\nconst Platform = require('../Utilities/Platform');\nconst {pickScale} = require('./AssetUtils');\nconst {\n  getAndroidResourceFolderName,\n  getAndroidResourceIdentifier,\n  getBasePath,\n} = require('@react-native/assets-registry/path-support');\nconst invariant = require('invariant');\n\n/**\n * Returns a path like 'assets/AwesomeModule/icon@2x.png'\n */\nfunction getScaledAssetPath(asset: PackagerAsset): string {\n  const scale = pickScale(asset.scales, PixelRatio.get());\n  const scaleSuffix = scale === 1 ? '' : '@' + scale + 'x';\n  const assetDir = getBasePath(asset);\n  return assetDir + '/' + asset.name + scaleSuffix + '.' + asset.type;\n}\n\n/**\n * Returns a path like 'drawable-mdpi/icon.png'\n */\nfunction getAssetPathInDrawableFolder(asset: PackagerAsset): string {\n  const scale = pickScale(asset.scales, PixelRatio.get());\n  const drawableFolder = getAndroidResourceFolderName(asset, scale);\n  const fileName = getAndroidResourceIdentifier(asset);\n  return drawableFolder + '/' + fileName + '.' + asset.type;\n}\n\nclass AssetSourceResolver {\n  serverUrl: ?string;\n  // where the jsbundle is being run from\n  jsbundleUrl: ?string;\n  // the asset to resolve\n  asset: PackagerAsset;\n\n  constructor(serverUrl: ?string, jsbundleUrl: ?string, asset: PackagerAsset) {\n    this.serverUrl = serverUrl;\n    this.jsbundleUrl = jsbundleUrl;\n    this.asset = asset;\n  }\n\n  isLoadedFromServer(): boolean {\n    return !!this.serverUrl;\n  }\n\n  isLoadedFromFileSystem(): boolean {\n    return this.jsbundleUrl != null && this.jsbundleUrl?.startsWith('file://');\n  }\n\n  defaultAsset(): ResolvedAssetSource {\n    if (this.isLoadedFromServer()) {\n      return this.assetServerURL();\n    }\n\n    if (Platform.OS === 'android') {\n      return this.isLoadedFromFileSystem()\n        ? this.drawableFolderInBundle()\n        : this.resourceIdentifierWithoutScale();\n    } else {\n      return this.scaledAssetURLNearBundle();\n    }\n  }\n\n  /**\n   * Returns an absolute URL which can be used to fetch the asset\n   * from the devserver\n   */\n  assetServerURL(): ResolvedAssetSource {\n    invariant(this.serverUrl != null, 'need server to load from');\n    return this.fromSource(\n      this.serverUrl +\n        getScaledAssetPath(this.asset) +\n        '?platform=' +\n        Platform.OS +\n        '&hash=' +\n        this.asset.hash,\n    );\n  }\n\n  /**\n   * Resolves to just the scaled asset filename\n   * E.g. 'assets/AwesomeModule/icon@2x.png'\n   */\n  scaledAssetPath(): ResolvedAssetSource {\n    return this.fromSource(getScaledAssetPath(this.asset));\n  }\n\n  /**\n   * Resolves to where the bundle is running from, with a scaled asset filename\n   * E.g. 'file:///sdcard/bundle/assets/AwesomeModule/icon@2x.png'\n   */\n  scaledAssetURLNearBundle(): ResolvedAssetSource {\n    const path = this.jsbundleUrl ?? 'file://';\n    return this.fromSource(\n      // Assets can have relative paths outside of the project root.\n      // When bundling them we replace `../` with `_` to make sure they\n      // don't end up outside of the expected assets directory.\n      path + getScaledAssetPath(this.asset).replace(/\\.\\.\\//g, '_'),\n    );\n  }\n\n  /**\n   * The default location of assets bundled with the app, located by\n   * resource identifier\n   * The Android resource system picks the correct scale.\n   * E.g. 'assets_awesomemodule_icon'\n   */\n  resourceIdentifierWithoutScale(): ResolvedAssetSource {\n    invariant(\n      Platform.OS === 'android',\n      'resource identifiers work on Android',\n    );\n    return this.fromSource(getAndroidResourceIdentifier(this.asset));\n  }\n\n  /**\n   * If the jsbundle is running from a sideload location, this resolves assets\n   * relative to its location\n   * E.g. 'file:///sdcard/AwesomeModule/drawable-mdpi/icon.png'\n   */\n  drawableFolderInBundle(): ResolvedAssetSource {\n    const path = this.jsbundleUrl ?? 'file://';\n    return this.fromSource(path + getAssetPathInDrawableFolder(this.asset));\n  }\n\n  fromSource(source: string): ResolvedAssetSource {\n    return {\n      __packager_asset: true,\n      width: this.asset.width,\n      height: this.asset.height,\n      uri: source,\n      scale: pickScale(this.asset.scales, PixelRatio.get()),\n    };\n  }\n\n  static pickScale: (scales: Array<number>, deviceScale?: number) => number =\n    pickScale;\n}\n\nmodule.exports = AssetSourceResolver;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}