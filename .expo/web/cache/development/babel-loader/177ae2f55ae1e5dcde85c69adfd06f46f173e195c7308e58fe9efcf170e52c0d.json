{"ast":null,"code":"import { keyExtractor as defaultKeyExtractor } from './VirtualizeUtils';\nimport invariant from 'invariant';\nexport default class ListMetricsAggregator {\n  _averageCellLength = 0;\n  _cellMetrics = new Map();\n  _highestMeasuredCellIndex = 0;\n  _measuredCellsLength = 0;\n  _measuredCellsCount = 0;\n  _orientation = {\n    horizontal: false,\n    rtl: false\n  };\n  notifyCellLayout({\n    cellIndex,\n    cellKey,\n    orientation,\n    layout\n  }) {\n    this._invalidateIfOrientationChanged(orientation);\n    const next = {\n      index: cellIndex,\n      length: this._selectLength(layout),\n      isMounted: true,\n      offset: this.flowRelativeOffset(layout)\n    };\n    const curr = this._cellMetrics.get(cellKey);\n    if (!curr || next.offset !== curr.offset || next.length !== curr.length) {\n      if (curr) {\n        const dLength = next.length - curr.length;\n        this._measuredCellsLength += dLength;\n      } else {\n        this._measuredCellsLength += next.length;\n        this._measuredCellsCount += 1;\n      }\n      this._averageCellLength = this._measuredCellsLength / this._measuredCellsCount;\n      this._cellMetrics.set(cellKey, next);\n      this._highestMeasuredCellIndex = Math.max(this._highestMeasuredCellIndex, cellIndex);\n      return true;\n    } else {\n      curr.isMounted = true;\n      return false;\n    }\n  }\n  notifyCellUnmounted(cellKey) {\n    const curr = this._cellMetrics.get(cellKey);\n    if (curr) {\n      curr.isMounted = false;\n    }\n  }\n  notifyListContentLayout({\n    orientation,\n    layout\n  }) {\n    this._invalidateIfOrientationChanged(orientation);\n    this._contentLength = this._selectLength(layout);\n  }\n  getAverageCellLength() {\n    return this._averageCellLength;\n  }\n  getHighestMeasuredCellIndex() {\n    return this._highestMeasuredCellIndex;\n  }\n  getCellMetricsApprox(index, props) {\n    const frame = this.getCellMetrics(index, props);\n    if (frame && frame.index === index) {\n      return frame;\n    } else {\n      const {\n        data,\n        getItemCount\n      } = props;\n      invariant(index >= 0 && index < getItemCount(data), 'Tried to get frame for out of range index ' + index);\n      return {\n        length: this._averageCellLength,\n        offset: this._averageCellLength * index,\n        index,\n        isMounted: false\n      };\n    }\n  }\n  getCellMetrics(index, props) {\n    const {\n      data,\n      getItem,\n      getItemCount,\n      getItemLayout\n    } = props;\n    invariant(index >= 0 && index < getItemCount(data), 'Tried to get metrics for out of range cell index ' + index);\n    const keyExtractor = props.keyExtractor ?? defaultKeyExtractor;\n    const frame = this._cellMetrics.get(keyExtractor(getItem(data, index), index));\n    if (frame && frame.index === index) {\n      return frame;\n    }\n    if (getItemLayout) {\n      const {\n        length,\n        offset\n      } = getItemLayout(data, index);\n      return {\n        index,\n        length,\n        offset,\n        isMounted: true\n      };\n    }\n    return null;\n  }\n  getCellOffsetApprox(index, props) {\n    if (Number.isInteger(index)) {\n      return this.getCellMetricsApprox(index, props).offset;\n    } else {\n      const frameMetrics = this.getCellMetricsApprox(Math.floor(index), props);\n      const remainder = index - Math.floor(index);\n      return frameMetrics.offset + remainder * frameMetrics.length;\n    }\n  }\n  getContentLength() {\n    return this._contentLength ?? 0;\n  }\n  hasContentLength() {\n    return this._contentLength != null;\n  }\n  flowRelativeOffset(layout, referenceContentLength) {\n    const {\n      horizontal,\n      rtl\n    } = this._orientation;\n    if (horizontal && rtl) {\n      const contentLength = referenceContentLength ?? this._contentLength;\n      invariant(contentLength != null, 'ListMetricsAggregator must be notified of list content layout before resolving offsets');\n      return contentLength - (this._selectOffset(layout) + this._selectLength(layout));\n    } else {\n      return this._selectOffset(layout);\n    }\n  }\n  cartesianOffset(flowRelativeOffset) {\n    const {\n      horizontal,\n      rtl\n    } = this._orientation;\n    if (horizontal && rtl) {\n      invariant(this._contentLength != null, 'ListMetricsAggregator must be notified of list content layout before resolving offsets');\n      return this._contentLength - flowRelativeOffset;\n    } else {\n      return flowRelativeOffset;\n    }\n  }\n  _invalidateIfOrientationChanged(orientation) {\n    if (orientation.rtl !== this._orientation.rtl) {\n      this._cellMetrics.clear();\n    }\n    if (orientation.horizontal !== this._orientation.horizontal) {\n      this._averageCellLength = 0;\n      this._highestMeasuredCellIndex = 0;\n      this._measuredCellsLength = 0;\n      this._measuredCellsCount = 0;\n    }\n    this._orientation = orientation;\n  }\n  _selectLength({\n    width,\n    height\n  }) {\n    return this._orientation.horizontal ? width : height;\n  }\n  _selectOffset({\n    x,\n    y\n  }) {\n    return this._orientation.horizontal ? x : y;\n  }\n}","map":{"version":3,"names":["keyExtractor","defaultKeyExtractor","invariant","ListMetricsAggregator","_averageCellLength","_cellMetrics","Map","_highestMeasuredCellIndex","_measuredCellsLength","_measuredCellsCount","_orientation","horizontal","rtl","notifyCellLayout","cellIndex","cellKey","orientation","layout","_invalidateIfOrientationChanged","next","index","length","_selectLength","isMounted","offset","flowRelativeOffset","curr","get","dLength","set","Math","max","notifyCellUnmounted","notifyListContentLayout","_contentLength","getAverageCellLength","getHighestMeasuredCellIndex","getCellMetricsApprox","props","frame","getCellMetrics","data","getItemCount","getItem","getItemLayout","getCellOffsetApprox","Number","isInteger","frameMetrics","floor","remainder","getContentLength","hasContentLength","referenceContentLength","contentLength","_selectOffset","cartesianOffset","clear","width","height","x","y"],"sources":["/home/rodo/workspace/passion/apps/muh-money/node_modules/@react-native/virtualized-lists/Lists/ListMetricsAggregator.js"],"sourcesContent":["/**\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @flow strict-local\n * @format\n */\n\nimport type {Props as VirtualizedListProps} from './VirtualizedListProps';\nimport type {Layout} from 'react-native/Libraries/Types/CoreEventTypes';\n\nimport {keyExtractor as defaultKeyExtractor} from './VirtualizeUtils';\nimport invariant from 'invariant';\n\nexport type CellMetrics = {\n  /**\n   * Index of the item in the list\n   */\n  index: number,\n  /**\n   * Length of the cell along the scrolling axis\n   */\n  length: number,\n  /**\n   * Distance between this cell and the start of the list along the scrolling\n   * axis\n   */\n  offset: number,\n  /**\n   * Whether the cell is last known to be mounted\n   */\n  isMounted: boolean,\n};\n\n// TODO: `inverted` can be incorporated here if it is moved to an order\n// based implementation instead of transform.\nexport type ListOrientation = {\n  horizontal: boolean,\n  rtl: boolean,\n};\n\n/**\n * Subset of VirtualizedList props needed to calculate cell metrics\n */\nexport type CellMetricProps = {\n  data: VirtualizedListProps['data'],\n  getItemCount: VirtualizedListProps['getItemCount'],\n  getItem: VirtualizedListProps['getItem'],\n  getItemLayout?: VirtualizedListProps['getItemLayout'],\n  keyExtractor?: VirtualizedListProps['keyExtractor'],\n  ...\n};\n\n/**\n * Provides an interface to query information about the metrics of a list and its cells.\n */\nexport default class ListMetricsAggregator {\n  _averageCellLength = 0;\n  _cellMetrics: Map<string, CellMetrics> = new Map();\n  _contentLength: ?number;\n  _highestMeasuredCellIndex = 0;\n  _measuredCellsLength = 0;\n  _measuredCellsCount = 0;\n  _orientation: ListOrientation = {\n    horizontal: false,\n    rtl: false,\n  };\n\n  /**\n   * Notify the ListMetricsAggregator that a cell has been laid out.\n   *\n   * @returns whether the cell layout has changed since last notification\n   */\n  notifyCellLayout({\n    cellIndex,\n    cellKey,\n    orientation,\n    layout,\n  }: {\n    cellIndex: number,\n    cellKey: string,\n    orientation: ListOrientation,\n    layout: Layout,\n  }): boolean {\n    this._invalidateIfOrientationChanged(orientation);\n\n    const next: CellMetrics = {\n      index: cellIndex,\n      length: this._selectLength(layout),\n      isMounted: true,\n      offset: this.flowRelativeOffset(layout),\n    };\n    const curr = this._cellMetrics.get(cellKey);\n\n    if (!curr || next.offset !== curr.offset || next.length !== curr.length) {\n      if (curr) {\n        const dLength = next.length - curr.length;\n        this._measuredCellsLength += dLength;\n      } else {\n        this._measuredCellsLength += next.length;\n        this._measuredCellsCount += 1;\n      }\n\n      this._averageCellLength =\n        this._measuredCellsLength / this._measuredCellsCount;\n      this._cellMetrics.set(cellKey, next);\n      this._highestMeasuredCellIndex = Math.max(\n        this._highestMeasuredCellIndex,\n        cellIndex,\n      );\n      return true;\n    } else {\n      curr.isMounted = true;\n      return false;\n    }\n  }\n\n  /**\n   * Notify ListMetricsAggregator that a cell has been unmounted.\n   */\n  notifyCellUnmounted(cellKey: string): void {\n    const curr = this._cellMetrics.get(cellKey);\n    if (curr) {\n      curr.isMounted = false;\n    }\n  }\n\n  /**\n   * Notify ListMetricsAggregator that the lists content container has been laid out.\n   */\n  notifyListContentLayout({\n    orientation,\n    layout,\n  }: {\n    orientation: ListOrientation,\n    layout: $ReadOnly<{width: number, height: number}>,\n  }): void {\n    this._invalidateIfOrientationChanged(orientation);\n    this._contentLength = this._selectLength(layout);\n  }\n\n  /**\n   * Return the average length of the cells which have been measured\n   */\n  getAverageCellLength(): number {\n    return this._averageCellLength;\n  }\n\n  /**\n   * Return the highest measured cell index (or 0 if nothing has been measured\n   * yet)\n   */\n  getHighestMeasuredCellIndex(): number {\n    return this._highestMeasuredCellIndex;\n  }\n\n  /**\n   * Returns the exact metrics of a cell if it has already been laid out,\n   * otherwise an estimate based on the average length of previously measured\n   * cells\n   */\n  getCellMetricsApprox(index: number, props: CellMetricProps): CellMetrics {\n    const frame = this.getCellMetrics(index, props);\n    if (frame && frame.index === index) {\n      // check for invalid frames due to row re-ordering\n      return frame;\n    } else {\n      const {data, getItemCount} = props;\n      invariant(\n        index >= 0 && index < getItemCount(data),\n        'Tried to get frame for out of range index ' + index,\n      );\n      return {\n        length: this._averageCellLength,\n        offset: this._averageCellLength * index,\n        index,\n        isMounted: false,\n      };\n    }\n  }\n\n  /**\n   * Returns the exact metrics of a cell if it has already been laid out\n   */\n  getCellMetrics(index: number, props: CellMetricProps): ?CellMetrics {\n    const {data, getItem, getItemCount, getItemLayout} = props;\n    invariant(\n      index >= 0 && index < getItemCount(data),\n      'Tried to get metrics for out of range cell index ' + index,\n    );\n    const keyExtractor = props.keyExtractor ?? defaultKeyExtractor;\n    const frame = this._cellMetrics.get(\n      keyExtractor(getItem(data, index), index),\n    );\n    if (frame && frame.index === index) {\n      return frame;\n    }\n\n    if (getItemLayout) {\n      const {length, offset} = getItemLayout(data, index);\n      // TODO: `isMounted` is used for both \"is exact layout\" and \"has been\n      // unmounted\". Should be refactored.\n      return {index, length, offset, isMounted: true};\n    }\n\n    return null;\n  }\n\n  /**\n   * Gets an approximate offset to an item at a given index. Supports\n   * fractional indices.\n   */\n  getCellOffsetApprox(index: number, props: CellMetricProps): number {\n    if (Number.isInteger(index)) {\n      return this.getCellMetricsApprox(index, props).offset;\n    } else {\n      const frameMetrics = this.getCellMetricsApprox(Math.floor(index), props);\n      const remainder = index - Math.floor(index);\n      return frameMetrics.offset + remainder * frameMetrics.length;\n    }\n  }\n\n  /**\n   * Returns the length of all ScrollView content along the scrolling axis.\n   */\n  getContentLength(): number {\n    return this._contentLength ?? 0;\n  }\n\n  /**\n   * Whether a content length has been observed\n   */\n  hasContentLength(): boolean {\n    return this._contentLength != null;\n  }\n\n  /**\n   * Finds the flow-relative offset (e.g. starting from the left in LTR, but\n   * right in RTL) from a layout box.\n   */\n  flowRelativeOffset(layout: Layout, referenceContentLength?: ?number): number {\n    const {horizontal, rtl} = this._orientation;\n\n    if (horizontal && rtl) {\n      const contentLength = referenceContentLength ?? this._contentLength;\n      invariant(\n        contentLength != null,\n        'ListMetricsAggregator must be notified of list content layout before resolving offsets',\n      );\n      return (\n        contentLength -\n        (this._selectOffset(layout) + this._selectLength(layout))\n      );\n    } else {\n      return this._selectOffset(layout);\n    }\n  }\n\n  /**\n   * Converts a flow-relative offset to a cartesian offset\n   */\n  cartesianOffset(flowRelativeOffset: number): number {\n    const {horizontal, rtl} = this._orientation;\n\n    if (horizontal && rtl) {\n      invariant(\n        this._contentLength != null,\n        'ListMetricsAggregator must be notified of list content layout before resolving offsets',\n      );\n      return this._contentLength - flowRelativeOffset;\n    } else {\n      return flowRelativeOffset;\n    }\n  }\n\n  _invalidateIfOrientationChanged(orientation: ListOrientation): void {\n    if (orientation.rtl !== this._orientation.rtl) {\n      this._cellMetrics.clear();\n    }\n\n    if (orientation.horizontal !== this._orientation.horizontal) {\n      this._averageCellLength = 0;\n      this._highestMeasuredCellIndex = 0;\n      this._measuredCellsLength = 0;\n      this._measuredCellsCount = 0;\n    }\n\n    this._orientation = orientation;\n  }\n\n  _selectLength({\n    width,\n    height,\n  }: $ReadOnly<{width: number, height: number, ...}>): number {\n    return this._orientation.horizontal ? width : height;\n  }\n\n  _selectOffset({x, y}: $ReadOnly<{x: number, y: number, ...}>): number {\n    return this._orientation.horizontal ? x : y;\n  }\n}\n"],"mappings":"AAaA,SAAQA,YAAY,IAAIC,mBAAmB,QAAO,mBAAmB;AACrE,OAAOC,SAAS,MAAM,WAAW;AA4CjC,eAAe,MAAMC,qBAAqB,CAAC;EACzCC,kBAAkB,GAAG,CAAC;EACtBC,YAAY,GAA6B,IAAIC,GAAG,CAAC,CAAC;EAElDC,yBAAyB,GAAG,CAAC;EAC7BC,oBAAoB,GAAG,CAAC;EACxBC,mBAAmB,GAAG,CAAC;EACvBC,YAAY,GAAoB;IAC9BC,UAAU,EAAE,KAAK;IACjBC,GAAG,EAAE;EACP,CAAC;EAODC,gBAAgBA,CAAC;IACfC,SAAS;IACTC,OAAO;IACPC,WAAW;IACXC;EAMF,CAAC,EAAW;IACV,IAAI,CAACC,+BAA+B,CAACF,WAAW,CAAC;IAEjD,MAAMG,IAAiB,GAAG;MACxBC,KAAK,EAAEN,SAAS;MAChBO,MAAM,EAAE,IAAI,CAACC,aAAa,CAACL,MAAM,CAAC;MAClCM,SAAS,EAAE,IAAI;MACfC,MAAM,EAAE,IAAI,CAACC,kBAAkB,CAACR,MAAM;IACxC,CAAC;IACD,MAAMS,IAAI,GAAG,IAAI,CAACrB,YAAY,CAACsB,GAAG,CAACZ,OAAO,CAAC;IAE3C,IAAI,CAACW,IAAI,IAAIP,IAAI,CAACK,MAAM,KAAKE,IAAI,CAACF,MAAM,IAAIL,IAAI,CAACE,MAAM,KAAKK,IAAI,CAACL,MAAM,EAAE;MACvE,IAAIK,IAAI,EAAE;QACR,MAAME,OAAO,GAAGT,IAAI,CAACE,MAAM,GAAGK,IAAI,CAACL,MAAM;QACzC,IAAI,CAACb,oBAAoB,IAAIoB,OAAO;MACtC,CAAC,MAAM;QACL,IAAI,CAACpB,oBAAoB,IAAIW,IAAI,CAACE,MAAM;QACxC,IAAI,CAACZ,mBAAmB,IAAI,CAAC;MAC/B;MAEA,IAAI,CAACL,kBAAkB,GACrB,IAAI,CAACI,oBAAoB,GAAG,IAAI,CAACC,mBAAmB;MACtD,IAAI,CAACJ,YAAY,CAACwB,GAAG,CAACd,OAAO,EAAEI,IAAI,CAAC;MACpC,IAAI,CAACZ,yBAAyB,GAAGuB,IAAI,CAACC,GAAG,CACvC,IAAI,CAACxB,yBAAyB,EAC9BO,SACF,CAAC;MACD,OAAO,IAAI;IACb,CAAC,MAAM;MACLY,IAAI,CAACH,SAAS,GAAG,IAAI;MACrB,OAAO,KAAK;IACd;EACF;EAKAS,mBAAmBA,CAACjB,OAAe,EAAQ;IACzC,MAAMW,IAAI,GAAG,IAAI,CAACrB,YAAY,CAACsB,GAAG,CAACZ,OAAO,CAAC;IAC3C,IAAIW,IAAI,EAAE;MACRA,IAAI,CAACH,SAAS,GAAG,KAAK;IACxB;EACF;EAKAU,uBAAuBA,CAAC;IACtBjB,WAAW;IACXC;EAIF,CAAC,EAAQ;IACP,IAAI,CAACC,+BAA+B,CAACF,WAAW,CAAC;IACjD,IAAI,CAACkB,cAAc,GAAG,IAAI,CAACZ,aAAa,CAACL,MAAM,CAAC;EAClD;EAKAkB,oBAAoBA,CAAA,EAAW;IAC7B,OAAO,IAAI,CAAC/B,kBAAkB;EAChC;EAMAgC,2BAA2BA,CAAA,EAAW;IACpC,OAAO,IAAI,CAAC7B,yBAAyB;EACvC;EAOA8B,oBAAoBA,CAACjB,KAAa,EAAEkB,KAAsB,EAAe;IACvE,MAAMC,KAAK,GAAG,IAAI,CAACC,cAAc,CAACpB,KAAK,EAAEkB,KAAK,CAAC;IAC/C,IAAIC,KAAK,IAAIA,KAAK,CAACnB,KAAK,KAAKA,KAAK,EAAE;MAElC,OAAOmB,KAAK;IACd,CAAC,MAAM;MACL,MAAM;QAACE,IAAI;QAAEC;MAAY,CAAC,GAAGJ,KAAK;MAClCpC,SAAS,CACPkB,KAAK,IAAI,CAAC,IAAIA,KAAK,GAAGsB,YAAY,CAACD,IAAI,CAAC,EACxC,4CAA4C,GAAGrB,KACjD,CAAC;MACD,OAAO;QACLC,MAAM,EAAE,IAAI,CAACjB,kBAAkB;QAC/BoB,MAAM,EAAE,IAAI,CAACpB,kBAAkB,GAAGgB,KAAK;QACvCA,KAAK;QACLG,SAAS,EAAE;MACb,CAAC;IACH;EACF;EAKAiB,cAAcA,CAACpB,KAAa,EAAEkB,KAAsB,EAAgB;IAClE,MAAM;MAACG,IAAI;MAAEE,OAAO;MAAED,YAAY;MAAEE;IAAa,CAAC,GAAGN,KAAK;IAC1DpC,SAAS,CACPkB,KAAK,IAAI,CAAC,IAAIA,KAAK,GAAGsB,YAAY,CAACD,IAAI,CAAC,EACxC,mDAAmD,GAAGrB,KACxD,CAAC;IACD,MAAMpB,YAAY,GAAGsC,KAAK,CAACtC,YAAY,IAAIC,mBAAmB;IAC9D,MAAMsC,KAAK,GAAG,IAAI,CAAClC,YAAY,CAACsB,GAAG,CACjC3B,YAAY,CAAC2C,OAAO,CAACF,IAAI,EAAErB,KAAK,CAAC,EAAEA,KAAK,CAC1C,CAAC;IACD,IAAImB,KAAK,IAAIA,KAAK,CAACnB,KAAK,KAAKA,KAAK,EAAE;MAClC,OAAOmB,KAAK;IACd;IAEA,IAAIK,aAAa,EAAE;MACjB,MAAM;QAACvB,MAAM;QAAEG;MAAM,CAAC,GAAGoB,aAAa,CAACH,IAAI,EAAErB,KAAK,CAAC;MAGnD,OAAO;QAACA,KAAK;QAAEC,MAAM;QAAEG,MAAM;QAAED,SAAS,EAAE;MAAI,CAAC;IACjD;IAEA,OAAO,IAAI;EACb;EAMAsB,mBAAmBA,CAACzB,KAAa,EAAEkB,KAAsB,EAAU;IACjE,IAAIQ,MAAM,CAACC,SAAS,CAAC3B,KAAK,CAAC,EAAE;MAC3B,OAAO,IAAI,CAACiB,oBAAoB,CAACjB,KAAK,EAAEkB,KAAK,CAAC,CAACd,MAAM;IACvD,CAAC,MAAM;MACL,MAAMwB,YAAY,GAAG,IAAI,CAACX,oBAAoB,CAACP,IAAI,CAACmB,KAAK,CAAC7B,KAAK,CAAC,EAAEkB,KAAK,CAAC;MACxE,MAAMY,SAAS,GAAG9B,KAAK,GAAGU,IAAI,CAACmB,KAAK,CAAC7B,KAAK,CAAC;MAC3C,OAAO4B,YAAY,CAACxB,MAAM,GAAG0B,SAAS,GAAGF,YAAY,CAAC3B,MAAM;IAC9D;EACF;EAKA8B,gBAAgBA,CAAA,EAAW;IACzB,OAAO,IAAI,CAACjB,cAAc,IAAI,CAAC;EACjC;EAKAkB,gBAAgBA,CAAA,EAAY;IAC1B,OAAO,IAAI,CAAClB,cAAc,IAAI,IAAI;EACpC;EAMAT,kBAAkBA,CAACR,MAAc,EAAEoC,sBAAgC,EAAU;IAC3E,MAAM;MAAC1C,UAAU;MAAEC;IAAG,CAAC,GAAG,IAAI,CAACF,YAAY;IAE3C,IAAIC,UAAU,IAAIC,GAAG,EAAE;MACrB,MAAM0C,aAAa,GAAGD,sBAAsB,IAAI,IAAI,CAACnB,cAAc;MACnEhC,SAAS,CACPoD,aAAa,IAAI,IAAI,EACrB,wFACF,CAAC;MACD,OACEA,aAAa,IACZ,IAAI,CAACC,aAAa,CAACtC,MAAM,CAAC,GAAG,IAAI,CAACK,aAAa,CAACL,MAAM,CAAC,CAAC;IAE7D,CAAC,MAAM;MACL,OAAO,IAAI,CAACsC,aAAa,CAACtC,MAAM,CAAC;IACnC;EACF;EAKAuC,eAAeA,CAAC/B,kBAA0B,EAAU;IAClD,MAAM;MAACd,UAAU;MAAEC;IAAG,CAAC,GAAG,IAAI,CAACF,YAAY;IAE3C,IAAIC,UAAU,IAAIC,GAAG,EAAE;MACrBV,SAAS,CACP,IAAI,CAACgC,cAAc,IAAI,IAAI,EAC3B,wFACF,CAAC;MACD,OAAO,IAAI,CAACA,cAAc,GAAGT,kBAAkB;IACjD,CAAC,MAAM;MACL,OAAOA,kBAAkB;IAC3B;EACF;EAEAP,+BAA+BA,CAACF,WAA4B,EAAQ;IAClE,IAAIA,WAAW,CAACJ,GAAG,KAAK,IAAI,CAACF,YAAY,CAACE,GAAG,EAAE;MAC7C,IAAI,CAACP,YAAY,CAACoD,KAAK,CAAC,CAAC;IAC3B;IAEA,IAAIzC,WAAW,CAACL,UAAU,KAAK,IAAI,CAACD,YAAY,CAACC,UAAU,EAAE;MAC3D,IAAI,CAACP,kBAAkB,GAAG,CAAC;MAC3B,IAAI,CAACG,yBAAyB,GAAG,CAAC;MAClC,IAAI,CAACC,oBAAoB,GAAG,CAAC;MAC7B,IAAI,CAACC,mBAAmB,GAAG,CAAC;IAC9B;IAEA,IAAI,CAACC,YAAY,GAAGM,WAAW;EACjC;EAEAM,aAAaA,CAAC;IACZoC,KAAK;IACLC;EAC+C,CAAC,EAAU;IAC1D,OAAO,IAAI,CAACjD,YAAY,CAACC,UAAU,GAAG+C,KAAK,GAAGC,MAAM;EACtD;EAEAJ,aAAaA,CAAC;IAACK,CAAC;IAAEC;EAAyC,CAAC,EAAU;IACpE,OAAO,IAAI,CAACnD,YAAY,CAACC,UAAU,GAAGiD,CAAC,GAAGC,CAAC;EAC7C;AACF","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}