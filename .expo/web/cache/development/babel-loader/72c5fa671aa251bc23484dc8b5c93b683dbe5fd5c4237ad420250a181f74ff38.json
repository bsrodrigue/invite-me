{"ast":null,"code":"'use strict';\n\nconst invariant = require('invariant');\nconst levelsMap = {\n  log: 'log',\n  info: 'info',\n  warn: 'warn',\n  error: 'error',\n  fatal: 'error'\n};\nlet warningHandler = null;\nconst RCTLog = {\n  logIfNoNativeHook(level, ...args) {\n    if (typeof global.nativeLoggingHook === 'undefined') {\n      RCTLog.logToConsole(level, ...args);\n    } else {\n      if (warningHandler && level === 'warn') {\n        warningHandler(...args);\n      }\n    }\n  },\n  logToConsole(level, ...args) {\n    const logFn = levelsMap[level];\n    invariant(logFn, 'Level \"' + level + '\" not one of ' + Object.keys(levelsMap).toString());\n    console[logFn](...args);\n  },\n  setWarningHandler(handler) {\n    warningHandler = handler;\n  }\n};\nmodule.exports = RCTLog;","map":{"version":3,"names":["invariant","require","levelsMap","log","info","warn","error","fatal","warningHandler","RCTLog","logIfNoNativeHook","level","args","global","nativeLoggingHook","logToConsole","logFn","Object","keys","toString","console","setWarningHandler","handler","module","exports"],"sources":["/home/rodo/workspace/passion/apps/muh-money/node_modules/react-native/Libraries/Utilities/RCTLog.js"],"sourcesContent":["/**\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @format\n * @flow strict\n */\n\n'use strict';\n\nconst invariant = require('invariant');\n\nconst levelsMap = {\n  log: 'log',\n  info: 'info',\n  warn: 'warn',\n  error: 'error',\n  fatal: 'error',\n};\n\nlet warningHandler: ?(...Array<mixed>) => void = null;\n\nconst RCTLog = {\n  // level one of log, info, warn, error, mustfix\n  logIfNoNativeHook(level: string, ...args: Array<mixed>): void {\n    // We already printed in the native console, so only log here if using a js debugger\n    if (typeof global.nativeLoggingHook === 'undefined') {\n      RCTLog.logToConsole(level, ...args);\n    } else {\n      // Report native warnings to LogBox\n      if (warningHandler && level === 'warn') {\n        warningHandler(...args);\n      }\n    }\n  },\n\n  // Log to console regardless of nativeLoggingHook\n  logToConsole(level: string, ...args: Array<mixed>): void {\n    const logFn = levelsMap[level];\n    invariant(\n      logFn,\n      'Level \"' + level + '\" not one of ' + Object.keys(levelsMap).toString(),\n    );\n\n    console[logFn](...args);\n  },\n\n  setWarningHandler(handler: typeof warningHandler): void {\n    warningHandler = handler;\n  },\n};\n\nmodule.exports = RCTLog;\n"],"mappings":"AAUA,YAAY;;AAEZ,MAAMA,SAAS,GAAGC,OAAO,CAAC,WAAW,CAAC;AAEtC,MAAMC,SAAS,GAAG;EAChBC,GAAG,EAAE,KAAK;EACVC,IAAI,EAAE,MAAM;EACZC,IAAI,EAAE,MAAM;EACZC,KAAK,EAAE,OAAO;EACdC,KAAK,EAAE;AACT,CAAC;AAED,IAAIC,cAA0C,GAAG,IAAI;AAErD,MAAMC,MAAM,GAAG;EAEbC,iBAAiBA,CAACC,KAAa,EAAE,GAAGC,IAAkB,EAAQ;IAE5D,IAAI,OAAOC,MAAM,CAACC,iBAAiB,KAAK,WAAW,EAAE;MACnDL,MAAM,CAACM,YAAY,CAACJ,KAAK,EAAE,GAAGC,IAAI,CAAC;IACrC,CAAC,MAAM;MAEL,IAAIJ,cAAc,IAAIG,KAAK,KAAK,MAAM,EAAE;QACtCH,cAAc,CAAC,GAAGI,IAAI,CAAC;MACzB;IACF;EACF,CAAC;EAGDG,YAAYA,CAACJ,KAAa,EAAE,GAAGC,IAAkB,EAAQ;IACvD,MAAMI,KAAK,GAAGd,SAAS,CAACS,KAAK,CAAC;IAC9BX,SAAS,CACPgB,KAAK,EACL,SAAS,GAAGL,KAAK,GAAG,eAAe,GAAGM,MAAM,CAACC,IAAI,CAAChB,SAAS,CAAC,CAACiB,QAAQ,CAAC,CACxE,CAAC;IAEDC,OAAO,CAACJ,KAAK,CAAC,CAAC,GAAGJ,IAAI,CAAC;EACzB,CAAC;EAEDS,iBAAiBA,CAACC,OAA8B,EAAQ;IACtDd,cAAc,GAAGc,OAAO;EAC1B;AACF,CAAC;AAEDC,MAAM,CAACC,OAAO,GAAGf,MAAM","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}