{"ast":null,"code":"import AsyncStorage from \"@react-native-async-storage/async-storage\";\nfunction handleAsyncStorageError(_error) {\n  console.error(_error);\n}\nexport function useAsyncStorage() {\n  const storeData = async (key, value) => {\n    try {\n      const jsonValue = JSON.stringify(value);\n      await AsyncStorage.setItem(key, jsonValue);\n    } catch (error) {\n      handleAsyncStorageError(error);\n    }\n  };\n  const getData = async key => {\n    try {\n      const value = await AsyncStorage.getItem(key);\n      return value;\n    } catch (error) {\n      handleAsyncStorageError(error);\n    }\n  };\n  const removeData = async key => {\n    try {\n      await AsyncStorage.removeItem(key);\n    } catch (error) {\n      handleAsyncStorageError(error);\n    }\n  };\n  const clearData = async () => {\n    try {\n      await AsyncStorage.clear();\n    } catch (error) {\n      handleAsyncStorageError(error);\n    }\n  };\n  return {\n    storeData,\n    getData,\n    removeData,\n    clearData\n  };\n}","map":{"version":3,"names":["AsyncStorage","handleAsyncStorageError","_error","console","error","useAsyncStorage","storeData","key","value","jsonValue","JSON","stringify","setItem","getData","getItem","removeData","removeItem","clearData","clear"],"sources":["/home/rodo/workspace/passion/apps/muh-money/src/lib/storage/index.ts"],"sourcesContent":["import AsyncStorage from \"@react-native-async-storage/async-storage\";\n\nfunction handleAsyncStorageError(_error) {\n  console.error(_error);\n}\n\nexport function useAsyncStorage() {\n\n  const storeData = async (key: string, value: object) => {\n    try {\n      const jsonValue = JSON.stringify(value);\n      await AsyncStorage.setItem(key, jsonValue);\n    } catch (error) {\n      handleAsyncStorageError(error);\n    }\n  }\n\n  const getData = async (key: string) => {\n    try {\n      const value = await AsyncStorage.getItem(key);\n      return value;\n    } catch (error) {\n      handleAsyncStorageError(error);\n    }\n  }\n\n  const removeData = async (key: string) => {\n    try {\n      await AsyncStorage.removeItem(key)\n    } catch (error) {\n      handleAsyncStorageError(error);\n    }\n  }\n\n  const clearData = async () => {\n    try {\n      await AsyncStorage.clear()\n    } catch (error) {\n      handleAsyncStorageError(error);\n    }\n  }\n\n  return {\n    storeData, getData, removeData, clearData\n  }\n}\n"],"mappings":"AAAA,OAAOA,YAAY,MAAM,2CAA2C;AAEpE,SAASC,uBAAuBA,CAACC,MAAM,EAAE;EACvCC,OAAO,CAACC,KAAK,CAACF,MAAM,CAAC;AACvB;AAEA,OAAO,SAASG,eAAeA,CAAA,EAAG;EAEhC,MAAMC,SAAS,GAAG,MAAAA,CAAOC,GAAW,EAAEC,KAAa,KAAK;IACtD,IAAI;MACF,MAAMC,SAAS,GAAGC,IAAI,CAACC,SAAS,CAACH,KAAK,CAAC;MACvC,MAAMR,YAAY,CAACY,OAAO,CAACL,GAAG,EAAEE,SAAS,CAAC;IAC5C,CAAC,CAAC,OAAOL,KAAK,EAAE;MACdH,uBAAuB,CAACG,KAAK,CAAC;IAChC;EACF,CAAC;EAED,MAAMS,OAAO,GAAG,MAAON,GAAW,IAAK;IACrC,IAAI;MACF,MAAMC,KAAK,GAAG,MAAMR,YAAY,CAACc,OAAO,CAACP,GAAG,CAAC;MAC7C,OAAOC,KAAK;IACd,CAAC,CAAC,OAAOJ,KAAK,EAAE;MACdH,uBAAuB,CAACG,KAAK,CAAC;IAChC;EACF,CAAC;EAED,MAAMW,UAAU,GAAG,MAAOR,GAAW,IAAK;IACxC,IAAI;MACF,MAAMP,YAAY,CAACgB,UAAU,CAACT,GAAG,CAAC;IACpC,CAAC,CAAC,OAAOH,KAAK,EAAE;MACdH,uBAAuB,CAACG,KAAK,CAAC;IAChC;EACF,CAAC;EAED,MAAMa,SAAS,GAAG,MAAAA,CAAA,KAAY;IAC5B,IAAI;MACF,MAAMjB,YAAY,CAACkB,KAAK,CAAC,CAAC;IAC5B,CAAC,CAAC,OAAOd,KAAK,EAAE;MACdH,uBAAuB,CAACG,KAAK,CAAC;IAChC;EACF,CAAC;EAED,OAAO;IACLE,SAAS;IAAEO,OAAO;IAAEE,UAAU;IAAEE;EAClC,CAAC;AACH","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}