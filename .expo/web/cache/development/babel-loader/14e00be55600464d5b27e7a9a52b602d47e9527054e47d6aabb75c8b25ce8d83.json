{"ast":null,"code":"\"use strict\";\n\nif (__DEV__) {\n  (function () {\n    \"use strict\";\n    if (typeof __REACT_DEVTOOLS_GLOBAL_HOOK__ !== \"undefined\" && typeof __REACT_DEVTOOLS_GLOBAL_HOOK__.registerInternalModuleStart === \"function\") {\n      __REACT_DEVTOOLS_GLOBAL_HOOK__.registerInternalModuleStart(new Error());\n    }\n    var React = require(\"react\");\n    require(\"react-native/Libraries/ReactPrivate/ReactNativePrivateInitializeCore\");\n    var ReactNativePrivateInterface = require(\"react-native/Libraries/ReactPrivate/ReactNativePrivateInterface\");\n    var Scheduler = require(\"scheduler\");\n    var ReactSharedInternals = React.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED;\n    function warn(format) {\n      {\n        {\n          for (var _len = arguments.length, args = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {\n            args[_key - 1] = arguments[_key];\n          }\n          printWarning(\"warn\", format, args);\n        }\n      }\n    }\n    function error(format) {\n      {\n        {\n          for (var _len2 = arguments.length, args = new Array(_len2 > 1 ? _len2 - 1 : 0), _key2 = 1; _key2 < _len2; _key2++) {\n            args[_key2 - 1] = arguments[_key2];\n          }\n          printWarning(\"error\", format, args);\n        }\n      }\n    }\n    function printWarning(level, format, args) {\n      {\n        var ReactDebugCurrentFrame = ReactSharedInternals.ReactDebugCurrentFrame;\n        var stack = ReactDebugCurrentFrame.getStackAddendum();\n        if (stack !== \"\") {\n          format += \"%s\";\n          args = args.concat([stack]);\n        }\n        var argsWithFormat = args.map(function (item) {\n          return String(item);\n        });\n        argsWithFormat.unshift(\"Warning: \" + format);\n        Function.prototype.apply.call(console[level], console, argsWithFormat);\n      }\n    }\n    var fakeNode = null;\n    {\n      if (true && typeof window.dispatchEvent === \"function\" && typeof document !== \"undefined\" && typeof document.createEvent === \"function\") {\n        fakeNode = document.createElement(\"react\");\n      }\n    }\n    function invokeGuardedCallbackImpl(name, func, context) {\n      {\n        if (fakeNode) {\n          var evt = document.createEvent(\"Event\");\n          var didCall = false;\n          var didError = true;\n          var windowEvent = window.event;\n          var windowEventDescriptor = Object.getOwnPropertyDescriptor(window, \"event\");\n          var restoreAfterDispatch = function () {\n            fakeNode.removeEventListener(evtType, callCallback, false);\n            if (typeof window.event !== \"undefined\" && window.hasOwnProperty(\"event\")) {\n              window.event = windowEvent;\n            }\n          };\n          var _funcArgs = Array.prototype.slice.call(arguments, 3);\n          var callCallback = function () {\n            didCall = true;\n            restoreAfterDispatch();\n            func.apply(context, _funcArgs);\n            didError = false;\n          };\n          var error;\n          var didSetError = false;\n          var isCrossOriginError = false;\n          var handleWindowError = function (event) {\n            error = event.error;\n            didSetError = true;\n            if (error === null && event.colno === 0 && event.lineno === 0) {\n              isCrossOriginError = true;\n            }\n            if (event.defaultPrevented) {\n              if (error != null && typeof error === \"object\") {\n                try {\n                  error._suppressLogging = true;\n                } catch (inner) {}\n              }\n            }\n          };\n          var evtType = \"react-\" + (name ? name : \"invokeguardedcallback\");\n          window.addEventListener(\"error\", handleWindowError);\n          fakeNode.addEventListener(evtType, callCallback, false);\n          evt.initEvent(evtType, false, false);\n          fakeNode.dispatchEvent(evt);\n          if (windowEventDescriptor) {\n            Object.defineProperty(window, \"event\", windowEventDescriptor);\n          }\n          if (didCall && didError) {\n            if (!didSetError) {\n              error = new Error(\"An error was thrown inside one of your components, but React \" + \"doesn't know what it was. This is likely due to browser \" + 'flakiness. React does its best to preserve the \"Pause on ' + 'exceptions\" behavior of the DevTools, which requires some ' + \"DEV-mode only tricks. It's possible that these don't work in \" + \"your browser. Try triggering the error in production mode, \" + \"or switching to a modern browser. If you suspect that this is \" + \"actually an issue with React, please file an issue.\");\n            } else if (isCrossOriginError) {\n              error = new Error(\"A cross-origin error was thrown. React doesn't have access to \" + \"the actual error object in development. \" + \"See https://reactjs.org/link/crossorigin-error for more information.\");\n            }\n            this.onError(error);\n          }\n          window.removeEventListener(\"error\", handleWindowError);\n          if (didCall) {\n            return;\n          } else {\n            restoreAfterDispatch();\n          }\n        }\n        var funcArgs = Array.prototype.slice.call(arguments, 3);\n        try {\n          func.apply(context, funcArgs);\n        } catch (error) {\n          this.onError(error);\n        }\n      }\n    }\n    var hasError = false;\n    var caughtError = null;\n    var hasRethrowError = false;\n    var rethrowError = null;\n    var reporter = {\n      onError: function (error) {\n        hasError = true;\n        caughtError = error;\n      }\n    };\n    function invokeGuardedCallback(name, func, context, a, b, c, d, e, f) {\n      hasError = false;\n      caughtError = null;\n      invokeGuardedCallbackImpl.apply(reporter, arguments);\n    }\n    function invokeGuardedCallbackAndCatchFirstError(name, func, context, a, b, c, d, e, f) {\n      invokeGuardedCallback.apply(this, arguments);\n      if (hasError) {\n        var error = clearCaughtError();\n        if (!hasRethrowError) {\n          hasRethrowError = true;\n          rethrowError = error;\n        }\n      }\n    }\n    function rethrowCaughtError() {\n      if (hasRethrowError) {\n        var error = rethrowError;\n        hasRethrowError = false;\n        rethrowError = null;\n        throw error;\n      }\n    }\n    function hasCaughtError() {\n      return hasError;\n    }\n    function clearCaughtError() {\n      if (hasError) {\n        var error = caughtError;\n        hasError = false;\n        caughtError = null;\n        return error;\n      } else {\n        throw new Error(\"clearCaughtError was called but no error was captured. This error \" + \"is likely caused by a bug in React. Please file an issue.\");\n      }\n    }\n    var isArrayImpl = Array.isArray;\n    function isArray(a) {\n      return isArrayImpl(a);\n    }\n    var getFiberCurrentPropsFromNode$1 = null;\n    var getInstanceFromNode = null;\n    var getNodeFromInstance = null;\n    function setComponentTree(getFiberCurrentPropsFromNodeImpl, getInstanceFromNodeImpl, getNodeFromInstanceImpl) {\n      getFiberCurrentPropsFromNode$1 = getFiberCurrentPropsFromNodeImpl;\n      getInstanceFromNode = getInstanceFromNodeImpl;\n      getNodeFromInstance = getNodeFromInstanceImpl;\n      {\n        if (!getNodeFromInstance || !getInstanceFromNode) {\n          error(\"EventPluginUtils.setComponentTree(...): Injected \" + \"module is missing getNodeFromInstance or getInstanceFromNode.\");\n        }\n      }\n    }\n    function validateEventDispatches(event) {\n      {\n        var dispatchListeners = event._dispatchListeners;\n        var dispatchInstances = event._dispatchInstances;\n        var listenersIsArr = isArray(dispatchListeners);\n        var listenersLen = listenersIsArr ? dispatchListeners.length : dispatchListeners ? 1 : 0;\n        var instancesIsArr = isArray(dispatchInstances);\n        var instancesLen = instancesIsArr ? dispatchInstances.length : dispatchInstances ? 1 : 0;\n        if (instancesIsArr !== listenersIsArr || instancesLen !== listenersLen) {\n          error(\"EventPluginUtils: Invalid `event`.\");\n        }\n      }\n    }\n    function executeDispatch(event, listener, inst) {\n      var type = event.type || \"unknown-event\";\n      event.currentTarget = getNodeFromInstance(inst);\n      invokeGuardedCallbackAndCatchFirstError(type, listener, undefined, event);\n      event.currentTarget = null;\n    }\n    function executeDispatchesInOrder(event) {\n      var dispatchListeners = event._dispatchListeners;\n      var dispatchInstances = event._dispatchInstances;\n      {\n        validateEventDispatches(event);\n      }\n      if (isArray(dispatchListeners)) {\n        for (var i = 0; i < dispatchListeners.length; i++) {\n          if (event.isPropagationStopped()) {\n            break;\n          }\n          executeDispatch(event, dispatchListeners[i], dispatchInstances[i]);\n        }\n      } else if (dispatchListeners) {\n        executeDispatch(event, dispatchListeners, dispatchInstances);\n      }\n      event._dispatchListeners = null;\n      event._dispatchInstances = null;\n    }\n    function executeDispatchesInOrderStopAtTrueImpl(event) {\n      var dispatchListeners = event._dispatchListeners;\n      var dispatchInstances = event._dispatchInstances;\n      {\n        validateEventDispatches(event);\n      }\n      if (isArray(dispatchListeners)) {\n        for (var i = 0; i < dispatchListeners.length; i++) {\n          if (event.isPropagationStopped()) {\n            break;\n          }\n          if (dispatchListeners[i](event, dispatchInstances[i])) {\n            return dispatchInstances[i];\n          }\n        }\n      } else if (dispatchListeners) {\n        if (dispatchListeners(event, dispatchInstances)) {\n          return dispatchInstances;\n        }\n      }\n      return null;\n    }\n    function executeDispatchesInOrderStopAtTrue(event) {\n      var ret = executeDispatchesInOrderStopAtTrueImpl(event);\n      event._dispatchInstances = null;\n      event._dispatchListeners = null;\n      return ret;\n    }\n    function executeDirectDispatch(event) {\n      {\n        validateEventDispatches(event);\n      }\n      var dispatchListener = event._dispatchListeners;\n      var dispatchInstance = event._dispatchInstances;\n      if (isArray(dispatchListener)) {\n        throw new Error(\"executeDirectDispatch(...): Invalid `event`.\");\n      }\n      event.currentTarget = dispatchListener ? getNodeFromInstance(dispatchInstance) : null;\n      var res = dispatchListener ? dispatchListener(event) : null;\n      event.currentTarget = null;\n      event._dispatchListeners = null;\n      event._dispatchInstances = null;\n      return res;\n    }\n    function hasDispatches(event) {\n      return !!event._dispatchListeners;\n    }\n    var assign = Object.assign;\n    var EVENT_POOL_SIZE = 10;\n    var EventInterface = {\n      type: null,\n      target: null,\n      currentTarget: function () {\n        return null;\n      },\n      eventPhase: null,\n      bubbles: null,\n      cancelable: null,\n      timeStamp: function (event) {\n        return event.timeStamp || Date.now();\n      },\n      defaultPrevented: null,\n      isTrusted: null\n    };\n    function functionThatReturnsTrue() {\n      return true;\n    }\n    function functionThatReturnsFalse() {\n      return false;\n    }\n    function SyntheticEvent(dispatchConfig, targetInst, nativeEvent, nativeEventTarget) {\n      {\n        delete this.nativeEvent;\n        delete this.preventDefault;\n        delete this.stopPropagation;\n        delete this.isDefaultPrevented;\n        delete this.isPropagationStopped;\n      }\n      this.dispatchConfig = dispatchConfig;\n      this._targetInst = targetInst;\n      this.nativeEvent = nativeEvent;\n      this._dispatchListeners = null;\n      this._dispatchInstances = null;\n      var Interface = this.constructor.Interface;\n      for (var propName in Interface) {\n        if (!Interface.hasOwnProperty(propName)) {\n          continue;\n        }\n        {\n          delete this[propName];\n        }\n        var normalize = Interface[propName];\n        if (normalize) {\n          this[propName] = normalize(nativeEvent);\n        } else {\n          if (propName === \"target\") {\n            this.target = nativeEventTarget;\n          } else {\n            this[propName] = nativeEvent[propName];\n          }\n        }\n      }\n      var defaultPrevented = nativeEvent.defaultPrevented != null ? nativeEvent.defaultPrevented : nativeEvent.returnValue === false;\n      if (defaultPrevented) {\n        this.isDefaultPrevented = functionThatReturnsTrue;\n      } else {\n        this.isDefaultPrevented = functionThatReturnsFalse;\n      }\n      this.isPropagationStopped = functionThatReturnsFalse;\n      return this;\n    }\n    assign(SyntheticEvent.prototype, {\n      preventDefault: function () {\n        this.defaultPrevented = true;\n        var event = this.nativeEvent;\n        if (!event) {\n          return;\n        }\n        if (event.preventDefault) {\n          event.preventDefault();\n        } else if (typeof event.returnValue !== \"unknown\") {\n          event.returnValue = false;\n        }\n        this.isDefaultPrevented = functionThatReturnsTrue;\n      },\n      stopPropagation: function () {\n        var event = this.nativeEvent;\n        if (!event) {\n          return;\n        }\n        if (event.stopPropagation) {\n          event.stopPropagation();\n        } else if (typeof event.cancelBubble !== \"unknown\") {\n          event.cancelBubble = true;\n        }\n        this.isPropagationStopped = functionThatReturnsTrue;\n      },\n      persist: function () {\n        this.isPersistent = functionThatReturnsTrue;\n      },\n      isPersistent: functionThatReturnsFalse,\n      destructor: function () {\n        var Interface = this.constructor.Interface;\n        for (var propName in Interface) {\n          {\n            Object.defineProperty(this, propName, getPooledWarningPropertyDefinition(propName, Interface[propName]));\n          }\n        }\n        this.dispatchConfig = null;\n        this._targetInst = null;\n        this.nativeEvent = null;\n        this.isDefaultPrevented = functionThatReturnsFalse;\n        this.isPropagationStopped = functionThatReturnsFalse;\n        this._dispatchListeners = null;\n        this._dispatchInstances = null;\n        {\n          Object.defineProperty(this, \"nativeEvent\", getPooledWarningPropertyDefinition(\"nativeEvent\", null));\n          Object.defineProperty(this, \"isDefaultPrevented\", getPooledWarningPropertyDefinition(\"isDefaultPrevented\", functionThatReturnsFalse));\n          Object.defineProperty(this, \"isPropagationStopped\", getPooledWarningPropertyDefinition(\"isPropagationStopped\", functionThatReturnsFalse));\n          Object.defineProperty(this, \"preventDefault\", getPooledWarningPropertyDefinition(\"preventDefault\", function () {}));\n          Object.defineProperty(this, \"stopPropagation\", getPooledWarningPropertyDefinition(\"stopPropagation\", function () {}));\n        }\n      }\n    });\n    SyntheticEvent.Interface = EventInterface;\n    SyntheticEvent.extend = function (Interface) {\n      var Super = this;\n      var E = function () {};\n      E.prototype = Super.prototype;\n      var prototype = new E();\n      function Class() {\n        return Super.apply(this, arguments);\n      }\n      assign(prototype, Class.prototype);\n      Class.prototype = prototype;\n      Class.prototype.constructor = Class;\n      Class.Interface = assign({}, Super.Interface, Interface);\n      Class.extend = Super.extend;\n      addEventPoolingTo(Class);\n      return Class;\n    };\n    addEventPoolingTo(SyntheticEvent);\n    function getPooledWarningPropertyDefinition(propName, getVal) {\n      function set(val) {\n        var action = isFunction ? \"setting the method\" : \"setting the property\";\n        warn(action, \"This is effectively a no-op\");\n        return val;\n      }\n      function get() {\n        var action = isFunction ? \"accessing the method\" : \"accessing the property\";\n        var result = isFunction ? \"This is a no-op function\" : \"This is set to null\";\n        warn(action, result);\n        return getVal;\n      }\n      function warn(action, result) {\n        {\n          error(\"This synthetic event is reused for performance reasons. If you're seeing this, \" + \"you're %s `%s` on a released/nullified synthetic event. %s. \" + \"If you must keep the original synthetic event around, use event.persist(). \" + \"See https://reactjs.org/link/event-pooling for more information.\", action, propName, result);\n        }\n      }\n      var isFunction = typeof getVal === \"function\";\n      return {\n        configurable: true,\n        set: set,\n        get: get\n      };\n    }\n    function createOrGetPooledEvent(dispatchConfig, targetInst, nativeEvent, nativeInst) {\n      var EventConstructor = this;\n      if (EventConstructor.eventPool.length) {\n        var instance = EventConstructor.eventPool.pop();\n        EventConstructor.call(instance, dispatchConfig, targetInst, nativeEvent, nativeInst);\n        return instance;\n      }\n      return new EventConstructor(dispatchConfig, targetInst, nativeEvent, nativeInst);\n    }\n    function releasePooledEvent(event) {\n      var EventConstructor = this;\n      if (!(event instanceof EventConstructor)) {\n        throw new Error(\"Trying to release an event instance into a pool of a different type.\");\n      }\n      event.destructor();\n      if (EventConstructor.eventPool.length < EVENT_POOL_SIZE) {\n        EventConstructor.eventPool.push(event);\n      }\n    }\n    function addEventPoolingTo(EventConstructor) {\n      EventConstructor.getPooled = createOrGetPooledEvent;\n      EventConstructor.eventPool = [];\n      EventConstructor.release = releasePooledEvent;\n    }\n    var ResponderSyntheticEvent = SyntheticEvent.extend({\n      touchHistory: function (nativeEvent) {\n        return null;\n      }\n    });\n    var TOP_TOUCH_START = \"topTouchStart\";\n    var TOP_TOUCH_MOVE = \"topTouchMove\";\n    var TOP_TOUCH_END = \"topTouchEnd\";\n    var TOP_TOUCH_CANCEL = \"topTouchCancel\";\n    var TOP_SCROLL = \"topScroll\";\n    var TOP_SELECTION_CHANGE = \"topSelectionChange\";\n    function isStartish(topLevelType) {\n      return topLevelType === TOP_TOUCH_START;\n    }\n    function isMoveish(topLevelType) {\n      return topLevelType === TOP_TOUCH_MOVE;\n    }\n    function isEndish(topLevelType) {\n      return topLevelType === TOP_TOUCH_END || topLevelType === TOP_TOUCH_CANCEL;\n    }\n    var startDependencies = [TOP_TOUCH_START];\n    var moveDependencies = [TOP_TOUCH_MOVE];\n    var endDependencies = [TOP_TOUCH_CANCEL, TOP_TOUCH_END];\n    var MAX_TOUCH_BANK = 20;\n    var touchBank = [];\n    var touchHistory = {\n      touchBank: touchBank,\n      numberActiveTouches: 0,\n      indexOfSingleActiveTouch: -1,\n      mostRecentTimeStamp: 0\n    };\n    function timestampForTouch(touch) {\n      return touch.timeStamp || touch.timestamp;\n    }\n    function createTouchRecord(touch) {\n      return {\n        touchActive: true,\n        startPageX: touch.pageX,\n        startPageY: touch.pageY,\n        startTimeStamp: timestampForTouch(touch),\n        currentPageX: touch.pageX,\n        currentPageY: touch.pageY,\n        currentTimeStamp: timestampForTouch(touch),\n        previousPageX: touch.pageX,\n        previousPageY: touch.pageY,\n        previousTimeStamp: timestampForTouch(touch)\n      };\n    }\n    function resetTouchRecord(touchRecord, touch) {\n      touchRecord.touchActive = true;\n      touchRecord.startPageX = touch.pageX;\n      touchRecord.startPageY = touch.pageY;\n      touchRecord.startTimeStamp = timestampForTouch(touch);\n      touchRecord.currentPageX = touch.pageX;\n      touchRecord.currentPageY = touch.pageY;\n      touchRecord.currentTimeStamp = timestampForTouch(touch);\n      touchRecord.previousPageX = touch.pageX;\n      touchRecord.previousPageY = touch.pageY;\n      touchRecord.previousTimeStamp = timestampForTouch(touch);\n    }\n    function getTouchIdentifier(_ref) {\n      var identifier = _ref.identifier;\n      if (identifier == null) {\n        throw new Error(\"Touch object is missing identifier.\");\n      }\n      {\n        if (identifier > MAX_TOUCH_BANK) {\n          error(\"Touch identifier %s is greater than maximum supported %s which causes \" + \"performance issues backfilling array locations for all of the indices.\", identifier, MAX_TOUCH_BANK);\n        }\n      }\n      return identifier;\n    }\n    function recordTouchStart(touch) {\n      var identifier = getTouchIdentifier(touch);\n      var touchRecord = touchBank[identifier];\n      if (touchRecord) {\n        resetTouchRecord(touchRecord, touch);\n      } else {\n        touchBank[identifier] = createTouchRecord(touch);\n      }\n      touchHistory.mostRecentTimeStamp = timestampForTouch(touch);\n    }\n    function recordTouchMove(touch) {\n      var touchRecord = touchBank[getTouchIdentifier(touch)];\n      if (touchRecord) {\n        touchRecord.touchActive = true;\n        touchRecord.previousPageX = touchRecord.currentPageX;\n        touchRecord.previousPageY = touchRecord.currentPageY;\n        touchRecord.previousTimeStamp = touchRecord.currentTimeStamp;\n        touchRecord.currentPageX = touch.pageX;\n        touchRecord.currentPageY = touch.pageY;\n        touchRecord.currentTimeStamp = timestampForTouch(touch);\n        touchHistory.mostRecentTimeStamp = timestampForTouch(touch);\n      } else {\n        {\n          warn(\"Cannot record touch move without a touch start.\\n\" + \"Touch Move: %s\\n\" + \"Touch Bank: %s\", printTouch(touch), printTouchBank());\n        }\n      }\n    }\n    function recordTouchEnd(touch) {\n      var touchRecord = touchBank[getTouchIdentifier(touch)];\n      if (touchRecord) {\n        touchRecord.touchActive = false;\n        touchRecord.previousPageX = touchRecord.currentPageX;\n        touchRecord.previousPageY = touchRecord.currentPageY;\n        touchRecord.previousTimeStamp = touchRecord.currentTimeStamp;\n        touchRecord.currentPageX = touch.pageX;\n        touchRecord.currentPageY = touch.pageY;\n        touchRecord.currentTimeStamp = timestampForTouch(touch);\n        touchHistory.mostRecentTimeStamp = timestampForTouch(touch);\n      } else {\n        {\n          warn(\"Cannot record touch end without a touch start.\\n\" + \"Touch End: %s\\n\" + \"Touch Bank: %s\", printTouch(touch), printTouchBank());\n        }\n      }\n    }\n    function printTouch(touch) {\n      return JSON.stringify({\n        identifier: touch.identifier,\n        pageX: touch.pageX,\n        pageY: touch.pageY,\n        timestamp: timestampForTouch(touch)\n      });\n    }\n    function printTouchBank() {\n      var printed = JSON.stringify(touchBank.slice(0, MAX_TOUCH_BANK));\n      if (touchBank.length > MAX_TOUCH_BANK) {\n        printed += \" (original size: \" + touchBank.length + \")\";\n      }\n      return printed;\n    }\n    var instrumentationCallback;\n    var ResponderTouchHistoryStore = {\n      instrument: function (callback) {\n        instrumentationCallback = callback;\n      },\n      recordTouchTrack: function (topLevelType, nativeEvent) {\n        if (instrumentationCallback != null) {\n          instrumentationCallback(topLevelType, nativeEvent);\n        }\n        if (isMoveish(topLevelType)) {\n          nativeEvent.changedTouches.forEach(recordTouchMove);\n        } else if (isStartish(topLevelType)) {\n          nativeEvent.changedTouches.forEach(recordTouchStart);\n          touchHistory.numberActiveTouches = nativeEvent.touches.length;\n          if (touchHistory.numberActiveTouches === 1) {\n            touchHistory.indexOfSingleActiveTouch = nativeEvent.touches[0].identifier;\n          }\n        } else if (isEndish(topLevelType)) {\n          nativeEvent.changedTouches.forEach(recordTouchEnd);\n          touchHistory.numberActiveTouches = nativeEvent.touches.length;\n          if (touchHistory.numberActiveTouches === 1) {\n            for (var i = 0; i < touchBank.length; i++) {\n              var touchTrackToCheck = touchBank[i];\n              if (touchTrackToCheck != null && touchTrackToCheck.touchActive) {\n                touchHistory.indexOfSingleActiveTouch = i;\n                break;\n              }\n            }\n            {\n              var activeRecord = touchBank[touchHistory.indexOfSingleActiveTouch];\n              if (activeRecord == null || !activeRecord.touchActive) {\n                error(\"Cannot find single active touch.\");\n              }\n            }\n          }\n        }\n      },\n      touchHistory: touchHistory\n    };\n    function accumulate(current, next) {\n      if (next == null) {\n        throw new Error(\"accumulate(...): Accumulated items must not be null or undefined.\");\n      }\n      if (current == null) {\n        return next;\n      }\n      if (isArray(current)) {\n        return current.concat(next);\n      }\n      if (isArray(next)) {\n        return [current].concat(next);\n      }\n      return [current, next];\n    }\n    function accumulateInto(current, next) {\n      if (next == null) {\n        throw new Error(\"accumulateInto(...): Accumulated items must not be null or undefined.\");\n      }\n      if (current == null) {\n        return next;\n      }\n      if (isArray(current)) {\n        if (isArray(next)) {\n          current.push.apply(current, next);\n          return current;\n        }\n        current.push(next);\n        return current;\n      }\n      if (isArray(next)) {\n        return [current].concat(next);\n      }\n      return [current, next];\n    }\n    function forEachAccumulated(arr, cb, scope) {\n      if (Array.isArray(arr)) {\n        arr.forEach(cb, scope);\n      } else if (arr) {\n        cb.call(scope, arr);\n      }\n    }\n    var FunctionComponent = 0;\n    var ClassComponent = 1;\n    var IndeterminateComponent = 2;\n    var HostRoot = 3;\n    var HostPortal = 4;\n    var HostComponent = 5;\n    var HostText = 6;\n    var Fragment = 7;\n    var Mode = 8;\n    var ContextConsumer = 9;\n    var ContextProvider = 10;\n    var ForwardRef = 11;\n    var Profiler = 12;\n    var SuspenseComponent = 13;\n    var MemoComponent = 14;\n    var SimpleMemoComponent = 15;\n    var LazyComponent = 16;\n    var IncompleteClassComponent = 17;\n    var DehydratedFragment = 18;\n    var SuspenseListComponent = 19;\n    var ScopeComponent = 21;\n    var OffscreenComponent = 22;\n    var LegacyHiddenComponent = 23;\n    var CacheComponent = 24;\n    var TracingMarkerComponent = 25;\n    var HostHoistable = 26;\n    var HostSingleton = 27;\n    var responderInst = null;\n    var trackedTouchCount = 0;\n    function changeResponder(nextResponderInst, blockHostResponder) {\n      var oldResponderInst = responderInst;\n      responderInst = nextResponderInst;\n      if (ResponderEventPlugin.GlobalResponderHandler !== null) {\n        ResponderEventPlugin.GlobalResponderHandler.onChange(oldResponderInst, nextResponderInst, blockHostResponder);\n      }\n    }\n    var eventTypes = {\n      startShouldSetResponder: {\n        phasedRegistrationNames: {\n          bubbled: \"onStartShouldSetResponder\",\n          captured: \"onStartShouldSetResponderCapture\"\n        },\n        dependencies: startDependencies\n      },\n      scrollShouldSetResponder: {\n        phasedRegistrationNames: {\n          bubbled: \"onScrollShouldSetResponder\",\n          captured: \"onScrollShouldSetResponderCapture\"\n        },\n        dependencies: [TOP_SCROLL]\n      },\n      selectionChangeShouldSetResponder: {\n        phasedRegistrationNames: {\n          bubbled: \"onSelectionChangeShouldSetResponder\",\n          captured: \"onSelectionChangeShouldSetResponderCapture\"\n        },\n        dependencies: [TOP_SELECTION_CHANGE]\n      },\n      moveShouldSetResponder: {\n        phasedRegistrationNames: {\n          bubbled: \"onMoveShouldSetResponder\",\n          captured: \"onMoveShouldSetResponderCapture\"\n        },\n        dependencies: moveDependencies\n      },\n      responderStart: {\n        registrationName: \"onResponderStart\",\n        dependencies: startDependencies\n      },\n      responderMove: {\n        registrationName: \"onResponderMove\",\n        dependencies: moveDependencies\n      },\n      responderEnd: {\n        registrationName: \"onResponderEnd\",\n        dependencies: endDependencies\n      },\n      responderRelease: {\n        registrationName: \"onResponderRelease\",\n        dependencies: endDependencies\n      },\n      responderTerminationRequest: {\n        registrationName: \"onResponderTerminationRequest\",\n        dependencies: []\n      },\n      responderGrant: {\n        registrationName: \"onResponderGrant\",\n        dependencies: []\n      },\n      responderReject: {\n        registrationName: \"onResponderReject\",\n        dependencies: []\n      },\n      responderTerminate: {\n        registrationName: \"onResponderTerminate\",\n        dependencies: []\n      }\n    };\n    function getParent$1(inst) {\n      do {\n        inst = inst.return;\n      } while (inst && inst.tag !== HostComponent);\n      if (inst) {\n        return inst;\n      }\n      return null;\n    }\n    function getLowestCommonAncestor(instA, instB) {\n      var depthA = 0;\n      for (var tempA = instA; tempA; tempA = getParent$1(tempA)) {\n        depthA++;\n      }\n      var depthB = 0;\n      for (var tempB = instB; tempB; tempB = getParent$1(tempB)) {\n        depthB++;\n      }\n      while (depthA - depthB > 0) {\n        instA = getParent$1(instA);\n        depthA--;\n      }\n      while (depthB - depthA > 0) {\n        instB = getParent$1(instB);\n        depthB--;\n      }\n      var depth = depthA;\n      while (depth--) {\n        if (instA === instB || instA === instB.alternate) {\n          return instA;\n        }\n        instA = getParent$1(instA);\n        instB = getParent$1(instB);\n      }\n      return null;\n    }\n    function isAncestor(instA, instB) {\n      while (instB) {\n        if (instA === instB || instA === instB.alternate) {\n          return true;\n        }\n        instB = getParent$1(instB);\n      }\n      return false;\n    }\n    function traverseTwoPhase$1(inst, fn, arg) {\n      var path = [];\n      while (inst) {\n        path.push(inst);\n        inst = getParent$1(inst);\n      }\n      var i;\n      for (i = path.length; i-- > 0;) {\n        fn(path[i], \"captured\", arg);\n      }\n      for (i = 0; i < path.length; i++) {\n        fn(path[i], \"bubbled\", arg);\n      }\n    }\n    function getListener$1(inst, registrationName) {\n      var stateNode = inst.stateNode;\n      if (stateNode === null) {\n        return null;\n      }\n      var props = getFiberCurrentPropsFromNode$1(stateNode);\n      if (props === null) {\n        return null;\n      }\n      var listener = props[registrationName];\n      if (listener && typeof listener !== \"function\") {\n        throw new Error(\"Expected `\" + registrationName + \"` listener to be a function, instead got a value of `\" + typeof listener + \"` type.\");\n      }\n      return listener;\n    }\n    function listenerAtPhase$1(inst, event, propagationPhase) {\n      var registrationName = event.dispatchConfig.phasedRegistrationNames[propagationPhase];\n      return getListener$1(inst, registrationName);\n    }\n    function accumulateDirectionalDispatches$1(inst, phase, event) {\n      {\n        if (!inst) {\n          error(\"Dispatching inst must not be null\");\n        }\n      }\n      var listener = listenerAtPhase$1(inst, event, phase);\n      if (listener) {\n        event._dispatchListeners = accumulateInto(event._dispatchListeners, listener);\n        event._dispatchInstances = accumulateInto(event._dispatchInstances, inst);\n      }\n    }\n    function accumulateDispatches$1(inst, ignoredDirection, event) {\n      if (inst && event && event.dispatchConfig.registrationName) {\n        var registrationName = event.dispatchConfig.registrationName;\n        var listener = getListener$1(inst, registrationName);\n        if (listener) {\n          event._dispatchListeners = accumulateInto(event._dispatchListeners, listener);\n          event._dispatchInstances = accumulateInto(event._dispatchInstances, inst);\n        }\n      }\n    }\n    function accumulateDirectDispatchesSingle$1(event) {\n      if (event && event.dispatchConfig.registrationName) {\n        accumulateDispatches$1(event._targetInst, null, event);\n      }\n    }\n    function accumulateDirectDispatches$1(events) {\n      forEachAccumulated(events, accumulateDirectDispatchesSingle$1);\n    }\n    function accumulateTwoPhaseDispatchesSingleSkipTarget(event) {\n      if (event && event.dispatchConfig.phasedRegistrationNames) {\n        var targetInst = event._targetInst;\n        var parentInst = targetInst ? getParent$1(targetInst) : null;\n        traverseTwoPhase$1(parentInst, accumulateDirectionalDispatches$1, event);\n      }\n    }\n    function accumulateTwoPhaseDispatchesSkipTarget(events) {\n      forEachAccumulated(events, accumulateTwoPhaseDispatchesSingleSkipTarget);\n    }\n    function accumulateTwoPhaseDispatchesSingle$1(event) {\n      if (event && event.dispatchConfig.phasedRegistrationNames) {\n        traverseTwoPhase$1(event._targetInst, accumulateDirectionalDispatches$1, event);\n      }\n    }\n    function accumulateTwoPhaseDispatches$1(events) {\n      forEachAccumulated(events, accumulateTwoPhaseDispatchesSingle$1);\n    }\n    function setResponderAndExtractTransfer(topLevelType, targetInst, nativeEvent, nativeEventTarget) {\n      var shouldSetEventType = isStartish(topLevelType) ? eventTypes.startShouldSetResponder : isMoveish(topLevelType) ? eventTypes.moveShouldSetResponder : topLevelType === TOP_SELECTION_CHANGE ? eventTypes.selectionChangeShouldSetResponder : eventTypes.scrollShouldSetResponder;\n      var bubbleShouldSetFrom = !responderInst ? targetInst : getLowestCommonAncestor(responderInst, targetInst);\n      var skipOverBubbleShouldSetFrom = bubbleShouldSetFrom === responderInst;\n      var shouldSetEvent = ResponderSyntheticEvent.getPooled(shouldSetEventType, bubbleShouldSetFrom, nativeEvent, nativeEventTarget);\n      shouldSetEvent.touchHistory = ResponderTouchHistoryStore.touchHistory;\n      if (skipOverBubbleShouldSetFrom) {\n        accumulateTwoPhaseDispatchesSkipTarget(shouldSetEvent);\n      } else {\n        accumulateTwoPhaseDispatches$1(shouldSetEvent);\n      }\n      var wantsResponderInst = executeDispatchesInOrderStopAtTrue(shouldSetEvent);\n      if (!shouldSetEvent.isPersistent()) {\n        shouldSetEvent.constructor.release(shouldSetEvent);\n      }\n      if (!wantsResponderInst || wantsResponderInst === responderInst) {\n        return null;\n      }\n      var extracted;\n      var grantEvent = ResponderSyntheticEvent.getPooled(eventTypes.responderGrant, wantsResponderInst, nativeEvent, nativeEventTarget);\n      grantEvent.touchHistory = ResponderTouchHistoryStore.touchHistory;\n      accumulateDirectDispatches$1(grantEvent);\n      var blockHostResponder = executeDirectDispatch(grantEvent) === true;\n      if (responderInst) {\n        var terminationRequestEvent = ResponderSyntheticEvent.getPooled(eventTypes.responderTerminationRequest, responderInst, nativeEvent, nativeEventTarget);\n        terminationRequestEvent.touchHistory = ResponderTouchHistoryStore.touchHistory;\n        accumulateDirectDispatches$1(terminationRequestEvent);\n        var shouldSwitch = !hasDispatches(terminationRequestEvent) || executeDirectDispatch(terminationRequestEvent);\n        if (!terminationRequestEvent.isPersistent()) {\n          terminationRequestEvent.constructor.release(terminationRequestEvent);\n        }\n        if (shouldSwitch) {\n          var terminateEvent = ResponderSyntheticEvent.getPooled(eventTypes.responderTerminate, responderInst, nativeEvent, nativeEventTarget);\n          terminateEvent.touchHistory = ResponderTouchHistoryStore.touchHistory;\n          accumulateDirectDispatches$1(terminateEvent);\n          extracted = accumulate(extracted, [grantEvent, terminateEvent]);\n          changeResponder(wantsResponderInst, blockHostResponder);\n        } else {\n          var rejectEvent = ResponderSyntheticEvent.getPooled(eventTypes.responderReject, wantsResponderInst, nativeEvent, nativeEventTarget);\n          rejectEvent.touchHistory = ResponderTouchHistoryStore.touchHistory;\n          accumulateDirectDispatches$1(rejectEvent);\n          extracted = accumulate(extracted, rejectEvent);\n        }\n      } else {\n        extracted = accumulate(extracted, grantEvent);\n        changeResponder(wantsResponderInst, blockHostResponder);\n      }\n      return extracted;\n    }\n    function canTriggerTransfer(topLevelType, topLevelInst, nativeEvent) {\n      return topLevelInst && (topLevelType === TOP_SCROLL && !nativeEvent.responderIgnoreScroll || trackedTouchCount > 0 && topLevelType === TOP_SELECTION_CHANGE || isStartish(topLevelType) || isMoveish(topLevelType));\n    }\n    function noResponderTouches(nativeEvent) {\n      var touches = nativeEvent.touches;\n      if (!touches || touches.length === 0) {\n        return true;\n      }\n      for (var i = 0; i < touches.length; i++) {\n        var activeTouch = touches[i];\n        var target = activeTouch.target;\n        if (target !== null && target !== undefined && target !== 0) {\n          var targetInst = getInstanceFromNode(target);\n          if (isAncestor(responderInst, targetInst)) {\n            return false;\n          }\n        }\n      }\n      return true;\n    }\n    var ResponderEventPlugin = {\n      _getResponder: function () {\n        return responderInst;\n      },\n      eventTypes: eventTypes,\n      extractEvents: function (topLevelType, targetInst, nativeEvent, nativeEventTarget, eventSystemFlags) {\n        if (isStartish(topLevelType)) {\n          trackedTouchCount += 1;\n        } else if (isEndish(topLevelType)) {\n          if (trackedTouchCount >= 0) {\n            trackedTouchCount -= 1;\n          } else {\n            {\n              warn(\"Ended a touch event which was not counted in `trackedTouchCount`.\");\n            }\n            return null;\n          }\n        }\n        ResponderTouchHistoryStore.recordTouchTrack(topLevelType, nativeEvent);\n        var extracted = canTriggerTransfer(topLevelType, targetInst, nativeEvent) ? setResponderAndExtractTransfer(topLevelType, targetInst, nativeEvent, nativeEventTarget) : null;\n        var isResponderTouchStart = responderInst && isStartish(topLevelType);\n        var isResponderTouchMove = responderInst && isMoveish(topLevelType);\n        var isResponderTouchEnd = responderInst && isEndish(topLevelType);\n        var incrementalTouch = isResponderTouchStart ? eventTypes.responderStart : isResponderTouchMove ? eventTypes.responderMove : isResponderTouchEnd ? eventTypes.responderEnd : null;\n        if (incrementalTouch) {\n          var gesture = ResponderSyntheticEvent.getPooled(incrementalTouch, responderInst, nativeEvent, nativeEventTarget);\n          gesture.touchHistory = ResponderTouchHistoryStore.touchHistory;\n          accumulateDirectDispatches$1(gesture);\n          extracted = accumulate(extracted, gesture);\n        }\n        var isResponderTerminate = responderInst && topLevelType === TOP_TOUCH_CANCEL;\n        var isResponderRelease = responderInst && !isResponderTerminate && isEndish(topLevelType) && noResponderTouches(nativeEvent);\n        var finalTouch = isResponderTerminate ? eventTypes.responderTerminate : isResponderRelease ? eventTypes.responderRelease : null;\n        if (finalTouch) {\n          var finalEvent = ResponderSyntheticEvent.getPooled(finalTouch, responderInst, nativeEvent, nativeEventTarget);\n          finalEvent.touchHistory = ResponderTouchHistoryStore.touchHistory;\n          accumulateDirectDispatches$1(finalEvent);\n          extracted = accumulate(extracted, finalEvent);\n          changeResponder(null);\n        }\n        return extracted;\n      },\n      GlobalResponderHandler: null,\n      injection: {\n        injectGlobalResponderHandler: function (GlobalResponderHandler) {\n          ResponderEventPlugin.GlobalResponderHandler = GlobalResponderHandler;\n        }\n      }\n    };\n    var eventPluginOrder = null;\n    var namesToPlugins = {};\n    function recomputePluginOrdering() {\n      if (!eventPluginOrder) {\n        return;\n      }\n      for (var pluginName in namesToPlugins) {\n        var pluginModule = namesToPlugins[pluginName];\n        var pluginIndex = eventPluginOrder.indexOf(pluginName);\n        if (pluginIndex <= -1) {\n          throw new Error(\"EventPluginRegistry: Cannot inject event plugins that do not exist in \" + (\"the plugin ordering, `\" + pluginName + \"`.\"));\n        }\n        if (plugins[pluginIndex]) {\n          continue;\n        }\n        if (!pluginModule.extractEvents) {\n          throw new Error(\"EventPluginRegistry: Event plugins must implement an `extractEvents` \" + (\"method, but `\" + pluginName + \"` does not.\"));\n        }\n        plugins[pluginIndex] = pluginModule;\n        var publishedEvents = pluginModule.eventTypes;\n        for (var eventName in publishedEvents) {\n          if (!publishEventForPlugin(publishedEvents[eventName], pluginModule, eventName)) {\n            throw new Error(\"EventPluginRegistry: Failed to publish event `\" + eventName + \"` for plugin `\" + pluginName + \"`.\");\n          }\n        }\n      }\n    }\n    function publishEventForPlugin(dispatchConfig, pluginModule, eventName) {\n      if (eventNameDispatchConfigs.hasOwnProperty(eventName)) {\n        throw new Error(\"EventPluginRegistry: More than one plugin attempted to publish the same \" + (\"event name, `\" + eventName + \"`.\"));\n      }\n      eventNameDispatchConfigs[eventName] = dispatchConfig;\n      var phasedRegistrationNames = dispatchConfig.phasedRegistrationNames;\n      if (phasedRegistrationNames) {\n        for (var phaseName in phasedRegistrationNames) {\n          if (phasedRegistrationNames.hasOwnProperty(phaseName)) {\n            var phasedRegistrationName = phasedRegistrationNames[phaseName];\n            publishRegistrationName(phasedRegistrationName, pluginModule);\n          }\n        }\n        return true;\n      } else if (dispatchConfig.registrationName) {\n        publishRegistrationName(dispatchConfig.registrationName, pluginModule);\n        return true;\n      }\n      return false;\n    }\n    function publishRegistrationName(registrationName, pluginModule, eventName) {\n      if (registrationNameModules[registrationName]) {\n        throw new Error(\"EventPluginRegistry: More than one plugin attempted to publish the same \" + (\"registration name, `\" + registrationName + \"`.\"));\n      }\n      registrationNameModules[registrationName] = pluginModule;\n      {\n        registrationName.toLowerCase();\n      }\n    }\n    var plugins = [];\n    var eventNameDispatchConfigs = {};\n    var registrationNameModules = {};\n    function injectEventPluginOrder(injectedEventPluginOrder) {\n      if (eventPluginOrder) {\n        throw new Error(\"EventPluginRegistry: Cannot inject event plugin ordering more than \" + \"once. You are likely trying to load more than one copy of React.\");\n      }\n      eventPluginOrder = Array.prototype.slice.call(injectedEventPluginOrder);\n      recomputePluginOrdering();\n    }\n    function injectEventPluginsByName(injectedNamesToPlugins) {\n      var isOrderingDirty = false;\n      for (var pluginName in injectedNamesToPlugins) {\n        if (!injectedNamesToPlugins.hasOwnProperty(pluginName)) {\n          continue;\n        }\n        var pluginModule = injectedNamesToPlugins[pluginName];\n        if (!namesToPlugins.hasOwnProperty(pluginName) || namesToPlugins[pluginName] !== pluginModule) {\n          if (namesToPlugins[pluginName]) {\n            throw new Error(\"EventPluginRegistry: Cannot inject two different event plugins \" + (\"using the same name, `\" + pluginName + \"`.\"));\n          }\n          namesToPlugins[pluginName] = pluginModule;\n          isOrderingDirty = true;\n        }\n      }\n      if (isOrderingDirty) {\n        recomputePluginOrdering();\n      }\n    }\n    function getListener(inst, registrationName) {\n      var stateNode = inst.stateNode;\n      if (stateNode === null) {\n        return null;\n      }\n      var props = getFiberCurrentPropsFromNode$1(stateNode);\n      if (props === null) {\n        return null;\n      }\n      var listener = props[registrationName];\n      if (listener && typeof listener !== \"function\") {\n        throw new Error(\"Expected `\" + registrationName + \"` listener to be a function, instead got a value of `\" + typeof listener + \"` type.\");\n      }\n      return listener;\n    }\n    var customBubblingEventTypes = ReactNativePrivateInterface.ReactNativeViewConfigRegistry.customBubblingEventTypes,\n      customDirectEventTypes = ReactNativePrivateInterface.ReactNativeViewConfigRegistry.customDirectEventTypes;\n    function listenerAtPhase(inst, event, propagationPhase) {\n      var registrationName = event.dispatchConfig.phasedRegistrationNames[propagationPhase];\n      return getListener(inst, registrationName);\n    }\n    function accumulateDirectionalDispatches(inst, phase, event) {\n      {\n        if (!inst) {\n          error(\"Dispatching inst must not be null\");\n        }\n      }\n      var listener = listenerAtPhase(inst, event, phase);\n      if (listener) {\n        event._dispatchListeners = accumulateInto(event._dispatchListeners, listener);\n        event._dispatchInstances = accumulateInto(event._dispatchInstances, inst);\n      }\n    }\n    function getParent(inst) {\n      do {\n        inst = inst.return;\n      } while (inst && inst.tag !== HostComponent);\n      if (inst) {\n        return inst;\n      }\n      return null;\n    }\n    function traverseTwoPhase(inst, fn, arg, skipBubbling) {\n      var path = [];\n      while (inst) {\n        path.push(inst);\n        inst = getParent(inst);\n      }\n      var i;\n      for (i = path.length; i-- > 0;) {\n        fn(path[i], \"captured\", arg);\n      }\n      if (skipBubbling) {\n        fn(path[0], \"bubbled\", arg);\n      } else {\n        for (i = 0; i < path.length; i++) {\n          fn(path[i], \"bubbled\", arg);\n        }\n      }\n    }\n    function accumulateTwoPhaseDispatchesSingle(event) {\n      if (event && event.dispatchConfig.phasedRegistrationNames) {\n        traverseTwoPhase(event._targetInst, accumulateDirectionalDispatches, event, false);\n      }\n    }\n    function accumulateTwoPhaseDispatches(events) {\n      forEachAccumulated(events, accumulateTwoPhaseDispatchesSingle);\n    }\n    function accumulateCapturePhaseDispatches(event) {\n      if (event && event.dispatchConfig.phasedRegistrationNames) {\n        traverseTwoPhase(event._targetInst, accumulateDirectionalDispatches, event, true);\n      }\n    }\n    function accumulateDispatches(inst, ignoredDirection, event) {\n      if (inst && event && event.dispatchConfig.registrationName) {\n        var registrationName = event.dispatchConfig.registrationName;\n        var listener = getListener(inst, registrationName);\n        if (listener) {\n          event._dispatchListeners = accumulateInto(event._dispatchListeners, listener);\n          event._dispatchInstances = accumulateInto(event._dispatchInstances, inst);\n        }\n      }\n    }\n    function accumulateDirectDispatchesSingle(event) {\n      if (event && event.dispatchConfig.registrationName) {\n        accumulateDispatches(event._targetInst, null, event);\n      }\n    }\n    function accumulateDirectDispatches(events) {\n      forEachAccumulated(events, accumulateDirectDispatchesSingle);\n    }\n    var ReactNativeBridgeEventPlugin = {\n      eventTypes: {},\n      extractEvents: function (topLevelType, targetInst, nativeEvent, nativeEventTarget) {\n        if (targetInst == null) {\n          return null;\n        }\n        var bubbleDispatchConfig = customBubblingEventTypes[topLevelType];\n        var directDispatchConfig = customDirectEventTypes[topLevelType];\n        if (!bubbleDispatchConfig && !directDispatchConfig) {\n          throw new Error('Unsupported top level event type \"' + topLevelType + '\" dispatched');\n        }\n        var event = SyntheticEvent.getPooled(bubbleDispatchConfig || directDispatchConfig, targetInst, nativeEvent, nativeEventTarget);\n        if (bubbleDispatchConfig) {\n          var skipBubbling = event != null && event.dispatchConfig.phasedRegistrationNames != null && event.dispatchConfig.phasedRegistrationNames.skipBubbling;\n          if (skipBubbling) {\n            accumulateCapturePhaseDispatches(event);\n          } else {\n            accumulateTwoPhaseDispatches(event);\n          }\n        } else if (directDispatchConfig) {\n          accumulateDirectDispatches(event);\n        } else {\n          return null;\n        }\n        return event;\n      }\n    };\n    var ReactNativeEventPluginOrder = [\"ResponderEventPlugin\", \"ReactNativeBridgeEventPlugin\"];\n    injectEventPluginOrder(ReactNativeEventPluginOrder);\n    injectEventPluginsByName({\n      ResponderEventPlugin: ResponderEventPlugin,\n      ReactNativeBridgeEventPlugin: ReactNativeBridgeEventPlugin\n    });\n    var instanceCache = new Map();\n    var instanceProps = new Map();\n    function precacheFiberNode(hostInst, tag) {\n      instanceCache.set(tag, hostInst);\n    }\n    function uncacheFiberNode(tag) {\n      instanceCache.delete(tag);\n      instanceProps.delete(tag);\n    }\n    function getInstanceFromTag(tag) {\n      return instanceCache.get(tag) || null;\n    }\n    function getTagFromInstance(inst) {\n      var nativeInstance = inst.stateNode;\n      var tag = nativeInstance._nativeTag;\n      if (tag === undefined && nativeInstance.canonical != null) {\n        tag = nativeInstance.canonical.nativeTag;\n        nativeInstance = nativeInstance.canonical.publicInstance;\n      }\n      if (!tag) {\n        throw new Error(\"All native instances should have a tag.\");\n      }\n      return nativeInstance;\n    }\n    function getFiberCurrentPropsFromNode(stateNode) {\n      return instanceProps.get(stateNode._nativeTag) || null;\n    }\n    function updateFiberProps(tag, props) {\n      instanceProps.set(tag, props);\n    }\n    var batchedUpdatesImpl = function (fn, bookkeeping) {\n      return fn(bookkeeping);\n    };\n    var isInsideEventHandler = false;\n    function batchedUpdates$1(fn, bookkeeping) {\n      if (isInsideEventHandler) {\n        return fn(bookkeeping);\n      }\n      isInsideEventHandler = true;\n      try {\n        return batchedUpdatesImpl(fn, bookkeeping);\n      } finally {\n        isInsideEventHandler = false;\n      }\n    }\n    function setBatchingImplementation(_batchedUpdatesImpl, _discreteUpdatesImpl) {\n      batchedUpdatesImpl = _batchedUpdatesImpl;\n    }\n    var eventQueue = null;\n    function executeDispatchesAndRelease(event) {\n      if (event) {\n        executeDispatchesInOrder(event);\n        if (!event.isPersistent()) {\n          event.constructor.release(event);\n        }\n      }\n    }\n    function executeDispatchesAndReleaseTopLevel(e) {\n      return executeDispatchesAndRelease(e);\n    }\n    function runEventsInBatch(events) {\n      if (events !== null) {\n        eventQueue = accumulateInto(eventQueue, events);\n      }\n      var processingEventQueue = eventQueue;\n      eventQueue = null;\n      if (!processingEventQueue) {\n        return;\n      }\n      forEachAccumulated(processingEventQueue, executeDispatchesAndReleaseTopLevel);\n      if (eventQueue) {\n        throw new Error(\"processEventQueue(): Additional events were enqueued while processing \" + \"an event queue. Support for this has not yet been implemented.\");\n      }\n      rethrowCaughtError();\n    }\n    var EMPTY_NATIVE_EVENT = {};\n    function touchSubsequence(touches, indices) {\n      var ret = [];\n      for (var i = 0; i < indices.length; i++) {\n        ret.push(touches[indices[i]]);\n      }\n      return ret;\n    }\n    function removeTouchesAtIndices(touches, indices) {\n      var rippedOut = [];\n      var temp = touches;\n      for (var i = 0; i < indices.length; i++) {\n        var index = indices[i];\n        rippedOut.push(touches[index]);\n        temp[index] = null;\n      }\n      var fillAt = 0;\n      for (var j = 0; j < temp.length; j++) {\n        var cur = temp[j];\n        if (cur !== null) {\n          temp[fillAt++] = cur;\n        }\n      }\n      temp.length = fillAt;\n      return rippedOut;\n    }\n    function _receiveRootNodeIDEvent(rootNodeID, topLevelType, nativeEventParam) {\n      var nativeEvent = nativeEventParam || EMPTY_NATIVE_EVENT;\n      var inst = getInstanceFromTag(rootNodeID);\n      var target = null;\n      if (inst != null) {\n        target = inst.stateNode;\n      }\n      batchedUpdates$1(function () {\n        runExtractedPluginEventsInBatch(topLevelType, inst, nativeEvent, target);\n      });\n    }\n    function extractPluginEvents(topLevelType, targetInst, nativeEvent, nativeEventTarget) {\n      var events = null;\n      var legacyPlugins = plugins;\n      for (var i = 0; i < legacyPlugins.length; i++) {\n        var possiblePlugin = legacyPlugins[i];\n        if (possiblePlugin) {\n          var extractedEvents = possiblePlugin.extractEvents(topLevelType, targetInst, nativeEvent, nativeEventTarget);\n          if (extractedEvents) {\n            events = accumulateInto(events, extractedEvents);\n          }\n        }\n      }\n      return events;\n    }\n    function runExtractedPluginEventsInBatch(topLevelType, targetInst, nativeEvent, nativeEventTarget) {\n      var events = extractPluginEvents(topLevelType, targetInst, nativeEvent, nativeEventTarget);\n      runEventsInBatch(events);\n    }\n    function receiveEvent(rootNodeID, topLevelType, nativeEventParam) {\n      _receiveRootNodeIDEvent(rootNodeID, topLevelType, nativeEventParam);\n    }\n    function receiveTouches(eventTopLevelType, touches, changedIndices) {\n      var changedTouches = eventTopLevelType === \"topTouchEnd\" || eventTopLevelType === \"topTouchCancel\" ? removeTouchesAtIndices(touches, changedIndices) : touchSubsequence(touches, changedIndices);\n      for (var jj = 0; jj < changedTouches.length; jj++) {\n        var touch = changedTouches[jj];\n        touch.changedTouches = changedTouches;\n        touch.touches = touches;\n        var nativeEvent = touch;\n        var rootNodeID = null;\n        var target = nativeEvent.target;\n        if (target !== null && target !== undefined) {\n          if (target < 1) {\n            {\n              error(\"A view is reporting that a touch occurred on tag zero.\");\n            }\n          } else {\n            rootNodeID = target;\n          }\n        }\n        _receiveRootNodeIDEvent(rootNodeID, eventTopLevelType, nativeEvent);\n      }\n    }\n    var ReactNativeGlobalResponderHandler = {\n      onChange: function (from, to, blockNativeResponder) {\n        if (to !== null) {\n          var tag = to.stateNode._nativeTag;\n          ReactNativePrivateInterface.UIManager.setJSResponder(tag, blockNativeResponder);\n        } else {\n          ReactNativePrivateInterface.UIManager.clearJSResponder();\n        }\n      }\n    };\n    ReactNativePrivateInterface.RCTEventEmitter.register({\n      receiveEvent: receiveEvent,\n      receiveTouches: receiveTouches\n    });\n    setComponentTree(getFiberCurrentPropsFromNode, getInstanceFromTag, getTagFromInstance);\n    ResponderEventPlugin.injection.injectGlobalResponderHandler(ReactNativeGlobalResponderHandler);\n    function get(key) {\n      return key._reactInternals;\n    }\n    function set(key, value) {\n      key._reactInternals = value;\n    }\n    var enableSchedulingProfiler = false;\n    var enableProfilerTimer = true;\n    var enableProfilerCommitHooks = true;\n    var enableProfilerNestedUpdatePhase = true;\n    var syncLaneExpirationMs = 250;\n    var transitionLaneExpirationMs = 5000;\n    var enableLazyContextPropagation = false;\n    var enableLegacyHidden = false;\n    var enableAsyncActions = false;\n    var REACT_ELEMENT_TYPE = Symbol.for(\"react.element\");\n    var REACT_PORTAL_TYPE = Symbol.for(\"react.portal\");\n    var REACT_FRAGMENT_TYPE = Symbol.for(\"react.fragment\");\n    var REACT_STRICT_MODE_TYPE = Symbol.for(\"react.strict_mode\");\n    var REACT_PROFILER_TYPE = Symbol.for(\"react.profiler\");\n    var REACT_PROVIDER_TYPE = Symbol.for(\"react.provider\");\n    var REACT_CONTEXT_TYPE = Symbol.for(\"react.context\");\n    var REACT_FORWARD_REF_TYPE = Symbol.for(\"react.forward_ref\");\n    var REACT_SUSPENSE_TYPE = Symbol.for(\"react.suspense\");\n    var REACT_SUSPENSE_LIST_TYPE = Symbol.for(\"react.suspense_list\");\n    var REACT_MEMO_TYPE = Symbol.for(\"react.memo\");\n    var REACT_LAZY_TYPE = Symbol.for(\"react.lazy\");\n    var REACT_SCOPE_TYPE = Symbol.for(\"react.scope\");\n    var REACT_DEBUG_TRACING_MODE_TYPE = Symbol.for(\"react.debug_trace_mode\");\n    var REACT_OFFSCREEN_TYPE = Symbol.for(\"react.offscreen\");\n    var REACT_LEGACY_HIDDEN_TYPE = Symbol.for(\"react.legacy_hidden\");\n    var REACT_CACHE_TYPE = Symbol.for(\"react.cache\");\n    var REACT_TRACING_MARKER_TYPE = Symbol.for(\"react.tracing_marker\");\n    var MAYBE_ITERATOR_SYMBOL = Symbol.iterator;\n    var FAUX_ITERATOR_SYMBOL = \"@@iterator\";\n    function getIteratorFn(maybeIterable) {\n      if (maybeIterable === null || typeof maybeIterable !== \"object\") {\n        return null;\n      }\n      var maybeIterator = MAYBE_ITERATOR_SYMBOL && maybeIterable[MAYBE_ITERATOR_SYMBOL] || maybeIterable[FAUX_ITERATOR_SYMBOL];\n      if (typeof maybeIterator === \"function\") {\n        return maybeIterator;\n      }\n      return null;\n    }\n    function getWrappedName$1(outerType, innerType, wrapperName) {\n      var displayName = outerType.displayName;\n      if (displayName) {\n        return displayName;\n      }\n      var functionName = innerType.displayName || innerType.name || \"\";\n      return functionName !== \"\" ? wrapperName + \"(\" + functionName + \")\" : wrapperName;\n    }\n    function getContextName$1(type) {\n      return type.displayName || \"Context\";\n    }\n    var REACT_CLIENT_REFERENCE = Symbol.for(\"react.client.reference\");\n    function getComponentNameFromType(type) {\n      if (type == null) {\n        return null;\n      }\n      if (typeof type === \"function\") {\n        if (type.$$typeof === REACT_CLIENT_REFERENCE) {\n          return null;\n        }\n        return type.displayName || type.name || null;\n      }\n      if (typeof type === \"string\") {\n        return type;\n      }\n      switch (type) {\n        case REACT_FRAGMENT_TYPE:\n          return \"Fragment\";\n        case REACT_PORTAL_TYPE:\n          return \"Portal\";\n        case REACT_PROFILER_TYPE:\n          return \"Profiler\";\n        case REACT_STRICT_MODE_TYPE:\n          return \"StrictMode\";\n        case REACT_SUSPENSE_TYPE:\n          return \"Suspense\";\n        case REACT_SUSPENSE_LIST_TYPE:\n          return \"SuspenseList\";\n      }\n      if (typeof type === \"object\") {\n        {\n          if (typeof type.tag === \"number\") {\n            error(\"Received an unexpected object in getComponentNameFromType(). \" + \"This is likely a bug in React. Please file an issue.\");\n          }\n        }\n        switch (type.$$typeof) {\n          case REACT_CONTEXT_TYPE:\n            var context = type;\n            return getContextName$1(context) + \".Consumer\";\n          case REACT_PROVIDER_TYPE:\n            var provider = type;\n            return getContextName$1(provider._context) + \".Provider\";\n          case REACT_FORWARD_REF_TYPE:\n            return getWrappedName$1(type, type.render, \"ForwardRef\");\n          case REACT_MEMO_TYPE:\n            var outerName = type.displayName || null;\n            if (outerName !== null) {\n              return outerName;\n            }\n            return getComponentNameFromType(type.type) || \"Memo\";\n          case REACT_LAZY_TYPE:\n            {\n              var lazyComponent = type;\n              var payload = lazyComponent._payload;\n              var init = lazyComponent._init;\n              try {\n                return getComponentNameFromType(init(payload));\n              } catch (x) {\n                return null;\n              }\n            }\n        }\n      }\n      return null;\n    }\n    function getWrappedName(outerType, innerType, wrapperName) {\n      var functionName = innerType.displayName || innerType.name || \"\";\n      return outerType.displayName || (functionName !== \"\" ? wrapperName + \"(\" + functionName + \")\" : wrapperName);\n    }\n    function getContextName(type) {\n      return type.displayName || \"Context\";\n    }\n    function getComponentNameFromFiber(fiber) {\n      var tag = fiber.tag,\n        type = fiber.type;\n      switch (tag) {\n        case CacheComponent:\n          return \"Cache\";\n        case ContextConsumer:\n          var context = type;\n          return getContextName(context) + \".Consumer\";\n        case ContextProvider:\n          var provider = type;\n          return getContextName(provider._context) + \".Provider\";\n        case DehydratedFragment:\n          return \"DehydratedFragment\";\n        case ForwardRef:\n          return getWrappedName(type, type.render, \"ForwardRef\");\n        case Fragment:\n          return \"Fragment\";\n        case HostHoistable:\n        case HostSingleton:\n        case HostComponent:\n          return type;\n        case HostPortal:\n          return \"Portal\";\n        case HostRoot:\n          return \"Root\";\n        case HostText:\n          return \"Text\";\n        case LazyComponent:\n          return getComponentNameFromType(type);\n        case Mode:\n          if (type === REACT_STRICT_MODE_TYPE) {\n            return \"StrictMode\";\n          }\n          return \"Mode\";\n        case OffscreenComponent:\n          return \"Offscreen\";\n        case Profiler:\n          return \"Profiler\";\n        case ScopeComponent:\n          return \"Scope\";\n        case SuspenseComponent:\n          return \"Suspense\";\n        case SuspenseListComponent:\n          return \"SuspenseList\";\n        case TracingMarkerComponent:\n          return \"TracingMarker\";\n        case ClassComponent:\n        case FunctionComponent:\n        case IncompleteClassComponent:\n        case IndeterminateComponent:\n        case MemoComponent:\n        case SimpleMemoComponent:\n          if (typeof type === \"function\") {\n            return type.displayName || type.name || null;\n          }\n          if (typeof type === \"string\") {\n            return type;\n          }\n          break;\n      }\n      return null;\n    }\n    var NoFlags$1 = 0;\n    var PerformedWork = 1;\n    var Placement = 2;\n    var DidCapture = 128;\n    var Hydrating = 4096;\n    var Update = 4;\n    var ChildDeletion = 16;\n    var ContentReset = 32;\n    var Callback = 64;\n    var ForceClientRender = 256;\n    var Ref = 512;\n    var Snapshot = 1024;\n    var Passive$1 = 2048;\n    var Visibility = 8192;\n    var StoreConsistency = 16384;\n    var ScheduleRetry = StoreConsistency;\n    var ShouldSuspendCommit = Visibility;\n    var DidDefer = ContentReset;\n    var LifecycleEffectMask = Passive$1 | Update | Callback | Ref | Snapshot | StoreConsistency;\n    var HostEffectMask = 32767;\n    var Incomplete = 32768;\n    var ShouldCapture = 65536;\n    var ForceUpdateForLegacySuspense = 131072;\n    var Forked = 1048576;\n    var RefStatic = 2097152;\n    var LayoutStatic = 4194304;\n    var PassiveStatic = 8388608;\n    var MaySuspendCommit = 16777216;\n    var PlacementDEV = 33554432;\n    var MountLayoutDev = 67108864;\n    var MountPassiveDev = 134217728;\n    var BeforeMutationMask = Update | Snapshot | 0;\n    var MutationMask = Placement | Update | ChildDeletion | ContentReset | Ref | Hydrating | Visibility;\n    var LayoutMask = Update | Callback | Ref | Visibility;\n    var PassiveMask = Passive$1 | Visibility | ChildDeletion;\n    var StaticMask = LayoutStatic | PassiveStatic | RefStatic | MaySuspendCommit;\n    var ReactCurrentOwner$3 = ReactSharedInternals.ReactCurrentOwner;\n    function getNearestMountedFiber(fiber) {\n      var node = fiber;\n      var nearestMounted = fiber;\n      if (!fiber.alternate) {\n        var nextNode = node;\n        do {\n          node = nextNode;\n          if ((node.flags & (Placement | Hydrating)) !== NoFlags$1) {\n            nearestMounted = node.return;\n          }\n          nextNode = node.return;\n        } while (nextNode);\n      } else {\n        while (node.return) {\n          node = node.return;\n        }\n      }\n      if (node.tag === HostRoot) {\n        return nearestMounted;\n      }\n      return null;\n    }\n    function isFiberMounted(fiber) {\n      return getNearestMountedFiber(fiber) === fiber;\n    }\n    function isMounted(component) {\n      {\n        var owner = ReactCurrentOwner$3.current;\n        if (owner !== null && owner.tag === ClassComponent) {\n          var ownerFiber = owner;\n          var instance = ownerFiber.stateNode;\n          if (!instance._warnedAboutRefsInRender) {\n            error(\"%s is accessing isMounted inside its render() function. \" + \"render() should be a pure function of props and state. It should \" + \"never access something that requires stale data from the previous \" + \"render, such as refs. Move this logic to componentDidMount and \" + \"componentDidUpdate instead.\", getComponentNameFromFiber(ownerFiber) || \"A component\");\n          }\n          instance._warnedAboutRefsInRender = true;\n        }\n      }\n      var fiber = get(component);\n      if (!fiber) {\n        return false;\n      }\n      return getNearestMountedFiber(fiber) === fiber;\n    }\n    function assertIsMounted(fiber) {\n      if (getNearestMountedFiber(fiber) !== fiber) {\n        throw new Error(\"Unable to find node on an unmounted component.\");\n      }\n    }\n    function findCurrentFiberUsingSlowPath(fiber) {\n      var alternate = fiber.alternate;\n      if (!alternate) {\n        var nearestMounted = getNearestMountedFiber(fiber);\n        if (nearestMounted === null) {\n          throw new Error(\"Unable to find node on an unmounted component.\");\n        }\n        if (nearestMounted !== fiber) {\n          return null;\n        }\n        return fiber;\n      }\n      var a = fiber;\n      var b = alternate;\n      while (true) {\n        var parentA = a.return;\n        if (parentA === null) {\n          break;\n        }\n        var parentB = parentA.alternate;\n        if (parentB === null) {\n          var nextParent = parentA.return;\n          if (nextParent !== null) {\n            a = b = nextParent;\n            continue;\n          }\n          break;\n        }\n        if (parentA.child === parentB.child) {\n          var child = parentA.child;\n          while (child) {\n            if (child === a) {\n              assertIsMounted(parentA);\n              return fiber;\n            }\n            if (child === b) {\n              assertIsMounted(parentA);\n              return alternate;\n            }\n            child = child.sibling;\n          }\n          throw new Error(\"Unable to find node on an unmounted component.\");\n        }\n        if (a.return !== b.return) {\n          a = parentA;\n          b = parentB;\n        } else {\n          var didFindChild = false;\n          var _child = parentA.child;\n          while (_child) {\n            if (_child === a) {\n              didFindChild = true;\n              a = parentA;\n              b = parentB;\n              break;\n            }\n            if (_child === b) {\n              didFindChild = true;\n              b = parentA;\n              a = parentB;\n              break;\n            }\n            _child = _child.sibling;\n          }\n          if (!didFindChild) {\n            _child = parentB.child;\n            while (_child) {\n              if (_child === a) {\n                didFindChild = true;\n                a = parentB;\n                b = parentA;\n                break;\n              }\n              if (_child === b) {\n                didFindChild = true;\n                b = parentB;\n                a = parentA;\n                break;\n              }\n              _child = _child.sibling;\n            }\n            if (!didFindChild) {\n              throw new Error(\"Child was not found in either parent set. This indicates a bug \" + \"in React related to the return pointer. Please file an issue.\");\n            }\n          }\n        }\n        if (a.alternate !== b) {\n          throw new Error(\"Return fibers should always be each others' alternates. \" + \"This error is likely caused by a bug in React. Please file an issue.\");\n        }\n      }\n      if (a.tag !== HostRoot) {\n        throw new Error(\"Unable to find node on an unmounted component.\");\n      }\n      if (a.stateNode.current === a) {\n        return fiber;\n      }\n      return alternate;\n    }\n    function findCurrentHostFiber(parent) {\n      var currentParent = findCurrentFiberUsingSlowPath(parent);\n      return currentParent !== null ? findCurrentHostFiberImpl(currentParent) : null;\n    }\n    function findCurrentHostFiberImpl(node) {\n      var tag = node.tag;\n      if (tag === HostComponent || tag === HostHoistable || tag === HostSingleton || tag === HostText) {\n        return node;\n      }\n      var child = node.child;\n      while (child !== null) {\n        var match = findCurrentHostFiberImpl(child);\n        if (match !== null) {\n          return match;\n        }\n        child = child.sibling;\n      }\n      return null;\n    }\n    function doesFiberContain(parentFiber, childFiber) {\n      var node = childFiber;\n      var parentFiberAlternate = parentFiber.alternate;\n      while (node !== null) {\n        if (node === parentFiber || node === parentFiberAlternate) {\n          return true;\n        }\n        node = node.return;\n      }\n      return false;\n    }\n    var emptyObject$1 = {};\n    var removedKeys = null;\n    var removedKeyCount = 0;\n    var deepDifferOptions = {\n      unsafelyIgnoreFunctions: true\n    };\n    function defaultDiffer(prevProp, nextProp) {\n      if (typeof nextProp !== \"object\" || nextProp === null) {\n        return true;\n      } else {\n        return ReactNativePrivateInterface.deepDiffer(prevProp, nextProp, deepDifferOptions);\n      }\n    }\n    function restoreDeletedValuesInNestedArray(updatePayload, node, validAttributes) {\n      if (isArray(node)) {\n        var i = node.length;\n        while (i-- && removedKeyCount > 0) {\n          restoreDeletedValuesInNestedArray(updatePayload, node[i], validAttributes);\n        }\n      } else if (node && removedKeyCount > 0) {\n        var obj = node;\n        for (var propKey in removedKeys) {\n          if (!removedKeys[propKey]) {\n            continue;\n          }\n          var nextProp = obj[propKey];\n          if (nextProp === undefined) {\n            continue;\n          }\n          var attributeConfig = validAttributes[propKey];\n          if (!attributeConfig) {\n            continue;\n          }\n          if (typeof nextProp === \"function\") {\n            nextProp = true;\n          }\n          if (typeof nextProp === \"undefined\") {\n            nextProp = null;\n          }\n          if (typeof attributeConfig !== \"object\") {\n            updatePayload[propKey] = nextProp;\n          } else if (typeof attributeConfig.diff === \"function\" || typeof attributeConfig.process === \"function\") {\n            var nextValue = typeof attributeConfig.process === \"function\" ? attributeConfig.process(nextProp) : nextProp;\n            updatePayload[propKey] = nextValue;\n          }\n          removedKeys[propKey] = false;\n          removedKeyCount--;\n        }\n      }\n    }\n    function diffNestedArrayProperty(updatePayload, prevArray, nextArray, validAttributes) {\n      var minLength = prevArray.length < nextArray.length ? prevArray.length : nextArray.length;\n      var i;\n      for (i = 0; i < minLength; i++) {\n        updatePayload = diffNestedProperty(updatePayload, prevArray[i], nextArray[i], validAttributes);\n      }\n      for (; i < prevArray.length; i++) {\n        updatePayload = clearNestedProperty(updatePayload, prevArray[i], validAttributes);\n      }\n      for (; i < nextArray.length; i++) {\n        updatePayload = addNestedProperty(updatePayload, nextArray[i], validAttributes);\n      }\n      return updatePayload;\n    }\n    function diffNestedProperty(updatePayload, prevProp, nextProp, validAttributes) {\n      if (!updatePayload && prevProp === nextProp) {\n        return updatePayload;\n      }\n      if (!prevProp || !nextProp) {\n        if (nextProp) {\n          return addNestedProperty(updatePayload, nextProp, validAttributes);\n        }\n        if (prevProp) {\n          return clearNestedProperty(updatePayload, prevProp, validAttributes);\n        }\n        return updatePayload;\n      }\n      if (!isArray(prevProp) && !isArray(nextProp)) {\n        return diffProperties(updatePayload, prevProp, nextProp, validAttributes);\n      }\n      if (isArray(prevProp) && isArray(nextProp)) {\n        return diffNestedArrayProperty(updatePayload, prevProp, nextProp, validAttributes);\n      }\n      if (isArray(prevProp)) {\n        return diffProperties(updatePayload, ReactNativePrivateInterface.flattenStyle(prevProp), nextProp, validAttributes);\n      }\n      return diffProperties(updatePayload, prevProp, ReactNativePrivateInterface.flattenStyle(nextProp), validAttributes);\n    }\n    function addNestedProperty(updatePayload, nextProp, validAttributes) {\n      if (!nextProp) {\n        return updatePayload;\n      }\n      if (!isArray(nextProp)) {\n        return addProperties(updatePayload, nextProp, validAttributes);\n      }\n      for (var i = 0; i < nextProp.length; i++) {\n        updatePayload = addNestedProperty(updatePayload, nextProp[i], validAttributes);\n      }\n      return updatePayload;\n    }\n    function clearNestedProperty(updatePayload, prevProp, validAttributes) {\n      if (!prevProp) {\n        return updatePayload;\n      }\n      if (!isArray(prevProp)) {\n        return clearProperties(updatePayload, prevProp, validAttributes);\n      }\n      for (var i = 0; i < prevProp.length; i++) {\n        updatePayload = clearNestedProperty(updatePayload, prevProp[i], validAttributes);\n      }\n      return updatePayload;\n    }\n    function diffProperties(updatePayload, prevProps, nextProps, validAttributes) {\n      var attributeConfig;\n      var nextProp;\n      var prevProp;\n      for (var propKey in nextProps) {\n        attributeConfig = validAttributes[propKey];\n        if (!attributeConfig) {\n          continue;\n        }\n        prevProp = prevProps[propKey];\n        nextProp = nextProps[propKey];\n        if (typeof nextProp === \"function\") {\n          nextProp = true;\n          if (typeof prevProp === \"function\") {\n            prevProp = true;\n          }\n        }\n        if (typeof nextProp === \"undefined\") {\n          nextProp = null;\n          if (typeof prevProp === \"undefined\") {\n            prevProp = null;\n          }\n        }\n        if (removedKeys) {\n          removedKeys[propKey] = false;\n        }\n        if (updatePayload && updatePayload[propKey] !== undefined) {\n          if (typeof attributeConfig !== \"object\") {\n            updatePayload[propKey] = nextProp;\n          } else if (typeof attributeConfig.diff === \"function\" || typeof attributeConfig.process === \"function\") {\n            var nextValue = typeof attributeConfig.process === \"function\" ? attributeConfig.process(nextProp) : nextProp;\n            updatePayload[propKey] = nextValue;\n          }\n          continue;\n        }\n        if (prevProp === nextProp) {\n          continue;\n        }\n        if (typeof attributeConfig !== \"object\") {\n          if (defaultDiffer(prevProp, nextProp)) {\n            (updatePayload || (updatePayload = {}))[propKey] = nextProp;\n          }\n        } else if (typeof attributeConfig.diff === \"function\" || typeof attributeConfig.process === \"function\") {\n          var shouldUpdate = prevProp === undefined || (typeof attributeConfig.diff === \"function\" ? attributeConfig.diff(prevProp, nextProp) : defaultDiffer(prevProp, nextProp));\n          if (shouldUpdate) {\n            var _nextValue = typeof attributeConfig.process === \"function\" ? attributeConfig.process(nextProp) : nextProp;\n            (updatePayload || (updatePayload = {}))[propKey] = _nextValue;\n          }\n        } else {\n          removedKeys = null;\n          removedKeyCount = 0;\n          updatePayload = diffNestedProperty(updatePayload, prevProp, nextProp, attributeConfig);\n          if (removedKeyCount > 0 && updatePayload) {\n            restoreDeletedValuesInNestedArray(updatePayload, nextProp, attributeConfig);\n            removedKeys = null;\n          }\n        }\n      }\n      for (var _propKey in prevProps) {\n        if (nextProps[_propKey] !== undefined) {\n          continue;\n        }\n        attributeConfig = validAttributes[_propKey];\n        if (!attributeConfig) {\n          continue;\n        }\n        if (updatePayload && updatePayload[_propKey] !== undefined) {\n          continue;\n        }\n        prevProp = prevProps[_propKey];\n        if (prevProp === undefined) {\n          continue;\n        }\n        if (typeof attributeConfig !== \"object\" || typeof attributeConfig.diff === \"function\" || typeof attributeConfig.process === \"function\") {\n          (updatePayload || (updatePayload = {}))[_propKey] = null;\n          if (!removedKeys) {\n            removedKeys = {};\n          }\n          if (!removedKeys[_propKey]) {\n            removedKeys[_propKey] = true;\n            removedKeyCount++;\n          }\n        } else {\n          updatePayload = clearNestedProperty(updatePayload, prevProp, attributeConfig);\n        }\n      }\n      return updatePayload;\n    }\n    function addProperties(updatePayload, props, validAttributes) {\n      return diffProperties(updatePayload, emptyObject$1, props, validAttributes);\n    }\n    function clearProperties(updatePayload, prevProps, validAttributes) {\n      return diffProperties(updatePayload, prevProps, emptyObject$1, validAttributes);\n    }\n    function create(props, validAttributes) {\n      return addProperties(null, props, validAttributes);\n    }\n    function diff(prevProps, nextProps, validAttributes) {\n      return diffProperties(null, prevProps, nextProps, validAttributes);\n    }\n    function mountSafeCallback_NOT_REALLY_SAFE(context, callback) {\n      return function () {\n        if (!callback) {\n          return undefined;\n        }\n        if (typeof context.__isMounted === \"boolean\") {\n          if (!context.__isMounted) {\n            return undefined;\n          }\n        }\n        return callback.apply(context, arguments);\n      };\n    }\n    function warnForStyleProps(props, validAttributes) {\n      {\n        for (var key in validAttributes.style) {\n          if (!(validAttributes[key] || props[key] === undefined)) {\n            error(\"You are setting the style `{ %s\" + \": ... }` as a prop. You \" + \"should nest it in a style object. \" + \"E.g. `{ style: { %s\" + \": ... } }`\", key, key);\n          }\n        }\n      }\n    }\n    var ReactNativeFiberHostComponent = function () {\n      function ReactNativeFiberHostComponent(tag, viewConfig, internalInstanceHandleDEV) {\n        this._children = void 0;\n        this._nativeTag = void 0;\n        this._internalFiberInstanceHandleDEV = void 0;\n        this.viewConfig = void 0;\n        this._nativeTag = tag;\n        this._children = [];\n        this.viewConfig = viewConfig;\n        {\n          this._internalFiberInstanceHandleDEV = internalInstanceHandleDEV;\n        }\n      }\n      var _proto = ReactNativeFiberHostComponent.prototype;\n      _proto.blur = function blur() {\n        ReactNativePrivateInterface.TextInputState.blurTextInput(this);\n      };\n      _proto.focus = function focus() {\n        ReactNativePrivateInterface.TextInputState.focusTextInput(this);\n      };\n      _proto.measure = function measure(callback) {\n        ReactNativePrivateInterface.UIManager.measure(this._nativeTag, mountSafeCallback_NOT_REALLY_SAFE(this, callback));\n      };\n      _proto.measureInWindow = function measureInWindow(callback) {\n        ReactNativePrivateInterface.UIManager.measureInWindow(this._nativeTag, mountSafeCallback_NOT_REALLY_SAFE(this, callback));\n      };\n      _proto.measureLayout = function measureLayout(relativeToNativeNode, onSuccess, onFail) {\n        var relativeNode;\n        if (typeof relativeToNativeNode === \"number\") {\n          relativeNode = relativeToNativeNode;\n        } else {\n          var nativeNode = relativeToNativeNode;\n          if (nativeNode._nativeTag) {\n            relativeNode = nativeNode._nativeTag;\n          }\n        }\n        if (relativeNode == null) {\n          {\n            error(\"Warning: ref.measureLayout must be called with a node handle or a ref to a native component.\");\n          }\n          return;\n        }\n        ReactNativePrivateInterface.UIManager.measureLayout(this._nativeTag, relativeNode, mountSafeCallback_NOT_REALLY_SAFE(this, onFail), mountSafeCallback_NOT_REALLY_SAFE(this, onSuccess));\n      };\n      _proto.setNativeProps = function setNativeProps(nativeProps) {\n        {\n          warnForStyleProps(nativeProps, this.viewConfig.validAttributes);\n        }\n        var updatePayload = create(nativeProps, this.viewConfig.validAttributes);\n        if (updatePayload != null) {\n          ReactNativePrivateInterface.UIManager.updateView(this._nativeTag, this.viewConfig.uiViewClassName, updatePayload);\n        }\n      };\n      return ReactNativeFiberHostComponent;\n    }();\n    var scheduleCallback$2 = Scheduler.unstable_scheduleCallback;\n    var cancelCallback$1 = Scheduler.unstable_cancelCallback;\n    var shouldYield = Scheduler.unstable_shouldYield;\n    var requestPaint = Scheduler.unstable_requestPaint;\n    var now$1 = Scheduler.unstable_now;\n    var ImmediatePriority = Scheduler.unstable_ImmediatePriority;\n    var UserBlockingPriority = Scheduler.unstable_UserBlockingPriority;\n    var NormalPriority = Scheduler.unstable_NormalPriority;\n    var IdlePriority = Scheduler.unstable_IdlePriority;\n    var disabledDepth = 0;\n    var prevLog;\n    var prevInfo;\n    var prevWarn;\n    var prevError;\n    var prevGroup;\n    var prevGroupCollapsed;\n    var prevGroupEnd;\n    function disabledLog() {}\n    disabledLog.__reactDisabledLog = true;\n    function disableLogs() {\n      {\n        if (disabledDepth === 0) {\n          prevLog = console.log;\n          prevInfo = console.info;\n          prevWarn = console.warn;\n          prevError = console.error;\n          prevGroup = console.group;\n          prevGroupCollapsed = console.groupCollapsed;\n          prevGroupEnd = console.groupEnd;\n          var props = {\n            configurable: true,\n            enumerable: true,\n            value: disabledLog,\n            writable: true\n          };\n          Object.defineProperties(console, {\n            info: props,\n            log: props,\n            warn: props,\n            error: props,\n            group: props,\n            groupCollapsed: props,\n            groupEnd: props\n          });\n        }\n        disabledDepth++;\n      }\n    }\n    function reenableLogs() {\n      {\n        disabledDepth--;\n        if (disabledDepth === 0) {\n          var props = {\n            configurable: true,\n            enumerable: true,\n            writable: true\n          };\n          Object.defineProperties(console, {\n            log: assign({}, props, {\n              value: prevLog\n            }),\n            info: assign({}, props, {\n              value: prevInfo\n            }),\n            warn: assign({}, props, {\n              value: prevWarn\n            }),\n            error: assign({}, props, {\n              value: prevError\n            }),\n            group: assign({}, props, {\n              value: prevGroup\n            }),\n            groupCollapsed: assign({}, props, {\n              value: prevGroupCollapsed\n            }),\n            groupEnd: assign({}, props, {\n              value: prevGroupEnd\n            })\n          });\n        }\n        if (disabledDepth < 0) {\n          error(\"disabledDepth fell below zero. \" + \"This is a bug in React. Please file an issue.\");\n        }\n      }\n    }\n    var rendererID = null;\n    var injectedHook = null;\n    var hasLoggedError = false;\n    var isDevToolsPresent = typeof __REACT_DEVTOOLS_GLOBAL_HOOK__ !== \"undefined\";\n    function injectInternals(internals) {\n      if (typeof __REACT_DEVTOOLS_GLOBAL_HOOK__ === \"undefined\") {\n        return false;\n      }\n      var hook = __REACT_DEVTOOLS_GLOBAL_HOOK__;\n      if (hook.isDisabled) {\n        return true;\n      }\n      if (!hook.supportsFiber) {\n        {\n          error(\"The installed version of React DevTools is too old and will not work \" + \"with the current version of React. Please update React DevTools. \" + \"https://reactjs.org/link/react-devtools\");\n        }\n        return true;\n      }\n      try {\n        if (enableSchedulingProfiler) ;\n        rendererID = hook.inject(internals);\n        injectedHook = hook;\n      } catch (err) {\n        {\n          error(\"React instrumentation encountered an error: %s.\", err);\n        }\n      }\n      if (hook.checkDCE) {\n        return true;\n      } else {\n        return false;\n      }\n    }\n    function onScheduleRoot(root, children) {\n      {\n        if (injectedHook && typeof injectedHook.onScheduleFiberRoot === \"function\") {\n          try {\n            injectedHook.onScheduleFiberRoot(rendererID, root, children);\n          } catch (err) {\n            if (!hasLoggedError) {\n              hasLoggedError = true;\n              error(\"React instrumentation encountered an error: %s\", err);\n            }\n          }\n        }\n      }\n    }\n    function onCommitRoot(root, eventPriority) {\n      if (injectedHook && typeof injectedHook.onCommitFiberRoot === \"function\") {\n        try {\n          var didError = (root.current.flags & DidCapture) === DidCapture;\n          if (enableProfilerTimer) {\n            var schedulerPriority;\n            switch (eventPriority) {\n              case DiscreteEventPriority:\n                schedulerPriority = ImmediatePriority;\n                break;\n              case ContinuousEventPriority:\n                schedulerPriority = UserBlockingPriority;\n                break;\n              case DefaultEventPriority:\n                schedulerPriority = NormalPriority;\n                break;\n              case IdleEventPriority:\n                schedulerPriority = IdlePriority;\n                break;\n              default:\n                schedulerPriority = NormalPriority;\n                break;\n            }\n            injectedHook.onCommitFiberRoot(rendererID, root, schedulerPriority, didError);\n          }\n        } catch (err) {\n          {\n            if (!hasLoggedError) {\n              hasLoggedError = true;\n              error(\"React instrumentation encountered an error: %s\", err);\n            }\n          }\n        }\n      }\n    }\n    function onPostCommitRoot(root) {\n      if (injectedHook && typeof injectedHook.onPostCommitFiberRoot === \"function\") {\n        try {\n          injectedHook.onPostCommitFiberRoot(rendererID, root);\n        } catch (err) {\n          {\n            if (!hasLoggedError) {\n              hasLoggedError = true;\n              error(\"React instrumentation encountered an error: %s\", err);\n            }\n          }\n        }\n      }\n    }\n    function onCommitUnmount(fiber) {\n      if (injectedHook && typeof injectedHook.onCommitFiberUnmount === \"function\") {\n        try {\n          injectedHook.onCommitFiberUnmount(rendererID, fiber);\n        } catch (err) {\n          {\n            if (!hasLoggedError) {\n              hasLoggedError = true;\n              error(\"React instrumentation encountered an error: %s\", err);\n            }\n          }\n        }\n      }\n    }\n    function setIsStrictModeForDevtools(newIsStrictMode) {\n      {\n        if (newIsStrictMode) {\n          disableLogs();\n        } else {\n          reenableLogs();\n        }\n      }\n    }\n    function injectProfilingHooks(profilingHooks) {}\n    function getLaneLabelMap() {\n      {\n        return null;\n      }\n    }\n    var NoMode = 0;\n    var ConcurrentMode = 1;\n    var ProfileMode = 2;\n    var StrictLegacyMode = 8;\n    var StrictEffectsMode = 16;\n    var NoStrictPassiveEffectsMode = 64;\n    var clz32 = Math.clz32 ? Math.clz32 : clz32Fallback;\n    var log = Math.log;\n    var LN2 = Math.LN2;\n    function clz32Fallback(x) {\n      var asUint = x >>> 0;\n      if (asUint === 0) {\n        return 32;\n      }\n      return 31 - (log(asUint) / LN2 | 0) | 0;\n    }\n    var TotalLanes = 31;\n    var NoLanes = 0;\n    var NoLane = 0;\n    var SyncHydrationLane = 1;\n    var SyncLane = 2;\n    var SyncLaneIndex = 1;\n    var InputContinuousHydrationLane = 4;\n    var InputContinuousLane = 8;\n    var DefaultHydrationLane = 16;\n    var DefaultLane = 32;\n    var SyncUpdateLanes = SyncLane | InputContinuousLane | DefaultLane;\n    var TransitionHydrationLane = 64;\n    var TransitionLanes = 4194176;\n    var TransitionLane1 = 128;\n    var TransitionLane2 = 256;\n    var TransitionLane3 = 512;\n    var TransitionLane4 = 1024;\n    var TransitionLane5 = 2048;\n    var TransitionLane6 = 4096;\n    var TransitionLane7 = 8192;\n    var TransitionLane8 = 16384;\n    var TransitionLane9 = 32768;\n    var TransitionLane10 = 65536;\n    var TransitionLane11 = 131072;\n    var TransitionLane12 = 262144;\n    var TransitionLane13 = 524288;\n    var TransitionLane14 = 1048576;\n    var TransitionLane15 = 2097152;\n    var RetryLanes = 62914560;\n    var RetryLane1 = 4194304;\n    var RetryLane2 = 8388608;\n    var RetryLane3 = 16777216;\n    var RetryLane4 = 33554432;\n    var SomeRetryLane = RetryLane1;\n    var SelectiveHydrationLane = 67108864;\n    var NonIdleLanes = 134217727;\n    var IdleHydrationLane = 134217728;\n    var IdleLane = 268435456;\n    var OffscreenLane = 536870912;\n    var DeferredLane = 1073741824;\n    var UpdateLanes = SyncLane | InputContinuousLane | DefaultLane | TransitionLanes;\n    var NoTimestamp = -1;\n    var nextTransitionLane = TransitionLane1;\n    var nextRetryLane = RetryLane1;\n    function getHighestPriorityLanes(lanes) {\n      {\n        var pendingSyncLanes = lanes & SyncUpdateLanes;\n        if (pendingSyncLanes !== 0) {\n          return pendingSyncLanes;\n        }\n      }\n      switch (getHighestPriorityLane(lanes)) {\n        case SyncHydrationLane:\n          return SyncHydrationLane;\n        case SyncLane:\n          return SyncLane;\n        case InputContinuousHydrationLane:\n          return InputContinuousHydrationLane;\n        case InputContinuousLane:\n          return InputContinuousLane;\n        case DefaultHydrationLane:\n          return DefaultHydrationLane;\n        case DefaultLane:\n          return DefaultLane;\n        case TransitionHydrationLane:\n          return TransitionHydrationLane;\n        case TransitionLane1:\n        case TransitionLane2:\n        case TransitionLane3:\n        case TransitionLane4:\n        case TransitionLane5:\n        case TransitionLane6:\n        case TransitionLane7:\n        case TransitionLane8:\n        case TransitionLane9:\n        case TransitionLane10:\n        case TransitionLane11:\n        case TransitionLane12:\n        case TransitionLane13:\n        case TransitionLane14:\n        case TransitionLane15:\n          return lanes & TransitionLanes;\n        case RetryLane1:\n        case RetryLane2:\n        case RetryLane3:\n        case RetryLane4:\n          return lanes & RetryLanes;\n        case SelectiveHydrationLane:\n          return SelectiveHydrationLane;\n        case IdleHydrationLane:\n          return IdleHydrationLane;\n        case IdleLane:\n          return IdleLane;\n        case OffscreenLane:\n          return OffscreenLane;\n        case DeferredLane:\n          return NoLanes;\n        default:\n          {\n            error(\"Should have found matching lanes. This is a bug in React.\");\n          }\n          return lanes;\n      }\n    }\n    function getNextLanes(root, wipLanes) {\n      var pendingLanes = root.pendingLanes;\n      if (pendingLanes === NoLanes) {\n        return NoLanes;\n      }\n      var nextLanes = NoLanes;\n      var suspendedLanes = root.suspendedLanes;\n      var pingedLanes = root.pingedLanes;\n      var nonIdlePendingLanes = pendingLanes & NonIdleLanes;\n      if (nonIdlePendingLanes !== NoLanes) {\n        var nonIdleUnblockedLanes = nonIdlePendingLanes & ~suspendedLanes;\n        if (nonIdleUnblockedLanes !== NoLanes) {\n          nextLanes = getHighestPriorityLanes(nonIdleUnblockedLanes);\n        } else {\n          var nonIdlePingedLanes = nonIdlePendingLanes & pingedLanes;\n          if (nonIdlePingedLanes !== NoLanes) {\n            nextLanes = getHighestPriorityLanes(nonIdlePingedLanes);\n          }\n        }\n      } else {\n        var unblockedLanes = pendingLanes & ~suspendedLanes;\n        if (unblockedLanes !== NoLanes) {\n          nextLanes = getHighestPriorityLanes(unblockedLanes);\n        } else {\n          if (pingedLanes !== NoLanes) {\n            nextLanes = getHighestPriorityLanes(pingedLanes);\n          }\n        }\n      }\n      if (nextLanes === NoLanes) {\n        return NoLanes;\n      }\n      if (wipLanes !== NoLanes && wipLanes !== nextLanes && (wipLanes & suspendedLanes) === NoLanes) {\n        var nextLane = getHighestPriorityLane(nextLanes);\n        var wipLane = getHighestPriorityLane(wipLanes);\n        if (nextLane >= wipLane || nextLane === DefaultLane && (wipLane & TransitionLanes) !== NoLanes) {\n          return wipLanes;\n        }\n      }\n      return nextLanes;\n    }\n    function getEntangledLanes(root, renderLanes) {\n      var entangledLanes = renderLanes;\n      if ((entangledLanes & InputContinuousLane) !== NoLanes) {\n        entangledLanes |= entangledLanes & DefaultLane;\n      }\n      var allEntangledLanes = root.entangledLanes;\n      if (allEntangledLanes !== NoLanes) {\n        var entanglements = root.entanglements;\n        var lanes = entangledLanes & allEntangledLanes;\n        while (lanes > 0) {\n          var index = pickArbitraryLaneIndex(lanes);\n          var lane = 1 << index;\n          entangledLanes |= entanglements[index];\n          lanes &= ~lane;\n        }\n      }\n      return entangledLanes;\n    }\n    function computeExpirationTime(lane, currentTime) {\n      switch (lane) {\n        case SyncHydrationLane:\n        case SyncLane:\n        case InputContinuousHydrationLane:\n        case InputContinuousLane:\n          return currentTime + syncLaneExpirationMs;\n        case DefaultHydrationLane:\n        case DefaultLane:\n        case TransitionHydrationLane:\n        case TransitionLane1:\n        case TransitionLane2:\n        case TransitionLane3:\n        case TransitionLane4:\n        case TransitionLane5:\n        case TransitionLane6:\n        case TransitionLane7:\n        case TransitionLane8:\n        case TransitionLane9:\n        case TransitionLane10:\n        case TransitionLane11:\n        case TransitionLane12:\n        case TransitionLane13:\n        case TransitionLane14:\n        case TransitionLane15:\n          return currentTime + transitionLaneExpirationMs;\n        case RetryLane1:\n        case RetryLane2:\n        case RetryLane3:\n        case RetryLane4:\n          return NoTimestamp;\n        case SelectiveHydrationLane:\n        case IdleHydrationLane:\n        case IdleLane:\n        case OffscreenLane:\n        case DeferredLane:\n          return NoTimestamp;\n        default:\n          {\n            error(\"Should have found matching lanes. This is a bug in React.\");\n          }\n          return NoTimestamp;\n      }\n    }\n    function markStarvedLanesAsExpired(root, currentTime) {\n      var pendingLanes = root.pendingLanes;\n      var suspendedLanes = root.suspendedLanes;\n      var pingedLanes = root.pingedLanes;\n      var expirationTimes = root.expirationTimes;\n      var lanes = pendingLanes & ~RetryLanes;\n      while (lanes > 0) {\n        var index = pickArbitraryLaneIndex(lanes);\n        var lane = 1 << index;\n        var expirationTime = expirationTimes[index];\n        if (expirationTime === NoTimestamp) {\n          if ((lane & suspendedLanes) === NoLanes || (lane & pingedLanes) !== NoLanes) {\n            expirationTimes[index] = computeExpirationTime(lane, currentTime);\n          }\n        } else if (expirationTime <= currentTime) {\n          root.expiredLanes |= lane;\n        }\n        lanes &= ~lane;\n      }\n    }\n    function getLanesToRetrySynchronouslyOnError(root, originallyAttemptedLanes) {\n      if (root.errorRecoveryDisabledLanes & originallyAttemptedLanes) {\n        return NoLanes;\n      }\n      var everythingButOffscreen = root.pendingLanes & ~OffscreenLane;\n      if (everythingButOffscreen !== NoLanes) {\n        return everythingButOffscreen;\n      }\n      if (everythingButOffscreen & OffscreenLane) {\n        return OffscreenLane;\n      }\n      return NoLanes;\n    }\n    function includesSyncLane(lanes) {\n      return (lanes & (SyncLane | SyncHydrationLane)) !== NoLanes;\n    }\n    function includesNonIdleWork(lanes) {\n      return (lanes & NonIdleLanes) !== NoLanes;\n    }\n    function includesOnlyRetries(lanes) {\n      return (lanes & RetryLanes) === lanes;\n    }\n    function includesOnlyNonUrgentLanes(lanes) {\n      var UrgentLanes = SyncLane | InputContinuousLane | DefaultLane;\n      return (lanes & UrgentLanes) === NoLanes;\n    }\n    function includesOnlyTransitions(lanes) {\n      return (lanes & TransitionLanes) === lanes;\n    }\n    function includesBlockingLane(root, lanes) {\n      var SyncDefaultLanes = InputContinuousHydrationLane | InputContinuousLane | DefaultHydrationLane | DefaultLane;\n      return (lanes & SyncDefaultLanes) !== NoLanes;\n    }\n    function includesExpiredLane(root, lanes) {\n      return (lanes & root.expiredLanes) !== NoLanes;\n    }\n    function isTransitionLane(lane) {\n      return (lane & TransitionLanes) !== NoLanes;\n    }\n    function claimNextTransitionLane() {\n      var lane = nextTransitionLane;\n      nextTransitionLane <<= 1;\n      if ((nextTransitionLane & TransitionLanes) === NoLanes) {\n        nextTransitionLane = TransitionLane1;\n      }\n      return lane;\n    }\n    function claimNextRetryLane() {\n      var lane = nextRetryLane;\n      nextRetryLane <<= 1;\n      if ((nextRetryLane & RetryLanes) === NoLanes) {\n        nextRetryLane = RetryLane1;\n      }\n      return lane;\n    }\n    function getHighestPriorityLane(lanes) {\n      return lanes & -lanes;\n    }\n    function pickArbitraryLane(lanes) {\n      return getHighestPriorityLane(lanes);\n    }\n    function pickArbitraryLaneIndex(lanes) {\n      return 31 - clz32(lanes);\n    }\n    function laneToIndex(lane) {\n      return pickArbitraryLaneIndex(lane);\n    }\n    function includesSomeLane(a, b) {\n      return (a & b) !== NoLanes;\n    }\n    function isSubsetOfLanes(set, subset) {\n      return (set & subset) === subset;\n    }\n    function mergeLanes(a, b) {\n      return a | b;\n    }\n    function removeLanes(set, subset) {\n      return set & ~subset;\n    }\n    function intersectLanes(a, b) {\n      return a & b;\n    }\n    function laneToLanes(lane) {\n      return lane;\n    }\n    function createLaneMap(initial) {\n      var laneMap = [];\n      for (var i = 0; i < TotalLanes; i++) {\n        laneMap.push(initial);\n      }\n      return laneMap;\n    }\n    function markRootUpdated(root, updateLane) {\n      root.pendingLanes |= updateLane;\n      if (updateLane !== IdleLane) {\n        root.suspendedLanes = NoLanes;\n        root.pingedLanes = NoLanes;\n      }\n    }\n    function markRootSuspended$1(root, suspendedLanes, spawnedLane) {\n      root.suspendedLanes |= suspendedLanes;\n      root.pingedLanes &= ~suspendedLanes;\n      var expirationTimes = root.expirationTimes;\n      var lanes = suspendedLanes;\n      while (lanes > 0) {\n        var index = pickArbitraryLaneIndex(lanes);\n        var lane = 1 << index;\n        expirationTimes[index] = NoTimestamp;\n        lanes &= ~lane;\n      }\n      if (spawnedLane !== NoLane) {\n        markSpawnedDeferredLane(root, spawnedLane, suspendedLanes);\n      }\n    }\n    function markRootPinged(root, pingedLanes) {\n      root.pingedLanes |= root.suspendedLanes & pingedLanes;\n    }\n    function markRootFinished(root, remainingLanes, spawnedLane) {\n      var noLongerPendingLanes = root.pendingLanes & ~remainingLanes;\n      root.pendingLanes = remainingLanes;\n      root.suspendedLanes = NoLanes;\n      root.pingedLanes = NoLanes;\n      root.expiredLanes &= remainingLanes;\n      root.entangledLanes &= remainingLanes;\n      root.errorRecoveryDisabledLanes &= remainingLanes;\n      root.shellSuspendCounter = 0;\n      var entanglements = root.entanglements;\n      var expirationTimes = root.expirationTimes;\n      var hiddenUpdates = root.hiddenUpdates;\n      var lanes = noLongerPendingLanes;\n      while (lanes > 0) {\n        var index = pickArbitraryLaneIndex(lanes);\n        var lane = 1 << index;\n        entanglements[index] = NoLanes;\n        expirationTimes[index] = NoTimestamp;\n        var hiddenUpdatesForLane = hiddenUpdates[index];\n        if (hiddenUpdatesForLane !== null) {\n          hiddenUpdates[index] = null;\n          for (var i = 0; i < hiddenUpdatesForLane.length; i++) {\n            var update = hiddenUpdatesForLane[i];\n            if (update !== null) {\n              update.lane &= ~OffscreenLane;\n            }\n          }\n        }\n        lanes &= ~lane;\n      }\n      if (spawnedLane !== NoLane) {\n        markSpawnedDeferredLane(root, spawnedLane, NoLanes);\n      }\n    }\n    function markSpawnedDeferredLane(root, spawnedLane, entangledLanes) {\n      root.pendingLanes |= spawnedLane;\n      root.suspendedLanes &= ~spawnedLane;\n      var spawnedLaneIndex = laneToIndex(spawnedLane);\n      root.entangledLanes |= spawnedLane;\n      root.entanglements[spawnedLaneIndex] |= DeferredLane | entangledLanes & UpdateLanes;\n    }\n    function markRootEntangled(root, entangledLanes) {\n      var rootEntangledLanes = root.entangledLanes |= entangledLanes;\n      var entanglements = root.entanglements;\n      var lanes = rootEntangledLanes;\n      while (lanes) {\n        var index = pickArbitraryLaneIndex(lanes);\n        var lane = 1 << index;\n        if (lane & entangledLanes | entanglements[index] & entangledLanes) {\n          entanglements[index] |= entangledLanes;\n        }\n        lanes &= ~lane;\n      }\n    }\n    function upgradePendingLaneToSync(root, lane) {\n      root.pendingLanes |= SyncLane;\n      root.entangledLanes |= SyncLane;\n      root.entanglements[SyncLaneIndex] |= lane;\n    }\n    function markHiddenUpdate(root, update, lane) {\n      var index = laneToIndex(lane);\n      var hiddenUpdates = root.hiddenUpdates;\n      var hiddenUpdatesForLane = hiddenUpdates[index];\n      if (hiddenUpdatesForLane === null) {\n        hiddenUpdates[index] = [update];\n      } else {\n        hiddenUpdatesForLane.push(update);\n      }\n      update.lane = lane | OffscreenLane;\n    }\n    function getBumpedLaneForHydration(root, renderLanes) {\n      var renderLane = getHighestPriorityLane(renderLanes);\n      var lane;\n      if ((renderLane & SyncUpdateLanes) !== NoLane) {\n        lane = SyncHydrationLane;\n      } else {\n        switch (renderLane) {\n          case SyncLane:\n            lane = SyncHydrationLane;\n            break;\n          case InputContinuousLane:\n            lane = InputContinuousHydrationLane;\n            break;\n          case DefaultLane:\n            lane = DefaultHydrationLane;\n            break;\n          case TransitionLane1:\n          case TransitionLane2:\n          case TransitionLane3:\n          case TransitionLane4:\n          case TransitionLane5:\n          case TransitionLane6:\n          case TransitionLane7:\n          case TransitionLane8:\n          case TransitionLane9:\n          case TransitionLane10:\n          case TransitionLane11:\n          case TransitionLane12:\n          case TransitionLane13:\n          case TransitionLane14:\n          case TransitionLane15:\n          case RetryLane1:\n          case RetryLane2:\n          case RetryLane3:\n          case RetryLane4:\n            lane = TransitionHydrationLane;\n            break;\n          case IdleLane:\n            lane = IdleHydrationLane;\n            break;\n          default:\n            lane = NoLane;\n            break;\n        }\n      }\n      if ((lane & (root.suspendedLanes | renderLanes)) !== NoLane) {\n        return NoLane;\n      }\n      return lane;\n    }\n    function addFiberToLanesMap(root, fiber, lanes) {\n      if (!isDevToolsPresent) {\n        return;\n      }\n      var pendingUpdatersLaneMap = root.pendingUpdatersLaneMap;\n      while (lanes > 0) {\n        var index = laneToIndex(lanes);\n        var lane = 1 << index;\n        var updaters = pendingUpdatersLaneMap[index];\n        updaters.add(fiber);\n        lanes &= ~lane;\n      }\n    }\n    function movePendingFibersToMemoized(root, lanes) {\n      if (!isDevToolsPresent) {\n        return;\n      }\n      var pendingUpdatersLaneMap = root.pendingUpdatersLaneMap;\n      var memoizedUpdaters = root.memoizedUpdaters;\n      while (lanes > 0) {\n        var index = laneToIndex(lanes);\n        var lane = 1 << index;\n        var updaters = pendingUpdatersLaneMap[index];\n        if (updaters.size > 0) {\n          updaters.forEach(function (fiber) {\n            var alternate = fiber.alternate;\n            if (alternate === null || !memoizedUpdaters.has(alternate)) {\n              memoizedUpdaters.add(fiber);\n            }\n          });\n          updaters.clear();\n        }\n        lanes &= ~lane;\n      }\n    }\n    function getTransitionsForLanes(root, lanes) {\n      {\n        return null;\n      }\n    }\n    var DiscreteEventPriority = SyncLane;\n    var ContinuousEventPriority = InputContinuousLane;\n    var DefaultEventPriority = DefaultLane;\n    var IdleEventPriority = IdleLane;\n    var currentUpdatePriority = NoLane;\n    function getCurrentUpdatePriority() {\n      return currentUpdatePriority;\n    }\n    function setCurrentUpdatePriority(newPriority) {\n      currentUpdatePriority = newPriority;\n    }\n    function higherEventPriority(a, b) {\n      return a !== 0 && a < b ? a : b;\n    }\n    function lowerEventPriority(a, b) {\n      return a === 0 || a > b ? a : b;\n    }\n    function isHigherEventPriority(a, b) {\n      return a !== 0 && a < b;\n    }\n    function lanesToEventPriority(lanes) {\n      var lane = getHighestPriorityLane(lanes);\n      if (!isHigherEventPriority(DiscreteEventPriority, lane)) {\n        return DiscreteEventPriority;\n      }\n      if (!isHigherEventPriority(ContinuousEventPriority, lane)) {\n        return ContinuousEventPriority;\n      }\n      if (includesNonIdleWork(lane)) {\n        return DefaultEventPriority;\n      }\n      return IdleEventPriority;\n    }\n    function shim$1() {\n      throw new Error(\"The current renderer does not support hydration. \" + \"This error is likely caused by a bug in React. \" + \"Please file an issue.\");\n    }\n    var isSuspenseInstancePending = shim$1;\n    var isSuspenseInstanceFallback = shim$1;\n    var getSuspenseInstanceFallbackErrorDetails = shim$1;\n    var registerSuspenseInstanceRetry = shim$1;\n    var clearSuspenseBoundary = shim$1;\n    var clearSuspenseBoundaryFromContainer = shim$1;\n    var errorHydratingContainer = shim$1;\n    function shim() {\n      throw new Error(\"The current renderer does not support Resources. \" + \"This error is likely caused by a bug in React. \" + \"Please file an issue.\");\n    }\n    var suspendResource = shim;\n    var getViewConfigForType = ReactNativePrivateInterface.ReactNativeViewConfigRegistry.get;\n    var nextReactTag = 3;\n    function allocateTag() {\n      var tag = nextReactTag;\n      if (tag % 10 === 1) {\n        tag += 2;\n      }\n      nextReactTag = tag + 2;\n      return tag;\n    }\n    function recursivelyUncacheFiberNode(node) {\n      if (typeof node === \"number\") {\n        uncacheFiberNode(node);\n      } else {\n        uncacheFiberNode(node._nativeTag);\n        node._children.forEach(recursivelyUncacheFiberNode);\n      }\n    }\n    function appendInitialChild(parentInstance, child) {\n      parentInstance._children.push(child);\n    }\n    function createInstance(type, props, rootContainerInstance, hostContext, internalInstanceHandle) {\n      var tag = allocateTag();\n      var viewConfig = getViewConfigForType(type);\n      {\n        for (var key in viewConfig.validAttributes) {\n          if (props.hasOwnProperty(key)) {\n            ReactNativePrivateInterface.deepFreezeAndThrowOnMutationInDev(props[key]);\n          }\n        }\n      }\n      var updatePayload = create(props, viewConfig.validAttributes);\n      ReactNativePrivateInterface.UIManager.createView(tag, viewConfig.uiViewClassName, rootContainerInstance, updatePayload);\n      var component = new ReactNativeFiberHostComponent(tag, viewConfig, internalInstanceHandle);\n      precacheFiberNode(internalInstanceHandle, tag);\n      updateFiberProps(tag, props);\n      return component;\n    }\n    function createTextInstance(text, rootContainerInstance, hostContext, internalInstanceHandle) {\n      if (!hostContext.isInAParentText) {\n        throw new Error(\"Text strings must be rendered within a <Text> component.\");\n      }\n      var tag = allocateTag();\n      ReactNativePrivateInterface.UIManager.createView(tag, \"RCTRawText\", rootContainerInstance, {\n        text: text\n      });\n      precacheFiberNode(internalInstanceHandle, tag);\n      return tag;\n    }\n    function finalizeInitialChildren(parentInstance, type, props, hostContext) {\n      if (parentInstance._children.length === 0) {\n        return false;\n      }\n      var nativeTags = parentInstance._children.map(function (child) {\n        return typeof child === \"number\" ? child : child._nativeTag;\n      });\n      ReactNativePrivateInterface.UIManager.setChildren(parentInstance._nativeTag, nativeTags);\n      return false;\n    }\n    function getRootHostContext(rootContainerInstance) {\n      return {\n        isInAParentText: false\n      };\n    }\n    function getChildHostContext(parentHostContext, type) {\n      var prevIsInAParentText = parentHostContext.isInAParentText;\n      var isInAParentText = type === \"AndroidTextInput\" || type === \"RCTMultilineTextInputView\" || type === \"RCTSinglelineTextInputView\" || type === \"RCTText\" || type === \"RCTVirtualText\";\n      if (prevIsInAParentText !== isInAParentText) {\n        return {\n          isInAParentText: isInAParentText\n        };\n      } else {\n        return parentHostContext;\n      }\n    }\n    function getPublicInstance(instance) {\n      if (instance.canonical != null && instance.canonical.publicInstance != null) {\n        return instance.canonical.publicInstance;\n      }\n      return instance;\n    }\n    var scheduleTimeout = setTimeout;\n    var cancelTimeout = clearTimeout;\n    var noTimeout = -1;\n    function shouldSetTextContent(type, props) {\n      return false;\n    }\n    function getCurrentEventPriority() {\n      return DefaultEventPriority;\n    }\n    function shouldAttemptEagerTransition() {\n      return false;\n    }\n    function appendChild(parentInstance, child) {\n      var childTag = typeof child === \"number\" ? child : child._nativeTag;\n      var children = parentInstance._children;\n      var index = children.indexOf(child);\n      if (index >= 0) {\n        children.splice(index, 1);\n        children.push(child);\n        ReactNativePrivateInterface.UIManager.manageChildren(parentInstance._nativeTag, [index], [children.length - 1], [], [], []);\n      } else {\n        children.push(child);\n        ReactNativePrivateInterface.UIManager.manageChildren(parentInstance._nativeTag, [], [], [childTag], [children.length - 1], []);\n      }\n    }\n    function appendChildToContainer(parentInstance, child) {\n      var childTag = typeof child === \"number\" ? child : child._nativeTag;\n      ReactNativePrivateInterface.UIManager.setChildren(parentInstance, [childTag]);\n    }\n    function commitTextUpdate(textInstance, oldText, newText) {\n      ReactNativePrivateInterface.UIManager.updateView(textInstance, \"RCTRawText\", {\n        text: newText\n      });\n    }\n    function commitMount(instance, type, newProps, internalInstanceHandle) {}\n    function commitUpdate(instance, updatePayloadTODO, type, oldProps, newProps, internalInstanceHandle) {\n      var viewConfig = instance.viewConfig;\n      updateFiberProps(instance._nativeTag, newProps);\n      var updatePayload = diff(oldProps, newProps, viewConfig.validAttributes);\n      if (updatePayload != null) {\n        ReactNativePrivateInterface.UIManager.updateView(instance._nativeTag, viewConfig.uiViewClassName, updatePayload);\n      }\n    }\n    function insertBefore(parentInstance, child, beforeChild) {\n      var children = parentInstance._children;\n      var index = children.indexOf(child);\n      if (index >= 0) {\n        children.splice(index, 1);\n        var beforeChildIndex = children.indexOf(beforeChild);\n        children.splice(beforeChildIndex, 0, child);\n        ReactNativePrivateInterface.UIManager.manageChildren(parentInstance._nativeTag, [index], [beforeChildIndex], [], [], []);\n      } else {\n        var _beforeChildIndex = children.indexOf(beforeChild);\n        children.splice(_beforeChildIndex, 0, child);\n        var childTag = typeof child === \"number\" ? child : child._nativeTag;\n        ReactNativePrivateInterface.UIManager.manageChildren(parentInstance._nativeTag, [], [], [childTag], [_beforeChildIndex], []);\n      }\n    }\n    function insertInContainerBefore(parentInstance, child, beforeChild) {\n      if (typeof parentInstance === \"number\") {\n        throw new Error(\"Container does not support insertBefore operation\");\n      }\n    }\n    function removeChild(parentInstance, child) {\n      recursivelyUncacheFiberNode(child);\n      var children = parentInstance._children;\n      var index = children.indexOf(child);\n      children.splice(index, 1);\n      ReactNativePrivateInterface.UIManager.manageChildren(parentInstance._nativeTag, [], [], [], [], [index]);\n    }\n    function removeChildFromContainer(parentInstance, child) {\n      recursivelyUncacheFiberNode(child);\n      ReactNativePrivateInterface.UIManager.manageChildren(parentInstance, [], [], [], [], [0]);\n    }\n    function resetTextContent(instance) {}\n    function hideInstance(instance) {\n      var viewConfig = instance.viewConfig;\n      var updatePayload = create({\n        style: {\n          display: \"none\"\n        }\n      }, viewConfig.validAttributes);\n      ReactNativePrivateInterface.UIManager.updateView(instance._nativeTag, viewConfig.uiViewClassName, updatePayload);\n    }\n    function hideTextInstance(textInstance) {\n      throw new Error(\"Not yet implemented.\");\n    }\n    function unhideInstance(instance, props) {\n      var viewConfig = instance.viewConfig;\n      var updatePayload = diff(assign({}, props, {\n        style: [props.style, {\n          display: \"none\"\n        }]\n      }), props, viewConfig.validAttributes);\n      ReactNativePrivateInterface.UIManager.updateView(instance._nativeTag, viewConfig.uiViewClassName, updatePayload);\n    }\n    function unhideTextInstance(textInstance, text) {\n      throw new Error(\"Not yet implemented.\");\n    }\n    function preloadInstance(type, props) {\n      return true;\n    }\n    function waitForCommitToBeReady() {\n      return null;\n    }\n    function describeBuiltInComponentFrame(name, ownerFn) {\n      {\n        var ownerName = null;\n        if (ownerFn) {\n          ownerName = ownerFn.displayName || ownerFn.name || null;\n        }\n        return describeComponentFrame(name, ownerName);\n      }\n    }\n    {\n      var PossiblyWeakMap$1 = typeof WeakMap === \"function\" ? WeakMap : Map;\n      new PossiblyWeakMap$1();\n    }\n    function describeComponentFrame(name, ownerName) {\n      var sourceInfo = \"\";\n      if (ownerName) {\n        sourceInfo = \" (created by \" + ownerName + \")\";\n      }\n      return \"\\n    in \" + (name || \"Unknown\") + sourceInfo;\n    }\n    function describeClassComponentFrame(ctor, ownerFn) {\n      {\n        return describeFunctionComponentFrame(ctor, ownerFn);\n      }\n    }\n    function describeFunctionComponentFrame(fn, ownerFn) {\n      {\n        if (!fn) {\n          return \"\";\n        }\n        var name = fn.displayName || fn.name || null;\n        var ownerName = null;\n        if (ownerFn) {\n          ownerName = ownerFn.displayName || ownerFn.name || null;\n        }\n        return describeComponentFrame(name, ownerName);\n      }\n    }\n    function describeUnknownElementTypeFrameInDEV(type, ownerFn) {\n      if (type == null) {\n        return \"\";\n      }\n      if (typeof type === \"function\") {\n        {\n          return describeFunctionComponentFrame(type, ownerFn);\n        }\n      }\n      if (typeof type === \"string\") {\n        return describeBuiltInComponentFrame(type, ownerFn);\n      }\n      switch (type) {\n        case REACT_SUSPENSE_TYPE:\n          return describeBuiltInComponentFrame(\"Suspense\", ownerFn);\n        case REACT_SUSPENSE_LIST_TYPE:\n          return describeBuiltInComponentFrame(\"SuspenseList\", ownerFn);\n      }\n      if (typeof type === \"object\") {\n        switch (type.$$typeof) {\n          case REACT_FORWARD_REF_TYPE:\n            return describeFunctionComponentFrame(type.render, ownerFn);\n          case REACT_MEMO_TYPE:\n            return describeUnknownElementTypeFrameInDEV(type.type, ownerFn);\n          case REACT_LAZY_TYPE:\n            {\n              var lazyComponent = type;\n              var payload = lazyComponent._payload;\n              var init = lazyComponent._init;\n              try {\n                return describeUnknownElementTypeFrameInDEV(init(payload), ownerFn);\n              } catch (x) {}\n            }\n        }\n      }\n      return \"\";\n    }\n    var hasOwnProperty = Object.prototype.hasOwnProperty;\n    var loggedTypeFailures = {};\n    var ReactDebugCurrentFrame$1 = ReactSharedInternals.ReactDebugCurrentFrame;\n    function setCurrentlyValidatingElement(element) {\n      {\n        if (element) {\n          var owner = element._owner;\n          var stack = describeUnknownElementTypeFrameInDEV(element.type, owner ? owner.type : null);\n          ReactDebugCurrentFrame$1.setExtraStackFrame(stack);\n        } else {\n          ReactDebugCurrentFrame$1.setExtraStackFrame(null);\n        }\n      }\n    }\n    function checkPropTypes(typeSpecs, values, location, componentName, element) {\n      {\n        var has = Function.call.bind(hasOwnProperty);\n        for (var typeSpecName in typeSpecs) {\n          if (has(typeSpecs, typeSpecName)) {\n            var error$1 = void 0;\n            try {\n              if (typeof typeSpecs[typeSpecName] !== \"function\") {\n                var err = Error((componentName || \"React class\") + \": \" + location + \" type `\" + typeSpecName + \"` is invalid; \" + \"it must be a function, usually from the `prop-types` package, but received `\" + typeof typeSpecs[typeSpecName] + \"`.\" + \"This often happens because of typos such as `PropTypes.function` instead of `PropTypes.func`.\");\n                err.name = \"Invariant Violation\";\n                throw err;\n              }\n              error$1 = typeSpecs[typeSpecName](values, typeSpecName, componentName, location, null, \"SECRET_DO_NOT_PASS_THIS_OR_YOU_WILL_BE_FIRED\");\n            } catch (ex) {\n              error$1 = ex;\n            }\n            if (error$1 && !(error$1 instanceof Error)) {\n              setCurrentlyValidatingElement(element);\n              error(\"%s: type specification of %s\" + \" `%s` is invalid; the type checker \" + \"function must return `null` or an `Error` but returned a %s. \" + \"You may have forgotten to pass an argument to the type checker \" + \"creator (arrayOf, instanceOf, objectOf, oneOf, oneOfType, and \" + \"shape all require an argument).\", componentName || \"React class\", location, typeSpecName, typeof error$1);\n              setCurrentlyValidatingElement(null);\n            }\n            if (error$1 instanceof Error && !(error$1.message in loggedTypeFailures)) {\n              loggedTypeFailures[error$1.message] = true;\n              setCurrentlyValidatingElement(element);\n              error(\"Failed %s type: %s\", location, error$1.message);\n              setCurrentlyValidatingElement(null);\n            }\n          }\n        }\n      }\n    }\n    var valueStack = [];\n    var fiberStack;\n    {\n      fiberStack = [];\n    }\n    var index = -1;\n    function createCursor(defaultValue) {\n      return {\n        current: defaultValue\n      };\n    }\n    function pop(cursor, fiber) {\n      if (index < 0) {\n        {\n          error(\"Unexpected pop.\");\n        }\n        return;\n      }\n      {\n        if (fiber !== fiberStack[index]) {\n          error(\"Unexpected Fiber popped.\");\n        }\n      }\n      cursor.current = valueStack[index];\n      valueStack[index] = null;\n      {\n        fiberStack[index] = null;\n      }\n      index--;\n    }\n    function push(cursor, value, fiber) {\n      index++;\n      valueStack[index] = cursor.current;\n      {\n        fiberStack[index] = fiber;\n      }\n      cursor.current = value;\n    }\n    var warnedAboutMissingGetChildContext;\n    {\n      warnedAboutMissingGetChildContext = {};\n    }\n    var emptyContextObject = {};\n    {\n      Object.freeze(emptyContextObject);\n    }\n    var contextStackCursor$1 = createCursor(emptyContextObject);\n    var didPerformWorkStackCursor = createCursor(false);\n    var previousContext = emptyContextObject;\n    function getUnmaskedContext(workInProgress, Component, didPushOwnContextIfProvider) {\n      {\n        if (didPushOwnContextIfProvider && isContextProvider(Component)) {\n          return previousContext;\n        }\n        return contextStackCursor$1.current;\n      }\n    }\n    function cacheContext(workInProgress, unmaskedContext, maskedContext) {\n      {\n        var instance = workInProgress.stateNode;\n        instance.__reactInternalMemoizedUnmaskedChildContext = unmaskedContext;\n        instance.__reactInternalMemoizedMaskedChildContext = maskedContext;\n      }\n    }\n    function getMaskedContext(workInProgress, unmaskedContext) {\n      {\n        var type = workInProgress.type;\n        var contextTypes = type.contextTypes;\n        if (!contextTypes) {\n          return emptyContextObject;\n        }\n        var instance = workInProgress.stateNode;\n        if (instance && instance.__reactInternalMemoizedUnmaskedChildContext === unmaskedContext) {\n          return instance.__reactInternalMemoizedMaskedChildContext;\n        }\n        var context = {};\n        for (var key in contextTypes) {\n          context[key] = unmaskedContext[key];\n        }\n        {\n          var name = getComponentNameFromFiber(workInProgress) || \"Unknown\";\n          checkPropTypes(contextTypes, context, \"context\", name);\n        }\n        if (instance) {\n          cacheContext(workInProgress, unmaskedContext, context);\n        }\n        return context;\n      }\n    }\n    function hasContextChanged() {\n      {\n        return didPerformWorkStackCursor.current;\n      }\n    }\n    function isContextProvider(type) {\n      {\n        var childContextTypes = type.childContextTypes;\n        return childContextTypes !== null && childContextTypes !== undefined;\n      }\n    }\n    function popContext(fiber) {\n      {\n        pop(didPerformWorkStackCursor, fiber);\n        pop(contextStackCursor$1, fiber);\n      }\n    }\n    function popTopLevelContextObject(fiber) {\n      {\n        pop(didPerformWorkStackCursor, fiber);\n        pop(contextStackCursor$1, fiber);\n      }\n    }\n    function pushTopLevelContextObject(fiber, context, didChange) {\n      {\n        if (contextStackCursor$1.current !== emptyContextObject) {\n          throw new Error(\"Unexpected context found on stack. \" + \"This error is likely caused by a bug in React. Please file an issue.\");\n        }\n        push(contextStackCursor$1, context, fiber);\n        push(didPerformWorkStackCursor, didChange, fiber);\n      }\n    }\n    function processChildContext(fiber, type, parentContext) {\n      {\n        var instance = fiber.stateNode;\n        var childContextTypes = type.childContextTypes;\n        if (typeof instance.getChildContext !== \"function\") {\n          {\n            var componentName = getComponentNameFromFiber(fiber) || \"Unknown\";\n            if (!warnedAboutMissingGetChildContext[componentName]) {\n              warnedAboutMissingGetChildContext[componentName] = true;\n              error(\"%s.childContextTypes is specified but there is no getChildContext() method \" + \"on the instance. You can either define getChildContext() on %s or remove \" + \"childContextTypes from it.\", componentName, componentName);\n            }\n          }\n          return parentContext;\n        }\n        var childContext = instance.getChildContext();\n        for (var contextKey in childContext) {\n          if (!(contextKey in childContextTypes)) {\n            throw new Error((getComponentNameFromFiber(fiber) || \"Unknown\") + '.getChildContext(): key \"' + contextKey + '\" is not defined in childContextTypes.');\n          }\n        }\n        {\n          var name = getComponentNameFromFiber(fiber) || \"Unknown\";\n          checkPropTypes(childContextTypes, childContext, \"child context\", name);\n        }\n        return assign({}, parentContext, childContext);\n      }\n    }\n    function pushContextProvider(workInProgress) {\n      {\n        var instance = workInProgress.stateNode;\n        var memoizedMergedChildContext = instance && instance.__reactInternalMemoizedMergedChildContext || emptyContextObject;\n        previousContext = contextStackCursor$1.current;\n        push(contextStackCursor$1, memoizedMergedChildContext, workInProgress);\n        push(didPerformWorkStackCursor, didPerformWorkStackCursor.current, workInProgress);\n        return true;\n      }\n    }\n    function invalidateContextProvider(workInProgress, type, didChange) {\n      {\n        var instance = workInProgress.stateNode;\n        if (!instance) {\n          throw new Error(\"Expected to have an instance by this point. \" + \"This error is likely caused by a bug in React. Please file an issue.\");\n        }\n        if (didChange) {\n          var mergedContext = processChildContext(workInProgress, type, previousContext);\n          instance.__reactInternalMemoizedMergedChildContext = mergedContext;\n          pop(didPerformWorkStackCursor, workInProgress);\n          pop(contextStackCursor$1, workInProgress);\n          push(contextStackCursor$1, mergedContext, workInProgress);\n          push(didPerformWorkStackCursor, didChange, workInProgress);\n        } else {\n          pop(didPerformWorkStackCursor, workInProgress);\n          push(didPerformWorkStackCursor, didChange, workInProgress);\n        }\n      }\n    }\n    function findCurrentUnmaskedContext(fiber) {\n      {\n        if (!isFiberMounted(fiber) || fiber.tag !== ClassComponent) {\n          throw new Error(\"Expected subtree parent to be a mounted class component. \" + \"This error is likely caused by a bug in React. Please file an issue.\");\n        }\n        var node = fiber;\n        do {\n          switch (node.tag) {\n            case HostRoot:\n              return node.stateNode.context;\n            case ClassComponent:\n              {\n                var Component = node.type;\n                if (isContextProvider(Component)) {\n                  return node.stateNode.__reactInternalMemoizedMergedChildContext;\n                }\n                break;\n              }\n          }\n          node = node.return;\n        } while (node !== null);\n        throw new Error(\"Found unexpected detached subtree parent. \" + \"This error is likely caused by a bug in React. Please file an issue.\");\n      }\n    }\n    var LegacyRoot = 0;\n    var ConcurrentRoot = 1;\n    var OffscreenVisible = 1;\n    var OffscreenDetached = 2;\n    var OffscreenPassiveEffectsConnected = 4;\n    function isOffscreenManual(offscreenFiber) {\n      return offscreenFiber.memoizedProps !== null && offscreenFiber.memoizedProps.mode === \"manual\";\n    }\n    function is(x, y) {\n      return x === y && (x !== 0 || 1 / x === 1 / y) || x !== x && y !== y;\n    }\n    var objectIs = typeof Object.is === \"function\" ? Object.is : is;\n    function isRootDehydrated(root) {\n      var currentState = root.current.memoizedState;\n      return currentState.isDehydrated;\n    }\n    var contextStackCursor = createCursor(null);\n    var contextFiberStackCursor = createCursor(null);\n    var rootInstanceStackCursor = createCursor(null);\n    function requiredContext(c) {\n      {\n        if (c === null) {\n          error(\"Expected host context to exist. This error is likely caused by a bug \" + \"in React. Please file an issue.\");\n        }\n      }\n      return c;\n    }\n    function getRootHostContainer() {\n      var rootInstance = requiredContext(rootInstanceStackCursor.current);\n      return rootInstance;\n    }\n    function pushHostContainer(fiber, nextRootInstance) {\n      push(rootInstanceStackCursor, nextRootInstance, fiber);\n      push(contextFiberStackCursor, fiber, fiber);\n      push(contextStackCursor, null, fiber);\n      var nextRootContext = getRootHostContext();\n      pop(contextStackCursor, fiber);\n      push(contextStackCursor, nextRootContext, fiber);\n    }\n    function popHostContainer(fiber) {\n      pop(contextStackCursor, fiber);\n      pop(contextFiberStackCursor, fiber);\n      pop(rootInstanceStackCursor, fiber);\n    }\n    function getHostContext() {\n      var context = requiredContext(contextStackCursor.current);\n      return context;\n    }\n    function pushHostContext(fiber) {\n      var context = requiredContext(contextStackCursor.current);\n      var nextContext = getChildHostContext(context, fiber.type);\n      if (context !== nextContext) {\n        push(contextFiberStackCursor, fiber, fiber);\n        push(contextStackCursor, nextContext, fiber);\n      }\n    }\n    function popHostContext(fiber) {\n      if (contextFiberStackCursor.current === fiber) {\n        pop(contextStackCursor, fiber);\n        pop(contextFiberStackCursor, fiber);\n      }\n    }\n    var isHydrating = false;\n    var didSuspendOrErrorDEV = false;\n    var hydrationErrors = null;\n    function didSuspendOrErrorWhileHydratingDEV() {\n      {\n        return didSuspendOrErrorDEV;\n      }\n    }\n    function prepareToHydrateHostInstance(fiber, hostContext) {\n      {\n        throw new Error(\"Expected prepareToHydrateHostInstance() to never be called. \" + \"This error is likely caused by a bug in React. Please file an issue.\");\n      }\n    }\n    function prepareToHydrateHostTextInstance(fiber) {\n      {\n        throw new Error(\"Expected prepareToHydrateHostTextInstance() to never be called. \" + \"This error is likely caused by a bug in React. Please file an issue.\");\n      }\n    }\n    function prepareToHydrateHostSuspenseInstance(fiber) {\n      {\n        throw new Error(\"Expected prepareToHydrateHostSuspenseInstance() to never be called. \" + \"This error is likely caused by a bug in React. Please file an issue.\");\n      }\n    }\n    function popHydrationState(fiber) {\n      {\n        return false;\n      }\n    }\n    function upgradeHydrationErrorsToRecoverable() {\n      if (hydrationErrors !== null) {\n        queueRecoverableErrors(hydrationErrors);\n        hydrationErrors = null;\n      }\n    }\n    function getIsHydrating() {\n      return isHydrating;\n    }\n    function queueHydrationError(error) {\n      if (hydrationErrors === null) {\n        hydrationErrors = [error];\n      } else {\n        hydrationErrors.push(error);\n      }\n    }\n    var concurrentQueues = [];\n    var concurrentQueuesIndex = 0;\n    var concurrentlyUpdatedLanes = NoLanes;\n    function finishQueueingConcurrentUpdates() {\n      var endIndex = concurrentQueuesIndex;\n      concurrentQueuesIndex = 0;\n      concurrentlyUpdatedLanes = NoLanes;\n      var i = 0;\n      while (i < endIndex) {\n        var fiber = concurrentQueues[i];\n        concurrentQueues[i++] = null;\n        var queue = concurrentQueues[i];\n        concurrentQueues[i++] = null;\n        var update = concurrentQueues[i];\n        concurrentQueues[i++] = null;\n        var lane = concurrentQueues[i];\n        concurrentQueues[i++] = null;\n        if (queue !== null && update !== null) {\n          var pending = queue.pending;\n          if (pending === null) {\n            update.next = update;\n          } else {\n            update.next = pending.next;\n            pending.next = update;\n          }\n          queue.pending = update;\n        }\n        if (lane !== NoLane) {\n          markUpdateLaneFromFiberToRoot(fiber, update, lane);\n        }\n      }\n    }\n    function getConcurrentlyUpdatedLanes() {\n      return concurrentlyUpdatedLanes;\n    }\n    function enqueueUpdate$1(fiber, queue, update, lane) {\n      concurrentQueues[concurrentQueuesIndex++] = fiber;\n      concurrentQueues[concurrentQueuesIndex++] = queue;\n      concurrentQueues[concurrentQueuesIndex++] = update;\n      concurrentQueues[concurrentQueuesIndex++] = lane;\n      concurrentlyUpdatedLanes = mergeLanes(concurrentlyUpdatedLanes, lane);\n      fiber.lanes = mergeLanes(fiber.lanes, lane);\n      var alternate = fiber.alternate;\n      if (alternate !== null) {\n        alternate.lanes = mergeLanes(alternate.lanes, lane);\n      }\n    }\n    function enqueueConcurrentHookUpdate(fiber, queue, update, lane) {\n      var concurrentQueue = queue;\n      var concurrentUpdate = update;\n      enqueueUpdate$1(fiber, concurrentQueue, concurrentUpdate, lane);\n      return getRootForUpdatedFiber(fiber);\n    }\n    function enqueueConcurrentHookUpdateAndEagerlyBailout(fiber, queue, update) {\n      var lane = NoLane;\n      var concurrentQueue = queue;\n      var concurrentUpdate = update;\n      enqueueUpdate$1(fiber, concurrentQueue, concurrentUpdate, lane);\n      var isConcurrentlyRendering = getWorkInProgressRoot() !== null;\n      if (!isConcurrentlyRendering) {\n        finishQueueingConcurrentUpdates();\n      }\n    }\n    function enqueueConcurrentClassUpdate(fiber, queue, update, lane) {\n      var concurrentQueue = queue;\n      var concurrentUpdate = update;\n      enqueueUpdate$1(fiber, concurrentQueue, concurrentUpdate, lane);\n      return getRootForUpdatedFiber(fiber);\n    }\n    function enqueueConcurrentRenderForLane(fiber, lane) {\n      enqueueUpdate$1(fiber, null, null, lane);\n      return getRootForUpdatedFiber(fiber);\n    }\n    function unsafe_markUpdateLaneFromFiberToRoot(sourceFiber, lane) {\n      var root = getRootForUpdatedFiber(sourceFiber);\n      markUpdateLaneFromFiberToRoot(sourceFiber, null, lane);\n      return root;\n    }\n    function markUpdateLaneFromFiberToRoot(sourceFiber, update, lane) {\n      sourceFiber.lanes = mergeLanes(sourceFiber.lanes, lane);\n      var alternate = sourceFiber.alternate;\n      if (alternate !== null) {\n        alternate.lanes = mergeLanes(alternate.lanes, lane);\n      }\n      var isHidden = false;\n      var parent = sourceFiber.return;\n      var node = sourceFiber;\n      while (parent !== null) {\n        parent.childLanes = mergeLanes(parent.childLanes, lane);\n        alternate = parent.alternate;\n        if (alternate !== null) {\n          alternate.childLanes = mergeLanes(alternate.childLanes, lane);\n        }\n        if (parent.tag === OffscreenComponent) {\n          var offscreenInstance = parent.stateNode;\n          if (offscreenInstance !== null && !(offscreenInstance._visibility & OffscreenVisible)) {\n            isHidden = true;\n          }\n        }\n        node = parent;\n        parent = parent.return;\n      }\n      if (isHidden && update !== null && node.tag === HostRoot) {\n        var root = node.stateNode;\n        markHiddenUpdate(root, update, lane);\n      }\n    }\n    function getRootForUpdatedFiber(sourceFiber) {\n      throwIfInfiniteUpdateLoopDetected();\n      detectUpdateOnUnmountedFiber(sourceFiber, sourceFiber);\n      var node = sourceFiber;\n      var parent = node.return;\n      while (parent !== null) {\n        detectUpdateOnUnmountedFiber(sourceFiber, node);\n        node = parent;\n        parent = node.return;\n      }\n      return node.tag === HostRoot ? node.stateNode : null;\n    }\n    function detectUpdateOnUnmountedFiber(sourceFiber, parent) {\n      {\n        var alternate = parent.alternate;\n        if (alternate === null && (parent.flags & (Placement | Hydrating)) !== NoFlags$1) {\n          warnAboutUpdateOnNotYetMountedFiberInDEV(sourceFiber);\n        }\n      }\n    }\n    var ReactCurrentActQueue$3 = ReactSharedInternals.ReactCurrentActQueue;\n    var firstScheduledRoot = null;\n    var lastScheduledRoot = null;\n    var didScheduleMicrotask = false;\n    var didScheduleMicrotask_act = false;\n    var mightHavePendingSyncWork = false;\n    var isFlushingWork = false;\n    var currentEventTransitionLane = NoLane;\n    function ensureRootIsScheduled(root) {\n      if (root === lastScheduledRoot || root.next !== null) ;else {\n        if (lastScheduledRoot === null) {\n          firstScheduledRoot = lastScheduledRoot = root;\n        } else {\n          lastScheduledRoot.next = root;\n          lastScheduledRoot = root;\n        }\n      }\n      mightHavePendingSyncWork = true;\n      if (ReactCurrentActQueue$3.current !== null) {\n        if (!didScheduleMicrotask_act) {\n          didScheduleMicrotask_act = true;\n          scheduleImmediateTask(processRootScheduleInMicrotask);\n        }\n      } else {\n        if (!didScheduleMicrotask) {\n          didScheduleMicrotask = true;\n          scheduleImmediateTask(processRootScheduleInMicrotask);\n        }\n      }\n      {\n        scheduleTaskForRootDuringMicrotask(root, now$1());\n      }\n      if (ReactCurrentActQueue$3.isBatchingLegacy && root.tag === LegacyRoot) {\n        ReactCurrentActQueue$3.didScheduleLegacyUpdate = true;\n      }\n    }\n    function flushSyncWorkOnAllRoots() {\n      flushSyncWorkAcrossRoots_impl(false);\n    }\n    function flushSyncWorkOnLegacyRootsOnly() {\n      flushSyncWorkAcrossRoots_impl(true);\n    }\n    function flushSyncWorkAcrossRoots_impl(onlyLegacy) {\n      if (isFlushingWork) {\n        return;\n      }\n      if (!mightHavePendingSyncWork) {\n        return;\n      }\n      var didPerformSomeWork;\n      var errors = null;\n      isFlushingWork = true;\n      do {\n        didPerformSomeWork = false;\n        var root = firstScheduledRoot;\n        while (root !== null) {\n          if (onlyLegacy && root.tag !== LegacyRoot) ;else {\n            var workInProgressRoot = getWorkInProgressRoot();\n            var workInProgressRootRenderLanes = getWorkInProgressRootRenderLanes();\n            var nextLanes = getNextLanes(root, root === workInProgressRoot ? workInProgressRootRenderLanes : NoLanes);\n            if (includesSyncLane(nextLanes)) {\n              try {\n                didPerformSomeWork = true;\n                performSyncWorkOnRoot(root, nextLanes);\n              } catch (error) {\n                if (errors === null) {\n                  errors = [error];\n                } else {\n                  errors.push(error);\n                }\n              }\n            }\n          }\n          root = root.next;\n        }\n      } while (didPerformSomeWork);\n      isFlushingWork = false;\n      if (errors !== null) {\n        if (errors.length > 1) {\n          if (typeof AggregateError === \"function\") {\n            throw new AggregateError(errors);\n          } else {\n            for (var i = 1; i < errors.length; i++) {\n              scheduleImmediateTask(throwError.bind(null, errors[i]));\n            }\n            var firstError = errors[0];\n            throw firstError;\n          }\n        } else {\n          var error = errors[0];\n          throw error;\n        }\n      }\n    }\n    function throwError(error) {\n      throw error;\n    }\n    function processRootScheduleInMicrotask() {\n      didScheduleMicrotask = false;\n      {\n        didScheduleMicrotask_act = false;\n      }\n      mightHavePendingSyncWork = false;\n      var currentTime = now$1();\n      var prev = null;\n      var root = firstScheduledRoot;\n      while (root !== null) {\n        var next = root.next;\n        if (currentEventTransitionLane !== NoLane && shouldAttemptEagerTransition()) {\n          upgradePendingLaneToSync(root, currentEventTransitionLane);\n        }\n        var nextLanes = scheduleTaskForRootDuringMicrotask(root, currentTime);\n        if (nextLanes === NoLane) {\n          root.next = null;\n          if (prev === null) {\n            firstScheduledRoot = next;\n          } else {\n            prev.next = next;\n          }\n          if (next === null) {\n            lastScheduledRoot = prev;\n          }\n        } else {\n          prev = root;\n          if (includesSyncLane(nextLanes)) {\n            mightHavePendingSyncWork = true;\n          }\n        }\n        root = next;\n      }\n      currentEventTransitionLane = NoLane;\n      flushSyncWorkOnAllRoots();\n    }\n    function scheduleTaskForRootDuringMicrotask(root, currentTime) {\n      markStarvedLanesAsExpired(root, currentTime);\n      var workInProgressRoot = getWorkInProgressRoot();\n      var workInProgressRootRenderLanes = getWorkInProgressRootRenderLanes();\n      var nextLanes = getNextLanes(root, root === workInProgressRoot ? workInProgressRootRenderLanes : NoLanes);\n      var existingCallbackNode = root.callbackNode;\n      if (nextLanes === NoLanes || root === workInProgressRoot && isWorkLoopSuspendedOnData() || root.cancelPendingCommit !== null) {\n        if (existingCallbackNode !== null) {\n          cancelCallback(existingCallbackNode);\n        }\n        root.callbackNode = null;\n        root.callbackPriority = NoLane;\n        return NoLane;\n      }\n      if (includesSyncLane(nextLanes)) {\n        if (existingCallbackNode !== null) {\n          cancelCallback(existingCallbackNode);\n        }\n        root.callbackPriority = SyncLane;\n        root.callbackNode = null;\n        return SyncLane;\n      } else {\n        var existingCallbackPriority = root.callbackPriority;\n        var newCallbackPriority = getHighestPriorityLane(nextLanes);\n        if (newCallbackPriority === existingCallbackPriority && !(ReactCurrentActQueue$3.current !== null && existingCallbackNode !== fakeActCallbackNode$1)) {\n          return newCallbackPriority;\n        } else {\n          cancelCallback(existingCallbackNode);\n        }\n        var schedulerPriorityLevel;\n        switch (lanesToEventPriority(nextLanes)) {\n          case DiscreteEventPriority:\n            schedulerPriorityLevel = ImmediatePriority;\n            break;\n          case ContinuousEventPriority:\n            schedulerPriorityLevel = UserBlockingPriority;\n            break;\n          case DefaultEventPriority:\n            schedulerPriorityLevel = NormalPriority;\n            break;\n          case IdleEventPriority:\n            schedulerPriorityLevel = IdlePriority;\n            break;\n          default:\n            schedulerPriorityLevel = NormalPriority;\n            break;\n        }\n        var newCallbackNode = scheduleCallback$1(schedulerPriorityLevel, performConcurrentWorkOnRoot.bind(null, root));\n        root.callbackPriority = newCallbackPriority;\n        root.callbackNode = newCallbackNode;\n        return newCallbackPriority;\n      }\n    }\n    function getContinuationForRoot(root, originalCallbackNode) {\n      scheduleTaskForRootDuringMicrotask(root, now$1());\n      if (root.callbackNode === originalCallbackNode) {\n        return performConcurrentWorkOnRoot.bind(null, root);\n      }\n      return null;\n    }\n    var fakeActCallbackNode$1 = {};\n    function scheduleCallback$1(priorityLevel, callback) {\n      if (ReactCurrentActQueue$3.current !== null) {\n        ReactCurrentActQueue$3.current.push(callback);\n        return fakeActCallbackNode$1;\n      } else {\n        return scheduleCallback$2(priorityLevel, callback);\n      }\n    }\n    function cancelCallback(callbackNode) {\n      if (callbackNode === fakeActCallbackNode$1) ;else if (callbackNode !== null) {\n        cancelCallback$1(callbackNode);\n      }\n    }\n    function scheduleImmediateTask(cb) {\n      if (ReactCurrentActQueue$3.current !== null) {\n        ReactCurrentActQueue$3.current.push(function () {\n          cb();\n          return null;\n        });\n      }\n      {\n        scheduleCallback$2(ImmediatePriority, cb);\n      }\n    }\n    function requestTransitionLane(transition) {\n      if (currentEventTransitionLane === NoLane) {\n        currentEventTransitionLane = claimNextTransitionLane();\n      }\n      return currentEventTransitionLane;\n    }\n    var currentEntangledLane = NoLane;\n    var currentEntangledActionThenable = null;\n    function chainThenableValue(thenable, result) {\n      var listeners = [];\n      var thenableWithOverride = {\n        status: \"pending\",\n        value: null,\n        reason: null,\n        then: function (resolve) {\n          listeners.push(resolve);\n        }\n      };\n      thenable.then(function (value) {\n        var fulfilledThenable = thenableWithOverride;\n        fulfilledThenable.status = \"fulfilled\";\n        fulfilledThenable.value = result;\n        for (var i = 0; i < listeners.length; i++) {\n          var listener = listeners[i];\n          listener(result);\n        }\n      }, function (error) {\n        var rejectedThenable = thenableWithOverride;\n        rejectedThenable.status = \"rejected\";\n        rejectedThenable.reason = error;\n        for (var i = 0; i < listeners.length; i++) {\n          var listener = listeners[i];\n          listener(undefined);\n        }\n      });\n      return thenableWithOverride;\n    }\n    function peekEntangledActionLane() {\n      return currentEntangledLane;\n    }\n    function peekEntangledActionThenable() {\n      return currentEntangledActionThenable;\n    }\n    var UpdateState = 0;\n    var ReplaceState = 1;\n    var ForceUpdate = 2;\n    var CaptureUpdate = 3;\n    var hasForceUpdate = false;\n    var didWarnUpdateInsideUpdate;\n    var currentlyProcessingQueue;\n    {\n      didWarnUpdateInsideUpdate = false;\n      currentlyProcessingQueue = null;\n    }\n    function initializeUpdateQueue(fiber) {\n      var queue = {\n        baseState: fiber.memoizedState,\n        firstBaseUpdate: null,\n        lastBaseUpdate: null,\n        shared: {\n          pending: null,\n          lanes: NoLanes,\n          hiddenCallbacks: null\n        },\n        callbacks: null\n      };\n      fiber.updateQueue = queue;\n    }\n    function cloneUpdateQueue(current, workInProgress) {\n      var queue = workInProgress.updateQueue;\n      var currentQueue = current.updateQueue;\n      if (queue === currentQueue) {\n        var clone = {\n          baseState: currentQueue.baseState,\n          firstBaseUpdate: currentQueue.firstBaseUpdate,\n          lastBaseUpdate: currentQueue.lastBaseUpdate,\n          shared: currentQueue.shared,\n          callbacks: null\n        };\n        workInProgress.updateQueue = clone;\n      }\n    }\n    function createUpdate(lane) {\n      var update = {\n        lane: lane,\n        tag: UpdateState,\n        payload: null,\n        callback: null,\n        next: null\n      };\n      return update;\n    }\n    function enqueueUpdate(fiber, update, lane) {\n      var updateQueue = fiber.updateQueue;\n      if (updateQueue === null) {\n        return null;\n      }\n      var sharedQueue = updateQueue.shared;\n      {\n        if (currentlyProcessingQueue === sharedQueue && !didWarnUpdateInsideUpdate) {\n          var componentName = getComponentNameFromFiber(fiber);\n          error(\"An update (setState, replaceState, or forceUpdate) was scheduled \" + \"from inside an update function. Update functions should be pure, \" + \"with zero side-effects. Consider using componentDidUpdate or a \" + \"callback.\\n\\nPlease update the following component: %s\", componentName);\n          didWarnUpdateInsideUpdate = true;\n        }\n      }\n      if (isUnsafeClassRenderPhaseUpdate()) {\n        var pending = sharedQueue.pending;\n        if (pending === null) {\n          update.next = update;\n        } else {\n          update.next = pending.next;\n          pending.next = update;\n        }\n        sharedQueue.pending = update;\n        return unsafe_markUpdateLaneFromFiberToRoot(fiber, lane);\n      } else {\n        return enqueueConcurrentClassUpdate(fiber, sharedQueue, update, lane);\n      }\n    }\n    function entangleTransitions(root, fiber, lane) {\n      var updateQueue = fiber.updateQueue;\n      if (updateQueue === null) {\n        return;\n      }\n      var sharedQueue = updateQueue.shared;\n      if (isTransitionLane(lane)) {\n        var queueLanes = sharedQueue.lanes;\n        queueLanes = intersectLanes(queueLanes, root.pendingLanes);\n        var newQueueLanes = mergeLanes(queueLanes, lane);\n        sharedQueue.lanes = newQueueLanes;\n        markRootEntangled(root, newQueueLanes);\n      }\n    }\n    function enqueueCapturedUpdate(workInProgress, capturedUpdate) {\n      var queue = workInProgress.updateQueue;\n      var current = workInProgress.alternate;\n      if (current !== null) {\n        var currentQueue = current.updateQueue;\n        if (queue === currentQueue) {\n          var newFirst = null;\n          var newLast = null;\n          var firstBaseUpdate = queue.firstBaseUpdate;\n          if (firstBaseUpdate !== null) {\n            var update = firstBaseUpdate;\n            do {\n              var clone = {\n                lane: update.lane,\n                tag: update.tag,\n                payload: update.payload,\n                callback: null,\n                next: null\n              };\n              if (newLast === null) {\n                newFirst = newLast = clone;\n              } else {\n                newLast.next = clone;\n                newLast = clone;\n              }\n              update = update.next;\n            } while (update !== null);\n            if (newLast === null) {\n              newFirst = newLast = capturedUpdate;\n            } else {\n              newLast.next = capturedUpdate;\n              newLast = capturedUpdate;\n            }\n          } else {\n            newFirst = newLast = capturedUpdate;\n          }\n          queue = {\n            baseState: currentQueue.baseState,\n            firstBaseUpdate: newFirst,\n            lastBaseUpdate: newLast,\n            shared: currentQueue.shared,\n            callbacks: currentQueue.callbacks\n          };\n          workInProgress.updateQueue = queue;\n          return;\n        }\n      }\n      var lastBaseUpdate = queue.lastBaseUpdate;\n      if (lastBaseUpdate === null) {\n        queue.firstBaseUpdate = capturedUpdate;\n      } else {\n        lastBaseUpdate.next = capturedUpdate;\n      }\n      queue.lastBaseUpdate = capturedUpdate;\n    }\n    function getStateFromUpdate(workInProgress, queue, update, prevState, nextProps, instance) {\n      switch (update.tag) {\n        case ReplaceState:\n          {\n            var payload = update.payload;\n            if (typeof payload === \"function\") {\n              {\n                enterDisallowedContextReadInDEV();\n              }\n              var nextState = payload.call(instance, prevState, nextProps);\n              {\n                if (workInProgress.mode & StrictLegacyMode) {\n                  setIsStrictModeForDevtools(true);\n                  try {\n                    payload.call(instance, prevState, nextProps);\n                  } finally {\n                    setIsStrictModeForDevtools(false);\n                  }\n                }\n                exitDisallowedContextReadInDEV();\n              }\n              return nextState;\n            }\n            return payload;\n          }\n        case CaptureUpdate:\n          {\n            workInProgress.flags = workInProgress.flags & ~ShouldCapture | DidCapture;\n          }\n        case UpdateState:\n          {\n            var _payload = update.payload;\n            var partialState;\n            if (typeof _payload === \"function\") {\n              {\n                enterDisallowedContextReadInDEV();\n              }\n              partialState = _payload.call(instance, prevState, nextProps);\n              {\n                if (workInProgress.mode & StrictLegacyMode) {\n                  setIsStrictModeForDevtools(true);\n                  try {\n                    _payload.call(instance, prevState, nextProps);\n                  } finally {\n                    setIsStrictModeForDevtools(false);\n                  }\n                }\n                exitDisallowedContextReadInDEV();\n              }\n            } else {\n              partialState = _payload;\n            }\n            if (partialState === null || partialState === undefined) {\n              return prevState;\n            }\n            return assign({}, prevState, partialState);\n          }\n        case ForceUpdate:\n          {\n            hasForceUpdate = true;\n            return prevState;\n          }\n      }\n      return prevState;\n    }\n    var didReadFromEntangledAsyncAction = false;\n    function suspendIfUpdateReadFromEntangledAsyncAction() {\n      if (didReadFromEntangledAsyncAction) {\n        var entangledActionThenable = peekEntangledActionThenable();\n        if (entangledActionThenable !== null) {\n          throw entangledActionThenable;\n        }\n      }\n    }\n    function processUpdateQueue(workInProgress, props, instance, renderLanes) {\n      didReadFromEntangledAsyncAction = false;\n      var queue = workInProgress.updateQueue;\n      hasForceUpdate = false;\n      {\n        currentlyProcessingQueue = queue.shared;\n      }\n      var firstBaseUpdate = queue.firstBaseUpdate;\n      var lastBaseUpdate = queue.lastBaseUpdate;\n      var pendingQueue = queue.shared.pending;\n      if (pendingQueue !== null) {\n        queue.shared.pending = null;\n        var lastPendingUpdate = pendingQueue;\n        var firstPendingUpdate = lastPendingUpdate.next;\n        lastPendingUpdate.next = null;\n        if (lastBaseUpdate === null) {\n          firstBaseUpdate = firstPendingUpdate;\n        } else {\n          lastBaseUpdate.next = firstPendingUpdate;\n        }\n        lastBaseUpdate = lastPendingUpdate;\n        var current = workInProgress.alternate;\n        if (current !== null) {\n          var currentQueue = current.updateQueue;\n          var currentLastBaseUpdate = currentQueue.lastBaseUpdate;\n          if (currentLastBaseUpdate !== lastBaseUpdate) {\n            if (currentLastBaseUpdate === null) {\n              currentQueue.firstBaseUpdate = firstPendingUpdate;\n            } else {\n              currentLastBaseUpdate.next = firstPendingUpdate;\n            }\n            currentQueue.lastBaseUpdate = lastPendingUpdate;\n          }\n        }\n      }\n      if (firstBaseUpdate !== null) {\n        var newState = queue.baseState;\n        var newLanes = NoLanes;\n        var newBaseState = null;\n        var newFirstBaseUpdate = null;\n        var newLastBaseUpdate = null;\n        var update = firstBaseUpdate;\n        do {\n          var updateLane = removeLanes(update.lane, OffscreenLane);\n          var isHiddenUpdate = updateLane !== update.lane;\n          var shouldSkipUpdate = isHiddenUpdate ? !isSubsetOfLanes(getWorkInProgressRootRenderLanes(), updateLane) : !isSubsetOfLanes(renderLanes, updateLane);\n          if (shouldSkipUpdate) {\n            var clone = {\n              lane: updateLane,\n              tag: update.tag,\n              payload: update.payload,\n              callback: update.callback,\n              next: null\n            };\n            if (newLastBaseUpdate === null) {\n              newFirstBaseUpdate = newLastBaseUpdate = clone;\n              newBaseState = newState;\n            } else {\n              newLastBaseUpdate = newLastBaseUpdate.next = clone;\n            }\n            newLanes = mergeLanes(newLanes, updateLane);\n          } else {\n            if (updateLane !== NoLane && updateLane === peekEntangledActionLane()) {\n              didReadFromEntangledAsyncAction = true;\n            }\n            if (newLastBaseUpdate !== null) {\n              var _clone = {\n                lane: NoLane,\n                tag: update.tag,\n                payload: update.payload,\n                callback: null,\n                next: null\n              };\n              newLastBaseUpdate = newLastBaseUpdate.next = _clone;\n            }\n            newState = getStateFromUpdate(workInProgress, queue, update, newState, props, instance);\n            var callback = update.callback;\n            if (callback !== null) {\n              workInProgress.flags |= Callback;\n              if (isHiddenUpdate) {\n                workInProgress.flags |= Visibility;\n              }\n              var callbacks = queue.callbacks;\n              if (callbacks === null) {\n                queue.callbacks = [callback];\n              } else {\n                callbacks.push(callback);\n              }\n            }\n          }\n          update = update.next;\n          if (update === null) {\n            pendingQueue = queue.shared.pending;\n            if (pendingQueue === null) {\n              break;\n            } else {\n              var _lastPendingUpdate = pendingQueue;\n              var _firstPendingUpdate = _lastPendingUpdate.next;\n              _lastPendingUpdate.next = null;\n              update = _firstPendingUpdate;\n              queue.lastBaseUpdate = _lastPendingUpdate;\n              queue.shared.pending = null;\n            }\n          }\n        } while (true);\n        if (newLastBaseUpdate === null) {\n          newBaseState = newState;\n        }\n        queue.baseState = newBaseState;\n        queue.firstBaseUpdate = newFirstBaseUpdate;\n        queue.lastBaseUpdate = newLastBaseUpdate;\n        if (firstBaseUpdate === null) {\n          queue.shared.lanes = NoLanes;\n        }\n        markSkippedUpdateLanes(newLanes);\n        workInProgress.lanes = newLanes;\n        workInProgress.memoizedState = newState;\n      }\n      {\n        currentlyProcessingQueue = null;\n      }\n    }\n    function callCallback(callback, context) {\n      if (typeof callback !== \"function\") {\n        throw new Error(\"Invalid argument passed as callback. Expected a function. Instead \" + (\"received: \" + callback));\n      }\n      callback.call(context);\n    }\n    function resetHasForceUpdateBeforeProcessing() {\n      hasForceUpdate = false;\n    }\n    function checkHasForceUpdateAfterProcessing() {\n      return hasForceUpdate;\n    }\n    function deferHiddenCallbacks(updateQueue) {\n      var newHiddenCallbacks = updateQueue.callbacks;\n      if (newHiddenCallbacks !== null) {\n        var existingHiddenCallbacks = updateQueue.shared.hiddenCallbacks;\n        if (existingHiddenCallbacks === null) {\n          updateQueue.shared.hiddenCallbacks = newHiddenCallbacks;\n        } else {\n          updateQueue.shared.hiddenCallbacks = existingHiddenCallbacks.concat(newHiddenCallbacks);\n        }\n      }\n    }\n    function commitHiddenCallbacks(updateQueue, context) {\n      var hiddenCallbacks = updateQueue.shared.hiddenCallbacks;\n      if (hiddenCallbacks !== null) {\n        updateQueue.shared.hiddenCallbacks = null;\n        for (var i = 0; i < hiddenCallbacks.length; i++) {\n          var callback = hiddenCallbacks[i];\n          callCallback(callback, context);\n        }\n      }\n    }\n    function commitCallbacks(updateQueue, context) {\n      var callbacks = updateQueue.callbacks;\n      if (callbacks !== null) {\n        updateQueue.callbacks = null;\n        for (var i = 0; i < callbacks.length; i++) {\n          var callback = callbacks[i];\n          callCallback(callback, context);\n        }\n      }\n    }\n    function shallowEqual(objA, objB) {\n      if (objectIs(objA, objB)) {\n        return true;\n      }\n      if (typeof objA !== \"object\" || objA === null || typeof objB !== \"object\" || objB === null) {\n        return false;\n      }\n      var keysA = Object.keys(objA);\n      var keysB = Object.keys(objB);\n      if (keysA.length !== keysB.length) {\n        return false;\n      }\n      for (var i = 0; i < keysA.length; i++) {\n        var currentKey = keysA[i];\n        if (!hasOwnProperty.call(objB, currentKey) || !objectIs(objA[currentKey], objB[currentKey])) {\n          return false;\n        }\n      }\n      return true;\n    }\n    function describeFiber(fiber) {\n      var owner = fiber._debugOwner ? fiber._debugOwner.type : null;\n      switch (fiber.tag) {\n        case HostHoistable:\n        case HostSingleton:\n        case HostComponent:\n          return describeBuiltInComponentFrame(fiber.type, owner);\n        case LazyComponent:\n          return describeBuiltInComponentFrame(\"Lazy\", owner);\n        case SuspenseComponent:\n          return describeBuiltInComponentFrame(\"Suspense\", owner);\n        case SuspenseListComponent:\n          return describeBuiltInComponentFrame(\"SuspenseList\", owner);\n        case FunctionComponent:\n        case IndeterminateComponent:\n        case SimpleMemoComponent:\n          return describeFunctionComponentFrame(fiber.type, owner);\n        case ForwardRef:\n          return describeFunctionComponentFrame(fiber.type.render, owner);\n        case ClassComponent:\n          return describeClassComponentFrame(fiber.type, owner);\n        default:\n          return \"\";\n      }\n    }\n    function getStackByFiberInDevAndProd(workInProgress) {\n      try {\n        var info = \"\";\n        var node = workInProgress;\n        do {\n          info += describeFiber(node);\n          node = node.return;\n        } while (node);\n        return info;\n      } catch (x) {\n        return \"\\nError generating stack: \" + x.message + \"\\n\" + x.stack;\n      }\n    }\n    var ReactDebugCurrentFrame = ReactSharedInternals.ReactDebugCurrentFrame;\n    var current = null;\n    var isRendering = false;\n    function getCurrentFiberOwnerNameInDevOrNull() {\n      {\n        if (current === null) {\n          return null;\n        }\n        var owner = current._debugOwner;\n        if (owner !== null && typeof owner !== \"undefined\") {\n          return getComponentNameFromFiber(owner);\n        }\n      }\n      return null;\n    }\n    function getCurrentFiberStackInDev() {\n      {\n        if (current === null) {\n          return \"\";\n        }\n        return getStackByFiberInDevAndProd(current);\n      }\n    }\n    function resetCurrentFiber() {\n      {\n        ReactDebugCurrentFrame.getCurrentStack = null;\n        current = null;\n        isRendering = false;\n      }\n    }\n    function setCurrentFiber(fiber) {\n      {\n        ReactDebugCurrentFrame.getCurrentStack = fiber === null ? null : getCurrentFiberStackInDev;\n        current = fiber;\n        isRendering = false;\n      }\n    }\n    function getCurrentFiber() {\n      {\n        return current;\n      }\n    }\n    function setIsRendering(rendering) {\n      {\n        isRendering = rendering;\n      }\n    }\n    var ReactStrictModeWarnings = {\n      recordUnsafeLifecycleWarnings: function (fiber, instance) {},\n      flushPendingUnsafeLifecycleWarnings: function () {},\n      recordLegacyContextWarning: function (fiber, instance) {},\n      flushLegacyContextWarning: function () {},\n      discardPendingWarnings: function () {}\n    };\n    {\n      var findStrictRoot = function (fiber) {\n        var maybeStrictRoot = null;\n        var node = fiber;\n        while (node !== null) {\n          if (node.mode & StrictLegacyMode) {\n            maybeStrictRoot = node;\n          }\n          node = node.return;\n        }\n        return maybeStrictRoot;\n      };\n      var setToSortedString = function (set) {\n        var array = [];\n        set.forEach(function (value) {\n          array.push(value);\n        });\n        return array.sort().join(\", \");\n      };\n      var pendingComponentWillMountWarnings = [];\n      var pendingUNSAFE_ComponentWillMountWarnings = [];\n      var pendingComponentWillReceivePropsWarnings = [];\n      var pendingUNSAFE_ComponentWillReceivePropsWarnings = [];\n      var pendingComponentWillUpdateWarnings = [];\n      var pendingUNSAFE_ComponentWillUpdateWarnings = [];\n      var didWarnAboutUnsafeLifecycles = new Set();\n      ReactStrictModeWarnings.recordUnsafeLifecycleWarnings = function (fiber, instance) {\n        if (didWarnAboutUnsafeLifecycles.has(fiber.type)) {\n          return;\n        }\n        if (typeof instance.componentWillMount === \"function\" && instance.componentWillMount.__suppressDeprecationWarning !== true) {\n          pendingComponentWillMountWarnings.push(fiber);\n        }\n        if (fiber.mode & StrictLegacyMode && typeof instance.UNSAFE_componentWillMount === \"function\") {\n          pendingUNSAFE_ComponentWillMountWarnings.push(fiber);\n        }\n        if (typeof instance.componentWillReceiveProps === \"function\" && instance.componentWillReceiveProps.__suppressDeprecationWarning !== true) {\n          pendingComponentWillReceivePropsWarnings.push(fiber);\n        }\n        if (fiber.mode & StrictLegacyMode && typeof instance.UNSAFE_componentWillReceiveProps === \"function\") {\n          pendingUNSAFE_ComponentWillReceivePropsWarnings.push(fiber);\n        }\n        if (typeof instance.componentWillUpdate === \"function\" && instance.componentWillUpdate.__suppressDeprecationWarning !== true) {\n          pendingComponentWillUpdateWarnings.push(fiber);\n        }\n        if (fiber.mode & StrictLegacyMode && typeof instance.UNSAFE_componentWillUpdate === \"function\") {\n          pendingUNSAFE_ComponentWillUpdateWarnings.push(fiber);\n        }\n      };\n      ReactStrictModeWarnings.flushPendingUnsafeLifecycleWarnings = function () {\n        var componentWillMountUniqueNames = new Set();\n        if (pendingComponentWillMountWarnings.length > 0) {\n          pendingComponentWillMountWarnings.forEach(function (fiber) {\n            componentWillMountUniqueNames.add(getComponentNameFromFiber(fiber) || \"Component\");\n            didWarnAboutUnsafeLifecycles.add(fiber.type);\n          });\n          pendingComponentWillMountWarnings = [];\n        }\n        var UNSAFE_componentWillMountUniqueNames = new Set();\n        if (pendingUNSAFE_ComponentWillMountWarnings.length > 0) {\n          pendingUNSAFE_ComponentWillMountWarnings.forEach(function (fiber) {\n            UNSAFE_componentWillMountUniqueNames.add(getComponentNameFromFiber(fiber) || \"Component\");\n            didWarnAboutUnsafeLifecycles.add(fiber.type);\n          });\n          pendingUNSAFE_ComponentWillMountWarnings = [];\n        }\n        var componentWillReceivePropsUniqueNames = new Set();\n        if (pendingComponentWillReceivePropsWarnings.length > 0) {\n          pendingComponentWillReceivePropsWarnings.forEach(function (fiber) {\n            componentWillReceivePropsUniqueNames.add(getComponentNameFromFiber(fiber) || \"Component\");\n            didWarnAboutUnsafeLifecycles.add(fiber.type);\n          });\n          pendingComponentWillReceivePropsWarnings = [];\n        }\n        var UNSAFE_componentWillReceivePropsUniqueNames = new Set();\n        if (pendingUNSAFE_ComponentWillReceivePropsWarnings.length > 0) {\n          pendingUNSAFE_ComponentWillReceivePropsWarnings.forEach(function (fiber) {\n            UNSAFE_componentWillReceivePropsUniqueNames.add(getComponentNameFromFiber(fiber) || \"Component\");\n            didWarnAboutUnsafeLifecycles.add(fiber.type);\n          });\n          pendingUNSAFE_ComponentWillReceivePropsWarnings = [];\n        }\n        var componentWillUpdateUniqueNames = new Set();\n        if (pendingComponentWillUpdateWarnings.length > 0) {\n          pendingComponentWillUpdateWarnings.forEach(function (fiber) {\n            componentWillUpdateUniqueNames.add(getComponentNameFromFiber(fiber) || \"Component\");\n            didWarnAboutUnsafeLifecycles.add(fiber.type);\n          });\n          pendingComponentWillUpdateWarnings = [];\n        }\n        var UNSAFE_componentWillUpdateUniqueNames = new Set();\n        if (pendingUNSAFE_ComponentWillUpdateWarnings.length > 0) {\n          pendingUNSAFE_ComponentWillUpdateWarnings.forEach(function (fiber) {\n            UNSAFE_componentWillUpdateUniqueNames.add(getComponentNameFromFiber(fiber) || \"Component\");\n            didWarnAboutUnsafeLifecycles.add(fiber.type);\n          });\n          pendingUNSAFE_ComponentWillUpdateWarnings = [];\n        }\n        if (UNSAFE_componentWillMountUniqueNames.size > 0) {\n          var sortedNames = setToSortedString(UNSAFE_componentWillMountUniqueNames);\n          error(\"Using UNSAFE_componentWillMount in strict mode is not recommended and may indicate bugs in your code. \" + \"See https://reactjs.org/link/unsafe-component-lifecycles for details.\\n\\n\" + \"* Move code with side effects to componentDidMount, and set initial state in the constructor.\\n\" + \"\\nPlease update the following components: %s\", sortedNames);\n        }\n        if (UNSAFE_componentWillReceivePropsUniqueNames.size > 0) {\n          var _sortedNames = setToSortedString(UNSAFE_componentWillReceivePropsUniqueNames);\n          error(\"Using UNSAFE_componentWillReceiveProps in strict mode is not recommended \" + \"and may indicate bugs in your code. \" + \"See https://reactjs.org/link/unsafe-component-lifecycles for details.\\n\\n\" + \"* Move data fetching code or side effects to componentDidUpdate.\\n\" + \"* If you're updating state whenever props change, \" + \"refactor your code to use memoization techniques or move it to \" + \"static getDerivedStateFromProps. Learn more at: https://reactjs.org/link/derived-state\\n\" + \"\\nPlease update the following components: %s\", _sortedNames);\n        }\n        if (UNSAFE_componentWillUpdateUniqueNames.size > 0) {\n          var _sortedNames2 = setToSortedString(UNSAFE_componentWillUpdateUniqueNames);\n          error(\"Using UNSAFE_componentWillUpdate in strict mode is not recommended \" + \"and may indicate bugs in your code. \" + \"See https://reactjs.org/link/unsafe-component-lifecycles for details.\\n\\n\" + \"* Move data fetching code or side effects to componentDidUpdate.\\n\" + \"\\nPlease update the following components: %s\", _sortedNames2);\n        }\n        if (componentWillMountUniqueNames.size > 0) {\n          var _sortedNames3 = setToSortedString(componentWillMountUniqueNames);\n          warn(\"componentWillMount has been renamed, and is not recommended for use. \" + \"See https://reactjs.org/link/unsafe-component-lifecycles for details.\\n\\n\" + \"* Move code with side effects to componentDidMount, and set initial state in the constructor.\\n\" + \"* Rename componentWillMount to UNSAFE_componentWillMount to suppress \" + \"this warning in non-strict mode. In React 18.x, only the UNSAFE_ name will work. \" + \"To rename all deprecated lifecycles to their new names, you can run \" + \"`npx react-codemod rename-unsafe-lifecycles` in your project source folder.\\n\" + \"\\nPlease update the following components: %s\", _sortedNames3);\n        }\n        if (componentWillReceivePropsUniqueNames.size > 0) {\n          var _sortedNames4 = setToSortedString(componentWillReceivePropsUniqueNames);\n          warn(\"componentWillReceiveProps has been renamed, and is not recommended for use. \" + \"See https://reactjs.org/link/unsafe-component-lifecycles for details.\\n\\n\" + \"* Move data fetching code or side effects to componentDidUpdate.\\n\" + \"* If you're updating state whenever props change, refactor your \" + \"code to use memoization techniques or move it to \" + \"static getDerivedStateFromProps. Learn more at: https://reactjs.org/link/derived-state\\n\" + \"* Rename componentWillReceiveProps to UNSAFE_componentWillReceiveProps to suppress \" + \"this warning in non-strict mode. In React 18.x, only the UNSAFE_ name will work. \" + \"To rename all deprecated lifecycles to their new names, you can run \" + \"`npx react-codemod rename-unsafe-lifecycles` in your project source folder.\\n\" + \"\\nPlease update the following components: %s\", _sortedNames4);\n        }\n        if (componentWillUpdateUniqueNames.size > 0) {\n          var _sortedNames5 = setToSortedString(componentWillUpdateUniqueNames);\n          warn(\"componentWillUpdate has been renamed, and is not recommended for use. \" + \"See https://reactjs.org/link/unsafe-component-lifecycles for details.\\n\\n\" + \"* Move data fetching code or side effects to componentDidUpdate.\\n\" + \"* Rename componentWillUpdate to UNSAFE_componentWillUpdate to suppress \" + \"this warning in non-strict mode. In React 18.x, only the UNSAFE_ name will work. \" + \"To rename all deprecated lifecycles to their new names, you can run \" + \"`npx react-codemod rename-unsafe-lifecycles` in your project source folder.\\n\" + \"\\nPlease update the following components: %s\", _sortedNames5);\n        }\n      };\n      var pendingLegacyContextWarning = new Map();\n      var didWarnAboutLegacyContext = new Set();\n      ReactStrictModeWarnings.recordLegacyContextWarning = function (fiber, instance) {\n        var strictRoot = findStrictRoot(fiber);\n        if (strictRoot === null) {\n          error(\"Expected to find a StrictMode component in a strict mode tree. \" + \"This error is likely caused by a bug in React. Please file an issue.\");\n          return;\n        }\n        if (didWarnAboutLegacyContext.has(fiber.type)) {\n          return;\n        }\n        var warningsForRoot = pendingLegacyContextWarning.get(strictRoot);\n        if (fiber.type.contextTypes != null || fiber.type.childContextTypes != null || instance !== null && typeof instance.getChildContext === \"function\") {\n          if (warningsForRoot === undefined) {\n            warningsForRoot = [];\n            pendingLegacyContextWarning.set(strictRoot, warningsForRoot);\n          }\n          warningsForRoot.push(fiber);\n        }\n      };\n      ReactStrictModeWarnings.flushLegacyContextWarning = function () {\n        pendingLegacyContextWarning.forEach(function (fiberArray, strictRoot) {\n          if (fiberArray.length === 0) {\n            return;\n          }\n          var firstFiber = fiberArray[0];\n          var uniqueNames = new Set();\n          fiberArray.forEach(function (fiber) {\n            uniqueNames.add(getComponentNameFromFiber(fiber) || \"Component\");\n            didWarnAboutLegacyContext.add(fiber.type);\n          });\n          var sortedNames = setToSortedString(uniqueNames);\n          try {\n            setCurrentFiber(firstFiber);\n            error(\"Legacy context API has been detected within a strict-mode tree.\" + \"\\n\\nThe old API will be supported in all 16.x releases, but applications \" + \"using it should migrate to the new version.\" + \"\\n\\nPlease update the following components: %s\" + \"\\n\\nLearn more about this warning here: https://reactjs.org/link/legacy-context\", sortedNames);\n          } finally {\n            resetCurrentFiber();\n          }\n        });\n      };\n      ReactStrictModeWarnings.discardPendingWarnings = function () {\n        pendingComponentWillMountWarnings = [];\n        pendingUNSAFE_ComponentWillMountWarnings = [];\n        pendingComponentWillReceivePropsWarnings = [];\n        pendingUNSAFE_ComponentWillReceivePropsWarnings = [];\n        pendingComponentWillUpdateWarnings = [];\n        pendingUNSAFE_ComponentWillUpdateWarnings = [];\n        pendingLegacyContextWarning = new Map();\n      };\n    }\n    function typeName(value) {\n      {\n        var hasToStringTag = typeof Symbol === \"function\" && Symbol.toStringTag;\n        var type = hasToStringTag && value[Symbol.toStringTag] || value.constructor.name || \"Object\";\n        return type;\n      }\n    }\n    function willCoercionThrow(value) {\n      {\n        try {\n          testStringCoercion(value);\n          return false;\n        } catch (e) {\n          return true;\n        }\n      }\n    }\n    function testStringCoercion(value) {\n      return \"\" + value;\n    }\n    function checkKeyStringCoercion(value) {\n      {\n        if (willCoercionThrow(value)) {\n          error(\"The provided key is an unsupported type %s.\" + \" This value must be coerced to a string before using it here.\", typeName(value));\n          return testStringCoercion(value);\n        }\n      }\n    }\n    function checkPropStringCoercion(value, propName) {\n      {\n        if (willCoercionThrow(value)) {\n          error(\"The provided `%s` prop is an unsupported type %s.\" + \" This value must be coerced to a string before using it here.\", propName, typeName(value));\n          return testStringCoercion(value);\n        }\n      }\n    }\n    var ReactCurrentActQueue$2 = ReactSharedInternals.ReactCurrentActQueue;\n    function getThenablesFromState(state) {\n      {\n        var devState = state;\n        return devState.thenables;\n      }\n    }\n    var SuspenseException = new Error(\"Suspense Exception: This is not a real error! It's an implementation \" + \"detail of `use` to interrupt the current render. You must either \" + \"rethrow it immediately, or move the `use` call outside of the \" + \"`try/catch` block. Capturing without rethrowing will lead to \" + \"unexpected behavior.\\n\\n\" + \"To handle async errors, wrap your component in an error boundary, or \" + \"call the promise's `.catch` method and pass the result to `use`\");\n    var SuspenseyCommitException = new Error(\"Suspense Exception: This is not a real error, and should not leak into \" + \"userspace. If you're seeing this, it's likely a bug in React.\");\n    var noopSuspenseyCommitThenable = {\n      then: function () {\n        {\n          error(\"Internal React error: A listener was unexpectedly attached to a \" + '\"noop\" thenable. This is a bug in React. Please file an issue.');\n        }\n      }\n    };\n    function createThenableState() {\n      {\n        return {\n          didWarnAboutUncachedPromise: false,\n          thenables: []\n        };\n      }\n    }\n    function isThenableResolved(thenable) {\n      var status = thenable.status;\n      return status === \"fulfilled\" || status === \"rejected\";\n    }\n    function noop() {}\n    function trackUsedThenable(thenableState, thenable, index) {\n      if (ReactCurrentActQueue$2.current !== null) {\n        ReactCurrentActQueue$2.didUsePromise = true;\n      }\n      var trackedThenables = getThenablesFromState(thenableState);\n      var previous = trackedThenables[index];\n      if (previous === undefined) {\n        trackedThenables.push(thenable);\n      } else {\n        if (previous !== thenable) {\n          {\n            var thenableStateDev = thenableState;\n            if (!thenableStateDev.didWarnAboutUncachedPromise) {\n              thenableStateDev.didWarnAboutUncachedPromise = true;\n              error(\"A component was suspended by an uncached promise. Creating \" + \"promises inside a Client Component or hook is not yet \" + \"supported, except via a Suspense-compatible library or framework.\");\n            }\n          }\n          thenable.then(noop, noop);\n          thenable = previous;\n        }\n      }\n      switch (thenable.status) {\n        case \"fulfilled\":\n          {\n            var fulfilledValue = thenable.value;\n            return fulfilledValue;\n          }\n        case \"rejected\":\n          {\n            var rejectedError = thenable.reason;\n            checkIfUseWrappedInAsyncCatch(rejectedError);\n            throw rejectedError;\n          }\n        default:\n          {\n            if (typeof thenable.status === \"string\") {\n              thenable.then(noop, noop);\n            } else {\n              var root = getWorkInProgressRoot();\n              if (root !== null && root.shellSuspendCounter > 100) {\n                throw new Error(\"async/await is not yet supported in Client Components, only \" + \"Server Components. This error is often caused by accidentally \" + \"adding `'use client'` to a module that was originally written \" + \"for the server.\");\n              }\n              var pendingThenable = thenable;\n              pendingThenable.status = \"pending\";\n              pendingThenable.then(function (fulfilledValue) {\n                if (thenable.status === \"pending\") {\n                  var fulfilledThenable = thenable;\n                  fulfilledThenable.status = \"fulfilled\";\n                  fulfilledThenable.value = fulfilledValue;\n                }\n              }, function (error) {\n                if (thenable.status === \"pending\") {\n                  var rejectedThenable = thenable;\n                  rejectedThenable.status = \"rejected\";\n                  rejectedThenable.reason = error;\n                }\n              });\n              switch (thenable.status) {\n                case \"fulfilled\":\n                  {\n                    var fulfilledThenable = thenable;\n                    return fulfilledThenable.value;\n                  }\n                case \"rejected\":\n                  {\n                    var rejectedThenable = thenable;\n                    var _rejectedError = rejectedThenable.reason;\n                    checkIfUseWrappedInAsyncCatch(_rejectedError);\n                    throw _rejectedError;\n                  }\n              }\n            }\n            suspendedThenable = thenable;\n            {\n              needsToResetSuspendedThenableDEV = true;\n            }\n            throw SuspenseException;\n          }\n      }\n    }\n    var suspendedThenable = null;\n    var needsToResetSuspendedThenableDEV = false;\n    function getSuspendedThenable() {\n      if (suspendedThenable === null) {\n        throw new Error(\"Expected a suspended thenable. This is a bug in React. Please file \" + \"an issue.\");\n      }\n      var thenable = suspendedThenable;\n      suspendedThenable = null;\n      {\n        needsToResetSuspendedThenableDEV = false;\n      }\n      return thenable;\n    }\n    function checkIfUseWrappedInTryCatch() {\n      {\n        if (needsToResetSuspendedThenableDEV) {\n          needsToResetSuspendedThenableDEV = false;\n          return true;\n        }\n      }\n      return false;\n    }\n    function checkIfUseWrappedInAsyncCatch(rejectedReason) {\n      if (rejectedReason === SuspenseException) {\n        throw new Error(\"Hooks are not supported inside an async component. This \" + \"error is often caused by accidentally adding `'use client'` \" + \"to a module that was originally written for the server.\");\n      }\n    }\n    var thenableState$1 = null;\n    var thenableIndexCounter$1 = 0;\n    var didWarnAboutMaps;\n    var didWarnAboutGenerators;\n    var didWarnAboutStringRefs;\n    var ownerHasKeyUseWarning;\n    var ownerHasFunctionTypeWarning;\n    var warnForMissingKey = function (child, returnFiber) {};\n    {\n      didWarnAboutMaps = false;\n      didWarnAboutGenerators = false;\n      didWarnAboutStringRefs = {};\n      ownerHasKeyUseWarning = {};\n      ownerHasFunctionTypeWarning = {};\n      warnForMissingKey = function (child, returnFiber) {\n        if (child === null || typeof child !== \"object\") {\n          return;\n        }\n        if (!child._store || child._store.validated || child.key != null) {\n          return;\n        }\n        if (typeof child._store !== \"object\") {\n          throw new Error(\"React Component in warnForMissingKey should have a _store. \" + \"This error is likely caused by a bug in React. Please file an issue.\");\n        }\n        child._store.validated = true;\n        var componentName = getComponentNameFromFiber(returnFiber) || \"Component\";\n        if (ownerHasKeyUseWarning[componentName]) {\n          return;\n        }\n        ownerHasKeyUseWarning[componentName] = true;\n        error(\"Each child in a list should have a unique \" + '\"key\" prop. See https://reactjs.org/link/warning-keys for ' + \"more information.\");\n      };\n    }\n    function isReactClass(type) {\n      return type.prototype && type.prototype.isReactComponent;\n    }\n    function unwrapThenable(thenable) {\n      var index = thenableIndexCounter$1;\n      thenableIndexCounter$1 += 1;\n      if (thenableState$1 === null) {\n        thenableState$1 = createThenableState();\n      }\n      return trackUsedThenable(thenableState$1, thenable, index);\n    }\n    function coerceRef(returnFiber, current, element) {\n      var mixedRef = element.ref;\n      if (mixedRef !== null && typeof mixedRef !== \"function\" && typeof mixedRef !== \"object\") {\n        {\n          if (!(element._owner && element._owner.tag !== ClassComponent) && !(typeof element.type === \"function\" && !isReactClass(element.type)) && element._owner) {\n            var componentName = getComponentNameFromFiber(returnFiber) || \"Component\";\n            if (!didWarnAboutStringRefs[componentName]) {\n              error('Component \"%s\" contains the string ref \"%s\". Support for string refs ' + \"will be removed in a future major release. We recommend using \" + \"useRef() or createRef() instead. \" + \"Learn more about using refs safely here: \" + \"https://reactjs.org/link/strict-mode-string-ref\", componentName, mixedRef);\n              didWarnAboutStringRefs[componentName] = true;\n            }\n          }\n        }\n        if (element._owner) {\n          var owner = element._owner;\n          var inst;\n          if (owner) {\n            var ownerFiber = owner;\n            if (ownerFiber.tag !== ClassComponent) {\n              throw new Error(\"Function components cannot have string refs. \" + \"We recommend using useRef() instead. \" + \"Learn more about using refs safely here: \" + \"https://reactjs.org/link/strict-mode-string-ref\");\n            }\n            inst = ownerFiber.stateNode;\n          }\n          if (!inst) {\n            throw new Error(\"Missing owner for string ref \" + mixedRef + \". This error is likely caused by a \" + \"bug in React. Please file an issue.\");\n          }\n          var resolvedInst = inst;\n          {\n            checkPropStringCoercion(mixedRef, \"ref\");\n          }\n          var stringRef = \"\" + mixedRef;\n          if (current !== null && current.ref !== null && typeof current.ref === \"function\" && current.ref._stringRef === stringRef) {\n            return current.ref;\n          }\n          var ref = function (value) {\n            var refs = resolvedInst.refs;\n            if (value === null) {\n              delete refs[stringRef];\n            } else {\n              refs[stringRef] = value;\n            }\n          };\n          ref._stringRef = stringRef;\n          return ref;\n        } else {\n          if (typeof mixedRef !== \"string\") {\n            throw new Error(\"Expected ref to be a function, a string, an object returned by React.createRef(), or null.\");\n          }\n          if (!element._owner) {\n            throw new Error(\"Element ref was specified as a string (\" + mixedRef + \") but no owner was set. This could happen for one of\" + \" the following reasons:\\n\" + \"1. You may be adding a ref to a function component\\n\" + \"2. You may be adding a ref to a component that was not created inside a component's render method\\n\" + \"3. You have multiple copies of React loaded\\n\" + \"See https://reactjs.org/link/refs-must-have-owner for more information.\");\n          }\n        }\n      }\n      return mixedRef;\n    }\n    function throwOnInvalidObjectType(returnFiber, newChild) {\n      var childString = Object.prototype.toString.call(newChild);\n      throw new Error(\"Objects are not valid as a React child (found: \" + (childString === \"[object Object]\" ? \"object with keys {\" + Object.keys(newChild).join(\", \") + \"}\" : childString) + \"). \" + \"If you meant to render a collection of children, use an array \" + \"instead.\");\n    }\n    function warnOnFunctionType(returnFiber) {\n      {\n        var componentName = getComponentNameFromFiber(returnFiber) || \"Component\";\n        if (ownerHasFunctionTypeWarning[componentName]) {\n          return;\n        }\n        ownerHasFunctionTypeWarning[componentName] = true;\n        error(\"Functions are not valid as a React child. This may happen if \" + \"you return a Component instead of <Component /> from render. \" + \"Or maybe you meant to call this function rather than return it.\");\n      }\n    }\n    function resolveLazy(lazyType) {\n      var payload = lazyType._payload;\n      var init = lazyType._init;\n      return init(payload);\n    }\n    function createChildReconciler(shouldTrackSideEffects) {\n      function deleteChild(returnFiber, childToDelete) {\n        if (!shouldTrackSideEffects) {\n          return;\n        }\n        var deletions = returnFiber.deletions;\n        if (deletions === null) {\n          returnFiber.deletions = [childToDelete];\n          returnFiber.flags |= ChildDeletion;\n        } else {\n          deletions.push(childToDelete);\n        }\n      }\n      function deleteRemainingChildren(returnFiber, currentFirstChild) {\n        if (!shouldTrackSideEffects) {\n          return null;\n        }\n        var childToDelete = currentFirstChild;\n        while (childToDelete !== null) {\n          deleteChild(returnFiber, childToDelete);\n          childToDelete = childToDelete.sibling;\n        }\n        return null;\n      }\n      function mapRemainingChildren(returnFiber, currentFirstChild) {\n        var existingChildren = new Map();\n        var existingChild = currentFirstChild;\n        while (existingChild !== null) {\n          if (existingChild.key !== null) {\n            existingChildren.set(existingChild.key, existingChild);\n          } else {\n            existingChildren.set(existingChild.index, existingChild);\n          }\n          existingChild = existingChild.sibling;\n        }\n        return existingChildren;\n      }\n      function useFiber(fiber, pendingProps) {\n        var clone = createWorkInProgress(fiber, pendingProps);\n        clone.index = 0;\n        clone.sibling = null;\n        return clone;\n      }\n      function placeChild(newFiber, lastPlacedIndex, newIndex) {\n        newFiber.index = newIndex;\n        if (!shouldTrackSideEffects) {\n          newFiber.flags |= Forked;\n          return lastPlacedIndex;\n        }\n        var current = newFiber.alternate;\n        if (current !== null) {\n          var oldIndex = current.index;\n          if (oldIndex < lastPlacedIndex) {\n            newFiber.flags |= Placement | PlacementDEV;\n            return lastPlacedIndex;\n          } else {\n            return oldIndex;\n          }\n        } else {\n          newFiber.flags |= Placement | PlacementDEV;\n          return lastPlacedIndex;\n        }\n      }\n      function placeSingleChild(newFiber) {\n        if (shouldTrackSideEffects && newFiber.alternate === null) {\n          newFiber.flags |= Placement | PlacementDEV;\n        }\n        return newFiber;\n      }\n      function updateTextNode(returnFiber, current, textContent, lanes) {\n        if (current === null || current.tag !== HostText) {\n          var created = createFiberFromText(textContent, returnFiber.mode, lanes);\n          created.return = returnFiber;\n          return created;\n        } else {\n          var existing = useFiber(current, textContent);\n          existing.return = returnFiber;\n          return existing;\n        }\n      }\n      function updateElement(returnFiber, current, element, lanes) {\n        var elementType = element.type;\n        if (elementType === REACT_FRAGMENT_TYPE) {\n          return updateFragment(returnFiber, current, element.props.children, lanes, element.key);\n        }\n        if (current !== null) {\n          if (current.elementType === elementType || isCompatibleFamilyForHotReloading(current, element) || typeof elementType === \"object\" && elementType !== null && elementType.$$typeof === REACT_LAZY_TYPE && resolveLazy(elementType) === current.type) {\n            var existing = useFiber(current, element.props);\n            existing.ref = coerceRef(returnFiber, current, element);\n            existing.return = returnFiber;\n            {\n              existing._debugOwner = element._owner;\n            }\n            return existing;\n          }\n        }\n        var created = createFiberFromElement(element, returnFiber.mode, lanes);\n        created.ref = coerceRef(returnFiber, current, element);\n        created.return = returnFiber;\n        return created;\n      }\n      function updatePortal(returnFiber, current, portal, lanes) {\n        if (current === null || current.tag !== HostPortal || current.stateNode.containerInfo !== portal.containerInfo || current.stateNode.implementation !== portal.implementation) {\n          var created = createFiberFromPortal(portal, returnFiber.mode, lanes);\n          created.return = returnFiber;\n          return created;\n        } else {\n          var existing = useFiber(current, portal.children || []);\n          existing.return = returnFiber;\n          return existing;\n        }\n      }\n      function updateFragment(returnFiber, current, fragment, lanes, key) {\n        if (current === null || current.tag !== Fragment) {\n          var created = createFiberFromFragment(fragment, returnFiber.mode, lanes, key);\n          created.return = returnFiber;\n          return created;\n        } else {\n          var existing = useFiber(current, fragment);\n          existing.return = returnFiber;\n          return existing;\n        }\n      }\n      function createChild(returnFiber, newChild, lanes) {\n        if (typeof newChild === \"string\" && newChild !== \"\" || typeof newChild === \"number\") {\n          var created = createFiberFromText(\"\" + newChild, returnFiber.mode, lanes);\n          created.return = returnFiber;\n          return created;\n        }\n        if (typeof newChild === \"object\" && newChild !== null) {\n          switch (newChild.$$typeof) {\n            case REACT_ELEMENT_TYPE:\n              {\n                var _created = createFiberFromElement(newChild, returnFiber.mode, lanes);\n                _created.ref = coerceRef(returnFiber, null, newChild);\n                _created.return = returnFiber;\n                return _created;\n              }\n            case REACT_PORTAL_TYPE:\n              {\n                var _created2 = createFiberFromPortal(newChild, returnFiber.mode, lanes);\n                _created2.return = returnFiber;\n                return _created2;\n              }\n            case REACT_LAZY_TYPE:\n              {\n                var payload = newChild._payload;\n                var init = newChild._init;\n                return createChild(returnFiber, init(payload), lanes);\n              }\n          }\n          if (isArray(newChild) || getIteratorFn(newChild)) {\n            var _created3 = createFiberFromFragment(newChild, returnFiber.mode, lanes, null);\n            _created3.return = returnFiber;\n            return _created3;\n          }\n          if (typeof newChild.then === \"function\") {\n            var thenable = newChild;\n            return createChild(returnFiber, unwrapThenable(thenable), lanes);\n          }\n          if (newChild.$$typeof === REACT_CONTEXT_TYPE) {\n            var context = newChild;\n            return createChild(returnFiber, readContextDuringReconcilation(returnFiber, context, lanes), lanes);\n          }\n          throwOnInvalidObjectType(returnFiber, newChild);\n        }\n        {\n          if (typeof newChild === \"function\") {\n            warnOnFunctionType(returnFiber);\n          }\n        }\n        return null;\n      }\n      function updateSlot(returnFiber, oldFiber, newChild, lanes) {\n        var key = oldFiber !== null ? oldFiber.key : null;\n        if (typeof newChild === \"string\" && newChild !== \"\" || typeof newChild === \"number\") {\n          if (key !== null) {\n            return null;\n          }\n          return updateTextNode(returnFiber, oldFiber, \"\" + newChild, lanes);\n        }\n        if (typeof newChild === \"object\" && newChild !== null) {\n          switch (newChild.$$typeof) {\n            case REACT_ELEMENT_TYPE:\n              {\n                if (newChild.key === key) {\n                  return updateElement(returnFiber, oldFiber, newChild, lanes);\n                } else {\n                  return null;\n                }\n              }\n            case REACT_PORTAL_TYPE:\n              {\n                if (newChild.key === key) {\n                  return updatePortal(returnFiber, oldFiber, newChild, lanes);\n                } else {\n                  return null;\n                }\n              }\n            case REACT_LAZY_TYPE:\n              {\n                var payload = newChild._payload;\n                var init = newChild._init;\n                return updateSlot(returnFiber, oldFiber, init(payload), lanes);\n              }\n          }\n          if (isArray(newChild) || getIteratorFn(newChild)) {\n            if (key !== null) {\n              return null;\n            }\n            return updateFragment(returnFiber, oldFiber, newChild, lanes, null);\n          }\n          if (typeof newChild.then === \"function\") {\n            var thenable = newChild;\n            return updateSlot(returnFiber, oldFiber, unwrapThenable(thenable), lanes);\n          }\n          if (newChild.$$typeof === REACT_CONTEXT_TYPE) {\n            var context = newChild;\n            return updateSlot(returnFiber, oldFiber, readContextDuringReconcilation(returnFiber, context, lanes), lanes);\n          }\n          throwOnInvalidObjectType(returnFiber, newChild);\n        }\n        {\n          if (typeof newChild === \"function\") {\n            warnOnFunctionType(returnFiber);\n          }\n        }\n        return null;\n      }\n      function updateFromMap(existingChildren, returnFiber, newIdx, newChild, lanes) {\n        if (typeof newChild === \"string\" && newChild !== \"\" || typeof newChild === \"number\") {\n          var matchedFiber = existingChildren.get(newIdx) || null;\n          return updateTextNode(returnFiber, matchedFiber, \"\" + newChild, lanes);\n        }\n        if (typeof newChild === \"object\" && newChild !== null) {\n          switch (newChild.$$typeof) {\n            case REACT_ELEMENT_TYPE:\n              {\n                var _matchedFiber = existingChildren.get(newChild.key === null ? newIdx : newChild.key) || null;\n                return updateElement(returnFiber, _matchedFiber, newChild, lanes);\n              }\n            case REACT_PORTAL_TYPE:\n              {\n                var _matchedFiber2 = existingChildren.get(newChild.key === null ? newIdx : newChild.key) || null;\n                return updatePortal(returnFiber, _matchedFiber2, newChild, lanes);\n              }\n            case REACT_LAZY_TYPE:\n              var payload = newChild._payload;\n              var init = newChild._init;\n              return updateFromMap(existingChildren, returnFiber, newIdx, init(payload), lanes);\n          }\n          if (isArray(newChild) || getIteratorFn(newChild)) {\n            var _matchedFiber3 = existingChildren.get(newIdx) || null;\n            return updateFragment(returnFiber, _matchedFiber3, newChild, lanes, null);\n          }\n          if (typeof newChild.then === \"function\") {\n            var thenable = newChild;\n            return updateFromMap(existingChildren, returnFiber, newIdx, unwrapThenable(thenable), lanes);\n          }\n          if (newChild.$$typeof === REACT_CONTEXT_TYPE) {\n            var context = newChild;\n            return updateFromMap(existingChildren, returnFiber, newIdx, readContextDuringReconcilation(returnFiber, context, lanes), lanes);\n          }\n          throwOnInvalidObjectType(returnFiber, newChild);\n        }\n        {\n          if (typeof newChild === \"function\") {\n            warnOnFunctionType(returnFiber);\n          }\n        }\n        return null;\n      }\n      function warnOnInvalidKey(child, knownKeys, returnFiber) {\n        {\n          if (typeof child !== \"object\" || child === null) {\n            return knownKeys;\n          }\n          switch (child.$$typeof) {\n            case REACT_ELEMENT_TYPE:\n            case REACT_PORTAL_TYPE:\n              warnForMissingKey(child, returnFiber);\n              var key = child.key;\n              if (typeof key !== \"string\") {\n                break;\n              }\n              if (knownKeys === null) {\n                knownKeys = new Set();\n                knownKeys.add(key);\n                break;\n              }\n              if (!knownKeys.has(key)) {\n                knownKeys.add(key);\n                break;\n              }\n              error(\"Encountered two children with the same key, `%s`. \" + \"Keys should be unique so that components maintain their identity \" + \"across updates. Non-unique keys may cause children to be \" + \"duplicated and/or omitted — the behavior is unsupported and \" + \"could change in a future version.\", key);\n              break;\n            case REACT_LAZY_TYPE:\n              var payload = child._payload;\n              var init = child._init;\n              warnOnInvalidKey(init(payload), knownKeys, returnFiber);\n              break;\n          }\n        }\n        return knownKeys;\n      }\n      function reconcileChildrenArray(returnFiber, currentFirstChild, newChildren, lanes) {\n        {\n          var knownKeys = null;\n          for (var i = 0; i < newChildren.length; i++) {\n            var child = newChildren[i];\n            knownKeys = warnOnInvalidKey(child, knownKeys, returnFiber);\n          }\n        }\n        var resultingFirstChild = null;\n        var previousNewFiber = null;\n        var oldFiber = currentFirstChild;\n        var lastPlacedIndex = 0;\n        var newIdx = 0;\n        var nextOldFiber = null;\n        for (; oldFiber !== null && newIdx < newChildren.length; newIdx++) {\n          if (oldFiber.index > newIdx) {\n            nextOldFiber = oldFiber;\n            oldFiber = null;\n          } else {\n            nextOldFiber = oldFiber.sibling;\n          }\n          var newFiber = updateSlot(returnFiber, oldFiber, newChildren[newIdx], lanes);\n          if (newFiber === null) {\n            if (oldFiber === null) {\n              oldFiber = nextOldFiber;\n            }\n            break;\n          }\n          if (shouldTrackSideEffects) {\n            if (oldFiber && newFiber.alternate === null) {\n              deleteChild(returnFiber, oldFiber);\n            }\n          }\n          lastPlacedIndex = placeChild(newFiber, lastPlacedIndex, newIdx);\n          if (previousNewFiber === null) {\n            resultingFirstChild = newFiber;\n          } else {\n            previousNewFiber.sibling = newFiber;\n          }\n          previousNewFiber = newFiber;\n          oldFiber = nextOldFiber;\n        }\n        if (newIdx === newChildren.length) {\n          deleteRemainingChildren(returnFiber, oldFiber);\n          return resultingFirstChild;\n        }\n        if (oldFiber === null) {\n          for (; newIdx < newChildren.length; newIdx++) {\n            var _newFiber = createChild(returnFiber, newChildren[newIdx], lanes);\n            if (_newFiber === null) {\n              continue;\n            }\n            lastPlacedIndex = placeChild(_newFiber, lastPlacedIndex, newIdx);\n            if (previousNewFiber === null) {\n              resultingFirstChild = _newFiber;\n            } else {\n              previousNewFiber.sibling = _newFiber;\n            }\n            previousNewFiber = _newFiber;\n          }\n          return resultingFirstChild;\n        }\n        var existingChildren = mapRemainingChildren(returnFiber, oldFiber);\n        for (; newIdx < newChildren.length; newIdx++) {\n          var _newFiber2 = updateFromMap(existingChildren, returnFiber, newIdx, newChildren[newIdx], lanes);\n          if (_newFiber2 !== null) {\n            if (shouldTrackSideEffects) {\n              if (_newFiber2.alternate !== null) {\n                existingChildren.delete(_newFiber2.key === null ? newIdx : _newFiber2.key);\n              }\n            }\n            lastPlacedIndex = placeChild(_newFiber2, lastPlacedIndex, newIdx);\n            if (previousNewFiber === null) {\n              resultingFirstChild = _newFiber2;\n            } else {\n              previousNewFiber.sibling = _newFiber2;\n            }\n            previousNewFiber = _newFiber2;\n          }\n        }\n        if (shouldTrackSideEffects) {\n          existingChildren.forEach(function (child) {\n            return deleteChild(returnFiber, child);\n          });\n        }\n        return resultingFirstChild;\n      }\n      function reconcileChildrenIterator(returnFiber, currentFirstChild, newChildrenIterable, lanes) {\n        var iteratorFn = getIteratorFn(newChildrenIterable);\n        if (typeof iteratorFn !== \"function\") {\n          throw new Error(\"An object is not an iterable. This error is likely caused by a bug in \" + \"React. Please file an issue.\");\n        }\n        {\n          if (typeof Symbol === \"function\" && newChildrenIterable[Symbol.toStringTag] === \"Generator\") {\n            if (!didWarnAboutGenerators) {\n              error(\"Using Generators as children is unsupported and will likely yield \" + \"unexpected results because enumerating a generator mutates it. \" + \"You may convert it to an array with `Array.from()` or the \" + \"`[...spread]` operator before rendering. Keep in mind \" + \"you might need to polyfill these features for older browsers.\");\n            }\n            didWarnAboutGenerators = true;\n          }\n          if (newChildrenIterable.entries === iteratorFn) {\n            if (!didWarnAboutMaps) {\n              error(\"Using Maps as children is not supported. \" + \"Use an array of keyed ReactElements instead.\");\n            }\n            didWarnAboutMaps = true;\n          }\n          var _newChildren = iteratorFn.call(newChildrenIterable);\n          if (_newChildren) {\n            var knownKeys = null;\n            var _step = _newChildren.next();\n            for (; !_step.done; _step = _newChildren.next()) {\n              var child = _step.value;\n              knownKeys = warnOnInvalidKey(child, knownKeys, returnFiber);\n            }\n          }\n        }\n        var newChildren = iteratorFn.call(newChildrenIterable);\n        if (newChildren == null) {\n          throw new Error(\"An iterable object provided no iterator.\");\n        }\n        var resultingFirstChild = null;\n        var previousNewFiber = null;\n        var oldFiber = currentFirstChild;\n        var lastPlacedIndex = 0;\n        var newIdx = 0;\n        var nextOldFiber = null;\n        var step = newChildren.next();\n        for (; oldFiber !== null && !step.done; newIdx++, step = newChildren.next()) {\n          if (oldFiber.index > newIdx) {\n            nextOldFiber = oldFiber;\n            oldFiber = null;\n          } else {\n            nextOldFiber = oldFiber.sibling;\n          }\n          var newFiber = updateSlot(returnFiber, oldFiber, step.value, lanes);\n          if (newFiber === null) {\n            if (oldFiber === null) {\n              oldFiber = nextOldFiber;\n            }\n            break;\n          }\n          if (shouldTrackSideEffects) {\n            if (oldFiber && newFiber.alternate === null) {\n              deleteChild(returnFiber, oldFiber);\n            }\n          }\n          lastPlacedIndex = placeChild(newFiber, lastPlacedIndex, newIdx);\n          if (previousNewFiber === null) {\n            resultingFirstChild = newFiber;\n          } else {\n            previousNewFiber.sibling = newFiber;\n          }\n          previousNewFiber = newFiber;\n          oldFiber = nextOldFiber;\n        }\n        if (step.done) {\n          deleteRemainingChildren(returnFiber, oldFiber);\n          return resultingFirstChild;\n        }\n        if (oldFiber === null) {\n          for (; !step.done; newIdx++, step = newChildren.next()) {\n            var _newFiber3 = createChild(returnFiber, step.value, lanes);\n            if (_newFiber3 === null) {\n              continue;\n            }\n            lastPlacedIndex = placeChild(_newFiber3, lastPlacedIndex, newIdx);\n            if (previousNewFiber === null) {\n              resultingFirstChild = _newFiber3;\n            } else {\n              previousNewFiber.sibling = _newFiber3;\n            }\n            previousNewFiber = _newFiber3;\n          }\n          return resultingFirstChild;\n        }\n        var existingChildren = mapRemainingChildren(returnFiber, oldFiber);\n        for (; !step.done; newIdx++, step = newChildren.next()) {\n          var _newFiber4 = updateFromMap(existingChildren, returnFiber, newIdx, step.value, lanes);\n          if (_newFiber4 !== null) {\n            if (shouldTrackSideEffects) {\n              if (_newFiber4.alternate !== null) {\n                existingChildren.delete(_newFiber4.key === null ? newIdx : _newFiber4.key);\n              }\n            }\n            lastPlacedIndex = placeChild(_newFiber4, lastPlacedIndex, newIdx);\n            if (previousNewFiber === null) {\n              resultingFirstChild = _newFiber4;\n            } else {\n              previousNewFiber.sibling = _newFiber4;\n            }\n            previousNewFiber = _newFiber4;\n          }\n        }\n        if (shouldTrackSideEffects) {\n          existingChildren.forEach(function (child) {\n            return deleteChild(returnFiber, child);\n          });\n        }\n        return resultingFirstChild;\n      }\n      function reconcileSingleTextNode(returnFiber, currentFirstChild, textContent, lanes) {\n        if (currentFirstChild !== null && currentFirstChild.tag === HostText) {\n          deleteRemainingChildren(returnFiber, currentFirstChild.sibling);\n          var existing = useFiber(currentFirstChild, textContent);\n          existing.return = returnFiber;\n          return existing;\n        }\n        deleteRemainingChildren(returnFiber, currentFirstChild);\n        var created = createFiberFromText(textContent, returnFiber.mode, lanes);\n        created.return = returnFiber;\n        return created;\n      }\n      function reconcileSingleElement(returnFiber, currentFirstChild, element, lanes) {\n        var key = element.key;\n        var child = currentFirstChild;\n        while (child !== null) {\n          if (child.key === key) {\n            var elementType = element.type;\n            if (elementType === REACT_FRAGMENT_TYPE) {\n              if (child.tag === Fragment) {\n                deleteRemainingChildren(returnFiber, child.sibling);\n                var existing = useFiber(child, element.props.children);\n                existing.return = returnFiber;\n                {\n                  existing._debugOwner = element._owner;\n                }\n                return existing;\n              }\n            } else {\n              if (child.elementType === elementType || isCompatibleFamilyForHotReloading(child, element) || typeof elementType === \"object\" && elementType !== null && elementType.$$typeof === REACT_LAZY_TYPE && resolveLazy(elementType) === child.type) {\n                deleteRemainingChildren(returnFiber, child.sibling);\n                var _existing = useFiber(child, element.props);\n                _existing.ref = coerceRef(returnFiber, child, element);\n                _existing.return = returnFiber;\n                {\n                  _existing._debugOwner = element._owner;\n                }\n                return _existing;\n              }\n            }\n            deleteRemainingChildren(returnFiber, child);\n            break;\n          } else {\n            deleteChild(returnFiber, child);\n          }\n          child = child.sibling;\n        }\n        if (element.type === REACT_FRAGMENT_TYPE) {\n          var created = createFiberFromFragment(element.props.children, returnFiber.mode, lanes, element.key);\n          created.return = returnFiber;\n          return created;\n        } else {\n          var _created4 = createFiberFromElement(element, returnFiber.mode, lanes);\n          _created4.ref = coerceRef(returnFiber, currentFirstChild, element);\n          _created4.return = returnFiber;\n          return _created4;\n        }\n      }\n      function reconcileSinglePortal(returnFiber, currentFirstChild, portal, lanes) {\n        var key = portal.key;\n        var child = currentFirstChild;\n        while (child !== null) {\n          if (child.key === key) {\n            if (child.tag === HostPortal && child.stateNode.containerInfo === portal.containerInfo && child.stateNode.implementation === portal.implementation) {\n              deleteRemainingChildren(returnFiber, child.sibling);\n              var existing = useFiber(child, portal.children || []);\n              existing.return = returnFiber;\n              return existing;\n            } else {\n              deleteRemainingChildren(returnFiber, child);\n              break;\n            }\n          } else {\n            deleteChild(returnFiber, child);\n          }\n          child = child.sibling;\n        }\n        var created = createFiberFromPortal(portal, returnFiber.mode, lanes);\n        created.return = returnFiber;\n        return created;\n      }\n      function reconcileChildFibersImpl(returnFiber, currentFirstChild, newChild, lanes) {\n        var isUnkeyedTopLevelFragment = typeof newChild === \"object\" && newChild !== null && newChild.type === REACT_FRAGMENT_TYPE && newChild.key === null;\n        if (isUnkeyedTopLevelFragment) {\n          newChild = newChild.props.children;\n        }\n        if (typeof newChild === \"object\" && newChild !== null) {\n          switch (newChild.$$typeof) {\n            case REACT_ELEMENT_TYPE:\n              return placeSingleChild(reconcileSingleElement(returnFiber, currentFirstChild, newChild, lanes));\n            case REACT_PORTAL_TYPE:\n              return placeSingleChild(reconcileSinglePortal(returnFiber, currentFirstChild, newChild, lanes));\n            case REACT_LAZY_TYPE:\n              var payload = newChild._payload;\n              var init = newChild._init;\n              return reconcileChildFibers(returnFiber, currentFirstChild, init(payload), lanes);\n          }\n          if (isArray(newChild)) {\n            return reconcileChildrenArray(returnFiber, currentFirstChild, newChild, lanes);\n          }\n          if (getIteratorFn(newChild)) {\n            return reconcileChildrenIterator(returnFiber, currentFirstChild, newChild, lanes);\n          }\n          if (typeof newChild.then === \"function\") {\n            var thenable = newChild;\n            return reconcileChildFibersImpl(returnFiber, currentFirstChild, unwrapThenable(thenable), lanes);\n          }\n          if (newChild.$$typeof === REACT_CONTEXT_TYPE) {\n            var context = newChild;\n            return reconcileChildFibersImpl(returnFiber, currentFirstChild, readContextDuringReconcilation(returnFiber, context, lanes), lanes);\n          }\n          throwOnInvalidObjectType(returnFiber, newChild);\n        }\n        if (typeof newChild === \"string\" && newChild !== \"\" || typeof newChild === \"number\") {\n          return placeSingleChild(reconcileSingleTextNode(returnFiber, currentFirstChild, \"\" + newChild, lanes));\n        }\n        {\n          if (typeof newChild === \"function\") {\n            warnOnFunctionType(returnFiber);\n          }\n        }\n        return deleteRemainingChildren(returnFiber, currentFirstChild);\n      }\n      function reconcileChildFibers(returnFiber, currentFirstChild, newChild, lanes) {\n        thenableIndexCounter$1 = 0;\n        var firstChildFiber = reconcileChildFibersImpl(returnFiber, currentFirstChild, newChild, lanes);\n        thenableState$1 = null;\n        return firstChildFiber;\n      }\n      return reconcileChildFibers;\n    }\n    var reconcileChildFibers = createChildReconciler(true);\n    var mountChildFibers = createChildReconciler(false);\n    function resetChildReconcilerOnUnwind() {\n      thenableState$1 = null;\n      thenableIndexCounter$1 = 0;\n    }\n    function cloneChildFibers(current, workInProgress) {\n      if (current !== null && workInProgress.child !== current.child) {\n        throw new Error(\"Resuming work not yet implemented.\");\n      }\n      if (workInProgress.child === null) {\n        return;\n      }\n      var currentChild = workInProgress.child;\n      var newChild = createWorkInProgress(currentChild, currentChild.pendingProps);\n      workInProgress.child = newChild;\n      newChild.return = workInProgress;\n      while (currentChild.sibling !== null) {\n        currentChild = currentChild.sibling;\n        newChild = newChild.sibling = createWorkInProgress(currentChild, currentChild.pendingProps);\n        newChild.return = workInProgress;\n      }\n      newChild.sibling = null;\n    }\n    function resetChildFibers(workInProgress, lanes) {\n      var child = workInProgress.child;\n      while (child !== null) {\n        resetWorkInProgress(child, lanes);\n        child = child.sibling;\n      }\n    }\n    var currentTreeHiddenStackCursor = createCursor(null);\n    var prevEntangledRenderLanesCursor = createCursor(NoLanes);\n    function pushHiddenContext(fiber, context) {\n      var prevEntangledRenderLanes = getEntangledRenderLanes();\n      push(prevEntangledRenderLanesCursor, prevEntangledRenderLanes, fiber);\n      push(currentTreeHiddenStackCursor, context, fiber);\n      setEntangledRenderLanes(mergeLanes(prevEntangledRenderLanes, context.baseLanes));\n    }\n    function reuseHiddenContextOnStack(fiber) {\n      push(prevEntangledRenderLanesCursor, getEntangledRenderLanes(), fiber);\n      push(currentTreeHiddenStackCursor, currentTreeHiddenStackCursor.current, fiber);\n    }\n    function popHiddenContext(fiber) {\n      setEntangledRenderLanes(prevEntangledRenderLanesCursor.current);\n      pop(currentTreeHiddenStackCursor, fiber);\n      pop(prevEntangledRenderLanesCursor, fiber);\n    }\n    function isCurrentTreeHidden() {\n      return currentTreeHiddenStackCursor.current !== null;\n    }\n    var suspenseHandlerStackCursor = createCursor(null);\n    var shellBoundary = null;\n    function getShellBoundary() {\n      return shellBoundary;\n    }\n    function pushPrimaryTreeSuspenseHandler(handler) {\n      var current = handler.alternate;\n      pushSuspenseListContext(handler, setDefaultShallowSuspenseListContext(suspenseStackCursor.current));\n      push(suspenseHandlerStackCursor, handler, handler);\n      if (shellBoundary === null) {\n        if (current === null || isCurrentTreeHidden()) {\n          shellBoundary = handler;\n        } else {\n          var prevState = current.memoizedState;\n          if (prevState !== null) {\n            shellBoundary = handler;\n          }\n        }\n      }\n    }\n    function pushFallbackTreeSuspenseHandler(fiber) {\n      reuseSuspenseHandlerOnStack(fiber);\n    }\n    function pushOffscreenSuspenseHandler(fiber) {\n      if (fiber.tag === OffscreenComponent) {\n        pushSuspenseListContext(fiber, suspenseStackCursor.current);\n        push(suspenseHandlerStackCursor, fiber, fiber);\n        if (shellBoundary !== null) ;else {\n          var current = fiber.alternate;\n          if (current !== null) {\n            var prevState = current.memoizedState;\n            if (prevState !== null) {\n              shellBoundary = fiber;\n            }\n          }\n        }\n      } else {\n        reuseSuspenseHandlerOnStack(fiber);\n      }\n    }\n    function reuseSuspenseHandlerOnStack(fiber) {\n      pushSuspenseListContext(fiber, suspenseStackCursor.current);\n      push(suspenseHandlerStackCursor, getSuspenseHandler(), fiber);\n    }\n    function getSuspenseHandler() {\n      return suspenseHandlerStackCursor.current;\n    }\n    function popSuspenseHandler(fiber) {\n      pop(suspenseHandlerStackCursor, fiber);\n      if (shellBoundary === fiber) {\n        shellBoundary = null;\n      }\n      popSuspenseListContext(fiber);\n    }\n    var DefaultSuspenseContext = 0;\n    var SubtreeSuspenseContextMask = 1;\n    var ForceSuspenseFallback = 2;\n    var suspenseStackCursor = createCursor(DefaultSuspenseContext);\n    function hasSuspenseListContext(parentContext, flag) {\n      return (parentContext & flag) !== 0;\n    }\n    function setDefaultShallowSuspenseListContext(parentContext) {\n      return parentContext & SubtreeSuspenseContextMask;\n    }\n    function setShallowSuspenseListContext(parentContext, shallowContext) {\n      return parentContext & SubtreeSuspenseContextMask | shallowContext;\n    }\n    function pushSuspenseListContext(fiber, newContext) {\n      push(suspenseStackCursor, newContext, fiber);\n    }\n    function popSuspenseListContext(fiber) {\n      pop(suspenseStackCursor, fiber);\n    }\n    function findFirstSuspended(row) {\n      var node = row;\n      while (node !== null) {\n        if (node.tag === SuspenseComponent) {\n          var state = node.memoizedState;\n          if (state !== null) {\n            var dehydrated = state.dehydrated;\n            if (dehydrated === null || isSuspenseInstancePending() || isSuspenseInstanceFallback()) {\n              return node;\n            }\n          }\n        } else if (node.tag === SuspenseListComponent && node.memoizedProps.revealOrder !== undefined) {\n          var didSuspend = (node.flags & DidCapture) !== NoFlags$1;\n          if (didSuspend) {\n            return node;\n          }\n        } else if (node.child !== null) {\n          node.child.return = node;\n          node = node.child;\n          continue;\n        }\n        if (node === row) {\n          return null;\n        }\n        while (node.sibling === null) {\n          if (node.return === null || node.return === row) {\n            return null;\n          }\n          node = node.return;\n        }\n        node.sibling.return = node.return;\n        node = node.sibling;\n      }\n      return null;\n    }\n    var NoFlags = 0;\n    var HasEffect = 1;\n    var Insertion = 2;\n    var Layout = 4;\n    var Passive = 8;\n    var ReactCurrentDispatcher$1 = ReactSharedInternals.ReactCurrentDispatcher,\n      ReactCurrentBatchConfig$2 = ReactSharedInternals.ReactCurrentBatchConfig;\n    var didWarnAboutMismatchedHooksForComponent;\n    var didWarnUncachedGetSnapshot;\n    var didWarnAboutUseWrappedInTryCatch;\n    var didWarnAboutAsyncClientComponent;\n    {\n      didWarnAboutMismatchedHooksForComponent = new Set();\n      didWarnAboutUseWrappedInTryCatch = new Set();\n      didWarnAboutAsyncClientComponent = new Set();\n    }\n    var renderLanes = NoLanes;\n    var currentlyRenderingFiber$1 = null;\n    var currentHook = null;\n    var workInProgressHook = null;\n    var didScheduleRenderPhaseUpdate = false;\n    var didScheduleRenderPhaseUpdateDuringThisPass = false;\n    var shouldDoubleInvokeUserFnsInHooksDEV = false;\n    var thenableIndexCounter = 0;\n    var thenableState = null;\n    var globalClientIdCounter = 0;\n    var RE_RENDER_LIMIT = 25;\n    var currentHookNameInDev = null;\n    var hookTypesDev = null;\n    var hookTypesUpdateIndexDev = -1;\n    var ignorePreviousDependencies = false;\n    function mountHookTypesDev() {\n      {\n        var hookName = currentHookNameInDev;\n        if (hookTypesDev === null) {\n          hookTypesDev = [hookName];\n        } else {\n          hookTypesDev.push(hookName);\n        }\n      }\n    }\n    function updateHookTypesDev() {\n      {\n        var hookName = currentHookNameInDev;\n        if (hookTypesDev !== null) {\n          hookTypesUpdateIndexDev++;\n          if (hookTypesDev[hookTypesUpdateIndexDev] !== hookName) {\n            warnOnHookMismatchInDev(hookName);\n          }\n        }\n      }\n    }\n    function checkDepsAreArrayDev(deps) {\n      {\n        if (deps !== undefined && deps !== null && !isArray(deps)) {\n          error(\"%s received a final argument that is not an array (instead, received `%s`). When \" + \"specified, the final argument must be an array.\", currentHookNameInDev, typeof deps);\n        }\n      }\n    }\n    function warnOnHookMismatchInDev(currentHookName) {\n      {\n        var componentName = getComponentNameFromFiber(currentlyRenderingFiber$1);\n        if (!didWarnAboutMismatchedHooksForComponent.has(componentName)) {\n          didWarnAboutMismatchedHooksForComponent.add(componentName);\n          if (hookTypesDev !== null) {\n            var table = \"\";\n            var secondColumnStart = 30;\n            for (var i = 0; i <= hookTypesUpdateIndexDev; i++) {\n              var oldHookName = hookTypesDev[i];\n              var newHookName = i === hookTypesUpdateIndexDev ? currentHookName : oldHookName;\n              var row = i + 1 + \". \" + oldHookName;\n              while (row.length < secondColumnStart) {\n                row += \" \";\n              }\n              row += newHookName + \"\\n\";\n              table += row;\n            }\n            error(\"React has detected a change in the order of Hooks called by %s. \" + \"This will lead to bugs and errors if not fixed. \" + \"For more information, read the Rules of Hooks: https://reactjs.org/link/rules-of-hooks\\n\\n\" + \"   Previous render            Next render\\n\" + \"   ------------------------------------------------------\\n\" + \"%s\" + \"   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\\n\", componentName, table);\n          }\n        }\n      }\n    }\n    function warnIfAsyncClientComponent(Component) {\n      {\n        var isAsyncFunction = Object.prototype.toString.call(Component) === \"[object AsyncFunction]\";\n        if (isAsyncFunction) {\n          var componentName = getComponentNameFromFiber(currentlyRenderingFiber$1);\n          if (!didWarnAboutAsyncClientComponent.has(componentName)) {\n            didWarnAboutAsyncClientComponent.add(componentName);\n            error(\"async/await is not yet supported in Client Components, only \" + \"Server Components. This error is often caused by accidentally \" + \"adding `'use client'` to a module that was originally written \" + \"for the server.\");\n          }\n        }\n      }\n    }\n    function throwInvalidHookError() {\n      throw new Error(\"Invalid hook call. Hooks can only be called inside of the body of a function component. This could happen for\" + \" one of the following reasons:\\n\" + \"1. You might have mismatching versions of React and the renderer (such as React DOM)\\n\" + \"2. You might be breaking the Rules of Hooks\\n\" + \"3. You might have more than one copy of React in the same app\\n\" + \"See https://reactjs.org/link/invalid-hook-call for tips about how to debug and fix this problem.\");\n    }\n    function areHookInputsEqual(nextDeps, prevDeps) {\n      {\n        if (ignorePreviousDependencies) {\n          return false;\n        }\n      }\n      if (prevDeps === null) {\n        {\n          error(\"%s received a final argument during this render, but not during \" + \"the previous render. Even though the final argument is optional, \" + \"its type cannot change between renders.\", currentHookNameInDev);\n        }\n        return false;\n      }\n      {\n        if (nextDeps.length !== prevDeps.length) {\n          error(\"The final argument passed to %s changed size between renders. The \" + \"order and size of this array must remain constant.\\n\\n\" + \"Previous: %s\\n\" + \"Incoming: %s\", currentHookNameInDev, \"[\" + prevDeps.join(\", \") + \"]\", \"[\" + nextDeps.join(\", \") + \"]\");\n        }\n      }\n      for (var i = 0; i < prevDeps.length && i < nextDeps.length; i++) {\n        if (objectIs(nextDeps[i], prevDeps[i])) {\n          continue;\n        }\n        return false;\n      }\n      return true;\n    }\n    function renderWithHooks(current, workInProgress, Component, props, secondArg, nextRenderLanes) {\n      renderLanes = nextRenderLanes;\n      currentlyRenderingFiber$1 = workInProgress;\n      {\n        hookTypesDev = current !== null ? current._debugHookTypes : null;\n        hookTypesUpdateIndexDev = -1;\n        ignorePreviousDependencies = current !== null && current.type !== workInProgress.type;\n        warnIfAsyncClientComponent(Component);\n      }\n      workInProgress.memoizedState = null;\n      workInProgress.updateQueue = null;\n      workInProgress.lanes = NoLanes;\n      {\n        if (current !== null && current.memoizedState !== null) {\n          ReactCurrentDispatcher$1.current = HooksDispatcherOnUpdateInDEV;\n        } else if (hookTypesDev !== null) {\n          ReactCurrentDispatcher$1.current = HooksDispatcherOnMountWithHookTypesInDEV;\n        } else {\n          ReactCurrentDispatcher$1.current = HooksDispatcherOnMountInDEV;\n        }\n      }\n      var shouldDoubleRenderDEV = (workInProgress.mode & StrictLegacyMode) !== NoMode;\n      shouldDoubleInvokeUserFnsInHooksDEV = shouldDoubleRenderDEV;\n      var children = Component(props, secondArg);\n      shouldDoubleInvokeUserFnsInHooksDEV = false;\n      if (didScheduleRenderPhaseUpdateDuringThisPass) {\n        children = renderWithHooksAgain(workInProgress, Component, props, secondArg);\n      }\n      if (shouldDoubleRenderDEV) {\n        setIsStrictModeForDevtools(true);\n        try {\n          children = renderWithHooksAgain(workInProgress, Component, props, secondArg);\n        } finally {\n          setIsStrictModeForDevtools(false);\n        }\n      }\n      finishRenderingHooks(current, workInProgress);\n      return children;\n    }\n    function finishRenderingHooks(current, workInProgress, Component) {\n      {\n        workInProgress._debugHookTypes = hookTypesDev;\n      }\n      ReactCurrentDispatcher$1.current = ContextOnlyDispatcher;\n      var didRenderTooFewHooks = currentHook !== null && currentHook.next !== null;\n      renderLanes = NoLanes;\n      currentlyRenderingFiber$1 = null;\n      currentHook = null;\n      workInProgressHook = null;\n      {\n        currentHookNameInDev = null;\n        hookTypesDev = null;\n        hookTypesUpdateIndexDev = -1;\n        if (current !== null && (current.flags & StaticMask) !== (workInProgress.flags & StaticMask) && (current.mode & ConcurrentMode) !== NoMode) {\n          error(\"Internal React error: Expected static flag was missing. Please \" + \"notify the React team.\");\n        }\n      }\n      didScheduleRenderPhaseUpdate = false;\n      thenableIndexCounter = 0;\n      thenableState = null;\n      if (didRenderTooFewHooks) {\n        throw new Error(\"Rendered fewer hooks than expected. This may be caused by an accidental \" + \"early return statement.\");\n      }\n      {\n        if (checkIfUseWrappedInTryCatch()) {\n          var componentName = getComponentNameFromFiber(workInProgress) || \"Unknown\";\n          if (!didWarnAboutUseWrappedInTryCatch.has(componentName) && !didWarnAboutAsyncClientComponent.has(componentName)) {\n            didWarnAboutUseWrappedInTryCatch.add(componentName);\n            error(\"`use` was called from inside a try/catch block. This is not allowed \" + \"and can lead to unexpected behavior. To handle errors triggered \" + \"by `use`, wrap your component in a error boundary.\");\n          }\n        }\n      }\n    }\n    function replaySuspendedComponentWithHooks(current, workInProgress, Component, props, secondArg) {\n      {\n        hookTypesUpdateIndexDev = -1;\n        ignorePreviousDependencies = current !== null && current.type !== workInProgress.type;\n      }\n      var children = renderWithHooksAgain(workInProgress, Component, props, secondArg);\n      finishRenderingHooks(current, workInProgress);\n      return children;\n    }\n    function renderWithHooksAgain(workInProgress, Component, props, secondArg) {\n      currentlyRenderingFiber$1 = workInProgress;\n      var numberOfReRenders = 0;\n      var children;\n      do {\n        if (didScheduleRenderPhaseUpdateDuringThisPass) {\n          thenableState = null;\n        }\n        thenableIndexCounter = 0;\n        didScheduleRenderPhaseUpdateDuringThisPass = false;\n        if (numberOfReRenders >= RE_RENDER_LIMIT) {\n          throw new Error(\"Too many re-renders. React limits the number of renders to prevent \" + \"an infinite loop.\");\n        }\n        numberOfReRenders += 1;\n        {\n          ignorePreviousDependencies = false;\n        }\n        currentHook = null;\n        workInProgressHook = null;\n        workInProgress.updateQueue = null;\n        {\n          hookTypesUpdateIndexDev = -1;\n        }\n        ReactCurrentDispatcher$1.current = HooksDispatcherOnRerenderInDEV;\n        children = Component(props, secondArg);\n      } while (didScheduleRenderPhaseUpdateDuringThisPass);\n      return children;\n    }\n    function bailoutHooks(current, workInProgress, lanes) {\n      workInProgress.updateQueue = current.updateQueue;\n      if ((workInProgress.mode & StrictEffectsMode) !== NoMode) {\n        workInProgress.flags &= ~(MountPassiveDev | MountLayoutDev | Passive$1 | Update);\n      } else {\n        workInProgress.flags &= ~(Passive$1 | Update);\n      }\n      current.lanes = removeLanes(current.lanes, lanes);\n    }\n    function resetHooksAfterThrow() {\n      currentlyRenderingFiber$1 = null;\n      ReactCurrentDispatcher$1.current = ContextOnlyDispatcher;\n    }\n    function resetHooksOnUnwind(workInProgress) {\n      if (didScheduleRenderPhaseUpdate) {\n        var hook = workInProgress.memoizedState;\n        while (hook !== null) {\n          var queue = hook.queue;\n          if (queue !== null) {\n            queue.pending = null;\n          }\n          hook = hook.next;\n        }\n        didScheduleRenderPhaseUpdate = false;\n      }\n      renderLanes = NoLanes;\n      currentlyRenderingFiber$1 = null;\n      currentHook = null;\n      workInProgressHook = null;\n      {\n        hookTypesDev = null;\n        hookTypesUpdateIndexDev = -1;\n        currentHookNameInDev = null;\n      }\n      didScheduleRenderPhaseUpdateDuringThisPass = false;\n      thenableIndexCounter = 0;\n      thenableState = null;\n    }\n    function mountWorkInProgressHook() {\n      var hook = {\n        memoizedState: null,\n        baseState: null,\n        baseQueue: null,\n        queue: null,\n        next: null\n      };\n      if (workInProgressHook === null) {\n        currentlyRenderingFiber$1.memoizedState = workInProgressHook = hook;\n      } else {\n        workInProgressHook = workInProgressHook.next = hook;\n      }\n      return workInProgressHook;\n    }\n    function updateWorkInProgressHook() {\n      var nextCurrentHook;\n      if (currentHook === null) {\n        var current = currentlyRenderingFiber$1.alternate;\n        if (current !== null) {\n          nextCurrentHook = current.memoizedState;\n        } else {\n          nextCurrentHook = null;\n        }\n      } else {\n        nextCurrentHook = currentHook.next;\n      }\n      var nextWorkInProgressHook;\n      if (workInProgressHook === null) {\n        nextWorkInProgressHook = currentlyRenderingFiber$1.memoizedState;\n      } else {\n        nextWorkInProgressHook = workInProgressHook.next;\n      }\n      if (nextWorkInProgressHook !== null) {\n        workInProgressHook = nextWorkInProgressHook;\n        nextWorkInProgressHook = workInProgressHook.next;\n        currentHook = nextCurrentHook;\n      } else {\n        if (nextCurrentHook === null) {\n          var currentFiber = currentlyRenderingFiber$1.alternate;\n          if (currentFiber === null) {\n            throw new Error(\"Update hook called on initial render. This is likely a bug in React. Please file an issue.\");\n          } else {\n            throw new Error(\"Rendered more hooks than during the previous render.\");\n          }\n        }\n        currentHook = nextCurrentHook;\n        var newHook = {\n          memoizedState: currentHook.memoizedState,\n          baseState: currentHook.baseState,\n          baseQueue: currentHook.baseQueue,\n          queue: currentHook.queue,\n          next: null\n        };\n        if (workInProgressHook === null) {\n          currentlyRenderingFiber$1.memoizedState = workInProgressHook = newHook;\n        } else {\n          workInProgressHook = workInProgressHook.next = newHook;\n        }\n      }\n      return workInProgressHook;\n    }\n    var createFunctionComponentUpdateQueue;\n    {\n      createFunctionComponentUpdateQueue = function () {\n        return {\n          lastEffect: null,\n          events: null,\n          stores: null\n        };\n      };\n    }\n    function useThenable(thenable) {\n      var index = thenableIndexCounter;\n      thenableIndexCounter += 1;\n      if (thenableState === null) {\n        thenableState = createThenableState();\n      }\n      var result = trackUsedThenable(thenableState, thenable, index);\n      if (currentlyRenderingFiber$1.alternate === null && (workInProgressHook === null ? currentlyRenderingFiber$1.memoizedState === null : workInProgressHook.next === null)) {\n        {\n          ReactCurrentDispatcher$1.current = HooksDispatcherOnMountInDEV;\n        }\n      }\n      return result;\n    }\n    function use(usable) {\n      if (usable !== null && typeof usable === \"object\") {\n        if (typeof usable.then === \"function\") {\n          var thenable = usable;\n          return useThenable(thenable);\n        } else if (usable.$$typeof === REACT_CONTEXT_TYPE) {\n          var context = usable;\n          return readContext(context);\n        }\n      }\n      throw new Error(\"An unsupported type was passed to use(): \" + String(usable));\n    }\n    function basicStateReducer(state, action) {\n      return typeof action === \"function\" ? action(state) : action;\n    }\n    function mountReducer(reducer, initialArg, init) {\n      var hook = mountWorkInProgressHook();\n      var initialState;\n      if (init !== undefined) {\n        initialState = init(initialArg);\n        if (shouldDoubleInvokeUserFnsInHooksDEV) {\n          setIsStrictModeForDevtools(true);\n          init(initialArg);\n          setIsStrictModeForDevtools(false);\n        }\n      } else {\n        initialState = initialArg;\n      }\n      hook.memoizedState = hook.baseState = initialState;\n      var queue = {\n        pending: null,\n        lanes: NoLanes,\n        dispatch: null,\n        lastRenderedReducer: reducer,\n        lastRenderedState: initialState\n      };\n      hook.queue = queue;\n      var dispatch = queue.dispatch = dispatchReducerAction.bind(null, currentlyRenderingFiber$1, queue);\n      return [hook.memoizedState, dispatch];\n    }\n    function updateReducer(reducer, initialArg, init) {\n      var hook = updateWorkInProgressHook();\n      return updateReducerImpl(hook, currentHook, reducer);\n    }\n    function updateReducerImpl(hook, current, reducer) {\n      var queue = hook.queue;\n      if (queue === null) {\n        throw new Error(\"Should have a queue. This is likely a bug in React. Please file an issue.\");\n      }\n      queue.lastRenderedReducer = reducer;\n      var baseQueue = hook.baseQueue;\n      var pendingQueue = queue.pending;\n      if (pendingQueue !== null) {\n        if (baseQueue !== null) {\n          var baseFirst = baseQueue.next;\n          var pendingFirst = pendingQueue.next;\n          baseQueue.next = pendingFirst;\n          pendingQueue.next = baseFirst;\n        }\n        {\n          if (current.baseQueue !== baseQueue) {\n            error(\"Internal error: Expected work-in-progress queue to be a clone. \" + \"This is a bug in React.\");\n          }\n        }\n        current.baseQueue = baseQueue = pendingQueue;\n        queue.pending = null;\n      }\n      var baseState = hook.baseState;\n      if (baseQueue === null) {\n        hook.memoizedState = baseState;\n      } else {\n        var first = baseQueue.next;\n        var newState = baseState;\n        var newBaseState = null;\n        var newBaseQueueFirst = null;\n        var newBaseQueueLast = null;\n        var update = first;\n        var didReadFromEntangledAsyncAction = false;\n        do {\n          var updateLane = removeLanes(update.lane, OffscreenLane);\n          var isHiddenUpdate = updateLane !== update.lane;\n          var shouldSkipUpdate = isHiddenUpdate ? !isSubsetOfLanes(getWorkInProgressRootRenderLanes(), updateLane) : !isSubsetOfLanes(renderLanes, updateLane);\n          if (shouldSkipUpdate) {\n            var clone = {\n              lane: updateLane,\n              revertLane: update.revertLane,\n              action: update.action,\n              hasEagerState: update.hasEagerState,\n              eagerState: update.eagerState,\n              next: null\n            };\n            if (newBaseQueueLast === null) {\n              newBaseQueueFirst = newBaseQueueLast = clone;\n              newBaseState = newState;\n            } else {\n              newBaseQueueLast = newBaseQueueLast.next = clone;\n            }\n            currentlyRenderingFiber$1.lanes = mergeLanes(currentlyRenderingFiber$1.lanes, updateLane);\n            markSkippedUpdateLanes(updateLane);\n          } else {\n            {\n              if (newBaseQueueLast !== null) {\n                var _clone = {\n                  lane: NoLane,\n                  revertLane: NoLane,\n                  action: update.action,\n                  hasEagerState: update.hasEagerState,\n                  eagerState: update.eagerState,\n                  next: null\n                };\n                newBaseQueueLast = newBaseQueueLast.next = _clone;\n              }\n              if (updateLane === peekEntangledActionLane()) {\n                didReadFromEntangledAsyncAction = true;\n              }\n            }\n            var action = update.action;\n            if (shouldDoubleInvokeUserFnsInHooksDEV) {\n              reducer(newState, action);\n            }\n            if (update.hasEagerState) {\n              newState = update.eagerState;\n            } else {\n              newState = reducer(newState, action);\n            }\n          }\n          update = update.next;\n        } while (update !== null && update !== first);\n        if (newBaseQueueLast === null) {\n          newBaseState = newState;\n        } else {\n          newBaseQueueLast.next = newBaseQueueFirst;\n        }\n        if (!objectIs(newState, hook.memoizedState)) {\n          markWorkInProgressReceivedUpdate();\n          if (didReadFromEntangledAsyncAction) {\n            var entangledActionThenable = peekEntangledActionThenable();\n            if (entangledActionThenable !== null) {\n              throw entangledActionThenable;\n            }\n          }\n        }\n        hook.memoizedState = newState;\n        hook.baseState = newBaseState;\n        hook.baseQueue = newBaseQueueLast;\n        queue.lastRenderedState = newState;\n      }\n      if (baseQueue === null) {\n        queue.lanes = NoLanes;\n      }\n      var dispatch = queue.dispatch;\n      return [hook.memoizedState, dispatch];\n    }\n    function rerenderReducer(reducer, initialArg, init) {\n      var hook = updateWorkInProgressHook();\n      var queue = hook.queue;\n      if (queue === null) {\n        throw new Error(\"Should have a queue. This is likely a bug in React. Please file an issue.\");\n      }\n      queue.lastRenderedReducer = reducer;\n      var dispatch = queue.dispatch;\n      var lastRenderPhaseUpdate = queue.pending;\n      var newState = hook.memoizedState;\n      if (lastRenderPhaseUpdate !== null) {\n        queue.pending = null;\n        var firstRenderPhaseUpdate = lastRenderPhaseUpdate.next;\n        var update = firstRenderPhaseUpdate;\n        do {\n          var action = update.action;\n          newState = reducer(newState, action);\n          update = update.next;\n        } while (update !== firstRenderPhaseUpdate);\n        if (!objectIs(newState, hook.memoizedState)) {\n          markWorkInProgressReceivedUpdate();\n        }\n        hook.memoizedState = newState;\n        if (hook.baseQueue === null) {\n          hook.baseState = newState;\n        }\n        queue.lastRenderedState = newState;\n      }\n      return [newState, dispatch];\n    }\n    function mountSyncExternalStore(subscribe, getSnapshot, getServerSnapshot) {\n      var fiber = currentlyRenderingFiber$1;\n      var hook = mountWorkInProgressHook();\n      var nextSnapshot;\n      {\n        nextSnapshot = getSnapshot();\n        {\n          if (!didWarnUncachedGetSnapshot) {\n            var cachedSnapshot = getSnapshot();\n            if (!objectIs(nextSnapshot, cachedSnapshot)) {\n              error(\"The result of getSnapshot should be cached to avoid an infinite loop\");\n              didWarnUncachedGetSnapshot = true;\n            }\n          }\n        }\n        var root = getWorkInProgressRoot();\n        if (root === null) {\n          throw new Error(\"Expected a work-in-progress root. This is a bug in React. Please file an issue.\");\n        }\n        var rootRenderLanes = getWorkInProgressRootRenderLanes();\n        if (!includesBlockingLane(root, rootRenderLanes)) {\n          pushStoreConsistencyCheck(fiber, getSnapshot, nextSnapshot);\n        }\n      }\n      hook.memoizedState = nextSnapshot;\n      var inst = {\n        value: nextSnapshot,\n        getSnapshot: getSnapshot\n      };\n      hook.queue = inst;\n      mountEffect(subscribeToStore.bind(null, fiber, inst, subscribe), [subscribe]);\n      fiber.flags |= Passive$1;\n      pushEffect(HasEffect | Passive, updateStoreInstance.bind(null, fiber, inst, nextSnapshot, getSnapshot), createEffectInstance(), null);\n      return nextSnapshot;\n    }\n    function updateSyncExternalStore(subscribe, getSnapshot, getServerSnapshot) {\n      var fiber = currentlyRenderingFiber$1;\n      var hook = updateWorkInProgressHook();\n      var nextSnapshot;\n      {\n        nextSnapshot = getSnapshot();\n        {\n          if (!didWarnUncachedGetSnapshot) {\n            var cachedSnapshot = getSnapshot();\n            if (!objectIs(nextSnapshot, cachedSnapshot)) {\n              error(\"The result of getSnapshot should be cached to avoid an infinite loop\");\n              didWarnUncachedGetSnapshot = true;\n            }\n          }\n        }\n      }\n      var prevSnapshot = (currentHook || hook).memoizedState;\n      var snapshotChanged = !objectIs(prevSnapshot, nextSnapshot);\n      if (snapshotChanged) {\n        hook.memoizedState = nextSnapshot;\n        markWorkInProgressReceivedUpdate();\n      }\n      var inst = hook.queue;\n      updateEffect(subscribeToStore.bind(null, fiber, inst, subscribe), [subscribe]);\n      if (inst.getSnapshot !== getSnapshot || snapshotChanged || workInProgressHook !== null && workInProgressHook.memoizedState.tag & HasEffect) {\n        fiber.flags |= Passive$1;\n        pushEffect(HasEffect | Passive, updateStoreInstance.bind(null, fiber, inst, nextSnapshot, getSnapshot), createEffectInstance(), null);\n        var root = getWorkInProgressRoot();\n        if (root === null) {\n          throw new Error(\"Expected a work-in-progress root. This is a bug in React. Please file an issue.\");\n        }\n        if (!includesBlockingLane(root, renderLanes)) {\n          pushStoreConsistencyCheck(fiber, getSnapshot, nextSnapshot);\n        }\n      }\n      return nextSnapshot;\n    }\n    function pushStoreConsistencyCheck(fiber, getSnapshot, renderedSnapshot) {\n      fiber.flags |= StoreConsistency;\n      var check = {\n        getSnapshot: getSnapshot,\n        value: renderedSnapshot\n      };\n      var componentUpdateQueue = currentlyRenderingFiber$1.updateQueue;\n      if (componentUpdateQueue === null) {\n        componentUpdateQueue = createFunctionComponentUpdateQueue();\n        currentlyRenderingFiber$1.updateQueue = componentUpdateQueue;\n        componentUpdateQueue.stores = [check];\n      } else {\n        var stores = componentUpdateQueue.stores;\n        if (stores === null) {\n          componentUpdateQueue.stores = [check];\n        } else {\n          stores.push(check);\n        }\n      }\n    }\n    function updateStoreInstance(fiber, inst, nextSnapshot, getSnapshot) {\n      inst.value = nextSnapshot;\n      inst.getSnapshot = getSnapshot;\n      if (checkIfSnapshotChanged(inst)) {\n        forceStoreRerender(fiber);\n      }\n    }\n    function subscribeToStore(fiber, inst, subscribe) {\n      var handleStoreChange = function () {\n        if (checkIfSnapshotChanged(inst)) {\n          forceStoreRerender(fiber);\n        }\n      };\n      return subscribe(handleStoreChange);\n    }\n    function checkIfSnapshotChanged(inst) {\n      var latestGetSnapshot = inst.getSnapshot;\n      var prevValue = inst.value;\n      try {\n        var nextValue = latestGetSnapshot();\n        return !objectIs(prevValue, nextValue);\n      } catch (error) {\n        return true;\n      }\n    }\n    function forceStoreRerender(fiber) {\n      var root = enqueueConcurrentRenderForLane(fiber, SyncLane);\n      if (root !== null) {\n        scheduleUpdateOnFiber(root, fiber, SyncLane);\n      }\n    }\n    function mountStateImpl(initialState) {\n      var hook = mountWorkInProgressHook();\n      if (typeof initialState === \"function\") {\n        var initialStateInitializer = initialState;\n        initialState = initialStateInitializer();\n        if (shouldDoubleInvokeUserFnsInHooksDEV) {\n          setIsStrictModeForDevtools(true);\n          initialStateInitializer();\n          setIsStrictModeForDevtools(false);\n        }\n      }\n      hook.memoizedState = hook.baseState = initialState;\n      var queue = {\n        pending: null,\n        lanes: NoLanes,\n        dispatch: null,\n        lastRenderedReducer: basicStateReducer,\n        lastRenderedState: initialState\n      };\n      hook.queue = queue;\n      return hook;\n    }\n    function mountState(initialState) {\n      var hook = mountStateImpl(initialState);\n      var queue = hook.queue;\n      var dispatch = dispatchSetState.bind(null, currentlyRenderingFiber$1, queue);\n      queue.dispatch = dispatch;\n      return [hook.memoizedState, dispatch];\n    }\n    function updateState(initialState) {\n      return updateReducer(basicStateReducer);\n    }\n    function rerenderState(initialState) {\n      return rerenderReducer(basicStateReducer);\n    }\n    function pushEffect(tag, create, inst, deps) {\n      var effect = {\n        tag: tag,\n        create: create,\n        inst: inst,\n        deps: deps,\n        next: null\n      };\n      var componentUpdateQueue = currentlyRenderingFiber$1.updateQueue;\n      if (componentUpdateQueue === null) {\n        componentUpdateQueue = createFunctionComponentUpdateQueue();\n        currentlyRenderingFiber$1.updateQueue = componentUpdateQueue;\n        componentUpdateQueue.lastEffect = effect.next = effect;\n      } else {\n        var lastEffect = componentUpdateQueue.lastEffect;\n        if (lastEffect === null) {\n          componentUpdateQueue.lastEffect = effect.next = effect;\n        } else {\n          var firstEffect = lastEffect.next;\n          lastEffect.next = effect;\n          effect.next = firstEffect;\n          componentUpdateQueue.lastEffect = effect;\n        }\n      }\n      return effect;\n    }\n    function createEffectInstance() {\n      return {\n        destroy: undefined\n      };\n    }\n    function mountRef(initialValue) {\n      var hook = mountWorkInProgressHook();\n      {\n        var _ref2 = {\n          current: initialValue\n        };\n        hook.memoizedState = _ref2;\n        return _ref2;\n      }\n    }\n    function updateRef(initialValue) {\n      var hook = updateWorkInProgressHook();\n      return hook.memoizedState;\n    }\n    function mountEffectImpl(fiberFlags, hookFlags, create, deps) {\n      var hook = mountWorkInProgressHook();\n      var nextDeps = deps === undefined ? null : deps;\n      currentlyRenderingFiber$1.flags |= fiberFlags;\n      hook.memoizedState = pushEffect(HasEffect | hookFlags, create, createEffectInstance(), nextDeps);\n    }\n    function updateEffectImpl(fiberFlags, hookFlags, create, deps) {\n      var hook = updateWorkInProgressHook();\n      var nextDeps = deps === undefined ? null : deps;\n      var effect = hook.memoizedState;\n      var inst = effect.inst;\n      if (currentHook !== null) {\n        if (nextDeps !== null) {\n          var prevEffect = currentHook.memoizedState;\n          var prevDeps = prevEffect.deps;\n          if (areHookInputsEqual(nextDeps, prevDeps)) {\n            hook.memoizedState = pushEffect(hookFlags, create, inst, nextDeps);\n            return;\n          }\n        }\n      }\n      currentlyRenderingFiber$1.flags |= fiberFlags;\n      hook.memoizedState = pushEffect(HasEffect | hookFlags, create, inst, nextDeps);\n    }\n    function mountEffect(create, deps) {\n      if ((currentlyRenderingFiber$1.mode & StrictEffectsMode) !== NoMode && (currentlyRenderingFiber$1.mode & NoStrictPassiveEffectsMode) === NoMode) {\n        mountEffectImpl(MountPassiveDev | Passive$1 | PassiveStatic, Passive, create, deps);\n      } else {\n        mountEffectImpl(Passive$1 | PassiveStatic, Passive, create, deps);\n      }\n    }\n    function updateEffect(create, deps) {\n      updateEffectImpl(Passive$1, Passive, create, deps);\n    }\n    function mountInsertionEffect(create, deps) {\n      mountEffectImpl(Update, Insertion, create, deps);\n    }\n    function updateInsertionEffect(create, deps) {\n      return updateEffectImpl(Update, Insertion, create, deps);\n    }\n    function mountLayoutEffect(create, deps) {\n      var fiberFlags = Update | LayoutStatic;\n      if ((currentlyRenderingFiber$1.mode & StrictEffectsMode) !== NoMode) {\n        fiberFlags |= MountLayoutDev;\n      }\n      return mountEffectImpl(fiberFlags, Layout, create, deps);\n    }\n    function updateLayoutEffect(create, deps) {\n      return updateEffectImpl(Update, Layout, create, deps);\n    }\n    function imperativeHandleEffect(create, ref) {\n      if (typeof ref === \"function\") {\n        var refCallback = ref;\n        var inst = create();\n        refCallback(inst);\n        return function () {\n          refCallback(null);\n        };\n      } else if (ref !== null && ref !== undefined) {\n        var refObject = ref;\n        {\n          if (!refObject.hasOwnProperty(\"current\")) {\n            error(\"Expected useImperativeHandle() first argument to either be a \" + \"ref callback or React.createRef() object. Instead received: %s.\", \"an object with keys {\" + Object.keys(refObject).join(\", \") + \"}\");\n          }\n        }\n        var _inst = create();\n        refObject.current = _inst;\n        return function () {\n          refObject.current = null;\n        };\n      }\n    }\n    function mountImperativeHandle(ref, create, deps) {\n      {\n        if (typeof create !== \"function\") {\n          error(\"Expected useImperativeHandle() second argument to be a function \" + \"that creates a handle. Instead received: %s.\", create !== null ? typeof create : \"null\");\n        }\n      }\n      var effectDeps = deps !== null && deps !== undefined ? deps.concat([ref]) : null;\n      var fiberFlags = Update | LayoutStatic;\n      if ((currentlyRenderingFiber$1.mode & StrictEffectsMode) !== NoMode) {\n        fiberFlags |= MountLayoutDev;\n      }\n      mountEffectImpl(fiberFlags, Layout, imperativeHandleEffect.bind(null, create, ref), effectDeps);\n    }\n    function updateImperativeHandle(ref, create, deps) {\n      {\n        if (typeof create !== \"function\") {\n          error(\"Expected useImperativeHandle() second argument to be a function \" + \"that creates a handle. Instead received: %s.\", create !== null ? typeof create : \"null\");\n        }\n      }\n      var effectDeps = deps !== null && deps !== undefined ? deps.concat([ref]) : null;\n      updateEffectImpl(Update, Layout, imperativeHandleEffect.bind(null, create, ref), effectDeps);\n    }\n    function mountDebugValue(value, formatterFn) {}\n    var updateDebugValue = mountDebugValue;\n    function mountCallback(callback, deps) {\n      var hook = mountWorkInProgressHook();\n      var nextDeps = deps === undefined ? null : deps;\n      hook.memoizedState = [callback, nextDeps];\n      return callback;\n    }\n    function updateCallback(callback, deps) {\n      var hook = updateWorkInProgressHook();\n      var nextDeps = deps === undefined ? null : deps;\n      var prevState = hook.memoizedState;\n      if (nextDeps !== null) {\n        var prevDeps = prevState[1];\n        if (areHookInputsEqual(nextDeps, prevDeps)) {\n          return prevState[0];\n        }\n      }\n      hook.memoizedState = [callback, nextDeps];\n      return callback;\n    }\n    function mountMemo(nextCreate, deps) {\n      var hook = mountWorkInProgressHook();\n      var nextDeps = deps === undefined ? null : deps;\n      var nextValue = nextCreate();\n      if (shouldDoubleInvokeUserFnsInHooksDEV) {\n        setIsStrictModeForDevtools(true);\n        nextCreate();\n        setIsStrictModeForDevtools(false);\n      }\n      hook.memoizedState = [nextValue, nextDeps];\n      return nextValue;\n    }\n    function updateMemo(nextCreate, deps) {\n      var hook = updateWorkInProgressHook();\n      var nextDeps = deps === undefined ? null : deps;\n      var prevState = hook.memoizedState;\n      if (nextDeps !== null) {\n        var prevDeps = prevState[1];\n        if (areHookInputsEqual(nextDeps, prevDeps)) {\n          return prevState[0];\n        }\n      }\n      var nextValue = nextCreate();\n      if (shouldDoubleInvokeUserFnsInHooksDEV) {\n        setIsStrictModeForDevtools(true);\n        nextCreate();\n        setIsStrictModeForDevtools(false);\n      }\n      hook.memoizedState = [nextValue, nextDeps];\n      return nextValue;\n    }\n    function mountDeferredValue(value, initialValue) {\n      var hook = mountWorkInProgressHook();\n      return mountDeferredValueImpl(hook, value, initialValue);\n    }\n    function updateDeferredValue(value, initialValue) {\n      var hook = updateWorkInProgressHook();\n      var resolvedCurrentHook = currentHook;\n      var prevValue = resolvedCurrentHook.memoizedState;\n      return updateDeferredValueImpl(hook, prevValue, value, initialValue);\n    }\n    function rerenderDeferredValue(value, initialValue) {\n      var hook = updateWorkInProgressHook();\n      if (currentHook === null) {\n        return mountDeferredValueImpl(hook, value, initialValue);\n      } else {\n        var prevValue = currentHook.memoizedState;\n        return updateDeferredValueImpl(hook, prevValue, value, initialValue);\n      }\n    }\n    function mountDeferredValueImpl(hook, value, initialValue) {\n      if (initialValue !== undefined && !includesSomeLane(renderLanes, DeferredLane)) {\n        hook.memoizedState = initialValue;\n        var deferredLane = requestDeferredLane();\n        currentlyRenderingFiber$1.lanes = mergeLanes(currentlyRenderingFiber$1.lanes, deferredLane);\n        markSkippedUpdateLanes(deferredLane);\n        return initialValue;\n      } else {\n        hook.memoizedState = value;\n        return value;\n      }\n    }\n    function updateDeferredValueImpl(hook, prevValue, value, initialValue) {\n      if (objectIs(value, prevValue)) {\n        return value;\n      } else {\n        if (isCurrentTreeHidden()) {\n          var resultValue = mountDeferredValueImpl(hook, value, initialValue);\n          if (!objectIs(resultValue, prevValue)) {\n            markWorkInProgressReceivedUpdate();\n          }\n          return resultValue;\n        }\n        var shouldDeferValue = !includesOnlyNonUrgentLanes(renderLanes);\n        if (shouldDeferValue) {\n          var deferredLane = requestDeferredLane();\n          currentlyRenderingFiber$1.lanes = mergeLanes(currentlyRenderingFiber$1.lanes, deferredLane);\n          markSkippedUpdateLanes(deferredLane);\n          return prevValue;\n        } else {\n          markWorkInProgressReceivedUpdate();\n          hook.memoizedState = value;\n          return value;\n        }\n      }\n    }\n    function startTransition(fiber, queue, pendingState, finishedState, callback, options) {\n      var previousPriority = getCurrentUpdatePriority();\n      setCurrentUpdatePriority(higherEventPriority(previousPriority, ContinuousEventPriority));\n      var prevTransition = ReactCurrentBatchConfig$2.transition;\n      var currentTransition = {\n        _callbacks: new Set()\n      };\n      {\n        ReactCurrentBatchConfig$2.transition = null;\n        dispatchSetState(fiber, queue, pendingState);\n        ReactCurrentBatchConfig$2.transition = currentTransition;\n      }\n      {\n        ReactCurrentBatchConfig$2.transition._updatedFibers = new Set();\n      }\n      try {\n        var returnValue, thenable, thenableForFinishedState;\n        if (enableAsyncActions) ;else {\n          dispatchSetState(fiber, queue, finishedState);\n          callback();\n        }\n      } catch (error) {\n        {\n          throw error;\n        }\n      } finally {\n        setCurrentUpdatePriority(previousPriority);\n        ReactCurrentBatchConfig$2.transition = prevTransition;\n        {\n          if (prevTransition === null && currentTransition._updatedFibers) {\n            var updatedFibersCount = currentTransition._updatedFibers.size;\n            currentTransition._updatedFibers.clear();\n            if (updatedFibersCount > 10) {\n              warn(\"Detected a large number of updates inside startTransition. \" + \"If this is due to a subscription please re-write it to use React provided hooks. \" + \"Otherwise concurrent mode guarantees are off the table.\");\n            }\n          }\n        }\n      }\n    }\n    function mountTransition() {\n      var stateHook = mountStateImpl(false);\n      var start = startTransition.bind(null, currentlyRenderingFiber$1, stateHook.queue, true, false);\n      var hook = mountWorkInProgressHook();\n      hook.memoizedState = start;\n      return [false, start];\n    }\n    function updateTransition() {\n      var _updateState = updateState(),\n        booleanOrThenable = _updateState[0];\n      var hook = updateWorkInProgressHook();\n      var start = hook.memoizedState;\n      var isPending = typeof booleanOrThenable === \"boolean\" ? booleanOrThenable : useThenable(booleanOrThenable);\n      return [isPending, start];\n    }\n    function rerenderTransition() {\n      var _rerenderState = rerenderState(),\n        booleanOrThenable = _rerenderState[0];\n      var hook = updateWorkInProgressHook();\n      var start = hook.memoizedState;\n      var isPending = typeof booleanOrThenable === \"boolean\" ? booleanOrThenable : useThenable(booleanOrThenable);\n      return [isPending, start];\n    }\n    function mountId() {\n      var hook = mountWorkInProgressHook();\n      var root = getWorkInProgressRoot();\n      var identifierPrefix = root.identifierPrefix;\n      var id;\n      {\n        var globalClientId = globalClientIdCounter++;\n        id = \":\" + identifierPrefix + \"r\" + globalClientId.toString(32) + \":\";\n      }\n      hook.memoizedState = id;\n      return id;\n    }\n    function updateId() {\n      var hook = updateWorkInProgressHook();\n      var id = hook.memoizedState;\n      return id;\n    }\n    function dispatchReducerAction(fiber, queue, action) {\n      {\n        if (typeof arguments[3] === \"function\") {\n          error(\"State updates from the useState() and useReducer() Hooks don't support the \" + \"second callback argument. To execute a side effect after \" + \"rendering, declare it in the component body with useEffect().\");\n        }\n      }\n      var lane = requestUpdateLane(fiber);\n      var update = {\n        lane: lane,\n        revertLane: NoLane,\n        action: action,\n        hasEagerState: false,\n        eagerState: null,\n        next: null\n      };\n      if (isRenderPhaseUpdate(fiber)) {\n        enqueueRenderPhaseUpdate(queue, update);\n      } else {\n        var root = enqueueConcurrentHookUpdate(fiber, queue, update, lane);\n        if (root !== null) {\n          scheduleUpdateOnFiber(root, fiber, lane);\n          entangleTransitionUpdate(root, queue, lane);\n        }\n      }\n    }\n    function dispatchSetState(fiber, queue, action) {\n      {\n        if (typeof arguments[3] === \"function\") {\n          error(\"State updates from the useState() and useReducer() Hooks don't support the \" + \"second callback argument. To execute a side effect after \" + \"rendering, declare it in the component body with useEffect().\");\n        }\n      }\n      var lane = requestUpdateLane(fiber);\n      var update = {\n        lane: lane,\n        revertLane: NoLane,\n        action: action,\n        hasEagerState: false,\n        eagerState: null,\n        next: null\n      };\n      if (isRenderPhaseUpdate(fiber)) {\n        enqueueRenderPhaseUpdate(queue, update);\n      } else {\n        var alternate = fiber.alternate;\n        if (fiber.lanes === NoLanes && (alternate === null || alternate.lanes === NoLanes)) {\n          var lastRenderedReducer = queue.lastRenderedReducer;\n          if (lastRenderedReducer !== null) {\n            var prevDispatcher;\n            {\n              prevDispatcher = ReactCurrentDispatcher$1.current;\n              ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnUpdateInDEV;\n            }\n            try {\n              var currentState = queue.lastRenderedState;\n              var eagerState = lastRenderedReducer(currentState, action);\n              update.hasEagerState = true;\n              update.eagerState = eagerState;\n              if (objectIs(eagerState, currentState)) {\n                enqueueConcurrentHookUpdateAndEagerlyBailout(fiber, queue, update);\n                return;\n              }\n            } catch (error) {} finally {\n              {\n                ReactCurrentDispatcher$1.current = prevDispatcher;\n              }\n            }\n          }\n        }\n        var root = enqueueConcurrentHookUpdate(fiber, queue, update, lane);\n        if (root !== null) {\n          scheduleUpdateOnFiber(root, fiber, lane);\n          entangleTransitionUpdate(root, queue, lane);\n        }\n      }\n    }\n    function isRenderPhaseUpdate(fiber) {\n      var alternate = fiber.alternate;\n      return fiber === currentlyRenderingFiber$1 || alternate !== null && alternate === currentlyRenderingFiber$1;\n    }\n    function enqueueRenderPhaseUpdate(queue, update) {\n      didScheduleRenderPhaseUpdateDuringThisPass = didScheduleRenderPhaseUpdate = true;\n      var pending = queue.pending;\n      if (pending === null) {\n        update.next = update;\n      } else {\n        update.next = pending.next;\n        pending.next = update;\n      }\n      queue.pending = update;\n    }\n    function entangleTransitionUpdate(root, queue, lane) {\n      if (isTransitionLane(lane)) {\n        var queueLanes = queue.lanes;\n        queueLanes = intersectLanes(queueLanes, root.pendingLanes);\n        var newQueueLanes = mergeLanes(queueLanes, lane);\n        queue.lanes = newQueueLanes;\n        markRootEntangled(root, newQueueLanes);\n      }\n    }\n    var ContextOnlyDispatcher = {\n      readContext: readContext,\n      use: use,\n      useCallback: throwInvalidHookError,\n      useContext: throwInvalidHookError,\n      useEffect: throwInvalidHookError,\n      useImperativeHandle: throwInvalidHookError,\n      useInsertionEffect: throwInvalidHookError,\n      useLayoutEffect: throwInvalidHookError,\n      useMemo: throwInvalidHookError,\n      useReducer: throwInvalidHookError,\n      useRef: throwInvalidHookError,\n      useState: throwInvalidHookError,\n      useDebugValue: throwInvalidHookError,\n      useDeferredValue: throwInvalidHookError,\n      useTransition: throwInvalidHookError,\n      useSyncExternalStore: throwInvalidHookError,\n      useId: throwInvalidHookError\n    };\n    var HooksDispatcherOnMountInDEV = null;\n    var HooksDispatcherOnMountWithHookTypesInDEV = null;\n    var HooksDispatcherOnUpdateInDEV = null;\n    var HooksDispatcherOnRerenderInDEV = null;\n    var InvalidNestedHooksDispatcherOnMountInDEV = null;\n    var InvalidNestedHooksDispatcherOnUpdateInDEV = null;\n    var InvalidNestedHooksDispatcherOnRerenderInDEV = null;\n    {\n      var warnInvalidContextAccess = function () {\n        error(\"Context can only be read while React is rendering. \" + \"In classes, you can read it in the render method or getDerivedStateFromProps. \" + \"In function components, you can read it directly in the function body, but not \" + \"inside Hooks like useReducer() or useMemo().\");\n      };\n      var warnInvalidHookAccess = function () {\n        error(\"Do not call Hooks inside useEffect(...), useMemo(...), or other built-in Hooks. \" + \"You can only call Hooks at the top level of your React function. \" + \"For more information, see \" + \"https://reactjs.org/link/rules-of-hooks\");\n      };\n      HooksDispatcherOnMountInDEV = {\n        readContext: function (context) {\n          return readContext(context);\n        },\n        use: use,\n        useCallback: function (callback, deps) {\n          currentHookNameInDev = \"useCallback\";\n          mountHookTypesDev();\n          checkDepsAreArrayDev(deps);\n          return mountCallback(callback, deps);\n        },\n        useContext: function (context) {\n          currentHookNameInDev = \"useContext\";\n          mountHookTypesDev();\n          return readContext(context);\n        },\n        useEffect: function (create, deps) {\n          currentHookNameInDev = \"useEffect\";\n          mountHookTypesDev();\n          checkDepsAreArrayDev(deps);\n          return mountEffect(create, deps);\n        },\n        useImperativeHandle: function (ref, create, deps) {\n          currentHookNameInDev = \"useImperativeHandle\";\n          mountHookTypesDev();\n          checkDepsAreArrayDev(deps);\n          return mountImperativeHandle(ref, create, deps);\n        },\n        useInsertionEffect: function (create, deps) {\n          currentHookNameInDev = \"useInsertionEffect\";\n          mountHookTypesDev();\n          checkDepsAreArrayDev(deps);\n          return mountInsertionEffect(create, deps);\n        },\n        useLayoutEffect: function (create, deps) {\n          currentHookNameInDev = \"useLayoutEffect\";\n          mountHookTypesDev();\n          checkDepsAreArrayDev(deps);\n          return mountLayoutEffect(create, deps);\n        },\n        useMemo: function (create, deps) {\n          currentHookNameInDev = \"useMemo\";\n          mountHookTypesDev();\n          checkDepsAreArrayDev(deps);\n          var prevDispatcher = ReactCurrentDispatcher$1.current;\n          ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnMountInDEV;\n          try {\n            return mountMemo(create, deps);\n          } finally {\n            ReactCurrentDispatcher$1.current = prevDispatcher;\n          }\n        },\n        useReducer: function (reducer, initialArg, init) {\n          currentHookNameInDev = \"useReducer\";\n          mountHookTypesDev();\n          var prevDispatcher = ReactCurrentDispatcher$1.current;\n          ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnMountInDEV;\n          try {\n            return mountReducer(reducer, initialArg, init);\n          } finally {\n            ReactCurrentDispatcher$1.current = prevDispatcher;\n          }\n        },\n        useRef: function (initialValue) {\n          currentHookNameInDev = \"useRef\";\n          mountHookTypesDev();\n          return mountRef(initialValue);\n        },\n        useState: function (initialState) {\n          currentHookNameInDev = \"useState\";\n          mountHookTypesDev();\n          var prevDispatcher = ReactCurrentDispatcher$1.current;\n          ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnMountInDEV;\n          try {\n            return mountState(initialState);\n          } finally {\n            ReactCurrentDispatcher$1.current = prevDispatcher;\n          }\n        },\n        useDebugValue: function (value, formatterFn) {\n          currentHookNameInDev = \"useDebugValue\";\n          mountHookTypesDev();\n          return mountDebugValue();\n        },\n        useDeferredValue: function (value, initialValue) {\n          currentHookNameInDev = \"useDeferredValue\";\n          mountHookTypesDev();\n          return mountDeferredValue(value, initialValue);\n        },\n        useTransition: function () {\n          currentHookNameInDev = \"useTransition\";\n          mountHookTypesDev();\n          return mountTransition();\n        },\n        useSyncExternalStore: function (subscribe, getSnapshot, getServerSnapshot) {\n          currentHookNameInDev = \"useSyncExternalStore\";\n          mountHookTypesDev();\n          return mountSyncExternalStore(subscribe, getSnapshot);\n        },\n        useId: function () {\n          currentHookNameInDev = \"useId\";\n          mountHookTypesDev();\n          return mountId();\n        }\n      };\n      HooksDispatcherOnMountWithHookTypesInDEV = {\n        readContext: function (context) {\n          return readContext(context);\n        },\n        use: use,\n        useCallback: function (callback, deps) {\n          currentHookNameInDev = \"useCallback\";\n          updateHookTypesDev();\n          return mountCallback(callback, deps);\n        },\n        useContext: function (context) {\n          currentHookNameInDev = \"useContext\";\n          updateHookTypesDev();\n          return readContext(context);\n        },\n        useEffect: function (create, deps) {\n          currentHookNameInDev = \"useEffect\";\n          updateHookTypesDev();\n          return mountEffect(create, deps);\n        },\n        useImperativeHandle: function (ref, create, deps) {\n          currentHookNameInDev = \"useImperativeHandle\";\n          updateHookTypesDev();\n          return mountImperativeHandle(ref, create, deps);\n        },\n        useInsertionEffect: function (create, deps) {\n          currentHookNameInDev = \"useInsertionEffect\";\n          updateHookTypesDev();\n          return mountInsertionEffect(create, deps);\n        },\n        useLayoutEffect: function (create, deps) {\n          currentHookNameInDev = \"useLayoutEffect\";\n          updateHookTypesDev();\n          return mountLayoutEffect(create, deps);\n        },\n        useMemo: function (create, deps) {\n          currentHookNameInDev = \"useMemo\";\n          updateHookTypesDev();\n          var prevDispatcher = ReactCurrentDispatcher$1.current;\n          ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnMountInDEV;\n          try {\n            return mountMemo(create, deps);\n          } finally {\n            ReactCurrentDispatcher$1.current = prevDispatcher;\n          }\n        },\n        useReducer: function (reducer, initialArg, init) {\n          currentHookNameInDev = \"useReducer\";\n          updateHookTypesDev();\n          var prevDispatcher = ReactCurrentDispatcher$1.current;\n          ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnMountInDEV;\n          try {\n            return mountReducer(reducer, initialArg, init);\n          } finally {\n            ReactCurrentDispatcher$1.current = prevDispatcher;\n          }\n        },\n        useRef: function (initialValue) {\n          currentHookNameInDev = \"useRef\";\n          updateHookTypesDev();\n          return mountRef(initialValue);\n        },\n        useState: function (initialState) {\n          currentHookNameInDev = \"useState\";\n          updateHookTypesDev();\n          var prevDispatcher = ReactCurrentDispatcher$1.current;\n          ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnMountInDEV;\n          try {\n            return mountState(initialState);\n          } finally {\n            ReactCurrentDispatcher$1.current = prevDispatcher;\n          }\n        },\n        useDebugValue: function (value, formatterFn) {\n          currentHookNameInDev = \"useDebugValue\";\n          updateHookTypesDev();\n          return mountDebugValue();\n        },\n        useDeferredValue: function (value, initialValue) {\n          currentHookNameInDev = \"useDeferredValue\";\n          updateHookTypesDev();\n          return mountDeferredValue(value, initialValue);\n        },\n        useTransition: function () {\n          currentHookNameInDev = \"useTransition\";\n          updateHookTypesDev();\n          return mountTransition();\n        },\n        useSyncExternalStore: function (subscribe, getSnapshot, getServerSnapshot) {\n          currentHookNameInDev = \"useSyncExternalStore\";\n          updateHookTypesDev();\n          return mountSyncExternalStore(subscribe, getSnapshot);\n        },\n        useId: function () {\n          currentHookNameInDev = \"useId\";\n          updateHookTypesDev();\n          return mountId();\n        }\n      };\n      HooksDispatcherOnUpdateInDEV = {\n        readContext: function (context) {\n          return readContext(context);\n        },\n        use: use,\n        useCallback: function (callback, deps) {\n          currentHookNameInDev = \"useCallback\";\n          updateHookTypesDev();\n          return updateCallback(callback, deps);\n        },\n        useContext: function (context) {\n          currentHookNameInDev = \"useContext\";\n          updateHookTypesDev();\n          return readContext(context);\n        },\n        useEffect: function (create, deps) {\n          currentHookNameInDev = \"useEffect\";\n          updateHookTypesDev();\n          return updateEffect(create, deps);\n        },\n        useImperativeHandle: function (ref, create, deps) {\n          currentHookNameInDev = \"useImperativeHandle\";\n          updateHookTypesDev();\n          return updateImperativeHandle(ref, create, deps);\n        },\n        useInsertionEffect: function (create, deps) {\n          currentHookNameInDev = \"useInsertionEffect\";\n          updateHookTypesDev();\n          return updateInsertionEffect(create, deps);\n        },\n        useLayoutEffect: function (create, deps) {\n          currentHookNameInDev = \"useLayoutEffect\";\n          updateHookTypesDev();\n          return updateLayoutEffect(create, deps);\n        },\n        useMemo: function (create, deps) {\n          currentHookNameInDev = \"useMemo\";\n          updateHookTypesDev();\n          var prevDispatcher = ReactCurrentDispatcher$1.current;\n          ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnUpdateInDEV;\n          try {\n            return updateMemo(create, deps);\n          } finally {\n            ReactCurrentDispatcher$1.current = prevDispatcher;\n          }\n        },\n        useReducer: function (reducer, initialArg, init) {\n          currentHookNameInDev = \"useReducer\";\n          updateHookTypesDev();\n          var prevDispatcher = ReactCurrentDispatcher$1.current;\n          ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnUpdateInDEV;\n          try {\n            return updateReducer(reducer, initialArg, init);\n          } finally {\n            ReactCurrentDispatcher$1.current = prevDispatcher;\n          }\n        },\n        useRef: function (initialValue) {\n          currentHookNameInDev = \"useRef\";\n          updateHookTypesDev();\n          return updateRef();\n        },\n        useState: function (initialState) {\n          currentHookNameInDev = \"useState\";\n          updateHookTypesDev();\n          var prevDispatcher = ReactCurrentDispatcher$1.current;\n          ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnUpdateInDEV;\n          try {\n            return updateState(initialState);\n          } finally {\n            ReactCurrentDispatcher$1.current = prevDispatcher;\n          }\n        },\n        useDebugValue: function (value, formatterFn) {\n          currentHookNameInDev = \"useDebugValue\";\n          updateHookTypesDev();\n          return updateDebugValue();\n        },\n        useDeferredValue: function (value, initialValue) {\n          currentHookNameInDev = \"useDeferredValue\";\n          updateHookTypesDev();\n          return updateDeferredValue(value, initialValue);\n        },\n        useTransition: function () {\n          currentHookNameInDev = \"useTransition\";\n          updateHookTypesDev();\n          return updateTransition();\n        },\n        useSyncExternalStore: function (subscribe, getSnapshot, getServerSnapshot) {\n          currentHookNameInDev = \"useSyncExternalStore\";\n          updateHookTypesDev();\n          return updateSyncExternalStore(subscribe, getSnapshot);\n        },\n        useId: function () {\n          currentHookNameInDev = \"useId\";\n          updateHookTypesDev();\n          return updateId();\n        }\n      };\n      HooksDispatcherOnRerenderInDEV = {\n        readContext: function (context) {\n          return readContext(context);\n        },\n        use: use,\n        useCallback: function (callback, deps) {\n          currentHookNameInDev = \"useCallback\";\n          updateHookTypesDev();\n          return updateCallback(callback, deps);\n        },\n        useContext: function (context) {\n          currentHookNameInDev = \"useContext\";\n          updateHookTypesDev();\n          return readContext(context);\n        },\n        useEffect: function (create, deps) {\n          currentHookNameInDev = \"useEffect\";\n          updateHookTypesDev();\n          return updateEffect(create, deps);\n        },\n        useImperativeHandle: function (ref, create, deps) {\n          currentHookNameInDev = \"useImperativeHandle\";\n          updateHookTypesDev();\n          return updateImperativeHandle(ref, create, deps);\n        },\n        useInsertionEffect: function (create, deps) {\n          currentHookNameInDev = \"useInsertionEffect\";\n          updateHookTypesDev();\n          return updateInsertionEffect(create, deps);\n        },\n        useLayoutEffect: function (create, deps) {\n          currentHookNameInDev = \"useLayoutEffect\";\n          updateHookTypesDev();\n          return updateLayoutEffect(create, deps);\n        },\n        useMemo: function (create, deps) {\n          currentHookNameInDev = \"useMemo\";\n          updateHookTypesDev();\n          var prevDispatcher = ReactCurrentDispatcher$1.current;\n          ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnRerenderInDEV;\n          try {\n            return updateMemo(create, deps);\n          } finally {\n            ReactCurrentDispatcher$1.current = prevDispatcher;\n          }\n        },\n        useReducer: function (reducer, initialArg, init) {\n          currentHookNameInDev = \"useReducer\";\n          updateHookTypesDev();\n          var prevDispatcher = ReactCurrentDispatcher$1.current;\n          ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnRerenderInDEV;\n          try {\n            return rerenderReducer(reducer, initialArg, init);\n          } finally {\n            ReactCurrentDispatcher$1.current = prevDispatcher;\n          }\n        },\n        useRef: function (initialValue) {\n          currentHookNameInDev = \"useRef\";\n          updateHookTypesDev();\n          return updateRef();\n        },\n        useState: function (initialState) {\n          currentHookNameInDev = \"useState\";\n          updateHookTypesDev();\n          var prevDispatcher = ReactCurrentDispatcher$1.current;\n          ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnRerenderInDEV;\n          try {\n            return rerenderState(initialState);\n          } finally {\n            ReactCurrentDispatcher$1.current = prevDispatcher;\n          }\n        },\n        useDebugValue: function (value, formatterFn) {\n          currentHookNameInDev = \"useDebugValue\";\n          updateHookTypesDev();\n          return updateDebugValue();\n        },\n        useDeferredValue: function (value, initialValue) {\n          currentHookNameInDev = \"useDeferredValue\";\n          updateHookTypesDev();\n          return rerenderDeferredValue(value, initialValue);\n        },\n        useTransition: function () {\n          currentHookNameInDev = \"useTransition\";\n          updateHookTypesDev();\n          return rerenderTransition();\n        },\n        useSyncExternalStore: function (subscribe, getSnapshot, getServerSnapshot) {\n          currentHookNameInDev = \"useSyncExternalStore\";\n          updateHookTypesDev();\n          return updateSyncExternalStore(subscribe, getSnapshot);\n        },\n        useId: function () {\n          currentHookNameInDev = \"useId\";\n          updateHookTypesDev();\n          return updateId();\n        }\n      };\n      InvalidNestedHooksDispatcherOnMountInDEV = {\n        readContext: function (context) {\n          warnInvalidContextAccess();\n          return readContext(context);\n        },\n        use: function (usable) {\n          warnInvalidHookAccess();\n          return use(usable);\n        },\n        useCallback: function (callback, deps) {\n          currentHookNameInDev = \"useCallback\";\n          warnInvalidHookAccess();\n          mountHookTypesDev();\n          return mountCallback(callback, deps);\n        },\n        useContext: function (context) {\n          currentHookNameInDev = \"useContext\";\n          warnInvalidHookAccess();\n          mountHookTypesDev();\n          return readContext(context);\n        },\n        useEffect: function (create, deps) {\n          currentHookNameInDev = \"useEffect\";\n          warnInvalidHookAccess();\n          mountHookTypesDev();\n          return mountEffect(create, deps);\n        },\n        useImperativeHandle: function (ref, create, deps) {\n          currentHookNameInDev = \"useImperativeHandle\";\n          warnInvalidHookAccess();\n          mountHookTypesDev();\n          return mountImperativeHandle(ref, create, deps);\n        },\n        useInsertionEffect: function (create, deps) {\n          currentHookNameInDev = \"useInsertionEffect\";\n          warnInvalidHookAccess();\n          mountHookTypesDev();\n          return mountInsertionEffect(create, deps);\n        },\n        useLayoutEffect: function (create, deps) {\n          currentHookNameInDev = \"useLayoutEffect\";\n          warnInvalidHookAccess();\n          mountHookTypesDev();\n          return mountLayoutEffect(create, deps);\n        },\n        useMemo: function (create, deps) {\n          currentHookNameInDev = \"useMemo\";\n          warnInvalidHookAccess();\n          mountHookTypesDev();\n          var prevDispatcher = ReactCurrentDispatcher$1.current;\n          ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnMountInDEV;\n          try {\n            return mountMemo(create, deps);\n          } finally {\n            ReactCurrentDispatcher$1.current = prevDispatcher;\n          }\n        },\n        useReducer: function (reducer, initialArg, init) {\n          currentHookNameInDev = \"useReducer\";\n          warnInvalidHookAccess();\n          mountHookTypesDev();\n          var prevDispatcher = ReactCurrentDispatcher$1.current;\n          ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnMountInDEV;\n          try {\n            return mountReducer(reducer, initialArg, init);\n          } finally {\n            ReactCurrentDispatcher$1.current = prevDispatcher;\n          }\n        },\n        useRef: function (initialValue) {\n          currentHookNameInDev = \"useRef\";\n          warnInvalidHookAccess();\n          mountHookTypesDev();\n          return mountRef(initialValue);\n        },\n        useState: function (initialState) {\n          currentHookNameInDev = \"useState\";\n          warnInvalidHookAccess();\n          mountHookTypesDev();\n          var prevDispatcher = ReactCurrentDispatcher$1.current;\n          ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnMountInDEV;\n          try {\n            return mountState(initialState);\n          } finally {\n            ReactCurrentDispatcher$1.current = prevDispatcher;\n          }\n        },\n        useDebugValue: function (value, formatterFn) {\n          currentHookNameInDev = \"useDebugValue\";\n          warnInvalidHookAccess();\n          mountHookTypesDev();\n          return mountDebugValue();\n        },\n        useDeferredValue: function (value, initialValue) {\n          currentHookNameInDev = \"useDeferredValue\";\n          warnInvalidHookAccess();\n          mountHookTypesDev();\n          return mountDeferredValue(value, initialValue);\n        },\n        useTransition: function () {\n          currentHookNameInDev = \"useTransition\";\n          warnInvalidHookAccess();\n          mountHookTypesDev();\n          return mountTransition();\n        },\n        useSyncExternalStore: function (subscribe, getSnapshot, getServerSnapshot) {\n          currentHookNameInDev = \"useSyncExternalStore\";\n          warnInvalidHookAccess();\n          mountHookTypesDev();\n          return mountSyncExternalStore(subscribe, getSnapshot);\n        },\n        useId: function () {\n          currentHookNameInDev = \"useId\";\n          warnInvalidHookAccess();\n          mountHookTypesDev();\n          return mountId();\n        }\n      };\n      InvalidNestedHooksDispatcherOnUpdateInDEV = {\n        readContext: function (context) {\n          warnInvalidContextAccess();\n          return readContext(context);\n        },\n        use: function (usable) {\n          warnInvalidHookAccess();\n          return use(usable);\n        },\n        useCallback: function (callback, deps) {\n          currentHookNameInDev = \"useCallback\";\n          warnInvalidHookAccess();\n          updateHookTypesDev();\n          return updateCallback(callback, deps);\n        },\n        useContext: function (context) {\n          currentHookNameInDev = \"useContext\";\n          warnInvalidHookAccess();\n          updateHookTypesDev();\n          return readContext(context);\n        },\n        useEffect: function (create, deps) {\n          currentHookNameInDev = \"useEffect\";\n          warnInvalidHookAccess();\n          updateHookTypesDev();\n          return updateEffect(create, deps);\n        },\n        useImperativeHandle: function (ref, create, deps) {\n          currentHookNameInDev = \"useImperativeHandle\";\n          warnInvalidHookAccess();\n          updateHookTypesDev();\n          return updateImperativeHandle(ref, create, deps);\n        },\n        useInsertionEffect: function (create, deps) {\n          currentHookNameInDev = \"useInsertionEffect\";\n          warnInvalidHookAccess();\n          updateHookTypesDev();\n          return updateInsertionEffect(create, deps);\n        },\n        useLayoutEffect: function (create, deps) {\n          currentHookNameInDev = \"useLayoutEffect\";\n          warnInvalidHookAccess();\n          updateHookTypesDev();\n          return updateLayoutEffect(create, deps);\n        },\n        useMemo: function (create, deps) {\n          currentHookNameInDev = \"useMemo\";\n          warnInvalidHookAccess();\n          updateHookTypesDev();\n          var prevDispatcher = ReactCurrentDispatcher$1.current;\n          ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnUpdateInDEV;\n          try {\n            return updateMemo(create, deps);\n          } finally {\n            ReactCurrentDispatcher$1.current = prevDispatcher;\n          }\n        },\n        useReducer: function (reducer, initialArg, init) {\n          currentHookNameInDev = \"useReducer\";\n          warnInvalidHookAccess();\n          updateHookTypesDev();\n          var prevDispatcher = ReactCurrentDispatcher$1.current;\n          ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnUpdateInDEV;\n          try {\n            return updateReducer(reducer, initialArg, init);\n          } finally {\n            ReactCurrentDispatcher$1.current = prevDispatcher;\n          }\n        },\n        useRef: function (initialValue) {\n          currentHookNameInDev = \"useRef\";\n          warnInvalidHookAccess();\n          updateHookTypesDev();\n          return updateRef();\n        },\n        useState: function (initialState) {\n          currentHookNameInDev = \"useState\";\n          warnInvalidHookAccess();\n          updateHookTypesDev();\n          var prevDispatcher = ReactCurrentDispatcher$1.current;\n          ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnUpdateInDEV;\n          try {\n            return updateState(initialState);\n          } finally {\n            ReactCurrentDispatcher$1.current = prevDispatcher;\n          }\n        },\n        useDebugValue: function (value, formatterFn) {\n          currentHookNameInDev = \"useDebugValue\";\n          warnInvalidHookAccess();\n          updateHookTypesDev();\n          return updateDebugValue();\n        },\n        useDeferredValue: function (value, initialValue) {\n          currentHookNameInDev = \"useDeferredValue\";\n          warnInvalidHookAccess();\n          updateHookTypesDev();\n          return updateDeferredValue(value, initialValue);\n        },\n        useTransition: function () {\n          currentHookNameInDev = \"useTransition\";\n          warnInvalidHookAccess();\n          updateHookTypesDev();\n          return updateTransition();\n        },\n        useSyncExternalStore: function (subscribe, getSnapshot, getServerSnapshot) {\n          currentHookNameInDev = \"useSyncExternalStore\";\n          warnInvalidHookAccess();\n          updateHookTypesDev();\n          return updateSyncExternalStore(subscribe, getSnapshot);\n        },\n        useId: function () {\n          currentHookNameInDev = \"useId\";\n          warnInvalidHookAccess();\n          updateHookTypesDev();\n          return updateId();\n        }\n      };\n      InvalidNestedHooksDispatcherOnRerenderInDEV = {\n        readContext: function (context) {\n          warnInvalidContextAccess();\n          return readContext(context);\n        },\n        use: function (usable) {\n          warnInvalidHookAccess();\n          return use(usable);\n        },\n        useCallback: function (callback, deps) {\n          currentHookNameInDev = \"useCallback\";\n          warnInvalidHookAccess();\n          updateHookTypesDev();\n          return updateCallback(callback, deps);\n        },\n        useContext: function (context) {\n          currentHookNameInDev = \"useContext\";\n          warnInvalidHookAccess();\n          updateHookTypesDev();\n          return readContext(context);\n        },\n        useEffect: function (create, deps) {\n          currentHookNameInDev = \"useEffect\";\n          warnInvalidHookAccess();\n          updateHookTypesDev();\n          return updateEffect(create, deps);\n        },\n        useImperativeHandle: function (ref, create, deps) {\n          currentHookNameInDev = \"useImperativeHandle\";\n          warnInvalidHookAccess();\n          updateHookTypesDev();\n          return updateImperativeHandle(ref, create, deps);\n        },\n        useInsertionEffect: function (create, deps) {\n          currentHookNameInDev = \"useInsertionEffect\";\n          warnInvalidHookAccess();\n          updateHookTypesDev();\n          return updateInsertionEffect(create, deps);\n        },\n        useLayoutEffect: function (create, deps) {\n          currentHookNameInDev = \"useLayoutEffect\";\n          warnInvalidHookAccess();\n          updateHookTypesDev();\n          return updateLayoutEffect(create, deps);\n        },\n        useMemo: function (create, deps) {\n          currentHookNameInDev = \"useMemo\";\n          warnInvalidHookAccess();\n          updateHookTypesDev();\n          var prevDispatcher = ReactCurrentDispatcher$1.current;\n          ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnUpdateInDEV;\n          try {\n            return updateMemo(create, deps);\n          } finally {\n            ReactCurrentDispatcher$1.current = prevDispatcher;\n          }\n        },\n        useReducer: function (reducer, initialArg, init) {\n          currentHookNameInDev = \"useReducer\";\n          warnInvalidHookAccess();\n          updateHookTypesDev();\n          var prevDispatcher = ReactCurrentDispatcher$1.current;\n          ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnUpdateInDEV;\n          try {\n            return rerenderReducer(reducer, initialArg, init);\n          } finally {\n            ReactCurrentDispatcher$1.current = prevDispatcher;\n          }\n        },\n        useRef: function (initialValue) {\n          currentHookNameInDev = \"useRef\";\n          warnInvalidHookAccess();\n          updateHookTypesDev();\n          return updateRef();\n        },\n        useState: function (initialState) {\n          currentHookNameInDev = \"useState\";\n          warnInvalidHookAccess();\n          updateHookTypesDev();\n          var prevDispatcher = ReactCurrentDispatcher$1.current;\n          ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnUpdateInDEV;\n          try {\n            return rerenderState(initialState);\n          } finally {\n            ReactCurrentDispatcher$1.current = prevDispatcher;\n          }\n        },\n        useDebugValue: function (value, formatterFn) {\n          currentHookNameInDev = \"useDebugValue\";\n          warnInvalidHookAccess();\n          updateHookTypesDev();\n          return updateDebugValue();\n        },\n        useDeferredValue: function (value, initialValue) {\n          currentHookNameInDev = \"useDeferredValue\";\n          warnInvalidHookAccess();\n          updateHookTypesDev();\n          return rerenderDeferredValue(value, initialValue);\n        },\n        useTransition: function () {\n          currentHookNameInDev = \"useTransition\";\n          warnInvalidHookAccess();\n          updateHookTypesDev();\n          return rerenderTransition();\n        },\n        useSyncExternalStore: function (subscribe, getSnapshot, getServerSnapshot) {\n          currentHookNameInDev = \"useSyncExternalStore\";\n          warnInvalidHookAccess();\n          updateHookTypesDev();\n          return updateSyncExternalStore(subscribe, getSnapshot);\n        },\n        useId: function () {\n          currentHookNameInDev = \"useId\";\n          warnInvalidHookAccess();\n          updateHookTypesDev();\n          return updateId();\n        }\n      };\n    }\n    var now = Scheduler.unstable_now;\n    var commitTime = 0;\n    var layoutEffectStartTime = -1;\n    var profilerStartTime = -1;\n    var passiveEffectStartTime = -1;\n    var currentUpdateIsNested = false;\n    var nestedUpdateScheduled = false;\n    function isCurrentUpdateNested() {\n      return currentUpdateIsNested;\n    }\n    function markNestedUpdateScheduled() {\n      {\n        nestedUpdateScheduled = true;\n      }\n    }\n    function resetNestedUpdateFlag() {\n      {\n        currentUpdateIsNested = false;\n        nestedUpdateScheduled = false;\n      }\n    }\n    function syncNestedUpdateFlag() {\n      {\n        currentUpdateIsNested = nestedUpdateScheduled;\n        nestedUpdateScheduled = false;\n      }\n    }\n    function getCommitTime() {\n      return commitTime;\n    }\n    function recordCommitTime() {\n      commitTime = now();\n    }\n    function startProfilerTimer(fiber) {\n      profilerStartTime = now();\n      if (fiber.actualStartTime < 0) {\n        fiber.actualStartTime = now();\n      }\n    }\n    function stopProfilerTimerIfRunning(fiber) {\n      profilerStartTime = -1;\n    }\n    function stopProfilerTimerIfRunningAndRecordDelta(fiber, overrideBaseTime) {\n      if (profilerStartTime >= 0) {\n        var elapsedTime = now() - profilerStartTime;\n        fiber.actualDuration += elapsedTime;\n        if (overrideBaseTime) {\n          fiber.selfBaseDuration = elapsedTime;\n        }\n        profilerStartTime = -1;\n      }\n    }\n    function recordLayoutEffectDuration(fiber) {\n      if (layoutEffectStartTime >= 0) {\n        var elapsedTime = now() - layoutEffectStartTime;\n        layoutEffectStartTime = -1;\n        var parentFiber = fiber.return;\n        while (parentFiber !== null) {\n          switch (parentFiber.tag) {\n            case HostRoot:\n              var root = parentFiber.stateNode;\n              root.effectDuration += elapsedTime;\n              return;\n            case Profiler:\n              var parentStateNode = parentFiber.stateNode;\n              parentStateNode.effectDuration += elapsedTime;\n              return;\n          }\n          parentFiber = parentFiber.return;\n        }\n      }\n    }\n    function recordPassiveEffectDuration(fiber) {\n      if (passiveEffectStartTime >= 0) {\n        var elapsedTime = now() - passiveEffectStartTime;\n        passiveEffectStartTime = -1;\n        var parentFiber = fiber.return;\n        while (parentFiber !== null) {\n          switch (parentFiber.tag) {\n            case HostRoot:\n              var root = parentFiber.stateNode;\n              if (root !== null) {\n                root.passiveEffectDuration += elapsedTime;\n              }\n              return;\n            case Profiler:\n              var parentStateNode = parentFiber.stateNode;\n              if (parentStateNode !== null) {\n                parentStateNode.passiveEffectDuration += elapsedTime;\n              }\n              return;\n          }\n          parentFiber = parentFiber.return;\n        }\n      }\n    }\n    function startLayoutEffectTimer() {\n      layoutEffectStartTime = now();\n    }\n    function startPassiveEffectTimer() {\n      passiveEffectStartTime = now();\n    }\n    function transferActualDuration(fiber) {\n      var child = fiber.child;\n      while (child) {\n        fiber.actualDuration += child.actualDuration;\n        child = child.sibling;\n      }\n    }\n    function resolveDefaultProps(Component, baseProps) {\n      if (Component && Component.defaultProps) {\n        var props = assign({}, baseProps);\n        var defaultProps = Component.defaultProps;\n        for (var propName in defaultProps) {\n          if (props[propName] === undefined) {\n            props[propName] = defaultProps[propName];\n          }\n        }\n        return props;\n      }\n      return baseProps;\n    }\n    var fakeInternalInstance = {};\n    var didWarnAboutStateAssignmentForComponent;\n    var didWarnAboutUninitializedState;\n    var didWarnAboutGetSnapshotBeforeUpdateWithoutDidUpdate;\n    var didWarnAboutLegacyLifecyclesAndDerivedState;\n    var didWarnAboutUndefinedDerivedState;\n    var didWarnAboutDirectlyAssigningPropsToState;\n    var didWarnAboutContextTypeAndContextTypes;\n    var didWarnAboutInvalidateContextType;\n    var didWarnOnInvalidCallback;\n    {\n      didWarnAboutStateAssignmentForComponent = new Set();\n      didWarnAboutUninitializedState = new Set();\n      didWarnAboutGetSnapshotBeforeUpdateWithoutDidUpdate = new Set();\n      didWarnAboutLegacyLifecyclesAndDerivedState = new Set();\n      didWarnAboutDirectlyAssigningPropsToState = new Set();\n      didWarnAboutUndefinedDerivedState = new Set();\n      didWarnAboutContextTypeAndContextTypes = new Set();\n      didWarnAboutInvalidateContextType = new Set();\n      didWarnOnInvalidCallback = new Set();\n      Object.defineProperty(fakeInternalInstance, \"_processChildContext\", {\n        enumerable: false,\n        value: function () {\n          throw new Error(\"_processChildContext is not available in React 16+. This likely \" + \"means you have multiple copies of React and are attempting to nest \" + \"a React 15 tree inside a React 16 tree using \" + \"unstable_renderSubtreeIntoContainer, which isn't supported. Try \" + \"to make sure you have only one copy of React (and ideally, switch \" + \"to ReactDOM.createPortal).\");\n        }\n      });\n      Object.freeze(fakeInternalInstance);\n    }\n    function warnOnInvalidCallback(callback, callerName) {\n      {\n        if (callback === null || typeof callback === \"function\") {\n          return;\n        }\n        var key = callerName + \"_\" + callback;\n        if (!didWarnOnInvalidCallback.has(key)) {\n          didWarnOnInvalidCallback.add(key);\n          error(\"%s(...): Expected the last optional `callback` argument to be a \" + \"function. Instead received: %s.\", callerName, callback);\n        }\n      }\n    }\n    function warnOnUndefinedDerivedState(type, partialState) {\n      {\n        if (partialState === undefined) {\n          var componentName = getComponentNameFromType(type) || \"Component\";\n          if (!didWarnAboutUndefinedDerivedState.has(componentName)) {\n            didWarnAboutUndefinedDerivedState.add(componentName);\n            error(\"%s.getDerivedStateFromProps(): A valid state object (or null) must be returned. \" + \"You have returned undefined.\", componentName);\n          }\n        }\n      }\n    }\n    function applyDerivedStateFromProps(workInProgress, ctor, getDerivedStateFromProps, nextProps) {\n      var prevState = workInProgress.memoizedState;\n      var partialState = getDerivedStateFromProps(nextProps, prevState);\n      {\n        if (workInProgress.mode & StrictLegacyMode) {\n          setIsStrictModeForDevtools(true);\n          try {\n            partialState = getDerivedStateFromProps(nextProps, prevState);\n          } finally {\n            setIsStrictModeForDevtools(false);\n          }\n        }\n        warnOnUndefinedDerivedState(ctor, partialState);\n      }\n      var memoizedState = partialState === null || partialState === undefined ? prevState : assign({}, prevState, partialState);\n      workInProgress.memoizedState = memoizedState;\n      if (workInProgress.lanes === NoLanes) {\n        var updateQueue = workInProgress.updateQueue;\n        updateQueue.baseState = memoizedState;\n      }\n    }\n    var classComponentUpdater = {\n      isMounted: isMounted,\n      enqueueSetState: function (inst, payload, callback) {\n        var fiber = get(inst);\n        var lane = requestUpdateLane(fiber);\n        var update = createUpdate(lane);\n        update.payload = payload;\n        if (callback !== undefined && callback !== null) {\n          {\n            warnOnInvalidCallback(callback, \"setState\");\n          }\n          update.callback = callback;\n        }\n        var root = enqueueUpdate(fiber, update, lane);\n        if (root !== null) {\n          scheduleUpdateOnFiber(root, fiber, lane);\n          entangleTransitions(root, fiber, lane);\n        }\n      },\n      enqueueReplaceState: function (inst, payload, callback) {\n        var fiber = get(inst);\n        var lane = requestUpdateLane(fiber);\n        var update = createUpdate(lane);\n        update.tag = ReplaceState;\n        update.payload = payload;\n        if (callback !== undefined && callback !== null) {\n          {\n            warnOnInvalidCallback(callback, \"replaceState\");\n          }\n          update.callback = callback;\n        }\n        var root = enqueueUpdate(fiber, update, lane);\n        if (root !== null) {\n          scheduleUpdateOnFiber(root, fiber, lane);\n          entangleTransitions(root, fiber, lane);\n        }\n      },\n      enqueueForceUpdate: function (inst, callback) {\n        var fiber = get(inst);\n        var lane = requestUpdateLane(fiber);\n        var update = createUpdate(lane);\n        update.tag = ForceUpdate;\n        if (callback !== undefined && callback !== null) {\n          {\n            warnOnInvalidCallback(callback, \"forceUpdate\");\n          }\n          update.callback = callback;\n        }\n        var root = enqueueUpdate(fiber, update, lane);\n        if (root !== null) {\n          scheduleUpdateOnFiber(root, fiber, lane);\n          entangleTransitions(root, fiber, lane);\n        }\n      }\n    };\n    function checkShouldComponentUpdate(workInProgress, ctor, oldProps, newProps, oldState, newState, nextContext) {\n      var instance = workInProgress.stateNode;\n      if (typeof instance.shouldComponentUpdate === \"function\") {\n        var shouldUpdate = instance.shouldComponentUpdate(newProps, newState, nextContext);\n        {\n          if (workInProgress.mode & StrictLegacyMode) {\n            setIsStrictModeForDevtools(true);\n            try {\n              shouldUpdate = instance.shouldComponentUpdate(newProps, newState, nextContext);\n            } finally {\n              setIsStrictModeForDevtools(false);\n            }\n          }\n          if (shouldUpdate === undefined) {\n            error(\"%s.shouldComponentUpdate(): Returned undefined instead of a \" + \"boolean value. Make sure to return true or false.\", getComponentNameFromType(ctor) || \"Component\");\n          }\n        }\n        return shouldUpdate;\n      }\n      if (ctor.prototype && ctor.prototype.isPureReactComponent) {\n        return !shallowEqual(oldProps, newProps) || !shallowEqual(oldState, newState);\n      }\n      return true;\n    }\n    function checkClassInstance(workInProgress, ctor, newProps) {\n      var instance = workInProgress.stateNode;\n      {\n        var name = getComponentNameFromType(ctor) || \"Component\";\n        var renderPresent = instance.render;\n        if (!renderPresent) {\n          if (ctor.prototype && typeof ctor.prototype.render === \"function\") {\n            error(\"%s(...): No `render` method found on the returned component \" + \"instance: did you accidentally return an object from the constructor?\", name);\n          } else {\n            error(\"%s(...): No `render` method found on the returned component \" + \"instance: you may have forgotten to define `render`.\", name);\n          }\n        }\n        if (instance.getInitialState && !instance.getInitialState.isReactClassApproved && !instance.state) {\n          error(\"getInitialState was defined on %s, a plain JavaScript class. \" + \"This is only supported for classes created using React.createClass. \" + \"Did you mean to define a state property instead?\", name);\n        }\n        if (instance.getDefaultProps && !instance.getDefaultProps.isReactClassApproved) {\n          error(\"getDefaultProps was defined on %s, a plain JavaScript class. \" + \"This is only supported for classes created using React.createClass. \" + \"Use a static property to define defaultProps instead.\", name);\n        }\n        if (instance.propTypes) {\n          error(\"propTypes was defined as an instance property on %s. Use a static \" + \"property to define propTypes instead.\", name);\n        }\n        if (instance.contextType) {\n          error(\"contextType was defined as an instance property on %s. Use a static \" + \"property to define contextType instead.\", name);\n        }\n        {\n          if (instance.contextTypes) {\n            error(\"contextTypes was defined as an instance property on %s. Use a static \" + \"property to define contextTypes instead.\", name);\n          }\n          if (ctor.contextType && ctor.contextTypes && !didWarnAboutContextTypeAndContextTypes.has(ctor)) {\n            didWarnAboutContextTypeAndContextTypes.add(ctor);\n            error(\"%s declares both contextTypes and contextType static properties. \" + \"The legacy contextTypes property will be ignored.\", name);\n          }\n        }\n        if (typeof instance.componentShouldUpdate === \"function\") {\n          error(\"%s has a method called \" + \"componentShouldUpdate(). Did you mean shouldComponentUpdate()? \" + \"The name is phrased as a question because the function is \" + \"expected to return a value.\", name);\n        }\n        if (ctor.prototype && ctor.prototype.isPureReactComponent && typeof instance.shouldComponentUpdate !== \"undefined\") {\n          error(\"%s has a method called shouldComponentUpdate(). \" + \"shouldComponentUpdate should not be used when extending React.PureComponent. \" + \"Please extend React.Component if shouldComponentUpdate is used.\", getComponentNameFromType(ctor) || \"A pure component\");\n        }\n        if (typeof instance.componentDidUnmount === \"function\") {\n          error(\"%s has a method called \" + \"componentDidUnmount(). But there is no such lifecycle method. \" + \"Did you mean componentWillUnmount()?\", name);\n        }\n        if (typeof instance.componentDidReceiveProps === \"function\") {\n          error(\"%s has a method called \" + \"componentDidReceiveProps(). But there is no such lifecycle method. \" + \"If you meant to update the state in response to changing props, \" + \"use componentWillReceiveProps(). If you meant to fetch data or \" + \"run side-effects or mutations after React has updated the UI, use componentDidUpdate().\", name);\n        }\n        if (typeof instance.componentWillRecieveProps === \"function\") {\n          error(\"%s has a method called \" + \"componentWillRecieveProps(). Did you mean componentWillReceiveProps()?\", name);\n        }\n        if (typeof instance.UNSAFE_componentWillRecieveProps === \"function\") {\n          error(\"%s has a method called \" + \"UNSAFE_componentWillRecieveProps(). Did you mean UNSAFE_componentWillReceiveProps()?\", name);\n        }\n        var hasMutatedProps = instance.props !== newProps;\n        if (instance.props !== undefined && hasMutatedProps) {\n          error(\"%s(...): When calling super() in `%s`, make sure to pass \" + \"up the same props that your component's constructor was passed.\", name, name);\n        }\n        if (instance.defaultProps) {\n          error(\"Setting defaultProps as an instance property on %s is not supported and will be ignored.\" + \" Instead, define defaultProps as a static property on %s.\", name, name);\n        }\n        if (typeof instance.getSnapshotBeforeUpdate === \"function\" && typeof instance.componentDidUpdate !== \"function\" && !didWarnAboutGetSnapshotBeforeUpdateWithoutDidUpdate.has(ctor)) {\n          didWarnAboutGetSnapshotBeforeUpdateWithoutDidUpdate.add(ctor);\n          error(\"%s: getSnapshotBeforeUpdate() should be used with componentDidUpdate(). \" + \"This component defines getSnapshotBeforeUpdate() only.\", getComponentNameFromType(ctor));\n        }\n        if (typeof instance.getDerivedStateFromProps === \"function\") {\n          error(\"%s: getDerivedStateFromProps() is defined as an instance method \" + \"and will be ignored. Instead, declare it as a static method.\", name);\n        }\n        if (typeof instance.getDerivedStateFromError === \"function\") {\n          error(\"%s: getDerivedStateFromError() is defined as an instance method \" + \"and will be ignored. Instead, declare it as a static method.\", name);\n        }\n        if (typeof ctor.getSnapshotBeforeUpdate === \"function\") {\n          error(\"%s: getSnapshotBeforeUpdate() is defined as a static method \" + \"and will be ignored. Instead, declare it as an instance method.\", name);\n        }\n        var state = instance.state;\n        if (state && (typeof state !== \"object\" || isArray(state))) {\n          error(\"%s.state: must be set to an object or null\", name);\n        }\n        if (typeof instance.getChildContext === \"function\" && typeof ctor.childContextTypes !== \"object\") {\n          error(\"%s.getChildContext(): childContextTypes must be defined in order to \" + \"use getChildContext().\", name);\n        }\n      }\n    }\n    function adoptClassInstance(workInProgress, instance) {\n      instance.updater = classComponentUpdater;\n      workInProgress.stateNode = instance;\n      set(instance, workInProgress);\n      {\n        instance._reactInternalInstance = fakeInternalInstance;\n      }\n    }\n    function constructClassInstance(workInProgress, ctor, props) {\n      var isLegacyContextConsumer = false;\n      var unmaskedContext = emptyContextObject;\n      var context = emptyContextObject;\n      var contextType = ctor.contextType;\n      {\n        if (\"contextType\" in ctor) {\n          var isValid = contextType === null || contextType !== undefined && contextType.$$typeof === REACT_CONTEXT_TYPE && contextType._context === undefined;\n          if (!isValid && !didWarnAboutInvalidateContextType.has(ctor)) {\n            didWarnAboutInvalidateContextType.add(ctor);\n            var addendum = \"\";\n            if (contextType === undefined) {\n              addendum = \" However, it is set to undefined. \" + \"This can be caused by a typo or by mixing up named and default imports. \" + \"This can also happen due to a circular dependency, so \" + \"try moving the createContext() call to a separate file.\";\n            } else if (typeof contextType !== \"object\") {\n              addendum = \" However, it is set to a \" + typeof contextType + \".\";\n            } else if (contextType.$$typeof === REACT_PROVIDER_TYPE) {\n              addendum = \" Did you accidentally pass the Context.Provider instead?\";\n            } else if (contextType._context !== undefined) {\n              addendum = \" Did you accidentally pass the Context.Consumer instead?\";\n            } else {\n              addendum = \" However, it is set to an object with keys {\" + Object.keys(contextType).join(\", \") + \"}.\";\n            }\n            error(\"%s defines an invalid contextType. \" + \"contextType should point to the Context object returned by React.createContext().%s\", getComponentNameFromType(ctor) || \"Component\", addendum);\n          }\n        }\n      }\n      if (typeof contextType === \"object\" && contextType !== null) {\n        context = readContext(contextType);\n      } else {\n        unmaskedContext = getUnmaskedContext(workInProgress, ctor, true);\n        var contextTypes = ctor.contextTypes;\n        isLegacyContextConsumer = contextTypes !== null && contextTypes !== undefined;\n        context = isLegacyContextConsumer ? getMaskedContext(workInProgress, unmaskedContext) : emptyContextObject;\n      }\n      var instance = new ctor(props, context);\n      {\n        if (workInProgress.mode & StrictLegacyMode) {\n          setIsStrictModeForDevtools(true);\n          try {\n            instance = new ctor(props, context);\n          } finally {\n            setIsStrictModeForDevtools(false);\n          }\n        }\n      }\n      var state = workInProgress.memoizedState = instance.state !== null && instance.state !== undefined ? instance.state : null;\n      adoptClassInstance(workInProgress, instance);\n      {\n        if (typeof ctor.getDerivedStateFromProps === \"function\" && state === null) {\n          var componentName = getComponentNameFromType(ctor) || \"Component\";\n          if (!didWarnAboutUninitializedState.has(componentName)) {\n            didWarnAboutUninitializedState.add(componentName);\n            error(\"`%s` uses `getDerivedStateFromProps` but its initial state is \" + \"%s. This is not recommended. Instead, define the initial state by \" + \"assigning an object to `this.state` in the constructor of `%s`. \" + \"This ensures that `getDerivedStateFromProps` arguments have a consistent shape.\", componentName, instance.state === null ? \"null\" : \"undefined\", componentName);\n          }\n        }\n        if (typeof ctor.getDerivedStateFromProps === \"function\" || typeof instance.getSnapshotBeforeUpdate === \"function\") {\n          var foundWillMountName = null;\n          var foundWillReceivePropsName = null;\n          var foundWillUpdateName = null;\n          if (typeof instance.componentWillMount === \"function\" && instance.componentWillMount.__suppressDeprecationWarning !== true) {\n            foundWillMountName = \"componentWillMount\";\n          } else if (typeof instance.UNSAFE_componentWillMount === \"function\") {\n            foundWillMountName = \"UNSAFE_componentWillMount\";\n          }\n          if (typeof instance.componentWillReceiveProps === \"function\" && instance.componentWillReceiveProps.__suppressDeprecationWarning !== true) {\n            foundWillReceivePropsName = \"componentWillReceiveProps\";\n          } else if (typeof instance.UNSAFE_componentWillReceiveProps === \"function\") {\n            foundWillReceivePropsName = \"UNSAFE_componentWillReceiveProps\";\n          }\n          if (typeof instance.componentWillUpdate === \"function\" && instance.componentWillUpdate.__suppressDeprecationWarning !== true) {\n            foundWillUpdateName = \"componentWillUpdate\";\n          } else if (typeof instance.UNSAFE_componentWillUpdate === \"function\") {\n            foundWillUpdateName = \"UNSAFE_componentWillUpdate\";\n          }\n          if (foundWillMountName !== null || foundWillReceivePropsName !== null || foundWillUpdateName !== null) {\n            var _componentName = getComponentNameFromType(ctor) || \"Component\";\n            var newApiName = typeof ctor.getDerivedStateFromProps === \"function\" ? \"getDerivedStateFromProps()\" : \"getSnapshotBeforeUpdate()\";\n            if (!didWarnAboutLegacyLifecyclesAndDerivedState.has(_componentName)) {\n              didWarnAboutLegacyLifecyclesAndDerivedState.add(_componentName);\n              error(\"Unsafe legacy lifecycles will not be called for components using new component APIs.\\n\\n\" + \"%s uses %s but also contains the following legacy lifecycles:%s%s%s\\n\\n\" + \"The above lifecycles should be removed. Learn more about this warning here:\\n\" + \"https://reactjs.org/link/unsafe-component-lifecycles\", _componentName, newApiName, foundWillMountName !== null ? \"\\n  \" + foundWillMountName : \"\", foundWillReceivePropsName !== null ? \"\\n  \" + foundWillReceivePropsName : \"\", foundWillUpdateName !== null ? \"\\n  \" + foundWillUpdateName : \"\");\n            }\n          }\n        }\n      }\n      if (isLegacyContextConsumer) {\n        cacheContext(workInProgress, unmaskedContext, context);\n      }\n      return instance;\n    }\n    function callComponentWillMount(workInProgress, instance) {\n      var oldState = instance.state;\n      if (typeof instance.componentWillMount === \"function\") {\n        instance.componentWillMount();\n      }\n      if (typeof instance.UNSAFE_componentWillMount === \"function\") {\n        instance.UNSAFE_componentWillMount();\n      }\n      if (oldState !== instance.state) {\n        {\n          error(\"%s.componentWillMount(): Assigning directly to this.state is \" + \"deprecated (except inside a component's \" + \"constructor). Use setState instead.\", getComponentNameFromFiber(workInProgress) || \"Component\");\n        }\n        classComponentUpdater.enqueueReplaceState(instance, instance.state, null);\n      }\n    }\n    function callComponentWillReceiveProps(workInProgress, instance, newProps, nextContext) {\n      var oldState = instance.state;\n      if (typeof instance.componentWillReceiveProps === \"function\") {\n        instance.componentWillReceiveProps(newProps, nextContext);\n      }\n      if (typeof instance.UNSAFE_componentWillReceiveProps === \"function\") {\n        instance.UNSAFE_componentWillReceiveProps(newProps, nextContext);\n      }\n      if (instance.state !== oldState) {\n        {\n          var componentName = getComponentNameFromFiber(workInProgress) || \"Component\";\n          if (!didWarnAboutStateAssignmentForComponent.has(componentName)) {\n            didWarnAboutStateAssignmentForComponent.add(componentName);\n            error(\"%s.componentWillReceiveProps(): Assigning directly to \" + \"this.state is deprecated (except inside a component's \" + \"constructor). Use setState instead.\", componentName);\n          }\n        }\n        classComponentUpdater.enqueueReplaceState(instance, instance.state, null);\n      }\n    }\n    function mountClassInstance(workInProgress, ctor, newProps, renderLanes) {\n      {\n        checkClassInstance(workInProgress, ctor, newProps);\n      }\n      var instance = workInProgress.stateNode;\n      instance.props = newProps;\n      instance.state = workInProgress.memoizedState;\n      instance.refs = {};\n      initializeUpdateQueue(workInProgress);\n      var contextType = ctor.contextType;\n      if (typeof contextType === \"object\" && contextType !== null) {\n        instance.context = readContext(contextType);\n      } else {\n        var unmaskedContext = getUnmaskedContext(workInProgress, ctor, true);\n        instance.context = getMaskedContext(workInProgress, unmaskedContext);\n      }\n      {\n        if (instance.state === newProps) {\n          var componentName = getComponentNameFromType(ctor) || \"Component\";\n          if (!didWarnAboutDirectlyAssigningPropsToState.has(componentName)) {\n            didWarnAboutDirectlyAssigningPropsToState.add(componentName);\n            error(\"%s: It is not recommended to assign props directly to state \" + \"because updates to props won't be reflected in state. \" + \"In most cases, it is better to use props directly.\", componentName);\n          }\n        }\n        if (workInProgress.mode & StrictLegacyMode) {\n          ReactStrictModeWarnings.recordLegacyContextWarning(workInProgress, instance);\n        }\n        ReactStrictModeWarnings.recordUnsafeLifecycleWarnings(workInProgress, instance);\n      }\n      instance.state = workInProgress.memoizedState;\n      var getDerivedStateFromProps = ctor.getDerivedStateFromProps;\n      if (typeof getDerivedStateFromProps === \"function\") {\n        applyDerivedStateFromProps(workInProgress, ctor, getDerivedStateFromProps, newProps);\n        instance.state = workInProgress.memoizedState;\n      }\n      if (typeof ctor.getDerivedStateFromProps !== \"function\" && typeof instance.getSnapshotBeforeUpdate !== \"function\" && (typeof instance.UNSAFE_componentWillMount === \"function\" || typeof instance.componentWillMount === \"function\")) {\n        callComponentWillMount(workInProgress, instance);\n        processUpdateQueue(workInProgress, newProps, instance, renderLanes);\n        suspendIfUpdateReadFromEntangledAsyncAction();\n        instance.state = workInProgress.memoizedState;\n      }\n      if (typeof instance.componentDidMount === \"function\") {\n        workInProgress.flags |= Update | LayoutStatic;\n      }\n      if ((workInProgress.mode & StrictEffectsMode) !== NoMode) {\n        workInProgress.flags |= MountLayoutDev;\n      }\n    }\n    function resumeMountClassInstance(workInProgress, ctor, newProps, renderLanes) {\n      var instance = workInProgress.stateNode;\n      var oldProps = workInProgress.memoizedProps;\n      instance.props = oldProps;\n      var oldContext = instance.context;\n      var contextType = ctor.contextType;\n      var nextContext = emptyContextObject;\n      if (typeof contextType === \"object\" && contextType !== null) {\n        nextContext = readContext(contextType);\n      } else {\n        var nextLegacyUnmaskedContext = getUnmaskedContext(workInProgress, ctor, true);\n        nextContext = getMaskedContext(workInProgress, nextLegacyUnmaskedContext);\n      }\n      var getDerivedStateFromProps = ctor.getDerivedStateFromProps;\n      var hasNewLifecycles = typeof getDerivedStateFromProps === \"function\" || typeof instance.getSnapshotBeforeUpdate === \"function\";\n      if (!hasNewLifecycles && (typeof instance.UNSAFE_componentWillReceiveProps === \"function\" || typeof instance.componentWillReceiveProps === \"function\")) {\n        if (oldProps !== newProps || oldContext !== nextContext) {\n          callComponentWillReceiveProps(workInProgress, instance, newProps, nextContext);\n        }\n      }\n      resetHasForceUpdateBeforeProcessing();\n      var oldState = workInProgress.memoizedState;\n      var newState = instance.state = oldState;\n      processUpdateQueue(workInProgress, newProps, instance, renderLanes);\n      suspendIfUpdateReadFromEntangledAsyncAction();\n      newState = workInProgress.memoizedState;\n      if (oldProps === newProps && oldState === newState && !hasContextChanged() && !checkHasForceUpdateAfterProcessing()) {\n        if (typeof instance.componentDidMount === \"function\") {\n          workInProgress.flags |= Update | LayoutStatic;\n        }\n        if ((workInProgress.mode & StrictEffectsMode) !== NoMode) {\n          workInProgress.flags |= MountLayoutDev;\n        }\n        return false;\n      }\n      if (typeof getDerivedStateFromProps === \"function\") {\n        applyDerivedStateFromProps(workInProgress, ctor, getDerivedStateFromProps, newProps);\n        newState = workInProgress.memoizedState;\n      }\n      var shouldUpdate = checkHasForceUpdateAfterProcessing() || checkShouldComponentUpdate(workInProgress, ctor, oldProps, newProps, oldState, newState, nextContext);\n      if (shouldUpdate) {\n        if (!hasNewLifecycles && (typeof instance.UNSAFE_componentWillMount === \"function\" || typeof instance.componentWillMount === \"function\")) {\n          if (typeof instance.componentWillMount === \"function\") {\n            instance.componentWillMount();\n          }\n          if (typeof instance.UNSAFE_componentWillMount === \"function\") {\n            instance.UNSAFE_componentWillMount();\n          }\n        }\n        if (typeof instance.componentDidMount === \"function\") {\n          workInProgress.flags |= Update | LayoutStatic;\n        }\n        if ((workInProgress.mode & StrictEffectsMode) !== NoMode) {\n          workInProgress.flags |= MountLayoutDev;\n        }\n      } else {\n        if (typeof instance.componentDidMount === \"function\") {\n          workInProgress.flags |= Update | LayoutStatic;\n        }\n        if ((workInProgress.mode & StrictEffectsMode) !== NoMode) {\n          workInProgress.flags |= MountLayoutDev;\n        }\n        workInProgress.memoizedProps = newProps;\n        workInProgress.memoizedState = newState;\n      }\n      instance.props = newProps;\n      instance.state = newState;\n      instance.context = nextContext;\n      return shouldUpdate;\n    }\n    function updateClassInstance(current, workInProgress, ctor, newProps, renderLanes) {\n      var instance = workInProgress.stateNode;\n      cloneUpdateQueue(current, workInProgress);\n      var unresolvedOldProps = workInProgress.memoizedProps;\n      var oldProps = workInProgress.type === workInProgress.elementType ? unresolvedOldProps : resolveDefaultProps(workInProgress.type, unresolvedOldProps);\n      instance.props = oldProps;\n      var unresolvedNewProps = workInProgress.pendingProps;\n      var oldContext = instance.context;\n      var contextType = ctor.contextType;\n      var nextContext = emptyContextObject;\n      if (typeof contextType === \"object\" && contextType !== null) {\n        nextContext = readContext(contextType);\n      } else {\n        var nextUnmaskedContext = getUnmaskedContext(workInProgress, ctor, true);\n        nextContext = getMaskedContext(workInProgress, nextUnmaskedContext);\n      }\n      var getDerivedStateFromProps = ctor.getDerivedStateFromProps;\n      var hasNewLifecycles = typeof getDerivedStateFromProps === \"function\" || typeof instance.getSnapshotBeforeUpdate === \"function\";\n      if (!hasNewLifecycles && (typeof instance.UNSAFE_componentWillReceiveProps === \"function\" || typeof instance.componentWillReceiveProps === \"function\")) {\n        if (unresolvedOldProps !== unresolvedNewProps || oldContext !== nextContext) {\n          callComponentWillReceiveProps(workInProgress, instance, newProps, nextContext);\n        }\n      }\n      resetHasForceUpdateBeforeProcessing();\n      var oldState = workInProgress.memoizedState;\n      var newState = instance.state = oldState;\n      processUpdateQueue(workInProgress, newProps, instance, renderLanes);\n      suspendIfUpdateReadFromEntangledAsyncAction();\n      newState = workInProgress.memoizedState;\n      if (unresolvedOldProps === unresolvedNewProps && oldState === newState && !hasContextChanged() && !checkHasForceUpdateAfterProcessing() && !enableLazyContextPropagation) {\n        if (typeof instance.componentDidUpdate === \"function\") {\n          if (unresolvedOldProps !== current.memoizedProps || oldState !== current.memoizedState) {\n            workInProgress.flags |= Update;\n          }\n        }\n        if (typeof instance.getSnapshotBeforeUpdate === \"function\") {\n          if (unresolvedOldProps !== current.memoizedProps || oldState !== current.memoizedState) {\n            workInProgress.flags |= Snapshot;\n          }\n        }\n        return false;\n      }\n      if (typeof getDerivedStateFromProps === \"function\") {\n        applyDerivedStateFromProps(workInProgress, ctor, getDerivedStateFromProps, newProps);\n        newState = workInProgress.memoizedState;\n      }\n      var shouldUpdate = checkHasForceUpdateAfterProcessing() || checkShouldComponentUpdate(workInProgress, ctor, oldProps, newProps, oldState, newState, nextContext) || enableLazyContextPropagation;\n      if (shouldUpdate) {\n        if (!hasNewLifecycles && (typeof instance.UNSAFE_componentWillUpdate === \"function\" || typeof instance.componentWillUpdate === \"function\")) {\n          if (typeof instance.componentWillUpdate === \"function\") {\n            instance.componentWillUpdate(newProps, newState, nextContext);\n          }\n          if (typeof instance.UNSAFE_componentWillUpdate === \"function\") {\n            instance.UNSAFE_componentWillUpdate(newProps, newState, nextContext);\n          }\n        }\n        if (typeof instance.componentDidUpdate === \"function\") {\n          workInProgress.flags |= Update;\n        }\n        if (typeof instance.getSnapshotBeforeUpdate === \"function\") {\n          workInProgress.flags |= Snapshot;\n        }\n      } else {\n        if (typeof instance.componentDidUpdate === \"function\") {\n          if (unresolvedOldProps !== current.memoizedProps || oldState !== current.memoizedState) {\n            workInProgress.flags |= Update;\n          }\n        }\n        if (typeof instance.getSnapshotBeforeUpdate === \"function\") {\n          if (unresolvedOldProps !== current.memoizedProps || oldState !== current.memoizedState) {\n            workInProgress.flags |= Snapshot;\n          }\n        }\n        workInProgress.memoizedProps = newProps;\n        workInProgress.memoizedState = newState;\n      }\n      instance.props = newProps;\n      instance.state = newState;\n      instance.context = nextContext;\n      return shouldUpdate;\n    }\n    function createCapturedValueAtFiber(value, source) {\n      return {\n        value: value,\n        source: source,\n        stack: getStackByFiberInDevAndProd(source),\n        digest: null\n      };\n    }\n    function createCapturedValue(value, digest, stack) {\n      return {\n        value: value,\n        source: null,\n        stack: stack != null ? stack : null,\n        digest: digest != null ? digest : null\n      };\n    }\n    if (typeof ReactNativePrivateInterface.ReactFiberErrorDialog.showErrorDialog !== \"function\") {\n      throw new Error(\"Expected ReactFiberErrorDialog.showErrorDialog to be a function.\");\n    }\n    function showErrorDialog(boundary, errorInfo) {\n      var capturedError = {\n        componentStack: errorInfo.stack !== null ? errorInfo.stack : \"\",\n        error: errorInfo.value,\n        errorBoundary: boundary !== null && boundary.tag === ClassComponent ? boundary.stateNode : null\n      };\n      return ReactNativePrivateInterface.ReactFiberErrorDialog.showErrorDialog(capturedError);\n    }\n    function logCapturedError(boundary, errorInfo) {\n      try {\n        var logError = showErrorDialog(boundary, errorInfo);\n        if (logError === false) {\n          return;\n        }\n        var error = errorInfo.value;\n        if (true) {\n          var source = errorInfo.source;\n          var stack = errorInfo.stack;\n          var componentStack = stack !== null ? stack : \"\";\n          if (error != null && error._suppressLogging) {\n            if (boundary.tag === ClassComponent) {\n              return;\n            }\n            console[\"error\"](error);\n          }\n          var componentName = source ? getComponentNameFromFiber(source) : null;\n          var componentNameMessage = componentName ? \"The above error occurred in the <\" + componentName + \"> component:\" : \"The above error occurred in one of your React components:\";\n          var errorBoundaryMessage;\n          if (boundary.tag === HostRoot) {\n            errorBoundaryMessage = \"Consider adding an error boundary to your tree to customize error handling behavior.\\n\" + \"Visit https://reactjs.org/link/error-boundaries to learn more about error boundaries.\";\n          } else {\n            var errorBoundaryName = getComponentNameFromFiber(boundary) || \"Anonymous\";\n            errorBoundaryMessage = \"React will try to recreate this component tree from scratch \" + (\"using the error boundary you provided, \" + errorBoundaryName + \".\");\n          }\n          var combinedMessage = componentNameMessage + \"\\n\" + componentStack + \"\\n\\n\" + (\"\" + errorBoundaryMessage);\n          console[\"error\"](combinedMessage);\n        }\n      } catch (e) {\n        setTimeout(function () {\n          throw e;\n        });\n      }\n    }\n    function createRootErrorUpdate(fiber, errorInfo, lane) {\n      var update = createUpdate(lane);\n      update.tag = CaptureUpdate;\n      update.payload = {\n        element: null\n      };\n      var error = errorInfo.value;\n      update.callback = function () {\n        onUncaughtError(error);\n        logCapturedError(fiber, errorInfo);\n      };\n      return update;\n    }\n    function createClassErrorUpdate(fiber, errorInfo, lane) {\n      var update = createUpdate(lane);\n      update.tag = CaptureUpdate;\n      var getDerivedStateFromError = fiber.type.getDerivedStateFromError;\n      if (typeof getDerivedStateFromError === \"function\") {\n        var error$1 = errorInfo.value;\n        update.payload = function () {\n          return getDerivedStateFromError(error$1);\n        };\n        update.callback = function () {\n          {\n            markFailedErrorBoundaryForHotReloading(fiber);\n          }\n          logCapturedError(fiber, errorInfo);\n        };\n      }\n      var inst = fiber.stateNode;\n      if (inst !== null && typeof inst.componentDidCatch === \"function\") {\n        update.callback = function callback() {\n          {\n            markFailedErrorBoundaryForHotReloading(fiber);\n          }\n          logCapturedError(fiber, errorInfo);\n          if (typeof getDerivedStateFromError !== \"function\") {\n            markLegacyErrorBoundaryAsFailed(this);\n          }\n          var error$1 = errorInfo.value;\n          var stack = errorInfo.stack;\n          this.componentDidCatch(error$1, {\n            componentStack: stack !== null ? stack : \"\"\n          });\n          {\n            if (typeof getDerivedStateFromError !== \"function\") {\n              if (!includesSomeLane(fiber.lanes, SyncLane)) {\n                error(\"%s: Error boundaries should implement getDerivedStateFromError(). \" + \"In that method, return a state update to display an error message or fallback UI.\", getComponentNameFromFiber(fiber) || \"Unknown\");\n              }\n            }\n          }\n        };\n      }\n      return update;\n    }\n    function resetSuspendedComponent(sourceFiber, rootRenderLanes) {\n      var tag = sourceFiber.tag;\n      if ((sourceFiber.mode & ConcurrentMode) === NoMode && (tag === FunctionComponent || tag === ForwardRef || tag === SimpleMemoComponent)) {\n        var currentSource = sourceFiber.alternate;\n        if (currentSource) {\n          sourceFiber.updateQueue = currentSource.updateQueue;\n          sourceFiber.memoizedState = currentSource.memoizedState;\n          sourceFiber.lanes = currentSource.lanes;\n        } else {\n          sourceFiber.updateQueue = null;\n          sourceFiber.memoizedState = null;\n        }\n      }\n    }\n    function markSuspenseBoundaryShouldCapture(suspenseBoundary, returnFiber, sourceFiber, root, rootRenderLanes) {\n      if ((suspenseBoundary.mode & ConcurrentMode) === NoMode) {\n        if (suspenseBoundary === returnFiber) {\n          suspenseBoundary.flags |= ShouldCapture;\n        } else {\n          suspenseBoundary.flags |= DidCapture;\n          sourceFiber.flags |= ForceUpdateForLegacySuspense;\n          sourceFiber.flags &= ~(LifecycleEffectMask | Incomplete);\n          if (sourceFiber.tag === ClassComponent) {\n            var currentSourceFiber = sourceFiber.alternate;\n            if (currentSourceFiber === null) {\n              sourceFiber.tag = IncompleteClassComponent;\n            } else {\n              var update = createUpdate(SyncLane);\n              update.tag = ForceUpdate;\n              enqueueUpdate(sourceFiber, update, SyncLane);\n            }\n          }\n          sourceFiber.lanes = mergeLanes(sourceFiber.lanes, SyncLane);\n        }\n        return suspenseBoundary;\n      }\n      suspenseBoundary.flags |= ShouldCapture;\n      suspenseBoundary.lanes = rootRenderLanes;\n      return suspenseBoundary;\n    }\n    function throwException(root, returnFiber, sourceFiber, value, rootRenderLanes) {\n      sourceFiber.flags |= Incomplete;\n      {\n        if (isDevToolsPresent) {\n          restorePendingUpdaters(root, rootRenderLanes);\n        }\n      }\n      if (value !== null && typeof value === \"object\") {\n        if (typeof value.then === \"function\") {\n          var wakeable = value;\n          resetSuspendedComponent(sourceFiber);\n          var suspenseBoundary = getSuspenseHandler();\n          if (suspenseBoundary !== null) {\n            switch (suspenseBoundary.tag) {\n              case SuspenseComponent:\n                {\n                  if (sourceFiber.mode & ConcurrentMode) {\n                    if (getShellBoundary() === null) {\n                      renderDidSuspendDelayIfPossible();\n                    } else {\n                      var current = suspenseBoundary.alternate;\n                      if (current === null) {\n                        renderDidSuspend();\n                      }\n                    }\n                  }\n                  suspenseBoundary.flags &= ~ForceClientRender;\n                  markSuspenseBoundaryShouldCapture(suspenseBoundary, returnFiber, sourceFiber, root, rootRenderLanes);\n                  var isSuspenseyResource = wakeable === noopSuspenseyCommitThenable;\n                  if (isSuspenseyResource) {\n                    suspenseBoundary.flags |= ScheduleRetry;\n                  } else {\n                    var retryQueue = suspenseBoundary.updateQueue;\n                    if (retryQueue === null) {\n                      suspenseBoundary.updateQueue = new Set([wakeable]);\n                    } else {\n                      retryQueue.add(wakeable);\n                    }\n                    if (suspenseBoundary.mode & ConcurrentMode) {\n                      attachPingListener(root, wakeable, rootRenderLanes);\n                    }\n                  }\n                  return false;\n                }\n              case OffscreenComponent:\n                {\n                  if (suspenseBoundary.mode & ConcurrentMode) {\n                    suspenseBoundary.flags |= ShouldCapture;\n                    var _isSuspenseyResource = wakeable === noopSuspenseyCommitThenable;\n                    if (_isSuspenseyResource) {\n                      suspenseBoundary.flags |= ScheduleRetry;\n                    } else {\n                      var offscreenQueue = suspenseBoundary.updateQueue;\n                      if (offscreenQueue === null) {\n                        var newOffscreenQueue = {\n                          transitions: null,\n                          markerInstances: null,\n                          retryQueue: new Set([wakeable])\n                        };\n                        suspenseBoundary.updateQueue = newOffscreenQueue;\n                      } else {\n                        var _retryQueue = offscreenQueue.retryQueue;\n                        if (_retryQueue === null) {\n                          offscreenQueue.retryQueue = new Set([wakeable]);\n                        } else {\n                          _retryQueue.add(wakeable);\n                        }\n                      }\n                      attachPingListener(root, wakeable, rootRenderLanes);\n                    }\n                    return false;\n                  }\n                }\n            }\n            throw new Error(\"Unexpected Suspense handler tag (\" + suspenseBoundary.tag + \"). This \" + \"is a bug in React.\");\n          } else {\n            if (root.tag === ConcurrentRoot) {\n              attachPingListener(root, wakeable, rootRenderLanes);\n              renderDidSuspendDelayIfPossible();\n              return false;\n            } else {\n              var uncaughtSuspenseError = new Error(\"A component suspended while responding to synchronous input. This \" + \"will cause the UI to be replaced with a loading indicator. To \" + \"fix, updates that suspend should be wrapped \" + \"with startTransition.\");\n              value = uncaughtSuspenseError;\n            }\n          }\n        }\n      }\n      value = createCapturedValueAtFiber(value, sourceFiber);\n      renderDidError(value);\n      if (returnFiber === null) {\n        return true;\n      }\n      var workInProgress = returnFiber;\n      do {\n        switch (workInProgress.tag) {\n          case HostRoot:\n            {\n              var _errorInfo = value;\n              workInProgress.flags |= ShouldCapture;\n              var lane = pickArbitraryLane(rootRenderLanes);\n              workInProgress.lanes = mergeLanes(workInProgress.lanes, lane);\n              var update = createRootErrorUpdate(workInProgress, _errorInfo, lane);\n              enqueueCapturedUpdate(workInProgress, update);\n              return false;\n            }\n          case ClassComponent:\n            var errorInfo = value;\n            var ctor = workInProgress.type;\n            var instance = workInProgress.stateNode;\n            if ((workInProgress.flags & DidCapture) === NoFlags$1 && (typeof ctor.getDerivedStateFromError === \"function\" || instance !== null && typeof instance.componentDidCatch === \"function\" && !isAlreadyFailedLegacyErrorBoundary(instance))) {\n              workInProgress.flags |= ShouldCapture;\n              var _lane = pickArbitraryLane(rootRenderLanes);\n              workInProgress.lanes = mergeLanes(workInProgress.lanes, _lane);\n              var _update = createClassErrorUpdate(workInProgress, errorInfo, _lane);\n              enqueueCapturedUpdate(workInProgress, _update);\n              return false;\n            }\n            break;\n        }\n        workInProgress = workInProgress.return;\n      } while (workInProgress !== null);\n      return false;\n    }\n    var ReactCurrentOwner$2 = ReactSharedInternals.ReactCurrentOwner;\n    var SelectiveHydrationException = new Error(\"This is not a real error. It's an implementation detail of React's \" + \"selective hydration feature. If this leaks into userspace, it's a bug in \" + \"React. Please file an issue.\");\n    var didReceiveUpdate = false;\n    var didWarnAboutBadClass;\n    var didWarnAboutModulePatternComponent;\n    var didWarnAboutContextTypeOnFunctionComponent;\n    var didWarnAboutGetDerivedStateOnFunctionComponent;\n    var didWarnAboutFunctionRefs;\n    var didWarnAboutReassigningProps;\n    var didWarnAboutRevealOrder;\n    var didWarnAboutTailOptions;\n    var didWarnAboutDefaultPropsOnFunctionComponent;\n    {\n      didWarnAboutBadClass = {};\n      didWarnAboutModulePatternComponent = {};\n      didWarnAboutContextTypeOnFunctionComponent = {};\n      didWarnAboutGetDerivedStateOnFunctionComponent = {};\n      didWarnAboutFunctionRefs = {};\n      didWarnAboutReassigningProps = false;\n      didWarnAboutRevealOrder = {};\n      didWarnAboutTailOptions = {};\n      didWarnAboutDefaultPropsOnFunctionComponent = {};\n    }\n    function reconcileChildren(current, workInProgress, nextChildren, renderLanes) {\n      if (current === null) {\n        workInProgress.child = mountChildFibers(workInProgress, null, nextChildren, renderLanes);\n      } else {\n        workInProgress.child = reconcileChildFibers(workInProgress, current.child, nextChildren, renderLanes);\n      }\n    }\n    function forceUnmountCurrentAndReconcile(current, workInProgress, nextChildren, renderLanes) {\n      workInProgress.child = reconcileChildFibers(workInProgress, current.child, null, renderLanes);\n      workInProgress.child = reconcileChildFibers(workInProgress, null, nextChildren, renderLanes);\n    }\n    function updateForwardRef(current, workInProgress, Component, nextProps, renderLanes) {\n      {\n        if (workInProgress.type !== workInProgress.elementType) {\n          var innerPropTypes = Component.propTypes;\n          if (innerPropTypes) {\n            checkPropTypes(innerPropTypes, nextProps, \"prop\", getComponentNameFromType(Component));\n          }\n        }\n      }\n      var render = Component.render;\n      var ref = workInProgress.ref;\n      var nextChildren;\n      prepareToReadContext(workInProgress, renderLanes);\n      {\n        ReactCurrentOwner$2.current = workInProgress;\n        setIsRendering(true);\n        nextChildren = renderWithHooks(current, workInProgress, render, nextProps, ref, renderLanes);\n        setIsRendering(false);\n      }\n      if (current !== null && !didReceiveUpdate) {\n        bailoutHooks(current, workInProgress, renderLanes);\n        return bailoutOnAlreadyFinishedWork(current, workInProgress, renderLanes);\n      }\n      workInProgress.flags |= PerformedWork;\n      reconcileChildren(current, workInProgress, nextChildren, renderLanes);\n      return workInProgress.child;\n    }\n    function updateMemoComponent(current, workInProgress, Component, nextProps, renderLanes) {\n      if (current === null) {\n        var type = Component.type;\n        if (isSimpleFunctionComponent(type) && Component.compare === null && Component.defaultProps === undefined) {\n          var resolvedType = type;\n          {\n            resolvedType = resolveFunctionForHotReloading(type);\n          }\n          workInProgress.tag = SimpleMemoComponent;\n          workInProgress.type = resolvedType;\n          {\n            validateFunctionComponentInDev(workInProgress, type);\n          }\n          return updateSimpleMemoComponent(current, workInProgress, resolvedType, nextProps, renderLanes);\n        }\n        {\n          var innerPropTypes = type.propTypes;\n          if (innerPropTypes) {\n            checkPropTypes(innerPropTypes, nextProps, \"prop\", getComponentNameFromType(type));\n          }\n          if (Component.defaultProps !== undefined) {\n            var componentName = getComponentNameFromType(type) || \"Unknown\";\n            if (!didWarnAboutDefaultPropsOnFunctionComponent[componentName]) {\n              error(\"%s: Support for defaultProps will be removed from memo components \" + \"in a future major release. Use JavaScript default parameters instead.\", componentName);\n              didWarnAboutDefaultPropsOnFunctionComponent[componentName] = true;\n            }\n          }\n        }\n        var child = createFiberFromTypeAndProps(Component.type, null, nextProps, workInProgress, workInProgress.mode, renderLanes);\n        child.ref = workInProgress.ref;\n        child.return = workInProgress;\n        workInProgress.child = child;\n        return child;\n      }\n      {\n        var _type = Component.type;\n        var _innerPropTypes = _type.propTypes;\n        if (_innerPropTypes) {\n          checkPropTypes(_innerPropTypes, nextProps, \"prop\", getComponentNameFromType(_type));\n        }\n      }\n      var currentChild = current.child;\n      var hasScheduledUpdateOrContext = checkScheduledUpdateOrContext(current, renderLanes);\n      if (!hasScheduledUpdateOrContext) {\n        var prevProps = currentChild.memoizedProps;\n        var compare = Component.compare;\n        compare = compare !== null ? compare : shallowEqual;\n        if (compare(prevProps, nextProps) && current.ref === workInProgress.ref) {\n          return bailoutOnAlreadyFinishedWork(current, workInProgress, renderLanes);\n        }\n      }\n      workInProgress.flags |= PerformedWork;\n      var newChild = createWorkInProgress(currentChild, nextProps);\n      newChild.ref = workInProgress.ref;\n      newChild.return = workInProgress;\n      workInProgress.child = newChild;\n      return newChild;\n    }\n    function updateSimpleMemoComponent(current, workInProgress, Component, nextProps, renderLanes) {\n      {\n        if (workInProgress.type !== workInProgress.elementType) {\n          var outerMemoType = workInProgress.elementType;\n          if (outerMemoType.$$typeof === REACT_LAZY_TYPE) {\n            var lazyComponent = outerMemoType;\n            var payload = lazyComponent._payload;\n            var init = lazyComponent._init;\n            try {\n              outerMemoType = init(payload);\n            } catch (x) {\n              outerMemoType = null;\n            }\n            var outerPropTypes = outerMemoType && outerMemoType.propTypes;\n            if (outerPropTypes) {\n              checkPropTypes(outerPropTypes, nextProps, \"prop\", getComponentNameFromType(outerMemoType));\n            }\n          }\n        }\n      }\n      if (current !== null) {\n        var prevProps = current.memoizedProps;\n        if (shallowEqual(prevProps, nextProps) && current.ref === workInProgress.ref && workInProgress.type === current.type) {\n          didReceiveUpdate = false;\n          workInProgress.pendingProps = nextProps = prevProps;\n          if (!checkScheduledUpdateOrContext(current, renderLanes)) {\n            workInProgress.lanes = current.lanes;\n            return bailoutOnAlreadyFinishedWork(current, workInProgress, renderLanes);\n          } else if ((current.flags & ForceUpdateForLegacySuspense) !== NoFlags$1) {\n            didReceiveUpdate = true;\n          }\n        }\n      }\n      return updateFunctionComponent(current, workInProgress, Component, nextProps, renderLanes);\n    }\n    function updateOffscreenComponent(current, workInProgress, renderLanes) {\n      var nextProps = workInProgress.pendingProps;\n      var nextChildren = nextProps.children;\n      var nextIsDetached = (workInProgress.stateNode._pendingVisibility & OffscreenDetached) !== 0;\n      var prevState = current !== null ? current.memoizedState : null;\n      markRef$1(current, workInProgress);\n      if (nextProps.mode === \"hidden\" || enableLegacyHidden || nextIsDetached) {\n        var didSuspend = (workInProgress.flags & DidCapture) !== NoFlags$1;\n        if (didSuspend) {\n          var nextBaseLanes = prevState !== null ? mergeLanes(prevState.baseLanes, renderLanes) : renderLanes;\n          if (current !== null) {\n            var currentChild = workInProgress.child = current.child;\n            var currentChildLanes = NoLanes;\n            while (currentChild !== null) {\n              currentChildLanes = mergeLanes(mergeLanes(currentChildLanes, currentChild.lanes), currentChild.childLanes);\n              currentChild = currentChild.sibling;\n            }\n            var lanesWeJustAttempted = nextBaseLanes;\n            var remainingChildLanes = removeLanes(currentChildLanes, lanesWeJustAttempted);\n            workInProgress.childLanes = remainingChildLanes;\n          } else {\n            workInProgress.childLanes = NoLanes;\n            workInProgress.child = null;\n          }\n          return deferHiddenOffscreenComponent(current, workInProgress, nextBaseLanes);\n        }\n        if ((workInProgress.mode & ConcurrentMode) === NoMode) {\n          var nextState = {\n            baseLanes: NoLanes,\n            cachePool: null\n          };\n          workInProgress.memoizedState = nextState;\n          reuseHiddenContextOnStack(workInProgress);\n          pushOffscreenSuspenseHandler(workInProgress);\n        } else if (!includesSomeLane(renderLanes, OffscreenLane)) {\n          workInProgress.lanes = workInProgress.childLanes = laneToLanes(OffscreenLane);\n          var _nextBaseLanes = prevState !== null ? mergeLanes(prevState.baseLanes, renderLanes) : renderLanes;\n          return deferHiddenOffscreenComponent(current, workInProgress, _nextBaseLanes);\n        } else {\n          var _nextState = {\n            baseLanes: NoLanes,\n            cachePool: null\n          };\n          workInProgress.memoizedState = _nextState;\n          if (prevState !== null) {\n            pushHiddenContext(workInProgress, prevState);\n          } else {\n            reuseHiddenContextOnStack(workInProgress);\n          }\n          pushOffscreenSuspenseHandler(workInProgress);\n        }\n      } else {\n        if (prevState !== null) {\n          pushHiddenContext(workInProgress, prevState);\n          reuseSuspenseHandlerOnStack(workInProgress);\n          workInProgress.memoizedState = null;\n        } else {\n          reuseHiddenContextOnStack(workInProgress);\n          reuseSuspenseHandlerOnStack(workInProgress);\n        }\n      }\n      reconcileChildren(current, workInProgress, nextChildren, renderLanes);\n      return workInProgress.child;\n    }\n    function deferHiddenOffscreenComponent(current, workInProgress, nextBaseLanes, renderLanes) {\n      var nextState = {\n        baseLanes: nextBaseLanes,\n        cachePool: null\n      };\n      workInProgress.memoizedState = nextState;\n      reuseHiddenContextOnStack(workInProgress);\n      pushOffscreenSuspenseHandler(workInProgress);\n      return null;\n    }\n    function updateFragment(current, workInProgress, renderLanes) {\n      var nextChildren = workInProgress.pendingProps;\n      reconcileChildren(current, workInProgress, nextChildren, renderLanes);\n      return workInProgress.child;\n    }\n    function updateMode(current, workInProgress, renderLanes) {\n      var nextChildren = workInProgress.pendingProps.children;\n      reconcileChildren(current, workInProgress, nextChildren, renderLanes);\n      return workInProgress.child;\n    }\n    function updateProfiler(current, workInProgress, renderLanes) {\n      {\n        workInProgress.flags |= Update;\n        {\n          var stateNode = workInProgress.stateNode;\n          stateNode.effectDuration = 0;\n          stateNode.passiveEffectDuration = 0;\n        }\n      }\n      var nextProps = workInProgress.pendingProps;\n      var nextChildren = nextProps.children;\n      reconcileChildren(current, workInProgress, nextChildren, renderLanes);\n      return workInProgress.child;\n    }\n    function markRef$1(current, workInProgress) {\n      var ref = workInProgress.ref;\n      if (current === null && ref !== null || current !== null && current.ref !== ref) {\n        workInProgress.flags |= Ref;\n        workInProgress.flags |= RefStatic;\n      }\n    }\n    function updateFunctionComponent(current, workInProgress, Component, nextProps, renderLanes) {\n      {\n        if (workInProgress.type !== workInProgress.elementType) {\n          var innerPropTypes = Component.propTypes;\n          if (innerPropTypes) {\n            checkPropTypes(innerPropTypes, nextProps, \"prop\", getComponentNameFromType(Component));\n          }\n        }\n      }\n      var context;\n      {\n        var unmaskedContext = getUnmaskedContext(workInProgress, Component, true);\n        context = getMaskedContext(workInProgress, unmaskedContext);\n      }\n      var nextChildren;\n      prepareToReadContext(workInProgress, renderLanes);\n      {\n        ReactCurrentOwner$2.current = workInProgress;\n        setIsRendering(true);\n        nextChildren = renderWithHooks(current, workInProgress, Component, nextProps, context, renderLanes);\n        setIsRendering(false);\n      }\n      if (current !== null && !didReceiveUpdate) {\n        bailoutHooks(current, workInProgress, renderLanes);\n        return bailoutOnAlreadyFinishedWork(current, workInProgress, renderLanes);\n      }\n      workInProgress.flags |= PerformedWork;\n      reconcileChildren(current, workInProgress, nextChildren, renderLanes);\n      return workInProgress.child;\n    }\n    function replayFunctionComponent(current, workInProgress, nextProps, Component, secondArg, renderLanes) {\n      prepareToReadContext(workInProgress, renderLanes);\n      var nextChildren = replaySuspendedComponentWithHooks(current, workInProgress, Component, nextProps, secondArg);\n      if (current !== null && !didReceiveUpdate) {\n        bailoutHooks(current, workInProgress, renderLanes);\n        return bailoutOnAlreadyFinishedWork(current, workInProgress, renderLanes);\n      }\n      workInProgress.flags |= PerformedWork;\n      reconcileChildren(current, workInProgress, nextChildren, renderLanes);\n      return workInProgress.child;\n    }\n    function updateClassComponent(current, workInProgress, Component, nextProps, renderLanes) {\n      {\n        switch (shouldError(workInProgress)) {\n          case false:\n            {\n              var _instance = workInProgress.stateNode;\n              var ctor = workInProgress.type;\n              var tempInstance = new ctor(workInProgress.memoizedProps, _instance.context);\n              var state = tempInstance.state;\n              _instance.updater.enqueueSetState(_instance, state, null);\n              break;\n            }\n          case true:\n            {\n              workInProgress.flags |= DidCapture;\n              workInProgress.flags |= ShouldCapture;\n              var error$1 = new Error(\"Simulated error coming from DevTools\");\n              var lane = pickArbitraryLane(renderLanes);\n              workInProgress.lanes = mergeLanes(workInProgress.lanes, lane);\n              var update = createClassErrorUpdate(workInProgress, createCapturedValueAtFiber(error$1, workInProgress), lane);\n              enqueueCapturedUpdate(workInProgress, update);\n              break;\n            }\n        }\n        if (workInProgress.type !== workInProgress.elementType) {\n          var innerPropTypes = Component.propTypes;\n          if (innerPropTypes) {\n            checkPropTypes(innerPropTypes, nextProps, \"prop\", getComponentNameFromType(Component));\n          }\n        }\n      }\n      var hasContext;\n      if (isContextProvider(Component)) {\n        hasContext = true;\n        pushContextProvider(workInProgress);\n      } else {\n        hasContext = false;\n      }\n      prepareToReadContext(workInProgress, renderLanes);\n      var instance = workInProgress.stateNode;\n      var shouldUpdate;\n      if (instance === null) {\n        resetSuspendedCurrentOnMountInLegacyMode(current, workInProgress);\n        constructClassInstance(workInProgress, Component, nextProps);\n        mountClassInstance(workInProgress, Component, nextProps, renderLanes);\n        shouldUpdate = true;\n      } else if (current === null) {\n        shouldUpdate = resumeMountClassInstance(workInProgress, Component, nextProps, renderLanes);\n      } else {\n        shouldUpdate = updateClassInstance(current, workInProgress, Component, nextProps, renderLanes);\n      }\n      var nextUnitOfWork = finishClassComponent(current, workInProgress, Component, shouldUpdate, hasContext, renderLanes);\n      {\n        var inst = workInProgress.stateNode;\n        if (shouldUpdate && inst.props !== nextProps) {\n          if (!didWarnAboutReassigningProps) {\n            error(\"It looks like %s is reassigning its own `this.props` while rendering. \" + \"This is not supported and can lead to confusing bugs.\", getComponentNameFromFiber(workInProgress) || \"a component\");\n          }\n          didWarnAboutReassigningProps = true;\n        }\n      }\n      return nextUnitOfWork;\n    }\n    function finishClassComponent(current, workInProgress, Component, shouldUpdate, hasContext, renderLanes) {\n      markRef$1(current, workInProgress);\n      var didCaptureError = (workInProgress.flags & DidCapture) !== NoFlags$1;\n      if (!shouldUpdate && !didCaptureError) {\n        if (hasContext) {\n          invalidateContextProvider(workInProgress, Component, false);\n        }\n        return bailoutOnAlreadyFinishedWork(current, workInProgress, renderLanes);\n      }\n      var instance = workInProgress.stateNode;\n      ReactCurrentOwner$2.current = workInProgress;\n      var nextChildren;\n      if (didCaptureError && typeof Component.getDerivedStateFromError !== \"function\") {\n        nextChildren = null;\n        {\n          stopProfilerTimerIfRunning();\n        }\n      } else {\n        {\n          setIsRendering(true);\n          nextChildren = instance.render();\n          if (workInProgress.mode & StrictLegacyMode) {\n            setIsStrictModeForDevtools(true);\n            try {\n              instance.render();\n            } finally {\n              setIsStrictModeForDevtools(false);\n            }\n          }\n          setIsRendering(false);\n        }\n      }\n      workInProgress.flags |= PerformedWork;\n      if (current !== null && didCaptureError) {\n        forceUnmountCurrentAndReconcile(current, workInProgress, nextChildren, renderLanes);\n      } else {\n        reconcileChildren(current, workInProgress, nextChildren, renderLanes);\n      }\n      workInProgress.memoizedState = instance.state;\n      if (hasContext) {\n        invalidateContextProvider(workInProgress, Component, true);\n      }\n      return workInProgress.child;\n    }\n    function pushHostRootContext(workInProgress) {\n      var root = workInProgress.stateNode;\n      if (root.pendingContext) {\n        pushTopLevelContextObject(workInProgress, root.pendingContext, root.pendingContext !== root.context);\n      } else if (root.context) {\n        pushTopLevelContextObject(workInProgress, root.context, false);\n      }\n      pushHostContainer(workInProgress, root.containerInfo);\n    }\n    function updateHostRoot(current, workInProgress, renderLanes) {\n      pushHostRootContext(workInProgress);\n      if (current === null) {\n        throw new Error(\"Should have a current fiber. This is a bug in React.\");\n      }\n      var nextProps = workInProgress.pendingProps;\n      var prevState = workInProgress.memoizedState;\n      var prevChildren = prevState.element;\n      cloneUpdateQueue(current, workInProgress);\n      processUpdateQueue(workInProgress, nextProps, null, renderLanes);\n      var nextState = workInProgress.memoizedState;\n      suspendIfUpdateReadFromEntangledAsyncAction();\n      var nextChildren = nextState.element;\n      {\n        if (nextChildren === prevChildren) {\n          return bailoutOnAlreadyFinishedWork(current, workInProgress, renderLanes);\n        }\n        reconcileChildren(current, workInProgress, nextChildren, renderLanes);\n      }\n      return workInProgress.child;\n    }\n    function updateHostComponent$1(current, workInProgress, renderLanes) {\n      pushHostContext(workInProgress);\n      var nextProps = workInProgress.pendingProps;\n      var prevProps = current !== null ? current.memoizedProps : null;\n      var nextChildren = nextProps.children;\n      if (prevProps !== null && shouldSetTextContent()) {\n        workInProgress.flags |= ContentReset;\n      }\n      markRef$1(current, workInProgress);\n      reconcileChildren(current, workInProgress, nextChildren, renderLanes);\n      return workInProgress.child;\n    }\n    function updateHostText$1(current, workInProgress) {\n      return null;\n    }\n    function mountLazyComponent(_current, workInProgress, elementType, renderLanes) {\n      resetSuspendedCurrentOnMountInLegacyMode(_current, workInProgress);\n      var props = workInProgress.pendingProps;\n      var lazyComponent = elementType;\n      var payload = lazyComponent._payload;\n      var init = lazyComponent._init;\n      var Component = init(payload);\n      workInProgress.type = Component;\n      var resolvedTag = workInProgress.tag = resolveLazyComponentTag(Component);\n      var resolvedProps = resolveDefaultProps(Component, props);\n      var child;\n      switch (resolvedTag) {\n        case FunctionComponent:\n          {\n            {\n              validateFunctionComponentInDev(workInProgress, Component);\n              workInProgress.type = Component = resolveFunctionForHotReloading(Component);\n            }\n            child = updateFunctionComponent(null, workInProgress, Component, resolvedProps, renderLanes);\n            return child;\n          }\n        case ClassComponent:\n          {\n            {\n              workInProgress.type = Component = resolveClassForHotReloading(Component);\n            }\n            child = updateClassComponent(null, workInProgress, Component, resolvedProps, renderLanes);\n            return child;\n          }\n        case ForwardRef:\n          {\n            {\n              workInProgress.type = Component = resolveForwardRefForHotReloading(Component);\n            }\n            child = updateForwardRef(null, workInProgress, Component, resolvedProps, renderLanes);\n            return child;\n          }\n        case MemoComponent:\n          {\n            {\n              if (workInProgress.type !== workInProgress.elementType) {\n                var outerPropTypes = Component.propTypes;\n                if (outerPropTypes) {\n                  checkPropTypes(outerPropTypes, resolvedProps, \"prop\", getComponentNameFromType(Component));\n                }\n              }\n            }\n            child = updateMemoComponent(null, workInProgress, Component, resolveDefaultProps(Component.type, resolvedProps), renderLanes);\n            return child;\n          }\n      }\n      var hint = \"\";\n      {\n        if (Component !== null && typeof Component === \"object\" && Component.$$typeof === REACT_LAZY_TYPE) {\n          hint = \" Did you wrap a component in React.lazy() more than once?\";\n        }\n      }\n      throw new Error(\"Element type is invalid. Received a promise that resolves to: \" + Component + \". \" + (\"Lazy element type must resolve to a class or function.\" + hint));\n    }\n    function mountIncompleteClassComponent(_current, workInProgress, Component, nextProps, renderLanes) {\n      resetSuspendedCurrentOnMountInLegacyMode(_current, workInProgress);\n      workInProgress.tag = ClassComponent;\n      var hasContext;\n      if (isContextProvider(Component)) {\n        hasContext = true;\n        pushContextProvider(workInProgress);\n      } else {\n        hasContext = false;\n      }\n      prepareToReadContext(workInProgress, renderLanes);\n      constructClassInstance(workInProgress, Component, nextProps);\n      mountClassInstance(workInProgress, Component, nextProps, renderLanes);\n      return finishClassComponent(null, workInProgress, Component, true, hasContext, renderLanes);\n    }\n    function mountIndeterminateComponent(_current, workInProgress, Component, renderLanes) {\n      resetSuspendedCurrentOnMountInLegacyMode(_current, workInProgress);\n      var props = workInProgress.pendingProps;\n      var context;\n      {\n        var unmaskedContext = getUnmaskedContext(workInProgress, Component, false);\n        context = getMaskedContext(workInProgress, unmaskedContext);\n      }\n      prepareToReadContext(workInProgress, renderLanes);\n      var value;\n      {\n        if (Component.prototype && typeof Component.prototype.render === \"function\") {\n          var componentName = getComponentNameFromType(Component) || \"Unknown\";\n          if (!didWarnAboutBadClass[componentName]) {\n            error(\"The <%s /> component appears to have a render method, but doesn't extend React.Component. \" + \"This is likely to cause errors. Change %s to extend React.Component instead.\", componentName, componentName);\n            didWarnAboutBadClass[componentName] = true;\n          }\n        }\n        if (workInProgress.mode & StrictLegacyMode) {\n          ReactStrictModeWarnings.recordLegacyContextWarning(workInProgress, null);\n        }\n        setIsRendering(true);\n        ReactCurrentOwner$2.current = workInProgress;\n        value = renderWithHooks(null, workInProgress, Component, props, context, renderLanes);\n        setIsRendering(false);\n      }\n      workInProgress.flags |= PerformedWork;\n      {\n        if (typeof value === \"object\" && value !== null && typeof value.render === \"function\" && value.$$typeof === undefined) {\n          var _componentName = getComponentNameFromType(Component) || \"Unknown\";\n          if (!didWarnAboutModulePatternComponent[_componentName]) {\n            error(\"The <%s /> component appears to be a function component that returns a class instance. \" + \"Change %s to a class that extends React.Component instead. \" + \"If you can't use a class try assigning the prototype on the function as a workaround. \" + \"`%s.prototype = React.Component.prototype`. Don't use an arrow function since it \" + \"cannot be called with `new` by React.\", _componentName, _componentName, _componentName);\n            didWarnAboutModulePatternComponent[_componentName] = true;\n          }\n        }\n      }\n      if (typeof value === \"object\" && value !== null && typeof value.render === \"function\" && value.$$typeof === undefined) {\n        {\n          var _componentName2 = getComponentNameFromType(Component) || \"Unknown\";\n          if (!didWarnAboutModulePatternComponent[_componentName2]) {\n            error(\"The <%s /> component appears to be a function component that returns a class instance. \" + \"Change %s to a class that extends React.Component instead. \" + \"If you can't use a class try assigning the prototype on the function as a workaround. \" + \"`%s.prototype = React.Component.prototype`. Don't use an arrow function since it \" + \"cannot be called with `new` by React.\", _componentName2, _componentName2, _componentName2);\n            didWarnAboutModulePatternComponent[_componentName2] = true;\n          }\n        }\n        workInProgress.tag = ClassComponent;\n        workInProgress.memoizedState = null;\n        workInProgress.updateQueue = null;\n        var hasContext = false;\n        if (isContextProvider(Component)) {\n          hasContext = true;\n          pushContextProvider(workInProgress);\n        } else {\n          hasContext = false;\n        }\n        workInProgress.memoizedState = value.state !== null && value.state !== undefined ? value.state : null;\n        initializeUpdateQueue(workInProgress);\n        adoptClassInstance(workInProgress, value);\n        mountClassInstance(workInProgress, Component, props, renderLanes);\n        return finishClassComponent(null, workInProgress, Component, true, hasContext, renderLanes);\n      } else {\n        workInProgress.tag = FunctionComponent;\n        reconcileChildren(null, workInProgress, value, renderLanes);\n        {\n          validateFunctionComponentInDev(workInProgress, Component);\n        }\n        return workInProgress.child;\n      }\n    }\n    function validateFunctionComponentInDev(workInProgress, Component) {\n      {\n        if (Component) {\n          if (Component.childContextTypes) {\n            error(\"%s(...): childContextTypes cannot be defined on a function component.\", Component.displayName || Component.name || \"Component\");\n          }\n        }\n        if (workInProgress.ref !== null) {\n          var info = \"\";\n          var componentName = getComponentNameFromType(Component) || \"Unknown\";\n          var ownerName = getCurrentFiberOwnerNameInDevOrNull();\n          if (ownerName) {\n            info += \"\\n\\nCheck the render method of `\" + ownerName + \"`.\";\n          }\n          var warningKey = componentName + \"|\" + (ownerName || \"\");\n          if (!didWarnAboutFunctionRefs[warningKey]) {\n            didWarnAboutFunctionRefs[warningKey] = true;\n            error(\"Function components cannot be given refs. \" + \"Attempts to access this ref will fail. \" + \"Did you mean to use React.forwardRef()?%s\", info);\n          }\n        }\n        if (Component.defaultProps !== undefined) {\n          var _componentName3 = getComponentNameFromType(Component) || \"Unknown\";\n          if (!didWarnAboutDefaultPropsOnFunctionComponent[_componentName3]) {\n            error(\"%s: Support for defaultProps will be removed from function components \" + \"in a future major release. Use JavaScript default parameters instead.\", _componentName3);\n            didWarnAboutDefaultPropsOnFunctionComponent[_componentName3] = true;\n          }\n        }\n        if (typeof Component.getDerivedStateFromProps === \"function\") {\n          var _componentName4 = getComponentNameFromType(Component) || \"Unknown\";\n          if (!didWarnAboutGetDerivedStateOnFunctionComponent[_componentName4]) {\n            error(\"%s: Function components do not support getDerivedStateFromProps.\", _componentName4);\n            didWarnAboutGetDerivedStateOnFunctionComponent[_componentName4] = true;\n          }\n        }\n        if (typeof Component.contextType === \"object\" && Component.contextType !== null) {\n          var _componentName5 = getComponentNameFromType(Component) || \"Unknown\";\n          if (!didWarnAboutContextTypeOnFunctionComponent[_componentName5]) {\n            error(\"%s: Function components do not support contextType.\", _componentName5);\n            didWarnAboutContextTypeOnFunctionComponent[_componentName5] = true;\n          }\n        }\n      }\n    }\n    var SUSPENDED_MARKER = {\n      dehydrated: null,\n      treeContext: null,\n      retryLane: NoLane\n    };\n    function mountSuspenseOffscreenState(renderLanes) {\n      return {\n        baseLanes: renderLanes,\n        cachePool: getSuspendedCache()\n      };\n    }\n    function updateSuspenseOffscreenState(prevOffscreenState, renderLanes) {\n      var cachePool = null;\n      return {\n        baseLanes: mergeLanes(prevOffscreenState.baseLanes, renderLanes),\n        cachePool: cachePool\n      };\n    }\n    function shouldRemainOnFallback(current, workInProgress, renderLanes) {\n      if (current !== null) {\n        var suspenseState = current.memoizedState;\n        if (suspenseState === null) {\n          return false;\n        }\n      }\n      var suspenseContext = suspenseStackCursor.current;\n      return hasSuspenseListContext(suspenseContext, ForceSuspenseFallback);\n    }\n    function getRemainingWorkInPrimaryTree(current, primaryTreeDidDefer, renderLanes) {\n      var remainingLanes = current !== null ? removeLanes(current.childLanes, renderLanes) : NoLanes;\n      if (primaryTreeDidDefer) {\n        remainingLanes = mergeLanes(remainingLanes, peekDeferredLane());\n      }\n      return remainingLanes;\n    }\n    function updateSuspenseComponent(current, workInProgress, renderLanes) {\n      var nextProps = workInProgress.pendingProps;\n      {\n        if (shouldSuspend(workInProgress)) {\n          workInProgress.flags |= DidCapture;\n        }\n      }\n      var showFallback = false;\n      var didSuspend = (workInProgress.flags & DidCapture) !== NoFlags$1;\n      if (didSuspend || shouldRemainOnFallback(current)) {\n        showFallback = true;\n        workInProgress.flags &= ~DidCapture;\n      }\n      var didPrimaryChildrenDefer = (workInProgress.flags & DidDefer) !== NoFlags$1;\n      workInProgress.flags &= ~DidDefer;\n      if (current === null) {\n        var nextPrimaryChildren = nextProps.children;\n        var nextFallbackChildren = nextProps.fallback;\n        if (showFallback) {\n          pushFallbackTreeSuspenseHandler(workInProgress);\n          var fallbackFragment = mountSuspenseFallbackChildren(workInProgress, nextPrimaryChildren, nextFallbackChildren, renderLanes);\n          var primaryChildFragment = workInProgress.child;\n          primaryChildFragment.memoizedState = mountSuspenseOffscreenState(renderLanes);\n          primaryChildFragment.childLanes = getRemainingWorkInPrimaryTree(current, didPrimaryChildrenDefer, renderLanes);\n          workInProgress.memoizedState = SUSPENDED_MARKER;\n          return fallbackFragment;\n        } else {\n          pushPrimaryTreeSuspenseHandler(workInProgress);\n          return mountSuspensePrimaryChildren(workInProgress, nextPrimaryChildren);\n        }\n      } else {\n        var prevState = current.memoizedState;\n        if (prevState !== null) {\n          var _dehydrated = prevState.dehydrated;\n          if (_dehydrated !== null) {\n            return updateDehydratedSuspenseComponent(current, workInProgress, didSuspend, didPrimaryChildrenDefer, nextProps, _dehydrated, prevState, renderLanes);\n          }\n        }\n        if (showFallback) {\n          pushFallbackTreeSuspenseHandler(workInProgress);\n          var _nextFallbackChildren = nextProps.fallback;\n          var _nextPrimaryChildren = nextProps.children;\n          var fallbackChildFragment = updateSuspenseFallbackChildren(current, workInProgress, _nextPrimaryChildren, _nextFallbackChildren, renderLanes);\n          var _primaryChildFragment2 = workInProgress.child;\n          var prevOffscreenState = current.child.memoizedState;\n          _primaryChildFragment2.memoizedState = prevOffscreenState === null ? mountSuspenseOffscreenState(renderLanes) : updateSuspenseOffscreenState(prevOffscreenState, renderLanes);\n          _primaryChildFragment2.childLanes = getRemainingWorkInPrimaryTree(current, didPrimaryChildrenDefer, renderLanes);\n          workInProgress.memoizedState = SUSPENDED_MARKER;\n          return fallbackChildFragment;\n        } else {\n          pushPrimaryTreeSuspenseHandler(workInProgress);\n          var _nextPrimaryChildren2 = nextProps.children;\n          var _primaryChildFragment3 = updateSuspensePrimaryChildren(current, workInProgress, _nextPrimaryChildren2, renderLanes);\n          workInProgress.memoizedState = null;\n          return _primaryChildFragment3;\n        }\n      }\n    }\n    function mountSuspensePrimaryChildren(workInProgress, primaryChildren, renderLanes) {\n      var mode = workInProgress.mode;\n      var primaryChildProps = {\n        mode: \"visible\",\n        children: primaryChildren\n      };\n      var primaryChildFragment = mountWorkInProgressOffscreenFiber(primaryChildProps, mode);\n      primaryChildFragment.return = workInProgress;\n      workInProgress.child = primaryChildFragment;\n      return primaryChildFragment;\n    }\n    function mountSuspenseFallbackChildren(workInProgress, primaryChildren, fallbackChildren, renderLanes) {\n      var mode = workInProgress.mode;\n      var progressedPrimaryFragment = workInProgress.child;\n      var primaryChildProps = {\n        mode: \"hidden\",\n        children: primaryChildren\n      };\n      var primaryChildFragment;\n      var fallbackChildFragment;\n      if ((mode & ConcurrentMode) === NoMode && progressedPrimaryFragment !== null) {\n        primaryChildFragment = progressedPrimaryFragment;\n        primaryChildFragment.childLanes = NoLanes;\n        primaryChildFragment.pendingProps = primaryChildProps;\n        if (workInProgress.mode & ProfileMode) {\n          primaryChildFragment.actualDuration = 0;\n          primaryChildFragment.actualStartTime = -1;\n          primaryChildFragment.selfBaseDuration = 0;\n          primaryChildFragment.treeBaseDuration = 0;\n        }\n        fallbackChildFragment = createFiberFromFragment(fallbackChildren, mode, renderLanes, null);\n      } else {\n        primaryChildFragment = mountWorkInProgressOffscreenFiber(primaryChildProps, mode);\n        fallbackChildFragment = createFiberFromFragment(fallbackChildren, mode, renderLanes, null);\n      }\n      primaryChildFragment.return = workInProgress;\n      fallbackChildFragment.return = workInProgress;\n      primaryChildFragment.sibling = fallbackChildFragment;\n      workInProgress.child = primaryChildFragment;\n      return fallbackChildFragment;\n    }\n    function mountWorkInProgressOffscreenFiber(offscreenProps, mode, renderLanes) {\n      return createFiberFromOffscreen(offscreenProps, mode, NoLanes, null);\n    }\n    function updateWorkInProgressOffscreenFiber(current, offscreenProps) {\n      return createWorkInProgress(current, offscreenProps);\n    }\n    function updateSuspensePrimaryChildren(current, workInProgress, primaryChildren, renderLanes) {\n      var currentPrimaryChildFragment = current.child;\n      var currentFallbackChildFragment = currentPrimaryChildFragment.sibling;\n      var primaryChildFragment = updateWorkInProgressOffscreenFiber(currentPrimaryChildFragment, {\n        mode: \"visible\",\n        children: primaryChildren\n      });\n      if ((workInProgress.mode & ConcurrentMode) === NoMode) {\n        primaryChildFragment.lanes = renderLanes;\n      }\n      primaryChildFragment.return = workInProgress;\n      primaryChildFragment.sibling = null;\n      if (currentFallbackChildFragment !== null) {\n        var deletions = workInProgress.deletions;\n        if (deletions === null) {\n          workInProgress.deletions = [currentFallbackChildFragment];\n          workInProgress.flags |= ChildDeletion;\n        } else {\n          deletions.push(currentFallbackChildFragment);\n        }\n      }\n      workInProgress.child = primaryChildFragment;\n      return primaryChildFragment;\n    }\n    function updateSuspenseFallbackChildren(current, workInProgress, primaryChildren, fallbackChildren, renderLanes) {\n      var mode = workInProgress.mode;\n      var currentPrimaryChildFragment = current.child;\n      var currentFallbackChildFragment = currentPrimaryChildFragment.sibling;\n      var primaryChildProps = {\n        mode: \"hidden\",\n        children: primaryChildren\n      };\n      var primaryChildFragment;\n      if ((mode & ConcurrentMode) === NoMode && workInProgress.child !== currentPrimaryChildFragment) {\n        var progressedPrimaryFragment = workInProgress.child;\n        primaryChildFragment = progressedPrimaryFragment;\n        primaryChildFragment.childLanes = NoLanes;\n        primaryChildFragment.pendingProps = primaryChildProps;\n        if (workInProgress.mode & ProfileMode) {\n          primaryChildFragment.actualDuration = 0;\n          primaryChildFragment.actualStartTime = -1;\n          primaryChildFragment.selfBaseDuration = currentPrimaryChildFragment.selfBaseDuration;\n          primaryChildFragment.treeBaseDuration = currentPrimaryChildFragment.treeBaseDuration;\n        }\n        workInProgress.deletions = null;\n      } else {\n        primaryChildFragment = updateWorkInProgressOffscreenFiber(currentPrimaryChildFragment, primaryChildProps);\n        primaryChildFragment.subtreeFlags = currentPrimaryChildFragment.subtreeFlags & StaticMask;\n      }\n      var fallbackChildFragment;\n      if (currentFallbackChildFragment !== null) {\n        fallbackChildFragment = createWorkInProgress(currentFallbackChildFragment, fallbackChildren);\n      } else {\n        fallbackChildFragment = createFiberFromFragment(fallbackChildren, mode, renderLanes, null);\n        fallbackChildFragment.flags |= Placement;\n      }\n      fallbackChildFragment.return = workInProgress;\n      primaryChildFragment.return = workInProgress;\n      primaryChildFragment.sibling = fallbackChildFragment;\n      workInProgress.child = primaryChildFragment;\n      return fallbackChildFragment;\n    }\n    function retrySuspenseComponentWithoutHydrating(current, workInProgress, renderLanes, recoverableError) {\n      if (recoverableError !== null) {\n        queueHydrationError(recoverableError);\n      }\n      reconcileChildFibers(workInProgress, current.child, null, renderLanes);\n      var nextProps = workInProgress.pendingProps;\n      var primaryChildren = nextProps.children;\n      var primaryChildFragment = mountSuspensePrimaryChildren(workInProgress, primaryChildren);\n      primaryChildFragment.flags |= Placement;\n      workInProgress.memoizedState = null;\n      return primaryChildFragment;\n    }\n    function mountSuspenseFallbackAfterRetryWithoutHydrating(current, workInProgress, primaryChildren, fallbackChildren, renderLanes) {\n      var fiberMode = workInProgress.mode;\n      var primaryChildProps = {\n        mode: \"visible\",\n        children: primaryChildren\n      };\n      var primaryChildFragment = mountWorkInProgressOffscreenFiber(primaryChildProps, fiberMode);\n      var fallbackChildFragment = createFiberFromFragment(fallbackChildren, fiberMode, renderLanes, null);\n      fallbackChildFragment.flags |= Placement;\n      primaryChildFragment.return = workInProgress;\n      fallbackChildFragment.return = workInProgress;\n      primaryChildFragment.sibling = fallbackChildFragment;\n      workInProgress.child = primaryChildFragment;\n      if ((workInProgress.mode & ConcurrentMode) !== NoMode) {\n        reconcileChildFibers(workInProgress, current.child, null, renderLanes);\n      }\n      return fallbackChildFragment;\n    }\n    function updateDehydratedSuspenseComponent(current, workInProgress, didSuspend, didPrimaryChildrenDefer, nextProps, suspenseInstance, suspenseState, renderLanes) {\n      if (!didSuspend) {\n        pushPrimaryTreeSuspenseHandler(workInProgress);\n        if ((workInProgress.mode & ConcurrentMode) === NoMode) {\n          return retrySuspenseComponentWithoutHydrating(current, workInProgress, renderLanes, null);\n        }\n        if (isSuspenseInstanceFallback()) {\n          var digest;\n          var message, stack;\n          {\n            var _getSuspenseInstanceF = getSuspenseInstanceFallbackErrorDetails();\n            digest = _getSuspenseInstanceF.digest;\n            message = _getSuspenseInstanceF.message;\n            stack = _getSuspenseInstanceF.stack;\n          }\n          var capturedValue = null;\n          {\n            var error;\n            if (message) {\n              error = new Error(message);\n            } else {\n              error = new Error(\"The server could not finish this Suspense boundary, likely \" + \"due to an error during server rendering. Switched to \" + \"client rendering.\");\n            }\n            error.digest = digest;\n            capturedValue = createCapturedValue(error, digest, stack);\n          }\n          return retrySuspenseComponentWithoutHydrating(current, workInProgress, renderLanes, capturedValue);\n        }\n        var hasContextChanged = includesSomeLane(renderLanes, current.childLanes);\n        if (didReceiveUpdate || hasContextChanged) {\n          var root = getWorkInProgressRoot();\n          if (root !== null) {\n            var attemptHydrationAtLane = getBumpedLaneForHydration(root, renderLanes);\n            if (attemptHydrationAtLane !== NoLane && attemptHydrationAtLane !== suspenseState.retryLane) {\n              suspenseState.retryLane = attemptHydrationAtLane;\n              enqueueConcurrentRenderForLane(current, attemptHydrationAtLane);\n              scheduleUpdateOnFiber(root, current, attemptHydrationAtLane);\n              throw SelectiveHydrationException;\n            }\n          }\n          if (isSuspenseInstancePending()) ;else {\n            renderDidSuspendDelayIfPossible();\n          }\n          return retrySuspenseComponentWithoutHydrating(current, workInProgress, renderLanes, null);\n        } else if (isSuspenseInstancePending()) {\n          workInProgress.flags |= DidCapture;\n          workInProgress.child = current.child;\n          retryDehydratedSuspenseBoundary.bind(null, current);\n          registerSuspenseInstanceRetry();\n          return null;\n        } else {\n          var primaryChildren = nextProps.children;\n          var primaryChildFragment = mountSuspensePrimaryChildren(workInProgress, primaryChildren);\n          primaryChildFragment.flags |= Hydrating;\n          return primaryChildFragment;\n        }\n      } else {\n        if (workInProgress.flags & ForceClientRender) {\n          pushPrimaryTreeSuspenseHandler(workInProgress);\n          workInProgress.flags &= ~ForceClientRender;\n          var _capturedValue = createCapturedValue(new Error(\"There was an error while hydrating this Suspense boundary. \" + \"Switched to client rendering.\"));\n          return retrySuspenseComponentWithoutHydrating(current, workInProgress, renderLanes, _capturedValue);\n        } else if (workInProgress.memoizedState !== null) {\n          pushFallbackTreeSuspenseHandler(workInProgress);\n          workInProgress.child = current.child;\n          workInProgress.flags |= DidCapture;\n          return null;\n        } else {\n          pushFallbackTreeSuspenseHandler(workInProgress);\n          var nextPrimaryChildren = nextProps.children;\n          var nextFallbackChildren = nextProps.fallback;\n          var fallbackChildFragment = mountSuspenseFallbackAfterRetryWithoutHydrating(current, workInProgress, nextPrimaryChildren, nextFallbackChildren, renderLanes);\n          var _primaryChildFragment4 = workInProgress.child;\n          _primaryChildFragment4.memoizedState = mountSuspenseOffscreenState(renderLanes);\n          _primaryChildFragment4.childLanes = getRemainingWorkInPrimaryTree(current, didPrimaryChildrenDefer, renderLanes);\n          workInProgress.memoizedState = SUSPENDED_MARKER;\n          return fallbackChildFragment;\n        }\n      }\n    }\n    function scheduleSuspenseWorkOnFiber(fiber, renderLanes, propagationRoot) {\n      fiber.lanes = mergeLanes(fiber.lanes, renderLanes);\n      var alternate = fiber.alternate;\n      if (alternate !== null) {\n        alternate.lanes = mergeLanes(alternate.lanes, renderLanes);\n      }\n      scheduleContextWorkOnParentPath(fiber.return, renderLanes, propagationRoot);\n    }\n    function propagateSuspenseContextChange(workInProgress, firstChild, renderLanes) {\n      var node = firstChild;\n      while (node !== null) {\n        if (node.tag === SuspenseComponent) {\n          var state = node.memoizedState;\n          if (state !== null) {\n            scheduleSuspenseWorkOnFiber(node, renderLanes, workInProgress);\n          }\n        } else if (node.tag === SuspenseListComponent) {\n          scheduleSuspenseWorkOnFiber(node, renderLanes, workInProgress);\n        } else if (node.child !== null) {\n          node.child.return = node;\n          node = node.child;\n          continue;\n        }\n        if (node === workInProgress) {\n          return;\n        }\n        while (node.sibling === null) {\n          if (node.return === null || node.return === workInProgress) {\n            return;\n          }\n          node = node.return;\n        }\n        node.sibling.return = node.return;\n        node = node.sibling;\n      }\n    }\n    function findLastContentRow(firstChild) {\n      var row = firstChild;\n      var lastContentRow = null;\n      while (row !== null) {\n        var currentRow = row.alternate;\n        if (currentRow !== null && findFirstSuspended(currentRow) === null) {\n          lastContentRow = row;\n        }\n        row = row.sibling;\n      }\n      return lastContentRow;\n    }\n    function validateRevealOrder(revealOrder) {\n      {\n        if (revealOrder !== undefined && revealOrder !== \"forwards\" && revealOrder !== \"backwards\" && revealOrder !== \"together\" && !didWarnAboutRevealOrder[revealOrder]) {\n          didWarnAboutRevealOrder[revealOrder] = true;\n          if (typeof revealOrder === \"string\") {\n            switch (revealOrder.toLowerCase()) {\n              case \"together\":\n              case \"forwards\":\n              case \"backwards\":\n                {\n                  error('\"%s\" is not a valid value for revealOrder on <SuspenseList />. ' + 'Use lowercase \"%s\" instead.', revealOrder, revealOrder.toLowerCase());\n                  break;\n                }\n              case \"forward\":\n              case \"backward\":\n                {\n                  error('\"%s\" is not a valid value for revealOrder on <SuspenseList />. ' + 'React uses the -s suffix in the spelling. Use \"%ss\" instead.', revealOrder, revealOrder.toLowerCase());\n                  break;\n                }\n              default:\n                error('\"%s\" is not a supported revealOrder on <SuspenseList />. ' + 'Did you mean \"together\", \"forwards\" or \"backwards\"?', revealOrder);\n                break;\n            }\n          } else {\n            error(\"%s is not a supported value for revealOrder on <SuspenseList />. \" + 'Did you mean \"together\", \"forwards\" or \"backwards\"?', revealOrder);\n          }\n        }\n      }\n    }\n    function validateTailOptions(tailMode, revealOrder) {\n      {\n        if (tailMode !== undefined && !didWarnAboutTailOptions[tailMode]) {\n          if (tailMode !== \"collapsed\" && tailMode !== \"hidden\") {\n            didWarnAboutTailOptions[tailMode] = true;\n            error('\"%s\" is not a supported value for tail on <SuspenseList />. ' + 'Did you mean \"collapsed\" or \"hidden\"?', tailMode);\n          } else if (revealOrder !== \"forwards\" && revealOrder !== \"backwards\") {\n            didWarnAboutTailOptions[tailMode] = true;\n            error('<SuspenseList tail=\"%s\" /> is only valid if revealOrder is ' + '\"forwards\" or \"backwards\". ' + 'Did you mean to specify revealOrder=\"forwards\"?', tailMode);\n          }\n        }\n      }\n    }\n    function validateSuspenseListNestedChild(childSlot, index) {\n      {\n        var isAnArray = isArray(childSlot);\n        var isIterable = !isAnArray && typeof getIteratorFn(childSlot) === \"function\";\n        if (isAnArray || isIterable) {\n          var type = isAnArray ? \"array\" : \"iterable\";\n          error(\"A nested %s was passed to row #%s in <SuspenseList />. Wrap it in \" + \"an additional SuspenseList to configure its revealOrder: \" + \"<SuspenseList revealOrder=...> ... \" + \"<SuspenseList revealOrder=...>{%s}</SuspenseList> ... \" + \"</SuspenseList>\", type, index, type);\n          return false;\n        }\n      }\n      return true;\n    }\n    function validateSuspenseListChildren(children, revealOrder) {\n      {\n        if ((revealOrder === \"forwards\" || revealOrder === \"backwards\") && children !== undefined && children !== null && children !== false) {\n          if (isArray(children)) {\n            for (var i = 0; i < children.length; i++) {\n              if (!validateSuspenseListNestedChild(children[i], i)) {\n                return;\n              }\n            }\n          } else {\n            var iteratorFn = getIteratorFn(children);\n            if (typeof iteratorFn === \"function\") {\n              var childrenIterator = iteratorFn.call(children);\n              if (childrenIterator) {\n                var step = childrenIterator.next();\n                var _i = 0;\n                for (; !step.done; step = childrenIterator.next()) {\n                  if (!validateSuspenseListNestedChild(step.value, _i)) {\n                    return;\n                  }\n                  _i++;\n                }\n              }\n            } else {\n              error('A single row was passed to a <SuspenseList revealOrder=\"%s\" />. ' + \"This is not useful since it needs multiple rows. \" + \"Did you mean to pass multiple children or an array?\", revealOrder);\n            }\n          }\n        }\n      }\n    }\n    function initSuspenseListRenderState(workInProgress, isBackwards, tail, lastContentRow, tailMode) {\n      var renderState = workInProgress.memoizedState;\n      if (renderState === null) {\n        workInProgress.memoizedState = {\n          isBackwards: isBackwards,\n          rendering: null,\n          renderingStartTime: 0,\n          last: lastContentRow,\n          tail: tail,\n          tailMode: tailMode\n        };\n      } else {\n        renderState.isBackwards = isBackwards;\n        renderState.rendering = null;\n        renderState.renderingStartTime = 0;\n        renderState.last = lastContentRow;\n        renderState.tail = tail;\n        renderState.tailMode = tailMode;\n      }\n    }\n    function updateSuspenseListComponent(current, workInProgress, renderLanes) {\n      var nextProps = workInProgress.pendingProps;\n      var revealOrder = nextProps.revealOrder;\n      var tailMode = nextProps.tail;\n      var newChildren = nextProps.children;\n      validateRevealOrder(revealOrder);\n      validateTailOptions(tailMode, revealOrder);\n      validateSuspenseListChildren(newChildren, revealOrder);\n      reconcileChildren(current, workInProgress, newChildren, renderLanes);\n      var suspenseContext = suspenseStackCursor.current;\n      var shouldForceFallback = hasSuspenseListContext(suspenseContext, ForceSuspenseFallback);\n      if (shouldForceFallback) {\n        suspenseContext = setShallowSuspenseListContext(suspenseContext, ForceSuspenseFallback);\n        workInProgress.flags |= DidCapture;\n      } else {\n        var didSuspendBefore = current !== null && (current.flags & DidCapture) !== NoFlags$1;\n        if (didSuspendBefore) {\n          propagateSuspenseContextChange(workInProgress, workInProgress.child, renderLanes);\n        }\n        suspenseContext = setDefaultShallowSuspenseListContext(suspenseContext);\n      }\n      pushSuspenseListContext(workInProgress, suspenseContext);\n      if ((workInProgress.mode & ConcurrentMode) === NoMode) {\n        workInProgress.memoizedState = null;\n      } else {\n        switch (revealOrder) {\n          case \"forwards\":\n            {\n              var lastContentRow = findLastContentRow(workInProgress.child);\n              var tail;\n              if (lastContentRow === null) {\n                tail = workInProgress.child;\n                workInProgress.child = null;\n              } else {\n                tail = lastContentRow.sibling;\n                lastContentRow.sibling = null;\n              }\n              initSuspenseListRenderState(workInProgress, false, tail, lastContentRow, tailMode);\n              break;\n            }\n          case \"backwards\":\n            {\n              var _tail = null;\n              var row = workInProgress.child;\n              workInProgress.child = null;\n              while (row !== null) {\n                var currentRow = row.alternate;\n                if (currentRow !== null && findFirstSuspended(currentRow) === null) {\n                  workInProgress.child = row;\n                  break;\n                }\n                var nextRow = row.sibling;\n                row.sibling = _tail;\n                _tail = row;\n                row = nextRow;\n              }\n              initSuspenseListRenderState(workInProgress, true, _tail, null, tailMode);\n              break;\n            }\n          case \"together\":\n            {\n              initSuspenseListRenderState(workInProgress, false, null, null, undefined);\n              break;\n            }\n          default:\n            {\n              workInProgress.memoizedState = null;\n            }\n        }\n      }\n      return workInProgress.child;\n    }\n    function updatePortalComponent(current, workInProgress, renderLanes) {\n      pushHostContainer(workInProgress, workInProgress.stateNode.containerInfo);\n      var nextChildren = workInProgress.pendingProps;\n      if (current === null) {\n        workInProgress.child = reconcileChildFibers(workInProgress, null, nextChildren, renderLanes);\n      } else {\n        reconcileChildren(current, workInProgress, nextChildren, renderLanes);\n      }\n      return workInProgress.child;\n    }\n    var hasWarnedAboutUsingNoValuePropOnContextProvider = false;\n    function updateContextProvider(current, workInProgress, renderLanes) {\n      var providerType = workInProgress.type;\n      var context = providerType._context;\n      var newProps = workInProgress.pendingProps;\n      var oldProps = workInProgress.memoizedProps;\n      var newValue = newProps.value;\n      {\n        if (!(\"value\" in newProps)) {\n          if (!hasWarnedAboutUsingNoValuePropOnContextProvider) {\n            hasWarnedAboutUsingNoValuePropOnContextProvider = true;\n            error(\"The `value` prop is required for the `<Context.Provider>`. Did you misspell it or forget to pass it?\");\n          }\n        }\n        var providerPropTypes = workInProgress.type.propTypes;\n        if (providerPropTypes) {\n          checkPropTypes(providerPropTypes, newProps, \"prop\", \"Context.Provider\");\n        }\n      }\n      pushProvider(workInProgress, context, newValue);\n      {\n        if (oldProps !== null) {\n          var oldValue = oldProps.value;\n          if (objectIs(oldValue, newValue)) {\n            if (oldProps.children === newProps.children && !hasContextChanged()) {\n              return bailoutOnAlreadyFinishedWork(current, workInProgress, renderLanes);\n            }\n          } else {\n            propagateContextChange(workInProgress, context, renderLanes);\n          }\n        }\n      }\n      var newChildren = newProps.children;\n      reconcileChildren(current, workInProgress, newChildren, renderLanes);\n      return workInProgress.child;\n    }\n    var hasWarnedAboutUsingContextAsConsumer = false;\n    function updateContextConsumer(current, workInProgress, renderLanes) {\n      var context = workInProgress.type;\n      {\n        if (context._context === undefined) {\n          if (context !== context.Consumer) {\n            if (!hasWarnedAboutUsingContextAsConsumer) {\n              hasWarnedAboutUsingContextAsConsumer = true;\n              error(\"Rendering <Context> directly is not supported and will be removed in \" + \"a future major release. Did you mean to render <Context.Consumer> instead?\");\n            }\n          }\n        } else {\n          context = context._context;\n        }\n      }\n      var newProps = workInProgress.pendingProps;\n      var render = newProps.children;\n      {\n        if (typeof render !== \"function\") {\n          error(\"A context consumer was rendered with multiple children, or a child \" + \"that isn't a function. A context consumer expects a single child \" + \"that is a function. If you did pass a function, make sure there \" + \"is no trailing or leading whitespace around it.\");\n        }\n      }\n      prepareToReadContext(workInProgress, renderLanes);\n      var newValue = readContext(context);\n      var newChildren;\n      {\n        ReactCurrentOwner$2.current = workInProgress;\n        setIsRendering(true);\n        newChildren = render(newValue);\n        setIsRendering(false);\n      }\n      workInProgress.flags |= PerformedWork;\n      reconcileChildren(current, workInProgress, newChildren, renderLanes);\n      return workInProgress.child;\n    }\n    function markWorkInProgressReceivedUpdate() {\n      didReceiveUpdate = true;\n    }\n    function resetSuspendedCurrentOnMountInLegacyMode(current, workInProgress) {\n      if ((workInProgress.mode & ConcurrentMode) === NoMode) {\n        if (current !== null) {\n          current.alternate = null;\n          workInProgress.alternate = null;\n          workInProgress.flags |= Placement;\n        }\n      }\n    }\n    function bailoutOnAlreadyFinishedWork(current, workInProgress, renderLanes) {\n      if (current !== null) {\n        workInProgress.dependencies = current.dependencies;\n      }\n      {\n        stopProfilerTimerIfRunning();\n      }\n      markSkippedUpdateLanes(workInProgress.lanes);\n      if (!includesSomeLane(renderLanes, workInProgress.childLanes)) {\n        {\n          return null;\n        }\n      }\n      cloneChildFibers(current, workInProgress);\n      return workInProgress.child;\n    }\n    function remountFiber(current, oldWorkInProgress, newWorkInProgress) {\n      {\n        var returnFiber = oldWorkInProgress.return;\n        if (returnFiber === null) {\n          throw new Error(\"Cannot swap the root fiber.\");\n        }\n        current.alternate = null;\n        oldWorkInProgress.alternate = null;\n        newWorkInProgress.index = oldWorkInProgress.index;\n        newWorkInProgress.sibling = oldWorkInProgress.sibling;\n        newWorkInProgress.return = oldWorkInProgress.return;\n        newWorkInProgress.ref = oldWorkInProgress.ref;\n        if (oldWorkInProgress === returnFiber.child) {\n          returnFiber.child = newWorkInProgress;\n        } else {\n          var prevSibling = returnFiber.child;\n          if (prevSibling === null) {\n            throw new Error(\"Expected parent to have a child.\");\n          }\n          while (prevSibling.sibling !== oldWorkInProgress) {\n            prevSibling = prevSibling.sibling;\n            if (prevSibling === null) {\n              throw new Error(\"Expected to find the previous sibling.\");\n            }\n          }\n          prevSibling.sibling = newWorkInProgress;\n        }\n        var deletions = returnFiber.deletions;\n        if (deletions === null) {\n          returnFiber.deletions = [current];\n          returnFiber.flags |= ChildDeletion;\n        } else {\n          deletions.push(current);\n        }\n        newWorkInProgress.flags |= Placement;\n        return newWorkInProgress;\n      }\n    }\n    function checkScheduledUpdateOrContext(current, renderLanes) {\n      var updateLanes = current.lanes;\n      if (includesSomeLane(updateLanes, renderLanes)) {\n        return true;\n      }\n      return false;\n    }\n    function attemptEarlyBailoutIfNoScheduledUpdate(current, workInProgress, renderLanes) {\n      switch (workInProgress.tag) {\n        case HostRoot:\n          pushHostRootContext(workInProgress);\n          break;\n        case HostSingleton:\n        case HostComponent:\n          pushHostContext(workInProgress);\n          break;\n        case ClassComponent:\n          {\n            var Component = workInProgress.type;\n            if (isContextProvider(Component)) {\n              pushContextProvider(workInProgress);\n            }\n            break;\n          }\n        case HostPortal:\n          pushHostContainer(workInProgress, workInProgress.stateNode.containerInfo);\n          break;\n        case ContextProvider:\n          {\n            var newValue = workInProgress.memoizedProps.value;\n            var context = workInProgress.type._context;\n            pushProvider(workInProgress, context, newValue);\n            break;\n          }\n        case Profiler:\n          {\n            var hasChildWork = includesSomeLane(renderLanes, workInProgress.childLanes);\n            if (hasChildWork) {\n              workInProgress.flags |= Update;\n            }\n            {\n              var stateNode = workInProgress.stateNode;\n              stateNode.effectDuration = 0;\n              stateNode.passiveEffectDuration = 0;\n            }\n          }\n          break;\n        case SuspenseComponent:\n          {\n            var state = workInProgress.memoizedState;\n            if (state !== null) {\n              if (state.dehydrated !== null) {\n                pushPrimaryTreeSuspenseHandler(workInProgress);\n                workInProgress.flags |= DidCapture;\n                return null;\n              }\n              var primaryChildFragment = workInProgress.child;\n              var primaryChildLanes = primaryChildFragment.childLanes;\n              if (includesSomeLane(renderLanes, primaryChildLanes)) {\n                return updateSuspenseComponent(current, workInProgress, renderLanes);\n              } else {\n                pushPrimaryTreeSuspenseHandler(workInProgress);\n                var child = bailoutOnAlreadyFinishedWork(current, workInProgress, renderLanes);\n                if (child !== null) {\n                  return child.sibling;\n                } else {\n                  return null;\n                }\n              }\n            } else {\n              pushPrimaryTreeSuspenseHandler(workInProgress);\n            }\n            break;\n          }\n        case SuspenseListComponent:\n          {\n            var didSuspendBefore = (current.flags & DidCapture) !== NoFlags$1;\n            var _hasChildWork = includesSomeLane(renderLanes, workInProgress.childLanes);\n            if (didSuspendBefore) {\n              if (_hasChildWork) {\n                return updateSuspenseListComponent(current, workInProgress, renderLanes);\n              }\n              workInProgress.flags |= DidCapture;\n            }\n            var renderState = workInProgress.memoizedState;\n            if (renderState !== null) {\n              renderState.rendering = null;\n              renderState.tail = null;\n              renderState.lastEffect = null;\n            }\n            pushSuspenseListContext(workInProgress, suspenseStackCursor.current);\n            if (_hasChildWork) {\n              break;\n            } else {\n              return null;\n            }\n          }\n        case OffscreenComponent:\n        case LegacyHiddenComponent:\n          {\n            workInProgress.lanes = NoLanes;\n            return updateOffscreenComponent(current, workInProgress, renderLanes);\n          }\n      }\n      return bailoutOnAlreadyFinishedWork(current, workInProgress, renderLanes);\n    }\n    function beginWork$1(current, workInProgress, renderLanes) {\n      {\n        if (workInProgress._debugNeedsRemount && current !== null) {\n          return remountFiber(current, workInProgress, createFiberFromTypeAndProps(workInProgress.type, workInProgress.key, workInProgress.pendingProps, workInProgress._debugOwner || null, workInProgress.mode, workInProgress.lanes));\n        }\n      }\n      if (current !== null) {\n        var oldProps = current.memoizedProps;\n        var newProps = workInProgress.pendingProps;\n        if (oldProps !== newProps || hasContextChanged() || workInProgress.type !== current.type) {\n          didReceiveUpdate = true;\n        } else {\n          var hasScheduledUpdateOrContext = checkScheduledUpdateOrContext(current, renderLanes);\n          if (!hasScheduledUpdateOrContext && (workInProgress.flags & DidCapture) === NoFlags$1) {\n            didReceiveUpdate = false;\n            return attemptEarlyBailoutIfNoScheduledUpdate(current, workInProgress, renderLanes);\n          }\n          if ((current.flags & ForceUpdateForLegacySuspense) !== NoFlags$1) {\n            didReceiveUpdate = true;\n          } else {\n            didReceiveUpdate = false;\n          }\n        }\n      } else {\n        didReceiveUpdate = false;\n      }\n      workInProgress.lanes = NoLanes;\n      switch (workInProgress.tag) {\n        case IndeterminateComponent:\n          {\n            return mountIndeterminateComponent(current, workInProgress, workInProgress.type, renderLanes);\n          }\n        case LazyComponent:\n          {\n            var elementType = workInProgress.elementType;\n            return mountLazyComponent(current, workInProgress, elementType, renderLanes);\n          }\n        case FunctionComponent:\n          {\n            var Component = workInProgress.type;\n            var unresolvedProps = workInProgress.pendingProps;\n            var resolvedProps = workInProgress.elementType === Component ? unresolvedProps : resolveDefaultProps(Component, unresolvedProps);\n            return updateFunctionComponent(current, workInProgress, Component, resolvedProps, renderLanes);\n          }\n        case ClassComponent:\n          {\n            var _Component = workInProgress.type;\n            var _unresolvedProps = workInProgress.pendingProps;\n            var _resolvedProps = workInProgress.elementType === _Component ? _unresolvedProps : resolveDefaultProps(_Component, _unresolvedProps);\n            return updateClassComponent(current, workInProgress, _Component, _resolvedProps, renderLanes);\n          }\n        case HostRoot:\n          return updateHostRoot(current, workInProgress, renderLanes);\n        case HostHoistable:\n        case HostSingleton:\n        case HostComponent:\n          return updateHostComponent$1(current, workInProgress, renderLanes);\n        case HostText:\n          return updateHostText$1();\n        case SuspenseComponent:\n          return updateSuspenseComponent(current, workInProgress, renderLanes);\n        case HostPortal:\n          return updatePortalComponent(current, workInProgress, renderLanes);\n        case ForwardRef:\n          {\n            var type = workInProgress.type;\n            var _unresolvedProps2 = workInProgress.pendingProps;\n            var _resolvedProps2 = workInProgress.elementType === type ? _unresolvedProps2 : resolveDefaultProps(type, _unresolvedProps2);\n            return updateForwardRef(current, workInProgress, type, _resolvedProps2, renderLanes);\n          }\n        case Fragment:\n          return updateFragment(current, workInProgress, renderLanes);\n        case Mode:\n          return updateMode(current, workInProgress, renderLanes);\n        case Profiler:\n          return updateProfiler(current, workInProgress, renderLanes);\n        case ContextProvider:\n          return updateContextProvider(current, workInProgress, renderLanes);\n        case ContextConsumer:\n          return updateContextConsumer(current, workInProgress, renderLanes);\n        case MemoComponent:\n          {\n            var _type2 = workInProgress.type;\n            var _unresolvedProps3 = workInProgress.pendingProps;\n            var _resolvedProps3 = resolveDefaultProps(_type2, _unresolvedProps3);\n            {\n              if (workInProgress.type !== workInProgress.elementType) {\n                var outerPropTypes = _type2.propTypes;\n                if (outerPropTypes) {\n                  checkPropTypes(outerPropTypes, _resolvedProps3, \"prop\", getComponentNameFromType(_type2));\n                }\n              }\n            }\n            _resolvedProps3 = resolveDefaultProps(_type2.type, _resolvedProps3);\n            return updateMemoComponent(current, workInProgress, _type2, _resolvedProps3, renderLanes);\n          }\n        case SimpleMemoComponent:\n          {\n            return updateSimpleMemoComponent(current, workInProgress, workInProgress.type, workInProgress.pendingProps, renderLanes);\n          }\n        case IncompleteClassComponent:\n          {\n            var _Component2 = workInProgress.type;\n            var _unresolvedProps4 = workInProgress.pendingProps;\n            var _resolvedProps4 = workInProgress.elementType === _Component2 ? _unresolvedProps4 : resolveDefaultProps(_Component2, _unresolvedProps4);\n            return mountIncompleteClassComponent(current, workInProgress, _Component2, _resolvedProps4, renderLanes);\n          }\n        case SuspenseListComponent:\n          {\n            return updateSuspenseListComponent(current, workInProgress, renderLanes);\n          }\n        case ScopeComponent:\n          {\n            break;\n          }\n        case OffscreenComponent:\n          {\n            return updateOffscreenComponent(current, workInProgress, renderLanes);\n          }\n      }\n      throw new Error(\"Unknown unit of work tag (\" + workInProgress.tag + \"). This error is likely caused by a bug in \" + \"React. Please file an issue.\");\n    }\n    var valueCursor = createCursor(null);\n    var rendererCursorDEV;\n    {\n      rendererCursorDEV = createCursor(null);\n    }\n    var rendererSigil;\n    {\n      rendererSigil = {};\n    }\n    var currentlyRenderingFiber = null;\n    var lastContextDependency = null;\n    var lastFullyObservedContext = null;\n    var isDisallowedContextReadInDEV = false;\n    function resetContextDependencies() {\n      currentlyRenderingFiber = null;\n      lastContextDependency = null;\n      lastFullyObservedContext = null;\n      {\n        isDisallowedContextReadInDEV = false;\n      }\n    }\n    function enterDisallowedContextReadInDEV() {\n      {\n        isDisallowedContextReadInDEV = true;\n      }\n    }\n    function exitDisallowedContextReadInDEV() {\n      {\n        isDisallowedContextReadInDEV = false;\n      }\n    }\n    function pushProvider(providerFiber, context, nextValue) {\n      {\n        push(valueCursor, context._currentValue, providerFiber);\n        context._currentValue = nextValue;\n        {\n          push(rendererCursorDEV, context._currentRenderer, providerFiber);\n          if (context._currentRenderer !== undefined && context._currentRenderer !== null && context._currentRenderer !== rendererSigil) {\n            error(\"Detected multiple renderers concurrently rendering the \" + \"same context provider. This is currently unsupported.\");\n          }\n          context._currentRenderer = rendererSigil;\n        }\n      }\n    }\n    function popProvider(context, providerFiber) {\n      var currentValue = valueCursor.current;\n      {\n        context._currentValue = currentValue;\n        {\n          var currentRenderer = rendererCursorDEV.current;\n          pop(rendererCursorDEV, providerFiber);\n          context._currentRenderer = currentRenderer;\n        }\n      }\n      pop(valueCursor, providerFiber);\n    }\n    function scheduleContextWorkOnParentPath(parent, renderLanes, propagationRoot) {\n      var node = parent;\n      while (node !== null) {\n        var alternate = node.alternate;\n        if (!isSubsetOfLanes(node.childLanes, renderLanes)) {\n          node.childLanes = mergeLanes(node.childLanes, renderLanes);\n          if (alternate !== null) {\n            alternate.childLanes = mergeLanes(alternate.childLanes, renderLanes);\n          }\n        } else if (alternate !== null && !isSubsetOfLanes(alternate.childLanes, renderLanes)) {\n          alternate.childLanes = mergeLanes(alternate.childLanes, renderLanes);\n        } else ;\n        if (node === propagationRoot) {\n          break;\n        }\n        node = node.return;\n      }\n      {\n        if (node !== propagationRoot) {\n          error(\"Expected to find the propagation root when scheduling context work. \" + \"This error is likely caused by a bug in React. Please file an issue.\");\n        }\n      }\n    }\n    function propagateContextChange(workInProgress, context, renderLanes) {\n      {\n        propagateContextChange_eager(workInProgress, context, renderLanes);\n      }\n    }\n    function propagateContextChange_eager(workInProgress, context, renderLanes) {\n      var fiber = workInProgress.child;\n      if (fiber !== null) {\n        fiber.return = workInProgress;\n      }\n      while (fiber !== null) {\n        var nextFiber = void 0;\n        var list = fiber.dependencies;\n        if (list !== null) {\n          nextFiber = fiber.child;\n          var dependency = list.firstContext;\n          while (dependency !== null) {\n            if (dependency.context === context) {\n              if (fiber.tag === ClassComponent) {\n                var lane = pickArbitraryLane(renderLanes);\n                var update = createUpdate(lane);\n                update.tag = ForceUpdate;\n                var updateQueue = fiber.updateQueue;\n                if (updateQueue === null) ;else {\n                  var sharedQueue = updateQueue.shared;\n                  var pending = sharedQueue.pending;\n                  if (pending === null) {\n                    update.next = update;\n                  } else {\n                    update.next = pending.next;\n                    pending.next = update;\n                  }\n                  sharedQueue.pending = update;\n                }\n              }\n              fiber.lanes = mergeLanes(fiber.lanes, renderLanes);\n              var alternate = fiber.alternate;\n              if (alternate !== null) {\n                alternate.lanes = mergeLanes(alternate.lanes, renderLanes);\n              }\n              scheduleContextWorkOnParentPath(fiber.return, renderLanes, workInProgress);\n              list.lanes = mergeLanes(list.lanes, renderLanes);\n              break;\n            }\n            dependency = dependency.next;\n          }\n        } else if (fiber.tag === ContextProvider) {\n          nextFiber = fiber.type === workInProgress.type ? null : fiber.child;\n        } else if (fiber.tag === DehydratedFragment) {\n          var parentSuspense = fiber.return;\n          if (parentSuspense === null) {\n            throw new Error(\"We just came from a parent so we must have had a parent. This is a bug in React.\");\n          }\n          parentSuspense.lanes = mergeLanes(parentSuspense.lanes, renderLanes);\n          var _alternate = parentSuspense.alternate;\n          if (_alternate !== null) {\n            _alternate.lanes = mergeLanes(_alternate.lanes, renderLanes);\n          }\n          scheduleContextWorkOnParentPath(parentSuspense, renderLanes, workInProgress);\n          nextFiber = fiber.sibling;\n        } else {\n          nextFiber = fiber.child;\n        }\n        if (nextFiber !== null) {\n          nextFiber.return = fiber;\n        } else {\n          nextFiber = fiber;\n          while (nextFiber !== null) {\n            if (nextFiber === workInProgress) {\n              nextFiber = null;\n              break;\n            }\n            var sibling = nextFiber.sibling;\n            if (sibling !== null) {\n              sibling.return = nextFiber.return;\n              nextFiber = sibling;\n              break;\n            }\n            nextFiber = nextFiber.return;\n          }\n        }\n        fiber = nextFiber;\n      }\n    }\n    function prepareToReadContext(workInProgress, renderLanes) {\n      currentlyRenderingFiber = workInProgress;\n      lastContextDependency = null;\n      lastFullyObservedContext = null;\n      var dependencies = workInProgress.dependencies;\n      if (dependencies !== null) {\n        {\n          var firstContext = dependencies.firstContext;\n          if (firstContext !== null) {\n            if (includesSomeLane(dependencies.lanes, renderLanes)) {\n              markWorkInProgressReceivedUpdate();\n            }\n            dependencies.firstContext = null;\n          }\n        }\n      }\n    }\n    function readContext(context) {\n      {\n        if (isDisallowedContextReadInDEV) {\n          error(\"Context can only be read while React is rendering. \" + \"In classes, you can read it in the render method or getDerivedStateFromProps. \" + \"In function components, you can read it directly in the function body, but not \" + \"inside Hooks like useReducer() or useMemo().\");\n        }\n      }\n      return readContextForConsumer(currentlyRenderingFiber, context);\n    }\n    function readContextDuringReconcilation(consumer, context, renderLanes) {\n      if (currentlyRenderingFiber === null) {\n        prepareToReadContext(consumer, renderLanes);\n      }\n      return readContextForConsumer(consumer, context);\n    }\n    function readContextForConsumer(consumer, context) {\n      var value = context._currentValue;\n      if (lastFullyObservedContext === context) ;else {\n        var contextItem = {\n          context: context,\n          memoizedValue: value,\n          next: null\n        };\n        if (lastContextDependency === null) {\n          if (consumer === null) {\n            throw new Error(\"Context can only be read while React is rendering. \" + \"In classes, you can read it in the render method or getDerivedStateFromProps. \" + \"In function components, you can read it directly in the function body, but not \" + \"inside Hooks like useReducer() or useMemo().\");\n          }\n          lastContextDependency = contextItem;\n          consumer.dependencies = {\n            lanes: NoLanes,\n            firstContext: contextItem\n          };\n        } else {\n          lastContextDependency = lastContextDependency.next = contextItem;\n        }\n      }\n      return value;\n    }\n    var ReactCurrentBatchConfig$1 = ReactSharedInternals.ReactCurrentBatchConfig;\n    function requestCurrentTransition() {\n      var transition = ReactCurrentBatchConfig$1.transition;\n      if (transition !== null) {\n        transition._callbacks.add(handleAsyncAction);\n      }\n      return transition;\n    }\n    function handleAsyncAction(transition, thenable) {}\n    function notifyTransitionCallbacks(transition, returnValue) {\n      var callbacks = transition._callbacks;\n      callbacks.forEach(function (callback) {\n        return callback(transition, returnValue);\n      });\n    }\n    function getSuspendedCache() {\n      {\n        return null;\n      }\n    }\n    function markUpdate(workInProgress) {\n      workInProgress.flags |= Update;\n    }\n    function markRef(workInProgress) {\n      workInProgress.flags |= Ref | RefStatic;\n    }\n    function appendAllChildren(parent, workInProgress, needsVisibilityToggle, isHidden) {\n      {\n        var node = workInProgress.child;\n        while (node !== null) {\n          if (node.tag === HostComponent || node.tag === HostText) {\n            appendInitialChild(parent, node.stateNode);\n          } else if (node.tag === HostPortal || false) ;else if (node.child !== null) {\n            node.child.return = node;\n            node = node.child;\n            continue;\n          }\n          if (node === workInProgress) {\n            return;\n          }\n          while (node.sibling === null) {\n            if (node.return === null || node.return === workInProgress) {\n              return;\n            }\n            node = node.return;\n          }\n          node.sibling.return = node.return;\n          node = node.sibling;\n        }\n      }\n    }\n    function updateHostComponent(current, workInProgress, type, newProps, renderLanes) {\n      {\n        var oldProps = current.memoizedProps;\n        if (oldProps === newProps) {\n          return;\n        }\n        markUpdate(workInProgress);\n      }\n    }\n    function preloadInstanceAndSuspendIfNeeded(workInProgress, type, props, renderLanes) {\n      {\n        workInProgress.flags &= ~MaySuspendCommit;\n        return;\n      }\n    }\n    function scheduleRetryEffect(workInProgress, retryQueue) {\n      var wakeables = retryQueue;\n      if (wakeables !== null) {\n        workInProgress.flags |= Update;\n      } else {\n        if (workInProgress.flags & ScheduleRetry) {\n          var retryLane = workInProgress.tag !== OffscreenComponent ? claimNextRetryLane() : OffscreenLane;\n          workInProgress.lanes = mergeLanes(workInProgress.lanes, retryLane);\n        }\n      }\n    }\n    function updateHostText(current, workInProgress, oldText, newText) {\n      {\n        if (oldText !== newText) {\n          markUpdate(workInProgress);\n        }\n      }\n    }\n    function cutOffTailIfNeeded(renderState, hasRenderedATailFallback) {\n      switch (renderState.tailMode) {\n        case \"hidden\":\n          {\n            var tailNode = renderState.tail;\n            var lastTailNode = null;\n            while (tailNode !== null) {\n              if (tailNode.alternate !== null) {\n                lastTailNode = tailNode;\n              }\n              tailNode = tailNode.sibling;\n            }\n            if (lastTailNode === null) {\n              renderState.tail = null;\n            } else {\n              lastTailNode.sibling = null;\n            }\n            break;\n          }\n        case \"collapsed\":\n          {\n            var _tailNode = renderState.tail;\n            var _lastTailNode = null;\n            while (_tailNode !== null) {\n              if (_tailNode.alternate !== null) {\n                _lastTailNode = _tailNode;\n              }\n              _tailNode = _tailNode.sibling;\n            }\n            if (_lastTailNode === null) {\n              if (!hasRenderedATailFallback && renderState.tail !== null) {\n                renderState.tail.sibling = null;\n              } else {\n                renderState.tail = null;\n              }\n            } else {\n              _lastTailNode.sibling = null;\n            }\n            break;\n          }\n      }\n    }\n    function bubbleProperties(completedWork) {\n      var didBailout = completedWork.alternate !== null && completedWork.alternate.child === completedWork.child;\n      var newChildLanes = NoLanes;\n      var subtreeFlags = NoFlags$1;\n      if (!didBailout) {\n        if ((completedWork.mode & ProfileMode) !== NoMode) {\n          var actualDuration = completedWork.actualDuration;\n          var treeBaseDuration = completedWork.selfBaseDuration;\n          var child = completedWork.child;\n          while (child !== null) {\n            newChildLanes = mergeLanes(newChildLanes, mergeLanes(child.lanes, child.childLanes));\n            subtreeFlags |= child.subtreeFlags;\n            subtreeFlags |= child.flags;\n            actualDuration += child.actualDuration;\n            treeBaseDuration += child.treeBaseDuration;\n            child = child.sibling;\n          }\n          completedWork.actualDuration = actualDuration;\n          completedWork.treeBaseDuration = treeBaseDuration;\n        } else {\n          var _child = completedWork.child;\n          while (_child !== null) {\n            newChildLanes = mergeLanes(newChildLanes, mergeLanes(_child.lanes, _child.childLanes));\n            subtreeFlags |= _child.subtreeFlags;\n            subtreeFlags |= _child.flags;\n            _child.return = completedWork;\n            _child = _child.sibling;\n          }\n        }\n        completedWork.subtreeFlags |= subtreeFlags;\n      } else {\n        if ((completedWork.mode & ProfileMode) !== NoMode) {\n          var _treeBaseDuration = completedWork.selfBaseDuration;\n          var _child2 = completedWork.child;\n          while (_child2 !== null) {\n            newChildLanes = mergeLanes(newChildLanes, mergeLanes(_child2.lanes, _child2.childLanes));\n            subtreeFlags |= _child2.subtreeFlags & StaticMask;\n            subtreeFlags |= _child2.flags & StaticMask;\n            _treeBaseDuration += _child2.treeBaseDuration;\n            _child2 = _child2.sibling;\n          }\n          completedWork.treeBaseDuration = _treeBaseDuration;\n        } else {\n          var _child3 = completedWork.child;\n          while (_child3 !== null) {\n            newChildLanes = mergeLanes(newChildLanes, mergeLanes(_child3.lanes, _child3.childLanes));\n            subtreeFlags |= _child3.subtreeFlags & StaticMask;\n            subtreeFlags |= _child3.flags & StaticMask;\n            _child3.return = completedWork;\n            _child3 = _child3.sibling;\n          }\n        }\n        completedWork.subtreeFlags |= subtreeFlags;\n      }\n      completedWork.childLanes = newChildLanes;\n      return didBailout;\n    }\n    function completeDehydratedSuspenseBoundary(current, workInProgress, nextState) {\n      var wasHydrated = popHydrationState();\n      if (nextState !== null && nextState.dehydrated !== null) {\n        if (current === null) {\n          if (!wasHydrated) {\n            throw new Error(\"A dehydrated suspense component was completed without a hydrated node. \" + \"This is probably a bug in React.\");\n          }\n          prepareToHydrateHostSuspenseInstance();\n          bubbleProperties(workInProgress);\n          {\n            if ((workInProgress.mode & ProfileMode) !== NoMode) {\n              var isTimedOutSuspense = nextState !== null;\n              if (isTimedOutSuspense) {\n                var primaryChildFragment = workInProgress.child;\n                if (primaryChildFragment !== null) {\n                  workInProgress.treeBaseDuration -= primaryChildFragment.treeBaseDuration;\n                }\n              }\n            }\n          }\n          return false;\n        } else {\n          if ((workInProgress.flags & DidCapture) === NoFlags$1) {\n            workInProgress.memoizedState = null;\n          }\n          workInProgress.flags |= Update;\n          bubbleProperties(workInProgress);\n          {\n            if ((workInProgress.mode & ProfileMode) !== NoMode) {\n              var _isTimedOutSuspense = nextState !== null;\n              if (_isTimedOutSuspense) {\n                var _primaryChildFragment = workInProgress.child;\n                if (_primaryChildFragment !== null) {\n                  workInProgress.treeBaseDuration -= _primaryChildFragment.treeBaseDuration;\n                }\n              }\n            }\n          }\n          return false;\n        }\n      } else {\n        upgradeHydrationErrorsToRecoverable();\n        return true;\n      }\n    }\n    function completeWork(current, workInProgress, renderLanes) {\n      var newProps = workInProgress.pendingProps;\n      switch (workInProgress.tag) {\n        case IndeterminateComponent:\n        case LazyComponent:\n        case SimpleMemoComponent:\n        case FunctionComponent:\n        case ForwardRef:\n        case Fragment:\n        case Mode:\n        case Profiler:\n        case ContextConsumer:\n        case MemoComponent:\n          bubbleProperties(workInProgress);\n          return null;\n        case ClassComponent:\n          {\n            var Component = workInProgress.type;\n            if (isContextProvider(Component)) {\n              popContext(workInProgress);\n            }\n            bubbleProperties(workInProgress);\n            return null;\n          }\n        case HostRoot:\n          {\n            var fiberRoot = workInProgress.stateNode;\n            popHostContainer(workInProgress);\n            popTopLevelContextObject(workInProgress);\n            if (fiberRoot.pendingContext) {\n              fiberRoot.context = fiberRoot.pendingContext;\n              fiberRoot.pendingContext = null;\n            }\n            if (current === null || current.child === null) {\n              var wasHydrated = popHydrationState();\n              if (wasHydrated) {\n                markUpdate(workInProgress);\n              } else {\n                if (current !== null) {\n                  var prevState = current.memoizedState;\n                  if (!prevState.isDehydrated || (workInProgress.flags & ForceClientRender) !== NoFlags$1) {\n                    workInProgress.flags |= Snapshot;\n                    upgradeHydrationErrorsToRecoverable();\n                  }\n                }\n              }\n            }\n            bubbleProperties(workInProgress);\n            return null;\n          }\n        case HostHoistable:\n        case HostSingleton:\n        case HostComponent:\n          {\n            popHostContext(workInProgress);\n            var _type2 = workInProgress.type;\n            if (current !== null && workInProgress.stateNode != null) {\n              updateHostComponent(current, workInProgress, _type2, newProps);\n              if (current.ref !== workInProgress.ref) {\n                markRef(workInProgress);\n              }\n            } else {\n              if (!newProps) {\n                if (workInProgress.stateNode === null) {\n                  throw new Error(\"We must have new props for new mounts. This error is likely \" + \"caused by a bug in React. Please file an issue.\");\n                }\n                bubbleProperties(workInProgress);\n                return null;\n              }\n              var _currentHostContext = getHostContext();\n              var _wasHydrated2 = popHydrationState();\n              if (_wasHydrated2) {\n                prepareToHydrateHostInstance();\n              } else {\n                var _rootContainerInstance = getRootHostContainer();\n                var _instance3 = createInstance(_type2, newProps, _rootContainerInstance, _currentHostContext, workInProgress);\n                appendAllChildren(_instance3, workInProgress);\n                workInProgress.stateNode = _instance3;\n                if (finalizeInitialChildren(_instance3)) {\n                  markUpdate(workInProgress);\n                }\n              }\n              if (workInProgress.ref !== null) {\n                markRef(workInProgress);\n              }\n            }\n            bubbleProperties(workInProgress);\n            preloadInstanceAndSuspendIfNeeded(workInProgress);\n            return null;\n          }\n        case HostText:\n          {\n            var newText = newProps;\n            if (current && workInProgress.stateNode != null) {\n              var oldText = current.memoizedProps;\n              updateHostText(current, workInProgress, oldText, newText);\n            } else {\n              if (typeof newText !== \"string\") {\n                if (workInProgress.stateNode === null) {\n                  throw new Error(\"We must have new props for new mounts. This error is likely \" + \"caused by a bug in React. Please file an issue.\");\n                }\n              }\n              var _rootContainerInstance2 = getRootHostContainer();\n              var _currentHostContext2 = getHostContext();\n              var _wasHydrated3 = popHydrationState();\n              if (_wasHydrated3) {\n                if (prepareToHydrateHostTextInstance()) {\n                  markUpdate(workInProgress);\n                }\n              } else {\n                workInProgress.stateNode = createTextInstance(newText, _rootContainerInstance2, _currentHostContext2, workInProgress);\n              }\n            }\n            bubbleProperties(workInProgress);\n            return null;\n          }\n        case SuspenseComponent:\n          {\n            popSuspenseHandler(workInProgress);\n            var nextState = workInProgress.memoizedState;\n            if (current === null || current.memoizedState !== null && current.memoizedState.dehydrated !== null) {\n              var fallthroughToNormalSuspensePath = completeDehydratedSuspenseBoundary(current, workInProgress, nextState);\n              if (!fallthroughToNormalSuspensePath) {\n                if (workInProgress.flags & ForceClientRender) {\n                  return workInProgress;\n                } else {\n                  return null;\n                }\n              }\n            }\n            if ((workInProgress.flags & DidCapture) !== NoFlags$1) {\n              workInProgress.lanes = renderLanes;\n              if ((workInProgress.mode & ProfileMode) !== NoMode) {\n                transferActualDuration(workInProgress);\n              }\n              return workInProgress;\n            }\n            var nextDidTimeout = nextState !== null;\n            var prevDidTimeout = current !== null && current.memoizedState !== null;\n            if (nextDidTimeout !== prevDidTimeout) {\n              if (nextDidTimeout) {\n                var _offscreenFiber2 = workInProgress.child;\n                _offscreenFiber2.flags |= Visibility;\n              }\n            }\n            var retryQueue = workInProgress.updateQueue;\n            scheduleRetryEffect(workInProgress, retryQueue);\n            bubbleProperties(workInProgress);\n            {\n              if ((workInProgress.mode & ProfileMode) !== NoMode) {\n                if (nextDidTimeout) {\n                  var primaryChildFragment = workInProgress.child;\n                  if (primaryChildFragment !== null) {\n                    workInProgress.treeBaseDuration -= primaryChildFragment.treeBaseDuration;\n                  }\n                }\n              }\n            }\n            return null;\n          }\n        case HostPortal:\n          popHostContainer(workInProgress);\n          bubbleProperties(workInProgress);\n          return null;\n        case ContextProvider:\n          var context = workInProgress.type._context;\n          popProvider(context, workInProgress);\n          bubbleProperties(workInProgress);\n          return null;\n        case IncompleteClassComponent:\n          {\n            var _Component = workInProgress.type;\n            if (isContextProvider(_Component)) {\n              popContext(workInProgress);\n            }\n            bubbleProperties(workInProgress);\n            return null;\n          }\n        case SuspenseListComponent:\n          {\n            popSuspenseListContext(workInProgress);\n            var renderState = workInProgress.memoizedState;\n            if (renderState === null) {\n              bubbleProperties(workInProgress);\n              return null;\n            }\n            var didSuspendAlready = (workInProgress.flags & DidCapture) !== NoFlags$1;\n            var renderedTail = renderState.rendering;\n            if (renderedTail === null) {\n              if (!didSuspendAlready) {\n                var cannotBeSuspended = renderHasNotSuspendedYet() && (current === null || (current.flags & DidCapture) === NoFlags$1);\n                if (!cannotBeSuspended) {\n                  var row = workInProgress.child;\n                  while (row !== null) {\n                    var suspended = findFirstSuspended(row);\n                    if (suspended !== null) {\n                      didSuspendAlready = true;\n                      workInProgress.flags |= DidCapture;\n                      cutOffTailIfNeeded(renderState, false);\n                      var _retryQueue = suspended.updateQueue;\n                      workInProgress.updateQueue = _retryQueue;\n                      scheduleRetryEffect(workInProgress, _retryQueue);\n                      workInProgress.subtreeFlags = NoFlags$1;\n                      resetChildFibers(workInProgress, renderLanes);\n                      pushSuspenseListContext(workInProgress, setShallowSuspenseListContext(suspenseStackCursor.current, ForceSuspenseFallback));\n                      return workInProgress.child;\n                    }\n                    row = row.sibling;\n                  }\n                }\n                if (renderState.tail !== null && now$1() > getRenderTargetTime()) {\n                  workInProgress.flags |= DidCapture;\n                  didSuspendAlready = true;\n                  cutOffTailIfNeeded(renderState, false);\n                  workInProgress.lanes = SomeRetryLane;\n                }\n              } else {\n                cutOffTailIfNeeded(renderState, false);\n              }\n            } else {\n              if (!didSuspendAlready) {\n                var _suspended = findFirstSuspended(renderedTail);\n                if (_suspended !== null) {\n                  workInProgress.flags |= DidCapture;\n                  didSuspendAlready = true;\n                  var _retryQueue2 = _suspended.updateQueue;\n                  workInProgress.updateQueue = _retryQueue2;\n                  scheduleRetryEffect(workInProgress, _retryQueue2);\n                  cutOffTailIfNeeded(renderState, true);\n                  if (renderState.tail === null && renderState.tailMode === \"hidden\" && !renderedTail.alternate && !getIsHydrating()) {\n                    bubbleProperties(workInProgress);\n                    return null;\n                  }\n                } else if (now$1() * 2 - renderState.renderingStartTime > getRenderTargetTime() && renderLanes !== OffscreenLane) {\n                  workInProgress.flags |= DidCapture;\n                  didSuspendAlready = true;\n                  cutOffTailIfNeeded(renderState, false);\n                  workInProgress.lanes = SomeRetryLane;\n                }\n              }\n              if (renderState.isBackwards) {\n                renderedTail.sibling = workInProgress.child;\n                workInProgress.child = renderedTail;\n              } else {\n                var previousSibling = renderState.last;\n                if (previousSibling !== null) {\n                  previousSibling.sibling = renderedTail;\n                } else {\n                  workInProgress.child = renderedTail;\n                }\n                renderState.last = renderedTail;\n              }\n            }\n            if (renderState.tail !== null) {\n              var next = renderState.tail;\n              renderState.rendering = next;\n              renderState.tail = next.sibling;\n              renderState.renderingStartTime = now$1();\n              next.sibling = null;\n              var suspenseContext = suspenseStackCursor.current;\n              if (didSuspendAlready) {\n                suspenseContext = setShallowSuspenseListContext(suspenseContext, ForceSuspenseFallback);\n              } else {\n                suspenseContext = setDefaultShallowSuspenseListContext(suspenseContext);\n              }\n              pushSuspenseListContext(workInProgress, suspenseContext);\n              return next;\n            }\n            bubbleProperties(workInProgress);\n            return null;\n          }\n        case ScopeComponent:\n          {\n            break;\n          }\n        case OffscreenComponent:\n        case LegacyHiddenComponent:\n          {\n            popSuspenseHandler(workInProgress);\n            popHiddenContext(workInProgress);\n            var _nextState = workInProgress.memoizedState;\n            var nextIsHidden = _nextState !== null;\n            {\n              if (current !== null) {\n                var _prevState = current.memoizedState;\n                var prevIsHidden = _prevState !== null;\n                if (prevIsHidden !== nextIsHidden) {\n                  workInProgress.flags |= Visibility;\n                }\n              } else {\n                if (nextIsHidden) {\n                  workInProgress.flags |= Visibility;\n                }\n              }\n            }\n            if (!nextIsHidden || (workInProgress.mode & ConcurrentMode) === NoMode) {\n              bubbleProperties(workInProgress);\n            } else {\n              if (includesSomeLane(renderLanes, OffscreenLane) && (workInProgress.flags & DidCapture) === NoLanes) {\n                bubbleProperties(workInProgress);\n                if (workInProgress.subtreeFlags & (Placement | Update)) {\n                  workInProgress.flags |= Visibility;\n                }\n              }\n            }\n            var offscreenQueue = workInProgress.updateQueue;\n            if (offscreenQueue !== null) {\n              var _retryQueue3 = offscreenQueue.retryQueue;\n              scheduleRetryEffect(workInProgress, _retryQueue3);\n            }\n            return null;\n          }\n        case CacheComponent:\n          {\n            return null;\n          }\n        case TracingMarkerComponent:\n          {\n            return null;\n          }\n      }\n      throw new Error(\"Unknown unit of work tag (\" + workInProgress.tag + \"). This error is likely caused by a bug in \" + \"React. Please file an issue.\");\n    }\n    function unwindWork(current, workInProgress, renderLanes) {\n      switch (workInProgress.tag) {\n        case ClassComponent:\n          {\n            var Component = workInProgress.type;\n            if (isContextProvider(Component)) {\n              popContext(workInProgress);\n            }\n            var flags = workInProgress.flags;\n            if (flags & ShouldCapture) {\n              workInProgress.flags = flags & ~ShouldCapture | DidCapture;\n              if ((workInProgress.mode & ProfileMode) !== NoMode) {\n                transferActualDuration(workInProgress);\n              }\n              return workInProgress;\n            }\n            return null;\n          }\n        case HostRoot:\n          {\n            popHostContainer(workInProgress);\n            popTopLevelContextObject(workInProgress);\n            var _flags = workInProgress.flags;\n            if ((_flags & ShouldCapture) !== NoFlags$1 && (_flags & DidCapture) === NoFlags$1) {\n              workInProgress.flags = _flags & ~ShouldCapture | DidCapture;\n              return workInProgress;\n            }\n            return null;\n          }\n        case HostHoistable:\n        case HostSingleton:\n        case HostComponent:\n          {\n            popHostContext(workInProgress);\n            return null;\n          }\n        case SuspenseComponent:\n          {\n            popSuspenseHandler(workInProgress);\n            var suspenseState = workInProgress.memoizedState;\n            if (suspenseState !== null && suspenseState.dehydrated !== null) {\n              if (workInProgress.alternate === null) {\n                throw new Error(\"Threw in newly mounted dehydrated component. This is likely a bug in \" + \"React. Please file an issue.\");\n              }\n            }\n            var _flags2 = workInProgress.flags;\n            if (_flags2 & ShouldCapture) {\n              workInProgress.flags = _flags2 & ~ShouldCapture | DidCapture;\n              if ((workInProgress.mode & ProfileMode) !== NoMode) {\n                transferActualDuration(workInProgress);\n              }\n              return workInProgress;\n            }\n            return null;\n          }\n        case SuspenseListComponent:\n          {\n            popSuspenseListContext(workInProgress);\n            return null;\n          }\n        case HostPortal:\n          popHostContainer(workInProgress);\n          return null;\n        case ContextProvider:\n          var context = workInProgress.type._context;\n          popProvider(context, workInProgress);\n          return null;\n        case OffscreenComponent:\n        case LegacyHiddenComponent:\n          {\n            popSuspenseHandler(workInProgress);\n            popHiddenContext(workInProgress);\n            var _flags3 = workInProgress.flags;\n            if (_flags3 & ShouldCapture) {\n              workInProgress.flags = _flags3 & ~ShouldCapture | DidCapture;\n              if ((workInProgress.mode & ProfileMode) !== NoMode) {\n                transferActualDuration(workInProgress);\n              }\n              return workInProgress;\n            }\n            return null;\n          }\n        case CacheComponent:\n          return null;\n        case TracingMarkerComponent:\n          return null;\n        default:\n          return null;\n      }\n    }\n    function unwindInterruptedWork(current, interruptedWork, renderLanes) {\n      switch (interruptedWork.tag) {\n        case ClassComponent:\n          {\n            var childContextTypes = interruptedWork.type.childContextTypes;\n            if (childContextTypes !== null && childContextTypes !== undefined) {\n              popContext(interruptedWork);\n            }\n            break;\n          }\n        case HostRoot:\n          {\n            popHostContainer(interruptedWork);\n            popTopLevelContextObject(interruptedWork);\n            break;\n          }\n        case HostHoistable:\n        case HostSingleton:\n        case HostComponent:\n          {\n            popHostContext(interruptedWork);\n            break;\n          }\n        case HostPortal:\n          popHostContainer(interruptedWork);\n          break;\n        case SuspenseComponent:\n          popSuspenseHandler(interruptedWork);\n          break;\n        case SuspenseListComponent:\n          popSuspenseListContext(interruptedWork);\n          break;\n        case ContextProvider:\n          var context = interruptedWork.type._context;\n          popProvider(context, interruptedWork);\n          break;\n        case OffscreenComponent:\n        case LegacyHiddenComponent:\n          popSuspenseHandler(interruptedWork);\n          popHiddenContext(interruptedWork);\n          break;\n      }\n    }\n    var didWarnAboutUndefinedSnapshotBeforeUpdate = null;\n    {\n      didWarnAboutUndefinedSnapshotBeforeUpdate = new Set();\n    }\n    var offscreenSubtreeIsHidden = false;\n    var offscreenSubtreeWasHidden = false;\n    var PossiblyWeakSet = typeof WeakSet === \"function\" ? WeakSet : Set;\n    var nextEffect = null;\n    var inProgressLanes = null;\n    var inProgressRoot = null;\n    function shouldProfile(current) {\n      return (current.mode & ProfileMode) !== NoMode && (getExecutionContext() & CommitContext) !== NoContext;\n    }\n    function reportUncaughtErrorInDEV(error) {\n      {\n        invokeGuardedCallback(null, function () {\n          throw error;\n        });\n        clearCaughtError();\n      }\n    }\n    function callComponentWillUnmountWithTimer(current, instance) {\n      instance.props = current.memoizedProps;\n      instance.state = current.memoizedState;\n      if (shouldProfile(current)) {\n        try {\n          startLayoutEffectTimer();\n          instance.componentWillUnmount();\n        } finally {\n          recordLayoutEffectDuration(current);\n        }\n      } else {\n        instance.componentWillUnmount();\n      }\n    }\n    function safelyCallComponentWillUnmount(current, nearestMountedAncestor, instance) {\n      try {\n        callComponentWillUnmountWithTimer(current, instance);\n      } catch (error) {\n        captureCommitPhaseError(current, nearestMountedAncestor, error);\n      }\n    }\n    function safelyAttachRef(current, nearestMountedAncestor) {\n      try {\n        commitAttachRef(current);\n      } catch (error) {\n        captureCommitPhaseError(current, nearestMountedAncestor, error);\n      }\n    }\n    function safelyDetachRef(current, nearestMountedAncestor) {\n      var ref = current.ref;\n      var refCleanup = current.refCleanup;\n      if (ref !== null) {\n        if (typeof refCleanup === \"function\") {\n          try {\n            if (shouldProfile(current)) {\n              try {\n                startLayoutEffectTimer();\n                refCleanup();\n              } finally {\n                recordLayoutEffectDuration(current);\n              }\n            } else {\n              refCleanup();\n            }\n          } catch (error) {\n            captureCommitPhaseError(current, nearestMountedAncestor, error);\n          } finally {\n            current.refCleanup = null;\n            var finishedWork = current.alternate;\n            if (finishedWork != null) {\n              finishedWork.refCleanup = null;\n            }\n          }\n        } else if (typeof ref === \"function\") {\n          var retVal;\n          try {\n            if (shouldProfile(current)) {\n              try {\n                startLayoutEffectTimer();\n                retVal = ref(null);\n              } finally {\n                recordLayoutEffectDuration(current);\n              }\n            } else {\n              retVal = ref(null);\n            }\n          } catch (error) {\n            captureCommitPhaseError(current, nearestMountedAncestor, error);\n          }\n          {\n            if (typeof retVal === \"function\") {\n              error(\"Unexpected return value from a callback ref in %s. \" + \"A callback ref should not return a function.\", getComponentNameFromFiber(current));\n            }\n          }\n        } else {\n          ref.current = null;\n        }\n      }\n    }\n    function safelyCallDestroy(current, nearestMountedAncestor, destroy) {\n      try {\n        destroy();\n      } catch (error) {\n        captureCommitPhaseError(current, nearestMountedAncestor, error);\n      }\n    }\n    var shouldFireAfterActiveInstanceBlur = false;\n    function commitBeforeMutationEffects(root, firstChild) {\n      nextEffect = firstChild;\n      commitBeforeMutationEffects_begin();\n      var shouldFire = shouldFireAfterActiveInstanceBlur;\n      shouldFireAfterActiveInstanceBlur = false;\n      return shouldFire;\n    }\n    function commitBeforeMutationEffects_begin() {\n      while (nextEffect !== null) {\n        var fiber = nextEffect;\n        var child = fiber.child;\n        if ((fiber.subtreeFlags & BeforeMutationMask) !== NoFlags$1 && child !== null) {\n          child.return = fiber;\n          nextEffect = child;\n        } else {\n          commitBeforeMutationEffects_complete();\n        }\n      }\n    }\n    function commitBeforeMutationEffects_complete() {\n      while (nextEffect !== null) {\n        var fiber = nextEffect;\n        setCurrentFiber(fiber);\n        try {\n          commitBeforeMutationEffectsOnFiber(fiber);\n        } catch (error) {\n          captureCommitPhaseError(fiber, fiber.return, error);\n        }\n        resetCurrentFiber();\n        var sibling = fiber.sibling;\n        if (sibling !== null) {\n          sibling.return = fiber.return;\n          nextEffect = sibling;\n          return;\n        }\n        nextEffect = fiber.return;\n      }\n    }\n    function commitBeforeMutationEffectsOnFiber(finishedWork) {\n      var current = finishedWork.alternate;\n      var flags = finishedWork.flags;\n      if ((flags & Snapshot) !== NoFlags$1) {\n        setCurrentFiber(finishedWork);\n      }\n      switch (finishedWork.tag) {\n        case FunctionComponent:\n          {\n            break;\n          }\n        case ForwardRef:\n        case SimpleMemoComponent:\n          {\n            break;\n          }\n        case ClassComponent:\n          {\n            if ((flags & Snapshot) !== NoFlags$1) {\n              if (current !== null) {\n                var prevProps = current.memoizedProps;\n                var prevState = current.memoizedState;\n                var instance = finishedWork.stateNode;\n                {\n                  if (finishedWork.type === finishedWork.elementType && !didWarnAboutReassigningProps) {\n                    if (instance.props !== finishedWork.memoizedProps) {\n                      error(\"Expected %s props to match memoized props before \" + \"getSnapshotBeforeUpdate. \" + \"This might either be because of a bug in React, or because \" + \"a component reassigns its own `this.props`. \" + \"Please file an issue.\", getComponentNameFromFiber(finishedWork) || \"instance\");\n                    }\n                    if (instance.state !== finishedWork.memoizedState) {\n                      error(\"Expected %s state to match memoized state before \" + \"getSnapshotBeforeUpdate. \" + \"This might either be because of a bug in React, or because \" + \"a component reassigns its own `this.state`. \" + \"Please file an issue.\", getComponentNameFromFiber(finishedWork) || \"instance\");\n                    }\n                  }\n                }\n                var snapshot = instance.getSnapshotBeforeUpdate(finishedWork.elementType === finishedWork.type ? prevProps : resolveDefaultProps(finishedWork.type, prevProps), prevState);\n                {\n                  var didWarnSet = didWarnAboutUndefinedSnapshotBeforeUpdate;\n                  if (snapshot === undefined && !didWarnSet.has(finishedWork.type)) {\n                    didWarnSet.add(finishedWork.type);\n                    error(\"%s.getSnapshotBeforeUpdate(): A snapshot value (or null) \" + \"must be returned. You have returned undefined.\", getComponentNameFromFiber(finishedWork));\n                  }\n                }\n                instance.__reactInternalSnapshotBeforeUpdate = snapshot;\n              }\n            }\n            break;\n          }\n        case HostRoot:\n          {\n            break;\n          }\n        case HostComponent:\n        case HostHoistable:\n        case HostSingleton:\n        case HostText:\n        case HostPortal:\n        case IncompleteClassComponent:\n          break;\n        default:\n          {\n            if ((flags & Snapshot) !== NoFlags$1) {\n              throw new Error(\"This unit of work tag should not have side-effects. This error is \" + \"likely caused by a bug in React. Please file an issue.\");\n            }\n          }\n      }\n      if ((flags & Snapshot) !== NoFlags$1) {\n        resetCurrentFiber();\n      }\n    }\n    function commitHookEffectListUnmount(flags, finishedWork, nearestMountedAncestor) {\n      var updateQueue = finishedWork.updateQueue;\n      var lastEffect = updateQueue !== null ? updateQueue.lastEffect : null;\n      if (lastEffect !== null) {\n        var firstEffect = lastEffect.next;\n        var effect = firstEffect;\n        do {\n          if ((effect.tag & flags) === flags) {\n            var inst = effect.inst;\n            var destroy = inst.destroy;\n            if (destroy !== undefined) {\n              inst.destroy = undefined;\n              {\n                if ((flags & Insertion) !== NoFlags) {\n                  setIsRunningInsertionEffect(true);\n                }\n              }\n              safelyCallDestroy(finishedWork, nearestMountedAncestor, destroy);\n              {\n                if ((flags & Insertion) !== NoFlags) {\n                  setIsRunningInsertionEffect(false);\n                }\n              }\n            }\n          }\n          effect = effect.next;\n        } while (effect !== firstEffect);\n      }\n    }\n    function commitHookEffectListMount(flags, finishedWork) {\n      var updateQueue = finishedWork.updateQueue;\n      var lastEffect = updateQueue !== null ? updateQueue.lastEffect : null;\n      if (lastEffect !== null) {\n        var firstEffect = lastEffect.next;\n        var effect = firstEffect;\n        do {\n          if ((effect.tag & flags) === flags) {\n            var create = effect.create;\n            {\n              if ((flags & Insertion) !== NoFlags) {\n                setIsRunningInsertionEffect(true);\n              }\n            }\n            var inst = effect.inst;\n            var destroy = create();\n            inst.destroy = destroy;\n            {\n              if ((flags & Insertion) !== NoFlags) {\n                setIsRunningInsertionEffect(false);\n              }\n            }\n            {\n              if (destroy !== undefined && typeof destroy !== \"function\") {\n                var hookName = void 0;\n                if ((effect.tag & Layout) !== NoFlags$1) {\n                  hookName = \"useLayoutEffect\";\n                } else if ((effect.tag & Insertion) !== NoFlags$1) {\n                  hookName = \"useInsertionEffect\";\n                } else {\n                  hookName = \"useEffect\";\n                }\n                var addendum = void 0;\n                if (destroy === null) {\n                  addendum = \" You returned null. If your effect does not require clean \" + \"up, return undefined (or nothing).\";\n                } else if (typeof destroy.then === \"function\") {\n                  addendum = \"\\n\\nIt looks like you wrote \" + hookName + \"(async () => ...) or returned a Promise. \" + \"Instead, write the async function inside your effect \" + \"and call it immediately:\\n\\n\" + hookName + \"(() => {\\n\" + \"  async function fetchData() {\\n\" + \"    // You can await here\\n\" + \"    const response = await MyAPI.getData(someId);\\n\" + \"    // ...\\n\" + \"  }\\n\" + \"  fetchData();\\n\" + \"}, [someId]); // Or [] if effect doesn't need props or state\\n\\n\" + \"Learn more about data fetching with Hooks: https://reactjs.org/link/hooks-data-fetching\";\n                } else {\n                  addendum = \" You returned: \" + destroy;\n                }\n                error(\"%s must not return anything besides a function, \" + \"which is used for clean-up.%s\", hookName, addendum);\n              }\n            }\n          }\n          effect = effect.next;\n        } while (effect !== firstEffect);\n      }\n    }\n    function commitPassiveEffectDurations(finishedRoot, finishedWork) {\n      if (getExecutionContext() & CommitContext) {\n        if ((finishedWork.flags & Update) !== NoFlags$1) {\n          switch (finishedWork.tag) {\n            case Profiler:\n              {\n                var passiveEffectDuration = finishedWork.stateNode.passiveEffectDuration;\n                var _finishedWork$memoize = finishedWork.memoizedProps,\n                  id = _finishedWork$memoize.id,\n                  onPostCommit = _finishedWork$memoize.onPostCommit;\n                var commitTime = getCommitTime();\n                var phase = finishedWork.alternate === null ? \"mount\" : \"update\";\n                {\n                  if (isCurrentUpdateNested()) {\n                    phase = \"nested-update\";\n                  }\n                }\n                if (typeof onPostCommit === \"function\") {\n                  onPostCommit(id, phase, passiveEffectDuration, commitTime);\n                }\n                var parentFiber = finishedWork.return;\n                outer: while (parentFiber !== null) {\n                  switch (parentFiber.tag) {\n                    case HostRoot:\n                      var root = parentFiber.stateNode;\n                      root.passiveEffectDuration += passiveEffectDuration;\n                      break outer;\n                    case Profiler:\n                      var parentStateNode = parentFiber.stateNode;\n                      parentStateNode.passiveEffectDuration += passiveEffectDuration;\n                      break outer;\n                  }\n                  parentFiber = parentFiber.return;\n                }\n                break;\n              }\n          }\n        }\n      }\n    }\n    function commitHookLayoutEffects(finishedWork, hookFlags) {\n      if (shouldProfile(finishedWork)) {\n        try {\n          startLayoutEffectTimer();\n          commitHookEffectListMount(hookFlags, finishedWork);\n        } catch (error) {\n          captureCommitPhaseError(finishedWork, finishedWork.return, error);\n        }\n        recordLayoutEffectDuration(finishedWork);\n      } else {\n        try {\n          commitHookEffectListMount(hookFlags, finishedWork);\n        } catch (error) {\n          captureCommitPhaseError(finishedWork, finishedWork.return, error);\n        }\n      }\n    }\n    function commitClassLayoutLifecycles(finishedWork, current) {\n      var instance = finishedWork.stateNode;\n      if (current === null) {\n        {\n          if (finishedWork.type === finishedWork.elementType && !didWarnAboutReassigningProps) {\n            if (instance.props !== finishedWork.memoizedProps) {\n              error(\"Expected %s props to match memoized props before \" + \"componentDidMount. \" + \"This might either be because of a bug in React, or because \" + \"a component reassigns its own `this.props`. \" + \"Please file an issue.\", getComponentNameFromFiber(finishedWork) || \"instance\");\n            }\n            if (instance.state !== finishedWork.memoizedState) {\n              error(\"Expected %s state to match memoized state before \" + \"componentDidMount. \" + \"This might either be because of a bug in React, or because \" + \"a component reassigns its own `this.state`. \" + \"Please file an issue.\", getComponentNameFromFiber(finishedWork) || \"instance\");\n            }\n          }\n        }\n        if (shouldProfile(finishedWork)) {\n          try {\n            startLayoutEffectTimer();\n            instance.componentDidMount();\n          } catch (error) {\n            captureCommitPhaseError(finishedWork, finishedWork.return, error);\n          }\n          recordLayoutEffectDuration(finishedWork);\n        } else {\n          try {\n            instance.componentDidMount();\n          } catch (error) {\n            captureCommitPhaseError(finishedWork, finishedWork.return, error);\n          }\n        }\n      } else {\n        var prevProps = finishedWork.elementType === finishedWork.type ? current.memoizedProps : resolveDefaultProps(finishedWork.type, current.memoizedProps);\n        var prevState = current.memoizedState;\n        {\n          if (finishedWork.type === finishedWork.elementType && !didWarnAboutReassigningProps) {\n            if (instance.props !== finishedWork.memoizedProps) {\n              error(\"Expected %s props to match memoized props before \" + \"componentDidUpdate. \" + \"This might either be because of a bug in React, or because \" + \"a component reassigns its own `this.props`. \" + \"Please file an issue.\", getComponentNameFromFiber(finishedWork) || \"instance\");\n            }\n            if (instance.state !== finishedWork.memoizedState) {\n              error(\"Expected %s state to match memoized state before \" + \"componentDidUpdate. \" + \"This might either be because of a bug in React, or because \" + \"a component reassigns its own `this.state`. \" + \"Please file an issue.\", getComponentNameFromFiber(finishedWork) || \"instance\");\n            }\n          }\n        }\n        if (shouldProfile(finishedWork)) {\n          try {\n            startLayoutEffectTimer();\n            instance.componentDidUpdate(prevProps, prevState, instance.__reactInternalSnapshotBeforeUpdate);\n          } catch (error) {\n            captureCommitPhaseError(finishedWork, finishedWork.return, error);\n          }\n          recordLayoutEffectDuration(finishedWork);\n        } else {\n          try {\n            instance.componentDidUpdate(prevProps, prevState, instance.__reactInternalSnapshotBeforeUpdate);\n          } catch (error) {\n            captureCommitPhaseError(finishedWork, finishedWork.return, error);\n          }\n        }\n      }\n    }\n    function commitClassCallbacks(finishedWork) {\n      var updateQueue = finishedWork.updateQueue;\n      if (updateQueue !== null) {\n        var instance = finishedWork.stateNode;\n        {\n          if (finishedWork.type === finishedWork.elementType && !didWarnAboutReassigningProps) {\n            if (instance.props !== finishedWork.memoizedProps) {\n              error(\"Expected %s props to match memoized props before \" + \"processing the update queue. \" + \"This might either be because of a bug in React, or because \" + \"a component reassigns its own `this.props`. \" + \"Please file an issue.\", getComponentNameFromFiber(finishedWork) || \"instance\");\n            }\n            if (instance.state !== finishedWork.memoizedState) {\n              error(\"Expected %s state to match memoized state before \" + \"processing the update queue. \" + \"This might either be because of a bug in React, or because \" + \"a component reassigns its own `this.state`. \" + \"Please file an issue.\", getComponentNameFromFiber(finishedWork) || \"instance\");\n            }\n          }\n        }\n        try {\n          commitCallbacks(updateQueue, instance);\n        } catch (error) {\n          captureCommitPhaseError(finishedWork, finishedWork.return, error);\n        }\n      }\n    }\n    function commitHostComponentMount(finishedWork) {\n      var type = finishedWork.type;\n      var props = finishedWork.memoizedProps;\n      var instance = finishedWork.stateNode;\n      try {\n        commitMount(instance, type, props, finishedWork);\n      } catch (error) {\n        captureCommitPhaseError(finishedWork, finishedWork.return, error);\n      }\n    }\n    function commitProfilerUpdate(finishedWork, current) {\n      if (getExecutionContext() & CommitContext) {\n        try {\n          var _finishedWork$memoize2 = finishedWork.memoizedProps,\n            onCommit = _finishedWork$memoize2.onCommit,\n            onRender = _finishedWork$memoize2.onRender;\n          var effectDuration = finishedWork.stateNode.effectDuration;\n          var commitTime = getCommitTime();\n          var phase = current === null ? \"mount\" : \"update\";\n          if (enableProfilerNestedUpdatePhase) {\n            if (isCurrentUpdateNested()) {\n              phase = \"nested-update\";\n            }\n          }\n          if (typeof onRender === \"function\") {\n            onRender(finishedWork.memoizedProps.id, phase, finishedWork.actualDuration, finishedWork.treeBaseDuration, finishedWork.actualStartTime, commitTime);\n          }\n          if (enableProfilerCommitHooks) {\n            if (typeof onCommit === \"function\") {\n              onCommit(finishedWork.memoizedProps.id, phase, effectDuration, commitTime);\n            }\n            enqueuePendingPassiveProfilerEffect(finishedWork);\n            var parentFiber = finishedWork.return;\n            outer: while (parentFiber !== null) {\n              switch (parentFiber.tag) {\n                case HostRoot:\n                  var root = parentFiber.stateNode;\n                  root.effectDuration += effectDuration;\n                  break outer;\n                case Profiler:\n                  var parentStateNode = parentFiber.stateNode;\n                  parentStateNode.effectDuration += effectDuration;\n                  break outer;\n              }\n              parentFiber = parentFiber.return;\n            }\n          }\n        } catch (error) {\n          captureCommitPhaseError(finishedWork, finishedWork.return, error);\n        }\n      }\n    }\n    function commitLayoutEffectOnFiber(finishedRoot, current, finishedWork, committedLanes) {\n      var flags = finishedWork.flags;\n      switch (finishedWork.tag) {\n        case FunctionComponent:\n        case ForwardRef:\n        case SimpleMemoComponent:\n          {\n            recursivelyTraverseLayoutEffects(finishedRoot, finishedWork);\n            if (flags & Update) {\n              commitHookLayoutEffects(finishedWork, Layout | HasEffect);\n            }\n            break;\n          }\n        case ClassComponent:\n          {\n            recursivelyTraverseLayoutEffects(finishedRoot, finishedWork);\n            if (flags & Update) {\n              commitClassLayoutLifecycles(finishedWork, current);\n            }\n            if (flags & Callback) {\n              commitClassCallbacks(finishedWork);\n            }\n            if (flags & Ref) {\n              safelyAttachRef(finishedWork, finishedWork.return);\n            }\n            break;\n          }\n        case HostRoot:\n          {\n            recursivelyTraverseLayoutEffects(finishedRoot, finishedWork);\n            if (flags & Callback) {\n              var updateQueue = finishedWork.updateQueue;\n              if (updateQueue !== null) {\n                var instance = null;\n                if (finishedWork.child !== null) {\n                  switch (finishedWork.child.tag) {\n                    case HostSingleton:\n                    case HostComponent:\n                      instance = getPublicInstance(finishedWork.child.stateNode);\n                      break;\n                    case ClassComponent:\n                      instance = finishedWork.child.stateNode;\n                      break;\n                  }\n                }\n                try {\n                  commitCallbacks(updateQueue, instance);\n                } catch (error) {\n                  captureCommitPhaseError(finishedWork, finishedWork.return, error);\n                }\n              }\n            }\n            break;\n          }\n        case HostHoistable:\n        case HostSingleton:\n        case HostComponent:\n          {\n            recursivelyTraverseLayoutEffects(finishedRoot, finishedWork);\n            if (current === null && flags & Update) {\n              commitHostComponentMount(finishedWork);\n            }\n            if (flags & Ref) {\n              safelyAttachRef(finishedWork, finishedWork.return);\n            }\n            break;\n          }\n        case Profiler:\n          {\n            recursivelyTraverseLayoutEffects(finishedRoot, finishedWork);\n            if (flags & Update) {\n              commitProfilerUpdate(finishedWork, current);\n            }\n            break;\n          }\n        case SuspenseComponent:\n          {\n            recursivelyTraverseLayoutEffects(finishedRoot, finishedWork);\n            break;\n          }\n        case OffscreenComponent:\n          {\n            var isModernRoot = (finishedWork.mode & ConcurrentMode) !== NoMode;\n            if (isModernRoot) {\n              var isHidden = finishedWork.memoizedState !== null;\n              var newOffscreenSubtreeIsHidden = isHidden || offscreenSubtreeIsHidden;\n              if (newOffscreenSubtreeIsHidden) ;else {\n                var wasHidden = current !== null && current.memoizedState !== null;\n                var newOffscreenSubtreeWasHidden = wasHidden || offscreenSubtreeWasHidden;\n                var prevOffscreenSubtreeIsHidden = offscreenSubtreeIsHidden;\n                var prevOffscreenSubtreeWasHidden = offscreenSubtreeWasHidden;\n                offscreenSubtreeIsHidden = newOffscreenSubtreeIsHidden;\n                offscreenSubtreeWasHidden = newOffscreenSubtreeWasHidden;\n                if (offscreenSubtreeWasHidden && !prevOffscreenSubtreeWasHidden) {\n                  var includeWorkInProgressEffects = (finishedWork.subtreeFlags & LayoutMask) !== NoFlags$1;\n                  recursivelyTraverseReappearLayoutEffects(finishedRoot, finishedWork, includeWorkInProgressEffects);\n                } else {\n                  recursivelyTraverseLayoutEffects(finishedRoot, finishedWork);\n                }\n                offscreenSubtreeIsHidden = prevOffscreenSubtreeIsHidden;\n                offscreenSubtreeWasHidden = prevOffscreenSubtreeWasHidden;\n              }\n            } else {\n              recursivelyTraverseLayoutEffects(finishedRoot, finishedWork);\n            }\n            if (flags & Ref) {\n              var props = finishedWork.memoizedProps;\n              if (props.mode === \"manual\") {\n                safelyAttachRef(finishedWork, finishedWork.return);\n              } else {\n                safelyDetachRef(finishedWork, finishedWork.return);\n              }\n            }\n            break;\n          }\n        default:\n          {\n            recursivelyTraverseLayoutEffects(finishedRoot, finishedWork);\n            break;\n          }\n      }\n    }\n    function hideOrUnhideAllChildren(finishedWork, isHidden) {\n      var hostSubtreeRoot = null;\n      {\n        var node = finishedWork;\n        while (true) {\n          if (node.tag === HostComponent || false || false) {\n            if (hostSubtreeRoot === null) {\n              hostSubtreeRoot = node;\n              try {\n                var instance = node.stateNode;\n                if (isHidden) {\n                  hideInstance(instance);\n                } else {\n                  unhideInstance(node.stateNode, node.memoizedProps);\n                }\n              } catch (error) {\n                captureCommitPhaseError(finishedWork, finishedWork.return, error);\n              }\n            }\n          } else if (node.tag === HostText) {\n            if (hostSubtreeRoot === null) {\n              try {\n                var _instance = node.stateNode;\n                if (isHidden) {\n                  hideTextInstance(_instance);\n                } else {\n                  unhideTextInstance(_instance, node.memoizedProps);\n                }\n              } catch (error) {\n                captureCommitPhaseError(finishedWork, finishedWork.return, error);\n              }\n            }\n          } else if ((node.tag === OffscreenComponent || node.tag === LegacyHiddenComponent) && node.memoizedState !== null && node !== finishedWork) ;else if (node.child !== null) {\n            node.child.return = node;\n            node = node.child;\n            continue;\n          }\n          if (node === finishedWork) {\n            return;\n          }\n          while (node.sibling === null) {\n            if (node.return === null || node.return === finishedWork) {\n              return;\n            }\n            if (hostSubtreeRoot === node) {\n              hostSubtreeRoot = null;\n            }\n            node = node.return;\n          }\n          if (hostSubtreeRoot === node) {\n            hostSubtreeRoot = null;\n          }\n          node.sibling.return = node.return;\n          node = node.sibling;\n        }\n      }\n    }\n    function commitAttachRef(finishedWork) {\n      var ref = finishedWork.ref;\n      if (ref !== null) {\n        var instance = finishedWork.stateNode;\n        var instanceToUse;\n        switch (finishedWork.tag) {\n          case HostHoistable:\n          case HostSingleton:\n          case HostComponent:\n            instanceToUse = getPublicInstance(instance);\n            break;\n          default:\n            instanceToUse = instance;\n        }\n        if (typeof ref === \"function\") {\n          if (shouldProfile(finishedWork)) {\n            try {\n              startLayoutEffectTimer();\n              finishedWork.refCleanup = ref(instanceToUse);\n            } finally {\n              recordLayoutEffectDuration(finishedWork);\n            }\n          } else {\n            finishedWork.refCleanup = ref(instanceToUse);\n          }\n        } else {\n          {\n            if (!ref.hasOwnProperty(\"current\")) {\n              error(\"Unexpected ref object provided for %s. \" + \"Use either a ref-setter function or React.createRef().\", getComponentNameFromFiber(finishedWork));\n            }\n          }\n          ref.current = instanceToUse;\n        }\n      }\n    }\n    function detachFiberMutation(fiber) {\n      var alternate = fiber.alternate;\n      if (alternate !== null) {\n        alternate.return = null;\n      }\n      fiber.return = null;\n    }\n    function detachFiberAfterEffects(fiber) {\n      var alternate = fiber.alternate;\n      if (alternate !== null) {\n        fiber.alternate = null;\n        detachFiberAfterEffects(alternate);\n      }\n      fiber.child = null;\n      fiber.deletions = null;\n      fiber.sibling = null;\n      fiber.stateNode = null;\n      {\n        fiber._debugOwner = null;\n      }\n      fiber.return = null;\n      fiber.dependencies = null;\n      fiber.memoizedProps = null;\n      fiber.memoizedState = null;\n      fiber.pendingProps = null;\n      fiber.stateNode = null;\n      fiber.updateQueue = null;\n    }\n    function getHostParentFiber(fiber) {\n      var parent = fiber.return;\n      while (parent !== null) {\n        if (isHostParent(parent)) {\n          return parent;\n        }\n        parent = parent.return;\n      }\n      throw new Error(\"Expected to find a host parent. This error is likely caused by a bug \" + \"in React. Please file an issue.\");\n    }\n    function isHostParent(fiber) {\n      return fiber.tag === HostComponent || fiber.tag === HostRoot || false || false || fiber.tag === HostPortal;\n    }\n    function getHostSibling(fiber) {\n      var node = fiber;\n      siblings: while (true) {\n        while (node.sibling === null) {\n          if (node.return === null || isHostParent(node.return)) {\n            return null;\n          }\n          node = node.return;\n        }\n        node.sibling.return = node.return;\n        node = node.sibling;\n        while (node.tag !== HostComponent && node.tag !== HostText && true && node.tag !== DehydratedFragment) {\n          if (node.flags & Placement) {\n            continue siblings;\n          }\n          if (node.child === null || node.tag === HostPortal) {\n            continue siblings;\n          } else {\n            node.child.return = node;\n            node = node.child;\n          }\n        }\n        if (!(node.flags & Placement)) {\n          return node.stateNode;\n        }\n      }\n    }\n    function commitPlacement(finishedWork) {\n      var parentFiber = getHostParentFiber(finishedWork);\n      switch (parentFiber.tag) {\n        case HostSingleton:\n        case HostComponent:\n          {\n            var _parent = parentFiber.stateNode;\n            if (parentFiber.flags & ContentReset) {\n              parentFiber.flags &= ~ContentReset;\n            }\n            var _before = getHostSibling(finishedWork);\n            insertOrAppendPlacementNode(finishedWork, _before, _parent);\n            break;\n          }\n        case HostRoot:\n        case HostPortal:\n          {\n            var _parent2 = parentFiber.stateNode.containerInfo;\n            var _before2 = getHostSibling(finishedWork);\n            insertOrAppendPlacementNodeIntoContainer(finishedWork, _before2, _parent2);\n            break;\n          }\n        default:\n          throw new Error(\"Invalid host parent fiber. This error is likely caused by a bug \" + \"in React. Please file an issue.\");\n      }\n    }\n    function insertOrAppendPlacementNodeIntoContainer(node, before, parent) {\n      var tag = node.tag;\n      var isHost = tag === HostComponent || tag === HostText;\n      if (isHost) {\n        var stateNode = node.stateNode;\n        if (before) {\n          insertInContainerBefore(parent);\n        } else {\n          appendChildToContainer(parent, stateNode);\n        }\n      } else if (tag === HostPortal || false) ;else {\n        var child = node.child;\n        if (child !== null) {\n          insertOrAppendPlacementNodeIntoContainer(child, before, parent);\n          var sibling = child.sibling;\n          while (sibling !== null) {\n            insertOrAppendPlacementNodeIntoContainer(sibling, before, parent);\n            sibling = sibling.sibling;\n          }\n        }\n      }\n    }\n    function insertOrAppendPlacementNode(node, before, parent) {\n      var tag = node.tag;\n      var isHost = tag === HostComponent || tag === HostText;\n      if (isHost) {\n        var stateNode = node.stateNode;\n        if (before) {\n          insertBefore(parent, stateNode, before);\n        } else {\n          appendChild(parent, stateNode);\n        }\n      } else if (tag === HostPortal || false) ;else {\n        var child = node.child;\n        if (child !== null) {\n          insertOrAppendPlacementNode(child, before, parent);\n          var sibling = child.sibling;\n          while (sibling !== null) {\n            insertOrAppendPlacementNode(sibling, before, parent);\n            sibling = sibling.sibling;\n          }\n        }\n      }\n    }\n    var hostParent = null;\n    var hostParentIsContainer = false;\n    function commitDeletionEffects(root, returnFiber, deletedFiber) {\n      {\n        var parent = returnFiber;\n        findParent: while (parent !== null) {\n          switch (parent.tag) {\n            case HostSingleton:\n            case HostComponent:\n              {\n                hostParent = parent.stateNode;\n                hostParentIsContainer = false;\n                break findParent;\n              }\n            case HostRoot:\n              {\n                hostParent = parent.stateNode.containerInfo;\n                hostParentIsContainer = true;\n                break findParent;\n              }\n            case HostPortal:\n              {\n                hostParent = parent.stateNode.containerInfo;\n                hostParentIsContainer = true;\n                break findParent;\n              }\n          }\n          parent = parent.return;\n        }\n        if (hostParent === null) {\n          throw new Error(\"Expected to find a host parent. This error is likely caused by \" + \"a bug in React. Please file an issue.\");\n        }\n        commitDeletionEffectsOnFiber(root, returnFiber, deletedFiber);\n        hostParent = null;\n        hostParentIsContainer = false;\n      }\n      detachFiberMutation(deletedFiber);\n    }\n    function recursivelyTraverseDeletionEffects(finishedRoot, nearestMountedAncestor, parent) {\n      var child = parent.child;\n      while (child !== null) {\n        commitDeletionEffectsOnFiber(finishedRoot, nearestMountedAncestor, child);\n        child = child.sibling;\n      }\n    }\n    function commitDeletionEffectsOnFiber(finishedRoot, nearestMountedAncestor, deletedFiber) {\n      onCommitUnmount(deletedFiber);\n      switch (deletedFiber.tag) {\n        case HostHoistable:\n        case HostSingleton:\n        case HostComponent:\n          {\n            if (!offscreenSubtreeWasHidden) {\n              safelyDetachRef(deletedFiber, nearestMountedAncestor);\n            }\n          }\n        case HostText:\n          {\n            {\n              var _prevHostParent = hostParent;\n              var _prevHostParentIsContainer = hostParentIsContainer;\n              hostParent = null;\n              recursivelyTraverseDeletionEffects(finishedRoot, nearestMountedAncestor, deletedFiber);\n              hostParent = _prevHostParent;\n              hostParentIsContainer = _prevHostParentIsContainer;\n              if (hostParent !== null) {\n                if (hostParentIsContainer) {\n                  removeChildFromContainer(hostParent, deletedFiber.stateNode);\n                } else {\n                  removeChild(hostParent, deletedFiber.stateNode);\n                }\n              }\n            }\n            return;\n          }\n        case DehydratedFragment:\n          {\n            {\n              if (hostParent !== null) {\n                if (hostParentIsContainer) {\n                  clearSuspenseBoundaryFromContainer();\n                } else {\n                  clearSuspenseBoundary();\n                }\n              }\n            }\n            return;\n          }\n        case HostPortal:\n          {\n            {\n              var _prevHostParent2 = hostParent;\n              var _prevHostParentIsContainer2 = hostParentIsContainer;\n              hostParent = deletedFiber.stateNode.containerInfo;\n              hostParentIsContainer = true;\n              recursivelyTraverseDeletionEffects(finishedRoot, nearestMountedAncestor, deletedFiber);\n              hostParent = _prevHostParent2;\n              hostParentIsContainer = _prevHostParentIsContainer2;\n            }\n            return;\n          }\n        case FunctionComponent:\n        case ForwardRef:\n        case MemoComponent:\n        case SimpleMemoComponent:\n          {\n            if (!offscreenSubtreeWasHidden) {\n              var updateQueue = deletedFiber.updateQueue;\n              if (updateQueue !== null) {\n                var lastEffect = updateQueue.lastEffect;\n                if (lastEffect !== null) {\n                  var firstEffect = lastEffect.next;\n                  var effect = firstEffect;\n                  do {\n                    var tag = effect.tag;\n                    var inst = effect.inst;\n                    var destroy = inst.destroy;\n                    if (destroy !== undefined) {\n                      if ((tag & Insertion) !== NoFlags) {\n                        inst.destroy = undefined;\n                        safelyCallDestroy(deletedFiber, nearestMountedAncestor, destroy);\n                      } else if ((tag & Layout) !== NoFlags) {\n                        if (shouldProfile(deletedFiber)) {\n                          startLayoutEffectTimer();\n                          inst.destroy = undefined;\n                          safelyCallDestroy(deletedFiber, nearestMountedAncestor, destroy);\n                          recordLayoutEffectDuration(deletedFiber);\n                        } else {\n                          inst.destroy = undefined;\n                          safelyCallDestroy(deletedFiber, nearestMountedAncestor, destroy);\n                        }\n                      }\n                    }\n                    effect = effect.next;\n                  } while (effect !== firstEffect);\n                }\n              }\n            }\n            recursivelyTraverseDeletionEffects(finishedRoot, nearestMountedAncestor, deletedFiber);\n            return;\n          }\n        case ClassComponent:\n          {\n            if (!offscreenSubtreeWasHidden) {\n              safelyDetachRef(deletedFiber, nearestMountedAncestor);\n              var instance = deletedFiber.stateNode;\n              if (typeof instance.componentWillUnmount === \"function\") {\n                safelyCallComponentWillUnmount(deletedFiber, nearestMountedAncestor, instance);\n              }\n            }\n            recursivelyTraverseDeletionEffects(finishedRoot, nearestMountedAncestor, deletedFiber);\n            return;\n          }\n        case ScopeComponent:\n          {\n            recursivelyTraverseDeletionEffects(finishedRoot, nearestMountedAncestor, deletedFiber);\n            return;\n          }\n        case OffscreenComponent:\n          {\n            safelyDetachRef(deletedFiber, nearestMountedAncestor);\n            if (deletedFiber.mode & ConcurrentMode) {\n              var prevOffscreenSubtreeWasHidden = offscreenSubtreeWasHidden;\n              offscreenSubtreeWasHidden = prevOffscreenSubtreeWasHidden || deletedFiber.memoizedState !== null;\n              recursivelyTraverseDeletionEffects(finishedRoot, nearestMountedAncestor, deletedFiber);\n              offscreenSubtreeWasHidden = prevOffscreenSubtreeWasHidden;\n            } else {\n              recursivelyTraverseDeletionEffects(finishedRoot, nearestMountedAncestor, deletedFiber);\n            }\n            break;\n          }\n        default:\n          {\n            recursivelyTraverseDeletionEffects(finishedRoot, nearestMountedAncestor, deletedFiber);\n            return;\n          }\n      }\n    }\n    function commitSuspenseCallback(finishedWork) {}\n    function getRetryCache(finishedWork) {\n      switch (finishedWork.tag) {\n        case SuspenseComponent:\n        case SuspenseListComponent:\n          {\n            var retryCache = finishedWork.stateNode;\n            if (retryCache === null) {\n              retryCache = finishedWork.stateNode = new PossiblyWeakSet();\n            }\n            return retryCache;\n          }\n        case OffscreenComponent:\n          {\n            var instance = finishedWork.stateNode;\n            var _retryCache = instance._retryCache;\n            if (_retryCache === null) {\n              _retryCache = instance._retryCache = new PossiblyWeakSet();\n            }\n            return _retryCache;\n          }\n        default:\n          {\n            throw new Error(\"Unexpected Suspense handler tag (\" + finishedWork.tag + \"). This is a \" + \"bug in React.\");\n          }\n      }\n    }\n    function detachOffscreenInstance(instance) {\n      var fiber = instance._current;\n      if (fiber === null) {\n        throw new Error(\"Calling Offscreen.detach before instance handle has been set.\");\n      }\n      if ((instance._pendingVisibility & OffscreenDetached) !== NoFlags$1) {\n        return;\n      }\n      var root = enqueueConcurrentRenderForLane(fiber, SyncLane);\n      if (root !== null) {\n        instance._pendingVisibility |= OffscreenDetached;\n        scheduleUpdateOnFiber(root, fiber, SyncLane);\n      }\n    }\n    function attachOffscreenInstance(instance) {\n      var fiber = instance._current;\n      if (fiber === null) {\n        throw new Error(\"Calling Offscreen.detach before instance handle has been set.\");\n      }\n      if ((instance._pendingVisibility & OffscreenDetached) === NoFlags$1) {\n        return;\n      }\n      var root = enqueueConcurrentRenderForLane(fiber, SyncLane);\n      if (root !== null) {\n        instance._pendingVisibility &= ~OffscreenDetached;\n        scheduleUpdateOnFiber(root, fiber, SyncLane);\n      }\n    }\n    function attachSuspenseRetryListeners(finishedWork, wakeables) {\n      var retryCache = getRetryCache(finishedWork);\n      wakeables.forEach(function (wakeable) {\n        var retry = resolveRetryWakeable.bind(null, finishedWork, wakeable);\n        if (!retryCache.has(wakeable)) {\n          retryCache.add(wakeable);\n          {\n            if (isDevToolsPresent) {\n              if (inProgressLanes !== null && inProgressRoot !== null) {\n                restorePendingUpdaters(inProgressRoot, inProgressLanes);\n              } else {\n                throw Error(\"Expected finished root and lanes to be set. This is a bug in React.\");\n              }\n            }\n          }\n          wakeable.then(retry, retry);\n        }\n      });\n    }\n    function commitMutationEffects(root, finishedWork, committedLanes) {\n      inProgressLanes = committedLanes;\n      inProgressRoot = root;\n      setCurrentFiber(finishedWork);\n      commitMutationEffectsOnFiber(finishedWork, root);\n      setCurrentFiber(finishedWork);\n      inProgressLanes = null;\n      inProgressRoot = null;\n    }\n    function recursivelyTraverseMutationEffects(root, parentFiber, lanes) {\n      var deletions = parentFiber.deletions;\n      if (deletions !== null) {\n        for (var i = 0; i < deletions.length; i++) {\n          var childToDelete = deletions[i];\n          try {\n            commitDeletionEffects(root, parentFiber, childToDelete);\n          } catch (error) {\n            captureCommitPhaseError(childToDelete, parentFiber, error);\n          }\n        }\n      }\n      var prevDebugFiber = getCurrentFiber();\n      if (parentFiber.subtreeFlags & MutationMask) {\n        var child = parentFiber.child;\n        while (child !== null) {\n          setCurrentFiber(child);\n          commitMutationEffectsOnFiber(child, root);\n          child = child.sibling;\n        }\n      }\n      setCurrentFiber(prevDebugFiber);\n    }\n    function commitMutationEffectsOnFiber(finishedWork, root, lanes) {\n      var current = finishedWork.alternate;\n      var flags = finishedWork.flags;\n      switch (finishedWork.tag) {\n        case FunctionComponent:\n        case ForwardRef:\n        case MemoComponent:\n        case SimpleMemoComponent:\n          {\n            recursivelyTraverseMutationEffects(root, finishedWork);\n            commitReconciliationEffects(finishedWork);\n            if (flags & Update) {\n              try {\n                commitHookEffectListUnmount(Insertion | HasEffect, finishedWork, finishedWork.return);\n                commitHookEffectListMount(Insertion | HasEffect, finishedWork);\n              } catch (error) {\n                captureCommitPhaseError(finishedWork, finishedWork.return, error);\n              }\n              if (shouldProfile(finishedWork)) {\n                try {\n                  startLayoutEffectTimer();\n                  commitHookEffectListUnmount(Layout | HasEffect, finishedWork, finishedWork.return);\n                } catch (error) {\n                  captureCommitPhaseError(finishedWork, finishedWork.return, error);\n                }\n                recordLayoutEffectDuration(finishedWork);\n              } else {\n                try {\n                  commitHookEffectListUnmount(Layout | HasEffect, finishedWork, finishedWork.return);\n                } catch (error) {\n                  captureCommitPhaseError(finishedWork, finishedWork.return, error);\n                }\n              }\n            }\n            return;\n          }\n        case ClassComponent:\n          {\n            recursivelyTraverseMutationEffects(root, finishedWork);\n            commitReconciliationEffects(finishedWork);\n            if (flags & Ref) {\n              if (current !== null) {\n                safelyDetachRef(current, current.return);\n              }\n            }\n            if (flags & Callback && offscreenSubtreeIsHidden) {\n              var updateQueue = finishedWork.updateQueue;\n              if (updateQueue !== null) {\n                deferHiddenCallbacks(updateQueue);\n              }\n            }\n            return;\n          }\n        case HostHoistable:\n        case HostSingleton:\n        case HostComponent:\n          {\n            recursivelyTraverseMutationEffects(root, finishedWork);\n            commitReconciliationEffects(finishedWork);\n            if (flags & Ref) {\n              if (current !== null) {\n                safelyDetachRef(current, current.return);\n              }\n            }\n            {\n              if (finishedWork.flags & ContentReset) {\n                var instance = finishedWork.stateNode;\n                try {\n                  resetTextContent(instance);\n                } catch (error) {\n                  captureCommitPhaseError(finishedWork, finishedWork.return, error);\n                }\n              }\n              if (flags & Update) {\n                var _instance2 = finishedWork.stateNode;\n                if (_instance2 != null) {\n                  var newProps = finishedWork.memoizedProps;\n                  var oldProps = current !== null ? current.memoizedProps : newProps;\n                  var type = finishedWork.type;\n                  var _updatePayload = finishedWork.updateQueue;\n                  finishedWork.updateQueue = null;\n                  try {\n                    commitUpdate(_instance2, _updatePayload, type, oldProps, newProps, finishedWork);\n                  } catch (error) {\n                    captureCommitPhaseError(finishedWork, finishedWork.return, error);\n                  }\n                }\n              }\n            }\n            return;\n          }\n        case HostText:\n          {\n            recursivelyTraverseMutationEffects(root, finishedWork);\n            commitReconciliationEffects(finishedWork);\n            if (flags & Update) {\n              {\n                if (finishedWork.stateNode === null) {\n                  throw new Error(\"This should have a text node initialized. This error is likely \" + \"caused by a bug in React. Please file an issue.\");\n                }\n                var textInstance = finishedWork.stateNode;\n                var newText = finishedWork.memoizedProps;\n                var oldText = current !== null ? current.memoizedProps : newText;\n                try {\n                  commitTextUpdate(textInstance, oldText, newText);\n                } catch (error) {\n                  captureCommitPhaseError(finishedWork, finishedWork.return, error);\n                }\n              }\n            }\n            return;\n          }\n        case HostRoot:\n          {\n            {\n              recursivelyTraverseMutationEffects(root, finishedWork);\n              commitReconciliationEffects(finishedWork);\n            }\n            return;\n          }\n        case HostPortal:\n          {\n            {\n              recursivelyTraverseMutationEffects(root, finishedWork);\n              commitReconciliationEffects(finishedWork);\n            }\n            return;\n          }\n        case SuspenseComponent:\n          {\n            recursivelyTraverseMutationEffects(root, finishedWork);\n            commitReconciliationEffects(finishedWork);\n            var offscreenFiber = finishedWork.child;\n            if (offscreenFiber.flags & Visibility) {\n              var isShowingFallback = finishedWork.memoizedState !== null;\n              var wasShowingFallback = current !== null && current.memoizedState !== null;\n              {\n                if (isShowingFallback && !wasShowingFallback) {\n                  markCommitTimeOfFallback();\n                }\n              }\n            }\n            if (flags & Update) {\n              try {\n                commitSuspenseCallback(finishedWork);\n              } catch (error) {\n                captureCommitPhaseError(finishedWork, finishedWork.return, error);\n              }\n              var retryQueue = finishedWork.updateQueue;\n              if (retryQueue !== null) {\n                finishedWork.updateQueue = null;\n                attachSuspenseRetryListeners(finishedWork, retryQueue);\n              }\n            }\n            return;\n          }\n        case OffscreenComponent:\n          {\n            if (flags & Ref) {\n              if (current !== null) {\n                safelyDetachRef(current, current.return);\n              }\n            }\n            var newState = finishedWork.memoizedState;\n            var isHidden = newState !== null;\n            var wasHidden = current !== null && current.memoizedState !== null;\n            if (finishedWork.mode & ConcurrentMode) {\n              var prevOffscreenSubtreeIsHidden = offscreenSubtreeIsHidden;\n              var prevOffscreenSubtreeWasHidden = offscreenSubtreeWasHidden;\n              offscreenSubtreeIsHidden = prevOffscreenSubtreeIsHidden || isHidden;\n              offscreenSubtreeWasHidden = prevOffscreenSubtreeWasHidden || wasHidden;\n              recursivelyTraverseMutationEffects(root, finishedWork);\n              offscreenSubtreeWasHidden = prevOffscreenSubtreeWasHidden;\n              offscreenSubtreeIsHidden = prevOffscreenSubtreeIsHidden;\n            } else {\n              recursivelyTraverseMutationEffects(root, finishedWork);\n            }\n            commitReconciliationEffects(finishedWork);\n            var offscreenInstance = finishedWork.stateNode;\n            offscreenInstance._current = finishedWork;\n            offscreenInstance._visibility &= ~OffscreenDetached;\n            offscreenInstance._visibility |= offscreenInstance._pendingVisibility & OffscreenDetached;\n            if (flags & Visibility) {\n              if (isHidden) {\n                offscreenInstance._visibility &= ~OffscreenVisible;\n              } else {\n                offscreenInstance._visibility |= OffscreenVisible;\n              }\n              if (isHidden) {\n                var isUpdate = current !== null;\n                var wasHiddenByAncestorOffscreen = offscreenSubtreeIsHidden || offscreenSubtreeWasHidden;\n                if (isUpdate && !wasHidden && !wasHiddenByAncestorOffscreen) {\n                  if ((finishedWork.mode & ConcurrentMode) !== NoMode) {\n                    recursivelyTraverseDisappearLayoutEffects(finishedWork);\n                  }\n                }\n              }\n              if (!isOffscreenManual(finishedWork)) {\n                hideOrUnhideAllChildren(finishedWork, isHidden);\n              }\n            }\n            if (flags & Update) {\n              var offscreenQueue = finishedWork.updateQueue;\n              if (offscreenQueue !== null) {\n                var _retryQueue = offscreenQueue.retryQueue;\n                if (_retryQueue !== null) {\n                  offscreenQueue.retryQueue = null;\n                  attachSuspenseRetryListeners(finishedWork, _retryQueue);\n                }\n              }\n            }\n            return;\n          }\n        case SuspenseListComponent:\n          {\n            recursivelyTraverseMutationEffects(root, finishedWork);\n            commitReconciliationEffects(finishedWork);\n            if (flags & Update) {\n              var _retryQueue2 = finishedWork.updateQueue;\n              if (_retryQueue2 !== null) {\n                finishedWork.updateQueue = null;\n                attachSuspenseRetryListeners(finishedWork, _retryQueue2);\n              }\n            }\n            return;\n          }\n        case ScopeComponent:\n          {\n            return;\n          }\n        default:\n          {\n            recursivelyTraverseMutationEffects(root, finishedWork);\n            commitReconciliationEffects(finishedWork);\n            return;\n          }\n      }\n    }\n    function commitReconciliationEffects(finishedWork) {\n      var flags = finishedWork.flags;\n      if (flags & Placement) {\n        try {\n          commitPlacement(finishedWork);\n        } catch (error) {\n          captureCommitPhaseError(finishedWork, finishedWork.return, error);\n        }\n        finishedWork.flags &= ~Placement;\n      }\n      if (flags & Hydrating) {\n        finishedWork.flags &= ~Hydrating;\n      }\n    }\n    function commitLayoutEffects(finishedWork, root, committedLanes) {\n      inProgressLanes = committedLanes;\n      inProgressRoot = root;\n      var current = finishedWork.alternate;\n      commitLayoutEffectOnFiber(root, current, finishedWork);\n      inProgressLanes = null;\n      inProgressRoot = null;\n    }\n    function recursivelyTraverseLayoutEffects(root, parentFiber, lanes) {\n      var prevDebugFiber = getCurrentFiber();\n      if (parentFiber.subtreeFlags & LayoutMask) {\n        var child = parentFiber.child;\n        while (child !== null) {\n          setCurrentFiber(child);\n          var current = child.alternate;\n          commitLayoutEffectOnFiber(root, current, child);\n          child = child.sibling;\n        }\n      }\n      setCurrentFiber(prevDebugFiber);\n    }\n    function disappearLayoutEffects(finishedWork) {\n      switch (finishedWork.tag) {\n        case FunctionComponent:\n        case ForwardRef:\n        case MemoComponent:\n        case SimpleMemoComponent:\n          {\n            if (shouldProfile(finishedWork)) {\n              try {\n                startLayoutEffectTimer();\n                commitHookEffectListUnmount(Layout, finishedWork, finishedWork.return);\n              } finally {\n                recordLayoutEffectDuration(finishedWork);\n              }\n            } else {\n              commitHookEffectListUnmount(Layout, finishedWork, finishedWork.return);\n            }\n            recursivelyTraverseDisappearLayoutEffects(finishedWork);\n            break;\n          }\n        case ClassComponent:\n          {\n            safelyDetachRef(finishedWork, finishedWork.return);\n            var instance = finishedWork.stateNode;\n            if (typeof instance.componentWillUnmount === \"function\") {\n              safelyCallComponentWillUnmount(finishedWork, finishedWork.return, instance);\n            }\n            recursivelyTraverseDisappearLayoutEffects(finishedWork);\n            break;\n          }\n        case HostHoistable:\n        case HostSingleton:\n        case HostComponent:\n          {\n            safelyDetachRef(finishedWork, finishedWork.return);\n            recursivelyTraverseDisappearLayoutEffects(finishedWork);\n            break;\n          }\n        case OffscreenComponent:\n          {\n            safelyDetachRef(finishedWork, finishedWork.return);\n            var isHidden = finishedWork.memoizedState !== null;\n            if (isHidden) ;else {\n              recursivelyTraverseDisappearLayoutEffects(finishedWork);\n            }\n            break;\n          }\n        default:\n          {\n            recursivelyTraverseDisappearLayoutEffects(finishedWork);\n            break;\n          }\n      }\n    }\n    function recursivelyTraverseDisappearLayoutEffects(parentFiber) {\n      var child = parentFiber.child;\n      while (child !== null) {\n        disappearLayoutEffects(child);\n        child = child.sibling;\n      }\n    }\n    function reappearLayoutEffects(finishedRoot, current, finishedWork, includeWorkInProgressEffects) {\n      var flags = finishedWork.flags;\n      switch (finishedWork.tag) {\n        case FunctionComponent:\n        case ForwardRef:\n        case SimpleMemoComponent:\n          {\n            recursivelyTraverseReappearLayoutEffects(finishedRoot, finishedWork, includeWorkInProgressEffects);\n            commitHookLayoutEffects(finishedWork, Layout);\n            break;\n          }\n        case ClassComponent:\n          {\n            recursivelyTraverseReappearLayoutEffects(finishedRoot, finishedWork, includeWorkInProgressEffects);\n            var instance = finishedWork.stateNode;\n            if (typeof instance.componentDidMount === \"function\") {\n              try {\n                instance.componentDidMount();\n              } catch (error) {\n                captureCommitPhaseError(finishedWork, finishedWork.return, error);\n              }\n            }\n            var updateQueue = finishedWork.updateQueue;\n            if (updateQueue !== null) {\n              commitHiddenCallbacks(updateQueue, instance);\n            }\n            if (includeWorkInProgressEffects && flags & Callback) {\n              commitClassCallbacks(finishedWork);\n            }\n            safelyAttachRef(finishedWork, finishedWork.return);\n            break;\n          }\n        case HostHoistable:\n        case HostSingleton:\n        case HostComponent:\n          {\n            recursivelyTraverseReappearLayoutEffects(finishedRoot, finishedWork, includeWorkInProgressEffects);\n            if (includeWorkInProgressEffects && current === null && flags & Update) {\n              commitHostComponentMount(finishedWork);\n            }\n            safelyAttachRef(finishedWork, finishedWork.return);\n            break;\n          }\n        case Profiler:\n          {\n            recursivelyTraverseReappearLayoutEffects(finishedRoot, finishedWork, includeWorkInProgressEffects);\n            if (includeWorkInProgressEffects && flags & Update) {\n              commitProfilerUpdate(finishedWork, current);\n            }\n            break;\n          }\n        case SuspenseComponent:\n          {\n            recursivelyTraverseReappearLayoutEffects(finishedRoot, finishedWork, includeWorkInProgressEffects);\n            break;\n          }\n        case OffscreenComponent:\n          {\n            var offscreenState = finishedWork.memoizedState;\n            var isHidden = offscreenState !== null;\n            if (isHidden) ;else {\n              recursivelyTraverseReappearLayoutEffects(finishedRoot, finishedWork, includeWorkInProgressEffects);\n            }\n            safelyAttachRef(finishedWork, finishedWork.return);\n            break;\n          }\n        default:\n          {\n            recursivelyTraverseReappearLayoutEffects(finishedRoot, finishedWork, includeWorkInProgressEffects);\n            break;\n          }\n      }\n    }\n    function recursivelyTraverseReappearLayoutEffects(finishedRoot, parentFiber, includeWorkInProgressEffects) {\n      var childShouldIncludeWorkInProgressEffects = includeWorkInProgressEffects && (parentFiber.subtreeFlags & LayoutMask) !== NoFlags$1;\n      var prevDebugFiber = getCurrentFiber();\n      var child = parentFiber.child;\n      while (child !== null) {\n        var current = child.alternate;\n        reappearLayoutEffects(finishedRoot, current, child, childShouldIncludeWorkInProgressEffects);\n        child = child.sibling;\n      }\n      setCurrentFiber(prevDebugFiber);\n    }\n    function commitHookPassiveMountEffects(finishedWork, hookFlags) {\n      if (shouldProfile(finishedWork)) {\n        startPassiveEffectTimer();\n        try {\n          commitHookEffectListMount(hookFlags, finishedWork);\n        } catch (error) {\n          captureCommitPhaseError(finishedWork, finishedWork.return, error);\n        }\n        recordPassiveEffectDuration(finishedWork);\n      } else {\n        try {\n          commitHookEffectListMount(hookFlags, finishedWork);\n        } catch (error) {\n          captureCommitPhaseError(finishedWork, finishedWork.return, error);\n        }\n      }\n    }\n    function commitPassiveMountEffects(root, finishedWork, committedLanes, committedTransitions) {\n      setCurrentFiber(finishedWork);\n      commitPassiveMountOnFiber(root, finishedWork);\n      resetCurrentFiber();\n    }\n    function recursivelyTraversePassiveMountEffects(root, parentFiber, committedLanes, committedTransitions) {\n      var prevDebugFiber = getCurrentFiber();\n      if (parentFiber.subtreeFlags & PassiveMask) {\n        var child = parentFiber.child;\n        while (child !== null) {\n          setCurrentFiber(child);\n          commitPassiveMountOnFiber(root, child);\n          child = child.sibling;\n        }\n      }\n      setCurrentFiber(prevDebugFiber);\n    }\n    function commitPassiveMountOnFiber(finishedRoot, finishedWork, committedLanes, committedTransitions) {\n      var flags = finishedWork.flags;\n      switch (finishedWork.tag) {\n        case FunctionComponent:\n        case ForwardRef:\n        case SimpleMemoComponent:\n          {\n            recursivelyTraversePassiveMountEffects(finishedRoot, finishedWork);\n            if (flags & Passive$1) {\n              commitHookPassiveMountEffects(finishedWork, Passive | HasEffect);\n            }\n            break;\n          }\n        case HostRoot:\n          {\n            recursivelyTraversePassiveMountEffects(finishedRoot, finishedWork);\n            break;\n          }\n        case LegacyHiddenComponent:\n          {\n            break;\n          }\n        case OffscreenComponent:\n          {\n            var _instance3 = finishedWork.stateNode;\n            var nextState = finishedWork.memoizedState;\n            var isHidden = nextState !== null;\n            if (isHidden) {\n              if (_instance3._visibility & OffscreenPassiveEffectsConnected) {\n                recursivelyTraversePassiveMountEffects(finishedRoot, finishedWork);\n              } else {\n                if (finishedWork.mode & ConcurrentMode) ;else {\n                  _instance3._visibility |= OffscreenPassiveEffectsConnected;\n                  recursivelyTraversePassiveMountEffects(finishedRoot, finishedWork);\n                }\n              }\n            } else {\n              if (_instance3._visibility & OffscreenPassiveEffectsConnected) {\n                recursivelyTraversePassiveMountEffects(finishedRoot, finishedWork);\n              } else {\n                _instance3._visibility |= OffscreenPassiveEffectsConnected;\n                recursivelyTraverseReconnectPassiveEffects(finishedRoot, finishedWork);\n              }\n            }\n            break;\n          }\n        case CacheComponent:\n          {\n            recursivelyTraversePassiveMountEffects(finishedRoot, finishedWork);\n            break;\n          }\n        case TracingMarkerComponent:\n        default:\n          {\n            recursivelyTraversePassiveMountEffects(finishedRoot, finishedWork);\n            break;\n          }\n      }\n    }\n    function recursivelyTraverseReconnectPassiveEffects(finishedRoot, parentFiber, committedLanes, committedTransitions, includeWorkInProgressEffects) {\n      var prevDebugFiber = getCurrentFiber();\n      var child = parentFiber.child;\n      while (child !== null) {\n        reconnectPassiveEffects(finishedRoot, child);\n        child = child.sibling;\n      }\n      setCurrentFiber(prevDebugFiber);\n    }\n    function reconnectPassiveEffects(finishedRoot, finishedWork, committedLanes, committedTransitions, includeWorkInProgressEffects) {\n      switch (finishedWork.tag) {\n        case FunctionComponent:\n        case ForwardRef:\n        case SimpleMemoComponent:\n          {\n            recursivelyTraverseReconnectPassiveEffects(finishedRoot, finishedWork);\n            commitHookPassiveMountEffects(finishedWork, Passive);\n            break;\n          }\n        case LegacyHiddenComponent:\n          {\n            break;\n          }\n        case OffscreenComponent:\n          {\n            var _instance4 = finishedWork.stateNode;\n            var nextState = finishedWork.memoizedState;\n            var isHidden = nextState !== null;\n            if (isHidden) {\n              if (_instance4._visibility & OffscreenPassiveEffectsConnected) {\n                recursivelyTraverseReconnectPassiveEffects(finishedRoot, finishedWork);\n              } else {\n                if (finishedWork.mode & ConcurrentMode) ;else {\n                  _instance4._visibility |= OffscreenPassiveEffectsConnected;\n                  recursivelyTraverseReconnectPassiveEffects(finishedRoot, finishedWork);\n                }\n              }\n            } else {\n              _instance4._visibility |= OffscreenPassiveEffectsConnected;\n              recursivelyTraverseReconnectPassiveEffects(finishedRoot, finishedWork);\n            }\n            break;\n          }\n        case CacheComponent:\n          {\n            recursivelyTraverseReconnectPassiveEffects(finishedRoot, finishedWork);\n            break;\n          }\n        case TracingMarkerComponent:\n        default:\n          {\n            recursivelyTraverseReconnectPassiveEffects(finishedRoot, finishedWork);\n            break;\n          }\n      }\n    }\n    function commitPassiveUnmountEffects(finishedWork) {\n      setCurrentFiber(finishedWork);\n      commitPassiveUnmountOnFiber(finishedWork);\n      resetCurrentFiber();\n    }\n    var suspenseyCommitFlag = ShouldSuspendCommit;\n    function accumulateSuspenseyCommit(finishedWork) {\n      accumulateSuspenseyCommitOnFiber(finishedWork);\n    }\n    function recursivelyAccumulateSuspenseyCommit(parentFiber) {\n      if (parentFiber.subtreeFlags & suspenseyCommitFlag) {\n        var child = parentFiber.child;\n        while (child !== null) {\n          accumulateSuspenseyCommitOnFiber(child);\n          child = child.sibling;\n        }\n      }\n    }\n    function accumulateSuspenseyCommitOnFiber(fiber) {\n      switch (fiber.tag) {\n        case HostHoistable:\n          {\n            recursivelyAccumulateSuspenseyCommit(fiber);\n            if (fiber.flags & suspenseyCommitFlag) {\n              if (fiber.memoizedState !== null) {\n                suspendResource();\n              }\n            }\n            break;\n          }\n        case HostComponent:\n          {\n            recursivelyAccumulateSuspenseyCommit(fiber);\n            break;\n          }\n        case HostRoot:\n        case HostPortal:\n          {\n            {\n              recursivelyAccumulateSuspenseyCommit(fiber);\n            }\n            break;\n          }\n        case OffscreenComponent:\n          {\n            var isHidden = fiber.memoizedState !== null;\n            if (isHidden) ;else {\n              var current = fiber.alternate;\n              var wasHidden = current !== null && current.memoizedState !== null;\n              if (wasHidden) {\n                var prevFlags = suspenseyCommitFlag;\n                suspenseyCommitFlag = MaySuspendCommit;\n                recursivelyAccumulateSuspenseyCommit(fiber);\n                suspenseyCommitFlag = prevFlags;\n              } else {\n                recursivelyAccumulateSuspenseyCommit(fiber);\n              }\n            }\n            break;\n          }\n        default:\n          {\n            recursivelyAccumulateSuspenseyCommit(fiber);\n          }\n      }\n    }\n    function detachAlternateSiblings(parentFiber) {\n      var previousFiber = parentFiber.alternate;\n      if (previousFiber !== null) {\n        var detachedChild = previousFiber.child;\n        if (detachedChild !== null) {\n          previousFiber.child = null;\n          do {\n            var detachedSibling = detachedChild.sibling;\n            detachedChild.sibling = null;\n            detachedChild = detachedSibling;\n          } while (detachedChild !== null);\n        }\n      }\n    }\n    function commitHookPassiveUnmountEffects(finishedWork, nearestMountedAncestor, hookFlags) {\n      if (shouldProfile(finishedWork)) {\n        startPassiveEffectTimer();\n        commitHookEffectListUnmount(hookFlags, finishedWork, nearestMountedAncestor);\n        recordPassiveEffectDuration(finishedWork);\n      } else {\n        commitHookEffectListUnmount(hookFlags, finishedWork, nearestMountedAncestor);\n      }\n    }\n    function recursivelyTraversePassiveUnmountEffects(parentFiber) {\n      var deletions = parentFiber.deletions;\n      if ((parentFiber.flags & ChildDeletion) !== NoFlags$1) {\n        if (deletions !== null) {\n          for (var i = 0; i < deletions.length; i++) {\n            var childToDelete = deletions[i];\n            nextEffect = childToDelete;\n            commitPassiveUnmountEffectsInsideOfDeletedTree_begin(childToDelete, parentFiber);\n          }\n        }\n        detachAlternateSiblings(parentFiber);\n      }\n      var prevDebugFiber = getCurrentFiber();\n      if (parentFiber.subtreeFlags & PassiveMask) {\n        var child = parentFiber.child;\n        while (child !== null) {\n          setCurrentFiber(child);\n          commitPassiveUnmountOnFiber(child);\n          child = child.sibling;\n        }\n      }\n      setCurrentFiber(prevDebugFiber);\n    }\n    function commitPassiveUnmountOnFiber(finishedWork) {\n      switch (finishedWork.tag) {\n        case FunctionComponent:\n        case ForwardRef:\n        case SimpleMemoComponent:\n          {\n            recursivelyTraversePassiveUnmountEffects(finishedWork);\n            if (finishedWork.flags & Passive$1) {\n              commitHookPassiveUnmountEffects(finishedWork, finishedWork.return, Passive | HasEffect);\n            }\n            break;\n          }\n        case OffscreenComponent:\n          {\n            var instance = finishedWork.stateNode;\n            var nextState = finishedWork.memoizedState;\n            var isHidden = nextState !== null;\n            if (isHidden && instance._visibility & OffscreenPassiveEffectsConnected && (finishedWork.return === null || finishedWork.return.tag !== SuspenseComponent)) {\n              instance._visibility &= ~OffscreenPassiveEffectsConnected;\n              recursivelyTraverseDisconnectPassiveEffects(finishedWork);\n            } else {\n              recursivelyTraversePassiveUnmountEffects(finishedWork);\n            }\n            break;\n          }\n        default:\n          {\n            recursivelyTraversePassiveUnmountEffects(finishedWork);\n            break;\n          }\n      }\n    }\n    function recursivelyTraverseDisconnectPassiveEffects(parentFiber) {\n      var deletions = parentFiber.deletions;\n      if ((parentFiber.flags & ChildDeletion) !== NoFlags$1) {\n        if (deletions !== null) {\n          for (var i = 0; i < deletions.length; i++) {\n            var childToDelete = deletions[i];\n            nextEffect = childToDelete;\n            commitPassiveUnmountEffectsInsideOfDeletedTree_begin(childToDelete, parentFiber);\n          }\n        }\n        detachAlternateSiblings(parentFiber);\n      }\n      var prevDebugFiber = getCurrentFiber();\n      var child = parentFiber.child;\n      while (child !== null) {\n        setCurrentFiber(child);\n        disconnectPassiveEffect(child);\n        child = child.sibling;\n      }\n      setCurrentFiber(prevDebugFiber);\n    }\n    function disconnectPassiveEffect(finishedWork) {\n      switch (finishedWork.tag) {\n        case FunctionComponent:\n        case ForwardRef:\n        case SimpleMemoComponent:\n          {\n            commitHookPassiveUnmountEffects(finishedWork, finishedWork.return, Passive);\n            recursivelyTraverseDisconnectPassiveEffects(finishedWork);\n            break;\n          }\n        case OffscreenComponent:\n          {\n            var instance = finishedWork.stateNode;\n            if (instance._visibility & OffscreenPassiveEffectsConnected) {\n              instance._visibility &= ~OffscreenPassiveEffectsConnected;\n              recursivelyTraverseDisconnectPassiveEffects(finishedWork);\n            }\n            break;\n          }\n        default:\n          {\n            recursivelyTraverseDisconnectPassiveEffects(finishedWork);\n            break;\n          }\n      }\n    }\n    function commitPassiveUnmountEffectsInsideOfDeletedTree_begin(deletedSubtreeRoot, nearestMountedAncestor) {\n      while (nextEffect !== null) {\n        var fiber = nextEffect;\n        setCurrentFiber(fiber);\n        commitPassiveUnmountInsideDeletedTreeOnFiber(fiber, nearestMountedAncestor);\n        resetCurrentFiber();\n        var child = fiber.child;\n        if (child !== null) {\n          child.return = fiber;\n          nextEffect = child;\n        } else {\n          commitPassiveUnmountEffectsInsideOfDeletedTree_complete(deletedSubtreeRoot);\n        }\n      }\n    }\n    function commitPassiveUnmountEffectsInsideOfDeletedTree_complete(deletedSubtreeRoot) {\n      while (nextEffect !== null) {\n        var fiber = nextEffect;\n        var sibling = fiber.sibling;\n        var returnFiber = fiber.return;\n        detachFiberAfterEffects(fiber);\n        if (fiber === deletedSubtreeRoot) {\n          nextEffect = null;\n          return;\n        }\n        if (sibling !== null) {\n          sibling.return = returnFiber;\n          nextEffect = sibling;\n          return;\n        }\n        nextEffect = returnFiber;\n      }\n    }\n    function commitPassiveUnmountInsideDeletedTreeOnFiber(current, nearestMountedAncestor) {\n      switch (current.tag) {\n        case FunctionComponent:\n        case ForwardRef:\n        case SimpleMemoComponent:\n          {\n            commitHookPassiveUnmountEffects(current, nearestMountedAncestor, Passive);\n            break;\n          }\n      }\n    }\n    function invokeLayoutEffectMountInDEV(fiber) {\n      {\n        switch (fiber.tag) {\n          case FunctionComponent:\n          case ForwardRef:\n          case SimpleMemoComponent:\n            {\n              try {\n                commitHookEffectListMount(Layout | HasEffect, fiber);\n              } catch (error) {\n                captureCommitPhaseError(fiber, fiber.return, error);\n              }\n              break;\n            }\n          case ClassComponent:\n            {\n              var instance = fiber.stateNode;\n              if (typeof instance.componentDidMount === \"function\") {\n                try {\n                  instance.componentDidMount();\n                } catch (error) {\n                  captureCommitPhaseError(fiber, fiber.return, error);\n                }\n              }\n              break;\n            }\n        }\n      }\n    }\n    function invokePassiveEffectMountInDEV(fiber) {\n      {\n        switch (fiber.tag) {\n          case FunctionComponent:\n          case ForwardRef:\n          case SimpleMemoComponent:\n            {\n              try {\n                commitHookEffectListMount(Passive | HasEffect, fiber);\n              } catch (error) {\n                captureCommitPhaseError(fiber, fiber.return, error);\n              }\n              break;\n            }\n        }\n      }\n    }\n    function invokeLayoutEffectUnmountInDEV(fiber) {\n      {\n        switch (fiber.tag) {\n          case FunctionComponent:\n          case ForwardRef:\n          case SimpleMemoComponent:\n            {\n              try {\n                commitHookEffectListUnmount(Layout | HasEffect, fiber, fiber.return);\n              } catch (error) {\n                captureCommitPhaseError(fiber, fiber.return, error);\n              }\n              break;\n            }\n          case ClassComponent:\n            {\n              var instance = fiber.stateNode;\n              if (typeof instance.componentWillUnmount === \"function\") {\n                safelyCallComponentWillUnmount(fiber, fiber.return, instance);\n              }\n              break;\n            }\n        }\n      }\n    }\n    function invokePassiveEffectUnmountInDEV(fiber) {\n      {\n        switch (fiber.tag) {\n          case FunctionComponent:\n          case ForwardRef:\n          case SimpleMemoComponent:\n            {\n              try {\n                commitHookEffectListUnmount(Passive | HasEffect, fiber, fiber.return);\n              } catch (error) {\n                captureCommitPhaseError(fiber, fiber.return, error);\n              }\n            }\n        }\n      }\n    }\n    if (typeof Symbol === \"function\" && Symbol.for) {\n      var symbolFor = Symbol.for;\n      symbolFor(\"selector.component\");\n      symbolFor(\"selector.has_pseudo_class\");\n      symbolFor(\"selector.role\");\n      symbolFor(\"selector.test_id\");\n      symbolFor(\"selector.text\");\n    }\n    var ReactCurrentActQueue$1 = ReactSharedInternals.ReactCurrentActQueue;\n    function isLegacyActEnvironment(fiber) {\n      {\n        var isReactActEnvironmentGlobal = typeof IS_REACT_ACT_ENVIRONMENT !== \"undefined\" ? IS_REACT_ACT_ENVIRONMENT : undefined;\n        var jestIsDefined = typeof jest !== \"undefined\";\n        return jestIsDefined && isReactActEnvironmentGlobal !== false;\n      }\n    }\n    function isConcurrentActEnvironment() {\n      {\n        var isReactActEnvironmentGlobal = typeof IS_REACT_ACT_ENVIRONMENT !== \"undefined\" ? IS_REACT_ACT_ENVIRONMENT : undefined;\n        if (!isReactActEnvironmentGlobal && ReactCurrentActQueue$1.current !== null) {\n          error(\"The current testing environment is not configured to support \" + \"act(...)\");\n        }\n        return isReactActEnvironmentGlobal;\n      }\n    }\n    var PossiblyWeakMap = typeof WeakMap === \"function\" ? WeakMap : Map;\n    var ReactCurrentDispatcher = ReactSharedInternals.ReactCurrentDispatcher,\n      ReactCurrentOwner$1 = ReactSharedInternals.ReactCurrentOwner,\n      ReactCurrentBatchConfig = ReactSharedInternals.ReactCurrentBatchConfig,\n      ReactCurrentActQueue = ReactSharedInternals.ReactCurrentActQueue;\n    var NoContext = 0;\n    var BatchedContext = 1;\n    var RenderContext = 2;\n    var CommitContext = 4;\n    var RootInProgress = 0;\n    var RootFatalErrored = 1;\n    var RootErrored = 2;\n    var RootSuspended = 3;\n    var RootSuspendedWithDelay = 4;\n    var RootCompleted = 5;\n    var RootDidNotComplete = 6;\n    var executionContext = NoContext;\n    var workInProgressRoot = null;\n    var workInProgress = null;\n    var workInProgressRootRenderLanes = NoLanes;\n    var NotSuspended = 0;\n    var SuspendedOnError = 1;\n    var SuspendedOnData = 2;\n    var SuspendedOnImmediate = 3;\n    var SuspendedOnInstance = 4;\n    var SuspendedOnInstanceAndReadyToContinue = 5;\n    var SuspendedOnDeprecatedThrowPromise = 6;\n    var SuspendedAndReadyToContinue = 7;\n    var SuspendedOnHydration = 8;\n    var workInProgressSuspendedReason = NotSuspended;\n    var workInProgressThrownValue = null;\n    var workInProgressRootDidAttachPingListener = false;\n    var entangledRenderLanes = NoLanes;\n    var workInProgressRootExitStatus = RootInProgress;\n    var workInProgressRootFatalError = null;\n    var workInProgressRootSkippedLanes = NoLanes;\n    var workInProgressRootInterleavedUpdatedLanes = NoLanes;\n    var workInProgressRootPingedLanes = NoLanes;\n    var workInProgressDeferredLane = NoLane;\n    var workInProgressRootConcurrentErrors = null;\n    var workInProgressRootRecoverableErrors = null;\n    var globalMostRecentFallbackTime = 0;\n    var FALLBACK_THROTTLE_MS = 300;\n    var workInProgressRootRenderTargetTime = Infinity;\n    var RENDER_TIMEOUT_MS = 500;\n    var workInProgressTransitions = null;\n    function resetRenderTimer() {\n      workInProgressRootRenderTargetTime = now$1() + RENDER_TIMEOUT_MS;\n    }\n    function getRenderTargetTime() {\n      return workInProgressRootRenderTargetTime;\n    }\n    var hasUncaughtError = false;\n    var firstUncaughtError = null;\n    var legacyErrorBoundariesThatAlreadyFailed = null;\n    var rootDoesHavePassiveEffects = false;\n    var rootWithPendingPassiveEffects = null;\n    var pendingPassiveEffectsLanes = NoLanes;\n    var pendingPassiveProfilerEffects = [];\n    var NESTED_UPDATE_LIMIT = 50;\n    var nestedUpdateCount = 0;\n    var rootWithNestedUpdates = null;\n    var isFlushingPassiveEffects = false;\n    var didScheduleUpdateDuringPassiveEffects = false;\n    var NESTED_PASSIVE_UPDATE_LIMIT = 50;\n    var nestedPassiveUpdateCount = 0;\n    var rootWithPassiveNestedUpdates = null;\n    var isRunningInsertionEffect = false;\n    function getWorkInProgressRoot() {\n      return workInProgressRoot;\n    }\n    function getWorkInProgressRootRenderLanes() {\n      return workInProgressRootRenderLanes;\n    }\n    function isWorkLoopSuspendedOnData() {\n      return workInProgressSuspendedReason === SuspendedOnData;\n    }\n    function requestUpdateLane(fiber) {\n      var mode = fiber.mode;\n      if ((mode & ConcurrentMode) === NoMode) {\n        return SyncLane;\n      } else if ((executionContext & RenderContext) !== NoContext && workInProgressRootRenderLanes !== NoLanes) {\n        return pickArbitraryLane(workInProgressRootRenderLanes);\n      }\n      var transition = requestCurrentTransition();\n      if (transition !== null) {\n        {\n          var batchConfigTransition = ReactCurrentBatchConfig.transition;\n          if (!batchConfigTransition._updatedFibers) {\n            batchConfigTransition._updatedFibers = new Set();\n          }\n          batchConfigTransition._updatedFibers.add(fiber);\n        }\n        var actionScopeLane = peekEntangledActionLane();\n        return actionScopeLane !== NoLane ? actionScopeLane : requestTransitionLane();\n      }\n      var updateLane = getCurrentUpdatePriority();\n      if (updateLane !== NoLane) {\n        return updateLane;\n      }\n      var eventLane = getCurrentEventPriority();\n      return eventLane;\n    }\n    function requestRetryLane(fiber) {\n      var mode = fiber.mode;\n      if ((mode & ConcurrentMode) === NoMode) {\n        return SyncLane;\n      }\n      return claimNextRetryLane();\n    }\n    function requestDeferredLane() {\n      if (workInProgressDeferredLane === NoLane) {\n        var isPrerendering = includesSomeLane(workInProgressRootRenderLanes, OffscreenLane) && !getIsHydrating();\n        if (isPrerendering) {\n          workInProgressDeferredLane = OffscreenLane;\n        } else {\n          workInProgressDeferredLane = claimNextTransitionLane();\n        }\n      }\n      var suspenseHandler = getSuspenseHandler();\n      if (suspenseHandler !== null) {\n        suspenseHandler.flags |= DidDefer;\n      }\n      return workInProgressDeferredLane;\n    }\n    function peekDeferredLane() {\n      return workInProgressDeferredLane;\n    }\n    function scheduleUpdateOnFiber(root, fiber, lane) {\n      {\n        if (isRunningInsertionEffect) {\n          error(\"useInsertionEffect must not schedule updates.\");\n        }\n      }\n      {\n        if (isFlushingPassiveEffects) {\n          didScheduleUpdateDuringPassiveEffects = true;\n        }\n      }\n      if (root === workInProgressRoot && workInProgressSuspendedReason === SuspendedOnData || root.cancelPendingCommit !== null) {\n        prepareFreshStack(root, NoLanes);\n        markRootSuspended(root, workInProgressRootRenderLanes, workInProgressDeferredLane);\n      }\n      markRootUpdated(root, lane);\n      if ((executionContext & RenderContext) !== NoLanes && root === workInProgressRoot) {\n        warnAboutRenderPhaseUpdatesInDEV(fiber);\n      } else {\n        {\n          if (isDevToolsPresent) {\n            addFiberToLanesMap(root, fiber, lane);\n          }\n        }\n        warnIfUpdatesNotWrappedWithActDEV(fiber);\n        if (root === workInProgressRoot) {\n          if ((executionContext & RenderContext) === NoContext) {\n            workInProgressRootInterleavedUpdatedLanes = mergeLanes(workInProgressRootInterleavedUpdatedLanes, lane);\n          }\n          if (workInProgressRootExitStatus === RootSuspendedWithDelay) {\n            markRootSuspended(root, workInProgressRootRenderLanes, workInProgressDeferredLane);\n          }\n        }\n        ensureRootIsScheduled(root);\n        if (lane === SyncLane && executionContext === NoContext && (fiber.mode & ConcurrentMode) === NoMode) {\n          if (ReactCurrentActQueue.isBatchingLegacy) ;else {\n            resetRenderTimer();\n            flushSyncWorkOnLegacyRootsOnly();\n          }\n        }\n      }\n    }\n    function isUnsafeClassRenderPhaseUpdate(fiber) {\n      return (executionContext & RenderContext) !== NoContext;\n    }\n    function performConcurrentWorkOnRoot(root, didTimeout) {\n      {\n        resetNestedUpdateFlag();\n      }\n      if ((executionContext & (RenderContext | CommitContext)) !== NoContext) {\n        throw new Error(\"Should not already be working.\");\n      }\n      var originalCallbackNode = root.callbackNode;\n      var didFlushPassiveEffects = flushPassiveEffects();\n      if (didFlushPassiveEffects) {\n        if (root.callbackNode !== originalCallbackNode) {\n          return null;\n        }\n      }\n      var lanes = getNextLanes(root, root === workInProgressRoot ? workInProgressRootRenderLanes : NoLanes);\n      if (lanes === NoLanes) {\n        return null;\n      }\n      var shouldTimeSlice = !includesBlockingLane(root, lanes) && !includesExpiredLane(root, lanes) && !didTimeout;\n      var exitStatus = shouldTimeSlice ? renderRootConcurrent(root, lanes) : renderRootSync(root, lanes);\n      if (exitStatus !== RootInProgress) {\n        var renderWasConcurrent = shouldTimeSlice;\n        do {\n          if (exitStatus === RootDidNotComplete) {\n            markRootSuspended(root, lanes, NoLane);\n          } else {\n            var finishedWork = root.current.alternate;\n            if (renderWasConcurrent && !isRenderConsistentWithExternalStores(finishedWork)) {\n              exitStatus = renderRootSync(root, lanes);\n              renderWasConcurrent = false;\n              continue;\n            }\n            if (exitStatus === RootErrored) {\n              var originallyAttemptedLanes = lanes;\n              var errorRetryLanes = getLanesToRetrySynchronouslyOnError(root, originallyAttemptedLanes);\n              if (errorRetryLanes !== NoLanes) {\n                lanes = errorRetryLanes;\n                exitStatus = recoverFromConcurrentError(root, originallyAttemptedLanes, errorRetryLanes);\n                renderWasConcurrent = false;\n              }\n            }\n            if (exitStatus === RootFatalErrored) {\n              var fatalError = workInProgressRootFatalError;\n              prepareFreshStack(root, NoLanes);\n              markRootSuspended(root, lanes, NoLane);\n              ensureRootIsScheduled(root);\n              throw fatalError;\n            }\n            root.finishedWork = finishedWork;\n            root.finishedLanes = lanes;\n            finishConcurrentRender(root, exitStatus, finishedWork, lanes);\n          }\n          break;\n        } while (true);\n      }\n      ensureRootIsScheduled(root);\n      return getContinuationForRoot(root, originalCallbackNode);\n    }\n    function recoverFromConcurrentError(root, originallyAttemptedLanes, errorRetryLanes) {\n      var errorsFromFirstAttempt = workInProgressRootConcurrentErrors;\n      var wasRootDehydrated = isRootDehydrated(root);\n      if (wasRootDehydrated) {\n        var rootWorkInProgress = prepareFreshStack(root, errorRetryLanes);\n        rootWorkInProgress.flags |= ForceClientRender;\n        {\n          errorHydratingContainer();\n        }\n      }\n      var exitStatus = renderRootSync(root, errorRetryLanes);\n      if (exitStatus !== RootErrored) {\n        if (workInProgressRootDidAttachPingListener && !wasRootDehydrated) {\n          root.errorRecoveryDisabledLanes = mergeLanes(root.errorRecoveryDisabledLanes, originallyAttemptedLanes);\n          workInProgressRootInterleavedUpdatedLanes |= originallyAttemptedLanes;\n          return RootSuspendedWithDelay;\n        }\n        var errorsFromSecondAttempt = workInProgressRootRecoverableErrors;\n        workInProgressRootRecoverableErrors = errorsFromFirstAttempt;\n        if (errorsFromSecondAttempt !== null) {\n          queueRecoverableErrors(errorsFromSecondAttempt);\n        }\n      }\n      return exitStatus;\n    }\n    function queueRecoverableErrors(errors) {\n      if (workInProgressRootRecoverableErrors === null) {\n        workInProgressRootRecoverableErrors = errors;\n      } else {\n        workInProgressRootRecoverableErrors.push.apply(workInProgressRootRecoverableErrors, errors);\n      }\n    }\n    function finishConcurrentRender(root, exitStatus, finishedWork, lanes) {\n      switch (exitStatus) {\n        case RootInProgress:\n        case RootFatalErrored:\n          {\n            throw new Error(\"Root did not complete. This is a bug in React.\");\n          }\n        case RootSuspendedWithDelay:\n          {\n            if (includesOnlyTransitions(lanes)) {\n              markRootSuspended(root, lanes, workInProgressDeferredLane);\n              return;\n            }\n            break;\n          }\n        case RootErrored:\n        case RootSuspended:\n        case RootCompleted:\n          {\n            break;\n          }\n        default:\n          {\n            throw new Error(\"Unknown root exit status.\");\n          }\n      }\n      if (shouldForceFlushFallbacksInDEV()) {\n        commitRoot(root, workInProgressRootRecoverableErrors, workInProgressTransitions, workInProgressDeferredLane);\n      } else {\n        if (includesOnlyRetries(lanes) && exitStatus === RootSuspended) {\n          var msUntilTimeout = globalMostRecentFallbackTime + FALLBACK_THROTTLE_MS - now$1();\n          if (msUntilTimeout > 10) {\n            markRootSuspended(root, lanes, workInProgressDeferredLane);\n            var nextLanes = getNextLanes(root, NoLanes);\n            if (nextLanes !== NoLanes) {\n              return;\n            }\n            root.timeoutHandle = scheduleTimeout(commitRootWhenReady.bind(null, root, finishedWork, workInProgressRootRecoverableErrors, workInProgressTransitions, lanes, workInProgressDeferredLane), msUntilTimeout);\n            return;\n          }\n        }\n        commitRootWhenReady(root, finishedWork, workInProgressRootRecoverableErrors, workInProgressTransitions, lanes, workInProgressDeferredLane);\n      }\n    }\n    function commitRootWhenReady(root, finishedWork, recoverableErrors, transitions, lanes, spawnedLane) {\n      if (includesOnlyNonUrgentLanes(lanes)) {\n        accumulateSuspenseyCommit(finishedWork);\n        var schedulePendingCommit = waitForCommitToBeReady();\n        if (schedulePendingCommit !== null) {\n          root.cancelPendingCommit = schedulePendingCommit(commitRoot.bind(null, root, recoverableErrors, transitions));\n          markRootSuspended(root, lanes, spawnedLane);\n          return;\n        }\n      }\n      commitRoot(root, recoverableErrors, transitions, spawnedLane);\n    }\n    function isRenderConsistentWithExternalStores(finishedWork) {\n      var node = finishedWork;\n      while (true) {\n        if (node.flags & StoreConsistency) {\n          var updateQueue = node.updateQueue;\n          if (updateQueue !== null) {\n            var checks = updateQueue.stores;\n            if (checks !== null) {\n              for (var i = 0; i < checks.length; i++) {\n                var check = checks[i];\n                var getSnapshot = check.getSnapshot;\n                var renderedValue = check.value;\n                try {\n                  if (!objectIs(getSnapshot(), renderedValue)) {\n                    return false;\n                  }\n                } catch (error) {\n                  return false;\n                }\n              }\n            }\n          }\n        }\n        var child = node.child;\n        if (node.subtreeFlags & StoreConsistency && child !== null) {\n          child.return = node;\n          node = child;\n          continue;\n        }\n        if (node === finishedWork) {\n          return true;\n        }\n        while (node.sibling === null) {\n          if (node.return === null || node.return === finishedWork) {\n            return true;\n          }\n          node = node.return;\n        }\n        node.sibling.return = node.return;\n        node = node.sibling;\n      }\n      return true;\n    }\n    function markRootSuspended(root, suspendedLanes, spawnedLane) {\n      suspendedLanes = removeLanes(suspendedLanes, workInProgressRootPingedLanes);\n      suspendedLanes = removeLanes(suspendedLanes, workInProgressRootInterleavedUpdatedLanes);\n      markRootSuspended$1(root, suspendedLanes, spawnedLane);\n    }\n    function performSyncWorkOnRoot(root, lanes) {\n      if ((executionContext & (RenderContext | CommitContext)) !== NoContext) {\n        throw new Error(\"Should not already be working.\");\n      }\n      var didFlushPassiveEffects = flushPassiveEffects();\n      if (didFlushPassiveEffects) {\n        ensureRootIsScheduled(root);\n        return null;\n      }\n      {\n        syncNestedUpdateFlag();\n      }\n      var exitStatus = renderRootSync(root, lanes);\n      if (root.tag !== LegacyRoot && exitStatus === RootErrored) {\n        var originallyAttemptedLanes = lanes;\n        var errorRetryLanes = getLanesToRetrySynchronouslyOnError(root, originallyAttemptedLanes);\n        if (errorRetryLanes !== NoLanes) {\n          lanes = errorRetryLanes;\n          exitStatus = recoverFromConcurrentError(root, originallyAttemptedLanes, errorRetryLanes);\n        }\n      }\n      if (exitStatus === RootFatalErrored) {\n        var fatalError = workInProgressRootFatalError;\n        prepareFreshStack(root, NoLanes);\n        markRootSuspended(root, lanes, NoLane);\n        ensureRootIsScheduled(root);\n        throw fatalError;\n      }\n      if (exitStatus === RootDidNotComplete) {\n        markRootSuspended(root, lanes, workInProgressDeferredLane);\n        ensureRootIsScheduled(root);\n        return null;\n      }\n      var finishedWork = root.current.alternate;\n      root.finishedWork = finishedWork;\n      root.finishedLanes = lanes;\n      commitRoot(root, workInProgressRootRecoverableErrors, workInProgressTransitions, workInProgressDeferredLane);\n      ensureRootIsScheduled(root);\n      return null;\n    }\n    function getExecutionContext() {\n      return executionContext;\n    }\n    function batchedUpdates(fn, a) {\n      var prevExecutionContext = executionContext;\n      executionContext |= BatchedContext;\n      try {\n        return fn(a);\n      } finally {\n        executionContext = prevExecutionContext;\n        if (executionContext === NoContext && !ReactCurrentActQueue.isBatchingLegacy) {\n          resetRenderTimer();\n          flushSyncWorkOnLegacyRootsOnly();\n        }\n      }\n    }\n    function flushSync(fn) {\n      if (rootWithPendingPassiveEffects !== null && rootWithPendingPassiveEffects.tag === LegacyRoot && (executionContext & (RenderContext | CommitContext)) === NoContext) {\n        flushPassiveEffects();\n      }\n      var prevExecutionContext = executionContext;\n      executionContext |= BatchedContext;\n      var prevTransition = ReactCurrentBatchConfig.transition;\n      var previousPriority = getCurrentUpdatePriority();\n      try {\n        ReactCurrentBatchConfig.transition = null;\n        setCurrentUpdatePriority(DiscreteEventPriority);\n        if (fn) {\n          return fn();\n        } else {\n          return undefined;\n        }\n      } finally {\n        setCurrentUpdatePriority(previousPriority);\n        ReactCurrentBatchConfig.transition = prevTransition;\n        executionContext = prevExecutionContext;\n        if ((executionContext & (RenderContext | CommitContext)) === NoContext) {\n          flushSyncWorkOnAllRoots();\n        }\n      }\n    }\n    function setEntangledRenderLanes(newEntangledRenderLanes) {\n      entangledRenderLanes = newEntangledRenderLanes;\n    }\n    function getEntangledRenderLanes() {\n      return entangledRenderLanes;\n    }\n    function resetWorkInProgressStack() {\n      if (workInProgress === null) return;\n      var interruptedWork;\n      if (workInProgressSuspendedReason === NotSuspended) {\n        interruptedWork = workInProgress.return;\n      } else {\n        resetSuspendedWorkLoopOnUnwind(workInProgress);\n        interruptedWork = workInProgress;\n      }\n      while (interruptedWork !== null) {\n        var current = interruptedWork.alternate;\n        unwindInterruptedWork(current, interruptedWork);\n        interruptedWork = interruptedWork.return;\n      }\n      workInProgress = null;\n    }\n    function prepareFreshStack(root, lanes) {\n      root.finishedWork = null;\n      root.finishedLanes = NoLanes;\n      var timeoutHandle = root.timeoutHandle;\n      if (timeoutHandle !== noTimeout) {\n        root.timeoutHandle = noTimeout;\n        cancelTimeout(timeoutHandle);\n      }\n      var cancelPendingCommit = root.cancelPendingCommit;\n      if (cancelPendingCommit !== null) {\n        root.cancelPendingCommit = null;\n        cancelPendingCommit();\n      }\n      resetWorkInProgressStack();\n      workInProgressRoot = root;\n      var rootWorkInProgress = createWorkInProgress(root.current, null);\n      workInProgress = rootWorkInProgress;\n      workInProgressRootRenderLanes = lanes;\n      workInProgressSuspendedReason = NotSuspended;\n      workInProgressThrownValue = null;\n      workInProgressRootDidAttachPingListener = false;\n      workInProgressRootExitStatus = RootInProgress;\n      workInProgressRootFatalError = null;\n      workInProgressRootSkippedLanes = NoLanes;\n      workInProgressRootInterleavedUpdatedLanes = NoLanes;\n      workInProgressRootPingedLanes = NoLanes;\n      workInProgressDeferredLane = NoLane;\n      workInProgressRootConcurrentErrors = null;\n      workInProgressRootRecoverableErrors = null;\n      entangledRenderLanes = getEntangledLanes(root, lanes);\n      finishQueueingConcurrentUpdates();\n      {\n        ReactStrictModeWarnings.discardPendingWarnings();\n      }\n      return rootWorkInProgress;\n    }\n    function resetSuspendedWorkLoopOnUnwind(fiber) {\n      resetContextDependencies();\n      resetHooksOnUnwind(fiber);\n      resetChildReconcilerOnUnwind();\n    }\n    function handleThrow(root, thrownValue) {\n      resetHooksAfterThrow();\n      resetCurrentFiber();\n      ReactCurrentOwner$1.current = null;\n      if (thrownValue === SuspenseException) {\n        thrownValue = getSuspendedThenable();\n        workInProgressSuspendedReason = shouldRemainOnPreviousScreen() && !includesNonIdleWork(workInProgressRootSkippedLanes) && !includesNonIdleWork(workInProgressRootInterleavedUpdatedLanes) ? SuspendedOnData : SuspendedOnImmediate;\n      } else if (thrownValue === SuspenseyCommitException) {\n        thrownValue = getSuspendedThenable();\n        workInProgressSuspendedReason = SuspendedOnInstance;\n      } else if (thrownValue === SelectiveHydrationException) {\n        workInProgressSuspendedReason = SuspendedOnHydration;\n      } else {\n        var isWakeable = thrownValue !== null && typeof thrownValue === \"object\" && typeof thrownValue.then === \"function\";\n        workInProgressSuspendedReason = isWakeable ? SuspendedOnDeprecatedThrowPromise : SuspendedOnError;\n      }\n      workInProgressThrownValue = thrownValue;\n      var erroredWork = workInProgress;\n      if (erroredWork === null) {\n        workInProgressRootExitStatus = RootFatalErrored;\n        workInProgressRootFatalError = thrownValue;\n        return;\n      }\n      if (erroredWork.mode & ProfileMode) {\n        stopProfilerTimerIfRunningAndRecordDelta(erroredWork, true);\n      }\n    }\n    function shouldRemainOnPreviousScreen() {\n      var handler = getSuspenseHandler();\n      if (handler === null) {\n        return true;\n      }\n      if (includesOnlyTransitions(workInProgressRootRenderLanes)) {\n        if (getShellBoundary() === null) {\n          return true;\n        } else {\n          return false;\n        }\n      }\n      if (includesOnlyRetries(workInProgressRootRenderLanes) || includesSomeLane(workInProgressRootRenderLanes, OffscreenLane)) {\n        return handler === getShellBoundary();\n      }\n      return false;\n    }\n    function pushDispatcher(container) {\n      var prevDispatcher = ReactCurrentDispatcher.current;\n      ReactCurrentDispatcher.current = ContextOnlyDispatcher;\n      if (prevDispatcher === null) {\n        return ContextOnlyDispatcher;\n      } else {\n        return prevDispatcher;\n      }\n    }\n    function popDispatcher(prevDispatcher) {\n      ReactCurrentDispatcher.current = prevDispatcher;\n    }\n    function markCommitTimeOfFallback() {\n      globalMostRecentFallbackTime = now$1();\n    }\n    function markSkippedUpdateLanes(lane) {\n      workInProgressRootSkippedLanes = mergeLanes(lane, workInProgressRootSkippedLanes);\n    }\n    function renderDidSuspend() {\n      if (workInProgressRootExitStatus === RootInProgress) {\n        workInProgressRootExitStatus = RootSuspended;\n      }\n    }\n    function renderDidSuspendDelayIfPossible() {\n      workInProgressRootExitStatus = RootSuspendedWithDelay;\n      if ((includesNonIdleWork(workInProgressRootSkippedLanes) || includesNonIdleWork(workInProgressRootInterleavedUpdatedLanes)) && workInProgressRoot !== null) {\n        markRootSuspended(workInProgressRoot, workInProgressRootRenderLanes, workInProgressDeferredLane);\n      }\n    }\n    function renderDidError(error) {\n      if (workInProgressRootExitStatus !== RootSuspendedWithDelay) {\n        workInProgressRootExitStatus = RootErrored;\n      }\n      if (workInProgressRootConcurrentErrors === null) {\n        workInProgressRootConcurrentErrors = [error];\n      } else {\n        workInProgressRootConcurrentErrors.push(error);\n      }\n    }\n    function renderHasNotSuspendedYet() {\n      return workInProgressRootExitStatus === RootInProgress;\n    }\n    function renderRootSync(root, lanes) {\n      var prevExecutionContext = executionContext;\n      executionContext |= RenderContext;\n      var prevDispatcher = pushDispatcher();\n      if (workInProgressRoot !== root || workInProgressRootRenderLanes !== lanes) {\n        {\n          if (isDevToolsPresent) {\n            var memoizedUpdaters = root.memoizedUpdaters;\n            if (memoizedUpdaters.size > 0) {\n              restorePendingUpdaters(root, workInProgressRootRenderLanes);\n              memoizedUpdaters.clear();\n            }\n            movePendingFibersToMemoized(root, lanes);\n          }\n        }\n        workInProgressTransitions = getTransitionsForLanes();\n        prepareFreshStack(root, lanes);\n      }\n      var didSuspendInShell = false;\n      outer: do {\n        try {\n          if (workInProgressSuspendedReason !== NotSuspended && workInProgress !== null) {\n            var unitOfWork = workInProgress;\n            var thrownValue = workInProgressThrownValue;\n            switch (workInProgressSuspendedReason) {\n              case SuspendedOnHydration:\n                {\n                  resetWorkInProgressStack();\n                  workInProgressRootExitStatus = RootDidNotComplete;\n                  break outer;\n                }\n              case SuspendedOnImmediate:\n              case SuspendedOnData:\n                {\n                  if (!didSuspendInShell && getSuspenseHandler() === null) {\n                    didSuspendInShell = true;\n                  }\n                }\n              default:\n                {\n                  workInProgressSuspendedReason = NotSuspended;\n                  workInProgressThrownValue = null;\n                  throwAndUnwindWorkLoop(root, unitOfWork, thrownValue);\n                  break;\n                }\n            }\n          }\n          workLoopSync();\n          break;\n        } catch (thrownValue) {\n          handleThrow(root, thrownValue);\n        }\n      } while (true);\n      if (didSuspendInShell) {\n        root.shellSuspendCounter++;\n      }\n      resetContextDependencies();\n      executionContext = prevExecutionContext;\n      popDispatcher(prevDispatcher);\n      if (workInProgress !== null) {\n        throw new Error(\"Cannot commit an incomplete root. This error is likely caused by a \" + \"bug in React. Please file an issue.\");\n      }\n      workInProgressRoot = null;\n      workInProgressRootRenderLanes = NoLanes;\n      finishQueueingConcurrentUpdates();\n      return workInProgressRootExitStatus;\n    }\n    function workLoopSync() {\n      while (workInProgress !== null) {\n        performUnitOfWork(workInProgress);\n      }\n    }\n    function renderRootConcurrent(root, lanes) {\n      var prevExecutionContext = executionContext;\n      executionContext |= RenderContext;\n      var prevDispatcher = pushDispatcher();\n      if (workInProgressRoot !== root || workInProgressRootRenderLanes !== lanes) {\n        {\n          if (isDevToolsPresent) {\n            var memoizedUpdaters = root.memoizedUpdaters;\n            if (memoizedUpdaters.size > 0) {\n              restorePendingUpdaters(root, workInProgressRootRenderLanes);\n              memoizedUpdaters.clear();\n            }\n            movePendingFibersToMemoized(root, lanes);\n          }\n        }\n        workInProgressTransitions = getTransitionsForLanes();\n        resetRenderTimer();\n        prepareFreshStack(root, lanes);\n      }\n      outer: do {\n        try {\n          if (workInProgressSuspendedReason !== NotSuspended && workInProgress !== null) {\n            var unitOfWork = workInProgress;\n            var thrownValue = workInProgressThrownValue;\n            resumeOrUnwind: switch (workInProgressSuspendedReason) {\n              case SuspendedOnError:\n                {\n                  workInProgressSuspendedReason = NotSuspended;\n                  workInProgressThrownValue = null;\n                  throwAndUnwindWorkLoop(root, unitOfWork, thrownValue);\n                  break;\n                }\n              case SuspendedOnData:\n                {\n                  var thenable = thrownValue;\n                  if (isThenableResolved(thenable)) {\n                    workInProgressSuspendedReason = NotSuspended;\n                    workInProgressThrownValue = null;\n                    replaySuspendedUnitOfWork(unitOfWork);\n                    break;\n                  }\n                  var onResolution = function () {\n                    if (workInProgressSuspendedReason === SuspendedOnData && workInProgressRoot === root) {\n                      workInProgressSuspendedReason = SuspendedAndReadyToContinue;\n                    }\n                    ensureRootIsScheduled(root);\n                  };\n                  thenable.then(onResolution, onResolution);\n                  break outer;\n                }\n              case SuspendedOnImmediate:\n                {\n                  workInProgressSuspendedReason = SuspendedAndReadyToContinue;\n                  break outer;\n                }\n              case SuspendedOnInstance:\n                {\n                  workInProgressSuspendedReason = SuspendedOnInstanceAndReadyToContinue;\n                  break outer;\n                }\n              case SuspendedAndReadyToContinue:\n                {\n                  var _thenable = thrownValue;\n                  if (isThenableResolved(_thenable)) {\n                    workInProgressSuspendedReason = NotSuspended;\n                    workInProgressThrownValue = null;\n                    replaySuspendedUnitOfWork(unitOfWork);\n                  } else {\n                    workInProgressSuspendedReason = NotSuspended;\n                    workInProgressThrownValue = null;\n                    throwAndUnwindWorkLoop(root, unitOfWork, thrownValue);\n                  }\n                  break;\n                }\n              case SuspendedOnInstanceAndReadyToContinue:\n                {\n                  switch (workInProgress.tag) {\n                    case HostComponent:\n                    case HostHoistable:\n                    case HostSingleton:\n                      {\n                        var hostFiber = workInProgress;\n                        var type = hostFiber.type;\n                        var props = hostFiber.pendingProps;\n                        var isReady = preloadInstance(type, props);\n                        if (isReady) {\n                          workInProgressSuspendedReason = NotSuspended;\n                          workInProgressThrownValue = null;\n                          var sibling = hostFiber.sibling;\n                          if (sibling !== null) {\n                            workInProgress = sibling;\n                          } else {\n                            var returnFiber = hostFiber.return;\n                            if (returnFiber !== null) {\n                              workInProgress = returnFiber;\n                              completeUnitOfWork(returnFiber);\n                            } else {\n                              workInProgress = null;\n                            }\n                          }\n                          break resumeOrUnwind;\n                        }\n                        break;\n                      }\n                    default:\n                      {\n                        if (true) {\n                          error(\"Unexpected type of fiber triggered a suspensey commit. \" + \"This is a bug in React.\");\n                        }\n                        break;\n                      }\n                  }\n                  workInProgressSuspendedReason = NotSuspended;\n                  workInProgressThrownValue = null;\n                  throwAndUnwindWorkLoop(root, unitOfWork, thrownValue);\n                  break;\n                }\n              case SuspendedOnDeprecatedThrowPromise:\n                {\n                  workInProgressSuspendedReason = NotSuspended;\n                  workInProgressThrownValue = null;\n                  throwAndUnwindWorkLoop(root, unitOfWork, thrownValue);\n                  break;\n                }\n              case SuspendedOnHydration:\n                {\n                  resetWorkInProgressStack();\n                  workInProgressRootExitStatus = RootDidNotComplete;\n                  break outer;\n                }\n              default:\n                {\n                  throw new Error(\"Unexpected SuspendedReason. This is a bug in React.\");\n                }\n            }\n          }\n          if (true && ReactCurrentActQueue.current !== null) {\n            workLoopSync();\n          } else {\n            workLoopConcurrent();\n          }\n          break;\n        } catch (thrownValue) {\n          handleThrow(root, thrownValue);\n        }\n      } while (true);\n      resetContextDependencies();\n      popDispatcher(prevDispatcher);\n      executionContext = prevExecutionContext;\n      if (workInProgress !== null) {\n        return RootInProgress;\n      } else {\n        workInProgressRoot = null;\n        workInProgressRootRenderLanes = NoLanes;\n        finishQueueingConcurrentUpdates();\n        return workInProgressRootExitStatus;\n      }\n    }\n    function workLoopConcurrent() {\n      while (workInProgress !== null && !shouldYield()) {\n        performUnitOfWork(workInProgress);\n      }\n    }\n    function performUnitOfWork(unitOfWork) {\n      var current = unitOfWork.alternate;\n      setCurrentFiber(unitOfWork);\n      var next;\n      if ((unitOfWork.mode & ProfileMode) !== NoMode) {\n        startProfilerTimer(unitOfWork);\n        next = beginWork(current, unitOfWork, entangledRenderLanes);\n        stopProfilerTimerIfRunningAndRecordDelta(unitOfWork, true);\n      } else {\n        next = beginWork(current, unitOfWork, entangledRenderLanes);\n      }\n      resetCurrentFiber();\n      unitOfWork.memoizedProps = unitOfWork.pendingProps;\n      if (next === null) {\n        completeUnitOfWork(unitOfWork);\n      } else {\n        workInProgress = next;\n      }\n      ReactCurrentOwner$1.current = null;\n    }\n    function replaySuspendedUnitOfWork(unitOfWork) {\n      var current = unitOfWork.alternate;\n      setCurrentFiber(unitOfWork);\n      var next;\n      setCurrentFiber(unitOfWork);\n      var isProfilingMode = (unitOfWork.mode & ProfileMode) !== NoMode;\n      if (isProfilingMode) {\n        startProfilerTimer(unitOfWork);\n      }\n      switch (unitOfWork.tag) {\n        case IndeterminateComponent:\n          {\n            unitOfWork.tag = FunctionComponent;\n          }\n        case SimpleMemoComponent:\n        case FunctionComponent:\n          {\n            var Component = unitOfWork.type;\n            var unresolvedProps = unitOfWork.pendingProps;\n            var resolvedProps = unitOfWork.elementType === Component ? unresolvedProps : resolveDefaultProps(Component, unresolvedProps);\n            var context;\n            {\n              var unmaskedContext = getUnmaskedContext(unitOfWork, Component, true);\n              context = getMaskedContext(unitOfWork, unmaskedContext);\n            }\n            next = replayFunctionComponent(current, unitOfWork, resolvedProps, Component, context, workInProgressRootRenderLanes);\n            break;\n          }\n        case ForwardRef:\n          {\n            var _Component = unitOfWork.type.render;\n            var _unresolvedProps = unitOfWork.pendingProps;\n            var _resolvedProps = unitOfWork.elementType === _Component ? _unresolvedProps : resolveDefaultProps(_Component, _unresolvedProps);\n            next = replayFunctionComponent(current, unitOfWork, _resolvedProps, _Component, unitOfWork.ref, workInProgressRootRenderLanes);\n            break;\n          }\n        case HostComponent:\n          {\n            resetHooksOnUnwind(unitOfWork);\n          }\n        default:\n          {\n            unwindInterruptedWork(current, unitOfWork);\n            unitOfWork = workInProgress = resetWorkInProgress(unitOfWork, entangledRenderLanes);\n            next = beginWork(current, unitOfWork, entangledRenderLanes);\n            break;\n          }\n      }\n      if (isProfilingMode) {\n        stopProfilerTimerIfRunningAndRecordDelta(unitOfWork, true);\n      }\n      resetCurrentFiber();\n      unitOfWork.memoizedProps = unitOfWork.pendingProps;\n      if (next === null) {\n        completeUnitOfWork(unitOfWork);\n      } else {\n        workInProgress = next;\n      }\n      ReactCurrentOwner$1.current = null;\n    }\n    function throwAndUnwindWorkLoop(root, unitOfWork, thrownValue) {\n      resetSuspendedWorkLoopOnUnwind(unitOfWork);\n      var returnFiber = unitOfWork.return;\n      try {\n        var didFatal = throwException(root, returnFiber, unitOfWork, thrownValue, workInProgressRootRenderLanes);\n        if (didFatal) {\n          panicOnRootError(thrownValue);\n          return;\n        }\n      } catch (error) {\n        if (returnFiber !== null) {\n          workInProgress = returnFiber;\n          throw error;\n        } else {\n          panicOnRootError(thrownValue);\n          return;\n        }\n      }\n      if (unitOfWork.flags & Incomplete) {\n        unwindUnitOfWork(unitOfWork);\n      } else {\n        completeUnitOfWork(unitOfWork);\n      }\n    }\n    function panicOnRootError(error) {\n      workInProgressRootExitStatus = RootFatalErrored;\n      workInProgressRootFatalError = error;\n      workInProgress = null;\n    }\n    function completeUnitOfWork(unitOfWork) {\n      var completedWork = unitOfWork;\n      do {\n        {\n          if ((completedWork.flags & Incomplete) !== NoFlags$1) {\n            error(\"Internal React error: Expected this fiber to be complete, but \" + \"it isn't. It should have been unwound. This is a bug in React.\");\n          }\n        }\n        var current = completedWork.alternate;\n        var returnFiber = completedWork.return;\n        setCurrentFiber(completedWork);\n        var next = void 0;\n        if ((completedWork.mode & ProfileMode) === NoMode) {\n          next = completeWork(current, completedWork, entangledRenderLanes);\n        } else {\n          startProfilerTimer(completedWork);\n          next = completeWork(current, completedWork, entangledRenderLanes);\n          stopProfilerTimerIfRunningAndRecordDelta(completedWork, false);\n        }\n        resetCurrentFiber();\n        if (next !== null) {\n          workInProgress = next;\n          return;\n        }\n        var siblingFiber = completedWork.sibling;\n        if (siblingFiber !== null) {\n          workInProgress = siblingFiber;\n          return;\n        }\n        completedWork = returnFiber;\n        workInProgress = completedWork;\n      } while (completedWork !== null);\n      if (workInProgressRootExitStatus === RootInProgress) {\n        workInProgressRootExitStatus = RootCompleted;\n      }\n    }\n    function unwindUnitOfWork(unitOfWork) {\n      var incompleteWork = unitOfWork;\n      do {\n        var current = incompleteWork.alternate;\n        var next = unwindWork(current, incompleteWork);\n        if (next !== null) {\n          next.flags &= HostEffectMask;\n          workInProgress = next;\n          return;\n        }\n        if ((incompleteWork.mode & ProfileMode) !== NoMode) {\n          stopProfilerTimerIfRunningAndRecordDelta(incompleteWork, false);\n          var actualDuration = incompleteWork.actualDuration;\n          var child = incompleteWork.child;\n          while (child !== null) {\n            actualDuration += child.actualDuration;\n            child = child.sibling;\n          }\n          incompleteWork.actualDuration = actualDuration;\n        }\n        var returnFiber = incompleteWork.return;\n        if (returnFiber !== null) {\n          returnFiber.flags |= Incomplete;\n          returnFiber.subtreeFlags = NoFlags$1;\n          returnFiber.deletions = null;\n        }\n        incompleteWork = returnFiber;\n        workInProgress = incompleteWork;\n      } while (incompleteWork !== null);\n      workInProgressRootExitStatus = RootDidNotComplete;\n      workInProgress = null;\n    }\n    function commitRoot(root, recoverableErrors, transitions, spawnedLane) {\n      var previousUpdateLanePriority = getCurrentUpdatePriority();\n      var prevTransition = ReactCurrentBatchConfig.transition;\n      try {\n        ReactCurrentBatchConfig.transition = null;\n        setCurrentUpdatePriority(DiscreteEventPriority);\n        commitRootImpl(root, recoverableErrors, transitions, previousUpdateLanePriority, spawnedLane);\n      } finally {\n        ReactCurrentBatchConfig.transition = prevTransition;\n        setCurrentUpdatePriority(previousUpdateLanePriority);\n      }\n      return null;\n    }\n    function commitRootImpl(root, recoverableErrors, transitions, renderPriorityLevel, spawnedLane) {\n      do {\n        flushPassiveEffects();\n      } while (rootWithPendingPassiveEffects !== null);\n      flushRenderPhaseStrictModeWarningsInDEV();\n      if ((executionContext & (RenderContext | CommitContext)) !== NoContext) {\n        throw new Error(\"Should not already be working.\");\n      }\n      var finishedWork = root.finishedWork;\n      var lanes = root.finishedLanes;\n      if (finishedWork === null) {\n        return null;\n      } else {\n        {\n          if (lanes === NoLanes) {\n            error(\"root.finishedLanes should not be empty during a commit. This is a \" + \"bug in React.\");\n          }\n        }\n      }\n      root.finishedWork = null;\n      root.finishedLanes = NoLanes;\n      if (finishedWork === root.current) {\n        throw new Error(\"Cannot commit the same tree as before. This error is likely caused by \" + \"a bug in React. Please file an issue.\");\n      }\n      root.callbackNode = null;\n      root.callbackPriority = NoLane;\n      root.cancelPendingCommit = null;\n      var remainingLanes = mergeLanes(finishedWork.lanes, finishedWork.childLanes);\n      var concurrentlyUpdatedLanes = getConcurrentlyUpdatedLanes();\n      remainingLanes = mergeLanes(remainingLanes, concurrentlyUpdatedLanes);\n      markRootFinished(root, remainingLanes, spawnedLane);\n      if (root === workInProgressRoot) {\n        workInProgressRoot = null;\n        workInProgress = null;\n        workInProgressRootRenderLanes = NoLanes;\n      }\n      if ((finishedWork.subtreeFlags & PassiveMask) !== NoFlags$1 || (finishedWork.flags & PassiveMask) !== NoFlags$1) {\n        if (!rootDoesHavePassiveEffects) {\n          rootDoesHavePassiveEffects = true;\n          scheduleCallback(NormalPriority, function () {\n            flushPassiveEffects();\n            return null;\n          });\n        }\n      }\n      var subtreeHasEffects = (finishedWork.subtreeFlags & (BeforeMutationMask | MutationMask | LayoutMask | PassiveMask)) !== NoFlags$1;\n      var rootHasEffect = (finishedWork.flags & (BeforeMutationMask | MutationMask | LayoutMask | PassiveMask)) !== NoFlags$1;\n      if (subtreeHasEffects || rootHasEffect) {\n        var prevTransition = ReactCurrentBatchConfig.transition;\n        ReactCurrentBatchConfig.transition = null;\n        var previousPriority = getCurrentUpdatePriority();\n        setCurrentUpdatePriority(DiscreteEventPriority);\n        var prevExecutionContext = executionContext;\n        executionContext |= CommitContext;\n        ReactCurrentOwner$1.current = null;\n        commitBeforeMutationEffects(root, finishedWork);\n        {\n          recordCommitTime();\n        }\n        commitMutationEffects(root, finishedWork, lanes);\n        root.current = finishedWork;\n        commitLayoutEffects(finishedWork, root, lanes);\n        requestPaint();\n        executionContext = prevExecutionContext;\n        setCurrentUpdatePriority(previousPriority);\n        ReactCurrentBatchConfig.transition = prevTransition;\n      } else {\n        root.current = finishedWork;\n        {\n          recordCommitTime();\n        }\n      }\n      var rootDidHavePassiveEffects = rootDoesHavePassiveEffects;\n      if (rootDoesHavePassiveEffects) {\n        rootDoesHavePassiveEffects = false;\n        rootWithPendingPassiveEffects = root;\n        pendingPassiveEffectsLanes = lanes;\n      } else {\n        {\n          nestedPassiveUpdateCount = 0;\n          rootWithPassiveNestedUpdates = null;\n        }\n      }\n      remainingLanes = root.pendingLanes;\n      if (remainingLanes === NoLanes) {\n        legacyErrorBoundariesThatAlreadyFailed = null;\n      }\n      {\n        if (!rootDidHavePassiveEffects) {\n          commitDoubleInvokeEffectsInDEV(root, false);\n        }\n      }\n      onCommitRoot(finishedWork.stateNode, renderPriorityLevel);\n      {\n        if (isDevToolsPresent) {\n          root.memoizedUpdaters.clear();\n        }\n      }\n      ensureRootIsScheduled(root);\n      if (recoverableErrors !== null) {\n        var onRecoverableError = root.onRecoverableError;\n        for (var i = 0; i < recoverableErrors.length; i++) {\n          var recoverableError = recoverableErrors[i];\n          var errorInfo = makeErrorInfo(recoverableError.digest, recoverableError.stack);\n          onRecoverableError(recoverableError.value, errorInfo);\n        }\n      }\n      if (hasUncaughtError) {\n        hasUncaughtError = false;\n        var error$1 = firstUncaughtError;\n        firstUncaughtError = null;\n        throw error$1;\n      }\n      if (includesSyncLane(pendingPassiveEffectsLanes) && root.tag !== LegacyRoot) {\n        flushPassiveEffects();\n      }\n      remainingLanes = root.pendingLanes;\n      if (includesSomeLane(lanes, UpdateLanes) && includesSomeLane(remainingLanes, SyncUpdateLanes)) {\n        {\n          markNestedUpdateScheduled();\n        }\n        if (root === rootWithNestedUpdates) {\n          nestedUpdateCount++;\n        } else {\n          nestedUpdateCount = 0;\n          rootWithNestedUpdates = root;\n        }\n      } else {\n        nestedUpdateCount = 0;\n      }\n      flushSyncWorkOnAllRoots();\n      return null;\n    }\n    function makeErrorInfo(digest, componentStack) {\n      {\n        var errorInfo = {\n          componentStack: componentStack,\n          digest: digest\n        };\n        Object.defineProperty(errorInfo, \"digest\", {\n          configurable: false,\n          enumerable: true,\n          get: function () {\n            error('You are accessing \"digest\" from the errorInfo object passed to onRecoverableError.' + \" This property is deprecated and will be removed in a future version of React.\" + \" To access the digest of an Error look for this property on the Error instance itself.\");\n            return digest;\n          }\n        });\n        return errorInfo;\n      }\n    }\n    function flushPassiveEffects() {\n      if (rootWithPendingPassiveEffects !== null) {\n        var renderPriority = lanesToEventPriority(pendingPassiveEffectsLanes);\n        var priority = lowerEventPriority(DefaultEventPriority, renderPriority);\n        var prevTransition = ReactCurrentBatchConfig.transition;\n        var previousPriority = getCurrentUpdatePriority();\n        try {\n          ReactCurrentBatchConfig.transition = null;\n          setCurrentUpdatePriority(priority);\n          return flushPassiveEffectsImpl();\n        } finally {\n          setCurrentUpdatePriority(previousPriority);\n          ReactCurrentBatchConfig.transition = prevTransition;\n        }\n      }\n      return false;\n    }\n    function enqueuePendingPassiveProfilerEffect(fiber) {\n      {\n        pendingPassiveProfilerEffects.push(fiber);\n        if (!rootDoesHavePassiveEffects) {\n          rootDoesHavePassiveEffects = true;\n          scheduleCallback(NormalPriority, function () {\n            flushPassiveEffects();\n            return null;\n          });\n        }\n      }\n    }\n    function flushPassiveEffectsImpl() {\n      if (rootWithPendingPassiveEffects === null) {\n        return false;\n      }\n      var root = rootWithPendingPassiveEffects;\n      rootWithPendingPassiveEffects = null;\n      pendingPassiveEffectsLanes = NoLanes;\n      if ((executionContext & (RenderContext | CommitContext)) !== NoContext) {\n        throw new Error(\"Cannot flush passive effects while already rendering.\");\n      }\n      {\n        isFlushingPassiveEffects = true;\n        didScheduleUpdateDuringPassiveEffects = false;\n      }\n      var prevExecutionContext = executionContext;\n      executionContext |= CommitContext;\n      commitPassiveUnmountEffects(root.current);\n      commitPassiveMountEffects(root, root.current);\n      {\n        var profilerEffects = pendingPassiveProfilerEffects;\n        pendingPassiveProfilerEffects = [];\n        for (var i = 0; i < profilerEffects.length; i++) {\n          var fiber = profilerEffects[i];\n          commitPassiveEffectDurations(root, fiber);\n        }\n      }\n      {\n        commitDoubleInvokeEffectsInDEV(root, true);\n      }\n      executionContext = prevExecutionContext;\n      flushSyncWorkOnAllRoots();\n      {\n        if (didScheduleUpdateDuringPassiveEffects) {\n          if (root === rootWithPassiveNestedUpdates) {\n            nestedPassiveUpdateCount++;\n          } else {\n            nestedPassiveUpdateCount = 0;\n            rootWithPassiveNestedUpdates = root;\n          }\n        } else {\n          nestedPassiveUpdateCount = 0;\n        }\n        isFlushingPassiveEffects = false;\n        didScheduleUpdateDuringPassiveEffects = false;\n      }\n      onPostCommitRoot(root);\n      {\n        var stateNode = root.current.stateNode;\n        stateNode.effectDuration = 0;\n        stateNode.passiveEffectDuration = 0;\n      }\n      return true;\n    }\n    function isAlreadyFailedLegacyErrorBoundary(instance) {\n      return legacyErrorBoundariesThatAlreadyFailed !== null && legacyErrorBoundariesThatAlreadyFailed.has(instance);\n    }\n    function markLegacyErrorBoundaryAsFailed(instance) {\n      if (legacyErrorBoundariesThatAlreadyFailed === null) {\n        legacyErrorBoundariesThatAlreadyFailed = new Set([instance]);\n      } else {\n        legacyErrorBoundariesThatAlreadyFailed.add(instance);\n      }\n    }\n    function prepareToThrowUncaughtError(error) {\n      if (!hasUncaughtError) {\n        hasUncaughtError = true;\n        firstUncaughtError = error;\n      }\n    }\n    var onUncaughtError = prepareToThrowUncaughtError;\n    function captureCommitPhaseErrorOnRoot(rootFiber, sourceFiber, error) {\n      var errorInfo = createCapturedValueAtFiber(error, sourceFiber);\n      var update = createRootErrorUpdate(rootFiber, errorInfo, SyncLane);\n      var root = enqueueUpdate(rootFiber, update, SyncLane);\n      if (root !== null) {\n        markRootUpdated(root, SyncLane);\n        ensureRootIsScheduled(root);\n      }\n    }\n    function captureCommitPhaseError(sourceFiber, nearestMountedAncestor, error$1) {\n      {\n        reportUncaughtErrorInDEV(error$1);\n        setIsRunningInsertionEffect(false);\n      }\n      if (sourceFiber.tag === HostRoot) {\n        captureCommitPhaseErrorOnRoot(sourceFiber, sourceFiber, error$1);\n        return;\n      }\n      var fiber = nearestMountedAncestor;\n      while (fiber !== null) {\n        if (fiber.tag === HostRoot) {\n          captureCommitPhaseErrorOnRoot(fiber, sourceFiber, error$1);\n          return;\n        } else if (fiber.tag === ClassComponent) {\n          var ctor = fiber.type;\n          var instance = fiber.stateNode;\n          if (typeof ctor.getDerivedStateFromError === \"function\" || typeof instance.componentDidCatch === \"function\" && !isAlreadyFailedLegacyErrorBoundary(instance)) {\n            var errorInfo = createCapturedValueAtFiber(error$1, sourceFiber);\n            var update = createClassErrorUpdate(fiber, errorInfo, SyncLane);\n            var root = enqueueUpdate(fiber, update, SyncLane);\n            if (root !== null) {\n              markRootUpdated(root, SyncLane);\n              ensureRootIsScheduled(root);\n            }\n            return;\n          }\n        }\n        fiber = fiber.return;\n      }\n      {\n        error(\"Internal React error: Attempted to capture a commit phase error \" + \"inside a detached tree. This indicates a bug in React. Potential \" + \"causes include deleting the same fiber more than once, committing an \" + \"already-finished tree, or an inconsistent return pointer.\\n\\n\" + \"Error message:\\n\\n%s\", error$1);\n      }\n    }\n    function attachPingListener(root, wakeable, lanes) {\n      var pingCache = root.pingCache;\n      var threadIDs;\n      if (pingCache === null) {\n        pingCache = root.pingCache = new PossiblyWeakMap();\n        threadIDs = new Set();\n        pingCache.set(wakeable, threadIDs);\n      } else {\n        threadIDs = pingCache.get(wakeable);\n        if (threadIDs === undefined) {\n          threadIDs = new Set();\n          pingCache.set(wakeable, threadIDs);\n        }\n      }\n      if (!threadIDs.has(lanes)) {\n        workInProgressRootDidAttachPingListener = true;\n        threadIDs.add(lanes);\n        var ping = pingSuspendedRoot.bind(null, root, wakeable, lanes);\n        {\n          if (isDevToolsPresent) {\n            restorePendingUpdaters(root, lanes);\n          }\n        }\n        wakeable.then(ping, ping);\n      }\n    }\n    function pingSuspendedRoot(root, wakeable, pingedLanes) {\n      var pingCache = root.pingCache;\n      if (pingCache !== null) {\n        pingCache.delete(wakeable);\n      }\n      markRootPinged(root, pingedLanes);\n      warnIfSuspenseResolutionNotWrappedWithActDEV(root);\n      if (workInProgressRoot === root && isSubsetOfLanes(workInProgressRootRenderLanes, pingedLanes)) {\n        if (workInProgressRootExitStatus === RootSuspendedWithDelay || workInProgressRootExitStatus === RootSuspended && includesOnlyRetries(workInProgressRootRenderLanes) && now$1() - globalMostRecentFallbackTime < FALLBACK_THROTTLE_MS) {\n          if ((executionContext & RenderContext) === NoContext) {\n            prepareFreshStack(root, NoLanes);\n          }\n        } else {\n          workInProgressRootPingedLanes = mergeLanes(workInProgressRootPingedLanes, pingedLanes);\n        }\n      }\n      ensureRootIsScheduled(root);\n    }\n    function retryTimedOutBoundary(boundaryFiber, retryLane) {\n      if (retryLane === NoLane) {\n        retryLane = requestRetryLane(boundaryFiber);\n      }\n      var root = enqueueConcurrentRenderForLane(boundaryFiber, retryLane);\n      if (root !== null) {\n        markRootUpdated(root, retryLane);\n        ensureRootIsScheduled(root);\n      }\n    }\n    function retryDehydratedSuspenseBoundary(boundaryFiber) {\n      var suspenseState = boundaryFiber.memoizedState;\n      var retryLane = NoLane;\n      if (suspenseState !== null) {\n        retryLane = suspenseState.retryLane;\n      }\n      retryTimedOutBoundary(boundaryFiber, retryLane);\n    }\n    function resolveRetryWakeable(boundaryFiber, wakeable) {\n      var retryLane = NoLane;\n      var retryCache;\n      switch (boundaryFiber.tag) {\n        case SuspenseComponent:\n          retryCache = boundaryFiber.stateNode;\n          var suspenseState = boundaryFiber.memoizedState;\n          if (suspenseState !== null) {\n            retryLane = suspenseState.retryLane;\n          }\n          break;\n        case SuspenseListComponent:\n          retryCache = boundaryFiber.stateNode;\n          break;\n        case OffscreenComponent:\n          {\n            var instance = boundaryFiber.stateNode;\n            retryCache = instance._retryCache;\n            break;\n          }\n        default:\n          throw new Error(\"Pinged unknown suspense boundary type. \" + \"This is probably a bug in React.\");\n      }\n      if (retryCache !== null) {\n        retryCache.delete(wakeable);\n      }\n      retryTimedOutBoundary(boundaryFiber, retryLane);\n    }\n    function throwIfInfiniteUpdateLoopDetected() {\n      if (nestedUpdateCount > NESTED_UPDATE_LIMIT) {\n        nestedUpdateCount = 0;\n        nestedPassiveUpdateCount = 0;\n        rootWithNestedUpdates = null;\n        rootWithPassiveNestedUpdates = null;\n        throw new Error(\"Maximum update depth exceeded. This can happen when a component \" + \"repeatedly calls setState inside componentWillUpdate or \" + \"componentDidUpdate. React limits the number of nested updates to \" + \"prevent infinite loops.\");\n      }\n      {\n        if (nestedPassiveUpdateCount > NESTED_PASSIVE_UPDATE_LIMIT) {\n          nestedPassiveUpdateCount = 0;\n          rootWithPassiveNestedUpdates = null;\n          error(\"Maximum update depth exceeded. This can happen when a component \" + \"calls setState inside useEffect, but useEffect either doesn't \" + \"have a dependency array, or one of the dependencies changes on \" + \"every render.\");\n        }\n      }\n    }\n    function flushRenderPhaseStrictModeWarningsInDEV() {\n      {\n        ReactStrictModeWarnings.flushLegacyContextWarning();\n        ReactStrictModeWarnings.flushPendingUnsafeLifecycleWarnings();\n      }\n    }\n    function commitDoubleInvokeEffectsInDEV(root, hasPassiveEffects) {\n      {\n        {\n          legacyCommitDoubleInvokeEffectsInDEV(root.current, hasPassiveEffects);\n        }\n      }\n    }\n    function legacyCommitDoubleInvokeEffectsInDEV(fiber, hasPassiveEffects) {\n      setCurrentFiber(fiber);\n      invokeEffectsInDev(fiber, MountLayoutDev, invokeLayoutEffectUnmountInDEV);\n      if (hasPassiveEffects) {\n        invokeEffectsInDev(fiber, MountPassiveDev, invokePassiveEffectUnmountInDEV);\n      }\n      invokeEffectsInDev(fiber, MountLayoutDev, invokeLayoutEffectMountInDEV);\n      if (hasPassiveEffects) {\n        invokeEffectsInDev(fiber, MountPassiveDev, invokePassiveEffectMountInDEV);\n      }\n      resetCurrentFiber();\n    }\n    function invokeEffectsInDev(firstChild, fiberFlags, invokeEffectFn) {\n      var current = firstChild;\n      var subtreeRoot = null;\n      while (current != null) {\n        var primarySubtreeFlag = current.subtreeFlags & fiberFlags;\n        if (current !== subtreeRoot && current.child != null && primarySubtreeFlag !== NoFlags$1) {\n          current = current.child;\n        } else {\n          if ((current.flags & fiberFlags) !== NoFlags$1) {\n            invokeEffectFn(current);\n          }\n          if (current.sibling !== null) {\n            current = current.sibling;\n          } else {\n            current = subtreeRoot = current.return;\n          }\n        }\n      }\n    }\n    var didWarnStateUpdateForNotYetMountedComponent = null;\n    function warnAboutUpdateOnNotYetMountedFiberInDEV(fiber) {\n      {\n        if ((executionContext & RenderContext) !== NoContext) {\n          return;\n        }\n        if (!(fiber.mode & ConcurrentMode)) {\n          return;\n        }\n        var tag = fiber.tag;\n        if (tag !== IndeterminateComponent && tag !== HostRoot && tag !== ClassComponent && tag !== FunctionComponent && tag !== ForwardRef && tag !== MemoComponent && tag !== SimpleMemoComponent) {\n          return;\n        }\n        var componentName = getComponentNameFromFiber(fiber) || \"ReactComponent\";\n        if (didWarnStateUpdateForNotYetMountedComponent !== null) {\n          if (didWarnStateUpdateForNotYetMountedComponent.has(componentName)) {\n            return;\n          }\n          didWarnStateUpdateForNotYetMountedComponent.add(componentName);\n        } else {\n          didWarnStateUpdateForNotYetMountedComponent = new Set([componentName]);\n        }\n        var previousFiber = current;\n        try {\n          setCurrentFiber(fiber);\n          error(\"Can't perform a React state update on a component that hasn't mounted yet. \" + \"This indicates that you have a side-effect in your render function that \" + \"asynchronously later calls tries to update the component. Move this work to \" + \"useEffect instead.\");\n        } finally {\n          if (previousFiber) {\n            setCurrentFiber(fiber);\n          } else {\n            resetCurrentFiber();\n          }\n        }\n      }\n    }\n    var beginWork;\n    {\n      var dummyFiber = null;\n      beginWork = function (current, unitOfWork, lanes) {\n        var originalWorkInProgressCopy = assignFiberPropertiesInDEV(dummyFiber, unitOfWork);\n        try {\n          return beginWork$1(current, unitOfWork, lanes);\n        } catch (originalError) {\n          if (didSuspendOrErrorWhileHydratingDEV() || originalError === SuspenseException || originalError === SelectiveHydrationException || originalError !== null && typeof originalError === \"object\" && typeof originalError.then === \"function\") {\n            throw originalError;\n          }\n          resetSuspendedWorkLoopOnUnwind(unitOfWork);\n          unwindInterruptedWork(current, unitOfWork);\n          assignFiberPropertiesInDEV(unitOfWork, originalWorkInProgressCopy);\n          if (unitOfWork.mode & ProfileMode) {\n            startProfilerTimer(unitOfWork);\n          }\n          invokeGuardedCallback(null, beginWork$1, null, current, unitOfWork, lanes);\n          if (hasCaughtError()) {\n            var replayError = clearCaughtError();\n            if (typeof replayError === \"object\" && replayError !== null && replayError._suppressLogging && typeof originalError === \"object\" && originalError !== null && !originalError._suppressLogging) {\n              originalError._suppressLogging = true;\n            }\n          }\n          throw originalError;\n        }\n      };\n    }\n    var didWarnAboutUpdateInRender = false;\n    var didWarnAboutUpdateInRenderForAnotherComponent;\n    {\n      didWarnAboutUpdateInRenderForAnotherComponent = new Set();\n    }\n    function warnAboutRenderPhaseUpdatesInDEV(fiber) {\n      {\n        if (isRendering) {\n          switch (fiber.tag) {\n            case FunctionComponent:\n            case ForwardRef:\n            case SimpleMemoComponent:\n              {\n                var renderingComponentName = workInProgress && getComponentNameFromFiber(workInProgress) || \"Unknown\";\n                var dedupeKey = renderingComponentName;\n                if (!didWarnAboutUpdateInRenderForAnotherComponent.has(dedupeKey)) {\n                  didWarnAboutUpdateInRenderForAnotherComponent.add(dedupeKey);\n                  var setStateComponentName = getComponentNameFromFiber(fiber) || \"Unknown\";\n                  error(\"Cannot update a component (`%s`) while rendering a \" + \"different component (`%s`). To locate the bad setState() call inside `%s`, \" + \"follow the stack trace as described in https://reactjs.org/link/setstate-in-render\", setStateComponentName, renderingComponentName, renderingComponentName);\n                }\n                break;\n              }\n            case ClassComponent:\n              {\n                if (!didWarnAboutUpdateInRender) {\n                  error(\"Cannot update during an existing state transition (such as \" + \"within `render`). Render methods should be a pure \" + \"function of props and state.\");\n                  didWarnAboutUpdateInRender = true;\n                }\n                break;\n              }\n          }\n        }\n      }\n    }\n    function restorePendingUpdaters(root, lanes) {\n      {\n        if (isDevToolsPresent) {\n          var memoizedUpdaters = root.memoizedUpdaters;\n          memoizedUpdaters.forEach(function (schedulingFiber) {\n            addFiberToLanesMap(root, schedulingFiber, lanes);\n          });\n        }\n      }\n    }\n    var fakeActCallbackNode = {};\n    function scheduleCallback(priorityLevel, callback) {\n      {\n        var actQueue = ReactCurrentActQueue.current;\n        if (actQueue !== null) {\n          actQueue.push(callback);\n          return fakeActCallbackNode;\n        } else {\n          return scheduleCallback$2(priorityLevel, callback);\n        }\n      }\n    }\n    function shouldForceFlushFallbacksInDEV() {\n      return ReactCurrentActQueue.current !== null;\n    }\n    function warnIfUpdatesNotWrappedWithActDEV(fiber) {\n      {\n        if (fiber.mode & ConcurrentMode) {\n          if (!isConcurrentActEnvironment()) {\n            return;\n          }\n        } else {\n          if (!isLegacyActEnvironment()) {\n            return;\n          }\n          if (executionContext !== NoContext) {\n            return;\n          }\n          if (fiber.tag !== FunctionComponent && fiber.tag !== ForwardRef && fiber.tag !== SimpleMemoComponent) {\n            return;\n          }\n        }\n        if (ReactCurrentActQueue.current === null) {\n          var previousFiber = current;\n          try {\n            setCurrentFiber(fiber);\n            error(\"An update to %s inside a test was not wrapped in act(...).\\n\\n\" + \"When testing, code that causes React state updates should be \" + \"wrapped into act(...):\\n\\n\" + \"act(() => {\\n\" + \"  /* fire events that update state */\\n\" + \"});\\n\" + \"/* assert on the output */\\n\\n\" + \"This ensures that you're testing the behavior the user would see \" + \"in the browser.\" + \" Learn more at https://reactjs.org/link/wrap-tests-with-act\", getComponentNameFromFiber(fiber));\n          } finally {\n            if (previousFiber) {\n              setCurrentFiber(fiber);\n            } else {\n              resetCurrentFiber();\n            }\n          }\n        }\n      }\n    }\n    function warnIfSuspenseResolutionNotWrappedWithActDEV(root) {\n      {\n        if (root.tag !== LegacyRoot && isConcurrentActEnvironment() && ReactCurrentActQueue.current === null) {\n          error(\"A suspended resource finished loading inside a test, but the event \" + \"was not wrapped in act(...).\\n\\n\" + \"When testing, code that resolves suspended data should be wrapped \" + \"into act(...):\\n\\n\" + \"act(() => {\\n\" + \"  /* finish loading suspended data */\\n\" + \"});\\n\" + \"/* assert on the output */\\n\\n\" + \"This ensures that you're testing the behavior the user would see \" + \"in the browser.\" + \" Learn more at https://reactjs.org/link/wrap-tests-with-act\");\n        }\n      }\n    }\n    function setIsRunningInsertionEffect(isRunning) {\n      {\n        isRunningInsertionEffect = isRunning;\n      }\n    }\n    var resolveFamily = null;\n    var failedBoundaries = null;\n    var setRefreshHandler = function (handler) {\n      {\n        resolveFamily = handler;\n      }\n    };\n    function resolveFunctionForHotReloading(type) {\n      {\n        if (resolveFamily === null) {\n          return type;\n        }\n        var family = resolveFamily(type);\n        if (family === undefined) {\n          return type;\n        }\n        return family.current;\n      }\n    }\n    function resolveClassForHotReloading(type) {\n      return resolveFunctionForHotReloading(type);\n    }\n    function resolveForwardRefForHotReloading(type) {\n      {\n        if (resolveFamily === null) {\n          return type;\n        }\n        var family = resolveFamily(type);\n        if (family === undefined) {\n          if (type !== null && type !== undefined && typeof type.render === \"function\") {\n            var currentRender = resolveFunctionForHotReloading(type.render);\n            if (type.render !== currentRender) {\n              var syntheticType = {\n                $$typeof: REACT_FORWARD_REF_TYPE,\n                render: currentRender\n              };\n              if (type.displayName !== undefined) {\n                syntheticType.displayName = type.displayName;\n              }\n              return syntheticType;\n            }\n          }\n          return type;\n        }\n        return family.current;\n      }\n    }\n    function isCompatibleFamilyForHotReloading(fiber, element) {\n      {\n        if (resolveFamily === null) {\n          return false;\n        }\n        var prevType = fiber.elementType;\n        var nextType = element.type;\n        var needsCompareFamilies = false;\n        var $$typeofNextType = typeof nextType === \"object\" && nextType !== null ? nextType.$$typeof : null;\n        switch (fiber.tag) {\n          case ClassComponent:\n            {\n              if (typeof nextType === \"function\") {\n                needsCompareFamilies = true;\n              }\n              break;\n            }\n          case FunctionComponent:\n            {\n              if (typeof nextType === \"function\") {\n                needsCompareFamilies = true;\n              } else if ($$typeofNextType === REACT_LAZY_TYPE) {\n                needsCompareFamilies = true;\n              }\n              break;\n            }\n          case ForwardRef:\n            {\n              if ($$typeofNextType === REACT_FORWARD_REF_TYPE) {\n                needsCompareFamilies = true;\n              } else if ($$typeofNextType === REACT_LAZY_TYPE) {\n                needsCompareFamilies = true;\n              }\n              break;\n            }\n          case MemoComponent:\n          case SimpleMemoComponent:\n            {\n              if ($$typeofNextType === REACT_MEMO_TYPE) {\n                needsCompareFamilies = true;\n              } else if ($$typeofNextType === REACT_LAZY_TYPE) {\n                needsCompareFamilies = true;\n              }\n              break;\n            }\n          default:\n            return false;\n        }\n        if (needsCompareFamilies) {\n          var prevFamily = resolveFamily(prevType);\n          if (prevFamily !== undefined && prevFamily === resolveFamily(nextType)) {\n            return true;\n          }\n        }\n        return false;\n      }\n    }\n    function markFailedErrorBoundaryForHotReloading(fiber) {\n      {\n        if (resolveFamily === null) {\n          return;\n        }\n        if (typeof WeakSet !== \"function\") {\n          return;\n        }\n        if (failedBoundaries === null) {\n          failedBoundaries = new WeakSet();\n        }\n        failedBoundaries.add(fiber);\n      }\n    }\n    var scheduleRefresh = function (root, update) {\n      {\n        if (resolveFamily === null) {\n          return;\n        }\n        var staleFamilies = update.staleFamilies,\n          updatedFamilies = update.updatedFamilies;\n        flushPassiveEffects();\n        flushSync(function () {\n          scheduleFibersWithFamiliesRecursively(root.current, updatedFamilies, staleFamilies);\n        });\n      }\n    };\n    var scheduleRoot = function (root, element) {\n      {\n        if (root.context !== emptyContextObject) {\n          return;\n        }\n        flushPassiveEffects();\n        flushSync(function () {\n          updateContainer(element, root, null, null);\n        });\n      }\n    };\n    function scheduleFibersWithFamiliesRecursively(fiber, updatedFamilies, staleFamilies) {\n      {\n        var alternate = fiber.alternate,\n          child = fiber.child,\n          sibling = fiber.sibling,\n          tag = fiber.tag,\n          type = fiber.type;\n        var candidateType = null;\n        switch (tag) {\n          case FunctionComponent:\n          case SimpleMemoComponent:\n          case ClassComponent:\n            candidateType = type;\n            break;\n          case ForwardRef:\n            candidateType = type.render;\n            break;\n        }\n        if (resolveFamily === null) {\n          throw new Error(\"Expected resolveFamily to be set during hot reload.\");\n        }\n        var needsRender = false;\n        var needsRemount = false;\n        if (candidateType !== null) {\n          var family = resolveFamily(candidateType);\n          if (family !== undefined) {\n            if (staleFamilies.has(family)) {\n              needsRemount = true;\n            } else if (updatedFamilies.has(family)) {\n              if (tag === ClassComponent) {\n                needsRemount = true;\n              } else {\n                needsRender = true;\n              }\n            }\n          }\n        }\n        if (failedBoundaries !== null) {\n          if (failedBoundaries.has(fiber) || alternate !== null && failedBoundaries.has(alternate)) {\n            needsRemount = true;\n          }\n        }\n        if (needsRemount) {\n          fiber._debugNeedsRemount = true;\n        }\n        if (needsRemount || needsRender) {\n          var root = enqueueConcurrentRenderForLane(fiber, SyncLane);\n          if (root !== null) {\n            scheduleUpdateOnFiber(root, fiber, SyncLane);\n          }\n        }\n        if (child !== null && !needsRemount) {\n          scheduleFibersWithFamiliesRecursively(child, updatedFamilies, staleFamilies);\n        }\n        if (sibling !== null) {\n          scheduleFibersWithFamiliesRecursively(sibling, updatedFamilies, staleFamilies);\n        }\n      }\n    }\n    var findHostInstancesForRefresh = function (root, families) {\n      {\n        var hostInstances = new Set();\n        var types = new Set(families.map(function (family) {\n          return family.current;\n        }));\n        findHostInstancesForMatchingFibersRecursively(root.current, types, hostInstances);\n        return hostInstances;\n      }\n    };\n    function findHostInstancesForMatchingFibersRecursively(fiber, types, hostInstances) {\n      {\n        var child = fiber.child,\n          sibling = fiber.sibling,\n          tag = fiber.tag,\n          type = fiber.type;\n        var candidateType = null;\n        switch (tag) {\n          case FunctionComponent:\n          case SimpleMemoComponent:\n          case ClassComponent:\n            candidateType = type;\n            break;\n          case ForwardRef:\n            candidateType = type.render;\n            break;\n        }\n        var didMatch = false;\n        if (candidateType !== null) {\n          if (types.has(candidateType)) {\n            didMatch = true;\n          }\n        }\n        if (didMatch) {\n          findHostInstancesForFiberShallowly(fiber, hostInstances);\n        } else {\n          if (child !== null) {\n            findHostInstancesForMatchingFibersRecursively(child, types, hostInstances);\n          }\n        }\n        if (sibling !== null) {\n          findHostInstancesForMatchingFibersRecursively(sibling, types, hostInstances);\n        }\n      }\n    }\n    function findHostInstancesForFiberShallowly(fiber, hostInstances) {\n      {\n        var foundHostInstances = findChildHostInstancesForFiberShallowly(fiber, hostInstances);\n        if (foundHostInstances) {\n          return;\n        }\n        var node = fiber;\n        while (true) {\n          switch (node.tag) {\n            case HostSingleton:\n            case HostComponent:\n              hostInstances.add(node.stateNode);\n              return;\n            case HostPortal:\n              hostInstances.add(node.stateNode.containerInfo);\n              return;\n            case HostRoot:\n              hostInstances.add(node.stateNode.containerInfo);\n              return;\n          }\n          if (node.return === null) {\n            throw new Error(\"Expected to reach root first.\");\n          }\n          node = node.return;\n        }\n      }\n    }\n    function findChildHostInstancesForFiberShallowly(fiber, hostInstances) {\n      {\n        var node = fiber;\n        var foundHostInstances = false;\n        while (true) {\n          if (node.tag === HostComponent || node.tag === HostHoistable || false) {\n            foundHostInstances = true;\n            hostInstances.add(node.stateNode);\n          } else if (node.child !== null) {\n            node.child.return = node;\n            node = node.child;\n            continue;\n          }\n          if (node === fiber) {\n            return foundHostInstances;\n          }\n          while (node.sibling === null) {\n            if (node.return === null || node.return === fiber) {\n              return foundHostInstances;\n            }\n            node = node.return;\n          }\n          node.sibling.return = node.return;\n          node = node.sibling;\n        }\n      }\n      return false;\n    }\n    var hasBadMapPolyfill;\n    {\n      hasBadMapPolyfill = false;\n      try {\n        var nonExtensibleObject = Object.preventExtensions({});\n        new Map([[nonExtensibleObject, null]]);\n        new Set([nonExtensibleObject]);\n      } catch (e) {\n        hasBadMapPolyfill = true;\n      }\n    }\n    function FiberNode(tag, pendingProps, key, mode) {\n      this.tag = tag;\n      this.key = key;\n      this.elementType = null;\n      this.type = null;\n      this.stateNode = null;\n      this.return = null;\n      this.child = null;\n      this.sibling = null;\n      this.index = 0;\n      this.ref = null;\n      this.refCleanup = null;\n      this.pendingProps = pendingProps;\n      this.memoizedProps = null;\n      this.updateQueue = null;\n      this.memoizedState = null;\n      this.dependencies = null;\n      this.mode = mode;\n      this.flags = NoFlags$1;\n      this.subtreeFlags = NoFlags$1;\n      this.deletions = null;\n      this.lanes = NoLanes;\n      this.childLanes = NoLanes;\n      this.alternate = null;\n      {\n        this.actualDuration = Number.NaN;\n        this.actualStartTime = Number.NaN;\n        this.selfBaseDuration = Number.NaN;\n        this.treeBaseDuration = Number.NaN;\n        this.actualDuration = 0;\n        this.actualStartTime = -1;\n        this.selfBaseDuration = 0;\n        this.treeBaseDuration = 0;\n      }\n      {\n        this._debugOwner = null;\n        this._debugNeedsRemount = false;\n        this._debugHookTypes = null;\n        if (!hasBadMapPolyfill && typeof Object.preventExtensions === \"function\") {\n          Object.preventExtensions(this);\n        }\n      }\n    }\n    function createFiber(tag, pendingProps, key, mode) {\n      return new FiberNode(tag, pendingProps, key, mode);\n    }\n    function shouldConstruct(Component) {\n      var prototype = Component.prototype;\n      return !!(prototype && prototype.isReactComponent);\n    }\n    function isSimpleFunctionComponent(type) {\n      return typeof type === \"function\" && !shouldConstruct(type) && type.defaultProps === undefined;\n    }\n    function resolveLazyComponentTag(Component) {\n      if (typeof Component === \"function\") {\n        return shouldConstruct(Component) ? ClassComponent : FunctionComponent;\n      } else if (Component !== undefined && Component !== null) {\n        var $$typeof = Component.$$typeof;\n        if ($$typeof === REACT_FORWARD_REF_TYPE) {\n          return ForwardRef;\n        }\n        if ($$typeof === REACT_MEMO_TYPE) {\n          return MemoComponent;\n        }\n      }\n      return IndeterminateComponent;\n    }\n    function createWorkInProgress(current, pendingProps) {\n      var workInProgress = current.alternate;\n      if (workInProgress === null) {\n        workInProgress = createFiber(current.tag, pendingProps, current.key, current.mode);\n        workInProgress.elementType = current.elementType;\n        workInProgress.type = current.type;\n        workInProgress.stateNode = current.stateNode;\n        {\n          workInProgress._debugOwner = current._debugOwner;\n          workInProgress._debugHookTypes = current._debugHookTypes;\n        }\n        workInProgress.alternate = current;\n        current.alternate = workInProgress;\n      } else {\n        workInProgress.pendingProps = pendingProps;\n        workInProgress.type = current.type;\n        workInProgress.flags = NoFlags$1;\n        workInProgress.subtreeFlags = NoFlags$1;\n        workInProgress.deletions = null;\n        {\n          workInProgress.actualDuration = 0;\n          workInProgress.actualStartTime = -1;\n        }\n      }\n      workInProgress.flags = current.flags & StaticMask;\n      workInProgress.childLanes = current.childLanes;\n      workInProgress.lanes = current.lanes;\n      workInProgress.child = current.child;\n      workInProgress.memoizedProps = current.memoizedProps;\n      workInProgress.memoizedState = current.memoizedState;\n      workInProgress.updateQueue = current.updateQueue;\n      var currentDependencies = current.dependencies;\n      workInProgress.dependencies = currentDependencies === null ? null : {\n        lanes: currentDependencies.lanes,\n        firstContext: currentDependencies.firstContext\n      };\n      workInProgress.sibling = current.sibling;\n      workInProgress.index = current.index;\n      workInProgress.ref = current.ref;\n      workInProgress.refCleanup = current.refCleanup;\n      {\n        workInProgress.selfBaseDuration = current.selfBaseDuration;\n        workInProgress.treeBaseDuration = current.treeBaseDuration;\n      }\n      {\n        workInProgress._debugNeedsRemount = current._debugNeedsRemount;\n        switch (workInProgress.tag) {\n          case IndeterminateComponent:\n          case FunctionComponent:\n          case SimpleMemoComponent:\n            workInProgress.type = resolveFunctionForHotReloading(current.type);\n            break;\n          case ClassComponent:\n            workInProgress.type = resolveClassForHotReloading(current.type);\n            break;\n          case ForwardRef:\n            workInProgress.type = resolveForwardRefForHotReloading(current.type);\n            break;\n        }\n      }\n      return workInProgress;\n    }\n    function resetWorkInProgress(workInProgress, renderLanes) {\n      workInProgress.flags &= StaticMask | Placement;\n      var current = workInProgress.alternate;\n      if (current === null) {\n        workInProgress.childLanes = NoLanes;\n        workInProgress.lanes = renderLanes;\n        workInProgress.child = null;\n        workInProgress.subtreeFlags = NoFlags$1;\n        workInProgress.memoizedProps = null;\n        workInProgress.memoizedState = null;\n        workInProgress.updateQueue = null;\n        workInProgress.dependencies = null;\n        workInProgress.stateNode = null;\n        {\n          workInProgress.selfBaseDuration = 0;\n          workInProgress.treeBaseDuration = 0;\n        }\n      } else {\n        workInProgress.childLanes = current.childLanes;\n        workInProgress.lanes = current.lanes;\n        workInProgress.child = current.child;\n        workInProgress.subtreeFlags = NoFlags$1;\n        workInProgress.deletions = null;\n        workInProgress.memoizedProps = current.memoizedProps;\n        workInProgress.memoizedState = current.memoizedState;\n        workInProgress.updateQueue = current.updateQueue;\n        workInProgress.type = current.type;\n        var currentDependencies = current.dependencies;\n        workInProgress.dependencies = currentDependencies === null ? null : {\n          lanes: currentDependencies.lanes,\n          firstContext: currentDependencies.firstContext\n        };\n        {\n          workInProgress.selfBaseDuration = current.selfBaseDuration;\n          workInProgress.treeBaseDuration = current.treeBaseDuration;\n        }\n      }\n      return workInProgress;\n    }\n    function createHostRootFiber(tag, isStrictMode, concurrentUpdatesByDefaultOverride) {\n      var mode;\n      if (tag === ConcurrentRoot) {\n        mode = ConcurrentMode;\n        if (isStrictMode === true) {\n          mode |= StrictLegacyMode | StrictEffectsMode;\n        }\n      } else {\n        mode = NoMode;\n      }\n      if (isDevToolsPresent) {\n        mode |= ProfileMode;\n      }\n      return createFiber(HostRoot, null, null, mode);\n    }\n    function createFiberFromTypeAndProps(type, key, pendingProps, owner, mode, lanes) {\n      var fiberTag = IndeterminateComponent;\n      var resolvedType = type;\n      if (typeof type === \"function\") {\n        if (shouldConstruct(type)) {\n          fiberTag = ClassComponent;\n          {\n            resolvedType = resolveClassForHotReloading(resolvedType);\n          }\n        } else {\n          {\n            resolvedType = resolveFunctionForHotReloading(resolvedType);\n          }\n        }\n      } else if (typeof type === \"string\") {\n        {\n          fiberTag = HostComponent;\n        }\n      } else {\n        getTag: switch (type) {\n          case REACT_FRAGMENT_TYPE:\n            return createFiberFromFragment(pendingProps.children, mode, lanes, key);\n          case REACT_STRICT_MODE_TYPE:\n            fiberTag = Mode;\n            mode |= StrictLegacyMode;\n            if ((mode & ConcurrentMode) !== NoMode) {\n              mode |= StrictEffectsMode;\n            }\n            break;\n          case REACT_PROFILER_TYPE:\n            return createFiberFromProfiler(pendingProps, mode, lanes, key);\n          case REACT_SUSPENSE_TYPE:\n            return createFiberFromSuspense(pendingProps, mode, lanes, key);\n          case REACT_SUSPENSE_LIST_TYPE:\n            return createFiberFromSuspenseList(pendingProps, mode, lanes, key);\n          case REACT_OFFSCREEN_TYPE:\n            return createFiberFromOffscreen(pendingProps, mode, lanes, key);\n          case REACT_LEGACY_HIDDEN_TYPE:\n          case REACT_SCOPE_TYPE:\n          case REACT_CACHE_TYPE:\n          case REACT_TRACING_MARKER_TYPE:\n          case REACT_DEBUG_TRACING_MODE_TYPE:\n          default:\n            {\n              if (typeof type === \"object\" && type !== null) {\n                switch (type.$$typeof) {\n                  case REACT_PROVIDER_TYPE:\n                    fiberTag = ContextProvider;\n                    break getTag;\n                  case REACT_CONTEXT_TYPE:\n                    fiberTag = ContextConsumer;\n                    break getTag;\n                  case REACT_FORWARD_REF_TYPE:\n                    fiberTag = ForwardRef;\n                    {\n                      resolvedType = resolveForwardRefForHotReloading(resolvedType);\n                    }\n                    break getTag;\n                  case REACT_MEMO_TYPE:\n                    fiberTag = MemoComponent;\n                    break getTag;\n                  case REACT_LAZY_TYPE:\n                    fiberTag = LazyComponent;\n                    resolvedType = null;\n                    break getTag;\n                }\n              }\n              var info = \"\";\n              {\n                if (type === undefined || typeof type === \"object\" && type !== null && Object.keys(type).length === 0) {\n                  info += \" You likely forgot to export your component from the file \" + \"it's defined in, or you might have mixed up default and \" + \"named imports.\";\n                }\n                var ownerName = owner ? getComponentNameFromFiber(owner) : null;\n                if (ownerName) {\n                  info += \"\\n\\nCheck the render method of `\" + ownerName + \"`.\";\n                }\n              }\n              throw new Error(\"Element type is invalid: expected a string (for built-in \" + \"components) or a class/function (for composite components) \" + (\"but got: \" + (type == null ? type : typeof type) + \".\" + info));\n            }\n        }\n      }\n      var fiber = createFiber(fiberTag, pendingProps, key, mode);\n      fiber.elementType = type;\n      fiber.type = resolvedType;\n      fiber.lanes = lanes;\n      {\n        fiber._debugOwner = owner;\n      }\n      return fiber;\n    }\n    function createFiberFromElement(element, mode, lanes) {\n      var owner = null;\n      {\n        owner = element._owner;\n      }\n      var type = element.type;\n      var key = element.key;\n      var pendingProps = element.props;\n      var fiber = createFiberFromTypeAndProps(type, key, pendingProps, owner, mode, lanes);\n      {\n        fiber._debugOwner = element._owner;\n      }\n      return fiber;\n    }\n    function createFiberFromFragment(elements, mode, lanes, key) {\n      var fiber = createFiber(Fragment, elements, key, mode);\n      fiber.lanes = lanes;\n      return fiber;\n    }\n    function createFiberFromProfiler(pendingProps, mode, lanes, key) {\n      {\n        if (typeof pendingProps.id !== \"string\") {\n          error('Profiler must specify an \"id\" of type `string` as a prop. Received the type `%s` instead.', typeof pendingProps.id);\n        }\n      }\n      var fiber = createFiber(Profiler, pendingProps, key, mode | ProfileMode);\n      fiber.elementType = REACT_PROFILER_TYPE;\n      fiber.lanes = lanes;\n      {\n        fiber.stateNode = {\n          effectDuration: 0,\n          passiveEffectDuration: 0\n        };\n      }\n      return fiber;\n    }\n    function createFiberFromSuspense(pendingProps, mode, lanes, key) {\n      var fiber = createFiber(SuspenseComponent, pendingProps, key, mode);\n      fiber.elementType = REACT_SUSPENSE_TYPE;\n      fiber.lanes = lanes;\n      return fiber;\n    }\n    function createFiberFromSuspenseList(pendingProps, mode, lanes, key) {\n      var fiber = createFiber(SuspenseListComponent, pendingProps, key, mode);\n      fiber.elementType = REACT_SUSPENSE_LIST_TYPE;\n      fiber.lanes = lanes;\n      return fiber;\n    }\n    function createFiberFromOffscreen(pendingProps, mode, lanes, key) {\n      var fiber = createFiber(OffscreenComponent, pendingProps, key, mode);\n      fiber.elementType = REACT_OFFSCREEN_TYPE;\n      fiber.lanes = lanes;\n      var primaryChildInstance = {\n        _visibility: OffscreenVisible,\n        _pendingVisibility: OffscreenVisible,\n        _pendingMarkers: null,\n        _retryCache: null,\n        _transitions: null,\n        _current: null,\n        detach: function () {\n          return detachOffscreenInstance(primaryChildInstance);\n        },\n        attach: function () {\n          return attachOffscreenInstance(primaryChildInstance);\n        }\n      };\n      fiber.stateNode = primaryChildInstance;\n      return fiber;\n    }\n    function createFiberFromText(content, mode, lanes) {\n      var fiber = createFiber(HostText, content, null, mode);\n      fiber.lanes = lanes;\n      return fiber;\n    }\n    function createFiberFromPortal(portal, mode, lanes) {\n      var pendingProps = portal.children !== null ? portal.children : [];\n      var fiber = createFiber(HostPortal, pendingProps, portal.key, mode);\n      fiber.lanes = lanes;\n      fiber.stateNode = {\n        containerInfo: portal.containerInfo,\n        pendingChildren: null,\n        implementation: portal.implementation\n      };\n      return fiber;\n    }\n    function assignFiberPropertiesInDEV(target, source) {\n      if (target === null) {\n        target = createFiber(IndeterminateComponent, null, null, NoMode);\n      }\n      target.tag = source.tag;\n      target.key = source.key;\n      target.elementType = source.elementType;\n      target.type = source.type;\n      target.stateNode = source.stateNode;\n      target.return = source.return;\n      target.child = source.child;\n      target.sibling = source.sibling;\n      target.index = source.index;\n      target.ref = source.ref;\n      target.refCleanup = source.refCleanup;\n      target.pendingProps = source.pendingProps;\n      target.memoizedProps = source.memoizedProps;\n      target.updateQueue = source.updateQueue;\n      target.memoizedState = source.memoizedState;\n      target.dependencies = source.dependencies;\n      target.mode = source.mode;\n      target.flags = source.flags;\n      target.subtreeFlags = source.subtreeFlags;\n      target.deletions = source.deletions;\n      target.lanes = source.lanes;\n      target.childLanes = source.childLanes;\n      target.alternate = source.alternate;\n      {\n        target.actualDuration = source.actualDuration;\n        target.actualStartTime = source.actualStartTime;\n        target.selfBaseDuration = source.selfBaseDuration;\n        target.treeBaseDuration = source.treeBaseDuration;\n      }\n      target._debugOwner = source._debugOwner;\n      target._debugNeedsRemount = source._debugNeedsRemount;\n      target._debugHookTypes = source._debugHookTypes;\n      return target;\n    }\n    function FiberRootNode(containerInfo, tag, hydrate, identifierPrefix, onRecoverableError, formState) {\n      this.tag = tag;\n      this.containerInfo = containerInfo;\n      this.pendingChildren = null;\n      this.current = null;\n      this.pingCache = null;\n      this.finishedWork = null;\n      this.timeoutHandle = noTimeout;\n      this.cancelPendingCommit = null;\n      this.context = null;\n      this.pendingContext = null;\n      this.next = null;\n      this.callbackNode = null;\n      this.callbackPriority = NoLane;\n      this.expirationTimes = createLaneMap(NoTimestamp);\n      this.pendingLanes = NoLanes;\n      this.suspendedLanes = NoLanes;\n      this.pingedLanes = NoLanes;\n      this.expiredLanes = NoLanes;\n      this.finishedLanes = NoLanes;\n      this.errorRecoveryDisabledLanes = NoLanes;\n      this.shellSuspendCounter = 0;\n      this.entangledLanes = NoLanes;\n      this.entanglements = createLaneMap(NoLanes);\n      this.hiddenUpdates = createLaneMap(null);\n      this.identifierPrefix = identifierPrefix;\n      this.onRecoverableError = onRecoverableError;\n      this.formState = formState;\n      this.incompleteTransitions = new Map();\n      {\n        this.effectDuration = 0;\n        this.passiveEffectDuration = 0;\n      }\n      {\n        this.memoizedUpdaters = new Set();\n        var pendingUpdatersLaneMap = this.pendingUpdatersLaneMap = [];\n        for (var _i = 0; _i < TotalLanes; _i++) {\n          pendingUpdatersLaneMap.push(new Set());\n        }\n      }\n      {\n        switch (tag) {\n          case ConcurrentRoot:\n            this._debugRootType = hydrate ? \"hydrateRoot()\" : \"createRoot()\";\n            break;\n          case LegacyRoot:\n            this._debugRootType = hydrate ? \"hydrate()\" : \"render()\";\n            break;\n        }\n      }\n    }\n    function createFiberRoot(containerInfo, tag, hydrate, initialChildren, hydrationCallbacks, isStrictMode, concurrentUpdatesByDefaultOverride, identifierPrefix, onRecoverableError, transitionCallbacks, formState) {\n      var root = new FiberRootNode(containerInfo, tag, hydrate, identifierPrefix, onRecoverableError, formState);\n      var uninitializedFiber = createHostRootFiber(tag, isStrictMode);\n      root.current = uninitializedFiber;\n      uninitializedFiber.stateNode = root;\n      {\n        var _initialState = {\n          element: initialChildren,\n          isDehydrated: hydrate,\n          cache: null\n        };\n        uninitializedFiber.memoizedState = _initialState;\n      }\n      initializeUpdateQueue(uninitializedFiber);\n      return root;\n    }\n    var ReactVersion = \"18.3.0-canary-03d6f7cf0-20240209\";\n    function createPortal$1(children, containerInfo, implementation) {\n      var key = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : null;\n      {\n        checkKeyStringCoercion(key);\n      }\n      return {\n        $$typeof: REACT_PORTAL_TYPE,\n        key: key == null ? null : \"\" + key,\n        children: children,\n        containerInfo: containerInfo,\n        implementation: implementation\n      };\n    }\n    var didWarnAboutNestedUpdates;\n    var didWarnAboutFindNodeInStrictMode;\n    {\n      didWarnAboutNestedUpdates = false;\n      didWarnAboutFindNodeInStrictMode = {};\n    }\n    function getContextForSubtree(parentComponent) {\n      if (!parentComponent) {\n        return emptyContextObject;\n      }\n      var fiber = get(parentComponent);\n      var parentContext = findCurrentUnmaskedContext(fiber);\n      if (fiber.tag === ClassComponent) {\n        var Component = fiber.type;\n        if (isContextProvider(Component)) {\n          return processChildContext(fiber, Component, parentContext);\n        }\n      }\n      return parentContext;\n    }\n    function findHostInstanceWithWarning(component, methodName) {\n      {\n        var fiber = get(component);\n        if (fiber === undefined) {\n          if (typeof component.render === \"function\") {\n            throw new Error(\"Unable to find node on an unmounted component.\");\n          } else {\n            var keys = Object.keys(component).join(\",\");\n            throw new Error(\"Argument appears to not be a ReactComponent. Keys: \" + keys);\n          }\n        }\n        var hostFiber = findCurrentHostFiber(fiber);\n        if (hostFiber === null) {\n          return null;\n        }\n        if (hostFiber.mode & StrictLegacyMode) {\n          var componentName = getComponentNameFromFiber(fiber) || \"Component\";\n          if (!didWarnAboutFindNodeInStrictMode[componentName]) {\n            didWarnAboutFindNodeInStrictMode[componentName] = true;\n            var previousFiber = current;\n            try {\n              setCurrentFiber(hostFiber);\n              if (fiber.mode & StrictLegacyMode) {\n                error(\"%s is deprecated in StrictMode. \" + \"%s was passed an instance of %s which is inside StrictMode. \" + \"Instead, add a ref directly to the element you want to reference. \" + \"Learn more about using refs safely here: \" + \"https://reactjs.org/link/strict-mode-find-node\", methodName, methodName, componentName);\n              } else {\n                error(\"%s is deprecated in StrictMode. \" + \"%s was passed an instance of %s which renders StrictMode children. \" + \"Instead, add a ref directly to the element you want to reference. \" + \"Learn more about using refs safely here: \" + \"https://reactjs.org/link/strict-mode-find-node\", methodName, methodName, componentName);\n              }\n            } finally {\n              if (previousFiber) {\n                setCurrentFiber(previousFiber);\n              } else {\n                resetCurrentFiber();\n              }\n            }\n          }\n        }\n        return getPublicInstance(hostFiber.stateNode);\n      }\n    }\n    function createContainer(containerInfo, tag, hydrationCallbacks, isStrictMode, concurrentUpdatesByDefaultOverride, identifierPrefix, onRecoverableError, transitionCallbacks) {\n      var hydrate = false;\n      var initialChildren = null;\n      return createFiberRoot(containerInfo, tag, hydrate, initialChildren, hydrationCallbacks, isStrictMode, concurrentUpdatesByDefaultOverride, identifierPrefix, onRecoverableError, transitionCallbacks, null);\n    }\n    function updateContainer(element, container, parentComponent, callback) {\n      {\n        onScheduleRoot(container, element);\n      }\n      var current$1 = container.current;\n      var lane = requestUpdateLane(current$1);\n      var context = getContextForSubtree(parentComponent);\n      if (container.context === null) {\n        container.context = context;\n      } else {\n        container.pendingContext = context;\n      }\n      {\n        if (isRendering && current !== null && !didWarnAboutNestedUpdates) {\n          didWarnAboutNestedUpdates = true;\n          error(\"Render methods should be a pure function of props and state; \" + \"triggering nested component updates from render is not allowed. \" + \"If necessary, trigger nested updates in componentDidUpdate.\\n\\n\" + \"Check the render method of %s.\", getComponentNameFromFiber(current) || \"Unknown\");\n        }\n      }\n      var update = createUpdate(lane);\n      update.payload = {\n        element: element\n      };\n      callback = callback === undefined ? null : callback;\n      if (callback !== null) {\n        {\n          if (typeof callback !== \"function\") {\n            error(\"render(...): Expected the last optional `callback` argument to be a \" + \"function. Instead received: %s.\", callback);\n          }\n        }\n        update.callback = callback;\n      }\n      var root = enqueueUpdate(current$1, update, lane);\n      if (root !== null) {\n        scheduleUpdateOnFiber(root, current$1, lane);\n        entangleTransitions(root, current$1, lane);\n      }\n      return lane;\n    }\n    function getPublicRootInstance(container) {\n      var containerFiber = container.current;\n      if (!containerFiber.child) {\n        return null;\n      }\n      switch (containerFiber.child.tag) {\n        case HostSingleton:\n        case HostComponent:\n          return getPublicInstance(containerFiber.child.stateNode);\n        default:\n          return containerFiber.child.stateNode;\n      }\n    }\n    var shouldErrorImpl = function (fiber) {\n      return null;\n    };\n    function shouldError(fiber) {\n      return shouldErrorImpl(fiber);\n    }\n    var shouldSuspendImpl = function (fiber) {\n      return false;\n    };\n    function shouldSuspend(fiber) {\n      return shouldSuspendImpl(fiber);\n    }\n    var overrideHookState = null;\n    var overrideHookStateDeletePath = null;\n    var overrideHookStateRenamePath = null;\n    var overrideProps = null;\n    var overridePropsDeletePath = null;\n    var overridePropsRenamePath = null;\n    var scheduleUpdate = null;\n    var setErrorHandler = null;\n    var setSuspenseHandler = null;\n    {\n      var copyWithDeleteImpl = function (obj, path, index) {\n        var key = path[index];\n        var updated = isArray(obj) ? obj.slice() : assign({}, obj);\n        if (index + 1 === path.length) {\n          if (isArray(updated)) {\n            updated.splice(key, 1);\n          } else {\n            delete updated[key];\n          }\n          return updated;\n        }\n        updated[key] = copyWithDeleteImpl(obj[key], path, index + 1);\n        return updated;\n      };\n      var copyWithDelete = function (obj, path) {\n        return copyWithDeleteImpl(obj, path, 0);\n      };\n      var copyWithRenameImpl = function (obj, oldPath, newPath, index) {\n        var oldKey = oldPath[index];\n        var updated = isArray(obj) ? obj.slice() : assign({}, obj);\n        if (index + 1 === oldPath.length) {\n          var newKey = newPath[index];\n          updated[newKey] = updated[oldKey];\n          if (isArray(updated)) {\n            updated.splice(oldKey, 1);\n          } else {\n            delete updated[oldKey];\n          }\n        } else {\n          updated[oldKey] = copyWithRenameImpl(obj[oldKey], oldPath, newPath, index + 1);\n        }\n        return updated;\n      };\n      var copyWithRename = function (obj, oldPath, newPath) {\n        if (oldPath.length !== newPath.length) {\n          warn(\"copyWithRename() expects paths of the same length\");\n          return;\n        } else {\n          for (var i = 0; i < newPath.length - 1; i++) {\n            if (oldPath[i] !== newPath[i]) {\n              warn(\"copyWithRename() expects paths to be the same except for the deepest key\");\n              return;\n            }\n          }\n        }\n        return copyWithRenameImpl(obj, oldPath, newPath, 0);\n      };\n      var copyWithSetImpl = function (obj, path, index, value) {\n        if (index >= path.length) {\n          return value;\n        }\n        var key = path[index];\n        var updated = isArray(obj) ? obj.slice() : assign({}, obj);\n        updated[key] = copyWithSetImpl(obj[key], path, index + 1, value);\n        return updated;\n      };\n      var copyWithSet = function (obj, path, value) {\n        return copyWithSetImpl(obj, path, 0, value);\n      };\n      var findHook = function (fiber, id) {\n        var currentHook = fiber.memoizedState;\n        while (currentHook !== null && id > 0) {\n          currentHook = currentHook.next;\n          id--;\n        }\n        return currentHook;\n      };\n      overrideHookState = function (fiber, id, path, value) {\n        var hook = findHook(fiber, id);\n        if (hook !== null) {\n          var newState = copyWithSet(hook.memoizedState, path, value);\n          hook.memoizedState = newState;\n          hook.baseState = newState;\n          fiber.memoizedProps = assign({}, fiber.memoizedProps);\n          var root = enqueueConcurrentRenderForLane(fiber, SyncLane);\n          if (root !== null) {\n            scheduleUpdateOnFiber(root, fiber, SyncLane);\n          }\n        }\n      };\n      overrideHookStateDeletePath = function (fiber, id, path) {\n        var hook = findHook(fiber, id);\n        if (hook !== null) {\n          var newState = copyWithDelete(hook.memoizedState, path);\n          hook.memoizedState = newState;\n          hook.baseState = newState;\n          fiber.memoizedProps = assign({}, fiber.memoizedProps);\n          var root = enqueueConcurrentRenderForLane(fiber, SyncLane);\n          if (root !== null) {\n            scheduleUpdateOnFiber(root, fiber, SyncLane);\n          }\n        }\n      };\n      overrideHookStateRenamePath = function (fiber, id, oldPath, newPath) {\n        var hook = findHook(fiber, id);\n        if (hook !== null) {\n          var newState = copyWithRename(hook.memoizedState, oldPath, newPath);\n          hook.memoizedState = newState;\n          hook.baseState = newState;\n          fiber.memoizedProps = assign({}, fiber.memoizedProps);\n          var root = enqueueConcurrentRenderForLane(fiber, SyncLane);\n          if (root !== null) {\n            scheduleUpdateOnFiber(root, fiber, SyncLane);\n          }\n        }\n      };\n      overrideProps = function (fiber, path, value) {\n        fiber.pendingProps = copyWithSet(fiber.memoizedProps, path, value);\n        if (fiber.alternate) {\n          fiber.alternate.pendingProps = fiber.pendingProps;\n        }\n        var root = enqueueConcurrentRenderForLane(fiber, SyncLane);\n        if (root !== null) {\n          scheduleUpdateOnFiber(root, fiber, SyncLane);\n        }\n      };\n      overridePropsDeletePath = function (fiber, path) {\n        fiber.pendingProps = copyWithDelete(fiber.memoizedProps, path);\n        if (fiber.alternate) {\n          fiber.alternate.pendingProps = fiber.pendingProps;\n        }\n        var root = enqueueConcurrentRenderForLane(fiber, SyncLane);\n        if (root !== null) {\n          scheduleUpdateOnFiber(root, fiber, SyncLane);\n        }\n      };\n      overridePropsRenamePath = function (fiber, oldPath, newPath) {\n        fiber.pendingProps = copyWithRename(fiber.memoizedProps, oldPath, newPath);\n        if (fiber.alternate) {\n          fiber.alternate.pendingProps = fiber.pendingProps;\n        }\n        var root = enqueueConcurrentRenderForLane(fiber, SyncLane);\n        if (root !== null) {\n          scheduleUpdateOnFiber(root, fiber, SyncLane);\n        }\n      };\n      scheduleUpdate = function (fiber) {\n        var root = enqueueConcurrentRenderForLane(fiber, SyncLane);\n        if (root !== null) {\n          scheduleUpdateOnFiber(root, fiber, SyncLane);\n        }\n      };\n      setErrorHandler = function (newShouldErrorImpl) {\n        shouldErrorImpl = newShouldErrorImpl;\n      };\n      setSuspenseHandler = function (newShouldSuspendImpl) {\n        shouldSuspendImpl = newShouldSuspendImpl;\n      };\n    }\n    function findHostInstanceByFiber(fiber) {\n      var hostFiber = findCurrentHostFiber(fiber);\n      if (hostFiber === null) {\n        return null;\n      }\n      return hostFiber.stateNode;\n    }\n    function emptyFindFiberByHostInstance(instance) {\n      return null;\n    }\n    function getCurrentFiberForDevTools() {\n      return current;\n    }\n    function injectIntoDevTools(devToolsConfig) {\n      var findFiberByHostInstance = devToolsConfig.findFiberByHostInstance;\n      var ReactCurrentDispatcher = ReactSharedInternals.ReactCurrentDispatcher;\n      return injectInternals({\n        bundleType: devToolsConfig.bundleType,\n        version: devToolsConfig.version,\n        rendererPackageName: devToolsConfig.rendererPackageName,\n        rendererConfig: devToolsConfig.rendererConfig,\n        overrideHookState: overrideHookState,\n        overrideHookStateDeletePath: overrideHookStateDeletePath,\n        overrideHookStateRenamePath: overrideHookStateRenamePath,\n        overrideProps: overrideProps,\n        overridePropsDeletePath: overridePropsDeletePath,\n        overridePropsRenamePath: overridePropsRenamePath,\n        setErrorHandler: setErrorHandler,\n        setSuspenseHandler: setSuspenseHandler,\n        scheduleUpdate: scheduleUpdate,\n        currentDispatcherRef: ReactCurrentDispatcher,\n        findHostInstanceByFiber: findHostInstanceByFiber,\n        findFiberByHostInstance: findFiberByHostInstance || emptyFindFiberByHostInstance,\n        findHostInstancesForRefresh: findHostInstancesForRefresh,\n        scheduleRefresh: scheduleRefresh,\n        scheduleRoot: scheduleRoot,\n        setRefreshHandler: setRefreshHandler,\n        getCurrentFiber: getCurrentFiberForDevTools,\n        reconcilerVersion: ReactVersion\n      });\n    }\n    var ReactCurrentOwner = ReactSharedInternals.ReactCurrentOwner;\n    function findHostInstance_DEPRECATED(componentOrHandle) {\n      {\n        var owner = ReactCurrentOwner.current;\n        if (owner !== null && owner.stateNode !== null) {\n          if (!owner.stateNode._warnedAboutRefsInRender) {\n            error(\"%s is accessing findNodeHandle inside its render(). \" + \"render() should be a pure function of props and state. It should \" + \"never access something that requires stale data from the previous \" + \"render, such as refs. Move this logic to componentDidMount and \" + \"componentDidUpdate instead.\", getComponentNameFromType(owner.type) || \"A component\");\n          }\n          owner.stateNode._warnedAboutRefsInRender = true;\n        }\n      }\n      if (componentOrHandle == null) {\n        return null;\n      }\n      if (componentOrHandle.canonical && componentOrHandle.canonical.publicInstance) {\n        return componentOrHandle.canonical.publicInstance;\n      }\n      if (componentOrHandle._nativeTag) {\n        return componentOrHandle;\n      }\n      var hostInstance;\n      {\n        hostInstance = findHostInstanceWithWarning(componentOrHandle, \"findHostInstance_DEPRECATED\");\n      }\n      return hostInstance;\n    }\n    function findNodeHandle(componentOrHandle) {\n      {\n        var owner = ReactCurrentOwner.current;\n        if (owner !== null && owner.stateNode !== null) {\n          if (!owner.stateNode._warnedAboutRefsInRender) {\n            error(\"%s is accessing findNodeHandle inside its render(). \" + \"render() should be a pure function of props and state. It should \" + \"never access something that requires stale data from the previous \" + \"render, such as refs. Move this logic to componentDidMount and \" + \"componentDidUpdate instead.\", getComponentNameFromType(owner.type) || \"A component\");\n          }\n          owner.stateNode._warnedAboutRefsInRender = true;\n        }\n      }\n      if (componentOrHandle == null) {\n        return null;\n      }\n      if (typeof componentOrHandle === \"number\") {\n        return componentOrHandle;\n      }\n      if (componentOrHandle._nativeTag) {\n        return componentOrHandle._nativeTag;\n      }\n      if (componentOrHandle.canonical != null && componentOrHandle.canonical.nativeTag != null) {\n        return componentOrHandle.canonical.nativeTag;\n      }\n      var nativeTag = ReactNativePrivateInterface.getNativeTagFromPublicInstance(componentOrHandle);\n      if (nativeTag) {\n        return nativeTag;\n      }\n      var hostInstance;\n      {\n        hostInstance = findHostInstanceWithWarning(componentOrHandle, \"findNodeHandle\");\n      }\n      if (hostInstance == null) {\n        return hostInstance;\n      }\n      if (hostInstance._nativeTag != null) {\n        return hostInstance._nativeTag;\n      }\n      return ReactNativePrivateInterface.getNativeTagFromPublicInstance(hostInstance);\n    }\n    function dispatchCommand(handle, command, args) {\n      var nativeTag = handle._nativeTag != null ? handle._nativeTag : ReactNativePrivateInterface.getNativeTagFromPublicInstance(handle);\n      if (nativeTag == null) {\n        {\n          error(\"dispatchCommand was called with a ref that isn't a \" + \"native component. Use React.forwardRef to get access to the underlying native component\");\n        }\n        return;\n      }\n      var node = ReactNativePrivateInterface.getNodeFromPublicInstance(handle);\n      if (node != null) {\n        nativeFabricUIManager.dispatchCommand(node, command, args);\n      } else {\n        ReactNativePrivateInterface.UIManager.dispatchViewManagerCommand(nativeTag, command, args);\n      }\n    }\n    function sendAccessibilityEvent(handle, eventType) {\n      var nativeTag = handle._nativeTag != null ? handle._nativeTag : ReactNativePrivateInterface.getNativeTagFromPublicInstance(handle);\n      if (nativeTag == null) {\n        {\n          error(\"sendAccessibilityEvent was called with a ref that isn't a \" + \"native component. Use React.forwardRef to get access to the underlying native component\");\n        }\n        return;\n      }\n      var node = ReactNativePrivateInterface.getNodeFromPublicInstance(handle);\n      if (node != null) {\n        nativeFabricUIManager.sendAccessibilityEvent(node, eventType);\n      } else {\n        ReactNativePrivateInterface.legacySendAccessibilityEvent(nativeTag, eventType);\n      }\n    }\n    function getNodeFromInternalInstanceHandle(internalInstanceHandle) {\n      return internalInstanceHandle && internalInstanceHandle.stateNode && internalInstanceHandle.stateNode.node;\n    }\n    function isChildPublicInstance(parentInstance, childInstance) {\n      {\n        if (parentInstance._internalFiberInstanceHandleDEV && childInstance._internalFiberInstanceHandleDEV) {\n          return doesFiberContain(parentInstance._internalFiberInstanceHandleDEV, childInstance._internalFiberInstanceHandleDEV);\n        }\n        var parentInternalInstanceHandle = ReactNativePrivateInterface.getInternalInstanceHandleFromPublicInstance(parentInstance);\n        var childInternalInstanceHandle = ReactNativePrivateInterface.getInternalInstanceHandleFromPublicInstance(childInstance);\n        if (parentInternalInstanceHandle != null && childInternalInstanceHandle != null) {\n          return doesFiberContain(parentInternalInstanceHandle, childInternalInstanceHandle);\n        }\n        return false;\n      }\n    }\n    var emptyObject = {};\n    {\n      Object.freeze(emptyObject);\n    }\n    function createHierarchy(fiberHierarchy) {\n      return fiberHierarchy.map(function (fiber) {\n        return {\n          name: getComponentNameFromType(fiber.type),\n          getInspectorData: function (findNodeHandle) {\n            return {\n              props: getHostProps(fiber),\n              measure: function (callback) {\n                var hostFiber = findCurrentHostFiber(fiber);\n                var node = hostFiber != null && hostFiber.stateNode !== null && hostFiber.stateNode.node;\n                if (node) {\n                  nativeFabricUIManager.measure(node, callback);\n                } else {\n                  return ReactNativePrivateInterface.UIManager.measure(getHostNode(fiber, findNodeHandle), callback);\n                }\n              }\n            };\n          }\n        };\n      });\n    }\n    function getHostNode(fiber, findNodeHandle) {\n      {\n        var hostNode;\n        while (fiber) {\n          if (fiber.stateNode !== null && fiber.tag === HostComponent) {\n            hostNode = findNodeHandle(fiber.stateNode);\n          }\n          if (hostNode) {\n            return hostNode;\n          }\n          fiber = fiber.child;\n        }\n        return null;\n      }\n    }\n    function getHostProps(fiber) {\n      var host = findCurrentHostFiber(fiber);\n      if (host) {\n        return host.memoizedProps || emptyObject;\n      }\n      return emptyObject;\n    }\n    function getInspectorDataForInstance(closestInstance) {\n      {\n        if (!closestInstance) {\n          return {\n            hierarchy: [],\n            props: emptyObject,\n            selectedIndex: null,\n            componentStack: \"\"\n          };\n        }\n        var fiber = findCurrentFiberUsingSlowPath(closestInstance);\n        var fiberHierarchy = getOwnerHierarchy(fiber);\n        var instance = lastNonHostInstance(fiberHierarchy);\n        var hierarchy = createHierarchy(fiberHierarchy);\n        var props = getHostProps(instance);\n        var selectedIndex = fiberHierarchy.indexOf(instance);\n        var componentStack = fiber !== null ? getStackByFiberInDevAndProd(fiber) : \"\";\n        return {\n          closestInstance: instance,\n          hierarchy: hierarchy,\n          props: props,\n          selectedIndex: selectedIndex,\n          componentStack: componentStack\n        };\n      }\n    }\n    function getOwnerHierarchy(instance) {\n      var hierarchy = [];\n      traverseOwnerTreeUp(hierarchy, instance);\n      return hierarchy;\n    }\n    function lastNonHostInstance(hierarchy) {\n      for (var i = hierarchy.length - 1; i > 1; i--) {\n        var instance = hierarchy[i];\n        if (instance.tag !== HostComponent) {\n          return instance;\n        }\n      }\n      return hierarchy[0];\n    }\n    function traverseOwnerTreeUp(hierarchy, instance) {\n      {\n        if (instance) {\n          hierarchy.unshift(instance);\n          traverseOwnerTreeUp(hierarchy, instance._debugOwner);\n        }\n      }\n    }\n    function getInspectorDataForViewTag(viewTag) {\n      {\n        var closestInstance = getInstanceFromTag(viewTag);\n        return getInspectorDataForInstance(closestInstance);\n      }\n    }\n    function getInspectorDataForViewAtPoint(findNodeHandle, inspectedView, locationX, locationY, callback) {\n      {\n        var closestInstance = null;\n        var fabricNode = ReactNativePrivateInterface.getNodeFromPublicInstance(inspectedView);\n        if (fabricNode) {\n          nativeFabricUIManager.findNodeAtPoint(fabricNode, locationX, locationY, function (internalInstanceHandle) {\n            var node = internalInstanceHandle != null ? getNodeFromInternalInstanceHandle(internalInstanceHandle) : null;\n            if (internalInstanceHandle == null || node == null) {\n              callback(assign({\n                pointerY: locationY,\n                frame: {\n                  left: 0,\n                  top: 0,\n                  width: 0,\n                  height: 0\n                }\n              }, getInspectorDataForInstance(closestInstance)));\n              return;\n            }\n            closestInstance = internalInstanceHandle.stateNode.canonical.internalInstanceHandle;\n            var nativeViewTag = internalInstanceHandle.stateNode.canonical.nativeTag;\n            nativeFabricUIManager.measure(node, function (x, y, width, height, pageX, pageY) {\n              var inspectorData = getInspectorDataForInstance(closestInstance);\n              callback(assign({}, inspectorData, {\n                pointerY: locationY,\n                frame: {\n                  left: pageX,\n                  top: pageY,\n                  width: width,\n                  height: height\n                },\n                touchedViewTag: nativeViewTag\n              }));\n            });\n          });\n        } else if (inspectedView._internalFiberInstanceHandleDEV != null) {\n          ReactNativePrivateInterface.UIManager.findSubviewIn(findNodeHandle(inspectedView), [locationX, locationY], function (nativeViewTag, left, top, width, height) {\n            var inspectorData = getInspectorDataForInstance(getInstanceFromTag(nativeViewTag));\n            callback(assign({}, inspectorData, {\n              pointerY: locationY,\n              frame: {\n                left: left,\n                top: top,\n                width: width,\n                height: height\n              },\n              touchedViewTag: nativeViewTag\n            }));\n          });\n        } else {\n          error(\"getInspectorDataForViewAtPoint expects to receive a host component\");\n          return;\n        }\n      }\n    }\n    function onRecoverableError(error$1) {\n      error(error$1);\n    }\n    function render(element, containerTag, callback) {\n      var root = roots.get(containerTag);\n      if (!root) {\n        root = createContainer(containerTag, LegacyRoot, null, false, null, \"\", onRecoverableError, null);\n        roots.set(containerTag, root);\n      }\n      updateContainer(element, root, null, callback);\n      return getPublicRootInstance(root);\n    }\n    function unmountComponentAtNode(containerTag) {\n      var root = roots.get(containerTag);\n      if (root) {\n        updateContainer(null, root, null, function () {\n          roots.delete(containerTag);\n        });\n      }\n    }\n    function unmountComponentAtNodeAndRemoveContainer(containerTag) {\n      unmountComponentAtNode(containerTag);\n      ReactNativePrivateInterface.UIManager.removeRootView(containerTag);\n    }\n    function createPortal(children, containerTag) {\n      var key = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : null;\n      return createPortal$1(children, containerTag, null, key);\n    }\n    setBatchingImplementation(batchedUpdates);\n    function computeComponentStackForErrorReporting(reactTag) {\n      var fiber = getInstanceFromTag(reactTag);\n      if (!fiber) {\n        return \"\";\n      }\n      return getStackByFiberInDevAndProd(fiber);\n    }\n    var roots = new Map();\n    var Internals = {\n      computeComponentStackForErrorReporting: computeComponentStackForErrorReporting\n    };\n    injectIntoDevTools({\n      findFiberByHostInstance: getInstanceFromTag,\n      bundleType: 1,\n      version: ReactVersion,\n      rendererPackageName: \"react-native-renderer\",\n      rendererConfig: {\n        getInspectorDataForInstance: getInspectorDataForInstance,\n        getInspectorDataForViewTag: getInspectorDataForViewTag,\n        getInspectorDataForViewAtPoint: getInspectorDataForViewAtPoint.bind(null, findNodeHandle)\n      }\n    });\n    exports.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED = Internals;\n    exports.createPortal = createPortal;\n    exports.dispatchCommand = dispatchCommand;\n    exports.findHostInstance_DEPRECATED = findHostInstance_DEPRECATED;\n    exports.findNodeHandle = findNodeHandle;\n    exports.getInspectorDataForInstance = getInspectorDataForInstance;\n    exports.isChildPublicInstance = isChildPublicInstance;\n    exports.render = render;\n    exports.sendAccessibilityEvent = sendAccessibilityEvent;\n    exports.unmountComponentAtNode = unmountComponentAtNode;\n    exports.unmountComponentAtNodeAndRemoveContainer = unmountComponentAtNodeAndRemoveContainer;\n    exports.unstable_batchedUpdates = batchedUpdates$1;\n    if (typeof __REACT_DEVTOOLS_GLOBAL_HOOK__ !== \"undefined\" && typeof __REACT_DEVTOOLS_GLOBAL_HOOK__.registerInternalModuleStop === \"function\") {\n      __REACT_DEVTOOLS_GLOBAL_HOOK__.registerInternalModuleStop(new Error());\n    }\n  })();\n}","map":{"version":3,"names":["__DEV__","__REACT_DEVTOOLS_GLOBAL_HOOK__","registerInternalModuleStart","Error","React","require","ReactNativePrivateInterface","Scheduler","ReactSharedInternals","__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED","warn","format","_len","arguments","length","args","Array","_key","printWarning","error","_len2","_key2","level","ReactDebugCurrentFrame","stack","getStackAddendum","concat","argsWithFormat","map","item","String","unshift","Function","prototype","apply","call","console","fakeNode","window","dispatchEvent","document","createEvent","createElement","invokeGuardedCallbackImpl","name","func","context","evt","didCall","didError","windowEvent","event","windowEventDescriptor","Object","getOwnPropertyDescriptor","restoreAfterDispatch","removeEventListener","evtType","callCallback","hasOwnProperty","_funcArgs","slice","didSetError","isCrossOriginError","handleWindowError","colno","lineno","defaultPrevented","_suppressLogging","inner","addEventListener","initEvent","defineProperty","onError","funcArgs","hasError","caughtError","hasRethrowError","rethrowError","reporter","invokeGuardedCallback","a","b","c","d","e","f","invokeGuardedCallbackAndCatchFirstError","clearCaughtError","rethrowCaughtError","hasCaughtError","isArrayImpl","isArray","getFiberCurrentPropsFromNode$1","getInstanceFromNode","getNodeFromInstance","setComponentTree","getFiberCurrentPropsFromNodeImpl","getInstanceFromNodeImpl","getNodeFromInstanceImpl","validateEventDispatches","dispatchListeners","_dispatchListeners","dispatchInstances","_dispatchInstances","listenersIsArr","listenersLen","instancesIsArr","instancesLen","executeDispatch","listener","inst","type","currentTarget","undefined","executeDispatchesInOrder","i","isPropagationStopped","executeDispatchesInOrderStopAtTrueImpl","executeDispatchesInOrderStopAtTrue","ret","executeDirectDispatch","dispatchListener","dispatchInstance","res","hasDispatches","assign","EVENT_POOL_SIZE","EventInterface","target","eventPhase","bubbles","cancelable","timeStamp","Date","now","isTrusted","functionThatReturnsTrue","functionThatReturnsFalse","SyntheticEvent","dispatchConfig","targetInst","nativeEvent","nativeEventTarget","preventDefault","stopPropagation","isDefaultPrevented","_targetInst","Interface","constructor","propName","normalize","returnValue","cancelBubble","persist","isPersistent","destructor","getPooledWarningPropertyDefinition","extend","Super","E","Class","addEventPoolingTo","getVal","set","val","action","isFunction","get","result","configurable","createOrGetPooledEvent","nativeInst","EventConstructor","eventPool","instance","pop","releasePooledEvent","push","getPooled","release","ResponderSyntheticEvent","touchHistory","TOP_TOUCH_START","TOP_TOUCH_MOVE","TOP_TOUCH_END","TOP_TOUCH_CANCEL","TOP_SCROLL","TOP_SELECTION_CHANGE","isStartish","topLevelType","isMoveish","isEndish","startDependencies","moveDependencies","endDependencies","MAX_TOUCH_BANK","touchBank","numberActiveTouches","indexOfSingleActiveTouch","mostRecentTimeStamp","timestampForTouch","touch","timestamp","createTouchRecord","touchActive","startPageX","pageX","startPageY","pageY","startTimeStamp","currentPageX","currentPageY","currentTimeStamp","previousPageX","previousPageY","previousTimeStamp","resetTouchRecord","touchRecord","getTouchIdentifier","_ref","identifier","recordTouchStart","recordTouchMove","printTouch","printTouchBank","recordTouchEnd","JSON","stringify","printed","instrumentationCallback","ResponderTouchHistoryStore","instrument","callback","recordTouchTrack","changedTouches","forEach","touches","touchTrackToCheck","activeRecord","accumulate","current","next","accumulateInto","forEachAccumulated","arr","cb","scope","FunctionComponent","ClassComponent","IndeterminateComponent","HostRoot","HostPortal","HostComponent","HostText","Fragment","Mode","ContextConsumer","ContextProvider","ForwardRef","Profiler","SuspenseComponent","MemoComponent","SimpleMemoComponent","LazyComponent","IncompleteClassComponent","DehydratedFragment","SuspenseListComponent","ScopeComponent","OffscreenComponent","LegacyHiddenComponent","CacheComponent","TracingMarkerComponent","HostHoistable","HostSingleton","responderInst","trackedTouchCount","changeResponder","nextResponderInst","blockHostResponder","oldResponderInst","ResponderEventPlugin","GlobalResponderHandler","onChange","eventTypes","startShouldSetResponder","phasedRegistrationNames","bubbled","captured","dependencies","scrollShouldSetResponder","selectionChangeShouldSetResponder","moveShouldSetResponder","responderStart","registrationName","responderMove","responderEnd","responderRelease","responderTerminationRequest","responderGrant","responderReject","responderTerminate","getParent$1","return","tag","getLowestCommonAncestor","instA","instB","depthA","tempA","depthB","tempB","depth","alternate","isAncestor","traverseTwoPhase$1","fn","arg","path","getListener$1","stateNode","props","listenerAtPhase$1","propagationPhase","accumulateDirectionalDispatches$1","phase","accumulateDispatches$1","ignoredDirection","accumulateDirectDispatchesSingle$1","accumulateDirectDispatches$1","events","accumulateTwoPhaseDispatchesSingleSkipTarget","parentInst","accumulateTwoPhaseDispatchesSkipTarget","accumulateTwoPhaseDispatchesSingle$1","accumulateTwoPhaseDispatches$1","setResponderAndExtractTransfer","shouldSetEventType","bubbleShouldSetFrom","skipOverBubbleShouldSetFrom","shouldSetEvent","wantsResponderInst","extracted","grantEvent","terminationRequestEvent","shouldSwitch","terminateEvent","rejectEvent","canTriggerTransfer","topLevelInst","responderIgnoreScroll","noResponderTouches","activeTouch","_getResponder","extractEvents","eventSystemFlags","isResponderTouchStart","isResponderTouchMove","isResponderTouchEnd","incrementalTouch","gesture","isResponderTerminate","isResponderRelease","finalTouch","finalEvent","injection","injectGlobalResponderHandler","eventPluginOrder","namesToPlugins","recomputePluginOrdering","pluginName","pluginModule","pluginIndex","indexOf","plugins","publishedEvents","eventName","publishEventForPlugin","eventNameDispatchConfigs","phaseName","phasedRegistrationName","publishRegistrationName","registrationNameModules","toLowerCase","injectEventPluginOrder","injectedEventPluginOrder","injectEventPluginsByName","injectedNamesToPlugins","isOrderingDirty","getListener","customBubblingEventTypes","ReactNativeViewConfigRegistry","customDirectEventTypes","listenerAtPhase","accumulateDirectionalDispatches","getParent","traverseTwoPhase","skipBubbling","accumulateTwoPhaseDispatchesSingle","accumulateTwoPhaseDispatches","accumulateCapturePhaseDispatches","accumulateDispatches","accumulateDirectDispatchesSingle","accumulateDirectDispatches","ReactNativeBridgeEventPlugin","bubbleDispatchConfig","directDispatchConfig","ReactNativeEventPluginOrder","instanceCache","Map","instanceProps","precacheFiberNode","hostInst","uncacheFiberNode","delete","getInstanceFromTag","getTagFromInstance","nativeInstance","_nativeTag","canonical","nativeTag","publicInstance","getFiberCurrentPropsFromNode","updateFiberProps","batchedUpdatesImpl","bookkeeping","isInsideEventHandler","batchedUpdates$1","setBatchingImplementation","_batchedUpdatesImpl","_discreteUpdatesImpl","eventQueue","executeDispatchesAndRelease","executeDispatchesAndReleaseTopLevel","runEventsInBatch","processingEventQueue","EMPTY_NATIVE_EVENT","touchSubsequence","indices","removeTouchesAtIndices","rippedOut","temp","index","fillAt","j","cur","_receiveRootNodeIDEvent","rootNodeID","nativeEventParam","runExtractedPluginEventsInBatch","extractPluginEvents","legacyPlugins","possiblePlugin","extractedEvents","receiveEvent","receiveTouches","eventTopLevelType","changedIndices","jj","ReactNativeGlobalResponderHandler","from","to","blockNativeResponder","UIManager","setJSResponder","clearJSResponder","RCTEventEmitter","register","key","_reactInternals","value","enableSchedulingProfiler","enableProfilerTimer","enableProfilerCommitHooks","enableProfilerNestedUpdatePhase","syncLaneExpirationMs","transitionLaneExpirationMs","enableLazyContextPropagation","enableLegacyHidden","enableAsyncActions","REACT_ELEMENT_TYPE","Symbol","for","REACT_PORTAL_TYPE","REACT_FRAGMENT_TYPE","REACT_STRICT_MODE_TYPE","REACT_PROFILER_TYPE","REACT_PROVIDER_TYPE","REACT_CONTEXT_TYPE","REACT_FORWARD_REF_TYPE","REACT_SUSPENSE_TYPE","REACT_SUSPENSE_LIST_TYPE","REACT_MEMO_TYPE","REACT_LAZY_TYPE","REACT_SCOPE_TYPE","REACT_DEBUG_TRACING_MODE_TYPE","REACT_OFFSCREEN_TYPE","REACT_LEGACY_HIDDEN_TYPE","REACT_CACHE_TYPE","REACT_TRACING_MARKER_TYPE","MAYBE_ITERATOR_SYMBOL","iterator","FAUX_ITERATOR_SYMBOL","getIteratorFn","maybeIterable","maybeIterator","getWrappedName$1","outerType","innerType","wrapperName","displayName","functionName","getContextName$1","REACT_CLIENT_REFERENCE","getComponentNameFromType","$$typeof","provider","_context","render","outerName","lazyComponent","payload","_payload","init","_init","x","getWrappedName","getContextName","getComponentNameFromFiber","fiber","NoFlags$1","PerformedWork","Placement","DidCapture","Hydrating","Update","ChildDeletion","ContentReset","Callback","ForceClientRender","Ref","Snapshot","Passive$1","Visibility","StoreConsistency","ScheduleRetry","ShouldSuspendCommit","DidDefer","LifecycleEffectMask","HostEffectMask","Incomplete","ShouldCapture","ForceUpdateForLegacySuspense","Forked","RefStatic","LayoutStatic","PassiveStatic","MaySuspendCommit","PlacementDEV","MountLayoutDev","MountPassiveDev","BeforeMutationMask","MutationMask","LayoutMask","PassiveMask","StaticMask","ReactCurrentOwner$3","ReactCurrentOwner","getNearestMountedFiber","node","nearestMounted","nextNode","flags","isFiberMounted","isMounted","component","owner","ownerFiber","_warnedAboutRefsInRender","assertIsMounted","findCurrentFiberUsingSlowPath","parentA","parentB","nextParent","child","sibling","didFindChild","_child","findCurrentHostFiber","parent","currentParent","findCurrentHostFiberImpl","match","doesFiberContain","parentFiber","childFiber","parentFiberAlternate","emptyObject$1","removedKeys","removedKeyCount","deepDifferOptions","unsafelyIgnoreFunctions","defaultDiffer","prevProp","nextProp","deepDiffer","restoreDeletedValuesInNestedArray","updatePayload","validAttributes","obj","propKey","attributeConfig","diff","process","nextValue","diffNestedArrayProperty","prevArray","nextArray","minLength","diffNestedProperty","clearNestedProperty","addNestedProperty","diffProperties","flattenStyle","addProperties","clearProperties","prevProps","nextProps","shouldUpdate","_nextValue","_propKey","create","mountSafeCallback_NOT_REALLY_SAFE","__isMounted","warnForStyleProps","style","ReactNativeFiberHostComponent","viewConfig","internalInstanceHandleDEV","_children","_internalFiberInstanceHandleDEV","_proto","blur","TextInputState","blurTextInput","focus","focusTextInput","measure","measureInWindow","measureLayout","relativeToNativeNode","onSuccess","onFail","relativeNode","nativeNode","setNativeProps","nativeProps","updateView","uiViewClassName","scheduleCallback$2","unstable_scheduleCallback","cancelCallback$1","unstable_cancelCallback","shouldYield","unstable_shouldYield","requestPaint","unstable_requestPaint","now$1","unstable_now","ImmediatePriority","unstable_ImmediatePriority","UserBlockingPriority","unstable_UserBlockingPriority","NormalPriority","unstable_NormalPriority","IdlePriority","unstable_IdlePriority","disabledDepth","prevLog","prevInfo","prevWarn","prevError","prevGroup","prevGroupCollapsed","prevGroupEnd","disabledLog","__reactDisabledLog","disableLogs","log","info","group","groupCollapsed","groupEnd","enumerable","writable","defineProperties","reenableLogs","rendererID","injectedHook","hasLoggedError","isDevToolsPresent","injectInternals","internals","hook","isDisabled","supportsFiber","inject","err","checkDCE","onScheduleRoot","root","children","onScheduleFiberRoot","onCommitRoot","eventPriority","onCommitFiberRoot","schedulerPriority","DiscreteEventPriority","ContinuousEventPriority","DefaultEventPriority","IdleEventPriority","onPostCommitRoot","onPostCommitFiberRoot","onCommitUnmount","onCommitFiberUnmount","setIsStrictModeForDevtools","newIsStrictMode","injectProfilingHooks","profilingHooks","getLaneLabelMap","NoMode","ConcurrentMode","ProfileMode","StrictLegacyMode","StrictEffectsMode","NoStrictPassiveEffectsMode","clz32","Math","clz32Fallback","LN2","asUint","TotalLanes","NoLanes","NoLane","SyncHydrationLane","SyncLane","SyncLaneIndex","InputContinuousHydrationLane","InputContinuousLane","DefaultHydrationLane","DefaultLane","SyncUpdateLanes","TransitionHydrationLane","TransitionLanes","TransitionLane1","TransitionLane2","TransitionLane3","TransitionLane4","TransitionLane5","TransitionLane6","TransitionLane7","TransitionLane8","TransitionLane9","TransitionLane10","TransitionLane11","TransitionLane12","TransitionLane13","TransitionLane14","TransitionLane15","RetryLanes","RetryLane1","RetryLane2","RetryLane3","RetryLane4","SomeRetryLane","SelectiveHydrationLane","NonIdleLanes","IdleHydrationLane","IdleLane","OffscreenLane","DeferredLane","UpdateLanes","NoTimestamp","nextTransitionLane","nextRetryLane","getHighestPriorityLanes","lanes","pendingSyncLanes","getHighestPriorityLane","getNextLanes","wipLanes","pendingLanes","nextLanes","suspendedLanes","pingedLanes","nonIdlePendingLanes","nonIdleUnblockedLanes","nonIdlePingedLanes","unblockedLanes","nextLane","wipLane","getEntangledLanes","renderLanes","entangledLanes","allEntangledLanes","entanglements","pickArbitraryLaneIndex","lane","computeExpirationTime","currentTime","markStarvedLanesAsExpired","expirationTimes","expirationTime","expiredLanes","getLanesToRetrySynchronouslyOnError","originallyAttemptedLanes","errorRecoveryDisabledLanes","everythingButOffscreen","includesSyncLane","includesNonIdleWork","includesOnlyRetries","includesOnlyNonUrgentLanes","UrgentLanes","includesOnlyTransitions","includesBlockingLane","SyncDefaultLanes","includesExpiredLane","isTransitionLane","claimNextTransitionLane","claimNextRetryLane","pickArbitraryLane","laneToIndex","includesSomeLane","isSubsetOfLanes","subset","mergeLanes","removeLanes","intersectLanes","laneToLanes","createLaneMap","initial","laneMap","markRootUpdated","updateLane","markRootSuspended$1","spawnedLane","markSpawnedDeferredLane","markRootPinged","markRootFinished","remainingLanes","noLongerPendingLanes","shellSuspendCounter","hiddenUpdates","hiddenUpdatesForLane","update","spawnedLaneIndex","markRootEntangled","rootEntangledLanes","upgradePendingLaneToSync","markHiddenUpdate","getBumpedLaneForHydration","renderLane","addFiberToLanesMap","pendingUpdatersLaneMap","updaters","add","movePendingFibersToMemoized","memoizedUpdaters","size","has","clear","getTransitionsForLanes","currentUpdatePriority","getCurrentUpdatePriority","setCurrentUpdatePriority","newPriority","higherEventPriority","lowerEventPriority","isHigherEventPriority","lanesToEventPriority","shim$1","isSuspenseInstancePending","isSuspenseInstanceFallback","getSuspenseInstanceFallbackErrorDetails","registerSuspenseInstanceRetry","clearSuspenseBoundary","clearSuspenseBoundaryFromContainer","errorHydratingContainer","shim","suspendResource","getViewConfigForType","nextReactTag","allocateTag","recursivelyUncacheFiberNode","appendInitialChild","parentInstance","createInstance","rootContainerInstance","hostContext","internalInstanceHandle","deepFreezeAndThrowOnMutationInDev","createView","createTextInstance","text","isInAParentText","finalizeInitialChildren","nativeTags","setChildren","getRootHostContext","getChildHostContext","parentHostContext","prevIsInAParentText","getPublicInstance","scheduleTimeout","setTimeout","cancelTimeout","clearTimeout","noTimeout","shouldSetTextContent","getCurrentEventPriority","shouldAttemptEagerTransition","appendChild","childTag","splice","manageChildren","appendChildToContainer","commitTextUpdate","textInstance","oldText","newText","commitMount","newProps","commitUpdate","updatePayloadTODO","oldProps","insertBefore","beforeChild","beforeChildIndex","_beforeChildIndex","insertInContainerBefore","removeChild","removeChildFromContainer","resetTextContent","hideInstance","display","hideTextInstance","unhideInstance","unhideTextInstance","preloadInstance","waitForCommitToBeReady","describeBuiltInComponentFrame","ownerFn","ownerName","describeComponentFrame","PossiblyWeakMap$1","WeakMap","sourceInfo","describeClassComponentFrame","ctor","describeFunctionComponentFrame","describeUnknownElementTypeFrameInDEV","loggedTypeFailures","ReactDebugCurrentFrame$1","setCurrentlyValidatingElement","element","_owner","setExtraStackFrame","checkPropTypes","typeSpecs","values","location","componentName","bind","typeSpecName","error$1","ex","message","valueStack","fiberStack","createCursor","defaultValue","cursor","warnedAboutMissingGetChildContext","emptyContextObject","freeze","contextStackCursor$1","didPerformWorkStackCursor","previousContext","getUnmaskedContext","workInProgress","Component","didPushOwnContextIfProvider","isContextProvider","cacheContext","unmaskedContext","maskedContext","__reactInternalMemoizedUnmaskedChildContext","__reactInternalMemoizedMaskedChildContext","getMaskedContext","contextTypes","hasContextChanged","childContextTypes","popContext","popTopLevelContextObject","pushTopLevelContextObject","didChange","processChildContext","parentContext","getChildContext","childContext","contextKey","pushContextProvider","memoizedMergedChildContext","__reactInternalMemoizedMergedChildContext","invalidateContextProvider","mergedContext","findCurrentUnmaskedContext","LegacyRoot","ConcurrentRoot","OffscreenVisible","OffscreenDetached","OffscreenPassiveEffectsConnected","isOffscreenManual","offscreenFiber","memoizedProps","mode","is","y","objectIs","isRootDehydrated","currentState","memoizedState","isDehydrated","contextStackCursor","contextFiberStackCursor","rootInstanceStackCursor","requiredContext","getRootHostContainer","rootInstance","pushHostContainer","nextRootInstance","nextRootContext","popHostContainer","getHostContext","pushHostContext","nextContext","popHostContext","isHydrating","didSuspendOrErrorDEV","hydrationErrors","didSuspendOrErrorWhileHydratingDEV","prepareToHydrateHostInstance","prepareToHydrateHostTextInstance","prepareToHydrateHostSuspenseInstance","popHydrationState","upgradeHydrationErrorsToRecoverable","queueRecoverableErrors","getIsHydrating","queueHydrationError","concurrentQueues","concurrentQueuesIndex","concurrentlyUpdatedLanes","finishQueueingConcurrentUpdates","endIndex","queue","pending","markUpdateLaneFromFiberToRoot","getConcurrentlyUpdatedLanes","enqueueUpdate$1","enqueueConcurrentHookUpdate","concurrentQueue","concurrentUpdate","getRootForUpdatedFiber","enqueueConcurrentHookUpdateAndEagerlyBailout","isConcurrentlyRendering","getWorkInProgressRoot","enqueueConcurrentClassUpdate","enqueueConcurrentRenderForLane","unsafe_markUpdateLaneFromFiberToRoot","sourceFiber","isHidden","childLanes","offscreenInstance","_visibility","throwIfInfiniteUpdateLoopDetected","detectUpdateOnUnmountedFiber","warnAboutUpdateOnNotYetMountedFiberInDEV","ReactCurrentActQueue$3","ReactCurrentActQueue","firstScheduledRoot","lastScheduledRoot","didScheduleMicrotask","didScheduleMicrotask_act","mightHavePendingSyncWork","isFlushingWork","currentEventTransitionLane","ensureRootIsScheduled","scheduleImmediateTask","processRootScheduleInMicrotask","scheduleTaskForRootDuringMicrotask","isBatchingLegacy","didScheduleLegacyUpdate","flushSyncWorkOnAllRoots","flushSyncWorkAcrossRoots_impl","flushSyncWorkOnLegacyRootsOnly","onlyLegacy","didPerformSomeWork","errors","workInProgressRoot","workInProgressRootRenderLanes","getWorkInProgressRootRenderLanes","performSyncWorkOnRoot","AggregateError","throwError","firstError","prev","existingCallbackNode","callbackNode","isWorkLoopSuspendedOnData","cancelPendingCommit","cancelCallback","callbackPriority","existingCallbackPriority","newCallbackPriority","fakeActCallbackNode$1","schedulerPriorityLevel","newCallbackNode","scheduleCallback$1","performConcurrentWorkOnRoot","getContinuationForRoot","originalCallbackNode","priorityLevel","requestTransitionLane","transition","currentEntangledLane","currentEntangledActionThenable","chainThenableValue","thenable","listeners","thenableWithOverride","status","reason","then","resolve","fulfilledThenable","rejectedThenable","peekEntangledActionLane","peekEntangledActionThenable","UpdateState","ReplaceState","ForceUpdate","CaptureUpdate","hasForceUpdate","didWarnUpdateInsideUpdate","currentlyProcessingQueue","initializeUpdateQueue","baseState","firstBaseUpdate","lastBaseUpdate","shared","hiddenCallbacks","callbacks","updateQueue","cloneUpdateQueue","currentQueue","clone","createUpdate","enqueueUpdate","sharedQueue","isUnsafeClassRenderPhaseUpdate","entangleTransitions","queueLanes","newQueueLanes","enqueueCapturedUpdate","capturedUpdate","newFirst","newLast","getStateFromUpdate","prevState","enterDisallowedContextReadInDEV","nextState","exitDisallowedContextReadInDEV","partialState","didReadFromEntangledAsyncAction","suspendIfUpdateReadFromEntangledAsyncAction","entangledActionThenable","processUpdateQueue","pendingQueue","lastPendingUpdate","firstPendingUpdate","currentLastBaseUpdate","newState","newLanes","newBaseState","newFirstBaseUpdate","newLastBaseUpdate","isHiddenUpdate","shouldSkipUpdate","_clone","_lastPendingUpdate","_firstPendingUpdate","markSkippedUpdateLanes","resetHasForceUpdateBeforeProcessing","checkHasForceUpdateAfterProcessing","deferHiddenCallbacks","newHiddenCallbacks","existingHiddenCallbacks","commitHiddenCallbacks","commitCallbacks","shallowEqual","objA","objB","keysA","keys","keysB","currentKey","describeFiber","_debugOwner","getStackByFiberInDevAndProd","isRendering","getCurrentFiberOwnerNameInDevOrNull","getCurrentFiberStackInDev","resetCurrentFiber","getCurrentStack","setCurrentFiber","getCurrentFiber","setIsRendering","rendering","ReactStrictModeWarnings","recordUnsafeLifecycleWarnings","flushPendingUnsafeLifecycleWarnings","recordLegacyContextWarning","flushLegacyContextWarning","discardPendingWarnings","findStrictRoot","maybeStrictRoot","setToSortedString","array","sort","join","pendingComponentWillMountWarnings","pendingUNSAFE_ComponentWillMountWarnings","pendingComponentWillReceivePropsWarnings","pendingUNSAFE_ComponentWillReceivePropsWarnings","pendingComponentWillUpdateWarnings","pendingUNSAFE_ComponentWillUpdateWarnings","didWarnAboutUnsafeLifecycles","Set","componentWillMount","__suppressDeprecationWarning","UNSAFE_componentWillMount","componentWillReceiveProps","UNSAFE_componentWillReceiveProps","componentWillUpdate","UNSAFE_componentWillUpdate","componentWillMountUniqueNames","UNSAFE_componentWillMountUniqueNames","componentWillReceivePropsUniqueNames","UNSAFE_componentWillReceivePropsUniqueNames","componentWillUpdateUniqueNames","UNSAFE_componentWillUpdateUniqueNames","sortedNames","_sortedNames","_sortedNames2","_sortedNames3","_sortedNames4","_sortedNames5","pendingLegacyContextWarning","didWarnAboutLegacyContext","strictRoot","warningsForRoot","fiberArray","firstFiber","uniqueNames","typeName","hasToStringTag","toStringTag","willCoercionThrow","testStringCoercion","checkKeyStringCoercion","checkPropStringCoercion","ReactCurrentActQueue$2","getThenablesFromState","state","devState","thenables","SuspenseException","SuspenseyCommitException","noopSuspenseyCommitThenable","createThenableState","didWarnAboutUncachedPromise","isThenableResolved","noop","trackUsedThenable","thenableState","didUsePromise","trackedThenables","previous","thenableStateDev","fulfilledValue","rejectedError","checkIfUseWrappedInAsyncCatch","pendingThenable","_rejectedError","suspendedThenable","needsToResetSuspendedThenableDEV","getSuspendedThenable","checkIfUseWrappedInTryCatch","rejectedReason","thenableState$1","thenableIndexCounter$1","didWarnAboutMaps","didWarnAboutGenerators","didWarnAboutStringRefs","ownerHasKeyUseWarning","ownerHasFunctionTypeWarning","warnForMissingKey","returnFiber","_store","validated","isReactClass","isReactComponent","unwrapThenable","coerceRef","mixedRef","ref","resolvedInst","stringRef","_stringRef","refs","throwOnInvalidObjectType","newChild","childString","toString","warnOnFunctionType","resolveLazy","lazyType","createChildReconciler","shouldTrackSideEffects","deleteChild","childToDelete","deletions","deleteRemainingChildren","currentFirstChild","mapRemainingChildren","existingChildren","existingChild","useFiber","pendingProps","createWorkInProgress","placeChild","newFiber","lastPlacedIndex","newIndex","oldIndex","placeSingleChild","updateTextNode","textContent","created","createFiberFromText","existing","updateElement","elementType","updateFragment","isCompatibleFamilyForHotReloading","createFiberFromElement","updatePortal","portal","containerInfo","implementation","createFiberFromPortal","fragment","createFiberFromFragment","createChild","_created","_created2","_created3","readContextDuringReconcilation","updateSlot","oldFiber","updateFromMap","newIdx","matchedFiber","_matchedFiber","_matchedFiber2","_matchedFiber3","warnOnInvalidKey","knownKeys","reconcileChildrenArray","newChildren","resultingFirstChild","previousNewFiber","nextOldFiber","_newFiber","_newFiber2","reconcileChildrenIterator","newChildrenIterable","iteratorFn","entries","_newChildren","_step","done","step","_newFiber3","_newFiber4","reconcileSingleTextNode","reconcileSingleElement","_existing","_created4","reconcileSinglePortal","reconcileChildFibersImpl","isUnkeyedTopLevelFragment","reconcileChildFibers","firstChildFiber","mountChildFibers","resetChildReconcilerOnUnwind","cloneChildFibers","currentChild","resetChildFibers","resetWorkInProgress","currentTreeHiddenStackCursor","prevEntangledRenderLanesCursor","pushHiddenContext","prevEntangledRenderLanes","getEntangledRenderLanes","setEntangledRenderLanes","baseLanes","reuseHiddenContextOnStack","popHiddenContext","isCurrentTreeHidden","suspenseHandlerStackCursor","shellBoundary","getShellBoundary","pushPrimaryTreeSuspenseHandler","handler","pushSuspenseListContext","setDefaultShallowSuspenseListContext","suspenseStackCursor","pushFallbackTreeSuspenseHandler","reuseSuspenseHandlerOnStack","pushOffscreenSuspenseHandler","getSuspenseHandler","popSuspenseHandler","popSuspenseListContext","DefaultSuspenseContext","SubtreeSuspenseContextMask","ForceSuspenseFallback","hasSuspenseListContext","flag","setShallowSuspenseListContext","shallowContext","newContext","findFirstSuspended","row","dehydrated","revealOrder","didSuspend","NoFlags","HasEffect","Insertion","Layout","Passive","ReactCurrentDispatcher$1","ReactCurrentDispatcher","ReactCurrentBatchConfig$2","ReactCurrentBatchConfig","didWarnAboutMismatchedHooksForComponent","didWarnUncachedGetSnapshot","didWarnAboutUseWrappedInTryCatch","didWarnAboutAsyncClientComponent","currentlyRenderingFiber$1","currentHook","workInProgressHook","didScheduleRenderPhaseUpdate","didScheduleRenderPhaseUpdateDuringThisPass","shouldDoubleInvokeUserFnsInHooksDEV","thenableIndexCounter","globalClientIdCounter","RE_RENDER_LIMIT","currentHookNameInDev","hookTypesDev","hookTypesUpdateIndexDev","ignorePreviousDependencies","mountHookTypesDev","hookName","updateHookTypesDev","warnOnHookMismatchInDev","checkDepsAreArrayDev","deps","currentHookName","table","secondColumnStart","oldHookName","newHookName","warnIfAsyncClientComponent","isAsyncFunction","throwInvalidHookError","areHookInputsEqual","nextDeps","prevDeps","renderWithHooks","secondArg","nextRenderLanes","_debugHookTypes","HooksDispatcherOnUpdateInDEV","HooksDispatcherOnMountWithHookTypesInDEV","HooksDispatcherOnMountInDEV","shouldDoubleRenderDEV","renderWithHooksAgain","finishRenderingHooks","ContextOnlyDispatcher","didRenderTooFewHooks","replaySuspendedComponentWithHooks","numberOfReRenders","HooksDispatcherOnRerenderInDEV","bailoutHooks","resetHooksAfterThrow","resetHooksOnUnwind","mountWorkInProgressHook","baseQueue","updateWorkInProgressHook","nextCurrentHook","nextWorkInProgressHook","currentFiber","newHook","createFunctionComponentUpdateQueue","lastEffect","stores","useThenable","use","usable","readContext","basicStateReducer","mountReducer","reducer","initialArg","initialState","dispatch","lastRenderedReducer","lastRenderedState","dispatchReducerAction","updateReducer","updateReducerImpl","baseFirst","pendingFirst","first","newBaseQueueFirst","newBaseQueueLast","revertLane","hasEagerState","eagerState","markWorkInProgressReceivedUpdate","rerenderReducer","lastRenderPhaseUpdate","firstRenderPhaseUpdate","mountSyncExternalStore","subscribe","getSnapshot","getServerSnapshot","nextSnapshot","cachedSnapshot","rootRenderLanes","pushStoreConsistencyCheck","mountEffect","subscribeToStore","pushEffect","updateStoreInstance","createEffectInstance","updateSyncExternalStore","prevSnapshot","snapshotChanged","updateEffect","renderedSnapshot","check","componentUpdateQueue","checkIfSnapshotChanged","forceStoreRerender","handleStoreChange","latestGetSnapshot","prevValue","scheduleUpdateOnFiber","mountStateImpl","initialStateInitializer","mountState","dispatchSetState","updateState","rerenderState","effect","firstEffect","destroy","mountRef","initialValue","_ref2","updateRef","mountEffectImpl","fiberFlags","hookFlags","updateEffectImpl","prevEffect","mountInsertionEffect","updateInsertionEffect","mountLayoutEffect","updateLayoutEffect","imperativeHandleEffect","refCallback","refObject","_inst","mountImperativeHandle","effectDeps","updateImperativeHandle","mountDebugValue","formatterFn","updateDebugValue","mountCallback","updateCallback","mountMemo","nextCreate","updateMemo","mountDeferredValue","mountDeferredValueImpl","updateDeferredValue","resolvedCurrentHook","updateDeferredValueImpl","rerenderDeferredValue","deferredLane","requestDeferredLane","resultValue","shouldDeferValue","startTransition","pendingState","finishedState","options","previousPriority","prevTransition","currentTransition","_callbacks","_updatedFibers","thenableForFinishedState","updatedFibersCount","mountTransition","stateHook","start","updateTransition","_updateState","booleanOrThenable","isPending","rerenderTransition","_rerenderState","mountId","identifierPrefix","id","globalClientId","updateId","requestUpdateLane","isRenderPhaseUpdate","enqueueRenderPhaseUpdate","entangleTransitionUpdate","prevDispatcher","InvalidNestedHooksDispatcherOnUpdateInDEV","useCallback","useContext","useEffect","useImperativeHandle","useInsertionEffect","useLayoutEffect","useMemo","useReducer","useRef","useState","useDebugValue","useDeferredValue","useTransition","useSyncExternalStore","useId","InvalidNestedHooksDispatcherOnMountInDEV","InvalidNestedHooksDispatcherOnRerenderInDEV","warnInvalidContextAccess","warnInvalidHookAccess","commitTime","layoutEffectStartTime","profilerStartTime","passiveEffectStartTime","currentUpdateIsNested","nestedUpdateScheduled","isCurrentUpdateNested","markNestedUpdateScheduled","resetNestedUpdateFlag","syncNestedUpdateFlag","getCommitTime","recordCommitTime","startProfilerTimer","actualStartTime","stopProfilerTimerIfRunning","stopProfilerTimerIfRunningAndRecordDelta","overrideBaseTime","elapsedTime","actualDuration","selfBaseDuration","recordLayoutEffectDuration","effectDuration","parentStateNode","recordPassiveEffectDuration","passiveEffectDuration","startLayoutEffectTimer","startPassiveEffectTimer","transferActualDuration","resolveDefaultProps","baseProps","defaultProps","fakeInternalInstance","didWarnAboutStateAssignmentForComponent","didWarnAboutUninitializedState","didWarnAboutGetSnapshotBeforeUpdateWithoutDidUpdate","didWarnAboutLegacyLifecyclesAndDerivedState","didWarnAboutUndefinedDerivedState","didWarnAboutDirectlyAssigningPropsToState","didWarnAboutContextTypeAndContextTypes","didWarnAboutInvalidateContextType","didWarnOnInvalidCallback","warnOnInvalidCallback","callerName","warnOnUndefinedDerivedState","applyDerivedStateFromProps","getDerivedStateFromProps","classComponentUpdater","enqueueSetState","enqueueReplaceState","enqueueForceUpdate","checkShouldComponentUpdate","oldState","shouldComponentUpdate","isPureReactComponent","checkClassInstance","renderPresent","getInitialState","isReactClassApproved","getDefaultProps","propTypes","contextType","componentShouldUpdate","componentDidUnmount","componentDidReceiveProps","componentWillRecieveProps","UNSAFE_componentWillRecieveProps","hasMutatedProps","getSnapshotBeforeUpdate","componentDidUpdate","getDerivedStateFromError","adoptClassInstance","updater","_reactInternalInstance","constructClassInstance","isLegacyContextConsumer","isValid","addendum","foundWillMountName","foundWillReceivePropsName","foundWillUpdateName","_componentName","newApiName","callComponentWillMount","callComponentWillReceiveProps","mountClassInstance","componentDidMount","resumeMountClassInstance","oldContext","nextLegacyUnmaskedContext","hasNewLifecycles","updateClassInstance","unresolvedOldProps","unresolvedNewProps","nextUnmaskedContext","createCapturedValueAtFiber","source","digest","createCapturedValue","ReactFiberErrorDialog","showErrorDialog","boundary","errorInfo","capturedError","componentStack","errorBoundary","logCapturedError","logError","componentNameMessage","errorBoundaryMessage","errorBoundaryName","combinedMessage","createRootErrorUpdate","onUncaughtError","createClassErrorUpdate","markFailedErrorBoundaryForHotReloading","componentDidCatch","markLegacyErrorBoundaryAsFailed","resetSuspendedComponent","currentSource","markSuspenseBoundaryShouldCapture","suspenseBoundary","currentSourceFiber","throwException","restorePendingUpdaters","wakeable","renderDidSuspendDelayIfPossible","renderDidSuspend","isSuspenseyResource","retryQueue","attachPingListener","_isSuspenseyResource","offscreenQueue","newOffscreenQueue","transitions","markerInstances","_retryQueue","uncaughtSuspenseError","renderDidError","_errorInfo","isAlreadyFailedLegacyErrorBoundary","_lane","_update","ReactCurrentOwner$2","SelectiveHydrationException","didReceiveUpdate","didWarnAboutBadClass","didWarnAboutModulePatternComponent","didWarnAboutContextTypeOnFunctionComponent","didWarnAboutGetDerivedStateOnFunctionComponent","didWarnAboutFunctionRefs","didWarnAboutReassigningProps","didWarnAboutRevealOrder","didWarnAboutTailOptions","didWarnAboutDefaultPropsOnFunctionComponent","reconcileChildren","nextChildren","forceUnmountCurrentAndReconcile","updateForwardRef","innerPropTypes","prepareToReadContext","bailoutOnAlreadyFinishedWork","updateMemoComponent","isSimpleFunctionComponent","compare","resolvedType","resolveFunctionForHotReloading","validateFunctionComponentInDev","updateSimpleMemoComponent","createFiberFromTypeAndProps","_type","_innerPropTypes","hasScheduledUpdateOrContext","checkScheduledUpdateOrContext","outerMemoType","outerPropTypes","updateFunctionComponent","updateOffscreenComponent","nextIsDetached","_pendingVisibility","markRef$1","nextBaseLanes","currentChildLanes","lanesWeJustAttempted","remainingChildLanes","deferHiddenOffscreenComponent","cachePool","_nextBaseLanes","_nextState","updateMode","updateProfiler","replayFunctionComponent","updateClassComponent","shouldError","_instance","tempInstance","hasContext","resetSuspendedCurrentOnMountInLegacyMode","nextUnitOfWork","finishClassComponent","didCaptureError","pushHostRootContext","pendingContext","updateHostRoot","prevChildren","updateHostComponent$1","updateHostText$1","mountLazyComponent","_current","resolvedTag","resolveLazyComponentTag","resolvedProps","resolveClassForHotReloading","resolveForwardRefForHotReloading","hint","mountIncompleteClassComponent","mountIndeterminateComponent","_componentName2","warningKey","_componentName3","_componentName4","_componentName5","SUSPENDED_MARKER","treeContext","retryLane","mountSuspenseOffscreenState","getSuspendedCache","updateSuspenseOffscreenState","prevOffscreenState","shouldRemainOnFallback","suspenseState","suspenseContext","getRemainingWorkInPrimaryTree","primaryTreeDidDefer","peekDeferredLane","updateSuspenseComponent","shouldSuspend","showFallback","didPrimaryChildrenDefer","nextPrimaryChildren","nextFallbackChildren","fallback","fallbackFragment","mountSuspenseFallbackChildren","primaryChildFragment","mountSuspensePrimaryChildren","_dehydrated","updateDehydratedSuspenseComponent","_nextFallbackChildren","_nextPrimaryChildren","fallbackChildFragment","updateSuspenseFallbackChildren","_primaryChildFragment2","_nextPrimaryChildren2","_primaryChildFragment3","updateSuspensePrimaryChildren","primaryChildren","primaryChildProps","mountWorkInProgressOffscreenFiber","fallbackChildren","progressedPrimaryFragment","treeBaseDuration","offscreenProps","createFiberFromOffscreen","updateWorkInProgressOffscreenFiber","currentPrimaryChildFragment","currentFallbackChildFragment","subtreeFlags","retrySuspenseComponentWithoutHydrating","recoverableError","mountSuspenseFallbackAfterRetryWithoutHydrating","fiberMode","suspenseInstance","_getSuspenseInstanceF","capturedValue","attemptHydrationAtLane","retryDehydratedSuspenseBoundary","_capturedValue","_primaryChildFragment4","scheduleSuspenseWorkOnFiber","propagationRoot","scheduleContextWorkOnParentPath","propagateSuspenseContextChange","firstChild","findLastContentRow","lastContentRow","currentRow","validateRevealOrder","validateTailOptions","tailMode","validateSuspenseListNestedChild","childSlot","isAnArray","isIterable","validateSuspenseListChildren","childrenIterator","_i","initSuspenseListRenderState","isBackwards","tail","renderState","renderingStartTime","last","updateSuspenseListComponent","shouldForceFallback","didSuspendBefore","_tail","nextRow","updatePortalComponent","hasWarnedAboutUsingNoValuePropOnContextProvider","updateContextProvider","providerType","newValue","providerPropTypes","pushProvider","oldValue","propagateContextChange","hasWarnedAboutUsingContextAsConsumer","updateContextConsumer","Consumer","remountFiber","oldWorkInProgress","newWorkInProgress","prevSibling","updateLanes","attemptEarlyBailoutIfNoScheduledUpdate","hasChildWork","primaryChildLanes","_hasChildWork","beginWork$1","_debugNeedsRemount","unresolvedProps","_Component","_unresolvedProps","_resolvedProps","_unresolvedProps2","_resolvedProps2","_type2","_unresolvedProps3","_resolvedProps3","_Component2","_unresolvedProps4","_resolvedProps4","valueCursor","rendererCursorDEV","rendererSigil","currentlyRenderingFiber","lastContextDependency","lastFullyObservedContext","isDisallowedContextReadInDEV","resetContextDependencies","providerFiber","_currentValue","_currentRenderer","popProvider","currentValue","currentRenderer","propagateContextChange_eager","nextFiber","list","dependency","firstContext","parentSuspense","_alternate","readContextForConsumer","consumer","contextItem","memoizedValue","ReactCurrentBatchConfig$1","requestCurrentTransition","handleAsyncAction","notifyTransitionCallbacks","markUpdate","markRef","appendAllChildren","needsVisibilityToggle","updateHostComponent","preloadInstanceAndSuspendIfNeeded","scheduleRetryEffect","wakeables","updateHostText","cutOffTailIfNeeded","hasRenderedATailFallback","tailNode","lastTailNode","_tailNode","_lastTailNode","bubbleProperties","completedWork","didBailout","newChildLanes","_treeBaseDuration","_child2","_child3","completeDehydratedSuspenseBoundary","wasHydrated","isTimedOutSuspense","_isTimedOutSuspense","_primaryChildFragment","completeWork","fiberRoot","_currentHostContext","_wasHydrated2","_rootContainerInstance","_instance3","_rootContainerInstance2","_currentHostContext2","_wasHydrated3","fallthroughToNormalSuspensePath","nextDidTimeout","prevDidTimeout","_offscreenFiber2","didSuspendAlready","renderedTail","cannotBeSuspended","renderHasNotSuspendedYet","suspended","getRenderTargetTime","_suspended","_retryQueue2","previousSibling","nextIsHidden","_prevState","prevIsHidden","_retryQueue3","unwindWork","_flags","_flags2","_flags3","unwindInterruptedWork","interruptedWork","didWarnAboutUndefinedSnapshotBeforeUpdate","offscreenSubtreeIsHidden","offscreenSubtreeWasHidden","PossiblyWeakSet","WeakSet","nextEffect","inProgressLanes","inProgressRoot","shouldProfile","getExecutionContext","CommitContext","NoContext","reportUncaughtErrorInDEV","callComponentWillUnmountWithTimer","componentWillUnmount","safelyCallComponentWillUnmount","nearestMountedAncestor","captureCommitPhaseError","safelyAttachRef","commitAttachRef","safelyDetachRef","refCleanup","finishedWork","retVal","safelyCallDestroy","shouldFireAfterActiveInstanceBlur","commitBeforeMutationEffects","commitBeforeMutationEffects_begin","shouldFire","commitBeforeMutationEffects_complete","commitBeforeMutationEffectsOnFiber","snapshot","didWarnSet","__reactInternalSnapshotBeforeUpdate","commitHookEffectListUnmount","setIsRunningInsertionEffect","commitHookEffectListMount","commitPassiveEffectDurations","finishedRoot","_finishedWork$memoize","onPostCommit","outer","commitHookLayoutEffects","commitClassLayoutLifecycles","commitClassCallbacks","commitHostComponentMount","commitProfilerUpdate","_finishedWork$memoize2","onCommit","onRender","enqueuePendingPassiveProfilerEffect","commitLayoutEffectOnFiber","committedLanes","recursivelyTraverseLayoutEffects","isModernRoot","newOffscreenSubtreeIsHidden","wasHidden","newOffscreenSubtreeWasHidden","prevOffscreenSubtreeIsHidden","prevOffscreenSubtreeWasHidden","includeWorkInProgressEffects","recursivelyTraverseReappearLayoutEffects","hideOrUnhideAllChildren","hostSubtreeRoot","instanceToUse","detachFiberMutation","detachFiberAfterEffects","getHostParentFiber","isHostParent","getHostSibling","siblings","commitPlacement","_parent","_before","insertOrAppendPlacementNode","_parent2","_before2","insertOrAppendPlacementNodeIntoContainer","before","isHost","hostParent","hostParentIsContainer","commitDeletionEffects","deletedFiber","findParent","commitDeletionEffectsOnFiber","recursivelyTraverseDeletionEffects","_prevHostParent","_prevHostParentIsContainer","_prevHostParent2","_prevHostParentIsContainer2","commitSuspenseCallback","getRetryCache","retryCache","_retryCache","detachOffscreenInstance","attachOffscreenInstance","attachSuspenseRetryListeners","retry","resolveRetryWakeable","commitMutationEffects","commitMutationEffectsOnFiber","recursivelyTraverseMutationEffects","prevDebugFiber","commitReconciliationEffects","_instance2","_updatePayload","isShowingFallback","wasShowingFallback","markCommitTimeOfFallback","isUpdate","wasHiddenByAncestorOffscreen","recursivelyTraverseDisappearLayoutEffects","commitLayoutEffects","disappearLayoutEffects","reappearLayoutEffects","offscreenState","childShouldIncludeWorkInProgressEffects","commitHookPassiveMountEffects","commitPassiveMountEffects","committedTransitions","commitPassiveMountOnFiber","recursivelyTraversePassiveMountEffects","recursivelyTraverseReconnectPassiveEffects","reconnectPassiveEffects","_instance4","commitPassiveUnmountEffects","commitPassiveUnmountOnFiber","suspenseyCommitFlag","accumulateSuspenseyCommit","accumulateSuspenseyCommitOnFiber","recursivelyAccumulateSuspenseyCommit","prevFlags","detachAlternateSiblings","previousFiber","detachedChild","detachedSibling","commitHookPassiveUnmountEffects","recursivelyTraversePassiveUnmountEffects","commitPassiveUnmountEffectsInsideOfDeletedTree_begin","recursivelyTraverseDisconnectPassiveEffects","disconnectPassiveEffect","deletedSubtreeRoot","commitPassiveUnmountInsideDeletedTreeOnFiber","commitPassiveUnmountEffectsInsideOfDeletedTree_complete","invokeLayoutEffectMountInDEV","invokePassiveEffectMountInDEV","invokeLayoutEffectUnmountInDEV","invokePassiveEffectUnmountInDEV","symbolFor","ReactCurrentActQueue$1","isLegacyActEnvironment","isReactActEnvironmentGlobal","IS_REACT_ACT_ENVIRONMENT","jestIsDefined","jest","isConcurrentActEnvironment","PossiblyWeakMap","ReactCurrentOwner$1","BatchedContext","RenderContext","RootInProgress","RootFatalErrored","RootErrored","RootSuspended","RootSuspendedWithDelay","RootCompleted","RootDidNotComplete","executionContext","NotSuspended","SuspendedOnError","SuspendedOnData","SuspendedOnImmediate","SuspendedOnInstance","SuspendedOnInstanceAndReadyToContinue","SuspendedOnDeprecatedThrowPromise","SuspendedAndReadyToContinue","SuspendedOnHydration","workInProgressSuspendedReason","workInProgressThrownValue","workInProgressRootDidAttachPingListener","entangledRenderLanes","workInProgressRootExitStatus","workInProgressRootFatalError","workInProgressRootSkippedLanes","workInProgressRootInterleavedUpdatedLanes","workInProgressRootPingedLanes","workInProgressDeferredLane","workInProgressRootConcurrentErrors","workInProgressRootRecoverableErrors","globalMostRecentFallbackTime","FALLBACK_THROTTLE_MS","workInProgressRootRenderTargetTime","Infinity","RENDER_TIMEOUT_MS","workInProgressTransitions","resetRenderTimer","hasUncaughtError","firstUncaughtError","legacyErrorBoundariesThatAlreadyFailed","rootDoesHavePassiveEffects","rootWithPendingPassiveEffects","pendingPassiveEffectsLanes","pendingPassiveProfilerEffects","NESTED_UPDATE_LIMIT","nestedUpdateCount","rootWithNestedUpdates","isFlushingPassiveEffects","didScheduleUpdateDuringPassiveEffects","NESTED_PASSIVE_UPDATE_LIMIT","nestedPassiveUpdateCount","rootWithPassiveNestedUpdates","isRunningInsertionEffect","batchConfigTransition","actionScopeLane","eventLane","requestRetryLane","isPrerendering","suspenseHandler","prepareFreshStack","markRootSuspended","warnAboutRenderPhaseUpdatesInDEV","warnIfUpdatesNotWrappedWithActDEV","didTimeout","didFlushPassiveEffects","flushPassiveEffects","shouldTimeSlice","exitStatus","renderRootConcurrent","renderRootSync","renderWasConcurrent","isRenderConsistentWithExternalStores","errorRetryLanes","recoverFromConcurrentError","fatalError","finishedLanes","finishConcurrentRender","errorsFromFirstAttempt","wasRootDehydrated","rootWorkInProgress","errorsFromSecondAttempt","shouldForceFlushFallbacksInDEV","commitRoot","msUntilTimeout","timeoutHandle","commitRootWhenReady","recoverableErrors","schedulePendingCommit","checks","renderedValue","batchedUpdates","prevExecutionContext","flushSync","newEntangledRenderLanes","resetWorkInProgressStack","resetSuspendedWorkLoopOnUnwind","handleThrow","thrownValue","shouldRemainOnPreviousScreen","isWakeable","erroredWork","pushDispatcher","container","popDispatcher","didSuspendInShell","unitOfWork","throwAndUnwindWorkLoop","workLoopSync","performUnitOfWork","resumeOrUnwind","replaySuspendedUnitOfWork","onResolution","_thenable","hostFiber","isReady","completeUnitOfWork","workLoopConcurrent","beginWork","isProfilingMode","didFatal","panicOnRootError","unwindUnitOfWork","siblingFiber","incompleteWork","previousUpdateLanePriority","commitRootImpl","renderPriorityLevel","flushRenderPhaseStrictModeWarningsInDEV","scheduleCallback","subtreeHasEffects","rootHasEffect","rootDidHavePassiveEffects","commitDoubleInvokeEffectsInDEV","onRecoverableError","makeErrorInfo","renderPriority","priority","flushPassiveEffectsImpl","profilerEffects","prepareToThrowUncaughtError","captureCommitPhaseErrorOnRoot","rootFiber","pingCache","threadIDs","ping","pingSuspendedRoot","warnIfSuspenseResolutionNotWrappedWithActDEV","retryTimedOutBoundary","boundaryFiber","hasPassiveEffects","legacyCommitDoubleInvokeEffectsInDEV","invokeEffectsInDev","invokeEffectFn","subtreeRoot","primarySubtreeFlag","didWarnStateUpdateForNotYetMountedComponent","dummyFiber","originalWorkInProgressCopy","assignFiberPropertiesInDEV","originalError","replayError","didWarnAboutUpdateInRender","didWarnAboutUpdateInRenderForAnotherComponent","renderingComponentName","dedupeKey","setStateComponentName","schedulingFiber","fakeActCallbackNode","actQueue","isRunning","resolveFamily","failedBoundaries","setRefreshHandler","family","currentRender","syntheticType","prevType","nextType","needsCompareFamilies","$$typeofNextType","prevFamily","scheduleRefresh","staleFamilies","updatedFamilies","scheduleFibersWithFamiliesRecursively","scheduleRoot","updateContainer","candidateType","needsRender","needsRemount","findHostInstancesForRefresh","families","hostInstances","types","findHostInstancesForMatchingFibersRecursively","didMatch","findHostInstancesForFiberShallowly","foundHostInstances","findChildHostInstancesForFiberShallowly","hasBadMapPolyfill","nonExtensibleObject","preventExtensions","FiberNode","Number","NaN","createFiber","shouldConstruct","currentDependencies","createHostRootFiber","isStrictMode","concurrentUpdatesByDefaultOverride","fiberTag","getTag","createFiberFromProfiler","createFiberFromSuspense","createFiberFromSuspenseList","elements","primaryChildInstance","_pendingMarkers","_transitions","detach","attach","content","pendingChildren","FiberRootNode","hydrate","formState","incompleteTransitions","_debugRootType","createFiberRoot","initialChildren","hydrationCallbacks","transitionCallbacks","uninitializedFiber","_initialState","cache","ReactVersion","createPortal$1","didWarnAboutNestedUpdates","didWarnAboutFindNodeInStrictMode","getContextForSubtree","parentComponent","findHostInstanceWithWarning","methodName","createContainer","current$1","getPublicRootInstance","containerFiber","shouldErrorImpl","shouldSuspendImpl","overrideHookState","overrideHookStateDeletePath","overrideHookStateRenamePath","overrideProps","overridePropsDeletePath","overridePropsRenamePath","scheduleUpdate","setErrorHandler","setSuspenseHandler","copyWithDeleteImpl","updated","copyWithDelete","copyWithRenameImpl","oldPath","newPath","oldKey","newKey","copyWithRename","copyWithSetImpl","copyWithSet","findHook","newShouldErrorImpl","newShouldSuspendImpl","findHostInstanceByFiber","emptyFindFiberByHostInstance","getCurrentFiberForDevTools","injectIntoDevTools","devToolsConfig","findFiberByHostInstance","bundleType","version","rendererPackageName","rendererConfig","currentDispatcherRef","reconcilerVersion","findHostInstance_DEPRECATED","componentOrHandle","hostInstance","findNodeHandle","getNativeTagFromPublicInstance","dispatchCommand","handle","command","getNodeFromPublicInstance","nativeFabricUIManager","dispatchViewManagerCommand","sendAccessibilityEvent","eventType","legacySendAccessibilityEvent","getNodeFromInternalInstanceHandle","isChildPublicInstance","childInstance","parentInternalInstanceHandle","getInternalInstanceHandleFromPublicInstance","childInternalInstanceHandle","emptyObject","createHierarchy","fiberHierarchy","getInspectorData","getHostProps","getHostNode","hostNode","host","getInspectorDataForInstance","closestInstance","hierarchy","selectedIndex","getOwnerHierarchy","lastNonHostInstance","traverseOwnerTreeUp","getInspectorDataForViewTag","viewTag","getInspectorDataForViewAtPoint","inspectedView","locationX","locationY","fabricNode","findNodeAtPoint","pointerY","frame","left","top","width","height","nativeViewTag","inspectorData","touchedViewTag","findSubviewIn","containerTag","roots","unmountComponentAtNode","unmountComponentAtNodeAndRemoveContainer","removeRootView","createPortal","computeComponentStackForErrorReporting","reactTag","Internals","exports","unstable_batchedUpdates","registerInternalModuleStop"],"sources":["/home/rodo/workspace/passion/apps/muh-money/node_modules/react-native/Libraries/Renderer/implementations/ReactNativeRenderer-dev.js"],"sourcesContent":["/**\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @noflow\n * @nolint\n * @providesModule ReactNativeRenderer-dev\n * @preventMunge\n * @generated SignedSource<<434937dbc3b1c3592d8ef8196d0c1a52>>\n */\n\n\"use strict\";\n\nif (__DEV__) {\n  (function () {\n    \"use strict\";\n\n    /* global __REACT_DEVTOOLS_GLOBAL_HOOK__ */\n    if (\n      typeof __REACT_DEVTOOLS_GLOBAL_HOOK__ !== \"undefined\" &&\n      typeof __REACT_DEVTOOLS_GLOBAL_HOOK__.registerInternalModuleStart ===\n        \"function\"\n    ) {\n      __REACT_DEVTOOLS_GLOBAL_HOOK__.registerInternalModuleStart(new Error());\n    }\n    var React = require(\"react\");\n    require(\"react-native/Libraries/ReactPrivate/ReactNativePrivateInitializeCore\");\n    var ReactNativePrivateInterface = require(\"react-native/Libraries/ReactPrivate/ReactNativePrivateInterface\");\n    var Scheduler = require(\"scheduler\");\n\n    var ReactSharedInternals =\n      React.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED;\n\n    // by calls to these methods by a Babel plugin.\n    //\n    // In PROD (or in packages without access to React internals),\n    // they are left as they are instead.\n\n    function warn(format) {\n      {\n        {\n          for (\n            var _len = arguments.length,\n              args = new Array(_len > 1 ? _len - 1 : 0),\n              _key = 1;\n            _key < _len;\n            _key++\n          ) {\n            args[_key - 1] = arguments[_key];\n          }\n\n          printWarning(\"warn\", format, args);\n        }\n      }\n    }\n    function error(format) {\n      {\n        {\n          for (\n            var _len2 = arguments.length,\n              args = new Array(_len2 > 1 ? _len2 - 1 : 0),\n              _key2 = 1;\n            _key2 < _len2;\n            _key2++\n          ) {\n            args[_key2 - 1] = arguments[_key2];\n          }\n\n          printWarning(\"error\", format, args);\n        }\n      }\n    }\n\n    function printWarning(level, format, args) {\n      // When changing this logic, you might want to also\n      // update consoleWithStackDev.www.js as well.\n      {\n        var ReactDebugCurrentFrame =\n          ReactSharedInternals.ReactDebugCurrentFrame;\n        var stack = ReactDebugCurrentFrame.getStackAddendum();\n\n        if (stack !== \"\") {\n          format += \"%s\";\n          args = args.concat([stack]);\n        } // eslint-disable-next-line react-internal/safe-string-coercion\n\n        var argsWithFormat = args.map(function (item) {\n          return String(item);\n        }); // Careful: RN currently depends on this prefix\n\n        argsWithFormat.unshift(\"Warning: \" + format); // We intentionally don't use spread (or .apply) directly because it\n        // breaks IE9: https://github.com/facebook/react/issues/13610\n        // eslint-disable-next-line react-internal/no-production-logging\n\n        Function.prototype.apply.call(console[level], console, argsWithFormat);\n      }\n    }\n\n    var fakeNode = null;\n\n    {\n      if (\n        typeof window !== \"undefined\" &&\n        typeof window.dispatchEvent === \"function\" &&\n        typeof document !== \"undefined\" && // $FlowFixMe[method-unbinding]\n        typeof document.createEvent === \"function\"\n      ) {\n        fakeNode = document.createElement(\"react\");\n      }\n    }\n\n    function invokeGuardedCallbackImpl(name, func, context) {\n      {\n        // In DEV mode, we use a special version\n        // that plays more nicely with the browser's DevTools. The idea is to preserve\n        // \"Pause on exceptions\" behavior. Because React wraps all user-provided\n        // functions in invokeGuardedCallback, and the production version of\n        // invokeGuardedCallback uses a try-catch, all user exceptions are treated\n        // like caught exceptions, and the DevTools won't pause unless the developer\n        // takes the extra step of enabling pause on caught exceptions. This is\n        // unintuitive, though, because even though React has caught the error, from\n        // the developer's perspective, the error is uncaught.\n        //\n        // To preserve the expected \"Pause on exceptions\" behavior, we don't use a\n        // try-catch in DEV. Instead, we synchronously dispatch a fake event to a fake\n        // DOM node, and call the user-provided callback from inside an event handler\n        // for that fake event. If the callback throws, the error is \"captured\" using\n        // event loop context, it does not interrupt the normal program flow.\n        // Effectively, this gives us try-catch behavior without actually using\n        // try-catch. Neat!\n        // fakeNode signifies we are in an environment with a document and window object\n        if (fakeNode) {\n          var evt = document.createEvent(\"Event\");\n          var didCall = false; // Keeps track of whether the user-provided callback threw an error. We\n          // set this to true at the beginning, then set it to false right after\n          // calling the function. If the function errors, `didError` will never be\n          // set to false. This strategy works even if the browser is flaky and\n          // fails to call our global error handler, because it doesn't rely on\n          // the error event at all.\n\n          var didError = true; // Keeps track of the value of window.event so that we can reset it\n          // during the callback to let user code access window.event in the\n          // browsers that support it.\n\n          var windowEvent = window.event; // Keeps track of the descriptor of window.event to restore it after event\n          // dispatching: https://github.com/facebook/react/issues/13688\n\n          var windowEventDescriptor = Object.getOwnPropertyDescriptor(\n            window,\n            \"event\"\n          );\n\n          var restoreAfterDispatch = function () {\n            // We immediately remove the callback from event listeners so that\n            // nested `invokeGuardedCallback` calls do not clash. Otherwise, a\n            // nested call would trigger the fake event handlers of any call higher\n            // in the stack.\n            fakeNode.removeEventListener(evtType, callCallback, false); // We check for window.hasOwnProperty('event') to prevent the\n            // window.event assignment in both IE <= 10 as they throw an error\n            // \"Member not found\" in strict mode, and in Firefox which does not\n            // support window.event.\n\n            if (\n              typeof window.event !== \"undefined\" &&\n              window.hasOwnProperty(\"event\")\n            ) {\n              window.event = windowEvent;\n            }\n          }; // Create an event handler for our fake event. We will synchronously\n          // dispatch our fake event using `dispatchEvent`. Inside the handler, we\n          // call the user-provided callback.\n          // $FlowFixMe[method-unbinding]\n\n          var _funcArgs = Array.prototype.slice.call(arguments, 3);\n\n          var callCallback = function () {\n            didCall = true;\n            restoreAfterDispatch(); // $FlowFixMe[incompatible-call] Flow doesn't understand the arguments splicing.\n\n            func.apply(context, _funcArgs);\n            didError = false;\n          }; // Create a global error event handler. We use this to capture the value\n          // that was thrown. It's possible that this error handler will fire more\n          // than once; for example, if non-React code also calls `dispatchEvent`\n          // and a handler for that event throws. We should be resilient to most of\n          // those cases. Even if our error event handler fires more than once, the\n          // last error event is always used. If the callback actually does error,\n          // we know that the last error event is the correct one, because it's not\n          // possible for anything else to have happened in between our callback\n          // erroring and the code that follows the `dispatchEvent` call below. If\n          // the callback doesn't error, but the error event was fired, we know to\n          // ignore it because `didError` will be false, as described above.\n\n          var error; // Use this to track whether the error event is ever called.\n\n          var didSetError = false;\n          var isCrossOriginError = false;\n\n          var handleWindowError = function (event) {\n            error = event.error;\n            didSetError = true;\n\n            if (error === null && event.colno === 0 && event.lineno === 0) {\n              isCrossOriginError = true;\n            }\n\n            if (event.defaultPrevented) {\n              // Some other error handler has prevented default.\n              // Browsers silence the error report if this happens.\n              // We'll remember this to later decide whether to log it or not.\n              if (error != null && typeof error === \"object\") {\n                try {\n                  error._suppressLogging = true;\n                } catch (inner) {\n                  // Ignore.\n                }\n              }\n            }\n          }; // Create a fake event type.\n\n          var evtType = \"react-\" + (name ? name : \"invokeguardedcallback\"); // Attach our event handlers\n\n          window.addEventListener(\"error\", handleWindowError);\n          fakeNode.addEventListener(evtType, callCallback, false); // Synchronously dispatch our fake event. If the user-provided function\n          // errors, it will trigger our global error handler.\n\n          evt.initEvent(evtType, false, false);\n          fakeNode.dispatchEvent(evt);\n\n          if (windowEventDescriptor) {\n            Object.defineProperty(window, \"event\", windowEventDescriptor);\n          }\n\n          if (didCall && didError) {\n            if (!didSetError) {\n              // The callback errored, but the error event never fired.\n              // eslint-disable-next-line react-internal/prod-error-codes\n              error = new Error(\n                \"An error was thrown inside one of your components, but React \" +\n                  \"doesn't know what it was. This is likely due to browser \" +\n                  'flakiness. React does its best to preserve the \"Pause on ' +\n                  'exceptions\" behavior of the DevTools, which requires some ' +\n                  \"DEV-mode only tricks. It's possible that these don't work in \" +\n                  \"your browser. Try triggering the error in production mode, \" +\n                  \"or switching to a modern browser. If you suspect that this is \" +\n                  \"actually an issue with React, please file an issue.\"\n              );\n            } else if (isCrossOriginError) {\n              // eslint-disable-next-line react-internal/prod-error-codes\n              error = new Error(\n                \"A cross-origin error was thrown. React doesn't have access to \" +\n                  \"the actual error object in development. \" +\n                  \"See https://reactjs.org/link/crossorigin-error for more information.\"\n              );\n            }\n\n            this.onError(error);\n          } // Remove our event listeners\n\n          window.removeEventListener(\"error\", handleWindowError);\n\n          if (didCall) {\n            return;\n          } else {\n            // Something went really wrong, and our event was not dispatched.\n            // https://github.com/facebook/react/issues/16734\n            // https://github.com/facebook/react/issues/16585\n            // Fall back to the production implementation.\n            restoreAfterDispatch(); // we fall through and call the prod version instead\n          }\n        } // We only get here if we are in an environment that either does not support the browser\n        // variant or we had trouble getting the browser to emit the error.\n        // $FlowFixMe[method-unbinding]\n\n        var funcArgs = Array.prototype.slice.call(arguments, 3);\n\n        try {\n          // $FlowFixMe[incompatible-call] Flow doesn't understand the arguments splicing.\n          func.apply(context, funcArgs);\n        } catch (error) {\n          this.onError(error);\n        }\n      }\n    }\n\n    var hasError = false;\n    var caughtError = null; // Used by event system to capture/rethrow the first error.\n\n    var hasRethrowError = false;\n    var rethrowError = null;\n    var reporter = {\n      onError: function (error) {\n        hasError = true;\n        caughtError = error;\n      }\n    };\n    /**\n     * Call a function while guarding against errors that happens within it.\n     * Returns an error if it throws, otherwise null.\n     *\n     * In production, this is implemented using a try-catch. The reason we don't\n     * use a try-catch directly is so that we can swap out a different\n     * implementation in DEV mode.\n     *\n     * @param {String} name of the guard to use for logging or debugging\n     * @param {Function} func The function to invoke\n     * @param {*} context The context to use when calling the function\n     * @param {...*} args Arguments for function\n     */\n\n    function invokeGuardedCallback(name, func, context, a, b, c, d, e, f) {\n      hasError = false;\n      caughtError = null;\n      invokeGuardedCallbackImpl.apply(reporter, arguments);\n    }\n    /**\n     * Same as invokeGuardedCallback, but instead of returning an error, it stores\n     * it in a global so it can be rethrown by `rethrowCaughtError` later.\n     * TODO: See if caughtError and rethrowError can be unified.\n     *\n     * @param {String} name of the guard to use for logging or debugging\n     * @param {Function} func The function to invoke\n     * @param {*} context The context to use when calling the function\n     * @param {...*} args Arguments for function\n     */\n\n    function invokeGuardedCallbackAndCatchFirstError(\n      name,\n      func,\n      context,\n      a,\n      b,\n      c,\n      d,\n      e,\n      f\n    ) {\n      invokeGuardedCallback.apply(this, arguments);\n\n      if (hasError) {\n        var error = clearCaughtError();\n\n        if (!hasRethrowError) {\n          hasRethrowError = true;\n          rethrowError = error;\n        }\n      }\n    }\n    /**\n     * During execution of guarded functions we will capture the first error which\n     * we will rethrow to be handled by the top level error handler.\n     */\n\n    function rethrowCaughtError() {\n      if (hasRethrowError) {\n        var error = rethrowError;\n        hasRethrowError = false;\n        rethrowError = null;\n        throw error;\n      }\n    }\n    function hasCaughtError() {\n      return hasError;\n    }\n    function clearCaughtError() {\n      if (hasError) {\n        var error = caughtError;\n        hasError = false;\n        caughtError = null;\n        return error;\n      } else {\n        throw new Error(\n          \"clearCaughtError was called but no error was captured. This error \" +\n            \"is likely caused by a bug in React. Please file an issue.\"\n        );\n      }\n    }\n\n    var isArrayImpl = Array.isArray; // eslint-disable-next-line no-redeclare\n\n    function isArray(a) {\n      return isArrayImpl(a);\n    }\n\n    var getFiberCurrentPropsFromNode$1 = null;\n    var getInstanceFromNode = null;\n    var getNodeFromInstance = null;\n    function setComponentTree(\n      getFiberCurrentPropsFromNodeImpl,\n      getInstanceFromNodeImpl,\n      getNodeFromInstanceImpl\n    ) {\n      getFiberCurrentPropsFromNode$1 = getFiberCurrentPropsFromNodeImpl;\n      getInstanceFromNode = getInstanceFromNodeImpl;\n      getNodeFromInstance = getNodeFromInstanceImpl;\n\n      {\n        if (!getNodeFromInstance || !getInstanceFromNode) {\n          error(\n            \"EventPluginUtils.setComponentTree(...): Injected \" +\n              \"module is missing getNodeFromInstance or getInstanceFromNode.\"\n          );\n        }\n      }\n    }\n\n    function validateEventDispatches(event) {\n      {\n        var dispatchListeners = event._dispatchListeners;\n        var dispatchInstances = event._dispatchInstances;\n        var listenersIsArr = isArray(dispatchListeners);\n        var listenersLen = listenersIsArr\n          ? dispatchListeners.length\n          : dispatchListeners\n          ? 1\n          : 0;\n        var instancesIsArr = isArray(dispatchInstances);\n        var instancesLen = instancesIsArr\n          ? dispatchInstances.length\n          : dispatchInstances\n          ? 1\n          : 0;\n\n        if (\n          instancesIsArr !== listenersIsArr ||\n          instancesLen !== listenersLen\n        ) {\n          error(\"EventPluginUtils: Invalid `event`.\");\n        }\n      }\n    }\n    /**\n     * Dispatch the event to the listener.\n     * @param {SyntheticEvent} event SyntheticEvent to handle\n     * @param {function} listener Application-level callback\n     * @param {*} inst Internal component instance\n     */\n\n    function executeDispatch(event, listener, inst) {\n      var type = event.type || \"unknown-event\";\n      event.currentTarget = getNodeFromInstance(inst);\n      invokeGuardedCallbackAndCatchFirstError(type, listener, undefined, event);\n      event.currentTarget = null;\n    }\n    /**\n     * Standard/simple iteration through an event's collected dispatches.\n     */\n\n    function executeDispatchesInOrder(event) {\n      var dispatchListeners = event._dispatchListeners;\n      var dispatchInstances = event._dispatchInstances;\n\n      {\n        validateEventDispatches(event);\n      }\n\n      if (isArray(dispatchListeners)) {\n        for (var i = 0; i < dispatchListeners.length; i++) {\n          if (event.isPropagationStopped()) {\n            break;\n          } // Listeners and Instances are two parallel arrays that are always in sync.\n\n          executeDispatch(event, dispatchListeners[i], dispatchInstances[i]);\n        }\n      } else if (dispatchListeners) {\n        executeDispatch(event, dispatchListeners, dispatchInstances);\n      }\n\n      event._dispatchListeners = null;\n      event._dispatchInstances = null;\n    }\n    /**\n     * Standard/simple iteration through an event's collected dispatches, but stops\n     * at the first dispatch execution returning true, and returns that id.\n     *\n     * @return {?string} id of the first dispatch execution who's listener returns\n     * true, or null if no listener returned true.\n     */\n\n    function executeDispatchesInOrderStopAtTrueImpl(event) {\n      var dispatchListeners = event._dispatchListeners;\n      var dispatchInstances = event._dispatchInstances;\n\n      {\n        validateEventDispatches(event);\n      }\n\n      if (isArray(dispatchListeners)) {\n        for (var i = 0; i < dispatchListeners.length; i++) {\n          if (event.isPropagationStopped()) {\n            break;\n          } // Listeners and Instances are two parallel arrays that are always in sync.\n\n          if (dispatchListeners[i](event, dispatchInstances[i])) {\n            return dispatchInstances[i];\n          }\n        }\n      } else if (dispatchListeners) {\n        if (dispatchListeners(event, dispatchInstances)) {\n          return dispatchInstances;\n        }\n      }\n\n      return null;\n    }\n    /**\n     * @see executeDispatchesInOrderStopAtTrueImpl\n     */\n\n    function executeDispatchesInOrderStopAtTrue(event) {\n      var ret = executeDispatchesInOrderStopAtTrueImpl(event);\n      event._dispatchInstances = null;\n      event._dispatchListeners = null;\n      return ret;\n    }\n    /**\n     * Execution of a \"direct\" dispatch - there must be at most one dispatch\n     * accumulated on the event or it is considered an error. It doesn't really make\n     * sense for an event with multiple dispatches (bubbled) to keep track of the\n     * return values at each dispatch execution, but it does tend to make sense when\n     * dealing with \"direct\" dispatches.\n     *\n     * @return {*} The return value of executing the single dispatch.\n     */\n\n    function executeDirectDispatch(event) {\n      {\n        validateEventDispatches(event);\n      }\n\n      var dispatchListener = event._dispatchListeners;\n      var dispatchInstance = event._dispatchInstances;\n\n      if (isArray(dispatchListener)) {\n        throw new Error(\"executeDirectDispatch(...): Invalid `event`.\");\n      }\n\n      event.currentTarget = dispatchListener\n        ? getNodeFromInstance(dispatchInstance)\n        : null;\n      var res = dispatchListener ? dispatchListener(event) : null;\n      event.currentTarget = null;\n      event._dispatchListeners = null;\n      event._dispatchInstances = null;\n      return res;\n    }\n    /**\n     * @param {SyntheticEvent} event\n     * @return {boolean} True iff number of dispatches accumulated is greater than 0.\n     */\n\n    function hasDispatches(event) {\n      return !!event._dispatchListeners;\n    }\n\n    var assign = Object.assign;\n\n    var EVENT_POOL_SIZE = 10;\n    /**\n     * @interface Event\n     * @see http://www.w3.org/TR/DOM-Level-3-Events/\n     */\n\n    var EventInterface = {\n      type: null,\n      target: null,\n      // currentTarget is set when dispatching; no use in copying it here\n      currentTarget: function () {\n        return null;\n      },\n      eventPhase: null,\n      bubbles: null,\n      cancelable: null,\n      timeStamp: function (event) {\n        return event.timeStamp || Date.now();\n      },\n      defaultPrevented: null,\n      isTrusted: null\n    };\n\n    function functionThatReturnsTrue() {\n      return true;\n    }\n\n    function functionThatReturnsFalse() {\n      return false;\n    }\n    /**\n     * Synthetic events are dispatched by event plugins, typically in response to a\n     * top-level event delegation handler.\n     *\n     * These systems should generally use pooling to reduce the frequency of garbage\n     * collection. The system should check `isPersistent` to determine whether the\n     * event should be released into the pool after being dispatched. Users that\n     * need a persisted event should invoke `persist`.\n     *\n     * Synthetic events (and subclasses) implement the DOM Level 3 Events API by\n     * normalizing browser quirks. Subclasses do not necessarily have to implement a\n     * DOM interface; custom application-specific events can also subclass this.\n     *\n     * @param {object} dispatchConfig Configuration used to dispatch this event.\n     * @param {*} targetInst Marker identifying the event target.\n     * @param {object} nativeEvent Native browser event.\n     * @param {DOMEventTarget} nativeEventTarget Target node.\n     */\n\n    function SyntheticEvent(\n      dispatchConfig,\n      targetInst,\n      nativeEvent,\n      nativeEventTarget\n    ) {\n      {\n        // these have a getter/setter for warnings\n        delete this.nativeEvent;\n        delete this.preventDefault;\n        delete this.stopPropagation;\n        delete this.isDefaultPrevented;\n        delete this.isPropagationStopped;\n      }\n\n      this.dispatchConfig = dispatchConfig;\n      this._targetInst = targetInst;\n      this.nativeEvent = nativeEvent;\n      this._dispatchListeners = null;\n      this._dispatchInstances = null;\n      var Interface = this.constructor.Interface;\n\n      for (var propName in Interface) {\n        if (!Interface.hasOwnProperty(propName)) {\n          continue;\n        }\n\n        {\n          delete this[propName]; // this has a getter/setter for warnings\n        }\n\n        var normalize = Interface[propName];\n\n        if (normalize) {\n          this[propName] = normalize(nativeEvent);\n        } else {\n          if (propName === \"target\") {\n            this.target = nativeEventTarget;\n          } else {\n            this[propName] = nativeEvent[propName];\n          }\n        }\n      }\n\n      var defaultPrevented =\n        nativeEvent.defaultPrevented != null\n          ? nativeEvent.defaultPrevented\n          : nativeEvent.returnValue === false;\n\n      if (defaultPrevented) {\n        this.isDefaultPrevented = functionThatReturnsTrue;\n      } else {\n        this.isDefaultPrevented = functionThatReturnsFalse;\n      }\n\n      this.isPropagationStopped = functionThatReturnsFalse;\n      return this;\n    }\n\n    assign(SyntheticEvent.prototype, {\n      preventDefault: function () {\n        this.defaultPrevented = true;\n        var event = this.nativeEvent;\n\n        if (!event) {\n          return;\n        }\n\n        if (event.preventDefault) {\n          event.preventDefault();\n        } else if (typeof event.returnValue !== \"unknown\") {\n          event.returnValue = false;\n        }\n\n        this.isDefaultPrevented = functionThatReturnsTrue;\n      },\n      stopPropagation: function () {\n        var event = this.nativeEvent;\n\n        if (!event) {\n          return;\n        }\n\n        if (event.stopPropagation) {\n          event.stopPropagation();\n        } else if (typeof event.cancelBubble !== \"unknown\") {\n          // The ChangeEventPlugin registers a \"propertychange\" event for\n          // IE. This event does not support bubbling or cancelling, and\n          // any references to cancelBubble throw \"Member not found\".  A\n          // typeof check of \"unknown\" circumvents this issue (and is also\n          // IE specific).\n          event.cancelBubble = true;\n        }\n\n        this.isPropagationStopped = functionThatReturnsTrue;\n      },\n\n      /**\n       * We release all dispatched `SyntheticEvent`s after each event loop, adding\n       * them back into the pool. This allows a way to hold onto a reference that\n       * won't be added back into the pool.\n       */\n      persist: function () {\n        this.isPersistent = functionThatReturnsTrue;\n      },\n\n      /**\n       * Checks if this event should be released back into the pool.\n       *\n       * @return {boolean} True if this should not be released, false otherwise.\n       */\n      isPersistent: functionThatReturnsFalse,\n\n      /**\n       * `PooledClass` looks for `destructor` on each instance it releases.\n       */\n      destructor: function () {\n        var Interface = this.constructor.Interface;\n\n        for (var propName in Interface) {\n          {\n            Object.defineProperty(\n              this,\n              propName,\n              getPooledWarningPropertyDefinition(propName, Interface[propName])\n            );\n          }\n        }\n\n        this.dispatchConfig = null;\n        this._targetInst = null;\n        this.nativeEvent = null;\n        this.isDefaultPrevented = functionThatReturnsFalse;\n        this.isPropagationStopped = functionThatReturnsFalse;\n        this._dispatchListeners = null;\n        this._dispatchInstances = null;\n\n        {\n          Object.defineProperty(\n            this,\n            \"nativeEvent\",\n            getPooledWarningPropertyDefinition(\"nativeEvent\", null)\n          );\n          Object.defineProperty(\n            this,\n            \"isDefaultPrevented\",\n            getPooledWarningPropertyDefinition(\n              \"isDefaultPrevented\",\n              functionThatReturnsFalse\n            )\n          );\n          Object.defineProperty(\n            this,\n            \"isPropagationStopped\",\n            getPooledWarningPropertyDefinition(\n              \"isPropagationStopped\",\n              functionThatReturnsFalse\n            )\n          );\n          Object.defineProperty(\n            this,\n            \"preventDefault\",\n            getPooledWarningPropertyDefinition(\"preventDefault\", function () {})\n          );\n          Object.defineProperty(\n            this,\n            \"stopPropagation\",\n            getPooledWarningPropertyDefinition(\n              \"stopPropagation\",\n              function () {}\n            )\n          );\n        }\n      }\n    });\n    SyntheticEvent.Interface = EventInterface;\n    /**\n     * Helper to reduce boilerplate when creating subclasses.\n     */\n\n    SyntheticEvent.extend = function (Interface) {\n      var Super = this;\n\n      var E = function () {};\n\n      E.prototype = Super.prototype;\n      var prototype = new E();\n\n      function Class() {\n        return Super.apply(this, arguments);\n      }\n\n      assign(prototype, Class.prototype);\n      Class.prototype = prototype;\n      Class.prototype.constructor = Class;\n      Class.Interface = assign({}, Super.Interface, Interface);\n      Class.extend = Super.extend;\n      addEventPoolingTo(Class);\n      return Class;\n    };\n\n    addEventPoolingTo(SyntheticEvent);\n    /**\n     * Helper to nullify syntheticEvent instance properties when destructing\n     *\n     * @param {String} propName\n     * @param {?object} getVal\n     * @return {object} defineProperty object\n     */\n\n    function getPooledWarningPropertyDefinition(propName, getVal) {\n      function set(val) {\n        var action = isFunction ? \"setting the method\" : \"setting the property\";\n        warn(action, \"This is effectively a no-op\");\n        return val;\n      }\n\n      function get() {\n        var action = isFunction\n          ? \"accessing the method\"\n          : \"accessing the property\";\n        var result = isFunction\n          ? \"This is a no-op function\"\n          : \"This is set to null\";\n        warn(action, result);\n        return getVal;\n      }\n\n      function warn(action, result) {\n        {\n          error(\n            \"This synthetic event is reused for performance reasons. If you're seeing this, \" +\n              \"you're %s `%s` on a released/nullified synthetic event. %s. \" +\n              \"If you must keep the original synthetic event around, use event.persist(). \" +\n              \"See https://reactjs.org/link/event-pooling for more information.\",\n            action,\n            propName,\n            result\n          );\n        }\n      }\n\n      var isFunction = typeof getVal === \"function\";\n      return {\n        configurable: true,\n        set: set,\n        get: get\n      };\n    }\n\n    function createOrGetPooledEvent(\n      dispatchConfig,\n      targetInst,\n      nativeEvent,\n      nativeInst\n    ) {\n      var EventConstructor = this;\n\n      if (EventConstructor.eventPool.length) {\n        var instance = EventConstructor.eventPool.pop();\n        EventConstructor.call(\n          instance,\n          dispatchConfig,\n          targetInst,\n          nativeEvent,\n          nativeInst\n        );\n        return instance;\n      }\n\n      return new EventConstructor(\n        dispatchConfig,\n        targetInst,\n        nativeEvent,\n        nativeInst\n      );\n    }\n\n    function releasePooledEvent(event) {\n      var EventConstructor = this;\n\n      if (!(event instanceof EventConstructor)) {\n        throw new Error(\n          \"Trying to release an event instance into a pool of a different type.\"\n        );\n      }\n\n      event.destructor();\n\n      if (EventConstructor.eventPool.length < EVENT_POOL_SIZE) {\n        EventConstructor.eventPool.push(event);\n      }\n    }\n\n    function addEventPoolingTo(EventConstructor) {\n      EventConstructor.getPooled = createOrGetPooledEvent;\n      EventConstructor.eventPool = [];\n      EventConstructor.release = releasePooledEvent;\n    }\n\n    /**\n     * `touchHistory` isn't actually on the native event, but putting it in the\n     * interface will ensure that it is cleaned up when pooled/destroyed. The\n     * `ResponderEventPlugin` will populate it appropriately.\n     */\n\n    var ResponderSyntheticEvent = SyntheticEvent.extend({\n      touchHistory: function (nativeEvent) {\n        return null; // Actually doesn't even look at the native event.\n      }\n    });\n\n    var TOP_TOUCH_START = \"topTouchStart\";\n    var TOP_TOUCH_MOVE = \"topTouchMove\";\n    var TOP_TOUCH_END = \"topTouchEnd\";\n    var TOP_TOUCH_CANCEL = \"topTouchCancel\";\n    var TOP_SCROLL = \"topScroll\";\n    var TOP_SELECTION_CHANGE = \"topSelectionChange\";\n    function isStartish(topLevelType) {\n      return topLevelType === TOP_TOUCH_START;\n    }\n    function isMoveish(topLevelType) {\n      return topLevelType === TOP_TOUCH_MOVE;\n    }\n    function isEndish(topLevelType) {\n      return (\n        topLevelType === TOP_TOUCH_END || topLevelType === TOP_TOUCH_CANCEL\n      );\n    }\n    var startDependencies = [TOP_TOUCH_START];\n    var moveDependencies = [TOP_TOUCH_MOVE];\n    var endDependencies = [TOP_TOUCH_CANCEL, TOP_TOUCH_END];\n\n    /**\n     * Tracks the position and time of each active touch by `touch.identifier`. We\n     * should typically only see IDs in the range of 1-20 because IDs get recycled\n     * when touches end and start again.\n     */\n\n    var MAX_TOUCH_BANK = 20;\n    var touchBank = [];\n    var touchHistory = {\n      touchBank: touchBank,\n      numberActiveTouches: 0,\n      // If there is only one active touch, we remember its location. This prevents\n      // us having to loop through all of the touches all the time in the most\n      // common case.\n      indexOfSingleActiveTouch: -1,\n      mostRecentTimeStamp: 0\n    };\n\n    function timestampForTouch(touch) {\n      // The legacy internal implementation provides \"timeStamp\", which has been\n      // renamed to \"timestamp\". Let both work for now while we iron it out\n      // TODO (evv): rename timeStamp to timestamp in internal code\n      return touch.timeStamp || touch.timestamp;\n    }\n    /**\n     * TODO: Instead of making gestures recompute filtered velocity, we could\n     * include a built in velocity computation that can be reused globally.\n     */\n\n    function createTouchRecord(touch) {\n      return {\n        touchActive: true,\n        startPageX: touch.pageX,\n        startPageY: touch.pageY,\n        startTimeStamp: timestampForTouch(touch),\n        currentPageX: touch.pageX,\n        currentPageY: touch.pageY,\n        currentTimeStamp: timestampForTouch(touch),\n        previousPageX: touch.pageX,\n        previousPageY: touch.pageY,\n        previousTimeStamp: timestampForTouch(touch)\n      };\n    }\n\n    function resetTouchRecord(touchRecord, touch) {\n      touchRecord.touchActive = true;\n      touchRecord.startPageX = touch.pageX;\n      touchRecord.startPageY = touch.pageY;\n      touchRecord.startTimeStamp = timestampForTouch(touch);\n      touchRecord.currentPageX = touch.pageX;\n      touchRecord.currentPageY = touch.pageY;\n      touchRecord.currentTimeStamp = timestampForTouch(touch);\n      touchRecord.previousPageX = touch.pageX;\n      touchRecord.previousPageY = touch.pageY;\n      touchRecord.previousTimeStamp = timestampForTouch(touch);\n    }\n\n    function getTouchIdentifier(_ref) {\n      var identifier = _ref.identifier;\n\n      if (identifier == null) {\n        throw new Error(\"Touch object is missing identifier.\");\n      }\n\n      {\n        if (identifier > MAX_TOUCH_BANK) {\n          error(\n            \"Touch identifier %s is greater than maximum supported %s which causes \" +\n              \"performance issues backfilling array locations for all of the indices.\",\n            identifier,\n            MAX_TOUCH_BANK\n          );\n        }\n      }\n\n      return identifier;\n    }\n\n    function recordTouchStart(touch) {\n      var identifier = getTouchIdentifier(touch);\n      var touchRecord = touchBank[identifier];\n\n      if (touchRecord) {\n        resetTouchRecord(touchRecord, touch);\n      } else {\n        touchBank[identifier] = createTouchRecord(touch);\n      }\n\n      touchHistory.mostRecentTimeStamp = timestampForTouch(touch);\n    }\n\n    function recordTouchMove(touch) {\n      var touchRecord = touchBank[getTouchIdentifier(touch)];\n\n      if (touchRecord) {\n        touchRecord.touchActive = true;\n        touchRecord.previousPageX = touchRecord.currentPageX;\n        touchRecord.previousPageY = touchRecord.currentPageY;\n        touchRecord.previousTimeStamp = touchRecord.currentTimeStamp;\n        touchRecord.currentPageX = touch.pageX;\n        touchRecord.currentPageY = touch.pageY;\n        touchRecord.currentTimeStamp = timestampForTouch(touch);\n        touchHistory.mostRecentTimeStamp = timestampForTouch(touch);\n      } else {\n        {\n          warn(\n            \"Cannot record touch move without a touch start.\\n\" +\n              \"Touch Move: %s\\n\" +\n              \"Touch Bank: %s\",\n            printTouch(touch),\n            printTouchBank()\n          );\n        }\n      }\n    }\n\n    function recordTouchEnd(touch) {\n      var touchRecord = touchBank[getTouchIdentifier(touch)];\n\n      if (touchRecord) {\n        touchRecord.touchActive = false;\n        touchRecord.previousPageX = touchRecord.currentPageX;\n        touchRecord.previousPageY = touchRecord.currentPageY;\n        touchRecord.previousTimeStamp = touchRecord.currentTimeStamp;\n        touchRecord.currentPageX = touch.pageX;\n        touchRecord.currentPageY = touch.pageY;\n        touchRecord.currentTimeStamp = timestampForTouch(touch);\n        touchHistory.mostRecentTimeStamp = timestampForTouch(touch);\n      } else {\n        {\n          warn(\n            \"Cannot record touch end without a touch start.\\n\" +\n              \"Touch End: %s\\n\" +\n              \"Touch Bank: %s\",\n            printTouch(touch),\n            printTouchBank()\n          );\n        }\n      }\n    }\n\n    function printTouch(touch) {\n      return JSON.stringify({\n        identifier: touch.identifier,\n        pageX: touch.pageX,\n        pageY: touch.pageY,\n        timestamp: timestampForTouch(touch)\n      });\n    }\n\n    function printTouchBank() {\n      var printed = JSON.stringify(touchBank.slice(0, MAX_TOUCH_BANK));\n\n      if (touchBank.length > MAX_TOUCH_BANK) {\n        printed += \" (original size: \" + touchBank.length + \")\";\n      }\n\n      return printed;\n    }\n\n    var instrumentationCallback;\n    var ResponderTouchHistoryStore = {\n      /**\n       * Registers a listener which can be used to instrument every touch event.\n       */\n      instrument: function (callback) {\n        instrumentationCallback = callback;\n      },\n      recordTouchTrack: function (topLevelType, nativeEvent) {\n        if (instrumentationCallback != null) {\n          instrumentationCallback(topLevelType, nativeEvent);\n        }\n\n        if (isMoveish(topLevelType)) {\n          nativeEvent.changedTouches.forEach(recordTouchMove);\n        } else if (isStartish(topLevelType)) {\n          nativeEvent.changedTouches.forEach(recordTouchStart);\n          touchHistory.numberActiveTouches = nativeEvent.touches.length;\n\n          if (touchHistory.numberActiveTouches === 1) {\n            touchHistory.indexOfSingleActiveTouch =\n              nativeEvent.touches[0].identifier;\n          }\n        } else if (isEndish(topLevelType)) {\n          nativeEvent.changedTouches.forEach(recordTouchEnd);\n          touchHistory.numberActiveTouches = nativeEvent.touches.length;\n\n          if (touchHistory.numberActiveTouches === 1) {\n            for (var i = 0; i < touchBank.length; i++) {\n              var touchTrackToCheck = touchBank[i];\n\n              if (touchTrackToCheck != null && touchTrackToCheck.touchActive) {\n                touchHistory.indexOfSingleActiveTouch = i;\n                break;\n              }\n            }\n\n            {\n              var activeRecord =\n                touchBank[touchHistory.indexOfSingleActiveTouch];\n\n              if (activeRecord == null || !activeRecord.touchActive) {\n                error(\"Cannot find single active touch.\");\n              }\n            }\n          }\n        }\n      },\n      touchHistory: touchHistory\n    };\n\n    /**\n     * Accumulates items that must not be null or undefined.\n     *\n     * This is used to conserve memory by avoiding array allocations.\n     *\n     * @return {*|array<*>} An accumulation of items.\n     */\n\n    function accumulate(current, next) {\n      if (next == null) {\n        throw new Error(\n          \"accumulate(...): Accumulated items must not be null or undefined.\"\n        );\n      }\n\n      if (current == null) {\n        return next;\n      } // Both are not empty. Warning: Never call x.concat(y) when you are not\n      // certain that x is an Array (x could be a string with concat method).\n\n      if (isArray(current)) {\n        /* $FlowFixMe[incompatible-return] if `current` is `T` and `T` an array,\n         * `isArray` might refine to the array element type of `T` */\n        return current.concat(next);\n      }\n\n      if (isArray(next)) {\n        /* $FlowFixMe[incompatible-return] unsound if `next` is `T` and `T` an array,\n         * `isArray` might refine to the array element type of `T` */\n        return [current].concat(next);\n      }\n\n      return [current, next];\n    }\n\n    /**\n     * Accumulates items that must not be null or undefined into the first one. This\n     * is used to conserve memory by avoiding array allocations, and thus sacrifices\n     * API cleanness. Since `current` can be null before being passed in and not\n     * null after this function, make sure to assign it back to `current`:\n     *\n     * `a = accumulateInto(a, b);`\n     *\n     * This API should be sparingly used. Try `accumulate` for something cleaner.\n     *\n     * @return {*|array<*>} An accumulation of items.\n     */\n\n    function accumulateInto(current, next) {\n      if (next == null) {\n        throw new Error(\n          \"accumulateInto(...): Accumulated items must not be null or undefined.\"\n        );\n      }\n\n      if (current == null) {\n        return next;\n      } // Both are not empty. Warning: Never call x.concat(y) when you are not\n      // certain that x is an Array (x could be a string with concat method).\n\n      if (isArray(current)) {\n        if (isArray(next)) {\n          // $FlowFixMe[prop-missing] `isArray` does not ensure array is mutable\n          // $FlowFixMe[method-unbinding]\n          current.push.apply(current, next);\n          return current;\n        } // $FlowFixMe[prop-missing] `isArray` does not ensure array is mutable\n\n        current.push(next);\n        return current;\n      }\n\n      if (isArray(next)) {\n        // A bit too dangerous to mutate `next`.\n\n        /* $FlowFixMe[incompatible-return] unsound if `next` is `T` and `T` an array,\n         * `isArray` might refine to the array element type of `T` */\n        return [current].concat(next);\n      }\n\n      return [current, next];\n    }\n\n    /**\n     * @param {array} arr an \"accumulation\" of items which is either an Array or\n     * a single item. Useful when paired with the `accumulate` module. This is a\n     * simple utility that allows us to reason about a collection of items, but\n     * handling the case when there is exactly one item (and we do not need to\n     * allocate an array).\n     * @param {function} cb Callback invoked with each element or a collection.\n     * @param {?} [scope] Scope used as `this` in a callback.\n     */\n    function forEachAccumulated(arr, cb, scope) {\n      if (Array.isArray(arr)) {\n        // $FlowFixMe[incompatible-call] if `T` is an array, `cb` cannot be called\n        arr.forEach(cb, scope);\n      } else if (arr) {\n        cb.call(scope, arr);\n      }\n    }\n\n    var FunctionComponent = 0;\n    var ClassComponent = 1;\n    var IndeterminateComponent = 2; // Before we know whether it is function or class\n\n    var HostRoot = 3; // Root of a host tree. Could be nested inside another node.\n\n    var HostPortal = 4; // A subtree. Could be an entry point to a different renderer.\n\n    var HostComponent = 5;\n    var HostText = 6;\n    var Fragment = 7;\n    var Mode = 8;\n    var ContextConsumer = 9;\n    var ContextProvider = 10;\n    var ForwardRef = 11;\n    var Profiler = 12;\n    var SuspenseComponent = 13;\n    var MemoComponent = 14;\n    var SimpleMemoComponent = 15;\n    var LazyComponent = 16;\n    var IncompleteClassComponent = 17;\n    var DehydratedFragment = 18;\n    var SuspenseListComponent = 19;\n    var ScopeComponent = 21;\n    var OffscreenComponent = 22;\n    var LegacyHiddenComponent = 23;\n    var CacheComponent = 24;\n    var TracingMarkerComponent = 25;\n    var HostHoistable = 26;\n    var HostSingleton = 27;\n\n    /**\n     * Instance of element that should respond to touch/move types of interactions,\n     * as indicated explicitly by relevant callbacks.\n     */\n\n    var responderInst = null;\n    /**\n     * Count of current touches. A textInput should become responder iff the\n     * selection changes while there is a touch on the screen.\n     */\n\n    var trackedTouchCount = 0;\n\n    function changeResponder(nextResponderInst, blockHostResponder) {\n      var oldResponderInst = responderInst;\n      responderInst = nextResponderInst;\n\n      if (ResponderEventPlugin.GlobalResponderHandler !== null) {\n        ResponderEventPlugin.GlobalResponderHandler.onChange(\n          oldResponderInst,\n          nextResponderInst,\n          blockHostResponder\n        );\n      }\n    }\n\n    var eventTypes = {\n      /**\n       * On a `touchStart`/`mouseDown`, is it desired that this element become the\n       * responder?\n       */\n      startShouldSetResponder: {\n        phasedRegistrationNames: {\n          bubbled: \"onStartShouldSetResponder\",\n          captured: \"onStartShouldSetResponderCapture\"\n        },\n        dependencies: startDependencies\n      },\n\n      /**\n       * On a `scroll`, is it desired that this element become the responder? This\n       * is usually not needed, but should be used to retroactively infer that a\n       * `touchStart` had occurred during momentum scroll. During a momentum scroll,\n       * a touch start will be immediately followed by a scroll event if the view is\n       * currently scrolling.\n       *\n       * TODO: This shouldn't bubble.\n       */\n      scrollShouldSetResponder: {\n        phasedRegistrationNames: {\n          bubbled: \"onScrollShouldSetResponder\",\n          captured: \"onScrollShouldSetResponderCapture\"\n        },\n        dependencies: [TOP_SCROLL]\n      },\n\n      /**\n       * On text selection change, should this element become the responder? This\n       * is needed for text inputs or other views with native selection, so the\n       * JS view can claim the responder.\n       *\n       * TODO: This shouldn't bubble.\n       */\n      selectionChangeShouldSetResponder: {\n        phasedRegistrationNames: {\n          bubbled: \"onSelectionChangeShouldSetResponder\",\n          captured: \"onSelectionChangeShouldSetResponderCapture\"\n        },\n        dependencies: [TOP_SELECTION_CHANGE]\n      },\n\n      /**\n       * On a `touchMove`/`mouseMove`, is it desired that this element become the\n       * responder?\n       */\n      moveShouldSetResponder: {\n        phasedRegistrationNames: {\n          bubbled: \"onMoveShouldSetResponder\",\n          captured: \"onMoveShouldSetResponderCapture\"\n        },\n        dependencies: moveDependencies\n      },\n\n      /**\n       * Direct responder events dispatched directly to responder. Do not bubble.\n       */\n      responderStart: {\n        registrationName: \"onResponderStart\",\n        dependencies: startDependencies\n      },\n      responderMove: {\n        registrationName: \"onResponderMove\",\n        dependencies: moveDependencies\n      },\n      responderEnd: {\n        registrationName: \"onResponderEnd\",\n        dependencies: endDependencies\n      },\n      responderRelease: {\n        registrationName: \"onResponderRelease\",\n        dependencies: endDependencies\n      },\n      responderTerminationRequest: {\n        registrationName: \"onResponderTerminationRequest\",\n        dependencies: []\n      },\n      responderGrant: {\n        registrationName: \"onResponderGrant\",\n        dependencies: []\n      },\n      responderReject: {\n        registrationName: \"onResponderReject\",\n        dependencies: []\n      },\n      responderTerminate: {\n        registrationName: \"onResponderTerminate\",\n        dependencies: []\n      }\n    }; // Start of inline: the below functions were inlined from\n    // EventPropagator.js, as they deviated from ReactDOM's newer\n    // implementations.\n\n    function getParent$1(inst) {\n      do {\n        inst = inst.return; // TODO: If this is a HostRoot we might want to bail out.\n        // That is depending on if we want nested subtrees (layers) to bubble\n        // events to their parent. We could also go through parentNode on the\n        // host node but that wouldn't work for React Native and doesn't let us\n        // do the portal feature.\n      } while (inst && inst.tag !== HostComponent);\n\n      if (inst) {\n        return inst;\n      }\n\n      return null;\n    }\n    /**\n     * Return the lowest common ancestor of A and B, or null if they are in\n     * different trees.\n     */\n\n    function getLowestCommonAncestor(instA, instB) {\n      var depthA = 0;\n\n      for (var tempA = instA; tempA; tempA = getParent$1(tempA)) {\n        depthA++;\n      }\n\n      var depthB = 0;\n\n      for (var tempB = instB; tempB; tempB = getParent$1(tempB)) {\n        depthB++;\n      } // If A is deeper, crawl up.\n\n      while (depthA - depthB > 0) {\n        instA = getParent$1(instA);\n        depthA--;\n      } // If B is deeper, crawl up.\n\n      while (depthB - depthA > 0) {\n        instB = getParent$1(instB);\n        depthB--;\n      } // Walk in lockstep until we find a match.\n\n      var depth = depthA;\n\n      while (depth--) {\n        if (instA === instB || instA === instB.alternate) {\n          return instA;\n        }\n\n        instA = getParent$1(instA);\n        instB = getParent$1(instB);\n      }\n\n      return null;\n    }\n    /**\n     * Return if A is an ancestor of B.\n     */\n\n    function isAncestor(instA, instB) {\n      while (instB) {\n        if (instA === instB || instA === instB.alternate) {\n          return true;\n        }\n\n        instB = getParent$1(instB);\n      }\n\n      return false;\n    }\n    /**\n     * Simulates the traversal of a two-phase, capture/bubble event dispatch.\n     */\n\n    function traverseTwoPhase$1(inst, fn, arg) {\n      var path = [];\n\n      while (inst) {\n        path.push(inst);\n        inst = getParent$1(inst);\n      }\n\n      var i;\n\n      for (i = path.length; i-- > 0; ) {\n        fn(path[i], \"captured\", arg);\n      }\n\n      for (i = 0; i < path.length; i++) {\n        fn(path[i], \"bubbled\", arg);\n      }\n    }\n\n    function getListener$1(inst, registrationName) {\n      var stateNode = inst.stateNode;\n\n      if (stateNode === null) {\n        // Work in progress (ex: onload events in incremental mode).\n        return null;\n      }\n\n      var props = getFiberCurrentPropsFromNode$1(stateNode);\n\n      if (props === null) {\n        // Work in progress.\n        return null;\n      }\n\n      var listener = props[registrationName];\n\n      if (listener && typeof listener !== \"function\") {\n        throw new Error(\n          \"Expected `\" +\n            registrationName +\n            \"` listener to be a function, instead got a value of `\" +\n            typeof listener +\n            \"` type.\"\n        );\n      }\n\n      return listener;\n    }\n\n    function listenerAtPhase$1(inst, event, propagationPhase) {\n      var registrationName =\n        event.dispatchConfig.phasedRegistrationNames[propagationPhase];\n      return getListener$1(inst, registrationName);\n    }\n\n    function accumulateDirectionalDispatches$1(inst, phase, event) {\n      {\n        if (!inst) {\n          error(\"Dispatching inst must not be null\");\n        }\n      }\n\n      var listener = listenerAtPhase$1(inst, event, phase);\n\n      if (listener) {\n        event._dispatchListeners = accumulateInto(\n          event._dispatchListeners,\n          listener\n        );\n        event._dispatchInstances = accumulateInto(\n          event._dispatchInstances,\n          inst\n        );\n      }\n    }\n    /**\n     * Accumulates without regard to direction, does not look for phased\n     * registration names. Same as `accumulateDirectDispatchesSingle` but without\n     * requiring that the `dispatchMarker` be the same as the dispatched ID.\n     */\n\n    function accumulateDispatches$1(inst, ignoredDirection, event) {\n      if (inst && event && event.dispatchConfig.registrationName) {\n        var registrationName = event.dispatchConfig.registrationName;\n        var listener = getListener$1(inst, registrationName);\n\n        if (listener) {\n          event._dispatchListeners = accumulateInto(\n            event._dispatchListeners,\n            listener\n          );\n          event._dispatchInstances = accumulateInto(\n            event._dispatchInstances,\n            inst\n          );\n        }\n      }\n    }\n    /**\n     * Accumulates dispatches on an `SyntheticEvent`, but only for the\n     * `dispatchMarker`.\n     * @param {SyntheticEvent} event\n     */\n\n    function accumulateDirectDispatchesSingle$1(event) {\n      if (event && event.dispatchConfig.registrationName) {\n        accumulateDispatches$1(event._targetInst, null, event);\n      }\n    }\n\n    function accumulateDirectDispatches$1(events) {\n      forEachAccumulated(events, accumulateDirectDispatchesSingle$1);\n    }\n\n    function accumulateTwoPhaseDispatchesSingleSkipTarget(event) {\n      if (event && event.dispatchConfig.phasedRegistrationNames) {\n        var targetInst = event._targetInst;\n        var parentInst = targetInst ? getParent$1(targetInst) : null;\n        traverseTwoPhase$1(\n          parentInst,\n          accumulateDirectionalDispatches$1,\n          event\n        );\n      }\n    }\n\n    function accumulateTwoPhaseDispatchesSkipTarget(events) {\n      forEachAccumulated(events, accumulateTwoPhaseDispatchesSingleSkipTarget);\n    }\n\n    function accumulateTwoPhaseDispatchesSingle$1(event) {\n      if (event && event.dispatchConfig.phasedRegistrationNames) {\n        traverseTwoPhase$1(\n          event._targetInst,\n          accumulateDirectionalDispatches$1,\n          event\n        );\n      }\n    }\n\n    function accumulateTwoPhaseDispatches$1(events) {\n      forEachAccumulated(events, accumulateTwoPhaseDispatchesSingle$1);\n    } // End of inline\n\n    /**\n     *\n     * Responder System:\n     * ----------------\n     *\n     * - A global, solitary \"interaction lock\" on a view.\n     * - If a node becomes the responder, it should convey visual feedback\n     *   immediately to indicate so, either by highlighting or moving accordingly.\n     * - To be the responder means, that touches are exclusively important to that\n     *   responder view, and no other view.\n     * - While touches are still occurring, the responder lock can be transferred to\n     *   a new view, but only to increasingly \"higher\" views (meaning ancestors of\n     *   the current responder).\n     *\n     * Responder being granted:\n     * ------------------------\n     *\n     * - Touch starts, moves, and scrolls can cause an ID to become the responder.\n     * - We capture/bubble `startShouldSetResponder`/`moveShouldSetResponder` to\n     *   the \"appropriate place\".\n     * - If nothing is currently the responder, the \"appropriate place\" is the\n     *   initiating event's `targetID`.\n     * - If something *is* already the responder, the \"appropriate place\" is the\n     *   first common ancestor of the event target and the current `responderInst`.\n     * - Some negotiation happens: See the timing diagram below.\n     * - Scrolled views automatically become responder. The reasoning is that a\n     *   platform scroll view that isn't built on top of the responder system has\n     *   began scrolling, and the active responder must now be notified that the\n     *   interaction is no longer locked to it - the system has taken over.\n     *\n     * - Responder being released:\n     *   As soon as no more touches that *started* inside of descendants of the\n     *   *current* responderInst, an `onResponderRelease` event is dispatched to the\n     *   current responder, and the responder lock is released.\n     *\n     * TODO:\n     * - on \"end\", a callback hook for `onResponderEndShouldRemainResponder` that\n     *   determines if the responder lock should remain.\n     * - If a view shouldn't \"remain\" the responder, any active touches should by\n     *   default be considered \"dead\" and do not influence future negotiations or\n     *   bubble paths. It should be as if those touches do not exist.\n     * -- For multitouch: Usually a translate-z will choose to \"remain\" responder\n     *  after one out of many touches ended. For translate-y, usually the view\n     *  doesn't wish to \"remain\" responder after one of many touches end.\n     * - Consider building this on top of a `stopPropagation` model similar to\n     *   `W3C` events.\n     * - Ensure that `onResponderTerminate` is called on touch cancels, whether or\n     *   not `onResponderTerminationRequest` returns `true` or `false`.\n     *\n     */\n\n    /*                                             Negotiation Performed\n                                             +-----------------------+\n                                            /                         \\\nProcess low level events to    +     Current Responder      +   wantsResponderID\ndetermine who to perform negot-|   (if any exists at all)   |\niation/transition              | Otherwise just pass through|\n-------------------------------+----------------------------+------------------+\nBubble to find first ID        |                            |\nto return true:wantsResponderID|                            |\n                               |                            |\n     +-------------+           |                            |\n     | onTouchStart|           |                            |\n     +------+------+     none  |                            |\n            |            return|                            |\n+-----------v-------------+true| +------------------------+ |\n|onStartShouldSetResponder|----->|onResponderStart (cur)  |<-----------+\n+-----------+-------------+    | +------------------------+ |          |\n            |                  |                            | +--------+-------+\n            | returned true for|       false:REJECT +-------->|onResponderReject\n            | wantsResponderID |                    |       | +----------------+\n            | (now attempt     | +------------------+-----+ |\n            |  handoff)        | |   onResponder          | |\n            +------------------->|      TerminationRequest| |\n                               | +------------------+-----+ |\n                               |                    |       | +----------------+\n                               |         true:GRANT +-------->|onResponderGrant|\n                               |                            | +--------+-------+\n                               | +------------------------+ |          |\n                               | |   onResponderTerminate |<-----------+\n                               | +------------------+-----+ |\n                               |                    |       | +----------------+\n                               |                    +-------->|onResponderStart|\n                               |                            | +----------------+\nBubble to find first ID        |                            |\nto return true:wantsResponderID|                            |\n                               |                            |\n     +-------------+           |                            |\n     | onTouchMove |           |                            |\n     +------+------+     none  |                            |\n            |            return|                            |\n+-----------v-------------+true| +------------------------+ |\n|onMoveShouldSetResponder |----->|onResponderMove (cur)   |<-----------+\n+-----------+-------------+    | +------------------------+ |          |\n            |                  |                            | +--------+-------+\n            | returned true for|       false:REJECT +-------->|onResponderRejec|\n            | wantsResponderID |                    |       | +----------------+\n            | (now attempt     | +------------------+-----+ |\n            |  handoff)        | |   onResponder          | |\n            +------------------->|      TerminationRequest| |\n                               | +------------------+-----+ |\n                               |                    |       | +----------------+\n                               |         true:GRANT +-------->|onResponderGrant|\n                               |                            | +--------+-------+\n                               | +------------------------+ |          |\n                               | |   onResponderTerminate |<-----------+\n                               | +------------------+-----+ |\n                               |                    |       | +----------------+\n                               |                    +-------->|onResponderMove |\n                               |                            | +----------------+\n                               |                            |\n                               |                            |\n      Some active touch started|                            |\n      inside current responder | +------------------------+ |\n      +------------------------->|      onResponderEnd    | |\n      |                        | +------------------------+ |\n  +---+---------+              |                            |\n  | onTouchEnd  |              |                            |\n  +---+---------+              |                            |\n      |                        | +------------------------+ |\n      +------------------------->|     onResponderEnd     | |\n      No active touches started| +-----------+------------+ |\n      inside current responder |             |              |\n                               |             v              |\n                               | +------------------------+ |\n                               | |    onResponderRelease  | |\n                               | +------------------------+ |\n                               |                            |\n                               +                            + */\n\n    /**\n     * A note about event ordering in the `EventPluginRegistry`.\n     *\n     * Suppose plugins are injected in the following order:\n     *\n     * `[R, S, C]`\n     *\n     * To help illustrate the example, assume `S` is `SimpleEventPlugin` (for\n     * `onClick` etc) and `R` is `ResponderEventPlugin`.\n     *\n     * \"Deferred-Dispatched Events\":\n     *\n     * - The current event plugin system will traverse the list of injected plugins,\n     *   in order, and extract events by collecting the plugin's return value of\n     *   `extractEvents()`.\n     * - These events that are returned from `extractEvents` are \"deferred\n     *   dispatched events\".\n     * - When returned from `extractEvents`, deferred-dispatched events contain an\n     *   \"accumulation\" of deferred dispatches.\n     * - These deferred dispatches are accumulated/collected before they are\n     *   returned, but processed at a later time by the `EventPluginRegistry` (hence the\n     *   name deferred).\n     *\n     * In the process of returning their deferred-dispatched events, event plugins\n     * themselves can dispatch events on-demand without returning them from\n     * `extractEvents`. Plugins might want to do this, so that they can use event\n     * dispatching as a tool that helps them decide which events should be extracted\n     * in the first place.\n     *\n     * \"On-Demand-Dispatched Events\":\n     *\n     * - On-demand-dispatched events are not returned from `extractEvents`.\n     * - On-demand-dispatched events are dispatched during the process of returning\n     *   the deferred-dispatched events.\n     * - They should not have side effects.\n     * - They should be avoided, and/or eventually be replaced with another\n     *   abstraction that allows event plugins to perform multiple \"rounds\" of event\n     *   extraction.\n     *\n     * Therefore, the sequence of event dispatches becomes:\n     *\n     * - `R`s on-demand events (if any)   (dispatched by `R` on-demand)\n     * - `S`s on-demand events (if any)   (dispatched by `S` on-demand)\n     * - `C`s on-demand events (if any)   (dispatched by `C` on-demand)\n     * - `R`s extracted events (if any)   (dispatched by `EventPluginRegistry`)\n     * - `S`s extracted events (if any)   (dispatched by `EventPluginRegistry`)\n     * - `C`s extracted events (if any)   (dispatched by `EventPluginRegistry`)\n     *\n     * In the case of `ResponderEventPlugin`: If the `startShouldSetResponder`\n     * on-demand dispatch returns `true` (and some other details are satisfied) the\n     * `onResponderGrant` deferred dispatched event is returned from\n     * `extractEvents`. The sequence of dispatch executions in this case\n     * will appear as follows:\n     *\n     * - `startShouldSetResponder` (`ResponderEventPlugin` dispatches on-demand)\n     * - `touchStartCapture`       (`EventPluginRegistry` dispatches as usual)\n     * - `touchStart`              (`EventPluginRegistry` dispatches as usual)\n     * - `responderGrant/Reject`   (`EventPluginRegistry` dispatches as usual)\n     */\n\n    function setResponderAndExtractTransfer(\n      topLevelType,\n      targetInst,\n      nativeEvent,\n      nativeEventTarget\n    ) {\n      var shouldSetEventType = isStartish(topLevelType)\n        ? eventTypes.startShouldSetResponder\n        : isMoveish(topLevelType)\n        ? eventTypes.moveShouldSetResponder\n        : topLevelType === TOP_SELECTION_CHANGE\n        ? eventTypes.selectionChangeShouldSetResponder\n        : eventTypes.scrollShouldSetResponder; // TODO: stop one short of the current responder.\n\n      var bubbleShouldSetFrom = !responderInst\n        ? targetInst\n        : getLowestCommonAncestor(responderInst, targetInst); // When capturing/bubbling the \"shouldSet\" event, we want to skip the target\n      // (deepest ID) if it happens to be the current responder. The reasoning:\n      // It's strange to get an `onMoveShouldSetResponder` when you're *already*\n      // the responder.\n\n      var skipOverBubbleShouldSetFrom = bubbleShouldSetFrom === responderInst;\n      var shouldSetEvent = ResponderSyntheticEvent.getPooled(\n        shouldSetEventType,\n        bubbleShouldSetFrom,\n        nativeEvent,\n        nativeEventTarget\n      );\n      shouldSetEvent.touchHistory = ResponderTouchHistoryStore.touchHistory;\n\n      if (skipOverBubbleShouldSetFrom) {\n        accumulateTwoPhaseDispatchesSkipTarget(shouldSetEvent);\n      } else {\n        accumulateTwoPhaseDispatches$1(shouldSetEvent);\n      }\n\n      var wantsResponderInst =\n        executeDispatchesInOrderStopAtTrue(shouldSetEvent);\n\n      if (!shouldSetEvent.isPersistent()) {\n        shouldSetEvent.constructor.release(shouldSetEvent);\n      }\n\n      if (!wantsResponderInst || wantsResponderInst === responderInst) {\n        return null;\n      }\n\n      var extracted;\n      var grantEvent = ResponderSyntheticEvent.getPooled(\n        eventTypes.responderGrant,\n        wantsResponderInst,\n        nativeEvent,\n        nativeEventTarget\n      );\n      grantEvent.touchHistory = ResponderTouchHistoryStore.touchHistory;\n      accumulateDirectDispatches$1(grantEvent);\n      var blockHostResponder = executeDirectDispatch(grantEvent) === true;\n\n      if (responderInst) {\n        var terminationRequestEvent = ResponderSyntheticEvent.getPooled(\n          eventTypes.responderTerminationRequest,\n          responderInst,\n          nativeEvent,\n          nativeEventTarget\n        );\n        terminationRequestEvent.touchHistory =\n          ResponderTouchHistoryStore.touchHistory;\n        accumulateDirectDispatches$1(terminationRequestEvent);\n        var shouldSwitch =\n          !hasDispatches(terminationRequestEvent) ||\n          executeDirectDispatch(terminationRequestEvent);\n\n        if (!terminationRequestEvent.isPersistent()) {\n          terminationRequestEvent.constructor.release(terminationRequestEvent);\n        }\n\n        if (shouldSwitch) {\n          var terminateEvent = ResponderSyntheticEvent.getPooled(\n            eventTypes.responderTerminate,\n            responderInst,\n            nativeEvent,\n            nativeEventTarget\n          );\n          terminateEvent.touchHistory = ResponderTouchHistoryStore.touchHistory;\n          accumulateDirectDispatches$1(terminateEvent);\n          extracted = accumulate(extracted, [grantEvent, terminateEvent]);\n          changeResponder(wantsResponderInst, blockHostResponder);\n        } else {\n          var rejectEvent = ResponderSyntheticEvent.getPooled(\n            eventTypes.responderReject,\n            wantsResponderInst,\n            nativeEvent,\n            nativeEventTarget\n          );\n          rejectEvent.touchHistory = ResponderTouchHistoryStore.touchHistory;\n          accumulateDirectDispatches$1(rejectEvent);\n          extracted = accumulate(extracted, rejectEvent);\n        }\n      } else {\n        extracted = accumulate(extracted, grantEvent);\n        changeResponder(wantsResponderInst, blockHostResponder);\n      }\n\n      return extracted;\n    }\n    /**\n     * A transfer is a negotiation between a currently set responder and the next\n     * element to claim responder status. Any start event could trigger a transfer\n     * of responderInst. Any move event could trigger a transfer.\n     *\n     * @param {string} topLevelType Record from `BrowserEventConstants`.\n     * @return {boolean} True if a transfer of responder could possibly occur.\n     */\n\n    function canTriggerTransfer(topLevelType, topLevelInst, nativeEvent) {\n      return (\n        topLevelInst && // responderIgnoreScroll: We are trying to migrate away from specifically\n        // tracking native scroll events here and responderIgnoreScroll indicates we\n        // will send topTouchCancel to handle canceling touch events instead\n        ((topLevelType === TOP_SCROLL && !nativeEvent.responderIgnoreScroll) ||\n          (trackedTouchCount > 0 && topLevelType === TOP_SELECTION_CHANGE) ||\n          isStartish(topLevelType) ||\n          isMoveish(topLevelType))\n      );\n    }\n    /**\n     * Returns whether or not this touch end event makes it such that there are no\n     * longer any touches that started inside of the current `responderInst`.\n     *\n     * @param {NativeEvent} nativeEvent Native touch end event.\n     * @return {boolean} Whether or not this touch end event ends the responder.\n     */\n\n    function noResponderTouches(nativeEvent) {\n      var touches = nativeEvent.touches;\n\n      if (!touches || touches.length === 0) {\n        return true;\n      }\n\n      for (var i = 0; i < touches.length; i++) {\n        var activeTouch = touches[i];\n        var target = activeTouch.target;\n\n        if (target !== null && target !== undefined && target !== 0) {\n          // Is the original touch location inside of the current responder?\n          var targetInst = getInstanceFromNode(target);\n\n          if (isAncestor(responderInst, targetInst)) {\n            return false;\n          }\n        }\n      }\n\n      return true;\n    }\n\n    var ResponderEventPlugin = {\n      /* For unit testing only */\n      _getResponder: function () {\n        return responderInst;\n      },\n      eventTypes: eventTypes,\n\n      /**\n       * We must be resilient to `targetInst` being `null` on `touchMove` or\n       * `touchEnd`. On certain platforms, this means that a native scroll has\n       * assumed control and the original touch targets are destroyed.\n       */\n      extractEvents: function (\n        topLevelType,\n        targetInst,\n        nativeEvent,\n        nativeEventTarget,\n        eventSystemFlags\n      ) {\n        if (isStartish(topLevelType)) {\n          trackedTouchCount += 1;\n        } else if (isEndish(topLevelType)) {\n          if (trackedTouchCount >= 0) {\n            trackedTouchCount -= 1;\n          } else {\n            {\n              warn(\n                \"Ended a touch event which was not counted in `trackedTouchCount`.\"\n              );\n            }\n\n            return null;\n          }\n        }\n\n        ResponderTouchHistoryStore.recordTouchTrack(topLevelType, nativeEvent);\n        var extracted = canTriggerTransfer(\n          topLevelType,\n          targetInst,\n          nativeEvent\n        )\n          ? setResponderAndExtractTransfer(\n              topLevelType,\n              targetInst,\n              nativeEvent,\n              nativeEventTarget\n            )\n          : null; // Responder may or may not have transferred on a new touch start/move.\n        // Regardless, whoever is the responder after any potential transfer, we\n        // direct all touch start/move/ends to them in the form of\n        // `onResponderMove/Start/End`. These will be called for *every* additional\n        // finger that move/start/end, dispatched directly to whoever is the\n        // current responder at that moment, until the responder is \"released\".\n        //\n        // These multiple individual change touch events are are always bookended\n        // by `onResponderGrant`, and one of\n        // (`onResponderRelease/onResponderTerminate`).\n\n        var isResponderTouchStart = responderInst && isStartish(topLevelType);\n        var isResponderTouchMove = responderInst && isMoveish(topLevelType);\n        var isResponderTouchEnd = responderInst && isEndish(topLevelType);\n        var incrementalTouch = isResponderTouchStart\n          ? eventTypes.responderStart\n          : isResponderTouchMove\n          ? eventTypes.responderMove\n          : isResponderTouchEnd\n          ? eventTypes.responderEnd\n          : null;\n\n        if (incrementalTouch) {\n          var gesture = ResponderSyntheticEvent.getPooled(\n            incrementalTouch,\n            responderInst,\n            nativeEvent,\n            nativeEventTarget\n          );\n          gesture.touchHistory = ResponderTouchHistoryStore.touchHistory;\n          accumulateDirectDispatches$1(gesture);\n          extracted = accumulate(extracted, gesture);\n        }\n\n        var isResponderTerminate =\n          responderInst && topLevelType === TOP_TOUCH_CANCEL;\n        var isResponderRelease =\n          responderInst &&\n          !isResponderTerminate &&\n          isEndish(topLevelType) &&\n          noResponderTouches(nativeEvent);\n        var finalTouch = isResponderTerminate\n          ? eventTypes.responderTerminate\n          : isResponderRelease\n          ? eventTypes.responderRelease\n          : null;\n\n        if (finalTouch) {\n          var finalEvent = ResponderSyntheticEvent.getPooled(\n            finalTouch,\n            responderInst,\n            nativeEvent,\n            nativeEventTarget\n          );\n          finalEvent.touchHistory = ResponderTouchHistoryStore.touchHistory;\n          accumulateDirectDispatches$1(finalEvent);\n          extracted = accumulate(extracted, finalEvent);\n          changeResponder(null);\n        }\n\n        return extracted;\n      },\n      GlobalResponderHandler: null,\n      injection: {\n        /**\n         * @param {{onChange: (ReactID, ReactID) => void} GlobalResponderHandler\n         * Object that handles any change in responder. Use this to inject\n         * integration with an existing touch handling system etc.\n         */\n        injectGlobalResponderHandler: function (GlobalResponderHandler) {\n          ResponderEventPlugin.GlobalResponderHandler = GlobalResponderHandler;\n        }\n      }\n    };\n\n    /**\n     * Injectable ordering of event plugins.\n     */\n    var eventPluginOrder = null;\n    /**\n     * Injectable mapping from names to event plugin modules.\n     */\n\n    var namesToPlugins = {};\n    /**\n     * Recomputes the plugin list using the injected plugins and plugin ordering.\n     *\n     * @private\n     */\n\n    function recomputePluginOrdering() {\n      if (!eventPluginOrder) {\n        // Wait until an `eventPluginOrder` is injected.\n        return;\n      }\n\n      for (var pluginName in namesToPlugins) {\n        var pluginModule = namesToPlugins[pluginName]; // $FlowFixMe[incompatible-use] found when upgrading Flow\n\n        var pluginIndex = eventPluginOrder.indexOf(pluginName);\n\n        if (pluginIndex <= -1) {\n          throw new Error(\n            \"EventPluginRegistry: Cannot inject event plugins that do not exist in \" +\n              (\"the plugin ordering, `\" + pluginName + \"`.\")\n          );\n        }\n\n        if (plugins[pluginIndex]) {\n          continue;\n        }\n\n        if (!pluginModule.extractEvents) {\n          throw new Error(\n            \"EventPluginRegistry: Event plugins must implement an `extractEvents` \" +\n              (\"method, but `\" + pluginName + \"` does not.\")\n          );\n        }\n\n        plugins[pluginIndex] = pluginModule;\n        var publishedEvents = pluginModule.eventTypes;\n\n        for (var eventName in publishedEvents) {\n          if (\n            !publishEventForPlugin(\n              publishedEvents[eventName],\n              pluginModule,\n              eventName\n            )\n          ) {\n            throw new Error(\n              \"EventPluginRegistry: Failed to publish event `\" +\n                eventName +\n                \"` for plugin `\" +\n                pluginName +\n                \"`.\"\n            );\n          }\n        }\n      }\n    }\n    /**\n     * Publishes an event so that it can be dispatched by the supplied plugin.\n     *\n     * @param {object} dispatchConfig Dispatch configuration for the event.\n     * @param {object} PluginModule Plugin publishing the event.\n     * @return {boolean} True if the event was successfully published.\n     * @private\n     */\n\n    function publishEventForPlugin(dispatchConfig, pluginModule, eventName) {\n      if (eventNameDispatchConfigs.hasOwnProperty(eventName)) {\n        throw new Error(\n          \"EventPluginRegistry: More than one plugin attempted to publish the same \" +\n            (\"event name, `\" + eventName + \"`.\")\n        );\n      }\n\n      eventNameDispatchConfigs[eventName] = dispatchConfig;\n      var phasedRegistrationNames = dispatchConfig.phasedRegistrationNames;\n\n      if (phasedRegistrationNames) {\n        for (var phaseName in phasedRegistrationNames) {\n          if (phasedRegistrationNames.hasOwnProperty(phaseName)) {\n            var phasedRegistrationName = phasedRegistrationNames[phaseName];\n            publishRegistrationName(phasedRegistrationName, pluginModule);\n          }\n        }\n\n        return true;\n      } else if (dispatchConfig.registrationName) {\n        publishRegistrationName(dispatchConfig.registrationName, pluginModule);\n        return true;\n      }\n\n      return false;\n    }\n    /**\n     * Publishes a registration name that is used to identify dispatched events.\n     *\n     * @param {string} registrationName Registration name to add.\n     * @param {object} PluginModule Plugin publishing the event.\n     * @private\n     */\n\n    function publishRegistrationName(\n      registrationName,\n      pluginModule,\n      eventName\n    ) {\n      if (registrationNameModules[registrationName]) {\n        throw new Error(\n          \"EventPluginRegistry: More than one plugin attempted to publish the same \" +\n            (\"registration name, `\" + registrationName + \"`.\")\n        );\n      }\n\n      registrationNameModules[registrationName] = pluginModule;\n\n      {\n        registrationName.toLowerCase();\n      }\n    }\n    /**\n     * Registers plugins so that they can extract and dispatch events.\n     */\n\n    /**\n     * Ordered list of injected plugins.\n     */\n\n    var plugins = [];\n    /**\n     * Mapping from event name to dispatch config\n     */\n\n    var eventNameDispatchConfigs = {};\n    /**\n     * Mapping from registration name to plugin module\n     */\n\n    var registrationNameModules = {};\n\n    /**\n     * Injects an ordering of plugins (by plugin name). This allows the ordering\n     * to be decoupled from injection of the actual plugins so that ordering is\n     * always deterministic regardless of packaging, on-the-fly injection, etc.\n     *\n     * @param {array} InjectedEventPluginOrder\n     * @internal\n     */\n\n    function injectEventPluginOrder(injectedEventPluginOrder) {\n      if (eventPluginOrder) {\n        throw new Error(\n          \"EventPluginRegistry: Cannot inject event plugin ordering more than \" +\n            \"once. You are likely trying to load more than one copy of React.\"\n        );\n      } // Clone the ordering so it cannot be dynamically mutated.\n      // $FlowFixMe[method-unbinding] found when upgrading Flow\n\n      eventPluginOrder = Array.prototype.slice.call(injectedEventPluginOrder);\n      recomputePluginOrdering();\n    }\n    /**\n     * Injects plugins to be used by plugin event system. The plugin names must be\n     * in the ordering injected by `injectEventPluginOrder`.\n     *\n     * Plugins can be injected as part of page initialization or on-the-fly.\n     *\n     * @param {object} injectedNamesToPlugins Map from names to plugin modules.\n     * @internal\n     */\n\n    function injectEventPluginsByName(injectedNamesToPlugins) {\n      var isOrderingDirty = false;\n\n      for (var pluginName in injectedNamesToPlugins) {\n        if (!injectedNamesToPlugins.hasOwnProperty(pluginName)) {\n          continue;\n        }\n\n        var pluginModule = injectedNamesToPlugins[pluginName];\n\n        if (\n          !namesToPlugins.hasOwnProperty(pluginName) ||\n          namesToPlugins[pluginName] !== pluginModule\n        ) {\n          if (namesToPlugins[pluginName]) {\n            throw new Error(\n              \"EventPluginRegistry: Cannot inject two different event plugins \" +\n                (\"using the same name, `\" + pluginName + \"`.\")\n            );\n          }\n\n          namesToPlugins[pluginName] = pluginModule;\n          isOrderingDirty = true;\n        }\n      }\n\n      if (isOrderingDirty) {\n        recomputePluginOrdering();\n      }\n    }\n\n    function getListener(inst, registrationName) {\n      var stateNode = inst.stateNode;\n\n      if (stateNode === null) {\n        // Work in progress (ex: onload events in incremental mode).\n        return null;\n      }\n\n      var props = getFiberCurrentPropsFromNode$1(stateNode);\n\n      if (props === null) {\n        // Work in progress.\n        return null;\n      }\n\n      var listener = props[registrationName];\n\n      if (listener && typeof listener !== \"function\") {\n        throw new Error(\n          \"Expected `\" +\n            registrationName +\n            \"` listener to be a function, instead got a value of `\" +\n            typeof listener +\n            \"` type.\"\n        );\n      }\n\n      return listener;\n    }\n\n    var customBubblingEventTypes =\n        ReactNativePrivateInterface.ReactNativeViewConfigRegistry\n          .customBubblingEventTypes,\n      customDirectEventTypes =\n        ReactNativePrivateInterface.ReactNativeViewConfigRegistry\n          .customDirectEventTypes; // Start of inline: the below functions were inlined from\n    // EventPropagator.js, as they deviated from ReactDOM's newer\n    // implementations.\n    // $FlowFixMe[missing-local-annot]\n\n    function listenerAtPhase(inst, event, propagationPhase) {\n      var registrationName =\n        event.dispatchConfig.phasedRegistrationNames[propagationPhase];\n      return getListener(inst, registrationName);\n    } // $FlowFixMe[missing-local-annot]\n\n    function accumulateDirectionalDispatches(inst, phase, event) {\n      {\n        if (!inst) {\n          error(\"Dispatching inst must not be null\");\n        }\n      }\n\n      var listener = listenerAtPhase(inst, event, phase);\n\n      if (listener) {\n        event._dispatchListeners = accumulateInto(\n          event._dispatchListeners,\n          listener\n        );\n        event._dispatchInstances = accumulateInto(\n          event._dispatchInstances,\n          inst\n        );\n      }\n    } // $FlowFixMe[missing-local-annot]\n\n    function getParent(inst) {\n      do {\n        inst = inst.return; // TODO: If this is a HostRoot we might want to bail out.\n        // That is depending on if we want nested subtrees (layers) to bubble\n        // events to their parent. We could also go through parentNode on the\n        // host node but that wouldn't work for React Native and doesn't let us\n        // do the portal feature.\n      } while (inst && inst.tag !== HostComponent);\n\n      if (inst) {\n        return inst;\n      }\n\n      return null;\n    }\n    /**\n     * Simulates the traversal of a two-phase, capture/bubble event dispatch.\n     */\n\n    function traverseTwoPhase(inst, fn, arg, skipBubbling) {\n      var path = [];\n\n      while (inst) {\n        path.push(inst);\n        inst = getParent(inst);\n      }\n\n      var i;\n\n      for (i = path.length; i-- > 0; ) {\n        fn(path[i], \"captured\", arg);\n      }\n\n      if (skipBubbling) {\n        // Dispatch on target only\n        fn(path[0], \"bubbled\", arg);\n      } else {\n        for (i = 0; i < path.length; i++) {\n          fn(path[i], \"bubbled\", arg);\n        }\n      }\n    } // $FlowFixMe[missing-local-annot]\n\n    function accumulateTwoPhaseDispatchesSingle(event) {\n      if (event && event.dispatchConfig.phasedRegistrationNames) {\n        traverseTwoPhase(\n          event._targetInst,\n          accumulateDirectionalDispatches,\n          event,\n          false\n        );\n      }\n    } // $FlowFixMe[missing-local-annot]\n\n    function accumulateTwoPhaseDispatches(events) {\n      forEachAccumulated(events, accumulateTwoPhaseDispatchesSingle);\n    } // $FlowFixMe[missing-local-annot]\n\n    function accumulateCapturePhaseDispatches(event) {\n      if (event && event.dispatchConfig.phasedRegistrationNames) {\n        traverseTwoPhase(\n          event._targetInst,\n          accumulateDirectionalDispatches,\n          event,\n          true\n        );\n      }\n    }\n    /**\n     * Accumulates without regard to direction, does not look for phased\n     * registration names. Same as `accumulateDirectDispatchesSingle` but without\n     * requiring that the `dispatchMarker` be the same as the dispatched ID.\n     */\n\n    function accumulateDispatches(inst, ignoredDirection, event) {\n      if (inst && event && event.dispatchConfig.registrationName) {\n        var registrationName = event.dispatchConfig.registrationName;\n        var listener = getListener(inst, registrationName);\n\n        if (listener) {\n          event._dispatchListeners = accumulateInto(\n            event._dispatchListeners,\n            listener\n          );\n          event._dispatchInstances = accumulateInto(\n            event._dispatchInstances,\n            inst\n          );\n        }\n      }\n    }\n    /**\n     * Accumulates dispatches on an `SyntheticEvent`, but only for the\n     * `dispatchMarker`.\n     * @param {SyntheticEvent} event\n     */\n\n    function accumulateDirectDispatchesSingle(event) {\n      if (event && event.dispatchConfig.registrationName) {\n        accumulateDispatches(event._targetInst, null, event);\n      }\n    }\n\n    function accumulateDirectDispatches(events) {\n      forEachAccumulated(events, accumulateDirectDispatchesSingle);\n    } // End of inline\n\n    var ReactNativeBridgeEventPlugin = {\n      eventTypes: {},\n      extractEvents: function (\n        topLevelType,\n        targetInst,\n        nativeEvent,\n        nativeEventTarget\n      ) {\n        if (targetInst == null) {\n          // Probably a node belonging to another renderer's tree.\n          return null;\n        }\n\n        var bubbleDispatchConfig = customBubblingEventTypes[topLevelType];\n        var directDispatchConfig = customDirectEventTypes[topLevelType];\n\n        if (!bubbleDispatchConfig && !directDispatchConfig) {\n          throw new Error( // $FlowFixMe[incompatible-type] - Flow doesn't like this string coercion because DOMTopLevelEventType is opaque\n            'Unsupported top level event type \"' + topLevelType + '\" dispatched'\n          );\n        }\n\n        var event = SyntheticEvent.getPooled(\n          bubbleDispatchConfig || directDispatchConfig,\n          targetInst,\n          nativeEvent,\n          nativeEventTarget\n        );\n\n        if (bubbleDispatchConfig) {\n          var skipBubbling =\n            event != null &&\n            event.dispatchConfig.phasedRegistrationNames != null &&\n            event.dispatchConfig.phasedRegistrationNames.skipBubbling;\n\n          if (skipBubbling) {\n            accumulateCapturePhaseDispatches(event);\n          } else {\n            accumulateTwoPhaseDispatches(event);\n          }\n        } else if (directDispatchConfig) {\n          accumulateDirectDispatches(event);\n        } else {\n          return null;\n        }\n\n        return event;\n      }\n    };\n\n    var ReactNativeEventPluginOrder = [\n      \"ResponderEventPlugin\",\n      \"ReactNativeBridgeEventPlugin\"\n    ];\n\n    /**\n     * Make sure essential globals are available and are patched correctly. Please don't remove this\n     * line. Bundles created by react-packager `require` it before executing any application code. This\n     * ensures it exists in the dependency graph and can be `require`d.\n     * TODO: require this in packager, not in React #10932517\n     */\n    /**\n     * Inject module for resolving DOM hierarchy and plugin ordering.\n     */\n\n    injectEventPluginOrder(ReactNativeEventPluginOrder);\n    /**\n     * Some important event plugins included by default (without having to require\n     * them).\n     */\n\n    injectEventPluginsByName({\n      ResponderEventPlugin: ResponderEventPlugin,\n      ReactNativeBridgeEventPlugin: ReactNativeBridgeEventPlugin\n    });\n\n    var instanceCache = new Map();\n    var instanceProps = new Map();\n    function precacheFiberNode(hostInst, tag) {\n      instanceCache.set(tag, hostInst);\n    }\n    function uncacheFiberNode(tag) {\n      instanceCache.delete(tag);\n      instanceProps.delete(tag);\n    }\n\n    function getInstanceFromTag(tag) {\n      return instanceCache.get(tag) || null;\n    }\n\n    function getTagFromInstance(inst) {\n      var nativeInstance = inst.stateNode;\n      var tag = nativeInstance._nativeTag;\n\n      if (tag === undefined && nativeInstance.canonical != null) {\n        // For compatibility with Fabric\n        tag = nativeInstance.canonical.nativeTag;\n        nativeInstance = nativeInstance.canonical.publicInstance;\n      }\n\n      if (!tag) {\n        throw new Error(\"All native instances should have a tag.\");\n      }\n\n      return nativeInstance;\n    }\n    function getFiberCurrentPropsFromNode(stateNode) {\n      return instanceProps.get(stateNode._nativeTag) || null;\n    }\n    function updateFiberProps(tag, props) {\n      instanceProps.set(tag, props);\n    }\n\n    // Used as a way to call batchedUpdates when we don't have a reference to\n    // the renderer. Such as when we're dispatching events or if third party\n    // libraries need to call batchedUpdates. Eventually, this API will go away when\n    // everything is batched by default. We'll then have a similar API to opt-out of\n    // scheduled work and instead do synchronous work.\n    // Defaults\n    var batchedUpdatesImpl = function (fn, bookkeeping) {\n      return fn(bookkeeping);\n    };\n\n    var isInsideEventHandler = false;\n    function batchedUpdates$1(fn, bookkeeping) {\n      if (isInsideEventHandler) {\n        // If we are currently inside another batch, we need to wait until it\n        // fully completes before restoring state.\n        return fn(bookkeeping);\n      }\n\n      isInsideEventHandler = true;\n\n      try {\n        return batchedUpdatesImpl(fn, bookkeeping);\n      } finally {\n        isInsideEventHandler = false;\n      }\n    }\n    function setBatchingImplementation(\n      _batchedUpdatesImpl,\n      _discreteUpdatesImpl\n    ) {\n      batchedUpdatesImpl = _batchedUpdatesImpl;\n    }\n\n    /**\n     * Internal queue of events that have accumulated their dispatches and are\n     * waiting to have their dispatches executed.\n     */\n\n    var eventQueue = null;\n    /**\n     * Dispatches an event and releases it back into the pool, unless persistent.\n     *\n     * @param {?object} event Synthetic event to be dispatched.\n     * @private\n     */\n\n    function executeDispatchesAndRelease(event) {\n      if (event) {\n        executeDispatchesInOrder(event);\n\n        if (!event.isPersistent()) {\n          event.constructor.release(event);\n        }\n      }\n    } // $FlowFixMe[missing-local-annot]\n\n    function executeDispatchesAndReleaseTopLevel(e) {\n      return executeDispatchesAndRelease(e);\n    }\n\n    function runEventsInBatch(events) {\n      if (events !== null) {\n        eventQueue = accumulateInto(eventQueue, events);\n      } // Set `eventQueue` to null before processing it so that we can tell if more\n      // events get enqueued while processing.\n\n      var processingEventQueue = eventQueue;\n      eventQueue = null;\n\n      if (!processingEventQueue) {\n        return;\n      }\n\n      forEachAccumulated(\n        processingEventQueue,\n        executeDispatchesAndReleaseTopLevel\n      );\n\n      if (eventQueue) {\n        throw new Error(\n          \"processEventQueue(): Additional events were enqueued while processing \" +\n            \"an event queue. Support for this has not yet been implemented.\"\n        );\n      } // This would be a good time to rethrow if any of the event handlers threw.\n\n      rethrowCaughtError();\n    }\n\n    /**\n     * Version of `ReactBrowserEventEmitter` that works on the receiving side of a\n     * serialized worker boundary.\n     */\n    // Shared default empty native event - conserve memory.\n\n    var EMPTY_NATIVE_EVENT = {};\n    /**\n     * Selects a subsequence of `Touch`es, without destroying `touches`.\n     *\n     * @param {Array<Touch>} touches Deserialized touch objects.\n     * @param {Array<number>} indices Indices by which to pull subsequence.\n     * @return {Array<Touch>} Subsequence of touch objects.\n     */\n    // $FlowFixMe[missing-local-annot]\n\n    function touchSubsequence(touches, indices) {\n      var ret = [];\n\n      for (var i = 0; i < indices.length; i++) {\n        ret.push(touches[indices[i]]);\n      }\n\n      return ret;\n    }\n    /**\n     * TODO: Pool all of this.\n     *\n     * Destroys `touches` by removing touch objects at indices `indices`. This is\n     * to maintain compatibility with W3C touch \"end\" events, where the active\n     * touches don't include the set that has just been \"ended\".\n     *\n     * @param {Array<Touch>} touches Deserialized touch objects.\n     * @param {Array<number>} indices Indices to remove from `touches`.\n     * @return {Array<Touch>} Subsequence of removed touch objects.\n     */\n\n    function removeTouchesAtIndices(touches, indices) {\n      var rippedOut = []; // use an unsafe downcast to alias to nullable elements,\n      // so we can delete and then compact.\n\n      var temp = touches;\n\n      for (var i = 0; i < indices.length; i++) {\n        var index = indices[i];\n        rippedOut.push(touches[index]);\n        temp[index] = null;\n      }\n\n      var fillAt = 0;\n\n      for (var j = 0; j < temp.length; j++) {\n        var cur = temp[j];\n\n        if (cur !== null) {\n          temp[fillAt++] = cur;\n        }\n      }\n\n      temp.length = fillAt;\n      return rippedOut;\n    }\n    /**\n     * Internal version of `receiveEvent` in terms of normalized (non-tag)\n     * `rootNodeID`.\n     *\n     * @see receiveEvent.\n     *\n     * @param {rootNodeID} rootNodeID React root node ID that event occurred on.\n     * @param {TopLevelType} topLevelType Top level type of event.\n     * @param {?object} nativeEventParam Object passed from native.\n     */\n\n    function _receiveRootNodeIDEvent(\n      rootNodeID,\n      topLevelType,\n      nativeEventParam\n    ) {\n      var nativeEvent = nativeEventParam || EMPTY_NATIVE_EVENT;\n      var inst = getInstanceFromTag(rootNodeID);\n      var target = null;\n\n      if (inst != null) {\n        target = inst.stateNode;\n      }\n\n      batchedUpdates$1(function () {\n        runExtractedPluginEventsInBatch(\n          topLevelType,\n          inst,\n          nativeEvent,\n          target\n        );\n      }); // React Native doesn't use ReactControlledComponent but if it did, here's\n      // where it would do it.\n    }\n    /**\n     * Allows registered plugins an opportunity to extract events from top-level\n     * native browser events.\n     *\n     * @return {*} An accumulation of synthetic events.\n     * @internal\n     */\n\n    function extractPluginEvents(\n      topLevelType,\n      targetInst,\n      nativeEvent,\n      nativeEventTarget\n    ) {\n      var events = null;\n      var legacyPlugins = plugins;\n\n      for (var i = 0; i < legacyPlugins.length; i++) {\n        // Not every plugin in the ordering may be loaded at runtime.\n        var possiblePlugin = legacyPlugins[i];\n\n        if (possiblePlugin) {\n          var extractedEvents = possiblePlugin.extractEvents(\n            topLevelType,\n            targetInst,\n            nativeEvent,\n            nativeEventTarget\n          );\n\n          if (extractedEvents) {\n            events = accumulateInto(events, extractedEvents);\n          }\n        }\n      }\n\n      return events;\n    }\n\n    function runExtractedPluginEventsInBatch(\n      topLevelType,\n      targetInst,\n      nativeEvent,\n      nativeEventTarget\n    ) {\n      var events = extractPluginEvents(\n        topLevelType,\n        targetInst,\n        nativeEvent,\n        nativeEventTarget\n      );\n      runEventsInBatch(events);\n    }\n    /**\n     * Publicly exposed method on module for native objc to invoke when a top\n     * level event is extracted.\n     * @param {rootNodeID} rootNodeID React root node ID that event occurred on.\n     * @param {TopLevelType} topLevelType Top level type of event.\n     * @param {object} nativeEventParam Object passed from native.\n     */\n\n    function receiveEvent(rootNodeID, topLevelType, nativeEventParam) {\n      _receiveRootNodeIDEvent(rootNodeID, topLevelType, nativeEventParam);\n    }\n    /**\n     * Simple multi-wrapper around `receiveEvent` that is intended to receive an\n     * efficient representation of `Touch` objects, and other information that\n     * can be used to construct W3C compliant `Event` and `Touch` lists.\n     *\n     * This may create dispatch behavior that differs than web touch handling. We\n     * loop through each of the changed touches and receive it as a single event.\n     * So two `touchStart`/`touchMove`s that occur simultaneously are received as\n     * two separate touch event dispatches - when they arguably should be one.\n     *\n     * This implementation reuses the `Touch` objects themselves as the `Event`s\n     * since we dispatch an event for each touch (though that might not be spec\n     * compliant). The main purpose of reusing them is to save allocations.\n     *\n     * TODO: Dispatch multiple changed touches in one event. The bubble path\n     * could be the first common ancestor of all the `changedTouches`.\n     *\n     * One difference between this behavior and W3C spec: cancelled touches will\n     * not appear in `.touches`, or in any future `.touches`, though they may\n     * still be \"actively touching the surface\".\n     *\n     * Web desktop polyfills only need to construct a fake touch event with\n     * identifier 0, also abandoning traditional click handlers.\n     */\n\n    function receiveTouches(eventTopLevelType, touches, changedIndices) {\n      var changedTouches =\n        eventTopLevelType === \"topTouchEnd\" ||\n        eventTopLevelType === \"topTouchCancel\"\n          ? removeTouchesAtIndices(touches, changedIndices)\n          : touchSubsequence(touches, changedIndices);\n\n      for (var jj = 0; jj < changedTouches.length; jj++) {\n        var touch = changedTouches[jj]; // Touch objects can fulfill the role of `DOM` `Event` objects if we set\n        // the `changedTouches`/`touches`. This saves allocations.\n\n        touch.changedTouches = changedTouches;\n        touch.touches = touches;\n        var nativeEvent = touch;\n        var rootNodeID = null;\n        var target = nativeEvent.target;\n\n        if (target !== null && target !== undefined) {\n          if (target < 1) {\n            {\n              error(\"A view is reporting that a touch occurred on tag zero.\");\n            }\n          } else {\n            rootNodeID = target;\n          }\n        } // $FlowFixMe[incompatible-call] Shouldn't we *not* call it if rootNodeID is null?\n\n        _receiveRootNodeIDEvent(rootNodeID, eventTopLevelType, nativeEvent);\n      }\n    }\n\n    // Module provided by RN:\n    var ReactNativeGlobalResponderHandler = {\n      onChange: function (from, to, blockNativeResponder) {\n        if (to !== null) {\n          var tag = to.stateNode._nativeTag;\n          ReactNativePrivateInterface.UIManager.setJSResponder(\n            tag,\n            blockNativeResponder\n          );\n        } else {\n          ReactNativePrivateInterface.UIManager.clearJSResponder();\n        }\n      }\n    };\n\n    /**\n     * Register the event emitter with the native bridge\n     */\n\n    ReactNativePrivateInterface.RCTEventEmitter.register({\n      receiveEvent: receiveEvent,\n      receiveTouches: receiveTouches\n    });\n    setComponentTree(\n      getFiberCurrentPropsFromNode,\n      getInstanceFromTag,\n      getTagFromInstance\n    );\n    ResponderEventPlugin.injection.injectGlobalResponderHandler(\n      ReactNativeGlobalResponderHandler\n    );\n\n    /**\n     * `ReactInstanceMap` maintains a mapping from a public facing stateful\n     * instance (key) and the internal representation (value). This allows public\n     * methods to accept the user facing instance as an argument and map them back\n     * to internal methods.\n     *\n     * Note that this module is currently shared and assumed to be stateless.\n     * If this becomes an actual Map, that will break.\n     */\n    function get(key) {\n      return key._reactInternals;\n    }\n    function set(key, value) {\n      key._reactInternals = value;\n    }\n\n    var enableSchedulingProfiler = false;\n    var enableProfilerTimer = true;\n    var enableProfilerCommitHooks = true;\n    var enableProfilerNestedUpdatePhase = true;\n    var syncLaneExpirationMs = 250;\n    var transitionLaneExpirationMs = 5000;\n    var enableLazyContextPropagation = false;\n    var enableLegacyHidden = false;\n    var enableAsyncActions = false;\n\n    // ATTENTION\n    // When adding new symbols to this file,\n    // Please consider also adding to 'react-devtools-shared/src/backend/ReactSymbols'\n    // The Symbol used to tag the ReactElement-like types.\n    var REACT_ELEMENT_TYPE = Symbol.for(\"react.element\");\n    var REACT_PORTAL_TYPE = Symbol.for(\"react.portal\");\n    var REACT_FRAGMENT_TYPE = Symbol.for(\"react.fragment\");\n    var REACT_STRICT_MODE_TYPE = Symbol.for(\"react.strict_mode\");\n    var REACT_PROFILER_TYPE = Symbol.for(\"react.profiler\");\n    var REACT_PROVIDER_TYPE = Symbol.for(\"react.provider\");\n    var REACT_CONTEXT_TYPE = Symbol.for(\"react.context\");\n    var REACT_FORWARD_REF_TYPE = Symbol.for(\"react.forward_ref\");\n    var REACT_SUSPENSE_TYPE = Symbol.for(\"react.suspense\");\n    var REACT_SUSPENSE_LIST_TYPE = Symbol.for(\"react.suspense_list\");\n    var REACT_MEMO_TYPE = Symbol.for(\"react.memo\");\n    var REACT_LAZY_TYPE = Symbol.for(\"react.lazy\");\n    var REACT_SCOPE_TYPE = Symbol.for(\"react.scope\");\n    var REACT_DEBUG_TRACING_MODE_TYPE = Symbol.for(\"react.debug_trace_mode\");\n    var REACT_OFFSCREEN_TYPE = Symbol.for(\"react.offscreen\");\n    var REACT_LEGACY_HIDDEN_TYPE = Symbol.for(\"react.legacy_hidden\");\n    var REACT_CACHE_TYPE = Symbol.for(\"react.cache\");\n    var REACT_TRACING_MARKER_TYPE = Symbol.for(\"react.tracing_marker\");\n    var MAYBE_ITERATOR_SYMBOL = Symbol.iterator;\n    var FAUX_ITERATOR_SYMBOL = \"@@iterator\";\n    function getIteratorFn(maybeIterable) {\n      if (maybeIterable === null || typeof maybeIterable !== \"object\") {\n        return null;\n      }\n\n      var maybeIterator =\n        (MAYBE_ITERATOR_SYMBOL && maybeIterable[MAYBE_ITERATOR_SYMBOL]) ||\n        maybeIterable[FAUX_ITERATOR_SYMBOL];\n\n      if (typeof maybeIterator === \"function\") {\n        return maybeIterator;\n      }\n\n      return null;\n    }\n\n    function getWrappedName$1(outerType, innerType, wrapperName) {\n      var displayName = outerType.displayName;\n\n      if (displayName) {\n        return displayName;\n      }\n\n      var functionName = innerType.displayName || innerType.name || \"\";\n      return functionName !== \"\"\n        ? wrapperName + \"(\" + functionName + \")\"\n        : wrapperName;\n    } // Keep in sync with react-reconciler/getComponentNameFromFiber\n\n    function getContextName$1(type) {\n      return type.displayName || \"Context\";\n    }\n\n    var REACT_CLIENT_REFERENCE = Symbol.for(\"react.client.reference\"); // Note that the reconciler package should generally prefer to use getComponentNameFromFiber() instead.\n\n    function getComponentNameFromType(type) {\n      if (type == null) {\n        // Host root, text node or just invalid type.\n        return null;\n      }\n\n      if (typeof type === \"function\") {\n        if (type.$$typeof === REACT_CLIENT_REFERENCE) {\n          // TODO: Create a convention for naming client references with debug info.\n          return null;\n        }\n\n        return type.displayName || type.name || null;\n      }\n\n      if (typeof type === \"string\") {\n        return type;\n      }\n\n      switch (type) {\n        case REACT_FRAGMENT_TYPE:\n          return \"Fragment\";\n\n        case REACT_PORTAL_TYPE:\n          return \"Portal\";\n\n        case REACT_PROFILER_TYPE:\n          return \"Profiler\";\n\n        case REACT_STRICT_MODE_TYPE:\n          return \"StrictMode\";\n\n        case REACT_SUSPENSE_TYPE:\n          return \"Suspense\";\n\n        case REACT_SUSPENSE_LIST_TYPE:\n          return \"SuspenseList\";\n      }\n\n      if (typeof type === \"object\") {\n        {\n          if (typeof type.tag === \"number\") {\n            error(\n              \"Received an unexpected object in getComponentNameFromType(). \" +\n                \"This is likely a bug in React. Please file an issue.\"\n            );\n          }\n        }\n\n        switch (type.$$typeof) {\n          case REACT_CONTEXT_TYPE:\n            var context = type;\n            return getContextName$1(context) + \".Consumer\";\n\n          case REACT_PROVIDER_TYPE:\n            var provider = type;\n            return getContextName$1(provider._context) + \".Provider\";\n\n          case REACT_FORWARD_REF_TYPE:\n            return getWrappedName$1(type, type.render, \"ForwardRef\");\n\n          case REACT_MEMO_TYPE:\n            var outerName = type.displayName || null;\n\n            if (outerName !== null) {\n              return outerName;\n            }\n\n            return getComponentNameFromType(type.type) || \"Memo\";\n\n          case REACT_LAZY_TYPE: {\n            var lazyComponent = type;\n            var payload = lazyComponent._payload;\n            var init = lazyComponent._init;\n\n            try {\n              return getComponentNameFromType(init(payload));\n            } catch (x) {\n              return null;\n            }\n          }\n        }\n      }\n\n      return null;\n    }\n\n    function getWrappedName(outerType, innerType, wrapperName) {\n      var functionName = innerType.displayName || innerType.name || \"\";\n      return (\n        outerType.displayName ||\n        (functionName !== \"\"\n          ? wrapperName + \"(\" + functionName + \")\"\n          : wrapperName)\n      );\n    } // Keep in sync with shared/getComponentNameFromType\n\n    function getContextName(type) {\n      return type.displayName || \"Context\";\n    }\n\n    function getComponentNameFromFiber(fiber) {\n      var tag = fiber.tag,\n        type = fiber.type;\n\n      switch (tag) {\n        case CacheComponent:\n          return \"Cache\";\n\n        case ContextConsumer:\n          var context = type;\n          return getContextName(context) + \".Consumer\";\n\n        case ContextProvider:\n          var provider = type;\n          return getContextName(provider._context) + \".Provider\";\n\n        case DehydratedFragment:\n          return \"DehydratedFragment\";\n\n        case ForwardRef:\n          return getWrappedName(type, type.render, \"ForwardRef\");\n\n        case Fragment:\n          return \"Fragment\";\n\n        case HostHoistable:\n        case HostSingleton:\n        case HostComponent:\n          // Host component type is the display name (e.g. \"div\", \"View\")\n          return type;\n\n        case HostPortal:\n          return \"Portal\";\n\n        case HostRoot:\n          return \"Root\";\n\n        case HostText:\n          return \"Text\";\n\n        case LazyComponent:\n          // Name comes from the type in this case; we don't have a tag.\n          return getComponentNameFromType(type);\n\n        case Mode:\n          if (type === REACT_STRICT_MODE_TYPE) {\n            // Don't be less specific than shared/getComponentNameFromType\n            return \"StrictMode\";\n          }\n\n          return \"Mode\";\n\n        case OffscreenComponent:\n          return \"Offscreen\";\n\n        case Profiler:\n          return \"Profiler\";\n\n        case ScopeComponent:\n          return \"Scope\";\n\n        case SuspenseComponent:\n          return \"Suspense\";\n\n        case SuspenseListComponent:\n          return \"SuspenseList\";\n\n        case TracingMarkerComponent:\n          return \"TracingMarker\";\n        // The display name for this tags come from the user-provided type:\n\n        case ClassComponent:\n        case FunctionComponent:\n        case IncompleteClassComponent:\n        case IndeterminateComponent:\n        case MemoComponent:\n        case SimpleMemoComponent:\n          if (typeof type === \"function\") {\n            return type.displayName || type.name || null;\n          }\n\n          if (typeof type === \"string\") {\n            return type;\n          }\n\n          break;\n      }\n\n      return null;\n    }\n\n    var NoFlags$1 =\n      /*                      */\n      0;\n    var PerformedWork =\n      /*                */\n      1;\n    var Placement =\n      /*                    */\n      2;\n    var DidCapture =\n      /*                   */\n      128;\n    var Hydrating =\n      /*                    */\n      4096; // You can change the rest (and add more).\n\n    var Update =\n      /*                       */\n      4;\n    /* Skipped value:                                 0b0000000000000000000000001000; */\n\n    var ChildDeletion =\n      /*                */\n      16;\n    var ContentReset =\n      /*                 */\n      32;\n    var Callback =\n      /*                     */\n      64;\n    /* Used by DidCapture:                            0b0000000000000000000010000000; */\n\n    var ForceClientRender =\n      /*            */\n      256;\n    var Ref =\n      /*                          */\n      512;\n    var Snapshot =\n      /*                     */\n      1024;\n    var Passive$1 =\n      /*                      */\n      2048;\n    /* Used by Hydrating:                             0b0000000000000001000000000000; */\n\n    var Visibility =\n      /*                   */\n      8192;\n    var StoreConsistency =\n      /*             */\n      16384; // It's OK to reuse these bits because these flags are mutually exclusive for\n    // different fiber types. We should really be doing this for as many flags as\n    // possible, because we're about to run out of bits.\n\n    var ScheduleRetry = StoreConsistency;\n    var ShouldSuspendCommit = Visibility;\n    var DidDefer = ContentReset;\n    var LifecycleEffectMask =\n      Passive$1 | Update | Callback | Ref | Snapshot | StoreConsistency; // Union of all commit flags (flags with the lifetime of a particular commit)\n\n    var HostEffectMask =\n      /*               */\n      32767; // These are not really side effects, but we still reuse this field.\n\n    var Incomplete =\n      /*                   */\n      32768;\n    var ShouldCapture =\n      /*                */\n      65536;\n    var ForceUpdateForLegacySuspense =\n      /* */\n      131072;\n    var Forked =\n      /*                       */\n      1048576; // Static tags describe aspects of a fiber that are not specific to a render,\n    // e.g. a fiber uses a passive effect (even if there are no updates on this particular render).\n    // This enables us to defer more work in the unmount case,\n    // since we can defer traversing the tree during layout to look for Passive effects,\n    // and instead rely on the static flag as a signal that there may be cleanup work.\n\n    var RefStatic =\n      /*                    */\n      2097152;\n    var LayoutStatic =\n      /*                 */\n      4194304;\n    var PassiveStatic =\n      /*                */\n      8388608;\n    var MaySuspendCommit =\n      /*             */\n      16777216; // Flag used to identify newly inserted fibers. It isn't reset after commit unlike `Placement`.\n\n    var PlacementDEV =\n      /*                 */\n      33554432;\n    var MountLayoutDev =\n      /*               */\n      67108864;\n    var MountPassiveDev =\n      /*              */\n      134217728; // Groups of flags that are used in the commit phase to skip over trees that\n    // don't contain effects, by checking subtreeFlags.\n\n    var BeforeMutationMask = // TODO: Remove Update flag from before mutation phase by re-landing Visibility\n      // flag logic (see #20043)\n      Update | Snapshot | 0;\n    var MutationMask =\n      Placement |\n      Update |\n      ChildDeletion |\n      ContentReset |\n      Ref |\n      Hydrating |\n      Visibility;\n    var LayoutMask = Update | Callback | Ref | Visibility; // TODO: Split into PassiveMountMask and PassiveUnmountMask\n\n    var PassiveMask = Passive$1 | Visibility | ChildDeletion; // Union of tags that don't get reset on clones.\n    // This allows certain concepts to persist without recalculating them,\n    // e.g. whether a subtree contains passive effects or portals.\n\n    var StaticMask =\n      LayoutStatic | PassiveStatic | RefStatic | MaySuspendCommit;\n\n    var ReactCurrentOwner$3 = ReactSharedInternals.ReactCurrentOwner;\n    function getNearestMountedFiber(fiber) {\n      var node = fiber;\n      var nearestMounted = fiber;\n\n      if (!fiber.alternate) {\n        // If there is no alternate, this might be a new tree that isn't inserted\n        // yet. If it is, then it will have a pending insertion effect on it.\n        var nextNode = node;\n\n        do {\n          node = nextNode;\n\n          if ((node.flags & (Placement | Hydrating)) !== NoFlags$1) {\n            // This is an insertion or in-progress hydration. The nearest possible\n            // mounted fiber is the parent but we need to continue to figure out\n            // if that one is still mounted.\n            nearestMounted = node.return;\n          } // $FlowFixMe[incompatible-type] we bail out when we get a null\n\n          nextNode = node.return;\n        } while (nextNode);\n      } else {\n        while (node.return) {\n          node = node.return;\n        }\n      }\n\n      if (node.tag === HostRoot) {\n        // TODO: Check if this was a nested HostRoot when used with\n        // renderContainerIntoSubtree.\n        return nearestMounted;\n      } // If we didn't hit the root, that means that we're in an disconnected tree\n      // that has been unmounted.\n\n      return null;\n    }\n    function isFiberMounted(fiber) {\n      return getNearestMountedFiber(fiber) === fiber;\n    }\n    function isMounted(component) {\n      {\n        var owner = ReactCurrentOwner$3.current;\n\n        if (owner !== null && owner.tag === ClassComponent) {\n          var ownerFiber = owner;\n          var instance = ownerFiber.stateNode;\n\n          if (!instance._warnedAboutRefsInRender) {\n            error(\n              \"%s is accessing isMounted inside its render() function. \" +\n                \"render() should be a pure function of props and state. It should \" +\n                \"never access something that requires stale data from the previous \" +\n                \"render, such as refs. Move this logic to componentDidMount and \" +\n                \"componentDidUpdate instead.\",\n              getComponentNameFromFiber(ownerFiber) || \"A component\"\n            );\n          }\n\n          instance._warnedAboutRefsInRender = true;\n        }\n      }\n\n      var fiber = get(component);\n\n      if (!fiber) {\n        return false;\n      }\n\n      return getNearestMountedFiber(fiber) === fiber;\n    }\n\n    function assertIsMounted(fiber) {\n      if (getNearestMountedFiber(fiber) !== fiber) {\n        throw new Error(\"Unable to find node on an unmounted component.\");\n      }\n    }\n\n    function findCurrentFiberUsingSlowPath(fiber) {\n      var alternate = fiber.alternate;\n\n      if (!alternate) {\n        // If there is no alternate, then we only need to check if it is mounted.\n        var nearestMounted = getNearestMountedFiber(fiber);\n\n        if (nearestMounted === null) {\n          throw new Error(\"Unable to find node on an unmounted component.\");\n        }\n\n        if (nearestMounted !== fiber) {\n          return null;\n        }\n\n        return fiber;\n      } // If we have two possible branches, we'll walk backwards up to the root\n      // to see what path the root points to. On the way we may hit one of the\n      // special cases and we'll deal with them.\n\n      var a = fiber;\n      var b = alternate;\n\n      while (true) {\n        var parentA = a.return;\n\n        if (parentA === null) {\n          // We're at the root.\n          break;\n        }\n\n        var parentB = parentA.alternate;\n\n        if (parentB === null) {\n          // There is no alternate. This is an unusual case. Currently, it only\n          // happens when a Suspense component is hidden. An extra fragment fiber\n          // is inserted in between the Suspense fiber and its children. Skip\n          // over this extra fragment fiber and proceed to the next parent.\n          var nextParent = parentA.return;\n\n          if (nextParent !== null) {\n            a = b = nextParent;\n            continue;\n          } // If there's no parent, we're at the root.\n\n          break;\n        } // If both copies of the parent fiber point to the same child, we can\n        // assume that the child is current. This happens when we bailout on low\n        // priority: the bailed out fiber's child reuses the current child.\n\n        if (parentA.child === parentB.child) {\n          var child = parentA.child;\n\n          while (child) {\n            if (child === a) {\n              // We've determined that A is the current branch.\n              assertIsMounted(parentA);\n              return fiber;\n            }\n\n            if (child === b) {\n              // We've determined that B is the current branch.\n              assertIsMounted(parentA);\n              return alternate;\n            }\n\n            child = child.sibling;\n          } // We should never have an alternate for any mounting node. So the only\n          // way this could possibly happen is if this was unmounted, if at all.\n\n          throw new Error(\"Unable to find node on an unmounted component.\");\n        }\n\n        if (a.return !== b.return) {\n          // The return pointer of A and the return pointer of B point to different\n          // fibers. We assume that return pointers never criss-cross, so A must\n          // belong to the child set of A.return, and B must belong to the child\n          // set of B.return.\n          a = parentA;\n          b = parentB;\n        } else {\n          // The return pointers point to the same fiber. We'll have to use the\n          // default, slow path: scan the child sets of each parent alternate to see\n          // which child belongs to which set.\n          //\n          // Search parent A's child set\n          var didFindChild = false;\n          var _child = parentA.child;\n\n          while (_child) {\n            if (_child === a) {\n              didFindChild = true;\n              a = parentA;\n              b = parentB;\n              break;\n            }\n\n            if (_child === b) {\n              didFindChild = true;\n              b = parentA;\n              a = parentB;\n              break;\n            }\n\n            _child = _child.sibling;\n          }\n\n          if (!didFindChild) {\n            // Search parent B's child set\n            _child = parentB.child;\n\n            while (_child) {\n              if (_child === a) {\n                didFindChild = true;\n                a = parentB;\n                b = parentA;\n                break;\n              }\n\n              if (_child === b) {\n                didFindChild = true;\n                b = parentB;\n                a = parentA;\n                break;\n              }\n\n              _child = _child.sibling;\n            }\n\n            if (!didFindChild) {\n              throw new Error(\n                \"Child was not found in either parent set. This indicates a bug \" +\n                  \"in React related to the return pointer. Please file an issue.\"\n              );\n            }\n          }\n        }\n\n        if (a.alternate !== b) {\n          throw new Error(\n            \"Return fibers should always be each others' alternates. \" +\n              \"This error is likely caused by a bug in React. Please file an issue.\"\n          );\n        }\n      } // If the root is not a host container, we're in a disconnected tree. I.e.\n      // unmounted.\n\n      if (a.tag !== HostRoot) {\n        throw new Error(\"Unable to find node on an unmounted component.\");\n      }\n\n      if (a.stateNode.current === a) {\n        // We've determined that A is the current branch.\n        return fiber;\n      } // Otherwise B has to be current branch.\n\n      return alternate;\n    }\n    function findCurrentHostFiber(parent) {\n      var currentParent = findCurrentFiberUsingSlowPath(parent);\n      return currentParent !== null\n        ? findCurrentHostFiberImpl(currentParent)\n        : null;\n    }\n\n    function findCurrentHostFiberImpl(node) {\n      // Next we'll drill down this component to find the first HostComponent/Text.\n      var tag = node.tag;\n\n      if (\n        tag === HostComponent ||\n        tag === HostHoistable ||\n        tag === HostSingleton ||\n        tag === HostText\n      ) {\n        return node;\n      }\n\n      var child = node.child;\n\n      while (child !== null) {\n        var match = findCurrentHostFiberImpl(child);\n\n        if (match !== null) {\n          return match;\n        }\n\n        child = child.sibling;\n      }\n\n      return null;\n    }\n    function doesFiberContain(parentFiber, childFiber) {\n      var node = childFiber;\n      var parentFiberAlternate = parentFiber.alternate;\n\n      while (node !== null) {\n        if (node === parentFiber || node === parentFiberAlternate) {\n          return true;\n        }\n\n        node = node.return;\n      }\n\n      return false;\n    }\n\n    // Modules provided by RN:\n    var emptyObject$1 = {};\n    /**\n     * Create a payload that contains all the updates between two sets of props.\n     *\n     * These helpers are all encapsulated into a single module, because they use\n     * mutation as a performance optimization which leads to subtle shared\n     * dependencies between the code paths. To avoid this mutable state leaking\n     * across modules, I've kept them isolated to this module.\n     */\n    // Tracks removed keys\n\n    var removedKeys = null;\n    var removedKeyCount = 0;\n    var deepDifferOptions = {\n      unsafelyIgnoreFunctions: true\n    };\n\n    function defaultDiffer(prevProp, nextProp) {\n      if (typeof nextProp !== \"object\" || nextProp === null) {\n        // Scalars have already been checked for equality\n        return true;\n      } else {\n        // For objects and arrays, the default diffing algorithm is a deep compare\n        return ReactNativePrivateInterface.deepDiffer(\n          prevProp,\n          nextProp,\n          deepDifferOptions\n        );\n      }\n    }\n\n    function restoreDeletedValuesInNestedArray(\n      updatePayload,\n      node,\n      validAttributes\n    ) {\n      if (isArray(node)) {\n        var i = node.length;\n\n        while (i-- && removedKeyCount > 0) {\n          restoreDeletedValuesInNestedArray(\n            updatePayload,\n            node[i],\n            validAttributes\n          );\n        }\n      } else if (node && removedKeyCount > 0) {\n        var obj = node;\n\n        for (var propKey in removedKeys) {\n          // $FlowFixMe[incompatible-use] found when upgrading Flow\n          if (!removedKeys[propKey]) {\n            continue;\n          }\n\n          var nextProp = obj[propKey];\n\n          if (nextProp === undefined) {\n            continue;\n          }\n\n          var attributeConfig = validAttributes[propKey];\n\n          if (!attributeConfig) {\n            continue; // not a valid native prop\n          }\n\n          if (typeof nextProp === \"function\") {\n            // $FlowFixMe[incompatible-type] found when upgrading Flow\n            nextProp = true;\n          }\n\n          if (typeof nextProp === \"undefined\") {\n            // $FlowFixMe[incompatible-type] found when upgrading Flow\n            nextProp = null;\n          }\n\n          if (typeof attributeConfig !== \"object\") {\n            // case: !Object is the default case\n            updatePayload[propKey] = nextProp;\n          } else if (\n            typeof attributeConfig.diff === \"function\" ||\n            typeof attributeConfig.process === \"function\"\n          ) {\n            // case: CustomAttributeConfiguration\n            var nextValue =\n              typeof attributeConfig.process === \"function\"\n                ? attributeConfig.process(nextProp)\n                : nextProp;\n            updatePayload[propKey] = nextValue;\n          } // $FlowFixMe[incompatible-use] found when upgrading Flow\n\n          removedKeys[propKey] = false;\n          removedKeyCount--;\n        }\n      }\n    }\n\n    function diffNestedArrayProperty(\n      updatePayload,\n      prevArray,\n      nextArray,\n      validAttributes\n    ) {\n      var minLength =\n        prevArray.length < nextArray.length\n          ? prevArray.length\n          : nextArray.length;\n      var i;\n\n      for (i = 0; i < minLength; i++) {\n        // Diff any items in the array in the forward direction. Repeated keys\n        // will be overwritten by later values.\n        updatePayload = diffNestedProperty(\n          updatePayload,\n          prevArray[i],\n          nextArray[i],\n          validAttributes\n        );\n      }\n\n      for (; i < prevArray.length; i++) {\n        // Clear out all remaining properties.\n        updatePayload = clearNestedProperty(\n          updatePayload,\n          prevArray[i],\n          validAttributes\n        );\n      }\n\n      for (; i < nextArray.length; i++) {\n        // Add all remaining properties.\n        updatePayload = addNestedProperty(\n          updatePayload,\n          nextArray[i],\n          validAttributes\n        );\n      }\n\n      return updatePayload;\n    }\n\n    function diffNestedProperty(\n      updatePayload,\n      prevProp,\n      nextProp,\n      validAttributes\n    ) {\n      if (!updatePayload && prevProp === nextProp) {\n        // If no properties have been added, then we can bail out quickly on object\n        // equality.\n        return updatePayload;\n      }\n\n      if (!prevProp || !nextProp) {\n        if (nextProp) {\n          return addNestedProperty(updatePayload, nextProp, validAttributes);\n        }\n\n        if (prevProp) {\n          return clearNestedProperty(updatePayload, prevProp, validAttributes);\n        }\n\n        return updatePayload;\n      }\n\n      if (!isArray(prevProp) && !isArray(nextProp)) {\n        // Both are leaves, we can diff the leaves.\n        return diffProperties(\n          updatePayload,\n          prevProp,\n          nextProp,\n          validAttributes\n        );\n      }\n\n      if (isArray(prevProp) && isArray(nextProp)) {\n        // Both are arrays, we can diff the arrays.\n        return diffNestedArrayProperty(\n          updatePayload,\n          prevProp,\n          nextProp,\n          validAttributes\n        );\n      }\n\n      if (isArray(prevProp)) {\n        return diffProperties(\n          updatePayload,\n          ReactNativePrivateInterface.flattenStyle(prevProp),\n          nextProp,\n          validAttributes\n        );\n      }\n\n      return diffProperties(\n        updatePayload,\n        prevProp,\n        ReactNativePrivateInterface.flattenStyle(nextProp),\n        validAttributes\n      );\n    }\n    /**\n     * addNestedProperty takes a single set of props and valid attribute\n     * attribute configurations. It processes each prop and adds it to the\n     * updatePayload.\n     */\n\n    function addNestedProperty(updatePayload, nextProp, validAttributes) {\n      if (!nextProp) {\n        return updatePayload;\n      }\n\n      if (!isArray(nextProp)) {\n        // Add each property of the leaf.\n        return addProperties(updatePayload, nextProp, validAttributes);\n      }\n\n      for (var i = 0; i < nextProp.length; i++) {\n        // Add all the properties of the array.\n        updatePayload = addNestedProperty(\n          updatePayload,\n          nextProp[i],\n          validAttributes\n        );\n      }\n\n      return updatePayload;\n    }\n    /**\n     * clearNestedProperty takes a single set of props and valid attributes. It\n     * adds a null sentinel to the updatePayload, for each prop key.\n     */\n\n    function clearNestedProperty(updatePayload, prevProp, validAttributes) {\n      if (!prevProp) {\n        return updatePayload;\n      }\n\n      if (!isArray(prevProp)) {\n        // Add each property of the leaf.\n        return clearProperties(updatePayload, prevProp, validAttributes);\n      }\n\n      for (var i = 0; i < prevProp.length; i++) {\n        // Add all the properties of the array.\n        updatePayload = clearNestedProperty(\n          updatePayload,\n          prevProp[i],\n          validAttributes\n        );\n      }\n\n      return updatePayload;\n    }\n    /**\n     * diffProperties takes two sets of props and a set of valid attributes\n     * and write to updatePayload the values that changed or were deleted.\n     * If no updatePayload is provided, a new one is created and returned if\n     * anything changed.\n     */\n\n    function diffProperties(\n      updatePayload,\n      prevProps,\n      nextProps,\n      validAttributes\n    ) {\n      var attributeConfig;\n      var nextProp;\n      var prevProp;\n\n      for (var propKey in nextProps) {\n        attributeConfig = validAttributes[propKey];\n\n        if (!attributeConfig) {\n          continue; // not a valid native prop\n        }\n\n        prevProp = prevProps[propKey];\n        nextProp = nextProps[propKey]; // functions are converted to booleans as markers that the associated\n        // events should be sent from native.\n\n        if (typeof nextProp === \"function\") {\n          nextProp = true; // If nextProp is not a function, then don't bother changing prevProp\n          // since nextProp will win and go into the updatePayload regardless.\n\n          if (typeof prevProp === \"function\") {\n            prevProp = true;\n          }\n        } // An explicit value of undefined is treated as a null because it overrides\n        // any other preceding value.\n\n        if (typeof nextProp === \"undefined\") {\n          nextProp = null;\n\n          if (typeof prevProp === \"undefined\") {\n            prevProp = null;\n          }\n        }\n\n        if (removedKeys) {\n          removedKeys[propKey] = false;\n        }\n\n        if (updatePayload && updatePayload[propKey] !== undefined) {\n          // Something else already triggered an update to this key because another\n          // value diffed. Since we're now later in the nested arrays our value is\n          // more important so we need to calculate it and override the existing\n          // value. It doesn't matter if nothing changed, we'll set it anyway.\n          // Pattern match on: attributeConfig\n          if (typeof attributeConfig !== \"object\") {\n            // case: !Object is the default case\n            updatePayload[propKey] = nextProp;\n          } else if (\n            typeof attributeConfig.diff === \"function\" ||\n            typeof attributeConfig.process === \"function\"\n          ) {\n            // case: CustomAttributeConfiguration\n            var nextValue =\n              typeof attributeConfig.process === \"function\"\n                ? attributeConfig.process(nextProp)\n                : nextProp;\n            updatePayload[propKey] = nextValue;\n          }\n\n          continue;\n        }\n\n        if (prevProp === nextProp) {\n          continue; // nothing changed\n        } // Pattern match on: attributeConfig\n\n        if (typeof attributeConfig !== \"object\") {\n          // case: !Object is the default case\n          if (defaultDiffer(prevProp, nextProp)) {\n            // a normal leaf has changed\n            (updatePayload || (updatePayload = {}))[propKey] = nextProp;\n          }\n        } else if (\n          typeof attributeConfig.diff === \"function\" ||\n          typeof attributeConfig.process === \"function\"\n        ) {\n          // case: CustomAttributeConfiguration\n          var shouldUpdate =\n            prevProp === undefined ||\n            (typeof attributeConfig.diff === \"function\"\n              ? attributeConfig.diff(prevProp, nextProp)\n              : defaultDiffer(prevProp, nextProp));\n\n          if (shouldUpdate) {\n            var _nextValue =\n              typeof attributeConfig.process === \"function\" // $FlowFixMe[incompatible-use] found when upgrading Flow\n                ? attributeConfig.process(nextProp)\n                : nextProp;\n\n            (updatePayload || (updatePayload = {}))[propKey] = _nextValue;\n          }\n        } else {\n          // default: fallthrough case when nested properties are defined\n          removedKeys = null;\n          removedKeyCount = 0; // We think that attributeConfig is not CustomAttributeConfiguration at\n          // this point so we assume it must be AttributeConfiguration.\n\n          updatePayload = diffNestedProperty(\n            updatePayload,\n            prevProp,\n            nextProp,\n            attributeConfig\n          );\n\n          if (removedKeyCount > 0 && updatePayload) {\n            restoreDeletedValuesInNestedArray(\n              updatePayload,\n              nextProp,\n              attributeConfig\n            );\n            removedKeys = null;\n          }\n        }\n      } // Also iterate through all the previous props to catch any that have been\n      // removed and make sure native gets the signal so it can reset them to the\n      // default.\n\n      for (var _propKey in prevProps) {\n        if (nextProps[_propKey] !== undefined) {\n          continue; // we've already covered this key in the previous pass\n        }\n\n        attributeConfig = validAttributes[_propKey];\n\n        if (!attributeConfig) {\n          continue; // not a valid native prop\n        }\n\n        if (updatePayload && updatePayload[_propKey] !== undefined) {\n          // This was already updated to a diff result earlier.\n          continue;\n        }\n\n        prevProp = prevProps[_propKey];\n\n        if (prevProp === undefined) {\n          continue; // was already empty anyway\n        } // Pattern match on: attributeConfig\n\n        if (\n          typeof attributeConfig !== \"object\" ||\n          typeof attributeConfig.diff === \"function\" ||\n          typeof attributeConfig.process === \"function\"\n        ) {\n          // case: CustomAttributeConfiguration | !Object\n          // Flag the leaf property for removal by sending a sentinel.\n          (updatePayload || (updatePayload = {}))[_propKey] = null;\n\n          if (!removedKeys) {\n            removedKeys = {};\n          }\n\n          if (!removedKeys[_propKey]) {\n            removedKeys[_propKey] = true;\n            removedKeyCount++;\n          }\n        } else {\n          // default:\n          // This is a nested attribute configuration where all the properties\n          // were removed so we need to go through and clear out all of them.\n          updatePayload = clearNestedProperty(\n            updatePayload,\n            prevProp,\n            attributeConfig\n          );\n        }\n      }\n\n      return updatePayload;\n    }\n    /**\n     * addProperties adds all the valid props to the payload after being processed.\n     */\n\n    function addProperties(updatePayload, props, validAttributes) {\n      // TODO: Fast path\n      return diffProperties(\n        updatePayload,\n        emptyObject$1,\n        props,\n        validAttributes\n      );\n    }\n    /**\n     * clearProperties clears all the previous props by adding a null sentinel\n     * to the payload for each valid key.\n     */\n\n    function clearProperties(updatePayload, prevProps, validAttributes) {\n      // TODO: Fast path\n      return diffProperties(\n        updatePayload,\n        prevProps,\n        emptyObject$1,\n        validAttributes\n      );\n    }\n\n    function create(props, validAttributes) {\n      return addProperties(\n        null, // updatePayload\n        props,\n        validAttributes\n      );\n    }\n    function diff(prevProps, nextProps, validAttributes) {\n      return diffProperties(\n        null, // updatePayload\n        prevProps,\n        nextProps,\n        validAttributes\n      );\n    }\n\n    /**\n     * In the future, we should cleanup callbacks by cancelling them instead of\n     * using this.\n     */\n    function mountSafeCallback_NOT_REALLY_SAFE(context, callback) {\n      return function () {\n        if (!callback) {\n          return undefined;\n        } // This protects against createClass() components.\n        // We don't know if there is code depending on it.\n        // We intentionally don't use isMounted() because even accessing\n        // isMounted property on a React ES6 class will trigger a warning.\n\n        if (typeof context.__isMounted === \"boolean\") {\n          if (!context.__isMounted) {\n            return undefined;\n          }\n        } // FIXME: there used to be other branches that protected\n        // against unmounted host components. But RN host components don't\n        // define isMounted() anymore, so those checks didn't do anything.\n        // They caused false positive warning noise so we removed them:\n        // https://github.com/facebook/react-native/issues/18868#issuecomment-413579095\n        // However, this means that the callback is NOT guaranteed to be safe\n        // for host components. The solution we should implement is to make\n        // UIManager.measure() and similar calls truly cancelable. Then we\n        // can change our own code calling them to cancel when something unmounts.\n\n        return callback.apply(context, arguments);\n      };\n    }\n    function warnForStyleProps(props, validAttributes) {\n      {\n        for (var key in validAttributes.style) {\n          if (!(validAttributes[key] || props[key] === undefined)) {\n            error(\n              \"You are setting the style `{ %s\" +\n                \": ... }` as a prop. You \" +\n                \"should nest it in a style object. \" +\n                \"E.g. `{ style: { %s\" +\n                \": ... } }`\",\n              key,\n              key\n            );\n          }\n        }\n      }\n    }\n\n    var ReactNativeFiberHostComponent = /*#__PURE__*/ (function () {\n      function ReactNativeFiberHostComponent(\n        tag,\n        viewConfig,\n        internalInstanceHandleDEV\n      ) {\n        this._children = void 0;\n        this._nativeTag = void 0;\n        this._internalFiberInstanceHandleDEV = void 0;\n        this.viewConfig = void 0;\n        this._nativeTag = tag;\n        this._children = [];\n        this.viewConfig = viewConfig;\n\n        {\n          this._internalFiberInstanceHandleDEV = internalInstanceHandleDEV;\n        }\n      }\n\n      var _proto = ReactNativeFiberHostComponent.prototype;\n\n      _proto.blur = function blur() {\n        ReactNativePrivateInterface.TextInputState.blurTextInput(this);\n      };\n\n      _proto.focus = function focus() {\n        ReactNativePrivateInterface.TextInputState.focusTextInput(this);\n      };\n\n      _proto.measure = function measure(callback) {\n        ReactNativePrivateInterface.UIManager.measure(\n          this._nativeTag,\n          mountSafeCallback_NOT_REALLY_SAFE(this, callback)\n        );\n      };\n\n      _proto.measureInWindow = function measureInWindow(callback) {\n        ReactNativePrivateInterface.UIManager.measureInWindow(\n          this._nativeTag,\n          mountSafeCallback_NOT_REALLY_SAFE(this, callback)\n        );\n      };\n\n      _proto.measureLayout = function measureLayout(\n        relativeToNativeNode,\n        onSuccess,\n        onFail\n        /* currently unused */\n      ) {\n        var relativeNode;\n\n        if (typeof relativeToNativeNode === \"number\") {\n          // Already a node handle\n          relativeNode = relativeToNativeNode;\n        } else {\n          var nativeNode = relativeToNativeNode;\n\n          if (nativeNode._nativeTag) {\n            relativeNode = nativeNode._nativeTag;\n          }\n        }\n\n        if (relativeNode == null) {\n          {\n            error(\n              \"Warning: ref.measureLayout must be called with a node handle or a ref to a native component.\"\n            );\n          }\n\n          return;\n        }\n\n        ReactNativePrivateInterface.UIManager.measureLayout(\n          this._nativeTag,\n          relativeNode,\n          mountSafeCallback_NOT_REALLY_SAFE(this, onFail),\n          mountSafeCallback_NOT_REALLY_SAFE(this, onSuccess)\n        );\n      };\n\n      _proto.setNativeProps = function setNativeProps(nativeProps) {\n        {\n          warnForStyleProps(nativeProps, this.viewConfig.validAttributes);\n        }\n\n        var updatePayload = create(\n          nativeProps,\n          this.viewConfig.validAttributes\n        ); // Avoid the overhead of bridge calls if there's no update.\n        // This is an expensive no-op for Android, and causes an unnecessary\n        // view invalidation for certain components (eg RCTTextInput) on iOS.\n\n        if (updatePayload != null) {\n          ReactNativePrivateInterface.UIManager.updateView(\n            this._nativeTag,\n            this.viewConfig.uiViewClassName,\n            updatePayload\n          );\n        }\n      };\n\n      return ReactNativeFiberHostComponent;\n    })();\n\n    // This module only exists as an ESM wrapper around the external CommonJS\n    var scheduleCallback$2 = Scheduler.unstable_scheduleCallback;\n    var cancelCallback$1 = Scheduler.unstable_cancelCallback;\n    var shouldYield = Scheduler.unstable_shouldYield;\n    var requestPaint = Scheduler.unstable_requestPaint;\n    var now$1 = Scheduler.unstable_now;\n    var ImmediatePriority = Scheduler.unstable_ImmediatePriority;\n    var UserBlockingPriority = Scheduler.unstable_UserBlockingPriority;\n    var NormalPriority = Scheduler.unstable_NormalPriority;\n    var IdlePriority = Scheduler.unstable_IdlePriority; // this doesn't actually exist on the scheduler, but it *does*\n\n    // Helpers to patch console.logs to avoid logging during side-effect free\n    // replaying on render function. This currently only patches the object\n    // lazily which won't cover if the log function was extracted eagerly.\n    // We could also eagerly patch the method.\n    var disabledDepth = 0;\n    var prevLog;\n    var prevInfo;\n    var prevWarn;\n    var prevError;\n    var prevGroup;\n    var prevGroupCollapsed;\n    var prevGroupEnd;\n\n    function disabledLog() {}\n\n    disabledLog.__reactDisabledLog = true;\n    function disableLogs() {\n      {\n        if (disabledDepth === 0) {\n          /* eslint-disable react-internal/no-production-logging */\n          prevLog = console.log;\n          prevInfo = console.info;\n          prevWarn = console.warn;\n          prevError = console.error;\n          prevGroup = console.group;\n          prevGroupCollapsed = console.groupCollapsed;\n          prevGroupEnd = console.groupEnd; // https://github.com/facebook/react/issues/19099\n\n          var props = {\n            configurable: true,\n            enumerable: true,\n            value: disabledLog,\n            writable: true\n          }; // $FlowFixMe[cannot-write] Flow thinks console is immutable.\n\n          Object.defineProperties(console, {\n            info: props,\n            log: props,\n            warn: props,\n            error: props,\n            group: props,\n            groupCollapsed: props,\n            groupEnd: props\n          });\n          /* eslint-enable react-internal/no-production-logging */\n        }\n\n        disabledDepth++;\n      }\n    }\n    function reenableLogs() {\n      {\n        disabledDepth--;\n\n        if (disabledDepth === 0) {\n          /* eslint-disable react-internal/no-production-logging */\n          var props = {\n            configurable: true,\n            enumerable: true,\n            writable: true\n          }; // $FlowFixMe[cannot-write] Flow thinks console is immutable.\n\n          Object.defineProperties(console, {\n            log: assign({}, props, {\n              value: prevLog\n            }),\n            info: assign({}, props, {\n              value: prevInfo\n            }),\n            warn: assign({}, props, {\n              value: prevWarn\n            }),\n            error: assign({}, props, {\n              value: prevError\n            }),\n            group: assign({}, props, {\n              value: prevGroup\n            }),\n            groupCollapsed: assign({}, props, {\n              value: prevGroupCollapsed\n            }),\n            groupEnd: assign({}, props, {\n              value: prevGroupEnd\n            })\n          });\n          /* eslint-enable react-internal/no-production-logging */\n        }\n\n        if (disabledDepth < 0) {\n          error(\n            \"disabledDepth fell below zero. \" +\n              \"This is a bug in React. Please file an issue.\"\n          );\n        }\n      }\n    }\n\n    var rendererID = null;\n    var injectedHook = null;\n    var hasLoggedError = false;\n    var isDevToolsPresent =\n      typeof __REACT_DEVTOOLS_GLOBAL_HOOK__ !== \"undefined\";\n    function injectInternals(internals) {\n      if (typeof __REACT_DEVTOOLS_GLOBAL_HOOK__ === \"undefined\") {\n        // No DevTools\n        return false;\n      }\n\n      var hook = __REACT_DEVTOOLS_GLOBAL_HOOK__;\n\n      if (hook.isDisabled) {\n        // This isn't a real property on the hook, but it can be set to opt out\n        // of DevTools integration and associated warnings and logs.\n        // https://github.com/facebook/react/issues/3877\n        return true;\n      }\n\n      if (!hook.supportsFiber) {\n        {\n          error(\n            \"The installed version of React DevTools is too old and will not work \" +\n              \"with the current version of React. Please update React DevTools. \" +\n              \"https://reactjs.org/link/react-devtools\"\n          );\n        } // DevTools exists, even though it doesn't support Fiber.\n\n        return true;\n      }\n\n      try {\n        if (enableSchedulingProfiler);\n\n        rendererID = hook.inject(internals); // We have successfully injected, so now it is safe to set up hooks.\n\n        injectedHook = hook;\n      } catch (err) {\n        // Catch all errors because it is unsafe to throw during initialization.\n        {\n          error(\"React instrumentation encountered an error: %s.\", err);\n        }\n      }\n\n      if (hook.checkDCE) {\n        // This is the real DevTools.\n        return true;\n      } else {\n        // This is likely a hook installed by Fast Refresh runtime.\n        return false;\n      }\n    }\n    function onScheduleRoot(root, children) {\n      {\n        if (\n          injectedHook &&\n          typeof injectedHook.onScheduleFiberRoot === \"function\"\n        ) {\n          try {\n            injectedHook.onScheduleFiberRoot(rendererID, root, children);\n          } catch (err) {\n            if (!hasLoggedError) {\n              hasLoggedError = true;\n\n              error(\"React instrumentation encountered an error: %s\", err);\n            }\n          }\n        }\n      }\n    }\n    function onCommitRoot(root, eventPriority) {\n      if (\n        injectedHook &&\n        typeof injectedHook.onCommitFiberRoot === \"function\"\n      ) {\n        try {\n          var didError = (root.current.flags & DidCapture) === DidCapture;\n\n          if (enableProfilerTimer) {\n            var schedulerPriority;\n\n            switch (eventPriority) {\n              case DiscreteEventPriority:\n                schedulerPriority = ImmediatePriority;\n                break;\n\n              case ContinuousEventPriority:\n                schedulerPriority = UserBlockingPriority;\n                break;\n\n              case DefaultEventPriority:\n                schedulerPriority = NormalPriority;\n                break;\n\n              case IdleEventPriority:\n                schedulerPriority = IdlePriority;\n                break;\n\n              default:\n                schedulerPriority = NormalPriority;\n                break;\n            }\n\n            injectedHook.onCommitFiberRoot(\n              rendererID,\n              root,\n              schedulerPriority,\n              didError\n            );\n          }\n        } catch (err) {\n          {\n            if (!hasLoggedError) {\n              hasLoggedError = true;\n\n              error(\"React instrumentation encountered an error: %s\", err);\n            }\n          }\n        }\n      }\n    }\n    function onPostCommitRoot(root) {\n      if (\n        injectedHook &&\n        typeof injectedHook.onPostCommitFiberRoot === \"function\"\n      ) {\n        try {\n          injectedHook.onPostCommitFiberRoot(rendererID, root);\n        } catch (err) {\n          {\n            if (!hasLoggedError) {\n              hasLoggedError = true;\n\n              error(\"React instrumentation encountered an error: %s\", err);\n            }\n          }\n        }\n      }\n    }\n    function onCommitUnmount(fiber) {\n      if (\n        injectedHook &&\n        typeof injectedHook.onCommitFiberUnmount === \"function\"\n      ) {\n        try {\n          injectedHook.onCommitFiberUnmount(rendererID, fiber);\n        } catch (err) {\n          {\n            if (!hasLoggedError) {\n              hasLoggedError = true;\n\n              error(\"React instrumentation encountered an error: %s\", err);\n            }\n          }\n        }\n      }\n    }\n    function setIsStrictModeForDevtools(newIsStrictMode) {\n      {\n        if (newIsStrictMode) {\n          disableLogs();\n        } else {\n          reenableLogs();\n        }\n      }\n    } // Profiler API hooks\n\n    function injectProfilingHooks(profilingHooks) {}\n\n    function getLaneLabelMap() {\n      {\n        return null;\n      }\n    }\n\n    var NoMode =\n      /*                         */\n      0; // TODO: Remove ConcurrentMode by reading from the root tag instead\n\n    var ConcurrentMode =\n      /*                 */\n      1;\n    var ProfileMode =\n      /*                    */\n      2;\n    var StrictLegacyMode =\n      /*               */\n      8;\n    var StrictEffectsMode =\n      /*              */\n      16;\n    var NoStrictPassiveEffectsMode =\n      /*     */\n      64;\n\n    // TODO: This is pretty well supported by browsers. Maybe we can drop it.\n    var clz32 = Math.clz32 ? Math.clz32 : clz32Fallback; // Count leading zeros.\n    // Based on:\n    // https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Math/clz32\n\n    var log = Math.log;\n    var LN2 = Math.LN2;\n\n    function clz32Fallback(x) {\n      var asUint = x >>> 0;\n\n      if (asUint === 0) {\n        return 32;\n      }\n\n      return (31 - ((log(asUint) / LN2) | 0)) | 0;\n    }\n\n    // If those values are changed that package should be rebuilt and redeployed.\n\n    var TotalLanes = 31;\n    var NoLanes =\n      /*                        */\n      0;\n    var NoLane =\n      /*                          */\n      0;\n    var SyncHydrationLane =\n      /*               */\n      1;\n    var SyncLane =\n      /*                        */\n      2;\n    var SyncLaneIndex = 1;\n    var InputContinuousHydrationLane =\n      /*    */\n      4;\n    var InputContinuousLane =\n      /*             */\n      8;\n    var DefaultHydrationLane =\n      /*            */\n      16;\n    var DefaultLane =\n      /*                     */\n      32;\n    var SyncUpdateLanes = SyncLane | InputContinuousLane | DefaultLane;\n    var TransitionHydrationLane =\n      /*                */\n      64;\n    var TransitionLanes =\n      /*                       */\n      4194176;\n    var TransitionLane1 =\n      /*                        */\n      128;\n    var TransitionLane2 =\n      /*                        */\n      256;\n    var TransitionLane3 =\n      /*                        */\n      512;\n    var TransitionLane4 =\n      /*                        */\n      1024;\n    var TransitionLane5 =\n      /*                        */\n      2048;\n    var TransitionLane6 =\n      /*                        */\n      4096;\n    var TransitionLane7 =\n      /*                        */\n      8192;\n    var TransitionLane8 =\n      /*                        */\n      16384;\n    var TransitionLane9 =\n      /*                        */\n      32768;\n    var TransitionLane10 =\n      /*                       */\n      65536;\n    var TransitionLane11 =\n      /*                       */\n      131072;\n    var TransitionLane12 =\n      /*                       */\n      262144;\n    var TransitionLane13 =\n      /*                       */\n      524288;\n    var TransitionLane14 =\n      /*                       */\n      1048576;\n    var TransitionLane15 =\n      /*                       */\n      2097152;\n    var RetryLanes =\n      /*                            */\n      62914560;\n    var RetryLane1 =\n      /*                             */\n      4194304;\n    var RetryLane2 =\n      /*                             */\n      8388608;\n    var RetryLane3 =\n      /*                             */\n      16777216;\n    var RetryLane4 =\n      /*                             */\n      33554432;\n    var SomeRetryLane = RetryLane1;\n    var SelectiveHydrationLane =\n      /*          */\n      67108864;\n    var NonIdleLanes =\n      /*                          */\n      134217727;\n    var IdleHydrationLane =\n      /*               */\n      134217728;\n    var IdleLane =\n      /*                        */\n      268435456;\n    var OffscreenLane =\n      /*                   */\n      536870912;\n    var DeferredLane =\n      /*                    */\n      1073741824; // Any lane that might schedule an update. This is used to detect infinite\n    // update loops, so it doesn't include hydration lanes or retries.\n\n    var UpdateLanes =\n      SyncLane | InputContinuousLane | DefaultLane | TransitionLanes; // This function is used for the experimental timeline (react-devtools-timeline)\n    var NoTimestamp = -1;\n    var nextTransitionLane = TransitionLane1;\n    var nextRetryLane = RetryLane1;\n\n    function getHighestPriorityLanes(lanes) {\n      {\n        var pendingSyncLanes = lanes & SyncUpdateLanes;\n\n        if (pendingSyncLanes !== 0) {\n          return pendingSyncLanes;\n        }\n      }\n\n      switch (getHighestPriorityLane(lanes)) {\n        case SyncHydrationLane:\n          return SyncHydrationLane;\n\n        case SyncLane:\n          return SyncLane;\n\n        case InputContinuousHydrationLane:\n          return InputContinuousHydrationLane;\n\n        case InputContinuousLane:\n          return InputContinuousLane;\n\n        case DefaultHydrationLane:\n          return DefaultHydrationLane;\n\n        case DefaultLane:\n          return DefaultLane;\n\n        case TransitionHydrationLane:\n          return TransitionHydrationLane;\n\n        case TransitionLane1:\n        case TransitionLane2:\n        case TransitionLane3:\n        case TransitionLane4:\n        case TransitionLane5:\n        case TransitionLane6:\n        case TransitionLane7:\n        case TransitionLane8:\n        case TransitionLane9:\n        case TransitionLane10:\n        case TransitionLane11:\n        case TransitionLane12:\n        case TransitionLane13:\n        case TransitionLane14:\n        case TransitionLane15:\n          return lanes & TransitionLanes;\n\n        case RetryLane1:\n        case RetryLane2:\n        case RetryLane3:\n        case RetryLane4:\n          return lanes & RetryLanes;\n\n        case SelectiveHydrationLane:\n          return SelectiveHydrationLane;\n\n        case IdleHydrationLane:\n          return IdleHydrationLane;\n\n        case IdleLane:\n          return IdleLane;\n\n        case OffscreenLane:\n          return OffscreenLane;\n\n        case DeferredLane:\n          // This shouldn't be reachable because deferred work is always entangled\n          // with something else.\n          return NoLanes;\n\n        default:\n          {\n            error(\"Should have found matching lanes. This is a bug in React.\");\n          } // This shouldn't be reachable, but as a fallback, return the entire bitmask.\n\n          return lanes;\n      }\n    }\n\n    function getNextLanes(root, wipLanes) {\n      // Early bailout if there's no pending work left.\n      var pendingLanes = root.pendingLanes;\n\n      if (pendingLanes === NoLanes) {\n        return NoLanes;\n      }\n\n      var nextLanes = NoLanes;\n      var suspendedLanes = root.suspendedLanes;\n      var pingedLanes = root.pingedLanes; // Do not work on any idle work until all the non-idle work has finished,\n      // even if the work is suspended.\n\n      var nonIdlePendingLanes = pendingLanes & NonIdleLanes;\n\n      if (nonIdlePendingLanes !== NoLanes) {\n        var nonIdleUnblockedLanes = nonIdlePendingLanes & ~suspendedLanes;\n\n        if (nonIdleUnblockedLanes !== NoLanes) {\n          nextLanes = getHighestPriorityLanes(nonIdleUnblockedLanes);\n        } else {\n          var nonIdlePingedLanes = nonIdlePendingLanes & pingedLanes;\n\n          if (nonIdlePingedLanes !== NoLanes) {\n            nextLanes = getHighestPriorityLanes(nonIdlePingedLanes);\n          }\n        }\n      } else {\n        // The only remaining work is Idle.\n        var unblockedLanes = pendingLanes & ~suspendedLanes;\n\n        if (unblockedLanes !== NoLanes) {\n          nextLanes = getHighestPriorityLanes(unblockedLanes);\n        } else {\n          if (pingedLanes !== NoLanes) {\n            nextLanes = getHighestPriorityLanes(pingedLanes);\n          }\n        }\n      }\n\n      if (nextLanes === NoLanes) {\n        // This should only be reachable if we're suspended\n        // TODO: Consider warning in this path if a fallback timer is not scheduled.\n        return NoLanes;\n      } // If we're already in the middle of a render, switching lanes will interrupt\n      // it and we'll lose our progress. We should only do this if the new lanes are\n      // higher priority.\n\n      if (\n        wipLanes !== NoLanes &&\n        wipLanes !== nextLanes && // If we already suspended with a delay, then interrupting is fine. Don't\n        // bother waiting until the root is complete.\n        (wipLanes & suspendedLanes) === NoLanes\n      ) {\n        var nextLane = getHighestPriorityLane(nextLanes);\n        var wipLane = getHighestPriorityLane(wipLanes);\n\n        if (\n          // Tests whether the next lane is equal or lower priority than the wip\n          // one. This works because the bits decrease in priority as you go left.\n          nextLane >= wipLane || // Default priority updates should not interrupt transition updates. The\n          // only difference between default updates and transition updates is that\n          // default updates do not support refresh transitions.\n          (nextLane === DefaultLane && (wipLane & TransitionLanes) !== NoLanes)\n        ) {\n          // Keep working on the existing in-progress tree. Do not interrupt.\n          return wipLanes;\n        }\n      }\n\n      return nextLanes;\n    }\n    function getEntangledLanes(root, renderLanes) {\n      var entangledLanes = renderLanes;\n\n      if ((entangledLanes & InputContinuousLane) !== NoLanes) {\n        // When updates are sync by default, we entangle continuous priority updates\n        // and default updates, so they render in the same batch. The only reason\n        // they use separate lanes is because continuous updates should interrupt\n        // transitions, but default updates should not.\n        entangledLanes |= entangledLanes & DefaultLane;\n      } // Check for entangled lanes and add them to the batch.\n      //\n      // A lane is said to be entangled with another when it's not allowed to render\n      // in a batch that does not also include the other lane. Typically we do this\n      // when multiple updates have the same source, and we only want to respond to\n      // the most recent event from that source.\n      //\n      // Note that we apply entanglements *after* checking for partial work above.\n      // This means that if a lane is entangled during an interleaved event while\n      // it's already rendering, we won't interrupt it. This is intentional, since\n      // entanglement is usually \"best effort\": we'll try our best to render the\n      // lanes in the same batch, but it's not worth throwing out partially\n      // completed work in order to do it.\n      // TODO: Reconsider this. The counter-argument is that the partial work\n      // represents an intermediate state, which we don't want to show to the user.\n      // And by spending extra time finishing it, we're increasing the amount of\n      // time it takes to show the final state, which is what they are actually\n      // waiting for.\n      //\n      // For those exceptions where entanglement is semantically important,\n      // we should ensure that there is no partial work at the\n      // time we apply the entanglement.\n\n      var allEntangledLanes = root.entangledLanes;\n\n      if (allEntangledLanes !== NoLanes) {\n        var entanglements = root.entanglements;\n        var lanes = entangledLanes & allEntangledLanes;\n\n        while (lanes > 0) {\n          var index = pickArbitraryLaneIndex(lanes);\n          var lane = 1 << index;\n          entangledLanes |= entanglements[index];\n          lanes &= ~lane;\n        }\n      }\n\n      return entangledLanes;\n    }\n\n    function computeExpirationTime(lane, currentTime) {\n      switch (lane) {\n        case SyncHydrationLane:\n        case SyncLane:\n        case InputContinuousHydrationLane:\n        case InputContinuousLane:\n          // User interactions should expire slightly more quickly.\n          //\n          // NOTE: This is set to the corresponding constant as in Scheduler.js.\n          // When we made it larger, a product metric in www regressed, suggesting\n          // there's a user interaction that's being starved by a series of\n          // synchronous updates. If that theory is correct, the proper solution is\n          // to fix the starvation. However, this scenario supports the idea that\n          // expiration times are an important safeguard when starvation\n          // does happen.\n          return currentTime + syncLaneExpirationMs;\n\n        case DefaultHydrationLane:\n        case DefaultLane:\n        case TransitionHydrationLane:\n        case TransitionLane1:\n        case TransitionLane2:\n        case TransitionLane3:\n        case TransitionLane4:\n        case TransitionLane5:\n        case TransitionLane6:\n        case TransitionLane7:\n        case TransitionLane8:\n        case TransitionLane9:\n        case TransitionLane10:\n        case TransitionLane11:\n        case TransitionLane12:\n        case TransitionLane13:\n        case TransitionLane14:\n        case TransitionLane15:\n          return currentTime + transitionLaneExpirationMs;\n\n        case RetryLane1:\n        case RetryLane2:\n        case RetryLane3:\n        case RetryLane4:\n          // TODO: Retries should be allowed to expire if they are CPU bound for\n          // too long, but when I made this change it caused a spike in browser\n          // crashes. There must be some other underlying bug; not super urgent but\n          // ideally should figure out why and fix it. Unfortunately we don't have\n          // a repro for the crashes, only detected via production metrics.\n          return NoTimestamp;\n\n        case SelectiveHydrationLane:\n        case IdleHydrationLane:\n        case IdleLane:\n        case OffscreenLane:\n        case DeferredLane:\n          // Anything idle priority or lower should never expire.\n          return NoTimestamp;\n\n        default:\n          {\n            error(\"Should have found matching lanes. This is a bug in React.\");\n          }\n\n          return NoTimestamp;\n      }\n    }\n\n    function markStarvedLanesAsExpired(root, currentTime) {\n      // TODO: This gets called every time we yield. We can optimize by storing\n      // the earliest expiration time on the root. Then use that to quickly bail out\n      // of this function.\n      var pendingLanes = root.pendingLanes;\n      var suspendedLanes = root.suspendedLanes;\n      var pingedLanes = root.pingedLanes;\n      var expirationTimes = root.expirationTimes; // Iterate through the pending lanes and check if we've reached their\n      // expiration time. If so, we'll assume the update is being starved and mark\n      // it as expired to force it to finish.\n      // TODO: We should be able to replace this with upgradePendingLanesToSync\n      //\n      // We exclude retry lanes because those must always be time sliced, in order\n      // to unwrap uncached promises.\n      // TODO: Write a test for this\n\n      var lanes = pendingLanes & ~RetryLanes;\n\n      while (lanes > 0) {\n        var index = pickArbitraryLaneIndex(lanes);\n        var lane = 1 << index;\n        var expirationTime = expirationTimes[index];\n\n        if (expirationTime === NoTimestamp) {\n          // Found a pending lane with no expiration time. If it's not suspended, or\n          // if it's pinged, assume it's CPU-bound. Compute a new expiration time\n          // using the current time.\n          if (\n            (lane & suspendedLanes) === NoLanes ||\n            (lane & pingedLanes) !== NoLanes\n          ) {\n            // Assumes timestamps are monotonically increasing.\n            expirationTimes[index] = computeExpirationTime(lane, currentTime);\n          }\n        } else if (expirationTime <= currentTime) {\n          // This lane expired\n          root.expiredLanes |= lane;\n        }\n\n        lanes &= ~lane;\n      }\n    } // This returns the highest priority pending lanes regardless of whether they\n    function getLanesToRetrySynchronouslyOnError(\n      root,\n      originallyAttemptedLanes\n    ) {\n      if (root.errorRecoveryDisabledLanes & originallyAttemptedLanes) {\n        // The error recovery mechanism is disabled until these lanes are cleared.\n        return NoLanes;\n      }\n\n      var everythingButOffscreen = root.pendingLanes & ~OffscreenLane;\n\n      if (everythingButOffscreen !== NoLanes) {\n        return everythingButOffscreen;\n      }\n\n      if (everythingButOffscreen & OffscreenLane) {\n        return OffscreenLane;\n      }\n\n      return NoLanes;\n    }\n    function includesSyncLane(lanes) {\n      return (lanes & (SyncLane | SyncHydrationLane)) !== NoLanes;\n    }\n    function includesNonIdleWork(lanes) {\n      return (lanes & NonIdleLanes) !== NoLanes;\n    }\n    function includesOnlyRetries(lanes) {\n      return (lanes & RetryLanes) === lanes;\n    }\n    function includesOnlyNonUrgentLanes(lanes) {\n      // TODO: Should hydration lanes be included here? This function is only\n      // used in `updateDeferredValueImpl`.\n      var UrgentLanes = SyncLane | InputContinuousLane | DefaultLane;\n      return (lanes & UrgentLanes) === NoLanes;\n    }\n    function includesOnlyTransitions(lanes) {\n      return (lanes & TransitionLanes) === lanes;\n    }\n    function includesBlockingLane(root, lanes) {\n      var SyncDefaultLanes =\n        InputContinuousHydrationLane |\n        InputContinuousLane |\n        DefaultHydrationLane |\n        DefaultLane;\n      return (lanes & SyncDefaultLanes) !== NoLanes;\n    }\n    function includesExpiredLane(root, lanes) {\n      // This is a separate check from includesBlockingLane because a lane can\n      // expire after a render has already started.\n      return (lanes & root.expiredLanes) !== NoLanes;\n    }\n    function isTransitionLane(lane) {\n      return (lane & TransitionLanes) !== NoLanes;\n    }\n    function claimNextTransitionLane() {\n      // Cycle through the lanes, assigning each new transition to the next lane.\n      // In most cases, this means every transition gets its own lane, until we\n      // run out of lanes and cycle back to the beginning.\n      var lane = nextTransitionLane;\n      nextTransitionLane <<= 1;\n\n      if ((nextTransitionLane & TransitionLanes) === NoLanes) {\n        nextTransitionLane = TransitionLane1;\n      }\n\n      return lane;\n    }\n    function claimNextRetryLane() {\n      var lane = nextRetryLane;\n      nextRetryLane <<= 1;\n\n      if ((nextRetryLane & RetryLanes) === NoLanes) {\n        nextRetryLane = RetryLane1;\n      }\n\n      return lane;\n    }\n    function getHighestPriorityLane(lanes) {\n      return lanes & -lanes;\n    }\n    function pickArbitraryLane(lanes) {\n      // This wrapper function gets inlined. Only exists so to communicate that it\n      // doesn't matter which bit is selected; you can pick any bit without\n      // affecting the algorithms where its used. Here I'm using\n      // getHighestPriorityLane because it requires the fewest operations.\n      return getHighestPriorityLane(lanes);\n    }\n\n    function pickArbitraryLaneIndex(lanes) {\n      return 31 - clz32(lanes);\n    }\n\n    function laneToIndex(lane) {\n      return pickArbitraryLaneIndex(lane);\n    }\n\n    function includesSomeLane(a, b) {\n      return (a & b) !== NoLanes;\n    }\n    function isSubsetOfLanes(set, subset) {\n      return (set & subset) === subset;\n    }\n    function mergeLanes(a, b) {\n      return a | b;\n    }\n    function removeLanes(set, subset) {\n      return set & ~subset;\n    }\n    function intersectLanes(a, b) {\n      return a & b;\n    } // Seems redundant, but it changes the type from a single lane (used for\n    // updates) to a group of lanes (used for flushing work).\n\n    function laneToLanes(lane) {\n      return lane;\n    }\n    function createLaneMap(initial) {\n      // Intentionally pushing one by one.\n      // https://v8.dev/blog/elements-kinds#avoid-creating-holes\n      var laneMap = [];\n\n      for (var i = 0; i < TotalLanes; i++) {\n        laneMap.push(initial);\n      }\n\n      return laneMap;\n    }\n    function markRootUpdated(root, updateLane) {\n      root.pendingLanes |= updateLane; // If there are any suspended transitions, it's possible this new update\n      // could unblock them. Clear the suspended lanes so that we can try rendering\n      // them again.\n      //\n      // TODO: We really only need to unsuspend only lanes that are in the\n      // `subtreeLanes` of the updated fiber, or the update lanes of the return\n      // path. This would exclude suspended updates in an unrelated sibling tree,\n      // since there's no way for this update to unblock it.\n      //\n      // We don't do this if the incoming update is idle, because we never process\n      // idle updates until after all the regular updates have finished; there's no\n      // way it could unblock a transition.\n\n      if (updateLane !== IdleLane) {\n        root.suspendedLanes = NoLanes;\n        root.pingedLanes = NoLanes;\n      }\n    }\n    function markRootSuspended$1(root, suspendedLanes, spawnedLane) {\n      root.suspendedLanes |= suspendedLanes;\n      root.pingedLanes &= ~suspendedLanes; // The suspended lanes are no longer CPU-bound. Clear their expiration times.\n\n      var expirationTimes = root.expirationTimes;\n      var lanes = suspendedLanes;\n\n      while (lanes > 0) {\n        var index = pickArbitraryLaneIndex(lanes);\n        var lane = 1 << index;\n        expirationTimes[index] = NoTimestamp;\n        lanes &= ~lane;\n      }\n\n      if (spawnedLane !== NoLane) {\n        markSpawnedDeferredLane(root, spawnedLane, suspendedLanes);\n      }\n    }\n    function markRootPinged(root, pingedLanes) {\n      root.pingedLanes |= root.suspendedLanes & pingedLanes;\n    }\n    function markRootFinished(root, remainingLanes, spawnedLane) {\n      var noLongerPendingLanes = root.pendingLanes & ~remainingLanes;\n      root.pendingLanes = remainingLanes; // Let's try everything again\n\n      root.suspendedLanes = NoLanes;\n      root.pingedLanes = NoLanes;\n      root.expiredLanes &= remainingLanes;\n      root.entangledLanes &= remainingLanes;\n      root.errorRecoveryDisabledLanes &= remainingLanes;\n      root.shellSuspendCounter = 0;\n      var entanglements = root.entanglements;\n      var expirationTimes = root.expirationTimes;\n      var hiddenUpdates = root.hiddenUpdates; // Clear the lanes that no longer have pending work\n\n      var lanes = noLongerPendingLanes;\n\n      while (lanes > 0) {\n        var index = pickArbitraryLaneIndex(lanes);\n        var lane = 1 << index;\n        entanglements[index] = NoLanes;\n        expirationTimes[index] = NoTimestamp;\n        var hiddenUpdatesForLane = hiddenUpdates[index];\n\n        if (hiddenUpdatesForLane !== null) {\n          hiddenUpdates[index] = null; // \"Hidden\" updates are updates that were made to a hidden component. They\n          // have special logic associated with them because they may be entangled\n          // with updates that occur outside that tree. But once the outer tree\n          // commits, they behave like regular updates.\n\n          for (var i = 0; i < hiddenUpdatesForLane.length; i++) {\n            var update = hiddenUpdatesForLane[i];\n\n            if (update !== null) {\n              update.lane &= ~OffscreenLane;\n            }\n          }\n        }\n\n        lanes &= ~lane;\n      }\n\n      if (spawnedLane !== NoLane) {\n        markSpawnedDeferredLane(\n          root,\n          spawnedLane, // This render finished successfully without suspending, so we don't need\n          // to entangle the spawned task with the parent task.\n          NoLanes\n        );\n      }\n    }\n\n    function markSpawnedDeferredLane(root, spawnedLane, entangledLanes) {\n      // This render spawned a deferred task. Mark it as pending.\n      root.pendingLanes |= spawnedLane;\n      root.suspendedLanes &= ~spawnedLane; // Entangle the spawned lane with the DeferredLane bit so that we know it\n      // was the result of another render. This lets us avoid a useDeferredValue\n      // waterfall — only the first level will defer.\n\n      var spawnedLaneIndex = laneToIndex(spawnedLane);\n      root.entangledLanes |= spawnedLane;\n      root.entanglements[spawnedLaneIndex] |=\n        DeferredLane | // If the parent render task suspended, we must also entangle those lanes\n        // with the spawned task, so that the deferred task includes all the same\n        // updates that the parent task did. We can exclude any lane that is not\n        // used for updates (e.g. Offscreen).\n        (entangledLanes & UpdateLanes);\n    }\n\n    function markRootEntangled(root, entangledLanes) {\n      // In addition to entangling each of the given lanes with each other, we also\n      // have to consider _transitive_ entanglements. For each lane that is already\n      // entangled with *any* of the given lanes, that lane is now transitively\n      // entangled with *all* the given lanes.\n      //\n      // Translated: If C is entangled with A, then entangling A with B also\n      // entangles C with B.\n      //\n      // If this is hard to grasp, it might help to intentionally break this\n      // function and look at the tests that fail in ReactTransition-test.js. Try\n      // commenting out one of the conditions below.\n      var rootEntangledLanes = (root.entangledLanes |= entangledLanes);\n      var entanglements = root.entanglements;\n      var lanes = rootEntangledLanes;\n\n      while (lanes) {\n        var index = pickArbitraryLaneIndex(lanes);\n        var lane = 1 << index;\n\n        if (\n          // Is this one of the newly entangled lanes?\n          (lane & entangledLanes) | // Is this lane transitively entangled with the newly entangled lanes?\n          (entanglements[index] & entangledLanes)\n        ) {\n          entanglements[index] |= entangledLanes;\n        }\n\n        lanes &= ~lane;\n      }\n    }\n    function upgradePendingLaneToSync(root, lane) {\n      // Since we're upgrading the priority of the given lane, there is now pending\n      // sync work.\n      root.pendingLanes |= SyncLane; // Entangle the sync lane with the lane we're upgrading. This means SyncLane\n      // will not be allowed to finish without also finishing the given lane.\n\n      root.entangledLanes |= SyncLane;\n      root.entanglements[SyncLaneIndex] |= lane;\n    }\n    function markHiddenUpdate(root, update, lane) {\n      var index = laneToIndex(lane);\n      var hiddenUpdates = root.hiddenUpdates;\n      var hiddenUpdatesForLane = hiddenUpdates[index];\n\n      if (hiddenUpdatesForLane === null) {\n        hiddenUpdates[index] = [update];\n      } else {\n        hiddenUpdatesForLane.push(update);\n      }\n\n      update.lane = lane | OffscreenLane;\n    }\n    function getBumpedLaneForHydration(root, renderLanes) {\n      var renderLane = getHighestPriorityLane(renderLanes);\n      var lane;\n\n      if ((renderLane & SyncUpdateLanes) !== NoLane) {\n        lane = SyncHydrationLane;\n      } else {\n        switch (renderLane) {\n          case SyncLane:\n            lane = SyncHydrationLane;\n            break;\n\n          case InputContinuousLane:\n            lane = InputContinuousHydrationLane;\n            break;\n\n          case DefaultLane:\n            lane = DefaultHydrationLane;\n            break;\n\n          case TransitionLane1:\n          case TransitionLane2:\n          case TransitionLane3:\n          case TransitionLane4:\n          case TransitionLane5:\n          case TransitionLane6:\n          case TransitionLane7:\n          case TransitionLane8:\n          case TransitionLane9:\n          case TransitionLane10:\n          case TransitionLane11:\n          case TransitionLane12:\n          case TransitionLane13:\n          case TransitionLane14:\n          case TransitionLane15:\n          case RetryLane1:\n          case RetryLane2:\n          case RetryLane3:\n          case RetryLane4:\n            lane = TransitionHydrationLane;\n            break;\n\n          case IdleLane:\n            lane = IdleHydrationLane;\n            break;\n\n          default:\n            // Everything else is already either a hydration lane, or shouldn't\n            // be retried at a hydration lane.\n            lane = NoLane;\n            break;\n        }\n      } // Check if the lane we chose is suspended. If so, that indicates that we\n      // already attempted and failed to hydrate at that level. Also check if we're\n      // already rendering that lane, which is rare but could happen.\n\n      if ((lane & (root.suspendedLanes | renderLanes)) !== NoLane) {\n        // Give up trying to hydrate and fall back to client render.\n        return NoLane;\n      }\n\n      return lane;\n    }\n    function addFiberToLanesMap(root, fiber, lanes) {\n      if (!isDevToolsPresent) {\n        return;\n      }\n\n      var pendingUpdatersLaneMap = root.pendingUpdatersLaneMap;\n\n      while (lanes > 0) {\n        var index = laneToIndex(lanes);\n        var lane = 1 << index;\n        var updaters = pendingUpdatersLaneMap[index];\n        updaters.add(fiber);\n        lanes &= ~lane;\n      }\n    }\n    function movePendingFibersToMemoized(root, lanes) {\n      if (!isDevToolsPresent) {\n        return;\n      }\n\n      var pendingUpdatersLaneMap = root.pendingUpdatersLaneMap;\n      var memoizedUpdaters = root.memoizedUpdaters;\n\n      while (lanes > 0) {\n        var index = laneToIndex(lanes);\n        var lane = 1 << index;\n        var updaters = pendingUpdatersLaneMap[index];\n\n        if (updaters.size > 0) {\n          updaters.forEach(function (fiber) {\n            var alternate = fiber.alternate;\n\n            if (alternate === null || !memoizedUpdaters.has(alternate)) {\n              memoizedUpdaters.add(fiber);\n            }\n          });\n          updaters.clear();\n        }\n\n        lanes &= ~lane;\n      }\n    }\n    function getTransitionsForLanes(root, lanes) {\n      {\n        return null;\n      }\n    }\n\n    var DiscreteEventPriority = SyncLane;\n    var ContinuousEventPriority = InputContinuousLane;\n    var DefaultEventPriority = DefaultLane;\n    var IdleEventPriority = IdleLane;\n    var currentUpdatePriority = NoLane;\n    function getCurrentUpdatePriority() {\n      return currentUpdatePriority;\n    }\n    function setCurrentUpdatePriority(newPriority) {\n      currentUpdatePriority = newPriority;\n    }\n    function higherEventPriority(a, b) {\n      return a !== 0 && a < b ? a : b;\n    }\n    function lowerEventPriority(a, b) {\n      return a === 0 || a > b ? a : b;\n    }\n    function isHigherEventPriority(a, b) {\n      return a !== 0 && a < b;\n    }\n    function lanesToEventPriority(lanes) {\n      var lane = getHighestPriorityLane(lanes);\n\n      if (!isHigherEventPriority(DiscreteEventPriority, lane)) {\n        return DiscreteEventPriority;\n      }\n\n      if (!isHigherEventPriority(ContinuousEventPriority, lane)) {\n        return ContinuousEventPriority;\n      }\n\n      if (includesNonIdleWork(lane)) {\n        return DefaultEventPriority;\n      }\n\n      return IdleEventPriority;\n    }\n\n    // Renderers that don't support hydration\n    // can re-export everything from this module.\n    function shim$1() {\n      throw new Error(\n        \"The current renderer does not support hydration. \" +\n          \"This error is likely caused by a bug in React. \" +\n          \"Please file an issue.\"\n      );\n    } // Hydration (when unsupported)\n    var isSuspenseInstancePending = shim$1;\n    var isSuspenseInstanceFallback = shim$1;\n    var getSuspenseInstanceFallbackErrorDetails = shim$1;\n    var registerSuspenseInstanceRetry = shim$1;\n    var clearSuspenseBoundary = shim$1;\n    var clearSuspenseBoundaryFromContainer = shim$1;\n    var errorHydratingContainer = shim$1;\n\n    // Renderers that don't support hydration\n    // can re-export everything from this module.\n    function shim() {\n      throw new Error(\n        \"The current renderer does not support Resources. \" +\n          \"This error is likely caused by a bug in React. \" +\n          \"Please file an issue.\"\n      );\n    } // Resources (when unsupported)\n    var suspendResource = shim;\n\n    var getViewConfigForType =\n      ReactNativePrivateInterface.ReactNativeViewConfigRegistry.get; // Unused\n    // Unused\n    // Counter for uniquely identifying views.\n    // % 10 === 1 means it is a rootTag.\n    // % 2 === 0 means it is a Fabric tag.\n\n    var nextReactTag = 3;\n\n    function allocateTag() {\n      var tag = nextReactTag;\n\n      if (tag % 10 === 1) {\n        tag += 2;\n      }\n\n      nextReactTag = tag + 2;\n      return tag;\n    }\n\n    function recursivelyUncacheFiberNode(node) {\n      if (typeof node === \"number\") {\n        // Leaf node (eg text)\n        uncacheFiberNode(node);\n      } else {\n        uncacheFiberNode(node._nativeTag);\n\n        node._children.forEach(recursivelyUncacheFiberNode);\n      }\n    }\n    function appendInitialChild(parentInstance, child) {\n      parentInstance._children.push(child);\n    }\n    function createInstance(\n      type,\n      props,\n      rootContainerInstance,\n      hostContext,\n      internalInstanceHandle\n    ) {\n      var tag = allocateTag();\n      var viewConfig = getViewConfigForType(type);\n\n      {\n        for (var key in viewConfig.validAttributes) {\n          if (props.hasOwnProperty(key)) {\n            ReactNativePrivateInterface.deepFreezeAndThrowOnMutationInDev(\n              props[key]\n            );\n          }\n        }\n      }\n\n      var updatePayload = create(props, viewConfig.validAttributes);\n      ReactNativePrivateInterface.UIManager.createView(\n        tag, // reactTag\n        viewConfig.uiViewClassName, // viewName\n        rootContainerInstance, // rootTag\n        updatePayload // props\n      );\n      var component = new ReactNativeFiberHostComponent(\n        tag,\n        viewConfig,\n        internalInstanceHandle\n      );\n      precacheFiberNode(internalInstanceHandle, tag);\n      updateFiberProps(tag, props); // Not sure how to avoid this cast. Flow is okay if the component is defined\n      // in the same file but if it's external it can't see the types.\n\n      return component;\n    }\n    function createTextInstance(\n      text,\n      rootContainerInstance,\n      hostContext,\n      internalInstanceHandle\n    ) {\n      if (!hostContext.isInAParentText) {\n        throw new Error(\n          \"Text strings must be rendered within a <Text> component.\"\n        );\n      }\n\n      var tag = allocateTag();\n      ReactNativePrivateInterface.UIManager.createView(\n        tag, // reactTag\n        \"RCTRawText\", // viewName\n        rootContainerInstance, // rootTag\n        {\n          text: text\n        } // props\n      );\n      precacheFiberNode(internalInstanceHandle, tag);\n      return tag;\n    }\n    function finalizeInitialChildren(parentInstance, type, props, hostContext) {\n      // Don't send a no-op message over the bridge.\n      if (parentInstance._children.length === 0) {\n        return false;\n      } // Map from child objects to native tags.\n      // Either way we need to pass a copy of the Array to prevent it from being frozen.\n\n      var nativeTags = parentInstance._children.map(function (child) {\n        return typeof child === \"number\"\n          ? child // Leaf node (eg text)\n          : child._nativeTag;\n      });\n\n      ReactNativePrivateInterface.UIManager.setChildren(\n        parentInstance._nativeTag, // containerTag\n        nativeTags // reactTags\n      );\n      return false;\n    }\n    function getRootHostContext(rootContainerInstance) {\n      return {\n        isInAParentText: false\n      };\n    }\n    function getChildHostContext(parentHostContext, type) {\n      var prevIsInAParentText = parentHostContext.isInAParentText;\n      var isInAParentText =\n        type === \"AndroidTextInput\" || // Android\n        type === \"RCTMultilineTextInputView\" || // iOS\n        type === \"RCTSinglelineTextInputView\" || // iOS\n        type === \"RCTText\" ||\n        type === \"RCTVirtualText\";\n\n      if (prevIsInAParentText !== isInAParentText) {\n        return {\n          isInAParentText: isInAParentText\n        };\n      } else {\n        return parentHostContext;\n      }\n    }\n    function getPublicInstance(instance) {\n      // $FlowExpectedError[prop-missing] For compatibility with Fabric\n      if (\n        instance.canonical != null &&\n        instance.canonical.publicInstance != null\n      ) {\n        // $FlowFixMe[incompatible-return]\n        return instance.canonical.publicInstance;\n      }\n\n      return instance;\n    }\n    var scheduleTimeout = setTimeout;\n    var cancelTimeout = clearTimeout;\n    var noTimeout = -1;\n    function shouldSetTextContent(type, props) {\n      // TODO (bvaughn) Revisit this decision.\n      // Always returning false simplifies the createInstance() implementation,\n      // But creates an additional child Fiber for raw text children.\n      // No additional native views are created though.\n      // It's not clear to me which is better so I'm deferring for now.\n      // More context @ github.com/facebook/react/pull/8560#discussion_r92111303\n      return false;\n    }\n    function getCurrentEventPriority() {\n      return DefaultEventPriority;\n    }\n    function shouldAttemptEagerTransition() {\n      return false;\n    } // -------------------\n    function appendChild(parentInstance, child) {\n      var childTag = typeof child === \"number\" ? child : child._nativeTag;\n      var children = parentInstance._children;\n      var index = children.indexOf(child);\n\n      if (index >= 0) {\n        children.splice(index, 1);\n        children.push(child);\n        ReactNativePrivateInterface.UIManager.manageChildren(\n          parentInstance._nativeTag, // containerTag\n          [index], // moveFromIndices\n          [children.length - 1], // moveToIndices\n          [], // addChildReactTags\n          [], // addAtIndices\n          [] // removeAtIndices\n        );\n      } else {\n        children.push(child);\n        ReactNativePrivateInterface.UIManager.manageChildren(\n          parentInstance._nativeTag, // containerTag\n          [], // moveFromIndices\n          [], // moveToIndices\n          [childTag], // addChildReactTags\n          [children.length - 1], // addAtIndices\n          [] // removeAtIndices\n        );\n      }\n    }\n    function appendChildToContainer(parentInstance, child) {\n      var childTag = typeof child === \"number\" ? child : child._nativeTag;\n      ReactNativePrivateInterface.UIManager.setChildren(\n        parentInstance, // containerTag\n        [childTag] // reactTags\n      );\n    }\n    function commitTextUpdate(textInstance, oldText, newText) {\n      ReactNativePrivateInterface.UIManager.updateView(\n        textInstance, // reactTag\n        \"RCTRawText\", // viewName\n        {\n          text: newText\n        } // props\n      );\n    }\n    function commitMount(instance, type, newProps, internalInstanceHandle) {\n      // Noop\n    }\n    function commitUpdate(\n      instance,\n      updatePayloadTODO,\n      type,\n      oldProps,\n      newProps,\n      internalInstanceHandle\n    ) {\n      var viewConfig = instance.viewConfig;\n      updateFiberProps(instance._nativeTag, newProps);\n      var updatePayload = diff(oldProps, newProps, viewConfig.validAttributes); // Avoid the overhead of bridge calls if there's no update.\n      // This is an expensive no-op for Android, and causes an unnecessary\n      // view invalidation for certain components (eg RCTTextInput) on iOS.\n\n      if (updatePayload != null) {\n        ReactNativePrivateInterface.UIManager.updateView(\n          instance._nativeTag, // reactTag\n          viewConfig.uiViewClassName, // viewName\n          updatePayload // props\n        );\n      }\n    }\n    function insertBefore(parentInstance, child, beforeChild) {\n      var children = parentInstance._children;\n      var index = children.indexOf(child); // Move existing child or add new child?\n\n      if (index >= 0) {\n        children.splice(index, 1);\n        var beforeChildIndex = children.indexOf(beforeChild);\n        children.splice(beforeChildIndex, 0, child);\n        ReactNativePrivateInterface.UIManager.manageChildren(\n          parentInstance._nativeTag, // containerID\n          [index], // moveFromIndices\n          [beforeChildIndex], // moveToIndices\n          [], // addChildReactTags\n          [], // addAtIndices\n          [] // removeAtIndices\n        );\n      } else {\n        var _beforeChildIndex = children.indexOf(beforeChild);\n\n        children.splice(_beforeChildIndex, 0, child);\n        var childTag = typeof child === \"number\" ? child : child._nativeTag;\n        ReactNativePrivateInterface.UIManager.manageChildren(\n          parentInstance._nativeTag, // containerID\n          [], // moveFromIndices\n          [], // moveToIndices\n          [childTag], // addChildReactTags\n          [_beforeChildIndex], // addAtIndices\n          [] // removeAtIndices\n        );\n      }\n    }\n    function insertInContainerBefore(parentInstance, child, beforeChild) {\n      // TODO (bvaughn): Remove this check when...\n      // We create a wrapper object for the container in ReactNative render()\n      // Or we refactor to remove wrapper objects entirely.\n      // For more info on pros/cons see PR #8560 description.\n      if (typeof parentInstance === \"number\") {\n        throw new Error(\"Container does not support insertBefore operation\");\n      }\n    }\n    function removeChild(parentInstance, child) {\n      recursivelyUncacheFiberNode(child);\n      var children = parentInstance._children;\n      var index = children.indexOf(child);\n      children.splice(index, 1);\n      ReactNativePrivateInterface.UIManager.manageChildren(\n        parentInstance._nativeTag, // containerID\n        [], // moveFromIndices\n        [], // moveToIndices\n        [], // addChildReactTags\n        [], // addAtIndices\n        [index] // removeAtIndices\n      );\n    }\n    function removeChildFromContainer(parentInstance, child) {\n      recursivelyUncacheFiberNode(child);\n      ReactNativePrivateInterface.UIManager.manageChildren(\n        parentInstance, // containerID\n        [], // moveFromIndices\n        [], // moveToIndices\n        [], // addChildReactTags\n        [], // addAtIndices\n        [0] // removeAtIndices\n      );\n    }\n    function resetTextContent(instance) {\n      // Noop\n    }\n    function hideInstance(instance) {\n      var viewConfig = instance.viewConfig;\n      var updatePayload = create(\n        {\n          style: {\n            display: \"none\"\n          }\n        },\n        viewConfig.validAttributes\n      );\n      ReactNativePrivateInterface.UIManager.updateView(\n        instance._nativeTag,\n        viewConfig.uiViewClassName,\n        updatePayload\n      );\n    }\n    function hideTextInstance(textInstance) {\n      throw new Error(\"Not yet implemented.\");\n    }\n    function unhideInstance(instance, props) {\n      var viewConfig = instance.viewConfig;\n      var updatePayload = diff(\n        assign({}, props, {\n          style: [\n            props.style,\n            {\n              display: \"none\"\n            }\n          ]\n        }),\n        props,\n        viewConfig.validAttributes\n      );\n      ReactNativePrivateInterface.UIManager.updateView(\n        instance._nativeTag,\n        viewConfig.uiViewClassName,\n        updatePayload\n      );\n    }\n    function unhideTextInstance(textInstance, text) {\n      throw new Error(\"Not yet implemented.\");\n    }\n    function preloadInstance(type, props) {\n      // Return true to indicate it's already loaded\n      return true;\n    }\n    function waitForCommitToBeReady() {\n      return null;\n    }\n\n    function describeBuiltInComponentFrame(name, ownerFn) {\n      {\n        var ownerName = null;\n\n        if (ownerFn) {\n          ownerName = ownerFn.displayName || ownerFn.name || null;\n        }\n\n        return describeComponentFrame(name, ownerName);\n      }\n    }\n\n    {\n      var PossiblyWeakMap$1 = typeof WeakMap === \"function\" ? WeakMap : Map;\n      new PossiblyWeakMap$1();\n    }\n\n    function describeComponentFrame(name, ownerName) {\n      var sourceInfo = \"\";\n\n      if (ownerName) {\n        sourceInfo = \" (created by \" + ownerName + \")\";\n      }\n\n      return \"\\n    in \" + (name || \"Unknown\") + sourceInfo;\n    }\n\n    function describeClassComponentFrame(ctor, ownerFn) {\n      {\n        return describeFunctionComponentFrame(ctor, ownerFn);\n      }\n    }\n    function describeFunctionComponentFrame(fn, ownerFn) {\n      {\n        if (!fn) {\n          return \"\";\n        }\n\n        var name = fn.displayName || fn.name || null;\n        var ownerName = null;\n\n        if (ownerFn) {\n          ownerName = ownerFn.displayName || ownerFn.name || null;\n        }\n\n        return describeComponentFrame(name, ownerName);\n      }\n    }\n\n    function describeUnknownElementTypeFrameInDEV(type, ownerFn) {\n      if (type == null) {\n        return \"\";\n      }\n\n      if (typeof type === \"function\") {\n        {\n          return describeFunctionComponentFrame(type, ownerFn);\n        }\n      }\n\n      if (typeof type === \"string\") {\n        return describeBuiltInComponentFrame(type, ownerFn);\n      }\n\n      switch (type) {\n        case REACT_SUSPENSE_TYPE:\n          return describeBuiltInComponentFrame(\"Suspense\", ownerFn);\n\n        case REACT_SUSPENSE_LIST_TYPE:\n          return describeBuiltInComponentFrame(\"SuspenseList\", ownerFn);\n      }\n\n      if (typeof type === \"object\") {\n        switch (type.$$typeof) {\n          case REACT_FORWARD_REF_TYPE:\n            return describeFunctionComponentFrame(type.render, ownerFn);\n\n          case REACT_MEMO_TYPE:\n            // Memo may contain any component type so we recursively resolve it.\n            return describeUnknownElementTypeFrameInDEV(type.type, ownerFn);\n\n          case REACT_LAZY_TYPE: {\n            var lazyComponent = type;\n            var payload = lazyComponent._payload;\n            var init = lazyComponent._init;\n\n            try {\n              // Lazy may contain any component type so we recursively resolve it.\n              return describeUnknownElementTypeFrameInDEV(\n                init(payload),\n                ownerFn\n              );\n            } catch (x) {}\n          }\n        }\n      }\n\n      return \"\";\n    }\n\n    // $FlowFixMe[method-unbinding]\n    var hasOwnProperty = Object.prototype.hasOwnProperty;\n\n    var loggedTypeFailures = {};\n    var ReactDebugCurrentFrame$1 = ReactSharedInternals.ReactDebugCurrentFrame;\n\n    function setCurrentlyValidatingElement(element) {\n      {\n        if (element) {\n          var owner = element._owner;\n          var stack = describeUnknownElementTypeFrameInDEV(\n            element.type,\n            owner ? owner.type : null\n          );\n          ReactDebugCurrentFrame$1.setExtraStackFrame(stack);\n        } else {\n          ReactDebugCurrentFrame$1.setExtraStackFrame(null);\n        }\n      }\n    }\n\n    function checkPropTypes(\n      typeSpecs,\n      values,\n      location,\n      componentName,\n      element\n    ) {\n      {\n        // $FlowFixMe[incompatible-use] This is okay but Flow doesn't know it.\n        var has = Function.call.bind(hasOwnProperty);\n\n        for (var typeSpecName in typeSpecs) {\n          if (has(typeSpecs, typeSpecName)) {\n            var error$1 = void 0; // Prop type validation may throw. In case they do, we don't want to\n            // fail the render phase where it didn't fail before. So we log it.\n            // After these have been cleaned up, we'll let them throw.\n\n            try {\n              // This is intentionally an invariant that gets caught. It's the same\n              // behavior as without this statement except with a better message.\n              if (typeof typeSpecs[typeSpecName] !== \"function\") {\n                // eslint-disable-next-line react-internal/prod-error-codes\n                var err = Error(\n                  (componentName || \"React class\") +\n                    \": \" +\n                    location +\n                    \" type `\" +\n                    typeSpecName +\n                    \"` is invalid; \" +\n                    \"it must be a function, usually from the `prop-types` package, but received `\" +\n                    typeof typeSpecs[typeSpecName] +\n                    \"`.\" +\n                    \"This often happens because of typos such as `PropTypes.function` instead of `PropTypes.func`.\"\n                );\n                err.name = \"Invariant Violation\";\n                throw err;\n              }\n\n              error$1 = typeSpecs[typeSpecName](\n                values,\n                typeSpecName,\n                componentName,\n                location,\n                null,\n                \"SECRET_DO_NOT_PASS_THIS_OR_YOU_WILL_BE_FIRED\"\n              );\n            } catch (ex) {\n              error$1 = ex;\n            }\n\n            if (error$1 && !(error$1 instanceof Error)) {\n              setCurrentlyValidatingElement(element);\n\n              error(\n                \"%s: type specification of %s\" +\n                  \" `%s` is invalid; the type checker \" +\n                  \"function must return `null` or an `Error` but returned a %s. \" +\n                  \"You may have forgotten to pass an argument to the type checker \" +\n                  \"creator (arrayOf, instanceOf, objectOf, oneOf, oneOfType, and \" +\n                  \"shape all require an argument).\",\n                componentName || \"React class\",\n                location,\n                typeSpecName,\n                typeof error$1\n              );\n\n              setCurrentlyValidatingElement(null);\n            }\n\n            if (\n              error$1 instanceof Error &&\n              !(error$1.message in loggedTypeFailures)\n            ) {\n              // Only monitor this failure once because there tends to be a lot of the\n              // same error.\n              loggedTypeFailures[error$1.message] = true;\n              setCurrentlyValidatingElement(element);\n\n              error(\"Failed %s type: %s\", location, error$1.message);\n\n              setCurrentlyValidatingElement(null);\n            }\n          }\n        }\n      }\n    }\n\n    var valueStack = [];\n    var fiberStack;\n\n    {\n      fiberStack = [];\n    }\n\n    var index = -1;\n\n    function createCursor(defaultValue) {\n      return {\n        current: defaultValue\n      };\n    }\n\n    function pop(cursor, fiber) {\n      if (index < 0) {\n        {\n          error(\"Unexpected pop.\");\n        }\n\n        return;\n      }\n\n      {\n        if (fiber !== fiberStack[index]) {\n          error(\"Unexpected Fiber popped.\");\n        }\n      }\n\n      cursor.current = valueStack[index];\n      valueStack[index] = null;\n\n      {\n        fiberStack[index] = null;\n      }\n\n      index--;\n    }\n\n    function push(cursor, value, fiber) {\n      index++;\n      valueStack[index] = cursor.current;\n\n      {\n        fiberStack[index] = fiber;\n      }\n\n      cursor.current = value;\n    }\n\n    var warnedAboutMissingGetChildContext;\n\n    {\n      warnedAboutMissingGetChildContext = {};\n    }\n\n    var emptyContextObject = {};\n\n    {\n      Object.freeze(emptyContextObject);\n    } // A cursor to the current merged context object on the stack.\n\n    var contextStackCursor$1 = createCursor(emptyContextObject); // A cursor to a boolean indicating whether the context has changed.\n\n    var didPerformWorkStackCursor = createCursor(false); // Keep track of the previous context object that was on the stack.\n    // We use this to get access to the parent context after we have already\n    // pushed the next context provider, and now need to merge their contexts.\n\n    var previousContext = emptyContextObject;\n\n    function getUnmaskedContext(\n      workInProgress,\n      Component,\n      didPushOwnContextIfProvider\n    ) {\n      {\n        if (didPushOwnContextIfProvider && isContextProvider(Component)) {\n          // If the fiber is a context provider itself, when we read its context\n          // we may have already pushed its own child context on the stack. A context\n          // provider should not \"see\" its own child context. Therefore we read the\n          // previous (parent) context instead for a context provider.\n          return previousContext;\n        }\n\n        return contextStackCursor$1.current;\n      }\n    }\n\n    function cacheContext(workInProgress, unmaskedContext, maskedContext) {\n      {\n        var instance = workInProgress.stateNode;\n        instance.__reactInternalMemoizedUnmaskedChildContext = unmaskedContext;\n        instance.__reactInternalMemoizedMaskedChildContext = maskedContext;\n      }\n    }\n\n    function getMaskedContext(workInProgress, unmaskedContext) {\n      {\n        var type = workInProgress.type;\n        var contextTypes = type.contextTypes;\n\n        if (!contextTypes) {\n          return emptyContextObject;\n        } // Avoid recreating masked context unless unmasked context has changed.\n        // Failing to do this will result in unnecessary calls to componentWillReceiveProps.\n        // This may trigger infinite loops if componentWillReceiveProps calls setState.\n\n        var instance = workInProgress.stateNode;\n\n        if (\n          instance &&\n          instance.__reactInternalMemoizedUnmaskedChildContext ===\n            unmaskedContext\n        ) {\n          return instance.__reactInternalMemoizedMaskedChildContext;\n        }\n\n        var context = {};\n\n        for (var key in contextTypes) {\n          context[key] = unmaskedContext[key];\n        }\n\n        {\n          var name = getComponentNameFromFiber(workInProgress) || \"Unknown\";\n          checkPropTypes(contextTypes, context, \"context\", name);\n        } // Cache unmasked context so we can avoid recreating masked context unless necessary.\n        // Context is created before the class component is instantiated so check for instance.\n\n        if (instance) {\n          cacheContext(workInProgress, unmaskedContext, context);\n        }\n\n        return context;\n      }\n    }\n\n    function hasContextChanged() {\n      {\n        return didPerformWorkStackCursor.current;\n      }\n    }\n\n    function isContextProvider(type) {\n      {\n        var childContextTypes = type.childContextTypes;\n        return childContextTypes !== null && childContextTypes !== undefined;\n      }\n    }\n\n    function popContext(fiber) {\n      {\n        pop(didPerformWorkStackCursor, fiber);\n        pop(contextStackCursor$1, fiber);\n      }\n    }\n\n    function popTopLevelContextObject(fiber) {\n      {\n        pop(didPerformWorkStackCursor, fiber);\n        pop(contextStackCursor$1, fiber);\n      }\n    }\n\n    function pushTopLevelContextObject(fiber, context, didChange) {\n      {\n        if (contextStackCursor$1.current !== emptyContextObject) {\n          throw new Error(\n            \"Unexpected context found on stack. \" +\n              \"This error is likely caused by a bug in React. Please file an issue.\"\n          );\n        }\n\n        push(contextStackCursor$1, context, fiber);\n        push(didPerformWorkStackCursor, didChange, fiber);\n      }\n    }\n\n    function processChildContext(fiber, type, parentContext) {\n      {\n        var instance = fiber.stateNode;\n        var childContextTypes = type.childContextTypes; // TODO (bvaughn) Replace this behavior with an invariant() in the future.\n        // It has only been added in Fiber to match the (unintentional) behavior in Stack.\n\n        if (typeof instance.getChildContext !== \"function\") {\n          {\n            var componentName = getComponentNameFromFiber(fiber) || \"Unknown\";\n\n            if (!warnedAboutMissingGetChildContext[componentName]) {\n              warnedAboutMissingGetChildContext[componentName] = true;\n\n              error(\n                \"%s.childContextTypes is specified but there is no getChildContext() method \" +\n                  \"on the instance. You can either define getChildContext() on %s or remove \" +\n                  \"childContextTypes from it.\",\n                componentName,\n                componentName\n              );\n            }\n          }\n\n          return parentContext;\n        }\n\n        var childContext = instance.getChildContext();\n\n        for (var contextKey in childContext) {\n          if (!(contextKey in childContextTypes)) {\n            throw new Error(\n              (getComponentNameFromFiber(fiber) || \"Unknown\") +\n                '.getChildContext(): key \"' +\n                contextKey +\n                '\" is not defined in childContextTypes.'\n            );\n          }\n        }\n\n        {\n          var name = getComponentNameFromFiber(fiber) || \"Unknown\";\n          checkPropTypes(\n            childContextTypes,\n            childContext,\n            \"child context\",\n            name\n          );\n        }\n\n        return assign({}, parentContext, childContext);\n      }\n    }\n\n    function pushContextProvider(workInProgress) {\n      {\n        var instance = workInProgress.stateNode; // We push the context as early as possible to ensure stack integrity.\n        // If the instance does not exist yet, we will push null at first,\n        // and replace it on the stack later when invalidating the context.\n\n        var memoizedMergedChildContext =\n          (instance && instance.__reactInternalMemoizedMergedChildContext) ||\n          emptyContextObject; // Remember the parent context so we can merge with it later.\n        // Inherit the parent's did-perform-work value to avoid inadvertently blocking updates.\n\n        previousContext = contextStackCursor$1.current;\n        push(contextStackCursor$1, memoizedMergedChildContext, workInProgress);\n        push(\n          didPerformWorkStackCursor,\n          didPerformWorkStackCursor.current,\n          workInProgress\n        );\n        return true;\n      }\n    }\n\n    function invalidateContextProvider(workInProgress, type, didChange) {\n      {\n        var instance = workInProgress.stateNode;\n\n        if (!instance) {\n          throw new Error(\n            \"Expected to have an instance by this point. \" +\n              \"This error is likely caused by a bug in React. Please file an issue.\"\n          );\n        }\n\n        if (didChange) {\n          // Merge parent and own context.\n          // Skip this if we're not updating due to sCU.\n          // This avoids unnecessarily recomputing memoized values.\n          var mergedContext = processChildContext(\n            workInProgress,\n            type,\n            previousContext\n          );\n          instance.__reactInternalMemoizedMergedChildContext = mergedContext; // Replace the old (or empty) context with the new one.\n          // It is important to unwind the context in the reverse order.\n\n          pop(didPerformWorkStackCursor, workInProgress);\n          pop(contextStackCursor$1, workInProgress); // Now push the new context and mark that it has changed.\n\n          push(contextStackCursor$1, mergedContext, workInProgress);\n          push(didPerformWorkStackCursor, didChange, workInProgress);\n        } else {\n          pop(didPerformWorkStackCursor, workInProgress);\n          push(didPerformWorkStackCursor, didChange, workInProgress);\n        }\n      }\n    }\n\n    function findCurrentUnmaskedContext(fiber) {\n      {\n        // Currently this is only used with renderSubtreeIntoContainer; not sure if it\n        // makes sense elsewhere\n        if (!isFiberMounted(fiber) || fiber.tag !== ClassComponent) {\n          throw new Error(\n            \"Expected subtree parent to be a mounted class component. \" +\n              \"This error is likely caused by a bug in React. Please file an issue.\"\n          );\n        }\n\n        var node = fiber;\n\n        do {\n          switch (node.tag) {\n            case HostRoot:\n              return node.stateNode.context;\n\n            case ClassComponent: {\n              var Component = node.type;\n\n              if (isContextProvider(Component)) {\n                return node.stateNode.__reactInternalMemoizedMergedChildContext;\n              }\n\n              break;\n            }\n          } // $FlowFixMe[incompatible-type] we bail out when we get a null\n\n          node = node.return;\n        } while (node !== null);\n\n        throw new Error(\n          \"Found unexpected detached subtree parent. \" +\n            \"This error is likely caused by a bug in React. Please file an issue.\"\n        );\n      }\n    }\n\n    var LegacyRoot = 0;\n    var ConcurrentRoot = 1;\n\n    // We use the existence of the state object as an indicator that the component\n    // is hidden.\n    var OffscreenVisible =\n      /*                     */\n      1;\n    var OffscreenDetached =\n      /*                    */\n      2;\n    var OffscreenPassiveEffectsConnected =\n      /*     */\n      4;\n    function isOffscreenManual(offscreenFiber) {\n      return (\n        offscreenFiber.memoizedProps !== null &&\n        offscreenFiber.memoizedProps.mode === \"manual\"\n      );\n    }\n\n    /**\n     * inlined Object.is polyfill to avoid requiring consumers ship their own\n     * https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/is\n     */\n    function is(x, y) {\n      return (\n        (x === y && (x !== 0 || 1 / x === 1 / y)) || (x !== x && y !== y) // eslint-disable-line no-self-compare\n      );\n    }\n\n    var objectIs = typeof Object.is === \"function\" ? Object.is : is; // $FlowFixMe[method-unbinding]\n\n    // This is imported by the event replaying implementation in React DOM. It's\n    // in a separate file to break a circular dependency between the renderer and\n    // the reconciler.\n    function isRootDehydrated(root) {\n      var currentState = root.current.memoizedState;\n      return currentState.isDehydrated;\n    }\n\n    var contextStackCursor = createCursor(null);\n    var contextFiberStackCursor = createCursor(null);\n    var rootInstanceStackCursor = createCursor(null); // Represents the nearest host transition provider (in React DOM, a <form />)\n\n    function requiredContext(c) {\n      {\n        if (c === null) {\n          error(\n            \"Expected host context to exist. This error is likely caused by a bug \" +\n              \"in React. Please file an issue.\"\n          );\n        }\n      }\n\n      return c;\n    }\n\n    function getRootHostContainer() {\n      var rootInstance = requiredContext(rootInstanceStackCursor.current);\n      return rootInstance;\n    }\n\n    function pushHostContainer(fiber, nextRootInstance) {\n      // Push current root instance onto the stack;\n      // This allows us to reset root when portals are popped.\n      push(rootInstanceStackCursor, nextRootInstance, fiber); // Track the context and the Fiber that provided it.\n      // This enables us to pop only Fibers that provide unique contexts.\n\n      push(contextFiberStackCursor, fiber, fiber); // Finally, we need to push the host context to the stack.\n      // However, we can't just call getRootHostContext() and push it because\n      // we'd have a different number of entries on the stack depending on\n      // whether getRootHostContext() throws somewhere in renderer code or not.\n      // So we push an empty value first. This lets us safely unwind on errors.\n\n      push(contextStackCursor, null, fiber);\n      var nextRootContext = getRootHostContext(); // Now that we know this function doesn't throw, replace it.\n\n      pop(contextStackCursor, fiber);\n      push(contextStackCursor, nextRootContext, fiber);\n    }\n\n    function popHostContainer(fiber) {\n      pop(contextStackCursor, fiber);\n      pop(contextFiberStackCursor, fiber);\n      pop(rootInstanceStackCursor, fiber);\n    }\n\n    function getHostContext() {\n      var context = requiredContext(contextStackCursor.current);\n      return context;\n    }\n\n    function pushHostContext(fiber) {\n      var context = requiredContext(contextStackCursor.current);\n      var nextContext = getChildHostContext(context, fiber.type); // Don't push this Fiber's context unless it's unique.\n\n      if (context !== nextContext) {\n        // Track the context and the Fiber that provided it.\n        // This enables us to pop only Fibers that provide unique contexts.\n        push(contextFiberStackCursor, fiber, fiber);\n        push(contextStackCursor, nextContext, fiber);\n      }\n    }\n\n    function popHostContext(fiber) {\n      if (contextFiberStackCursor.current === fiber) {\n        // Do not pop unless this Fiber provided the current context.\n        // pushHostContext() only pushes Fibers that provide unique contexts.\n        pop(contextStackCursor, fiber);\n        pop(contextFiberStackCursor, fiber);\n      }\n    }\n\n    var isHydrating = false; // This flag allows for warning supression when we expect there to be mismatches\n    // due to earlier mismatches or a suspended fiber.\n\n    var didSuspendOrErrorDEV = false; // Hydration errors that were thrown inside this boundary\n\n    var hydrationErrors = null;\n    function didSuspendOrErrorWhileHydratingDEV() {\n      {\n        return didSuspendOrErrorDEV;\n      }\n    }\n\n    function prepareToHydrateHostInstance(fiber, hostContext) {\n      {\n        throw new Error(\n          \"Expected prepareToHydrateHostInstance() to never be called. \" +\n            \"This error is likely caused by a bug in React. Please file an issue.\"\n        );\n      }\n    }\n\n    function prepareToHydrateHostTextInstance(fiber) {\n      {\n        throw new Error(\n          \"Expected prepareToHydrateHostTextInstance() to never be called. \" +\n            \"This error is likely caused by a bug in React. Please file an issue.\"\n        );\n      }\n    }\n\n    function prepareToHydrateHostSuspenseInstance(fiber) {\n      {\n        throw new Error(\n          \"Expected prepareToHydrateHostSuspenseInstance() to never be called. \" +\n            \"This error is likely caused by a bug in React. Please file an issue.\"\n        );\n      }\n    }\n\n    function popHydrationState(fiber) {\n      {\n        return false;\n      }\n    }\n\n    function upgradeHydrationErrorsToRecoverable() {\n      if (hydrationErrors !== null) {\n        // Successfully completed a forced client render. The errors that occurred\n        // during the hydration attempt are now recovered. We will log them in\n        // commit phase, once the entire tree has finished.\n        queueRecoverableErrors(hydrationErrors);\n        hydrationErrors = null;\n      }\n    }\n\n    function getIsHydrating() {\n      return isHydrating;\n    }\n\n    function queueHydrationError(error) {\n      if (hydrationErrors === null) {\n        hydrationErrors = [error];\n      } else {\n        hydrationErrors.push(error);\n      }\n    }\n\n    // we wait until the current render is over (either finished or interrupted)\n    // before adding it to the fiber/hook queue. Push to this array so we can\n    // access the queue, fiber, update, et al later.\n\n    var concurrentQueues = [];\n    var concurrentQueuesIndex = 0;\n    var concurrentlyUpdatedLanes = NoLanes;\n    function finishQueueingConcurrentUpdates() {\n      var endIndex = concurrentQueuesIndex;\n      concurrentQueuesIndex = 0;\n      concurrentlyUpdatedLanes = NoLanes;\n      var i = 0;\n\n      while (i < endIndex) {\n        var fiber = concurrentQueues[i];\n        concurrentQueues[i++] = null;\n        var queue = concurrentQueues[i];\n        concurrentQueues[i++] = null;\n        var update = concurrentQueues[i];\n        concurrentQueues[i++] = null;\n        var lane = concurrentQueues[i];\n        concurrentQueues[i++] = null;\n\n        if (queue !== null && update !== null) {\n          var pending = queue.pending;\n\n          if (pending === null) {\n            // This is the first update. Create a circular list.\n            update.next = update;\n          } else {\n            update.next = pending.next;\n            pending.next = update;\n          }\n\n          queue.pending = update;\n        }\n\n        if (lane !== NoLane) {\n          markUpdateLaneFromFiberToRoot(fiber, update, lane);\n        }\n      }\n    }\n    function getConcurrentlyUpdatedLanes() {\n      return concurrentlyUpdatedLanes;\n    }\n\n    function enqueueUpdate$1(fiber, queue, update, lane) {\n      // Don't update the `childLanes` on the return path yet. If we already in\n      // the middle of rendering, wait until after it has completed.\n      concurrentQueues[concurrentQueuesIndex++] = fiber;\n      concurrentQueues[concurrentQueuesIndex++] = queue;\n      concurrentQueues[concurrentQueuesIndex++] = update;\n      concurrentQueues[concurrentQueuesIndex++] = lane;\n      concurrentlyUpdatedLanes = mergeLanes(concurrentlyUpdatedLanes, lane); // The fiber's `lane` field is used in some places to check if any work is\n      // scheduled, to perform an eager bailout, so we need to update it immediately.\n      // TODO: We should probably move this to the \"shared\" queue instead.\n\n      fiber.lanes = mergeLanes(fiber.lanes, lane);\n      var alternate = fiber.alternate;\n\n      if (alternate !== null) {\n        alternate.lanes = mergeLanes(alternate.lanes, lane);\n      }\n    }\n\n    function enqueueConcurrentHookUpdate(fiber, queue, update, lane) {\n      var concurrentQueue = queue;\n      var concurrentUpdate = update;\n      enqueueUpdate$1(fiber, concurrentQueue, concurrentUpdate, lane);\n      return getRootForUpdatedFiber(fiber);\n    }\n    function enqueueConcurrentHookUpdateAndEagerlyBailout(\n      fiber,\n      queue,\n      update\n    ) {\n      // This function is used to queue an update that doesn't need a rerender. The\n      // only reason we queue it is in case there's a subsequent higher priority\n      // update that causes it to be rebased.\n      var lane = NoLane;\n      var concurrentQueue = queue;\n      var concurrentUpdate = update;\n      enqueueUpdate$1(fiber, concurrentQueue, concurrentUpdate, lane); // Usually we can rely on the upcoming render phase to process the concurrent\n      // queue. However, since this is a bail out, we're not scheduling any work\n      // here. So the update we just queued will leak until something else happens\n      // to schedule work (if ever).\n      //\n      // Check if we're currently in the middle of rendering a tree, and if not,\n      // process the queue immediately to prevent a leak.\n\n      var isConcurrentlyRendering = getWorkInProgressRoot() !== null;\n\n      if (!isConcurrentlyRendering) {\n        finishQueueingConcurrentUpdates();\n      }\n    }\n    function enqueueConcurrentClassUpdate(fiber, queue, update, lane) {\n      var concurrentQueue = queue;\n      var concurrentUpdate = update;\n      enqueueUpdate$1(fiber, concurrentQueue, concurrentUpdate, lane);\n      return getRootForUpdatedFiber(fiber);\n    }\n    function enqueueConcurrentRenderForLane(fiber, lane) {\n      enqueueUpdate$1(fiber, null, null, lane);\n      return getRootForUpdatedFiber(fiber);\n    } // Calling this function outside this module should only be done for backwards\n    // compatibility and should always be accompanied by a warning.\n\n    function unsafe_markUpdateLaneFromFiberToRoot(sourceFiber, lane) {\n      // NOTE: For Hyrum's Law reasons, if an infinite update loop is detected, it\n      // should throw before `markUpdateLaneFromFiberToRoot` is called. But this is\n      // undefined behavior and we can change it if we need to; it just so happens\n      // that, at the time of this writing, there's an internal product test that\n      // happens to rely on this.\n      var root = getRootForUpdatedFiber(sourceFiber);\n      markUpdateLaneFromFiberToRoot(sourceFiber, null, lane);\n      return root;\n    }\n\n    function markUpdateLaneFromFiberToRoot(sourceFiber, update, lane) {\n      // Update the source fiber's lanes\n      sourceFiber.lanes = mergeLanes(sourceFiber.lanes, lane);\n      var alternate = sourceFiber.alternate;\n\n      if (alternate !== null) {\n        alternate.lanes = mergeLanes(alternate.lanes, lane);\n      } // Walk the parent path to the root and update the child lanes.\n\n      var isHidden = false;\n      var parent = sourceFiber.return;\n      var node = sourceFiber;\n\n      while (parent !== null) {\n        parent.childLanes = mergeLanes(parent.childLanes, lane);\n        alternate = parent.alternate;\n\n        if (alternate !== null) {\n          alternate.childLanes = mergeLanes(alternate.childLanes, lane);\n        }\n\n        if (parent.tag === OffscreenComponent) {\n          // Check if this offscreen boundary is currently hidden.\n          //\n          // The instance may be null if the Offscreen parent was unmounted. Usually\n          // the parent wouldn't be reachable in that case because we disconnect\n          // fibers from the tree when they are deleted. However, there's a weird\n          // edge case where setState is called on a fiber that was interrupted\n          // before it ever mounted. Because it never mounts, it also never gets\n          // deleted. Because it never gets deleted, its return pointer never gets\n          // disconnected. Which means it may be attached to a deleted Offscreen\n          // parent node. (This discovery suggests it may be better for memory usage\n          // if we don't attach the `return` pointer until the commit phase, though\n          // in order to do that we'd need some other way to track the return\n          // pointer during the initial render, like on the stack.)\n          //\n          // This case is always accompanied by a warning, but we still need to\n          // account for it. (There may be other cases that we haven't discovered,\n          // too.)\n          var offscreenInstance = parent.stateNode;\n\n          if (\n            offscreenInstance !== null &&\n            !(offscreenInstance._visibility & OffscreenVisible)\n          ) {\n            isHidden = true;\n          }\n        }\n\n        node = parent;\n        parent = parent.return;\n      }\n\n      if (isHidden && update !== null && node.tag === HostRoot) {\n        var root = node.stateNode;\n        markHiddenUpdate(root, update, lane);\n      }\n    }\n\n    function getRootForUpdatedFiber(sourceFiber) {\n      // TODO: We will detect and infinite update loop and throw even if this fiber\n      // has already unmounted. This isn't really necessary but it happens to be the\n      // current behavior we've used for several release cycles. Consider not\n      // performing this check if the updated fiber already unmounted, since it's\n      // not possible for that to cause an infinite update loop.\n      throwIfInfiniteUpdateLoopDetected(); // When a setState happens, we must ensure the root is scheduled. Because\n      // update queues do not have a backpointer to the root, the only way to do\n      // this currently is to walk up the return path. This used to not be a big\n      // deal because we would have to walk up the return path to set\n      // the `childLanes`, anyway, but now those two traversals happen at\n      // different times.\n      // TODO: Consider adding a `root` backpointer on the update queue.\n\n      detectUpdateOnUnmountedFiber(sourceFiber, sourceFiber);\n      var node = sourceFiber;\n      var parent = node.return;\n\n      while (parent !== null) {\n        detectUpdateOnUnmountedFiber(sourceFiber, node);\n        node = parent;\n        parent = node.return;\n      }\n\n      return node.tag === HostRoot ? node.stateNode : null;\n    }\n\n    function detectUpdateOnUnmountedFiber(sourceFiber, parent) {\n      {\n        var alternate = parent.alternate;\n\n        if (\n          alternate === null &&\n          (parent.flags & (Placement | Hydrating)) !== NoFlags$1\n        ) {\n          warnAboutUpdateOnNotYetMountedFiberInDEV(sourceFiber);\n        }\n      }\n    }\n\n    var ReactCurrentActQueue$3 = ReactSharedInternals.ReactCurrentActQueue; // A linked list of all the roots with pending work. In an idiomatic app,\n    // there's only a single root, but we do support multi root apps, hence this\n    // extra complexity. But this module is optimized for the single root case.\n\n    var firstScheduledRoot = null;\n    var lastScheduledRoot = null; // Used to prevent redundant mircotasks from being scheduled.\n\n    var didScheduleMicrotask = false; // `act` \"microtasks\" are scheduled on the `act` queue instead of an actual\n    // microtask, so we have to dedupe those separately. This wouldn't be an issue\n    // if we required all `act` calls to be awaited, which we might in the future.\n\n    var didScheduleMicrotask_act = false; // Used to quickly bail out of flushSync if there's no sync work to do.\n\n    var mightHavePendingSyncWork = false;\n    var isFlushingWork = false;\n    var currentEventTransitionLane = NoLane;\n    function ensureRootIsScheduled(root) {\n      // This function is called whenever a root receives an update. It does two\n      // things 1) it ensures the root is in the root schedule, and 2) it ensures\n      // there's a pending microtask to process the root schedule.\n      //\n      // Most of the actual scheduling logic does not happen until\n      // `scheduleTaskForRootDuringMicrotask` runs.\n      // Add the root to the schedule\n      if (root === lastScheduledRoot || root.next !== null);\n      else {\n        if (lastScheduledRoot === null) {\n          firstScheduledRoot = lastScheduledRoot = root;\n        } else {\n          lastScheduledRoot.next = root;\n          lastScheduledRoot = root;\n        }\n      } // Any time a root received an update, we set this to true until the next time\n      // we process the schedule. If it's false, then we can quickly exit flushSync\n      // without consulting the schedule.\n\n      mightHavePendingSyncWork = true; // At the end of the current event, go through each of the roots and ensure\n      // there's a task scheduled for each one at the correct priority.\n\n      if (ReactCurrentActQueue$3.current !== null) {\n        // We're inside an `act` scope.\n        if (!didScheduleMicrotask_act) {\n          didScheduleMicrotask_act = true;\n          scheduleImmediateTask(processRootScheduleInMicrotask);\n        }\n      } else {\n        if (!didScheduleMicrotask) {\n          didScheduleMicrotask = true;\n          scheduleImmediateTask(processRootScheduleInMicrotask);\n        }\n      }\n\n      {\n        // While this flag is disabled, we schedule the render task immediately\n        // instead of waiting a microtask.\n        // TODO: We need to land enableDeferRootSchedulingToMicrotask ASAP to\n        // unblock additional features we have planned.\n        scheduleTaskForRootDuringMicrotask(root, now$1());\n      }\n\n      if (ReactCurrentActQueue$3.isBatchingLegacy && root.tag === LegacyRoot) {\n        // Special `act` case: Record whenever a legacy update is scheduled.\n        ReactCurrentActQueue$3.didScheduleLegacyUpdate = true;\n      }\n    }\n    function flushSyncWorkOnAllRoots() {\n      // This is allowed to be called synchronously, but the caller should check\n      // the execution context first.\n      flushSyncWorkAcrossRoots_impl(false);\n    }\n    function flushSyncWorkOnLegacyRootsOnly() {\n      // This is allowed to be called synchronously, but the caller should check\n      // the execution context first.\n      flushSyncWorkAcrossRoots_impl(true);\n    }\n\n    function flushSyncWorkAcrossRoots_impl(onlyLegacy) {\n      if (isFlushingWork) {\n        // Prevent reentrancy.\n        // TODO: Is this overly defensive? The callers must check the execution\n        // context first regardless.\n        return;\n      }\n\n      if (!mightHavePendingSyncWork) {\n        // Fast path. There's no sync work to do.\n        return;\n      } // There may or may not be synchronous work scheduled. Let's check.\n\n      var didPerformSomeWork;\n      var errors = null;\n      isFlushingWork = true;\n\n      do {\n        didPerformSomeWork = false;\n        var root = firstScheduledRoot;\n\n        while (root !== null) {\n          if (onlyLegacy && root.tag !== LegacyRoot);\n          else {\n            var workInProgressRoot = getWorkInProgressRoot();\n            var workInProgressRootRenderLanes =\n              getWorkInProgressRootRenderLanes();\n            var nextLanes = getNextLanes(\n              root,\n              root === workInProgressRoot\n                ? workInProgressRootRenderLanes\n                : NoLanes\n            );\n\n            if (includesSyncLane(nextLanes)) {\n              // This root has pending sync work. Flush it now.\n              try {\n                didPerformSomeWork = true;\n                performSyncWorkOnRoot(root, nextLanes);\n              } catch (error) {\n                // Collect errors so we can rethrow them at the end\n                if (errors === null) {\n                  errors = [error];\n                } else {\n                  errors.push(error);\n                }\n              }\n            }\n          }\n\n          root = root.next;\n        }\n      } while (didPerformSomeWork);\n\n      isFlushingWork = false; // If any errors were thrown, rethrow them right before exiting.\n      // TODO: Consider returning these to the caller, to allow them to decide\n      // how/when to rethrow.\n\n      if (errors !== null) {\n        if (errors.length > 1) {\n          if (typeof AggregateError === \"function\") {\n            // eslint-disable-next-line no-undef\n            throw new AggregateError(errors);\n          } else {\n            for (var i = 1; i < errors.length; i++) {\n              scheduleImmediateTask(throwError.bind(null, errors[i]));\n            }\n\n            var firstError = errors[0];\n            throw firstError;\n          }\n        } else {\n          var error = errors[0];\n          throw error;\n        }\n      }\n    }\n\n    function throwError(error) {\n      throw error;\n    }\n\n    function processRootScheduleInMicrotask() {\n      // This function is always called inside a microtask. It should never be\n      // called synchronously.\n      didScheduleMicrotask = false;\n\n      {\n        didScheduleMicrotask_act = false;\n      } // We'll recompute this as we iterate through all the roots and schedule them.\n\n      mightHavePendingSyncWork = false;\n      var currentTime = now$1();\n      var prev = null;\n      var root = firstScheduledRoot;\n\n      while (root !== null) {\n        var next = root.next;\n\n        if (\n          currentEventTransitionLane !== NoLane &&\n          shouldAttemptEagerTransition()\n        ) {\n          // A transition was scheduled during an event, but we're going to try to\n          // render it synchronously anyway. We do this during a popstate event to\n          // preserve the scroll position of the previous page.\n          upgradePendingLaneToSync(root, currentEventTransitionLane);\n        }\n\n        var nextLanes = scheduleTaskForRootDuringMicrotask(root, currentTime);\n\n        if (nextLanes === NoLane) {\n          // This root has no more pending work. Remove it from the schedule. To\n          // guard against subtle reentrancy bugs, this microtask is the only place\n          // we do this — you can add roots to the schedule whenever, but you can\n          // only remove them here.\n          // Null this out so we know it's been removed from the schedule.\n          root.next = null;\n\n          if (prev === null) {\n            // This is the new head of the list\n            firstScheduledRoot = next;\n          } else {\n            prev.next = next;\n          }\n\n          if (next === null) {\n            // This is the new tail of the list\n            lastScheduledRoot = prev;\n          }\n        } else {\n          // This root still has work. Keep it in the list.\n          prev = root;\n\n          if (includesSyncLane(nextLanes)) {\n            mightHavePendingSyncWork = true;\n          }\n        }\n\n        root = next;\n      }\n\n      currentEventTransitionLane = NoLane; // At the end of the microtask, flush any pending synchronous work. This has\n      // to come at the end, because it does actual rendering work that might throw.\n\n      flushSyncWorkOnAllRoots();\n    }\n\n    function scheduleTaskForRootDuringMicrotask(root, currentTime) {\n      // This function is always called inside a microtask, or at the very end of a\n      // rendering task right before we yield to the main thread. It should never be\n      // called synchronously.\n      //\n      // TODO: Unless enableDeferRootSchedulingToMicrotask is off. We need to land\n      // that ASAP to unblock additional features we have planned.\n      //\n      // This function also never performs React work synchronously; it should\n      // only schedule work to be performed later, in a separate task or microtask.\n      // Check if any lanes are being starved by other work. If so, mark them as\n      // expired so we know to work on those next.\n      markStarvedLanesAsExpired(root, currentTime); // Determine the next lanes to work on, and their priority.\n\n      var workInProgressRoot = getWorkInProgressRoot();\n      var workInProgressRootRenderLanes = getWorkInProgressRootRenderLanes();\n      var nextLanes = getNextLanes(\n        root,\n        root === workInProgressRoot ? workInProgressRootRenderLanes : NoLanes\n      );\n      var existingCallbackNode = root.callbackNode;\n\n      if (\n        // Check if there's nothing to work on\n        nextLanes === NoLanes || // If this root is currently suspended and waiting for data to resolve, don't\n        // schedule a task to render it. We'll either wait for a ping, or wait to\n        // receive an update.\n        //\n        // Suspended render phase\n        (root === workInProgressRoot && isWorkLoopSuspendedOnData()) || // Suspended commit phase\n        root.cancelPendingCommit !== null\n      ) {\n        // Fast path: There's nothing to work on.\n        if (existingCallbackNode !== null) {\n          cancelCallback(existingCallbackNode);\n        }\n\n        root.callbackNode = null;\n        root.callbackPriority = NoLane;\n        return NoLane;\n      } // Schedule a new callback in the host environment.\n\n      if (includesSyncLane(nextLanes)) {\n        // Synchronous work is always flushed at the end of the microtask, so we\n        // don't need to schedule an additional task.\n        if (existingCallbackNode !== null) {\n          cancelCallback(existingCallbackNode);\n        }\n\n        root.callbackPriority = SyncLane;\n        root.callbackNode = null;\n        return SyncLane;\n      } else {\n        // We use the highest priority lane to represent the priority of the callback.\n        var existingCallbackPriority = root.callbackPriority;\n        var newCallbackPriority = getHighestPriorityLane(nextLanes);\n\n        if (\n          newCallbackPriority === existingCallbackPriority && // Special case related to `act`. If the currently scheduled task is a\n          // Scheduler task, rather than an `act` task, cancel it and re-schedule\n          // on the `act` queue.\n          !(\n            ReactCurrentActQueue$3.current !== null &&\n            existingCallbackNode !== fakeActCallbackNode$1\n          )\n        ) {\n          // The priority hasn't changed. We can reuse the existing task.\n          return newCallbackPriority;\n        } else {\n          // Cancel the existing callback. We'll schedule a new one below.\n          cancelCallback(existingCallbackNode);\n        }\n\n        var schedulerPriorityLevel;\n\n        switch (lanesToEventPriority(nextLanes)) {\n          case DiscreteEventPriority:\n            schedulerPriorityLevel = ImmediatePriority;\n            break;\n\n          case ContinuousEventPriority:\n            schedulerPriorityLevel = UserBlockingPriority;\n            break;\n\n          case DefaultEventPriority:\n            schedulerPriorityLevel = NormalPriority;\n            break;\n\n          case IdleEventPriority:\n            schedulerPriorityLevel = IdlePriority;\n            break;\n\n          default:\n            schedulerPriorityLevel = NormalPriority;\n            break;\n        }\n\n        var newCallbackNode = scheduleCallback$1(\n          schedulerPriorityLevel,\n          performConcurrentWorkOnRoot.bind(null, root)\n        );\n        root.callbackPriority = newCallbackPriority;\n        root.callbackNode = newCallbackNode;\n        return newCallbackPriority;\n      }\n    }\n\n    function getContinuationForRoot(root, originalCallbackNode) {\n      // This is called at the end of `performConcurrentWorkOnRoot` to determine\n      // if we need to schedule a continuation task.\n      //\n      // Usually `scheduleTaskForRootDuringMicrotask` only runs inside a microtask;\n      // however, since most of the logic for determining if we need a continuation\n      // versus a new task is the same, we cheat a bit and call it here. This is\n      // only safe to do because we know we're at the end of the browser task.\n      // So although it's not an actual microtask, it might as well be.\n      scheduleTaskForRootDuringMicrotask(root, now$1());\n\n      if (root.callbackNode === originalCallbackNode) {\n        // The task node scheduled for this root is the same one that's\n        // currently executed. Need to return a continuation.\n        return performConcurrentWorkOnRoot.bind(null, root);\n      }\n\n      return null;\n    }\n    var fakeActCallbackNode$1 = {};\n\n    function scheduleCallback$1(priorityLevel, callback) {\n      if (ReactCurrentActQueue$3.current !== null) {\n        // Special case: We're inside an `act` scope (a testing utility).\n        // Instead of scheduling work in the host environment, add it to a\n        // fake internal queue that's managed by the `act` implementation.\n        ReactCurrentActQueue$3.current.push(callback);\n        return fakeActCallbackNode$1;\n      } else {\n        return scheduleCallback$2(priorityLevel, callback);\n      }\n    }\n\n    function cancelCallback(callbackNode) {\n      if (callbackNode === fakeActCallbackNode$1);\n      else if (callbackNode !== null) {\n        cancelCallback$1(callbackNode);\n      }\n    }\n\n    function scheduleImmediateTask(cb) {\n      if (ReactCurrentActQueue$3.current !== null) {\n        // Special case: Inside an `act` scope, we push microtasks to the fake `act`\n        // callback queue. This is because we currently support calling `act`\n        // without awaiting the result. The plan is to deprecate that, and require\n        // that you always await the result so that the microtasks have a chance to\n        // run. But it hasn't happened yet.\n        ReactCurrentActQueue$3.current.push(function () {\n          cb();\n          return null;\n        });\n      } // TODO: Can we land supportsMicrotasks? Which environments don't support it?\n      // Alternatively, can we move this check to the host config?\n\n      {\n        // If microtasks are not supported, use Scheduler.\n        scheduleCallback$2(ImmediatePriority, cb);\n      }\n    }\n\n    function requestTransitionLane( // This argument isn't used, it's only here to encourage the caller to\n      // check that it's inside a transition before calling this function.\n      // TODO: Make this non-nullable. Requires a tweak to useOptimistic.\n      transition\n    ) {\n      // The algorithm for assigning an update to a lane should be stable for all\n      // updates at the same priority within the same event. To do this, the\n      // inputs to the algorithm must be the same.\n      //\n      // The trick we use is to cache the first of each of these inputs within an\n      // event. Then reset the cached values once we can be sure the event is\n      // over. Our heuristic for that is whenever we enter a concurrent work loop.\n      if (currentEventTransitionLane === NoLane) {\n        // All transitions within the same event are assigned the same lane.\n        currentEventTransitionLane = claimNextTransitionLane();\n      }\n\n      return currentEventTransitionLane;\n    }\n\n    var currentEntangledLane = NoLane; // A thenable that resolves when the entangled scope completes. It does not\n    // resolve to a particular value because it's only used for suspending the UI\n    // until the async action scope has completed.\n\n    var currentEntangledActionThenable = null;\n\n    function chainThenableValue(thenable, result) {\n      // Equivalent to: Promise.resolve(thenable).then(() => result), except we can\n      // cheat a bit since we know that that this thenable is only ever consumed\n      // by React.\n      //\n      // We don't technically require promise support on the client yet, hence this\n      // extra code.\n      var listeners = [];\n      var thenableWithOverride = {\n        status: \"pending\",\n        value: null,\n        reason: null,\n        then: function (resolve) {\n          listeners.push(resolve);\n        }\n      };\n      thenable.then(\n        function (value) {\n          var fulfilledThenable = thenableWithOverride;\n          fulfilledThenable.status = \"fulfilled\";\n          fulfilledThenable.value = result;\n\n          for (var i = 0; i < listeners.length; i++) {\n            var listener = listeners[i];\n            listener(result);\n          }\n        },\n        function (error) {\n          var rejectedThenable = thenableWithOverride;\n          rejectedThenable.status = \"rejected\";\n          rejectedThenable.reason = error;\n\n          for (var i = 0; i < listeners.length; i++) {\n            var listener = listeners[i]; // This is a perf hack where we call the `onFulfill` ping function\n            // instead of `onReject`, because we know that React is the only\n            // consumer of these promises, and it passes the same listener to both.\n            // We also know that it will read the error directly off the\n            // `.reason` field.\n\n            listener(undefined);\n          }\n        }\n      );\n      return thenableWithOverride;\n    }\n    function peekEntangledActionLane() {\n      return currentEntangledLane;\n    }\n    function peekEntangledActionThenable() {\n      return currentEntangledActionThenable;\n    }\n\n    var UpdateState = 0;\n    var ReplaceState = 1;\n    var ForceUpdate = 2;\n    var CaptureUpdate = 3; // Global state that is reset at the beginning of calling `processUpdateQueue`.\n    // It should only be read right after calling `processUpdateQueue`, via\n    // `checkHasForceUpdateAfterProcessing`.\n\n    var hasForceUpdate = false;\n    var didWarnUpdateInsideUpdate;\n    var currentlyProcessingQueue;\n\n    {\n      didWarnUpdateInsideUpdate = false;\n      currentlyProcessingQueue = null;\n    }\n\n    function initializeUpdateQueue(fiber) {\n      var queue = {\n        baseState: fiber.memoizedState,\n        firstBaseUpdate: null,\n        lastBaseUpdate: null,\n        shared: {\n          pending: null,\n          lanes: NoLanes,\n          hiddenCallbacks: null\n        },\n        callbacks: null\n      };\n      fiber.updateQueue = queue;\n    }\n    function cloneUpdateQueue(current, workInProgress) {\n      // Clone the update queue from current. Unless it's already a clone.\n      var queue = workInProgress.updateQueue;\n      var currentQueue = current.updateQueue;\n\n      if (queue === currentQueue) {\n        var clone = {\n          baseState: currentQueue.baseState,\n          firstBaseUpdate: currentQueue.firstBaseUpdate,\n          lastBaseUpdate: currentQueue.lastBaseUpdate,\n          shared: currentQueue.shared,\n          callbacks: null\n        };\n        workInProgress.updateQueue = clone;\n      }\n    }\n    function createUpdate(lane) {\n      var update = {\n        lane: lane,\n        tag: UpdateState,\n        payload: null,\n        callback: null,\n        next: null\n      };\n      return update;\n    }\n    function enqueueUpdate(fiber, update, lane) {\n      var updateQueue = fiber.updateQueue;\n\n      if (updateQueue === null) {\n        // Only occurs if the fiber has been unmounted.\n        return null;\n      }\n\n      var sharedQueue = updateQueue.shared;\n\n      {\n        if (\n          currentlyProcessingQueue === sharedQueue &&\n          !didWarnUpdateInsideUpdate\n        ) {\n          var componentName = getComponentNameFromFiber(fiber);\n\n          error(\n            \"An update (setState, replaceState, or forceUpdate) was scheduled \" +\n              \"from inside an update function. Update functions should be pure, \" +\n              \"with zero side-effects. Consider using componentDidUpdate or a \" +\n              \"callback.\\n\\nPlease update the following component: %s\",\n            componentName\n          );\n\n          didWarnUpdateInsideUpdate = true;\n        }\n      }\n\n      if (isUnsafeClassRenderPhaseUpdate()) {\n        // This is an unsafe render phase update. Add directly to the update\n        // queue so we can process it immediately during the current render.\n        var pending = sharedQueue.pending;\n\n        if (pending === null) {\n          // This is the first update. Create a circular list.\n          update.next = update;\n        } else {\n          update.next = pending.next;\n          pending.next = update;\n        }\n\n        sharedQueue.pending = update; // Update the childLanes even though we're most likely already rendering\n        // this fiber. This is for backwards compatibility in the case where you\n        // update a different component during render phase than the one that is\n        // currently renderings (a pattern that is accompanied by a warning).\n\n        return unsafe_markUpdateLaneFromFiberToRoot(fiber, lane);\n      } else {\n        return enqueueConcurrentClassUpdate(fiber, sharedQueue, update, lane);\n      }\n    }\n    function entangleTransitions(root, fiber, lane) {\n      var updateQueue = fiber.updateQueue;\n\n      if (updateQueue === null) {\n        // Only occurs if the fiber has been unmounted.\n        return;\n      }\n\n      var sharedQueue = updateQueue.shared;\n\n      if (isTransitionLane(lane)) {\n        var queueLanes = sharedQueue.lanes; // If any entangled lanes are no longer pending on the root, then they must\n        // have finished. We can remove them from the shared queue, which represents\n        // a superset of the actually pending lanes. In some cases we may entangle\n        // more than we need to, but that's OK. In fact it's worse if we *don't*\n        // entangle when we should.\n\n        queueLanes = intersectLanes(queueLanes, root.pendingLanes); // Entangle the new transition lane with the other transition lanes.\n\n        var newQueueLanes = mergeLanes(queueLanes, lane);\n        sharedQueue.lanes = newQueueLanes; // Even if queue.lanes already include lane, we don't know for certain if\n        // the lane finished since the last time we entangled it. So we need to\n        // entangle it again, just to be sure.\n\n        markRootEntangled(root, newQueueLanes);\n      }\n    }\n    function enqueueCapturedUpdate(workInProgress, capturedUpdate) {\n      // Captured updates are updates that are thrown by a child during the render\n      // phase. They should be discarded if the render is aborted. Therefore,\n      // we should only put them on the work-in-progress queue, not the current one.\n      var queue = workInProgress.updateQueue; // Check if the work-in-progress queue is a clone.\n\n      var current = workInProgress.alternate;\n\n      if (current !== null) {\n        var currentQueue = current.updateQueue;\n\n        if (queue === currentQueue) {\n          // The work-in-progress queue is the same as current. This happens when\n          // we bail out on a parent fiber that then captures an error thrown by\n          // a child. Since we want to append the update only to the work-in\n          // -progress queue, we need to clone the updates. We usually clone during\n          // processUpdateQueue, but that didn't happen in this case because we\n          // skipped over the parent when we bailed out.\n          var newFirst = null;\n          var newLast = null;\n          var firstBaseUpdate = queue.firstBaseUpdate;\n\n          if (firstBaseUpdate !== null) {\n            // Loop through the updates and clone them.\n            var update = firstBaseUpdate;\n\n            do {\n              var clone = {\n                lane: update.lane,\n                tag: update.tag,\n                payload: update.payload,\n                // When this update is rebased, we should not fire its\n                // callback again.\n                callback: null,\n                next: null\n              };\n\n              if (newLast === null) {\n                newFirst = newLast = clone;\n              } else {\n                newLast.next = clone;\n                newLast = clone;\n              } // $FlowFixMe[incompatible-type] we bail out when we get a null\n\n              update = update.next;\n            } while (update !== null); // Append the captured update the end of the cloned list.\n\n            if (newLast === null) {\n              newFirst = newLast = capturedUpdate;\n            } else {\n              newLast.next = capturedUpdate;\n              newLast = capturedUpdate;\n            }\n          } else {\n            // There are no base updates.\n            newFirst = newLast = capturedUpdate;\n          }\n\n          queue = {\n            baseState: currentQueue.baseState,\n            firstBaseUpdate: newFirst,\n            lastBaseUpdate: newLast,\n            shared: currentQueue.shared,\n            callbacks: currentQueue.callbacks\n          };\n          workInProgress.updateQueue = queue;\n          return;\n        }\n      } // Append the update to the end of the list.\n\n      var lastBaseUpdate = queue.lastBaseUpdate;\n\n      if (lastBaseUpdate === null) {\n        queue.firstBaseUpdate = capturedUpdate;\n      } else {\n        lastBaseUpdate.next = capturedUpdate;\n      }\n\n      queue.lastBaseUpdate = capturedUpdate;\n    }\n\n    function getStateFromUpdate(\n      workInProgress,\n      queue,\n      update,\n      prevState,\n      nextProps,\n      instance\n    ) {\n      switch (update.tag) {\n        case ReplaceState: {\n          var payload = update.payload;\n\n          if (typeof payload === \"function\") {\n            // Updater function\n            {\n              enterDisallowedContextReadInDEV();\n            }\n\n            var nextState = payload.call(instance, prevState, nextProps);\n\n            {\n              if (workInProgress.mode & StrictLegacyMode) {\n                setIsStrictModeForDevtools(true);\n\n                try {\n                  payload.call(instance, prevState, nextProps);\n                } finally {\n                  setIsStrictModeForDevtools(false);\n                }\n              }\n\n              exitDisallowedContextReadInDEV();\n            }\n\n            return nextState;\n          } // State object\n\n          return payload;\n        }\n\n        case CaptureUpdate: {\n          workInProgress.flags =\n            (workInProgress.flags & ~ShouldCapture) | DidCapture;\n        }\n        // Intentional fallthrough\n\n        case UpdateState: {\n          var _payload = update.payload;\n          var partialState;\n\n          if (typeof _payload === \"function\") {\n            // Updater function\n            {\n              enterDisallowedContextReadInDEV();\n            }\n\n            partialState = _payload.call(instance, prevState, nextProps);\n\n            {\n              if (workInProgress.mode & StrictLegacyMode) {\n                setIsStrictModeForDevtools(true);\n\n                try {\n                  _payload.call(instance, prevState, nextProps);\n                } finally {\n                  setIsStrictModeForDevtools(false);\n                }\n              }\n\n              exitDisallowedContextReadInDEV();\n            }\n          } else {\n            // Partial state object\n            partialState = _payload;\n          }\n\n          if (partialState === null || partialState === undefined) {\n            // Null and undefined are treated as no-ops.\n            return prevState;\n          } // Merge the partial state and the previous state.\n\n          return assign({}, prevState, partialState);\n        }\n\n        case ForceUpdate: {\n          hasForceUpdate = true;\n          return prevState;\n        }\n      }\n\n      return prevState;\n    }\n\n    var didReadFromEntangledAsyncAction = false; // Each call to processUpdateQueue should be accompanied by a call to this. It's\n    // only in a separate function because in updateHostRoot, it must happen after\n    // all the context stacks have been pushed to, to prevent a stack mismatch. A\n    // bit unfortunate.\n\n    function suspendIfUpdateReadFromEntangledAsyncAction() {\n      // Check if this update is part of a pending async action. If so, we'll\n      // need to suspend until the action has finished, so that it's batched\n      // together with future updates in the same action.\n      // TODO: Once we support hooks inside useMemo (or an equivalent\n      // memoization boundary like Forget), hoist this logic so that it only\n      // suspends if the memo boundary produces a new value.\n      if (didReadFromEntangledAsyncAction) {\n        var entangledActionThenable = peekEntangledActionThenable();\n\n        if (entangledActionThenable !== null) {\n          // TODO: Instead of the throwing the thenable directly, throw a\n          // special object like `use` does so we can detect if it's captured\n          // by userspace.\n          throw entangledActionThenable;\n        }\n      }\n    }\n    function processUpdateQueue(workInProgress, props, instance, renderLanes) {\n      didReadFromEntangledAsyncAction = false; // This is always non-null on a ClassComponent or HostRoot\n\n      var queue = workInProgress.updateQueue;\n      hasForceUpdate = false;\n\n      {\n        currentlyProcessingQueue = queue.shared;\n      }\n\n      var firstBaseUpdate = queue.firstBaseUpdate;\n      var lastBaseUpdate = queue.lastBaseUpdate; // Check if there are pending updates. If so, transfer them to the base queue.\n\n      var pendingQueue = queue.shared.pending;\n\n      if (pendingQueue !== null) {\n        queue.shared.pending = null; // The pending queue is circular. Disconnect the pointer between first\n        // and last so that it's non-circular.\n\n        var lastPendingUpdate = pendingQueue;\n        var firstPendingUpdate = lastPendingUpdate.next;\n        lastPendingUpdate.next = null; // Append pending updates to base queue\n\n        if (lastBaseUpdate === null) {\n          firstBaseUpdate = firstPendingUpdate;\n        } else {\n          lastBaseUpdate.next = firstPendingUpdate;\n        }\n\n        lastBaseUpdate = lastPendingUpdate; // If there's a current queue, and it's different from the base queue, then\n        // we need to transfer the updates to that queue, too. Because the base\n        // queue is a singly-linked list with no cycles, we can append to both\n        // lists and take advantage of structural sharing.\n        // TODO: Pass `current` as argument\n\n        var current = workInProgress.alternate;\n\n        if (current !== null) {\n          // This is always non-null on a ClassComponent or HostRoot\n          var currentQueue = current.updateQueue;\n          var currentLastBaseUpdate = currentQueue.lastBaseUpdate;\n\n          if (currentLastBaseUpdate !== lastBaseUpdate) {\n            if (currentLastBaseUpdate === null) {\n              currentQueue.firstBaseUpdate = firstPendingUpdate;\n            } else {\n              currentLastBaseUpdate.next = firstPendingUpdate;\n            }\n\n            currentQueue.lastBaseUpdate = lastPendingUpdate;\n          }\n        }\n      } // These values may change as we process the queue.\n\n      if (firstBaseUpdate !== null) {\n        // Iterate through the list of updates to compute the result.\n        var newState = queue.baseState; // TODO: Don't need to accumulate this. Instead, we can remove renderLanes\n        // from the original lanes.\n\n        var newLanes = NoLanes;\n        var newBaseState = null;\n        var newFirstBaseUpdate = null;\n        var newLastBaseUpdate = null;\n        var update = firstBaseUpdate;\n\n        do {\n          // An extra OffscreenLane bit is added to updates that were made to\n          // a hidden tree, so that we can distinguish them from updates that were\n          // already there when the tree was hidden.\n          var updateLane = removeLanes(update.lane, OffscreenLane);\n          var isHiddenUpdate = updateLane !== update.lane; // Check if this update was made while the tree was hidden. If so, then\n          // it's not a \"base\" update and we should disregard the extra base lanes\n          // that were added to renderLanes when we entered the Offscreen tree.\n\n          var shouldSkipUpdate = isHiddenUpdate\n            ? !isSubsetOfLanes(getWorkInProgressRootRenderLanes(), updateLane)\n            : !isSubsetOfLanes(renderLanes, updateLane);\n\n          if (shouldSkipUpdate) {\n            // Priority is insufficient. Skip this update. If this is the first\n            // skipped update, the previous update/state is the new base\n            // update/state.\n            var clone = {\n              lane: updateLane,\n              tag: update.tag,\n              payload: update.payload,\n              callback: update.callback,\n              next: null\n            };\n\n            if (newLastBaseUpdate === null) {\n              newFirstBaseUpdate = newLastBaseUpdate = clone;\n              newBaseState = newState;\n            } else {\n              newLastBaseUpdate = newLastBaseUpdate.next = clone;\n            } // Update the remaining priority in the queue.\n\n            newLanes = mergeLanes(newLanes, updateLane);\n          } else {\n            // This update does have sufficient priority.\n            // Check if this update is part of a pending async action. If so,\n            // we'll need to suspend until the action has finished, so that it's\n            // batched together with future updates in the same action.\n            if (\n              updateLane !== NoLane &&\n              updateLane === peekEntangledActionLane()\n            ) {\n              didReadFromEntangledAsyncAction = true;\n            }\n\n            if (newLastBaseUpdate !== null) {\n              var _clone = {\n                // This update is going to be committed so we never want uncommit\n                // it. Using NoLane works because 0 is a subset of all bitmasks, so\n                // this will never be skipped by the check above.\n                lane: NoLane,\n                tag: update.tag,\n                payload: update.payload,\n                // When this update is rebased, we should not fire its\n                // callback again.\n                callback: null,\n                next: null\n              };\n              newLastBaseUpdate = newLastBaseUpdate.next = _clone;\n            } // Process this update.\n\n            newState = getStateFromUpdate(\n              workInProgress,\n              queue,\n              update,\n              newState,\n              props,\n              instance\n            );\n            var callback = update.callback;\n\n            if (callback !== null) {\n              workInProgress.flags |= Callback;\n\n              if (isHiddenUpdate) {\n                workInProgress.flags |= Visibility;\n              }\n\n              var callbacks = queue.callbacks;\n\n              if (callbacks === null) {\n                queue.callbacks = [callback];\n              } else {\n                callbacks.push(callback);\n              }\n            }\n          } // $FlowFixMe[incompatible-type] we bail out when we get a null\n\n          update = update.next;\n\n          if (update === null) {\n            pendingQueue = queue.shared.pending;\n\n            if (pendingQueue === null) {\n              break;\n            } else {\n              // An update was scheduled from inside a reducer. Add the new\n              // pending updates to the end of the list and keep processing.\n              var _lastPendingUpdate = pendingQueue; // Intentionally unsound. Pending updates form a circular list, but we\n              // unravel them when transferring them to the base queue.\n\n              var _firstPendingUpdate = _lastPendingUpdate.next;\n              _lastPendingUpdate.next = null;\n              update = _firstPendingUpdate;\n              queue.lastBaseUpdate = _lastPendingUpdate;\n              queue.shared.pending = null;\n            }\n          }\n        } while (true);\n\n        if (newLastBaseUpdate === null) {\n          newBaseState = newState;\n        }\n\n        queue.baseState = newBaseState;\n        queue.firstBaseUpdate = newFirstBaseUpdate;\n        queue.lastBaseUpdate = newLastBaseUpdate;\n\n        if (firstBaseUpdate === null) {\n          // `queue.lanes` is used for entangling transitions. We can set it back to\n          // zero once the queue is empty.\n          queue.shared.lanes = NoLanes;\n        } // Set the remaining expiration time to be whatever is remaining in the queue.\n        // This should be fine because the only two other things that contribute to\n        // expiration time are props and context. We're already in the middle of the\n        // begin phase by the time we start processing the queue, so we've already\n        // dealt with the props. Context in components that specify\n        // shouldComponentUpdate is tricky; but we'll have to account for\n        // that regardless.\n\n        markSkippedUpdateLanes(newLanes);\n        workInProgress.lanes = newLanes;\n        workInProgress.memoizedState = newState;\n      }\n\n      {\n        currentlyProcessingQueue = null;\n      }\n    }\n\n    function callCallback(callback, context) {\n      if (typeof callback !== \"function\") {\n        throw new Error(\n          \"Invalid argument passed as callback. Expected a function. Instead \" +\n            (\"received: \" + callback)\n        );\n      }\n\n      callback.call(context);\n    }\n\n    function resetHasForceUpdateBeforeProcessing() {\n      hasForceUpdate = false;\n    }\n    function checkHasForceUpdateAfterProcessing() {\n      return hasForceUpdate;\n    }\n    function deferHiddenCallbacks(updateQueue) {\n      // When an update finishes on a hidden component, its callback should not\n      // be fired until/unless the component is made visible again. Stash the\n      // callback on the shared queue object so it can be fired later.\n      var newHiddenCallbacks = updateQueue.callbacks;\n\n      if (newHiddenCallbacks !== null) {\n        var existingHiddenCallbacks = updateQueue.shared.hiddenCallbacks;\n\n        if (existingHiddenCallbacks === null) {\n          updateQueue.shared.hiddenCallbacks = newHiddenCallbacks;\n        } else {\n          updateQueue.shared.hiddenCallbacks =\n            existingHiddenCallbacks.concat(newHiddenCallbacks);\n        }\n      }\n    }\n    function commitHiddenCallbacks(updateQueue, context) {\n      // This component is switching from hidden -> visible. Commit any callbacks\n      // that were previously deferred.\n      var hiddenCallbacks = updateQueue.shared.hiddenCallbacks;\n\n      if (hiddenCallbacks !== null) {\n        updateQueue.shared.hiddenCallbacks = null;\n\n        for (var i = 0; i < hiddenCallbacks.length; i++) {\n          var callback = hiddenCallbacks[i];\n          callCallback(callback, context);\n        }\n      }\n    }\n    function commitCallbacks(updateQueue, context) {\n      var callbacks = updateQueue.callbacks;\n\n      if (callbacks !== null) {\n        updateQueue.callbacks = null;\n\n        for (var i = 0; i < callbacks.length; i++) {\n          var callback = callbacks[i];\n          callCallback(callback, context);\n        }\n      }\n    }\n\n    /**\n     * Performs equality by iterating through keys on an object and returning false\n     * when any key has values which are not strictly equal between the arguments.\n     * Returns true when the values of all keys are strictly equal.\n     */\n\n    function shallowEqual(objA, objB) {\n      if (objectIs(objA, objB)) {\n        return true;\n      }\n\n      if (\n        typeof objA !== \"object\" ||\n        objA === null ||\n        typeof objB !== \"object\" ||\n        objB === null\n      ) {\n        return false;\n      }\n\n      var keysA = Object.keys(objA);\n      var keysB = Object.keys(objB);\n\n      if (keysA.length !== keysB.length) {\n        return false;\n      } // Test for A's keys different from B.\n\n      for (var i = 0; i < keysA.length; i++) {\n        var currentKey = keysA[i];\n\n        if (\n          !hasOwnProperty.call(objB, currentKey) || // $FlowFixMe[incompatible-use] lost refinement of `objB`\n          !objectIs(objA[currentKey], objB[currentKey])\n        ) {\n          return false;\n        }\n      }\n\n      return true;\n    }\n\n    function describeFiber(fiber) {\n      var owner = fiber._debugOwner ? fiber._debugOwner.type : null;\n\n      switch (fiber.tag) {\n        case HostHoistable:\n        case HostSingleton:\n        case HostComponent:\n          return describeBuiltInComponentFrame(fiber.type, owner);\n\n        case LazyComponent:\n          return describeBuiltInComponentFrame(\"Lazy\", owner);\n\n        case SuspenseComponent:\n          return describeBuiltInComponentFrame(\"Suspense\", owner);\n\n        case SuspenseListComponent:\n          return describeBuiltInComponentFrame(\"SuspenseList\", owner);\n\n        case FunctionComponent:\n        case IndeterminateComponent:\n        case SimpleMemoComponent:\n          return describeFunctionComponentFrame(fiber.type, owner);\n\n        case ForwardRef:\n          return describeFunctionComponentFrame(fiber.type.render, owner);\n\n        case ClassComponent:\n          return describeClassComponentFrame(fiber.type, owner);\n\n        default:\n          return \"\";\n      }\n    }\n\n    function getStackByFiberInDevAndProd(workInProgress) {\n      try {\n        var info = \"\";\n        var node = workInProgress;\n\n        do {\n          info += describeFiber(node); // $FlowFixMe[incompatible-type] we bail out when we get a null\n\n          node = node.return;\n        } while (node);\n\n        return info;\n      } catch (x) {\n        return \"\\nError generating stack: \" + x.message + \"\\n\" + x.stack;\n      }\n    }\n\n    var ReactDebugCurrentFrame = ReactSharedInternals.ReactDebugCurrentFrame;\n    var current = null;\n    var isRendering = false;\n    function getCurrentFiberOwnerNameInDevOrNull() {\n      {\n        if (current === null) {\n          return null;\n        }\n\n        var owner = current._debugOwner;\n\n        if (owner !== null && typeof owner !== \"undefined\") {\n          return getComponentNameFromFiber(owner);\n        }\n      }\n\n      return null;\n    }\n\n    function getCurrentFiberStackInDev() {\n      {\n        if (current === null) {\n          return \"\";\n        } // Safe because if current fiber exists, we are reconciling,\n        // and it is guaranteed to be the work-in-progress version.\n\n        return getStackByFiberInDevAndProd(current);\n      }\n    }\n\n    function resetCurrentFiber() {\n      {\n        ReactDebugCurrentFrame.getCurrentStack = null;\n        current = null;\n        isRendering = false;\n      }\n    }\n    function setCurrentFiber(fiber) {\n      {\n        ReactDebugCurrentFrame.getCurrentStack =\n          fiber === null ? null : getCurrentFiberStackInDev;\n        current = fiber;\n        isRendering = false;\n      }\n    }\n    function getCurrentFiber() {\n      {\n        return current;\n      }\n    }\n    function setIsRendering(rendering) {\n      {\n        isRendering = rendering;\n      }\n    }\n\n    var ReactStrictModeWarnings = {\n      recordUnsafeLifecycleWarnings: function (fiber, instance) {},\n      flushPendingUnsafeLifecycleWarnings: function () {},\n      recordLegacyContextWarning: function (fiber, instance) {},\n      flushLegacyContextWarning: function () {},\n      discardPendingWarnings: function () {}\n    };\n\n    {\n      var findStrictRoot = function (fiber) {\n        var maybeStrictRoot = null;\n        var node = fiber;\n\n        while (node !== null) {\n          if (node.mode & StrictLegacyMode) {\n            maybeStrictRoot = node;\n          }\n\n          node = node.return;\n        }\n\n        return maybeStrictRoot;\n      };\n\n      var setToSortedString = function (set) {\n        var array = [];\n        set.forEach(function (value) {\n          array.push(value);\n        });\n        return array.sort().join(\", \");\n      };\n\n      var pendingComponentWillMountWarnings = [];\n      var pendingUNSAFE_ComponentWillMountWarnings = [];\n      var pendingComponentWillReceivePropsWarnings = [];\n      var pendingUNSAFE_ComponentWillReceivePropsWarnings = [];\n      var pendingComponentWillUpdateWarnings = [];\n      var pendingUNSAFE_ComponentWillUpdateWarnings = []; // Tracks components we have already warned about.\n\n      var didWarnAboutUnsafeLifecycles = new Set();\n\n      ReactStrictModeWarnings.recordUnsafeLifecycleWarnings = function (\n        fiber,\n        instance\n      ) {\n        // Dedupe strategy: Warn once per component.\n        if (didWarnAboutUnsafeLifecycles.has(fiber.type)) {\n          return;\n        }\n\n        if (\n          typeof instance.componentWillMount === \"function\" && // Don't warn about react-lifecycles-compat polyfilled components.\n          instance.componentWillMount.__suppressDeprecationWarning !== true\n        ) {\n          pendingComponentWillMountWarnings.push(fiber);\n        }\n\n        if (\n          fiber.mode & StrictLegacyMode &&\n          typeof instance.UNSAFE_componentWillMount === \"function\"\n        ) {\n          pendingUNSAFE_ComponentWillMountWarnings.push(fiber);\n        }\n\n        if (\n          typeof instance.componentWillReceiveProps === \"function\" &&\n          instance.componentWillReceiveProps.__suppressDeprecationWarning !==\n            true\n        ) {\n          pendingComponentWillReceivePropsWarnings.push(fiber);\n        }\n\n        if (\n          fiber.mode & StrictLegacyMode &&\n          typeof instance.UNSAFE_componentWillReceiveProps === \"function\"\n        ) {\n          pendingUNSAFE_ComponentWillReceivePropsWarnings.push(fiber);\n        }\n\n        if (\n          typeof instance.componentWillUpdate === \"function\" &&\n          instance.componentWillUpdate.__suppressDeprecationWarning !== true\n        ) {\n          pendingComponentWillUpdateWarnings.push(fiber);\n        }\n\n        if (\n          fiber.mode & StrictLegacyMode &&\n          typeof instance.UNSAFE_componentWillUpdate === \"function\"\n        ) {\n          pendingUNSAFE_ComponentWillUpdateWarnings.push(fiber);\n        }\n      };\n\n      ReactStrictModeWarnings.flushPendingUnsafeLifecycleWarnings =\n        function () {\n          // We do an initial pass to gather component names\n          var componentWillMountUniqueNames = new Set();\n\n          if (pendingComponentWillMountWarnings.length > 0) {\n            pendingComponentWillMountWarnings.forEach(function (fiber) {\n              componentWillMountUniqueNames.add(\n                getComponentNameFromFiber(fiber) || \"Component\"\n              );\n              didWarnAboutUnsafeLifecycles.add(fiber.type);\n            });\n            pendingComponentWillMountWarnings = [];\n          }\n\n          var UNSAFE_componentWillMountUniqueNames = new Set();\n\n          if (pendingUNSAFE_ComponentWillMountWarnings.length > 0) {\n            pendingUNSAFE_ComponentWillMountWarnings.forEach(function (fiber) {\n              UNSAFE_componentWillMountUniqueNames.add(\n                getComponentNameFromFiber(fiber) || \"Component\"\n              );\n              didWarnAboutUnsafeLifecycles.add(fiber.type);\n            });\n            pendingUNSAFE_ComponentWillMountWarnings = [];\n          }\n\n          var componentWillReceivePropsUniqueNames = new Set();\n\n          if (pendingComponentWillReceivePropsWarnings.length > 0) {\n            pendingComponentWillReceivePropsWarnings.forEach(function (fiber) {\n              componentWillReceivePropsUniqueNames.add(\n                getComponentNameFromFiber(fiber) || \"Component\"\n              );\n              didWarnAboutUnsafeLifecycles.add(fiber.type);\n            });\n            pendingComponentWillReceivePropsWarnings = [];\n          }\n\n          var UNSAFE_componentWillReceivePropsUniqueNames = new Set();\n\n          if (pendingUNSAFE_ComponentWillReceivePropsWarnings.length > 0) {\n            pendingUNSAFE_ComponentWillReceivePropsWarnings.forEach(\n              function (fiber) {\n                UNSAFE_componentWillReceivePropsUniqueNames.add(\n                  getComponentNameFromFiber(fiber) || \"Component\"\n                );\n                didWarnAboutUnsafeLifecycles.add(fiber.type);\n              }\n            );\n            pendingUNSAFE_ComponentWillReceivePropsWarnings = [];\n          }\n\n          var componentWillUpdateUniqueNames = new Set();\n\n          if (pendingComponentWillUpdateWarnings.length > 0) {\n            pendingComponentWillUpdateWarnings.forEach(function (fiber) {\n              componentWillUpdateUniqueNames.add(\n                getComponentNameFromFiber(fiber) || \"Component\"\n              );\n              didWarnAboutUnsafeLifecycles.add(fiber.type);\n            });\n            pendingComponentWillUpdateWarnings = [];\n          }\n\n          var UNSAFE_componentWillUpdateUniqueNames = new Set();\n\n          if (pendingUNSAFE_ComponentWillUpdateWarnings.length > 0) {\n            pendingUNSAFE_ComponentWillUpdateWarnings.forEach(function (fiber) {\n              UNSAFE_componentWillUpdateUniqueNames.add(\n                getComponentNameFromFiber(fiber) || \"Component\"\n              );\n              didWarnAboutUnsafeLifecycles.add(fiber.type);\n            });\n            pendingUNSAFE_ComponentWillUpdateWarnings = [];\n          } // Finally, we flush all the warnings\n          // UNSAFE_ ones before the deprecated ones, since they'll be 'louder'\n\n          if (UNSAFE_componentWillMountUniqueNames.size > 0) {\n            var sortedNames = setToSortedString(\n              UNSAFE_componentWillMountUniqueNames\n            );\n\n            error(\n              \"Using UNSAFE_componentWillMount in strict mode is not recommended and may indicate bugs in your code. \" +\n                \"See https://reactjs.org/link/unsafe-component-lifecycles for details.\\n\\n\" +\n                \"* Move code with side effects to componentDidMount, and set initial state in the constructor.\\n\" +\n                \"\\nPlease update the following components: %s\",\n              sortedNames\n            );\n          }\n\n          if (UNSAFE_componentWillReceivePropsUniqueNames.size > 0) {\n            var _sortedNames = setToSortedString(\n              UNSAFE_componentWillReceivePropsUniqueNames\n            );\n\n            error(\n              \"Using UNSAFE_componentWillReceiveProps in strict mode is not recommended \" +\n                \"and may indicate bugs in your code. \" +\n                \"See https://reactjs.org/link/unsafe-component-lifecycles for details.\\n\\n\" +\n                \"* Move data fetching code or side effects to componentDidUpdate.\\n\" +\n                \"* If you're updating state whenever props change, \" +\n                \"refactor your code to use memoization techniques or move it to \" +\n                \"static getDerivedStateFromProps. Learn more at: https://reactjs.org/link/derived-state\\n\" +\n                \"\\nPlease update the following components: %s\",\n              _sortedNames\n            );\n          }\n\n          if (UNSAFE_componentWillUpdateUniqueNames.size > 0) {\n            var _sortedNames2 = setToSortedString(\n              UNSAFE_componentWillUpdateUniqueNames\n            );\n\n            error(\n              \"Using UNSAFE_componentWillUpdate in strict mode is not recommended \" +\n                \"and may indicate bugs in your code. \" +\n                \"See https://reactjs.org/link/unsafe-component-lifecycles for details.\\n\\n\" +\n                \"* Move data fetching code or side effects to componentDidUpdate.\\n\" +\n                \"\\nPlease update the following components: %s\",\n              _sortedNames2\n            );\n          }\n\n          if (componentWillMountUniqueNames.size > 0) {\n            var _sortedNames3 = setToSortedString(\n              componentWillMountUniqueNames\n            );\n\n            warn(\n              \"componentWillMount has been renamed, and is not recommended for use. \" +\n                \"See https://reactjs.org/link/unsafe-component-lifecycles for details.\\n\\n\" +\n                \"* Move code with side effects to componentDidMount, and set initial state in the constructor.\\n\" +\n                \"* Rename componentWillMount to UNSAFE_componentWillMount to suppress \" +\n                \"this warning in non-strict mode. In React 18.x, only the UNSAFE_ name will work. \" +\n                \"To rename all deprecated lifecycles to their new names, you can run \" +\n                \"`npx react-codemod rename-unsafe-lifecycles` in your project source folder.\\n\" +\n                \"\\nPlease update the following components: %s\",\n              _sortedNames3\n            );\n          }\n\n          if (componentWillReceivePropsUniqueNames.size > 0) {\n            var _sortedNames4 = setToSortedString(\n              componentWillReceivePropsUniqueNames\n            );\n\n            warn(\n              \"componentWillReceiveProps has been renamed, and is not recommended for use. \" +\n                \"See https://reactjs.org/link/unsafe-component-lifecycles for details.\\n\\n\" +\n                \"* Move data fetching code or side effects to componentDidUpdate.\\n\" +\n                \"* If you're updating state whenever props change, refactor your \" +\n                \"code to use memoization techniques or move it to \" +\n                \"static getDerivedStateFromProps. Learn more at: https://reactjs.org/link/derived-state\\n\" +\n                \"* Rename componentWillReceiveProps to UNSAFE_componentWillReceiveProps to suppress \" +\n                \"this warning in non-strict mode. In React 18.x, only the UNSAFE_ name will work. \" +\n                \"To rename all deprecated lifecycles to their new names, you can run \" +\n                \"`npx react-codemod rename-unsafe-lifecycles` in your project source folder.\\n\" +\n                \"\\nPlease update the following components: %s\",\n              _sortedNames4\n            );\n          }\n\n          if (componentWillUpdateUniqueNames.size > 0) {\n            var _sortedNames5 = setToSortedString(\n              componentWillUpdateUniqueNames\n            );\n\n            warn(\n              \"componentWillUpdate has been renamed, and is not recommended for use. \" +\n                \"See https://reactjs.org/link/unsafe-component-lifecycles for details.\\n\\n\" +\n                \"* Move data fetching code or side effects to componentDidUpdate.\\n\" +\n                \"* Rename componentWillUpdate to UNSAFE_componentWillUpdate to suppress \" +\n                \"this warning in non-strict mode. In React 18.x, only the UNSAFE_ name will work. \" +\n                \"To rename all deprecated lifecycles to their new names, you can run \" +\n                \"`npx react-codemod rename-unsafe-lifecycles` in your project source folder.\\n\" +\n                \"\\nPlease update the following components: %s\",\n              _sortedNames5\n            );\n          }\n        };\n\n      var pendingLegacyContextWarning = new Map(); // Tracks components we have already warned about.\n\n      var didWarnAboutLegacyContext = new Set();\n\n      ReactStrictModeWarnings.recordLegacyContextWarning = function (\n        fiber,\n        instance\n      ) {\n        var strictRoot = findStrictRoot(fiber);\n\n        if (strictRoot === null) {\n          error(\n            \"Expected to find a StrictMode component in a strict mode tree. \" +\n              \"This error is likely caused by a bug in React. Please file an issue.\"\n          );\n\n          return;\n        } // Dedup strategy: Warn once per component.\n\n        if (didWarnAboutLegacyContext.has(fiber.type)) {\n          return;\n        }\n\n        var warningsForRoot = pendingLegacyContextWarning.get(strictRoot);\n\n        if (\n          fiber.type.contextTypes != null ||\n          fiber.type.childContextTypes != null ||\n          (instance !== null && typeof instance.getChildContext === \"function\")\n        ) {\n          if (warningsForRoot === undefined) {\n            warningsForRoot = [];\n            pendingLegacyContextWarning.set(strictRoot, warningsForRoot);\n          }\n\n          warningsForRoot.push(fiber);\n        }\n      };\n\n      ReactStrictModeWarnings.flushLegacyContextWarning = function () {\n        pendingLegacyContextWarning.forEach(function (fiberArray, strictRoot) {\n          if (fiberArray.length === 0) {\n            return;\n          }\n\n          var firstFiber = fiberArray[0];\n          var uniqueNames = new Set();\n          fiberArray.forEach(function (fiber) {\n            uniqueNames.add(getComponentNameFromFiber(fiber) || \"Component\");\n            didWarnAboutLegacyContext.add(fiber.type);\n          });\n          var sortedNames = setToSortedString(uniqueNames);\n\n          try {\n            setCurrentFiber(firstFiber);\n\n            error(\n              \"Legacy context API has been detected within a strict-mode tree.\" +\n                \"\\n\\nThe old API will be supported in all 16.x releases, but applications \" +\n                \"using it should migrate to the new version.\" +\n                \"\\n\\nPlease update the following components: %s\" +\n                \"\\n\\nLearn more about this warning here: https://reactjs.org/link/legacy-context\",\n              sortedNames\n            );\n          } finally {\n            resetCurrentFiber();\n          }\n        });\n      };\n\n      ReactStrictModeWarnings.discardPendingWarnings = function () {\n        pendingComponentWillMountWarnings = [];\n        pendingUNSAFE_ComponentWillMountWarnings = [];\n        pendingComponentWillReceivePropsWarnings = [];\n        pendingUNSAFE_ComponentWillReceivePropsWarnings = [];\n        pendingComponentWillUpdateWarnings = [];\n        pendingUNSAFE_ComponentWillUpdateWarnings = [];\n        pendingLegacyContextWarning = new Map();\n      };\n    }\n\n    /*\n     * The `'' + value` pattern (used in perf-sensitive code) throws for Symbol\n     * and Temporal.* types. See https://github.com/facebook/react/pull/22064.\n     *\n     * The functions in this module will throw an easier-to-understand,\n     * easier-to-debug exception with a clear errors message message explaining the\n     * problem. (Instead of a confusing exception thrown inside the implementation\n     * of the `value` object).\n     */\n    // $FlowFixMe[incompatible-return] only called in DEV, so void return is not possible.\n    function typeName(value) {\n      {\n        // toStringTag is needed for namespaced types like Temporal.Instant\n        var hasToStringTag = typeof Symbol === \"function\" && Symbol.toStringTag;\n        var type =\n          (hasToStringTag && value[Symbol.toStringTag]) ||\n          value.constructor.name ||\n          \"Object\"; // $FlowFixMe[incompatible-return]\n\n        return type;\n      }\n    } // $FlowFixMe[incompatible-return] only called in DEV, so void return is not possible.\n\n    function willCoercionThrow(value) {\n      {\n        try {\n          testStringCoercion(value);\n          return false;\n        } catch (e) {\n          return true;\n        }\n      }\n    }\n\n    function testStringCoercion(value) {\n      // If you ended up here by following an exception call stack, here's what's\n      // happened: you supplied an object or symbol value to React (as a prop, key,\n      // DOM attribute, CSS property, string ref, etc.) and when React tried to\n      // coerce it to a string using `'' + value`, an exception was thrown.\n      //\n      // The most common types that will cause this exception are `Symbol` instances\n      // and Temporal objects like `Temporal.Instant`. But any object that has a\n      // `valueOf` or `[Symbol.toPrimitive]` method that throws will also cause this\n      // exception. (Library authors do this to prevent users from using built-in\n      // numeric operators like `+` or comparison operators like `>=` because custom\n      // methods are needed to perform accurate arithmetic or comparison.)\n      //\n      // To fix the problem, coerce this object or symbol value to a string before\n      // passing it to React. The most reliable way is usually `String(value)`.\n      //\n      // To find which value is throwing, check the browser or debugger console.\n      // Before this exception was thrown, there should be `console.error` output\n      // that shows the type (Symbol, Temporal.PlainDate, etc.) that caused the\n      // problem and how that type was used: key, atrribute, input value prop, etc.\n      // In most cases, this console output also shows the component and its\n      // ancestor components where the exception happened.\n      //\n      // eslint-disable-next-line react-internal/safe-string-coercion\n      return \"\" + value;\n    }\n    function checkKeyStringCoercion(value) {\n      {\n        if (willCoercionThrow(value)) {\n          error(\n            \"The provided key is an unsupported type %s.\" +\n              \" This value must be coerced to a string before using it here.\",\n            typeName(value)\n          );\n\n          return testStringCoercion(value); // throw (to help callers find troubleshooting comments)\n        }\n      }\n    }\n    function checkPropStringCoercion(value, propName) {\n      {\n        if (willCoercionThrow(value)) {\n          error(\n            \"The provided `%s` prop is an unsupported type %s.\" +\n              \" This value must be coerced to a string before using it here.\",\n            propName,\n            typeName(value)\n          );\n\n          return testStringCoercion(value); // throw (to help callers find troubleshooting comments)\n        }\n      }\n    }\n\n    var ReactCurrentActQueue$2 = ReactSharedInternals.ReactCurrentActQueue;\n\n    function getThenablesFromState(state) {\n      {\n        var devState = state;\n        return devState.thenables;\n      }\n    } // An error that is thrown (e.g. by `use`) to trigger Suspense. If we\n    // detect this is caught by userspace, we'll log a warning in development.\n\n    var SuspenseException = new Error(\n      \"Suspense Exception: This is not a real error! It's an implementation \" +\n        \"detail of `use` to interrupt the current render. You must either \" +\n        \"rethrow it immediately, or move the `use` call outside of the \" +\n        \"`try/catch` block. Capturing without rethrowing will lead to \" +\n        \"unexpected behavior.\\n\\n\" +\n        \"To handle async errors, wrap your component in an error boundary, or \" +\n        \"call the promise's `.catch` method and pass the result to `use`\"\n    );\n    var SuspenseyCommitException = new Error(\n      \"Suspense Exception: This is not a real error, and should not leak into \" +\n        \"userspace. If you're seeing this, it's likely a bug in React.\"\n    ); // This is a noop thenable that we use to trigger a fallback in throwException.\n    // TODO: It would be better to refactor throwException into multiple functions\n    // so we can trigger a fallback directly without having to check the type. But\n    // for now this will do.\n\n    var noopSuspenseyCommitThenable = {\n      then: function () {\n        {\n          error(\n            \"Internal React error: A listener was unexpectedly attached to a \" +\n              '\"noop\" thenable. This is a bug in React. Please file an issue.'\n          );\n        }\n      }\n    };\n    function createThenableState() {\n      // The ThenableState is created the first time a component suspends. If it\n      // suspends again, we'll reuse the same state.\n      {\n        return {\n          didWarnAboutUncachedPromise: false,\n          thenables: []\n        };\n      }\n    }\n    function isThenableResolved(thenable) {\n      var status = thenable.status;\n      return status === \"fulfilled\" || status === \"rejected\";\n    }\n\n    function noop() {}\n\n    function trackUsedThenable(thenableState, thenable, index) {\n      if (ReactCurrentActQueue$2.current !== null) {\n        ReactCurrentActQueue$2.didUsePromise = true;\n      }\n\n      var trackedThenables = getThenablesFromState(thenableState);\n      var previous = trackedThenables[index];\n\n      if (previous === undefined) {\n        trackedThenables.push(thenable);\n      } else {\n        if (previous !== thenable) {\n          // Reuse the previous thenable, and drop the new one. We can assume\n          // they represent the same value, because components are idempotent.\n          {\n            var thenableStateDev = thenableState;\n\n            if (!thenableStateDev.didWarnAboutUncachedPromise) {\n              // We should only warn the first time an uncached thenable is\n              // discovered per component, because if there are multiple, the\n              // subsequent ones are likely derived from the first.\n              //\n              // We track this on the thenableState instead of deduping using the\n              // component name like we usually do, because in the case of a\n              // promise-as-React-node, the owner component is likely different from\n              // the parent that's currently being reconciled. We'd have to track\n              // the owner using state, which we're trying to move away from. Though\n              // since this is dev-only, maybe that'd be OK.\n              //\n              // However, another benefit of doing it this way is we might\n              // eventually have a thenableState per memo/Forget boundary instead\n              // of per component, so this would allow us to have more\n              // granular warnings.\n              thenableStateDev.didWarnAboutUncachedPromise = true; // TODO: This warning should link to a corresponding docs page.\n\n              error(\n                \"A component was suspended by an uncached promise. Creating \" +\n                  \"promises inside a Client Component or hook is not yet \" +\n                  \"supported, except via a Suspense-compatible library or framework.\"\n              );\n            }\n          } // Avoid an unhandled rejection errors for the Promises that we'll\n          // intentionally ignore.\n\n          thenable.then(noop, noop);\n          thenable = previous;\n        }\n      } // We use an expando to track the status and result of a thenable so that we\n      // can synchronously unwrap the value. Think of this as an extension of the\n      // Promise API, or a custom interface that is a superset of Thenable.\n      //\n      // If the thenable doesn't have a status, set it to \"pending\" and attach\n      // a listener that will update its status and result when it resolves.\n\n      switch (thenable.status) {\n        case \"fulfilled\": {\n          var fulfilledValue = thenable.value;\n          return fulfilledValue;\n        }\n\n        case \"rejected\": {\n          var rejectedError = thenable.reason;\n          checkIfUseWrappedInAsyncCatch(rejectedError);\n          throw rejectedError;\n        }\n\n        default: {\n          if (typeof thenable.status === \"string\") {\n            // Only instrument the thenable if the status if not defined. If\n            // it's defined, but an unknown value, assume it's been instrumented by\n            // some custom userspace implementation. We treat it as \"pending\".\n            // Attach a dummy listener, to ensure that any lazy initialization can\n            // happen. Flight lazily parses JSON when the value is actually awaited.\n            thenable.then(noop, noop);\n          } else {\n            // This is an uncached thenable that we haven't seen before.\n            // Detect infinite ping loops caused by uncached promises.\n            var root = getWorkInProgressRoot();\n\n            if (root !== null && root.shellSuspendCounter > 100) {\n              // This root has suspended repeatedly in the shell without making any\n              // progress (i.e. committing something). This is highly suggestive of\n              // an infinite ping loop, often caused by an accidental Async Client\n              // Component.\n              //\n              // During a transition, we can suspend the work loop until the promise\n              // to resolve, but this is a sync render, so that's not an option. We\n              // also can't show a fallback, because none was provided. So our last\n              // resort is to throw an error.\n              //\n              // TODO: Remove this error in a future release. Other ways of handling\n              // this case include forcing a concurrent render, or putting the whole\n              // root into offscreen mode.\n              throw new Error(\n                \"async/await is not yet supported in Client Components, only \" +\n                  \"Server Components. This error is often caused by accidentally \" +\n                  \"adding `'use client'` to a module that was originally written \" +\n                  \"for the server.\"\n              );\n            }\n\n            var pendingThenable = thenable;\n            pendingThenable.status = \"pending\";\n            pendingThenable.then(\n              function (fulfilledValue) {\n                if (thenable.status === \"pending\") {\n                  var fulfilledThenable = thenable;\n                  fulfilledThenable.status = \"fulfilled\";\n                  fulfilledThenable.value = fulfilledValue;\n                }\n              },\n              function (error) {\n                if (thenable.status === \"pending\") {\n                  var rejectedThenable = thenable;\n                  rejectedThenable.status = \"rejected\";\n                  rejectedThenable.reason = error;\n                }\n              }\n            ); // Check one more time in case the thenable resolved synchronously.\n\n            switch (thenable.status) {\n              case \"fulfilled\": {\n                var fulfilledThenable = thenable;\n                return fulfilledThenable.value;\n              }\n\n              case \"rejected\": {\n                var rejectedThenable = thenable;\n                var _rejectedError = rejectedThenable.reason;\n                checkIfUseWrappedInAsyncCatch(_rejectedError);\n                throw _rejectedError;\n              }\n            }\n          } // Suspend.\n          //\n          // Throwing here is an implementation detail that allows us to unwind the\n          // call stack. But we shouldn't allow it to leak into userspace. Throw an\n          // opaque placeholder value instead of the actual thenable. If it doesn't\n          // get captured by the work loop, log a warning, because that means\n          // something in userspace must have caught it.\n\n          suspendedThenable = thenable;\n\n          {\n            needsToResetSuspendedThenableDEV = true;\n          }\n\n          throw SuspenseException;\n        }\n      }\n    }\n    // passed to the rest of the Suspense implementation — which, for historical\n    // reasons, expects to receive a thenable.\n\n    var suspendedThenable = null;\n    var needsToResetSuspendedThenableDEV = false;\n    function getSuspendedThenable() {\n      // This is called right after `use` suspends by throwing an exception. `use`\n      // throws an opaque value instead of the thenable itself so that it can't be\n      // caught in userspace. Then the work loop accesses the actual thenable using\n      // this function.\n      if (suspendedThenable === null) {\n        throw new Error(\n          \"Expected a suspended thenable. This is a bug in React. Please file \" +\n            \"an issue.\"\n        );\n      }\n\n      var thenable = suspendedThenable;\n      suspendedThenable = null;\n\n      {\n        needsToResetSuspendedThenableDEV = false;\n      }\n\n      return thenable;\n    }\n    function checkIfUseWrappedInTryCatch() {\n      {\n        // This was set right before SuspenseException was thrown, and it should\n        // have been cleared when the exception was handled. If it wasn't,\n        // it must have been caught by userspace.\n        if (needsToResetSuspendedThenableDEV) {\n          needsToResetSuspendedThenableDEV = false;\n          return true;\n        }\n      }\n\n      return false;\n    }\n    function checkIfUseWrappedInAsyncCatch(rejectedReason) {\n      // This check runs in prod, too, because it prevents a more confusing\n      // downstream error, where SuspenseException is caught by a promise and\n      // thrown asynchronously.\n      // TODO: Another way to prevent SuspenseException from leaking into an async\n      // execution context is to check the dispatcher every time `use` is called,\n      // or some equivalent. That might be preferable for other reasons, too, since\n      // it matches how we prevent similar mistakes for other hooks.\n      if (rejectedReason === SuspenseException) {\n        throw new Error(\n          \"Hooks are not supported inside an async component. This \" +\n            \"error is often caused by accidentally adding `'use client'` \" +\n            \"to a module that was originally written for the server.\"\n        );\n      }\n    }\n\n    var thenableState$1 = null;\n    var thenableIndexCounter$1 = 0;\n    var didWarnAboutMaps;\n    var didWarnAboutGenerators;\n    var didWarnAboutStringRefs;\n    var ownerHasKeyUseWarning;\n    var ownerHasFunctionTypeWarning;\n\n    var warnForMissingKey = function (child, returnFiber) {};\n\n    {\n      didWarnAboutMaps = false;\n      didWarnAboutGenerators = false;\n      didWarnAboutStringRefs = {};\n      /**\n       * Warn if there's no key explicitly set on dynamic arrays of children or\n       * object keys are not valid. This allows us to keep track of children between\n       * updates.\n       */\n\n      ownerHasKeyUseWarning = {};\n      ownerHasFunctionTypeWarning = {};\n\n      warnForMissingKey = function (child, returnFiber) {\n        if (child === null || typeof child !== \"object\") {\n          return;\n        }\n\n        if (!child._store || child._store.validated || child.key != null) {\n          return;\n        }\n\n        if (typeof child._store !== \"object\") {\n          throw new Error(\n            \"React Component in warnForMissingKey should have a _store. \" +\n              \"This error is likely caused by a bug in React. Please file an issue.\"\n          );\n        } // $FlowFixMe[cannot-write] unable to narrow type from mixed to writable object\n\n        child._store.validated = true;\n        var componentName =\n          getComponentNameFromFiber(returnFiber) || \"Component\";\n\n        if (ownerHasKeyUseWarning[componentName]) {\n          return;\n        }\n\n        ownerHasKeyUseWarning[componentName] = true;\n\n        error(\n          \"Each child in a list should have a unique \" +\n            '\"key\" prop. See https://reactjs.org/link/warning-keys for ' +\n            \"more information.\"\n        );\n      };\n    }\n\n    function isReactClass(type) {\n      return type.prototype && type.prototype.isReactComponent;\n    }\n\n    function unwrapThenable(thenable) {\n      var index = thenableIndexCounter$1;\n      thenableIndexCounter$1 += 1;\n\n      if (thenableState$1 === null) {\n        thenableState$1 = createThenableState();\n      }\n\n      return trackUsedThenable(thenableState$1, thenable, index);\n    }\n\n    function coerceRef(returnFiber, current, element) {\n      var mixedRef = element.ref;\n\n      if (\n        mixedRef !== null &&\n        typeof mixedRef !== \"function\" &&\n        typeof mixedRef !== \"object\"\n      ) {\n        {\n          if (\n            // Will already throw with \"Function components cannot have string refs\"\n            !(element._owner && element._owner.tag !== ClassComponent) && // Will already warn with \"Function components cannot be given refs\"\n            !(\n              typeof element.type === \"function\" && !isReactClass(element.type)\n            ) && // Will already throw with \"Element ref was specified as a string (someStringRef) but no owner was set\"\n            element._owner\n          ) {\n            var componentName =\n              getComponentNameFromFiber(returnFiber) || \"Component\";\n\n            if (!didWarnAboutStringRefs[componentName]) {\n              error(\n                'Component \"%s\" contains the string ref \"%s\". Support for string refs ' +\n                  \"will be removed in a future major release. We recommend using \" +\n                  \"useRef() or createRef() instead. \" +\n                  \"Learn more about using refs safely here: \" +\n                  \"https://reactjs.org/link/strict-mode-string-ref\",\n                componentName,\n                mixedRef\n              );\n\n              didWarnAboutStringRefs[componentName] = true;\n            }\n          }\n        }\n\n        if (element._owner) {\n          var owner = element._owner;\n          var inst;\n\n          if (owner) {\n            var ownerFiber = owner;\n\n            if (ownerFiber.tag !== ClassComponent) {\n              throw new Error(\n                \"Function components cannot have string refs. \" +\n                  \"We recommend using useRef() instead. \" +\n                  \"Learn more about using refs safely here: \" +\n                  \"https://reactjs.org/link/strict-mode-string-ref\"\n              );\n            }\n\n            inst = ownerFiber.stateNode;\n          }\n\n          if (!inst) {\n            throw new Error(\n              \"Missing owner for string ref \" +\n                mixedRef +\n                \". This error is likely caused by a \" +\n                \"bug in React. Please file an issue.\"\n            );\n          } // Assigning this to a const so Flow knows it won't change in the closure\n\n          var resolvedInst = inst;\n\n          {\n            checkPropStringCoercion(mixedRef, \"ref\");\n          }\n\n          var stringRef = \"\" + mixedRef; // Check if previous string ref matches new string ref\n\n          if (\n            current !== null &&\n            current.ref !== null &&\n            typeof current.ref === \"function\" &&\n            current.ref._stringRef === stringRef\n          ) {\n            return current.ref;\n          }\n\n          var ref = function (value) {\n            var refs = resolvedInst.refs;\n\n            if (value === null) {\n              delete refs[stringRef];\n            } else {\n              refs[stringRef] = value;\n            }\n          };\n\n          ref._stringRef = stringRef;\n          return ref;\n        } else {\n          if (typeof mixedRef !== \"string\") {\n            throw new Error(\n              \"Expected ref to be a function, a string, an object returned by React.createRef(), or null.\"\n            );\n          }\n\n          if (!element._owner) {\n            throw new Error(\n              \"Element ref was specified as a string (\" +\n                mixedRef +\n                \") but no owner was set. This could happen for one of\" +\n                \" the following reasons:\\n\" +\n                \"1. You may be adding a ref to a function component\\n\" +\n                \"2. You may be adding a ref to a component that was not created inside a component's render method\\n\" +\n                \"3. You have multiple copies of React loaded\\n\" +\n                \"See https://reactjs.org/link/refs-must-have-owner for more information.\"\n            );\n          }\n        }\n      }\n\n      return mixedRef;\n    }\n\n    function throwOnInvalidObjectType(returnFiber, newChild) {\n      // $FlowFixMe[method-unbinding]\n      var childString = Object.prototype.toString.call(newChild);\n      throw new Error(\n        \"Objects are not valid as a React child (found: \" +\n          (childString === \"[object Object]\"\n            ? \"object with keys {\" + Object.keys(newChild).join(\", \") + \"}\"\n            : childString) +\n          \"). \" +\n          \"If you meant to render a collection of children, use an array \" +\n          \"instead.\"\n      );\n    }\n\n    function warnOnFunctionType(returnFiber) {\n      {\n        var componentName =\n          getComponentNameFromFiber(returnFiber) || \"Component\";\n\n        if (ownerHasFunctionTypeWarning[componentName]) {\n          return;\n        }\n\n        ownerHasFunctionTypeWarning[componentName] = true;\n\n        error(\n          \"Functions are not valid as a React child. This may happen if \" +\n            \"you return a Component instead of <Component /> from render. \" +\n            \"Or maybe you meant to call this function rather than return it.\"\n        );\n      }\n    }\n\n    function resolveLazy(lazyType) {\n      var payload = lazyType._payload;\n      var init = lazyType._init;\n      return init(payload);\n    } // This wrapper function exists because I expect to clone the code in each path\n    // to be able to optimize each path individually by branching early. This needs\n    // a compiler or we can do it manually. Helpers that don't need this branching\n    // live outside of this function.\n\n    function createChildReconciler(shouldTrackSideEffects) {\n      function deleteChild(returnFiber, childToDelete) {\n        if (!shouldTrackSideEffects) {\n          // Noop.\n          return;\n        }\n\n        var deletions = returnFiber.deletions;\n\n        if (deletions === null) {\n          returnFiber.deletions = [childToDelete];\n          returnFiber.flags |= ChildDeletion;\n        } else {\n          deletions.push(childToDelete);\n        }\n      }\n\n      function deleteRemainingChildren(returnFiber, currentFirstChild) {\n        if (!shouldTrackSideEffects) {\n          // Noop.\n          return null;\n        } // TODO: For the shouldClone case, this could be micro-optimized a bit by\n        // assuming that after the first child we've already added everything.\n\n        var childToDelete = currentFirstChild;\n\n        while (childToDelete !== null) {\n          deleteChild(returnFiber, childToDelete);\n          childToDelete = childToDelete.sibling;\n        }\n\n        return null;\n      }\n\n      function mapRemainingChildren(returnFiber, currentFirstChild) {\n        // Add the remaining children to a temporary map so that we can find them by\n        // keys quickly. Implicit (null) keys get added to this set with their index\n        // instead.\n        var existingChildren = new Map();\n        var existingChild = currentFirstChild;\n\n        while (existingChild !== null) {\n          if (existingChild.key !== null) {\n            existingChildren.set(existingChild.key, existingChild);\n          } else {\n            existingChildren.set(existingChild.index, existingChild);\n          }\n\n          existingChild = existingChild.sibling;\n        }\n\n        return existingChildren;\n      }\n\n      function useFiber(fiber, pendingProps) {\n        // We currently set sibling to null and index to 0 here because it is easy\n        // to forget to do before returning it. E.g. for the single child case.\n        var clone = createWorkInProgress(fiber, pendingProps);\n        clone.index = 0;\n        clone.sibling = null;\n        return clone;\n      }\n\n      function placeChild(newFiber, lastPlacedIndex, newIndex) {\n        newFiber.index = newIndex;\n\n        if (!shouldTrackSideEffects) {\n          // During hydration, the useId algorithm needs to know which fibers are\n          // part of a list of children (arrays, iterators).\n          newFiber.flags |= Forked;\n          return lastPlacedIndex;\n        }\n\n        var current = newFiber.alternate;\n\n        if (current !== null) {\n          var oldIndex = current.index;\n\n          if (oldIndex < lastPlacedIndex) {\n            // This is a move.\n            newFiber.flags |= Placement | PlacementDEV;\n            return lastPlacedIndex;\n          } else {\n            // This item can stay in place.\n            return oldIndex;\n          }\n        } else {\n          // This is an insertion.\n          newFiber.flags |= Placement | PlacementDEV;\n          return lastPlacedIndex;\n        }\n      }\n\n      function placeSingleChild(newFiber) {\n        // This is simpler for the single child case. We only need to do a\n        // placement for inserting new children.\n        if (shouldTrackSideEffects && newFiber.alternate === null) {\n          newFiber.flags |= Placement | PlacementDEV;\n        }\n\n        return newFiber;\n      }\n\n      function updateTextNode(returnFiber, current, textContent, lanes) {\n        if (current === null || current.tag !== HostText) {\n          // Insert\n          var created = createFiberFromText(\n            textContent,\n            returnFiber.mode,\n            lanes\n          );\n          created.return = returnFiber;\n          return created;\n        } else {\n          // Update\n          var existing = useFiber(current, textContent);\n          existing.return = returnFiber;\n          return existing;\n        }\n      }\n\n      function updateElement(returnFiber, current, element, lanes) {\n        var elementType = element.type;\n\n        if (elementType === REACT_FRAGMENT_TYPE) {\n          return updateFragment(\n            returnFiber,\n            current,\n            element.props.children,\n            lanes,\n            element.key\n          );\n        }\n\n        if (current !== null) {\n          if (\n            current.elementType === elementType || // Keep this check inline so it only runs on the false path:\n            isCompatibleFamilyForHotReloading(current, element) || // Lazy types should reconcile their resolved type.\n            // We need to do this after the Hot Reloading check above,\n            // because hot reloading has different semantics than prod because\n            // it doesn't resuspend. So we can't let the call below suspend.\n            (typeof elementType === \"object\" &&\n              elementType !== null &&\n              elementType.$$typeof === REACT_LAZY_TYPE &&\n              resolveLazy(elementType) === current.type)\n          ) {\n            // Move based on index\n            var existing = useFiber(current, element.props);\n            existing.ref = coerceRef(returnFiber, current, element);\n            existing.return = returnFiber;\n\n            {\n              existing._debugOwner = element._owner;\n            }\n\n            return existing;\n          }\n        } // Insert\n\n        var created = createFiberFromElement(element, returnFiber.mode, lanes);\n        created.ref = coerceRef(returnFiber, current, element);\n        created.return = returnFiber;\n        return created;\n      }\n\n      function updatePortal(returnFiber, current, portal, lanes) {\n        if (\n          current === null ||\n          current.tag !== HostPortal ||\n          current.stateNode.containerInfo !== portal.containerInfo ||\n          current.stateNode.implementation !== portal.implementation\n        ) {\n          // Insert\n          var created = createFiberFromPortal(portal, returnFiber.mode, lanes);\n          created.return = returnFiber;\n          return created;\n        } else {\n          // Update\n          var existing = useFiber(current, portal.children || []);\n          existing.return = returnFiber;\n          return existing;\n        }\n      }\n\n      function updateFragment(returnFiber, current, fragment, lanes, key) {\n        if (current === null || current.tag !== Fragment) {\n          // Insert\n          var created = createFiberFromFragment(\n            fragment,\n            returnFiber.mode,\n            lanes,\n            key\n          );\n          created.return = returnFiber;\n          return created;\n        } else {\n          // Update\n          var existing = useFiber(current, fragment);\n          existing.return = returnFiber;\n          return existing;\n        }\n      }\n\n      function createChild(returnFiber, newChild, lanes) {\n        if (\n          (typeof newChild === \"string\" && newChild !== \"\") ||\n          typeof newChild === \"number\"\n        ) {\n          // Text nodes don't have keys. If the previous node is implicitly keyed\n          // we can continue to replace it without aborting even if it is not a text\n          // node.\n          var created = createFiberFromText(\n            \"\" + newChild,\n            returnFiber.mode,\n            lanes\n          );\n          created.return = returnFiber;\n          return created;\n        }\n\n        if (typeof newChild === \"object\" && newChild !== null) {\n          switch (newChild.$$typeof) {\n            case REACT_ELEMENT_TYPE: {\n              var _created = createFiberFromElement(\n                newChild,\n                returnFiber.mode,\n                lanes\n              );\n\n              _created.ref = coerceRef(returnFiber, null, newChild);\n              _created.return = returnFiber;\n              return _created;\n            }\n\n            case REACT_PORTAL_TYPE: {\n              var _created2 = createFiberFromPortal(\n                newChild,\n                returnFiber.mode,\n                lanes\n              );\n\n              _created2.return = returnFiber;\n              return _created2;\n            }\n\n            case REACT_LAZY_TYPE: {\n              var payload = newChild._payload;\n              var init = newChild._init;\n              return createChild(returnFiber, init(payload), lanes);\n            }\n          }\n\n          if (isArray(newChild) || getIteratorFn(newChild)) {\n            var _created3 = createFiberFromFragment(\n              newChild,\n              returnFiber.mode,\n              lanes,\n              null\n            );\n\n            _created3.return = returnFiber;\n            return _created3;\n          } // Usable node types\n          //\n          // Unwrap the inner value and recursively call this function again.\n\n          if (typeof newChild.then === \"function\") {\n            var thenable = newChild;\n            return createChild(returnFiber, unwrapThenable(thenable), lanes);\n          }\n\n          if (newChild.$$typeof === REACT_CONTEXT_TYPE) {\n            var context = newChild;\n            return createChild(\n              returnFiber,\n              readContextDuringReconcilation(returnFiber, context, lanes),\n              lanes\n            );\n          }\n\n          throwOnInvalidObjectType(returnFiber, newChild);\n        }\n\n        {\n          if (typeof newChild === \"function\") {\n            warnOnFunctionType(returnFiber);\n          }\n        }\n\n        return null;\n      }\n\n      function updateSlot(returnFiber, oldFiber, newChild, lanes) {\n        // Update the fiber if the keys match, otherwise return null.\n        var key = oldFiber !== null ? oldFiber.key : null;\n\n        if (\n          (typeof newChild === \"string\" && newChild !== \"\") ||\n          typeof newChild === \"number\"\n        ) {\n          // Text nodes don't have keys. If the previous node is implicitly keyed\n          // we can continue to replace it without aborting even if it is not a text\n          // node.\n          if (key !== null) {\n            return null;\n          }\n\n          return updateTextNode(returnFiber, oldFiber, \"\" + newChild, lanes);\n        }\n\n        if (typeof newChild === \"object\" && newChild !== null) {\n          switch (newChild.$$typeof) {\n            case REACT_ELEMENT_TYPE: {\n              if (newChild.key === key) {\n                return updateElement(returnFiber, oldFiber, newChild, lanes);\n              } else {\n                return null;\n              }\n            }\n\n            case REACT_PORTAL_TYPE: {\n              if (newChild.key === key) {\n                return updatePortal(returnFiber, oldFiber, newChild, lanes);\n              } else {\n                return null;\n              }\n            }\n\n            case REACT_LAZY_TYPE: {\n              var payload = newChild._payload;\n              var init = newChild._init;\n              return updateSlot(returnFiber, oldFiber, init(payload), lanes);\n            }\n          }\n\n          if (isArray(newChild) || getIteratorFn(newChild)) {\n            if (key !== null) {\n              return null;\n            }\n\n            return updateFragment(returnFiber, oldFiber, newChild, lanes, null);\n          } // Usable node types\n          //\n          // Unwrap the inner value and recursively call this function again.\n\n          if (typeof newChild.then === \"function\") {\n            var thenable = newChild;\n            return updateSlot(\n              returnFiber,\n              oldFiber,\n              unwrapThenable(thenable),\n              lanes\n            );\n          }\n\n          if (newChild.$$typeof === REACT_CONTEXT_TYPE) {\n            var context = newChild;\n            return updateSlot(\n              returnFiber,\n              oldFiber,\n              readContextDuringReconcilation(returnFiber, context, lanes),\n              lanes\n            );\n          }\n\n          throwOnInvalidObjectType(returnFiber, newChild);\n        }\n\n        {\n          if (typeof newChild === \"function\") {\n            warnOnFunctionType(returnFiber);\n          }\n        }\n\n        return null;\n      }\n\n      function updateFromMap(\n        existingChildren,\n        returnFiber,\n        newIdx,\n        newChild,\n        lanes\n      ) {\n        if (\n          (typeof newChild === \"string\" && newChild !== \"\") ||\n          typeof newChild === \"number\"\n        ) {\n          // Text nodes don't have keys, so we neither have to check the old nor\n          // new node for the key. If both are text nodes, they match.\n          var matchedFiber = existingChildren.get(newIdx) || null;\n          return updateTextNode(\n            returnFiber,\n            matchedFiber,\n            \"\" + newChild,\n            lanes\n          );\n        }\n\n        if (typeof newChild === \"object\" && newChild !== null) {\n          switch (newChild.$$typeof) {\n            case REACT_ELEMENT_TYPE: {\n              var _matchedFiber =\n                existingChildren.get(\n                  newChild.key === null ? newIdx : newChild.key\n                ) || null;\n\n              return updateElement(returnFiber, _matchedFiber, newChild, lanes);\n            }\n\n            case REACT_PORTAL_TYPE: {\n              var _matchedFiber2 =\n                existingChildren.get(\n                  newChild.key === null ? newIdx : newChild.key\n                ) || null;\n\n              return updatePortal(returnFiber, _matchedFiber2, newChild, lanes);\n            }\n\n            case REACT_LAZY_TYPE:\n              var payload = newChild._payload;\n              var init = newChild._init;\n              return updateFromMap(\n                existingChildren,\n                returnFiber,\n                newIdx,\n                init(payload),\n                lanes\n              );\n          }\n\n          if (isArray(newChild) || getIteratorFn(newChild)) {\n            var _matchedFiber3 = existingChildren.get(newIdx) || null;\n\n            return updateFragment(\n              returnFiber,\n              _matchedFiber3,\n              newChild,\n              lanes,\n              null\n            );\n          } // Usable node types\n          //\n          // Unwrap the inner value and recursively call this function again.\n\n          if (typeof newChild.then === \"function\") {\n            var thenable = newChild;\n            return updateFromMap(\n              existingChildren,\n              returnFiber,\n              newIdx,\n              unwrapThenable(thenable),\n              lanes\n            );\n          }\n\n          if (newChild.$$typeof === REACT_CONTEXT_TYPE) {\n            var context = newChild;\n            return updateFromMap(\n              existingChildren,\n              returnFiber,\n              newIdx,\n              readContextDuringReconcilation(returnFiber, context, lanes),\n              lanes\n            );\n          }\n\n          throwOnInvalidObjectType(returnFiber, newChild);\n        }\n\n        {\n          if (typeof newChild === \"function\") {\n            warnOnFunctionType(returnFiber);\n          }\n        }\n\n        return null;\n      }\n      /**\n       * Warns if there is a duplicate or missing key\n       */\n\n      function warnOnInvalidKey(child, knownKeys, returnFiber) {\n        {\n          if (typeof child !== \"object\" || child === null) {\n            return knownKeys;\n          }\n\n          switch (child.$$typeof) {\n            case REACT_ELEMENT_TYPE:\n            case REACT_PORTAL_TYPE:\n              warnForMissingKey(child, returnFiber);\n              var key = child.key;\n\n              if (typeof key !== \"string\") {\n                break;\n              }\n\n              if (knownKeys === null) {\n                knownKeys = new Set();\n                knownKeys.add(key);\n                break;\n              }\n\n              if (!knownKeys.has(key)) {\n                knownKeys.add(key);\n                break;\n              }\n\n              error(\n                \"Encountered two children with the same key, `%s`. \" +\n                  \"Keys should be unique so that components maintain their identity \" +\n                  \"across updates. Non-unique keys may cause children to be \" +\n                  \"duplicated and/or omitted — the behavior is unsupported and \" +\n                  \"could change in a future version.\",\n                key\n              );\n\n              break;\n\n            case REACT_LAZY_TYPE:\n              var payload = child._payload;\n              var init = child._init;\n              warnOnInvalidKey(init(payload), knownKeys, returnFiber);\n              break;\n          }\n        }\n\n        return knownKeys;\n      }\n\n      function reconcileChildrenArray(\n        returnFiber,\n        currentFirstChild,\n        newChildren,\n        lanes\n      ) {\n        // This algorithm can't optimize by searching from both ends since we\n        // don't have backpointers on fibers. I'm trying to see how far we can get\n        // with that model. If it ends up not being worth the tradeoffs, we can\n        // add it later.\n        // Even with a two ended optimization, we'd want to optimize for the case\n        // where there are few changes and brute force the comparison instead of\n        // going for the Map. It'd like to explore hitting that path first in\n        // forward-only mode and only go for the Map once we notice that we need\n        // lots of look ahead. This doesn't handle reversal as well as two ended\n        // search but that's unusual. Besides, for the two ended optimization to\n        // work on Iterables, we'd need to copy the whole set.\n        // In this first iteration, we'll just live with hitting the bad case\n        // (adding everything to a Map) in for every insert/move.\n        // If you change this code, also update reconcileChildrenIterator() which\n        // uses the same algorithm.\n        {\n          // First, validate keys.\n          var knownKeys = null;\n\n          for (var i = 0; i < newChildren.length; i++) {\n            var child = newChildren[i];\n            knownKeys = warnOnInvalidKey(child, knownKeys, returnFiber);\n          }\n        }\n\n        var resultingFirstChild = null;\n        var previousNewFiber = null;\n        var oldFiber = currentFirstChild;\n        var lastPlacedIndex = 0;\n        var newIdx = 0;\n        var nextOldFiber = null;\n\n        for (; oldFiber !== null && newIdx < newChildren.length; newIdx++) {\n          if (oldFiber.index > newIdx) {\n            nextOldFiber = oldFiber;\n            oldFiber = null;\n          } else {\n            nextOldFiber = oldFiber.sibling;\n          }\n\n          var newFiber = updateSlot(\n            returnFiber,\n            oldFiber,\n            newChildren[newIdx],\n            lanes\n          );\n\n          if (newFiber === null) {\n            // TODO: This breaks on empty slots like null children. That's\n            // unfortunate because it triggers the slow path all the time. We need\n            // a better way to communicate whether this was a miss or null,\n            // boolean, undefined, etc.\n            if (oldFiber === null) {\n              oldFiber = nextOldFiber;\n            }\n\n            break;\n          }\n\n          if (shouldTrackSideEffects) {\n            if (oldFiber && newFiber.alternate === null) {\n              // We matched the slot, but we didn't reuse the existing fiber, so we\n              // need to delete the existing child.\n              deleteChild(returnFiber, oldFiber);\n            }\n          }\n\n          lastPlacedIndex = placeChild(newFiber, lastPlacedIndex, newIdx);\n\n          if (previousNewFiber === null) {\n            // TODO: Move out of the loop. This only happens for the first run.\n            resultingFirstChild = newFiber;\n          } else {\n            // TODO: Defer siblings if we're not at the right index for this slot.\n            // I.e. if we had null values before, then we want to defer this\n            // for each null value. However, we also don't want to call updateSlot\n            // with the previous one.\n            previousNewFiber.sibling = newFiber;\n          }\n\n          previousNewFiber = newFiber;\n          oldFiber = nextOldFiber;\n        }\n\n        if (newIdx === newChildren.length) {\n          // We've reached the end of the new children. We can delete the rest.\n          deleteRemainingChildren(returnFiber, oldFiber);\n\n          return resultingFirstChild;\n        }\n\n        if (oldFiber === null) {\n          // If we don't have any more existing children we can choose a fast path\n          // since the rest will all be insertions.\n          for (; newIdx < newChildren.length; newIdx++) {\n            var _newFiber = createChild(\n              returnFiber,\n              newChildren[newIdx],\n              lanes\n            );\n\n            if (_newFiber === null) {\n              continue;\n            }\n\n            lastPlacedIndex = placeChild(_newFiber, lastPlacedIndex, newIdx);\n\n            if (previousNewFiber === null) {\n              // TODO: Move out of the loop. This only happens for the first run.\n              resultingFirstChild = _newFiber;\n            } else {\n              previousNewFiber.sibling = _newFiber;\n            }\n\n            previousNewFiber = _newFiber;\n          }\n\n          return resultingFirstChild;\n        } // Add all children to a key map for quick lookups.\n\n        var existingChildren = mapRemainingChildren(returnFiber, oldFiber); // Keep scanning and use the map to restore deleted items as moves.\n\n        for (; newIdx < newChildren.length; newIdx++) {\n          var _newFiber2 = updateFromMap(\n            existingChildren,\n            returnFiber,\n            newIdx,\n            newChildren[newIdx],\n            lanes\n          );\n\n          if (_newFiber2 !== null) {\n            if (shouldTrackSideEffects) {\n              if (_newFiber2.alternate !== null) {\n                // The new fiber is a work in progress, but if there exists a\n                // current, that means that we reused the fiber. We need to delete\n                // it from the child list so that we don't add it to the deletion\n                // list.\n                existingChildren.delete(\n                  _newFiber2.key === null ? newIdx : _newFiber2.key\n                );\n              }\n            }\n\n            lastPlacedIndex = placeChild(_newFiber2, lastPlacedIndex, newIdx);\n\n            if (previousNewFiber === null) {\n              resultingFirstChild = _newFiber2;\n            } else {\n              previousNewFiber.sibling = _newFiber2;\n            }\n\n            previousNewFiber = _newFiber2;\n          }\n        }\n\n        if (shouldTrackSideEffects) {\n          // Any existing children that weren't consumed above were deleted. We need\n          // to add them to the deletion list.\n          existingChildren.forEach(function (child) {\n            return deleteChild(returnFiber, child);\n          });\n        }\n\n        return resultingFirstChild;\n      }\n\n      function reconcileChildrenIterator(\n        returnFiber,\n        currentFirstChild,\n        newChildrenIterable,\n        lanes\n      ) {\n        // This is the same implementation as reconcileChildrenArray(),\n        // but using the iterator instead.\n        var iteratorFn = getIteratorFn(newChildrenIterable);\n\n        if (typeof iteratorFn !== \"function\") {\n          throw new Error(\n            \"An object is not an iterable. This error is likely caused by a bug in \" +\n              \"React. Please file an issue.\"\n          );\n        }\n\n        {\n          // We don't support rendering Generators because it's a mutation.\n          // See https://github.com/facebook/react/issues/12995\n          if (\n            typeof Symbol === \"function\" && // $FlowFixMe[prop-missing] Flow doesn't know about toStringTag\n            newChildrenIterable[Symbol.toStringTag] === \"Generator\"\n          ) {\n            if (!didWarnAboutGenerators) {\n              error(\n                \"Using Generators as children is unsupported and will likely yield \" +\n                  \"unexpected results because enumerating a generator mutates it. \" +\n                  \"You may convert it to an array with `Array.from()` or the \" +\n                  \"`[...spread]` operator before rendering. Keep in mind \" +\n                  \"you might need to polyfill these features for older browsers.\"\n              );\n            }\n\n            didWarnAboutGenerators = true;\n          } // Warn about using Maps as children\n\n          if (newChildrenIterable.entries === iteratorFn) {\n            if (!didWarnAboutMaps) {\n              error(\n                \"Using Maps as children is not supported. \" +\n                  \"Use an array of keyed ReactElements instead.\"\n              );\n            }\n\n            didWarnAboutMaps = true;\n          } // First, validate keys.\n          // We'll get a different iterator later for the main pass.\n\n          var _newChildren = iteratorFn.call(newChildrenIterable);\n\n          if (_newChildren) {\n            var knownKeys = null;\n\n            var _step = _newChildren.next();\n\n            for (; !_step.done; _step = _newChildren.next()) {\n              var child = _step.value;\n              knownKeys = warnOnInvalidKey(child, knownKeys, returnFiber);\n            }\n          }\n        }\n\n        var newChildren = iteratorFn.call(newChildrenIterable);\n\n        if (newChildren == null) {\n          throw new Error(\"An iterable object provided no iterator.\");\n        }\n\n        var resultingFirstChild = null;\n        var previousNewFiber = null;\n        var oldFiber = currentFirstChild;\n        var lastPlacedIndex = 0;\n        var newIdx = 0;\n        var nextOldFiber = null;\n        var step = newChildren.next();\n\n        for (\n          ;\n          oldFiber !== null && !step.done;\n          newIdx++, step = newChildren.next()\n        ) {\n          if (oldFiber.index > newIdx) {\n            nextOldFiber = oldFiber;\n            oldFiber = null;\n          } else {\n            nextOldFiber = oldFiber.sibling;\n          }\n\n          var newFiber = updateSlot(returnFiber, oldFiber, step.value, lanes);\n\n          if (newFiber === null) {\n            // TODO: This breaks on empty slots like null children. That's\n            // unfortunate because it triggers the slow path all the time. We need\n            // a better way to communicate whether this was a miss or null,\n            // boolean, undefined, etc.\n            if (oldFiber === null) {\n              oldFiber = nextOldFiber;\n            }\n\n            break;\n          }\n\n          if (shouldTrackSideEffects) {\n            if (oldFiber && newFiber.alternate === null) {\n              // We matched the slot, but we didn't reuse the existing fiber, so we\n              // need to delete the existing child.\n              deleteChild(returnFiber, oldFiber);\n            }\n          }\n\n          lastPlacedIndex = placeChild(newFiber, lastPlacedIndex, newIdx);\n\n          if (previousNewFiber === null) {\n            // TODO: Move out of the loop. This only happens for the first run.\n            resultingFirstChild = newFiber;\n          } else {\n            // TODO: Defer siblings if we're not at the right index for this slot.\n            // I.e. if we had null values before, then we want to defer this\n            // for each null value. However, we also don't want to call updateSlot\n            // with the previous one.\n            previousNewFiber.sibling = newFiber;\n          }\n\n          previousNewFiber = newFiber;\n          oldFiber = nextOldFiber;\n        }\n\n        if (step.done) {\n          // We've reached the end of the new children. We can delete the rest.\n          deleteRemainingChildren(returnFiber, oldFiber);\n\n          return resultingFirstChild;\n        }\n\n        if (oldFiber === null) {\n          // If we don't have any more existing children we can choose a fast path\n          // since the rest will all be insertions.\n          for (; !step.done; newIdx++, step = newChildren.next()) {\n            var _newFiber3 = createChild(returnFiber, step.value, lanes);\n\n            if (_newFiber3 === null) {\n              continue;\n            }\n\n            lastPlacedIndex = placeChild(_newFiber3, lastPlacedIndex, newIdx);\n\n            if (previousNewFiber === null) {\n              // TODO: Move out of the loop. This only happens for the first run.\n              resultingFirstChild = _newFiber3;\n            } else {\n              previousNewFiber.sibling = _newFiber3;\n            }\n\n            previousNewFiber = _newFiber3;\n          }\n\n          return resultingFirstChild;\n        } // Add all children to a key map for quick lookups.\n\n        var existingChildren = mapRemainingChildren(returnFiber, oldFiber); // Keep scanning and use the map to restore deleted items as moves.\n\n        for (; !step.done; newIdx++, step = newChildren.next()) {\n          var _newFiber4 = updateFromMap(\n            existingChildren,\n            returnFiber,\n            newIdx,\n            step.value,\n            lanes\n          );\n\n          if (_newFiber4 !== null) {\n            if (shouldTrackSideEffects) {\n              if (_newFiber4.alternate !== null) {\n                // The new fiber is a work in progress, but if there exists a\n                // current, that means that we reused the fiber. We need to delete\n                // it from the child list so that we don't add it to the deletion\n                // list.\n                existingChildren.delete(\n                  _newFiber4.key === null ? newIdx : _newFiber4.key\n                );\n              }\n            }\n\n            lastPlacedIndex = placeChild(_newFiber4, lastPlacedIndex, newIdx);\n\n            if (previousNewFiber === null) {\n              resultingFirstChild = _newFiber4;\n            } else {\n              previousNewFiber.sibling = _newFiber4;\n            }\n\n            previousNewFiber = _newFiber4;\n          }\n        }\n\n        if (shouldTrackSideEffects) {\n          // Any existing children that weren't consumed above were deleted. We need\n          // to add them to the deletion list.\n          existingChildren.forEach(function (child) {\n            return deleteChild(returnFiber, child);\n          });\n        }\n\n        return resultingFirstChild;\n      }\n\n      function reconcileSingleTextNode(\n        returnFiber,\n        currentFirstChild,\n        textContent,\n        lanes\n      ) {\n        // There's no need to check for keys on text nodes since we don't have a\n        // way to define them.\n        if (currentFirstChild !== null && currentFirstChild.tag === HostText) {\n          // We already have an existing node so let's just update it and delete\n          // the rest.\n          deleteRemainingChildren(returnFiber, currentFirstChild.sibling);\n          var existing = useFiber(currentFirstChild, textContent);\n          existing.return = returnFiber;\n          return existing;\n        } // The existing first child is not a text node so we need to create one\n        // and delete the existing ones.\n\n        deleteRemainingChildren(returnFiber, currentFirstChild);\n        var created = createFiberFromText(textContent, returnFiber.mode, lanes);\n        created.return = returnFiber;\n        return created;\n      }\n\n      function reconcileSingleElement(\n        returnFiber,\n        currentFirstChild,\n        element,\n        lanes\n      ) {\n        var key = element.key;\n        var child = currentFirstChild;\n\n        while (child !== null) {\n          // TODO: If key === null and child.key === null, then this only applies to\n          // the first item in the list.\n          if (child.key === key) {\n            var elementType = element.type;\n\n            if (elementType === REACT_FRAGMENT_TYPE) {\n              if (child.tag === Fragment) {\n                deleteRemainingChildren(returnFiber, child.sibling);\n                var existing = useFiber(child, element.props.children);\n                existing.return = returnFiber;\n\n                {\n                  existing._debugOwner = element._owner;\n                }\n\n                return existing;\n              }\n            } else {\n              if (\n                child.elementType === elementType || // Keep this check inline so it only runs on the false path:\n                isCompatibleFamilyForHotReloading(child, element) || // Lazy types should reconcile their resolved type.\n                // We need to do this after the Hot Reloading check above,\n                // because hot reloading has different semantics than prod because\n                // it doesn't resuspend. So we can't let the call below suspend.\n                (typeof elementType === \"object\" &&\n                  elementType !== null &&\n                  elementType.$$typeof === REACT_LAZY_TYPE &&\n                  resolveLazy(elementType) === child.type)\n              ) {\n                deleteRemainingChildren(returnFiber, child.sibling);\n\n                var _existing = useFiber(child, element.props);\n\n                _existing.ref = coerceRef(returnFiber, child, element);\n                _existing.return = returnFiber;\n\n                {\n                  _existing._debugOwner = element._owner;\n                }\n\n                return _existing;\n              }\n            } // Didn't match.\n\n            deleteRemainingChildren(returnFiber, child);\n            break;\n          } else {\n            deleteChild(returnFiber, child);\n          }\n\n          child = child.sibling;\n        }\n\n        if (element.type === REACT_FRAGMENT_TYPE) {\n          var created = createFiberFromFragment(\n            element.props.children,\n            returnFiber.mode,\n            lanes,\n            element.key\n          );\n          created.return = returnFiber;\n          return created;\n        } else {\n          var _created4 = createFiberFromElement(\n            element,\n            returnFiber.mode,\n            lanes\n          );\n\n          _created4.ref = coerceRef(returnFiber, currentFirstChild, element);\n          _created4.return = returnFiber;\n          return _created4;\n        }\n      }\n\n      function reconcileSinglePortal(\n        returnFiber,\n        currentFirstChild,\n        portal,\n        lanes\n      ) {\n        var key = portal.key;\n        var child = currentFirstChild;\n\n        while (child !== null) {\n          // TODO: If key === null and child.key === null, then this only applies to\n          // the first item in the list.\n          if (child.key === key) {\n            if (\n              child.tag === HostPortal &&\n              child.stateNode.containerInfo === portal.containerInfo &&\n              child.stateNode.implementation === portal.implementation\n            ) {\n              deleteRemainingChildren(returnFiber, child.sibling);\n              var existing = useFiber(child, portal.children || []);\n              existing.return = returnFiber;\n              return existing;\n            } else {\n              deleteRemainingChildren(returnFiber, child);\n              break;\n            }\n          } else {\n            deleteChild(returnFiber, child);\n          }\n\n          child = child.sibling;\n        }\n\n        var created = createFiberFromPortal(portal, returnFiber.mode, lanes);\n        created.return = returnFiber;\n        return created;\n      } // This API will tag the children with the side-effect of the reconciliation\n      // itself. They will be added to the side-effect list as we pass through the\n      // children and the parent.\n\n      function reconcileChildFibersImpl(\n        returnFiber,\n        currentFirstChild,\n        newChild,\n        lanes\n      ) {\n        // This function is not recursive.\n        // If the top level item is an array, we treat it as a set of children,\n        // not as a fragment. Nested arrays on the other hand will be treated as\n        // fragment nodes. Recursion happens at the normal flow.\n        // Handle top level unkeyed fragments as if they were arrays.\n        // This leads to an ambiguity between <>{[...]}</> and <>...</>.\n        // We treat the ambiguous cases above the same.\n        // TODO: Let's use recursion like we do for Usable nodes?\n        var isUnkeyedTopLevelFragment =\n          typeof newChild === \"object\" &&\n          newChild !== null &&\n          newChild.type === REACT_FRAGMENT_TYPE &&\n          newChild.key === null;\n\n        if (isUnkeyedTopLevelFragment) {\n          newChild = newChild.props.children;\n        } // Handle object types\n\n        if (typeof newChild === \"object\" && newChild !== null) {\n          switch (newChild.$$typeof) {\n            case REACT_ELEMENT_TYPE:\n              return placeSingleChild(\n                reconcileSingleElement(\n                  returnFiber,\n                  currentFirstChild,\n                  newChild,\n                  lanes\n                )\n              );\n\n            case REACT_PORTAL_TYPE:\n              return placeSingleChild(\n                reconcileSinglePortal(\n                  returnFiber,\n                  currentFirstChild,\n                  newChild,\n                  lanes\n                )\n              );\n\n            case REACT_LAZY_TYPE:\n              var payload = newChild._payload;\n              var init = newChild._init; // TODO: This function is supposed to be non-recursive.\n\n              return reconcileChildFibers(\n                returnFiber,\n                currentFirstChild,\n                init(payload),\n                lanes\n              );\n          }\n\n          if (isArray(newChild)) {\n            return reconcileChildrenArray(\n              returnFiber,\n              currentFirstChild,\n              newChild,\n              lanes\n            );\n          }\n\n          if (getIteratorFn(newChild)) {\n            return reconcileChildrenIterator(\n              returnFiber,\n              currentFirstChild,\n              newChild,\n              lanes\n            );\n          } // Usables are a valid React node type. When React encounters a Usable in\n          // a child position, it unwraps it using the same algorithm as `use`. For\n          // example, for promises, React will throw an exception to unwind the\n          // stack, then replay the component once the promise resolves.\n          //\n          // A difference from `use` is that React will keep unwrapping the value\n          // until it reaches a non-Usable type.\n          //\n          // e.g. Usable<Usable<Usable<T>>> should resolve to T\n          //\n          // The structure is a bit unfortunate. Ideally, we shouldn't need to\n          // replay the entire begin phase of the parent fiber in order to reconcile\n          // the children again. This would require a somewhat significant refactor,\n          // because reconcilation happens deep within the begin phase, and\n          // depending on the type of work, not always at the end. We should\n          // consider as an future improvement.\n\n          if (typeof newChild.then === \"function\") {\n            var thenable = newChild;\n            return reconcileChildFibersImpl(\n              returnFiber,\n              currentFirstChild,\n              unwrapThenable(thenable),\n              lanes\n            );\n          }\n\n          if (newChild.$$typeof === REACT_CONTEXT_TYPE) {\n            var context = newChild;\n            return reconcileChildFibersImpl(\n              returnFiber,\n              currentFirstChild,\n              readContextDuringReconcilation(returnFiber, context, lanes),\n              lanes\n            );\n          }\n\n          throwOnInvalidObjectType(returnFiber, newChild);\n        }\n\n        if (\n          (typeof newChild === \"string\" && newChild !== \"\") ||\n          typeof newChild === \"number\"\n        ) {\n          return placeSingleChild(\n            reconcileSingleTextNode(\n              returnFiber,\n              currentFirstChild,\n              \"\" + newChild,\n              lanes\n            )\n          );\n        }\n\n        {\n          if (typeof newChild === \"function\") {\n            warnOnFunctionType(returnFiber);\n          }\n        } // Remaining cases are all treated as empty.\n\n        return deleteRemainingChildren(returnFiber, currentFirstChild);\n      }\n\n      function reconcileChildFibers(\n        returnFiber,\n        currentFirstChild,\n        newChild,\n        lanes\n      ) {\n        // This indirection only exists so we can reset `thenableState` at the end.\n        // It should get inlined by Closure.\n        thenableIndexCounter$1 = 0;\n        var firstChildFiber = reconcileChildFibersImpl(\n          returnFiber,\n          currentFirstChild,\n          newChild,\n          lanes\n        );\n        thenableState$1 = null; // Don't bother to reset `thenableIndexCounter` to 0 because it always gets\n        // set at the beginning.\n\n        return firstChildFiber;\n      }\n\n      return reconcileChildFibers;\n    }\n\n    var reconcileChildFibers = createChildReconciler(true);\n    var mountChildFibers = createChildReconciler(false);\n    function resetChildReconcilerOnUnwind() {\n      // On unwind, clear any pending thenables that were used.\n      thenableState$1 = null;\n      thenableIndexCounter$1 = 0;\n    }\n    function cloneChildFibers(current, workInProgress) {\n      if (current !== null && workInProgress.child !== current.child) {\n        throw new Error(\"Resuming work not yet implemented.\");\n      }\n\n      if (workInProgress.child === null) {\n        return;\n      }\n\n      var currentChild = workInProgress.child;\n      var newChild = createWorkInProgress(\n        currentChild,\n        currentChild.pendingProps\n      );\n      workInProgress.child = newChild;\n      newChild.return = workInProgress;\n\n      while (currentChild.sibling !== null) {\n        currentChild = currentChild.sibling;\n        newChild = newChild.sibling = createWorkInProgress(\n          currentChild,\n          currentChild.pendingProps\n        );\n        newChild.return = workInProgress;\n      }\n\n      newChild.sibling = null;\n    } // Reset a workInProgress child set to prepare it for a second pass.\n\n    function resetChildFibers(workInProgress, lanes) {\n      var child = workInProgress.child;\n\n      while (child !== null) {\n        resetWorkInProgress(child, lanes);\n        child = child.sibling;\n      }\n    }\n\n    // TODO: This isn't being used yet, but it's intended to replace the\n    // InvisibleParentContext that is currently managed by SuspenseContext.\n\n    var currentTreeHiddenStackCursor = createCursor(null);\n    var prevEntangledRenderLanesCursor = createCursor(NoLanes);\n    function pushHiddenContext(fiber, context) {\n      var prevEntangledRenderLanes = getEntangledRenderLanes();\n      push(prevEntangledRenderLanesCursor, prevEntangledRenderLanes, fiber);\n      push(currentTreeHiddenStackCursor, context, fiber); // When rendering a subtree that's currently hidden, we must include all\n      // lanes that would have rendered if the hidden subtree hadn't been deferred.\n      // That is, in order to reveal content from hidden -> visible, we must commit\n      // all the updates that we skipped when we originally hid the tree.\n\n      setEntangledRenderLanes(\n        mergeLanes(prevEntangledRenderLanes, context.baseLanes)\n      );\n    }\n    function reuseHiddenContextOnStack(fiber) {\n      // This subtree is not currently hidden, so we don't need to add any lanes\n      // to the render lanes. But we still need to push something to avoid a\n      // context mismatch. Reuse the existing context on the stack.\n      push(prevEntangledRenderLanesCursor, getEntangledRenderLanes(), fiber);\n      push(\n        currentTreeHiddenStackCursor,\n        currentTreeHiddenStackCursor.current,\n        fiber\n      );\n    }\n    function popHiddenContext(fiber) {\n      // Restore the previous render lanes from the stack\n      setEntangledRenderLanes(prevEntangledRenderLanesCursor.current);\n      pop(currentTreeHiddenStackCursor, fiber);\n      pop(prevEntangledRenderLanesCursor, fiber);\n    }\n    function isCurrentTreeHidden() {\n      return currentTreeHiddenStackCursor.current !== null;\n    }\n\n    // suspends, i.e. it's the nearest `catch` block on the stack.\n\n    var suspenseHandlerStackCursor = createCursor(null); // Represents the outermost boundary that is not visible in the current tree.\n    // Everything above this is the \"shell\". When this is null, it means we're\n    // rendering in the shell of the app. If it's non-null, it means we're rendering\n    // deeper than the shell, inside a new tree that wasn't already visible.\n    //\n    // The main way we use this concept is to determine whether showing a fallback\n    // would result in a desirable or undesirable loading state. Activing a fallback\n    // in the shell is considered an undersirable loading state, because it would\n    // mean hiding visible (albeit stale) content in the current tree — we prefer to\n    // show the stale content, rather than switch to a fallback. But showing a\n    // fallback in a new tree is fine, because there's no stale content to\n    // prefer instead.\n\n    var shellBoundary = null;\n    function getShellBoundary() {\n      return shellBoundary;\n    }\n    function pushPrimaryTreeSuspenseHandler(handler) {\n      // TODO: Pass as argument\n      var current = handler.alternate;\n      // propagated a single level. For example, when ForceSuspenseFallback is set,\n      // it should only force the nearest Suspense boundary into fallback mode.\n\n      pushSuspenseListContext(\n        handler,\n        setDefaultShallowSuspenseListContext(suspenseStackCursor.current)\n      ); // Experimental feature: Some Suspense boundaries are marked as having an\n      // to push a nested Suspense handler, because it will get replaced by the\n      // outer fallback, anyway. Consider this as a future optimization.\n\n      push(suspenseHandlerStackCursor, handler, handler);\n\n      if (shellBoundary === null) {\n        if (current === null || isCurrentTreeHidden()) {\n          // This boundary is not visible in the current UI.\n          shellBoundary = handler;\n        } else {\n          var prevState = current.memoizedState;\n\n          if (prevState !== null) {\n            // This boundary is showing a fallback in the current UI.\n            shellBoundary = handler;\n          }\n        }\n      }\n    }\n    function pushFallbackTreeSuspenseHandler(fiber) {\n      // We're about to render the fallback. If something in the fallback suspends,\n      // it's akin to throwing inside of a `catch` block. This boundary should not\n      // capture. Reuse the existing handler on the stack.\n      reuseSuspenseHandlerOnStack(fiber);\n    }\n    function pushOffscreenSuspenseHandler(fiber) {\n      if (fiber.tag === OffscreenComponent) {\n        // A SuspenseList context is only pushed here to avoid a push/pop mismatch.\n        // Reuse the current value on the stack.\n        // TODO: We can avoid needing to push here by by forking popSuspenseHandler\n        // into separate functions for Suspense and Offscreen.\n        pushSuspenseListContext(fiber, suspenseStackCursor.current);\n        push(suspenseHandlerStackCursor, fiber, fiber);\n\n        if (shellBoundary !== null);\n        else {\n          var current = fiber.alternate;\n\n          if (current !== null) {\n            var prevState = current.memoizedState;\n\n            if (prevState !== null) {\n              // This is the first boundary in the stack that's already showing\n              // a fallback. So everything outside is considered the shell.\n              shellBoundary = fiber;\n            }\n          }\n        }\n      } else {\n        // This is a LegacyHidden component.\n        reuseSuspenseHandlerOnStack(fiber);\n      }\n    }\n    function reuseSuspenseHandlerOnStack(fiber) {\n      pushSuspenseListContext(fiber, suspenseStackCursor.current);\n      push(suspenseHandlerStackCursor, getSuspenseHandler(), fiber);\n    }\n    function getSuspenseHandler() {\n      return suspenseHandlerStackCursor.current;\n    }\n    function popSuspenseHandler(fiber) {\n      pop(suspenseHandlerStackCursor, fiber);\n\n      if (shellBoundary === fiber) {\n        // Popping back into the shell.\n        shellBoundary = null;\n      }\n\n      popSuspenseListContext(fiber);\n    } // SuspenseList context\n    // TODO: Move to a separate module? We may change the SuspenseList\n    // implementation to hide/show in the commit phase, anyway.\n\n    var DefaultSuspenseContext = 0;\n    var SubtreeSuspenseContextMask = 1; // ForceSuspenseFallback can be used by SuspenseList to force newly added\n    // items into their fallback state during one of the render passes.\n\n    var ForceSuspenseFallback = 2;\n    var suspenseStackCursor = createCursor(DefaultSuspenseContext);\n    function hasSuspenseListContext(parentContext, flag) {\n      return (parentContext & flag) !== 0;\n    }\n    function setDefaultShallowSuspenseListContext(parentContext) {\n      return parentContext & SubtreeSuspenseContextMask;\n    }\n    function setShallowSuspenseListContext(parentContext, shallowContext) {\n      return (parentContext & SubtreeSuspenseContextMask) | shallowContext;\n    }\n    function pushSuspenseListContext(fiber, newContext) {\n      push(suspenseStackCursor, newContext, fiber);\n    }\n    function popSuspenseListContext(fiber) {\n      pop(suspenseStackCursor, fiber);\n    }\n\n    // A non-null SuspenseState means that it is blocked for one reason or another.\n    // - A non-null dehydrated field means it's blocked pending hydration.\n    //   - A non-null dehydrated field can use isSuspenseInstancePending or\n    //     isSuspenseInstanceFallback to query the reason for being dehydrated.\n    // - A null dehydrated field means it's blocked by something suspending and\n    //   we're currently showing a fallback instead.\n\n    function findFirstSuspended(row) {\n      var node = row;\n\n      while (node !== null) {\n        if (node.tag === SuspenseComponent) {\n          var state = node.memoizedState;\n\n          if (state !== null) {\n            var dehydrated = state.dehydrated;\n\n            if (\n              dehydrated === null ||\n              isSuspenseInstancePending() ||\n              isSuspenseInstanceFallback()\n            ) {\n              return node;\n            }\n          }\n        } else if (\n          node.tag === SuspenseListComponent && // revealOrder undefined can't be trusted because it don't\n          // keep track of whether it suspended or not.\n          node.memoizedProps.revealOrder !== undefined\n        ) {\n          var didSuspend = (node.flags & DidCapture) !== NoFlags$1;\n\n          if (didSuspend) {\n            return node;\n          }\n        } else if (node.child !== null) {\n          node.child.return = node;\n          node = node.child;\n          continue;\n        }\n\n        if (node === row) {\n          return null;\n        }\n\n        while (node.sibling === null) {\n          if (node.return === null || node.return === row) {\n            return null;\n          }\n\n          node = node.return;\n        }\n\n        node.sibling.return = node.return;\n        node = node.sibling;\n      }\n\n      return null;\n    }\n\n    var NoFlags =\n      /*   */\n      0; // Represents whether effect should fire.\n\n    var HasEffect =\n      /* */\n      1; // Represents the phase in which the effect (not the clean-up) fires.\n\n    var Insertion =\n      /* */\n      2;\n    var Layout =\n      /*    */\n      4;\n    var Passive =\n      /*   */\n      8;\n\n    var ReactCurrentDispatcher$1 = ReactSharedInternals.ReactCurrentDispatcher,\n      ReactCurrentBatchConfig$2 = ReactSharedInternals.ReactCurrentBatchConfig;\n    var didWarnAboutMismatchedHooksForComponent;\n    var didWarnUncachedGetSnapshot;\n    var didWarnAboutUseWrappedInTryCatch;\n    var didWarnAboutAsyncClientComponent;\n\n    {\n      didWarnAboutMismatchedHooksForComponent = new Set();\n      didWarnAboutUseWrappedInTryCatch = new Set();\n      didWarnAboutAsyncClientComponent = new Set();\n    } // The effect \"instance\" is a shared object that remains the same for the entire\n    // lifetime of an effect. In Rust terms, a RefCell. We use it to store the\n    // \"destroy\" function that is returned from an effect, because that is stateful.\n    // The field is `undefined` if the effect is unmounted, or if the effect ran\n    // but is not stateful. We don't explicitly track whether the effect is mounted\n    // or unmounted because that can be inferred by the hiddenness of the fiber in\n    // the tree, i.e. whether there is a hidden Offscreen fiber above it.\n    //\n    // It's unfortunate that this is stored on a separate object, because it adds\n    // more memory per effect instance, but it's conceptually sound. I think there's\n    // likely a better data structure we could use for effects; perhaps just one\n    // array of effect instances per fiber. But I think this is OK for now despite\n    // the additional memory and we can follow up with performance\n    // optimizations later.\n    // These are set right before calling the component.\n\n    var renderLanes = NoLanes; // The work-in-progress fiber. I've named it differently to distinguish it from\n    // the work-in-progress hook.\n\n    var currentlyRenderingFiber$1 = null; // Hooks are stored as a linked list on the fiber's memoizedState field. The\n    // current hook list is the list that belongs to the current fiber. The\n    // work-in-progress hook list is a new list that will be added to the\n    // work-in-progress fiber.\n\n    var currentHook = null;\n    var workInProgressHook = null; // Whether an update was scheduled at any point during the render phase. This\n    // does not get reset if we do another render pass; only when we're completely\n    // finished evaluating this component. This is an optimization so we know\n    // whether we need to clear render phase updates after a throw.\n\n    var didScheduleRenderPhaseUpdate = false; // Where an update was scheduled only during the current render pass. This\n    // gets reset after each attempt.\n    // TODO: Maybe there's some way to consolidate this with\n    // `didScheduleRenderPhaseUpdate`. Or with `numberOfReRenders`.\n\n    var didScheduleRenderPhaseUpdateDuringThisPass = false;\n    var shouldDoubleInvokeUserFnsInHooksDEV = false; // Counts the number of useId hooks in this component.\n\n    var thenableIndexCounter = 0;\n    var thenableState = null; // Used for ids that are generated completely client-side (i.e. not during\n    // hydration). This counter is global, so client ids are not stable across\n    // render attempts.\n\n    var globalClientIdCounter = 0;\n    var RE_RENDER_LIMIT = 25; // In DEV, this is the name of the currently executing primitive hook\n\n    var currentHookNameInDev = null; // In DEV, this list ensures that hooks are called in the same order between renders.\n    // The list stores the order of hooks used during the initial render (mount).\n    // Subsequent renders (updates) reference this list.\n\n    var hookTypesDev = null;\n    var hookTypesUpdateIndexDev = -1; // In DEV, this tracks whether currently rendering component needs to ignore\n    // the dependencies for Hooks that need them (e.g. useEffect or useMemo).\n    // When true, such Hooks will always be \"remounted\". Only used during hot reload.\n\n    var ignorePreviousDependencies = false;\n\n    function mountHookTypesDev() {\n      {\n        var hookName = currentHookNameInDev;\n\n        if (hookTypesDev === null) {\n          hookTypesDev = [hookName];\n        } else {\n          hookTypesDev.push(hookName);\n        }\n      }\n    }\n\n    function updateHookTypesDev() {\n      {\n        var hookName = currentHookNameInDev;\n\n        if (hookTypesDev !== null) {\n          hookTypesUpdateIndexDev++;\n\n          if (hookTypesDev[hookTypesUpdateIndexDev] !== hookName) {\n            warnOnHookMismatchInDev(hookName);\n          }\n        }\n      }\n    }\n\n    function checkDepsAreArrayDev(deps) {\n      {\n        if (deps !== undefined && deps !== null && !isArray(deps)) {\n          // Verify deps, but only on mount to avoid extra checks.\n          // It's unlikely their type would change as usually you define them inline.\n          error(\n            \"%s received a final argument that is not an array (instead, received `%s`). When \" +\n              \"specified, the final argument must be an array.\",\n            currentHookNameInDev,\n            typeof deps\n          );\n        }\n      }\n    }\n\n    function warnOnHookMismatchInDev(currentHookName) {\n      {\n        var componentName = getComponentNameFromFiber(\n          currentlyRenderingFiber$1\n        );\n\n        if (!didWarnAboutMismatchedHooksForComponent.has(componentName)) {\n          didWarnAboutMismatchedHooksForComponent.add(componentName);\n\n          if (hookTypesDev !== null) {\n            var table = \"\";\n            var secondColumnStart = 30;\n\n            for (var i = 0; i <= hookTypesUpdateIndexDev; i++) {\n              var oldHookName = hookTypesDev[i];\n              var newHookName =\n                i === hookTypesUpdateIndexDev ? currentHookName : oldHookName;\n              var row = i + 1 + \". \" + oldHookName; // Extra space so second column lines up\n              // lol @ IE not supporting String#repeat\n\n              while (row.length < secondColumnStart) {\n                row += \" \";\n              }\n\n              row += newHookName + \"\\n\";\n              table += row;\n            }\n\n            error(\n              \"React has detected a change in the order of Hooks called by %s. \" +\n                \"This will lead to bugs and errors if not fixed. \" +\n                \"For more information, read the Rules of Hooks: https://reactjs.org/link/rules-of-hooks\\n\\n\" +\n                \"   Previous render            Next render\\n\" +\n                \"   ------------------------------------------------------\\n\" +\n                \"%s\" +\n                \"   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\\n\",\n              componentName,\n              table\n            );\n          }\n        }\n      }\n    }\n\n    function warnIfAsyncClientComponent(Component) {\n      {\n        // This dev-only check only works for detecting native async functions,\n        // not transpiled ones. There's also a prod check that we use to prevent\n        // async client components from crashing the app; the prod one works even\n        // for transpiled async functions. Neither mechanism is completely\n        // bulletproof but together they cover the most common cases.\n        var isAsyncFunction = // $FlowIgnore[method-unbinding]\n          Object.prototype.toString.call(Component) ===\n          \"[object AsyncFunction]\";\n\n        if (isAsyncFunction) {\n          // Encountered an async Client Component. This is not yet supported.\n          var componentName = getComponentNameFromFiber(\n            currentlyRenderingFiber$1\n          );\n\n          if (!didWarnAboutAsyncClientComponent.has(componentName)) {\n            didWarnAboutAsyncClientComponent.add(componentName);\n\n            error(\n              \"async/await is not yet supported in Client Components, only \" +\n                \"Server Components. This error is often caused by accidentally \" +\n                \"adding `'use client'` to a module that was originally written \" +\n                \"for the server.\"\n            );\n          }\n        }\n      }\n    }\n\n    function throwInvalidHookError() {\n      throw new Error(\n        \"Invalid hook call. Hooks can only be called inside of the body of a function component. This could happen for\" +\n          \" one of the following reasons:\\n\" +\n          \"1. You might have mismatching versions of React and the renderer (such as React DOM)\\n\" +\n          \"2. You might be breaking the Rules of Hooks\\n\" +\n          \"3. You might have more than one copy of React in the same app\\n\" +\n          \"See https://reactjs.org/link/invalid-hook-call for tips about how to debug and fix this problem.\"\n      );\n    }\n\n    function areHookInputsEqual(nextDeps, prevDeps) {\n      {\n        if (ignorePreviousDependencies) {\n          // Only true when this component is being hot reloaded.\n          return false;\n        }\n      }\n\n      if (prevDeps === null) {\n        {\n          error(\n            \"%s received a final argument during this render, but not during \" +\n              \"the previous render. Even though the final argument is optional, \" +\n              \"its type cannot change between renders.\",\n            currentHookNameInDev\n          );\n        }\n\n        return false;\n      }\n\n      {\n        // Don't bother comparing lengths in prod because these arrays should be\n        // passed inline.\n        if (nextDeps.length !== prevDeps.length) {\n          error(\n            \"The final argument passed to %s changed size between renders. The \" +\n              \"order and size of this array must remain constant.\\n\\n\" +\n              \"Previous: %s\\n\" +\n              \"Incoming: %s\",\n            currentHookNameInDev,\n            \"[\" + prevDeps.join(\", \") + \"]\",\n            \"[\" + nextDeps.join(\", \") + \"]\"\n          );\n        }\n      } // $FlowFixMe[incompatible-use] found when upgrading Flow\n\n      for (var i = 0; i < prevDeps.length && i < nextDeps.length; i++) {\n        // $FlowFixMe[incompatible-use] found when upgrading Flow\n        if (objectIs(nextDeps[i], prevDeps[i])) {\n          continue;\n        }\n\n        return false;\n      }\n\n      return true;\n    }\n\n    function renderWithHooks(\n      current,\n      workInProgress,\n      Component,\n      props,\n      secondArg,\n      nextRenderLanes\n    ) {\n      renderLanes = nextRenderLanes;\n      currentlyRenderingFiber$1 = workInProgress;\n\n      {\n        hookTypesDev = current !== null ? current._debugHookTypes : null;\n        hookTypesUpdateIndexDev = -1; // Used for hot reloading:\n\n        ignorePreviousDependencies =\n          current !== null && current.type !== workInProgress.type;\n        warnIfAsyncClientComponent(Component);\n      }\n\n      workInProgress.memoizedState = null;\n      workInProgress.updateQueue = null;\n      workInProgress.lanes = NoLanes; // The following should have already been reset\n      // currentHook = null;\n      // workInProgressHook = null;\n      // didScheduleRenderPhaseUpdate = false;\n      // localIdCounter = 0;\n      // thenableIndexCounter = 0;\n      // thenableState = null;\n      // TODO Warn if no hooks are used at all during mount, then some are used during update.\n      // Currently we will identify the update render as a mount because memoizedState === null.\n      // This is tricky because it's valid for certain types of components (e.g. React.lazy)\n      // Using memoizedState to differentiate between mount/update only works if at least one stateful hook is used.\n      // Non-stateful hooks (e.g. context) don't get added to memoizedState,\n      // so memoizedState would be null during updates and mounts.\n\n      {\n        if (current !== null && current.memoizedState !== null) {\n          ReactCurrentDispatcher$1.current = HooksDispatcherOnUpdateInDEV;\n        } else if (hookTypesDev !== null) {\n          // This dispatcher handles an edge case where a component is updating,\n          // but no stateful hooks have been used.\n          // We want to match the production code behavior (which will use HooksDispatcherOnMount),\n          // but with the extra DEV validation to ensure hooks ordering hasn't changed.\n          // This dispatcher does that.\n          ReactCurrentDispatcher$1.current =\n            HooksDispatcherOnMountWithHookTypesInDEV;\n        } else {\n          ReactCurrentDispatcher$1.current = HooksDispatcherOnMountInDEV;\n        }\n      } // In Strict Mode, during development, user functions are double invoked to\n      // help detect side effects. The logic for how this is implemented for in\n      // hook components is a bit complex so let's break it down.\n      //\n      // We will invoke the entire component function twice. However, during the\n      // second invocation of the component, the hook state from the first\n      // invocation will be reused. That means things like `useMemo` functions won't\n      // run again, because the deps will match and the memoized result will\n      // be reused.\n      //\n      // We want memoized functions to run twice, too, so account for this, user\n      // functions are double invoked during the *first* invocation of the component\n      // function, and are *not* double invoked during the second incovation:\n      //\n      // - First execution of component function: user functions are double invoked\n      // - Second execution of component function (in Strict Mode, during\n      //   development): user functions are not double invoked.\n      //\n      // This is intentional for a few reasons; most importantly, it's because of\n      // how `use` works when something suspends: it reuses the promise that was\n      // passed during the first attempt. This is itself a form of memoization.\n      // We need to be able to memoize the reactive inputs to the `use` call using\n      // a hook (i.e. `useMemo`), which means, the reactive inputs to `use` must\n      // come from the same component invocation as the output.\n      //\n      // There are plenty of tests to ensure this behavior is correct.\n\n      var shouldDoubleRenderDEV =\n        (workInProgress.mode & StrictLegacyMode) !== NoMode;\n      shouldDoubleInvokeUserFnsInHooksDEV = shouldDoubleRenderDEV;\n      var children = Component(props, secondArg);\n      shouldDoubleInvokeUserFnsInHooksDEV = false; // Check if there was a render phase update\n\n      if (didScheduleRenderPhaseUpdateDuringThisPass) {\n        // Keep rendering until the component stabilizes (there are no more render\n        // phase updates).\n        children = renderWithHooksAgain(\n          workInProgress,\n          Component,\n          props,\n          secondArg\n        );\n      }\n\n      if (shouldDoubleRenderDEV) {\n        // In development, components are invoked twice to help detect side effects.\n        setIsStrictModeForDevtools(true);\n\n        try {\n          children = renderWithHooksAgain(\n            workInProgress,\n            Component,\n            props,\n            secondArg\n          );\n        } finally {\n          setIsStrictModeForDevtools(false);\n        }\n      }\n\n      finishRenderingHooks(current, workInProgress);\n      return children;\n    }\n\n    function finishRenderingHooks(current, workInProgress, Component) {\n      {\n        workInProgress._debugHookTypes = hookTypesDev;\n      } // We can assume the previous dispatcher is always this one, since we set it\n      // at the beginning of the render phase and there's no re-entrance.\n\n      ReactCurrentDispatcher$1.current = ContextOnlyDispatcher; // This check uses currentHook so that it works the same in DEV and prod bundles.\n      // hookTypesDev could catch more cases (e.g. context) but only in DEV bundles.\n\n      var didRenderTooFewHooks =\n        currentHook !== null && currentHook.next !== null;\n      renderLanes = NoLanes;\n      currentlyRenderingFiber$1 = null;\n      currentHook = null;\n      workInProgressHook = null;\n\n      {\n        currentHookNameInDev = null;\n        hookTypesDev = null;\n        hookTypesUpdateIndexDev = -1; // Confirm that a static flag was not added or removed since the last\n        // render. If this fires, it suggests that we incorrectly reset the static\n        // flags in some other part of the codebase. This has happened before, for\n        // example, in the SuspenseList implementation.\n\n        if (\n          current !== null &&\n          (current.flags & StaticMask) !==\n            (workInProgress.flags & StaticMask) && // Disable this warning in legacy mode, because legacy Suspense is weird\n          // and creates false positives. To make this work in legacy mode, we'd\n          // need to mark fibers that commit in an incomplete state, somehow. For\n          // now I'll disable the warning that most of the bugs that would trigger\n          // it are either exclusive to concurrent mode or exist in both.\n          (current.mode & ConcurrentMode) !== NoMode\n        ) {\n          error(\n            \"Internal React error: Expected static flag was missing. Please \" +\n              \"notify the React team.\"\n          );\n        }\n      }\n\n      didScheduleRenderPhaseUpdate = false; // This is reset by checkDidRenderIdHook\n      // localIdCounter = 0;\n\n      thenableIndexCounter = 0;\n      thenableState = null;\n\n      if (didRenderTooFewHooks) {\n        throw new Error(\n          \"Rendered fewer hooks than expected. This may be caused by an accidental \" +\n            \"early return statement.\"\n        );\n      }\n\n      {\n        if (checkIfUseWrappedInTryCatch()) {\n          var componentName =\n            getComponentNameFromFiber(workInProgress) || \"Unknown\";\n\n          if (\n            !didWarnAboutUseWrappedInTryCatch.has(componentName) && // This warning also fires if you suspend with `use` inside an\n            // async component. Since we warn for that above, we'll silence this\n            // second warning by checking here.\n            !didWarnAboutAsyncClientComponent.has(componentName)\n          ) {\n            didWarnAboutUseWrappedInTryCatch.add(componentName);\n\n            error(\n              \"`use` was called from inside a try/catch block. This is not allowed \" +\n                \"and can lead to unexpected behavior. To handle errors triggered \" +\n                \"by `use`, wrap your component in a error boundary.\"\n            );\n          }\n        }\n      }\n    }\n\n    function replaySuspendedComponentWithHooks(\n      current,\n      workInProgress,\n      Component,\n      props,\n      secondArg\n    ) {\n      // This function is used to replay a component that previously suspended,\n      // after its data resolves.\n      //\n      // It's a simplified version of renderWithHooks, but it doesn't need to do\n      // most of the set up work because they weren't reset when we suspended; they\n      // only get reset when the component either completes (finishRenderingHooks)\n      // or unwinds (resetHooksOnUnwind).\n      {\n        hookTypesUpdateIndexDev = -1; // Used for hot reloading:\n\n        ignorePreviousDependencies =\n          current !== null && current.type !== workInProgress.type;\n      }\n\n      var children = renderWithHooksAgain(\n        workInProgress,\n        Component,\n        props,\n        secondArg\n      );\n      finishRenderingHooks(current, workInProgress);\n      return children;\n    }\n\n    function renderWithHooksAgain(workInProgress, Component, props, secondArg) {\n      // This is used to perform another render pass. It's used when setState is\n      // called during render, and for double invoking components in Strict Mode\n      // during development.\n      //\n      // The state from the previous pass is reused whenever possible. So, state\n      // updates that were already processed are not processed again, and memoized\n      // functions (`useMemo`) are not invoked again.\n      //\n      // Keep rendering in a loop for as long as render phase updates continue to\n      // be scheduled. Use a counter to prevent infinite loops.\n      currentlyRenderingFiber$1 = workInProgress;\n      var numberOfReRenders = 0;\n      var children;\n\n      do {\n        if (didScheduleRenderPhaseUpdateDuringThisPass) {\n          // It's possible that a use() value depended on a state that was updated in\n          // this rerender, so we need to watch for different thenables this time.\n          thenableState = null;\n        }\n\n        thenableIndexCounter = 0;\n        didScheduleRenderPhaseUpdateDuringThisPass = false;\n\n        if (numberOfReRenders >= RE_RENDER_LIMIT) {\n          throw new Error(\n            \"Too many re-renders. React limits the number of renders to prevent \" +\n              \"an infinite loop.\"\n          );\n        }\n\n        numberOfReRenders += 1;\n\n        {\n          // Even when hot reloading, allow dependencies to stabilize\n          // after first render to prevent infinite render phase updates.\n          ignorePreviousDependencies = false;\n        } // Start over from the beginning of the list\n\n        currentHook = null;\n        workInProgressHook = null;\n        workInProgress.updateQueue = null;\n\n        {\n          // Also validate hook order for cascading updates.\n          hookTypesUpdateIndexDev = -1;\n        }\n\n        ReactCurrentDispatcher$1.current = HooksDispatcherOnRerenderInDEV;\n        children = Component(props, secondArg);\n      } while (didScheduleRenderPhaseUpdateDuringThisPass);\n\n      return children;\n    }\n    function bailoutHooks(current, workInProgress, lanes) {\n      workInProgress.updateQueue = current.updateQueue; // TODO: Don't need to reset the flags here, because they're reset in the\n      // complete phase (bubbleProperties).\n\n      if ((workInProgress.mode & StrictEffectsMode) !== NoMode) {\n        workInProgress.flags &= ~(\n          MountPassiveDev |\n          MountLayoutDev |\n          Passive$1 |\n          Update\n        );\n      } else {\n        workInProgress.flags &= ~(Passive$1 | Update);\n      }\n\n      current.lanes = removeLanes(current.lanes, lanes);\n    }\n    function resetHooksAfterThrow() {\n      // This is called immediaetly after a throw. It shouldn't reset the entire\n      // module state, because the work loop might decide to replay the component\n      // again without rewinding.\n      //\n      // It should only reset things like the current dispatcher, to prevent hooks\n      // from being called outside of a component.\n      currentlyRenderingFiber$1 = null; // We can assume the previous dispatcher is always this one, since we set it\n      // at the beginning of the render phase and there's no re-entrance.\n\n      ReactCurrentDispatcher$1.current = ContextOnlyDispatcher;\n    }\n    function resetHooksOnUnwind(workInProgress) {\n      if (didScheduleRenderPhaseUpdate) {\n        // There were render phase updates. These are only valid for this render\n        // phase, which we are now aborting. Remove the updates from the queues so\n        // they do not persist to the next render. Do not remove updates from hooks\n        // that weren't processed.\n        //\n        // Only reset the updates from the queue if it has a clone. If it does\n        // not have a clone, that means it wasn't processed, and the updates were\n        // scheduled before we entered the render phase.\n        var hook = workInProgress.memoizedState;\n\n        while (hook !== null) {\n          var queue = hook.queue;\n\n          if (queue !== null) {\n            queue.pending = null;\n          }\n\n          hook = hook.next;\n        }\n\n        didScheduleRenderPhaseUpdate = false;\n      }\n\n      renderLanes = NoLanes;\n      currentlyRenderingFiber$1 = null;\n      currentHook = null;\n      workInProgressHook = null;\n\n      {\n        hookTypesDev = null;\n        hookTypesUpdateIndexDev = -1;\n        currentHookNameInDev = null;\n      }\n\n      didScheduleRenderPhaseUpdateDuringThisPass = false;\n      thenableIndexCounter = 0;\n      thenableState = null;\n    }\n\n    function mountWorkInProgressHook() {\n      var hook = {\n        memoizedState: null,\n        baseState: null,\n        baseQueue: null,\n        queue: null,\n        next: null\n      };\n\n      if (workInProgressHook === null) {\n        // This is the first hook in the list\n        currentlyRenderingFiber$1.memoizedState = workInProgressHook = hook;\n      } else {\n        // Append to the end of the list\n        workInProgressHook = workInProgressHook.next = hook;\n      }\n\n      return workInProgressHook;\n    }\n\n    function updateWorkInProgressHook() {\n      // This function is used both for updates and for re-renders triggered by a\n      // render phase update. It assumes there is either a current hook we can\n      // clone, or a work-in-progress hook from a previous render pass that we can\n      // use as a base.\n      var nextCurrentHook;\n\n      if (currentHook === null) {\n        var current = currentlyRenderingFiber$1.alternate;\n\n        if (current !== null) {\n          nextCurrentHook = current.memoizedState;\n        } else {\n          nextCurrentHook = null;\n        }\n      } else {\n        nextCurrentHook = currentHook.next;\n      }\n\n      var nextWorkInProgressHook;\n\n      if (workInProgressHook === null) {\n        nextWorkInProgressHook = currentlyRenderingFiber$1.memoizedState;\n      } else {\n        nextWorkInProgressHook = workInProgressHook.next;\n      }\n\n      if (nextWorkInProgressHook !== null) {\n        // There's already a work-in-progress. Reuse it.\n        workInProgressHook = nextWorkInProgressHook;\n        nextWorkInProgressHook = workInProgressHook.next;\n        currentHook = nextCurrentHook;\n      } else {\n        // Clone from the current hook.\n        if (nextCurrentHook === null) {\n          var currentFiber = currentlyRenderingFiber$1.alternate;\n\n          if (currentFiber === null) {\n            // This is the initial render. This branch is reached when the component\n            // suspends, resumes, then renders an additional hook.\n            // Should never be reached because we should switch to the mount dispatcher first.\n            throw new Error(\n              \"Update hook called on initial render. This is likely a bug in React. Please file an issue.\"\n            );\n          } else {\n            // This is an update. We should always have a current hook.\n            throw new Error(\n              \"Rendered more hooks than during the previous render.\"\n            );\n          }\n        }\n\n        currentHook = nextCurrentHook;\n        var newHook = {\n          memoizedState: currentHook.memoizedState,\n          baseState: currentHook.baseState,\n          baseQueue: currentHook.baseQueue,\n          queue: currentHook.queue,\n          next: null\n        };\n\n        if (workInProgressHook === null) {\n          // This is the first hook in the list.\n          currentlyRenderingFiber$1.memoizedState = workInProgressHook =\n            newHook;\n        } else {\n          // Append to the end of the list.\n          workInProgressHook = workInProgressHook.next = newHook;\n        }\n      }\n\n      return workInProgressHook;\n    } // NOTE: defining two versions of this function to avoid size impact when this feature is disabled.\n    // Previously this function was inlined, the additional `memoCache` property makes it not inlined.\n\n    var createFunctionComponentUpdateQueue;\n\n    {\n      createFunctionComponentUpdateQueue = function () {\n        return {\n          lastEffect: null,\n          events: null,\n          stores: null\n        };\n      };\n    }\n\n    function useThenable(thenable) {\n      // Track the position of the thenable within this fiber.\n      var index = thenableIndexCounter;\n      thenableIndexCounter += 1;\n\n      if (thenableState === null) {\n        thenableState = createThenableState();\n      }\n\n      var result = trackUsedThenable(thenableState, thenable, index);\n\n      if (\n        currentlyRenderingFiber$1.alternate === null &&\n        (workInProgressHook === null\n          ? currentlyRenderingFiber$1.memoizedState === null\n          : workInProgressHook.next === null)\n      ) {\n        // Initial render, and either this is the first time the component is\n        // called, or there were no Hooks called after this use() the previous\n        // time (perhaps because it threw). Subsequent Hook calls should use the\n        // mount dispatcher.\n        {\n          ReactCurrentDispatcher$1.current = HooksDispatcherOnMountInDEV;\n        }\n      }\n\n      return result;\n    }\n\n    function use(usable) {\n      if (usable !== null && typeof usable === \"object\") {\n        // $FlowFixMe[method-unbinding]\n        if (typeof usable.then === \"function\") {\n          // This is a thenable.\n          var thenable = usable;\n          return useThenable(thenable);\n        } else if (usable.$$typeof === REACT_CONTEXT_TYPE) {\n          var context = usable;\n          return readContext(context);\n        }\n      } // eslint-disable-next-line react-internal/safe-string-coercion\n\n      throw new Error(\n        \"An unsupported type was passed to use(): \" + String(usable)\n      );\n    }\n\n    function basicStateReducer(state, action) {\n      // $FlowFixMe[incompatible-use]: Flow doesn't like mixed types\n      return typeof action === \"function\" ? action(state) : action;\n    }\n\n    function mountReducer(reducer, initialArg, init) {\n      var hook = mountWorkInProgressHook();\n      var initialState;\n\n      if (init !== undefined) {\n        initialState = init(initialArg);\n\n        if (shouldDoubleInvokeUserFnsInHooksDEV) {\n          setIsStrictModeForDevtools(true);\n          init(initialArg);\n          setIsStrictModeForDevtools(false);\n        }\n      } else {\n        initialState = initialArg;\n      }\n\n      hook.memoizedState = hook.baseState = initialState;\n      var queue = {\n        pending: null,\n        lanes: NoLanes,\n        dispatch: null,\n        lastRenderedReducer: reducer,\n        lastRenderedState: initialState\n      };\n      hook.queue = queue;\n      var dispatch = (queue.dispatch = dispatchReducerAction.bind(\n        null,\n        currentlyRenderingFiber$1,\n        queue\n      ));\n      return [hook.memoizedState, dispatch];\n    }\n\n    function updateReducer(reducer, initialArg, init) {\n      var hook = updateWorkInProgressHook();\n      return updateReducerImpl(hook, currentHook, reducer);\n    }\n\n    function updateReducerImpl(hook, current, reducer) {\n      var queue = hook.queue;\n\n      if (queue === null) {\n        throw new Error(\n          \"Should have a queue. This is likely a bug in React. Please file an issue.\"\n        );\n      }\n\n      queue.lastRenderedReducer = reducer; // The last rebase update that is NOT part of the base state.\n\n      var baseQueue = hook.baseQueue; // The last pending update that hasn't been processed yet.\n\n      var pendingQueue = queue.pending;\n\n      if (pendingQueue !== null) {\n        // We have new updates that haven't been processed yet.\n        // We'll add them to the base queue.\n        if (baseQueue !== null) {\n          // Merge the pending queue and the base queue.\n          var baseFirst = baseQueue.next;\n          var pendingFirst = pendingQueue.next;\n          baseQueue.next = pendingFirst;\n          pendingQueue.next = baseFirst;\n        }\n\n        {\n          if (current.baseQueue !== baseQueue) {\n            // Internal invariant that should never happen, but feasibly could in\n            // the future if we implement resuming, or some form of that.\n            error(\n              \"Internal error: Expected work-in-progress queue to be a clone. \" +\n                \"This is a bug in React.\"\n            );\n          }\n        }\n\n        current.baseQueue = baseQueue = pendingQueue;\n        queue.pending = null;\n      }\n\n      var baseState = hook.baseState;\n\n      if (baseQueue === null) {\n        // If there are no pending updates, then the memoized state should be the\n        // same as the base state. Currently these only diverge in the case of\n        // useOptimistic, because useOptimistic accepts a new baseState on\n        // every render.\n        hook.memoizedState = baseState; // We don't need to call markWorkInProgressReceivedUpdate because\n        // baseState is derived from other reactive values.\n      } else {\n        // We have a queue to process.\n        var first = baseQueue.next;\n        var newState = baseState;\n        var newBaseState = null;\n        var newBaseQueueFirst = null;\n        var newBaseQueueLast = null;\n        var update = first;\n        var didReadFromEntangledAsyncAction = false;\n\n        do {\n          // An extra OffscreenLane bit is added to updates that were made to\n          // a hidden tree, so that we can distinguish them from updates that were\n          // already there when the tree was hidden.\n          var updateLane = removeLanes(update.lane, OffscreenLane);\n          var isHiddenUpdate = updateLane !== update.lane; // Check if this update was made while the tree was hidden. If so, then\n          // it's not a \"base\" update and we should disregard the extra base lanes\n          // that were added to renderLanes when we entered the Offscreen tree.\n\n          var shouldSkipUpdate = isHiddenUpdate\n            ? !isSubsetOfLanes(getWorkInProgressRootRenderLanes(), updateLane)\n            : !isSubsetOfLanes(renderLanes, updateLane);\n\n          if (shouldSkipUpdate) {\n            // Priority is insufficient. Skip this update. If this is the first\n            // skipped update, the previous update/state is the new base\n            // update/state.\n            var clone = {\n              lane: updateLane,\n              revertLane: update.revertLane,\n              action: update.action,\n              hasEagerState: update.hasEagerState,\n              eagerState: update.eagerState,\n              next: null\n            };\n\n            if (newBaseQueueLast === null) {\n              newBaseQueueFirst = newBaseQueueLast = clone;\n              newBaseState = newState;\n            } else {\n              newBaseQueueLast = newBaseQueueLast.next = clone;\n            } // Update the remaining priority in the queue.\n            // TODO: Don't need to accumulate this. Instead, we can remove\n            // renderLanes from the original lanes.\n\n            currentlyRenderingFiber$1.lanes = mergeLanes(\n              currentlyRenderingFiber$1.lanes,\n              updateLane\n            );\n            markSkippedUpdateLanes(updateLane);\n          } else {\n            {\n              // This is not an optimistic update, and we're going to apply it now.\n              // But, if there were earlier updates that were skipped, we need to\n              // leave this update in the queue so it can be rebased later.\n              if (newBaseQueueLast !== null) {\n                var _clone = {\n                  // This update is going to be committed so we never want uncommit\n                  // it. Using NoLane works because 0 is a subset of all bitmasks, so\n                  // this will never be skipped by the check above.\n                  lane: NoLane,\n                  revertLane: NoLane,\n                  action: update.action,\n                  hasEagerState: update.hasEagerState,\n                  eagerState: update.eagerState,\n                  next: null\n                };\n                newBaseQueueLast = newBaseQueueLast.next = _clone;\n              } // Check if this update is part of a pending async action. If so,\n              // we'll need to suspend until the action has finished, so that it's\n              // batched together with future updates in the same action.\n\n              if (updateLane === peekEntangledActionLane()) {\n                didReadFromEntangledAsyncAction = true;\n              }\n            } // Process this update.\n\n            var action = update.action;\n\n            if (shouldDoubleInvokeUserFnsInHooksDEV) {\n              reducer(newState, action);\n            }\n\n            if (update.hasEagerState) {\n              // If this update is a state update (not a reducer) and was processed eagerly,\n              // we can use the eagerly computed state\n              newState = update.eagerState;\n            } else {\n              newState = reducer(newState, action);\n            }\n          }\n\n          update = update.next;\n        } while (update !== null && update !== first);\n\n        if (newBaseQueueLast === null) {\n          newBaseState = newState;\n        } else {\n          newBaseQueueLast.next = newBaseQueueFirst;\n        } // Mark that the fiber performed work, but only if the new state is\n        // different from the current state.\n\n        if (!objectIs(newState, hook.memoizedState)) {\n          markWorkInProgressReceivedUpdate(); // Check if this update is part of a pending async action. If so, we'll\n          // need to suspend until the action has finished, so that it's batched\n          // together with future updates in the same action.\n          // TODO: Once we support hooks inside useMemo (or an equivalent\n          // memoization boundary like Forget), hoist this logic so that it only\n          // suspends if the memo boundary produces a new value.\n\n          if (didReadFromEntangledAsyncAction) {\n            var entangledActionThenable = peekEntangledActionThenable();\n\n            if (entangledActionThenable !== null) {\n              // TODO: Instead of the throwing the thenable directly, throw a\n              // special object like `use` does so we can detect if it's captured\n              // by userspace.\n              throw entangledActionThenable;\n            }\n          }\n        }\n\n        hook.memoizedState = newState;\n        hook.baseState = newBaseState;\n        hook.baseQueue = newBaseQueueLast;\n        queue.lastRenderedState = newState;\n      }\n\n      if (baseQueue === null) {\n        // `queue.lanes` is used for entangling transitions. We can set it back to\n        // zero once the queue is empty.\n        queue.lanes = NoLanes;\n      }\n\n      var dispatch = queue.dispatch;\n      return [hook.memoizedState, dispatch];\n    }\n\n    function rerenderReducer(reducer, initialArg, init) {\n      var hook = updateWorkInProgressHook();\n      var queue = hook.queue;\n\n      if (queue === null) {\n        throw new Error(\n          \"Should have a queue. This is likely a bug in React. Please file an issue.\"\n        );\n      }\n\n      queue.lastRenderedReducer = reducer; // This is a re-render. Apply the new render phase updates to the previous\n      // work-in-progress hook.\n\n      var dispatch = queue.dispatch;\n      var lastRenderPhaseUpdate = queue.pending;\n      var newState = hook.memoizedState;\n\n      if (lastRenderPhaseUpdate !== null) {\n        // The queue doesn't persist past this render pass.\n        queue.pending = null;\n        var firstRenderPhaseUpdate = lastRenderPhaseUpdate.next;\n        var update = firstRenderPhaseUpdate;\n\n        do {\n          // Process this render phase update. We don't have to check the\n          // priority because it will always be the same as the current\n          // render's.\n          var action = update.action;\n          newState = reducer(newState, action);\n          update = update.next;\n        } while (update !== firstRenderPhaseUpdate); // Mark that the fiber performed work, but only if the new state is\n        // different from the current state.\n\n        if (!objectIs(newState, hook.memoizedState)) {\n          markWorkInProgressReceivedUpdate();\n        }\n\n        hook.memoizedState = newState; // Don't persist the state accumulated from the render phase updates to\n        // the base state unless the queue is empty.\n        // TODO: Not sure if this is the desired semantics, but it's what we\n        // do for gDSFP. I can't remember why.\n\n        if (hook.baseQueue === null) {\n          hook.baseState = newState;\n        }\n\n        queue.lastRenderedState = newState;\n      }\n\n      return [newState, dispatch];\n    }\n\n    function mountSyncExternalStore(subscribe, getSnapshot, getServerSnapshot) {\n      var fiber = currentlyRenderingFiber$1;\n      var hook = mountWorkInProgressHook();\n      var nextSnapshot;\n\n      {\n        nextSnapshot = getSnapshot();\n\n        {\n          if (!didWarnUncachedGetSnapshot) {\n            var cachedSnapshot = getSnapshot();\n\n            if (!objectIs(nextSnapshot, cachedSnapshot)) {\n              error(\n                \"The result of getSnapshot should be cached to avoid an infinite loop\"\n              );\n\n              didWarnUncachedGetSnapshot = true;\n            }\n          }\n        } // Unless we're rendering a blocking lane, schedule a consistency check.\n        // Right before committing, we will walk the tree and check if any of the\n        // stores were mutated.\n        //\n        // We won't do this if we're hydrating server-rendered content, because if\n        // the content is stale, it's already visible anyway. Instead we'll patch\n        // it up in a passive effect.\n\n        var root = getWorkInProgressRoot();\n\n        if (root === null) {\n          throw new Error(\n            \"Expected a work-in-progress root. This is a bug in React. Please file an issue.\"\n          );\n        }\n\n        var rootRenderLanes = getWorkInProgressRootRenderLanes();\n\n        if (!includesBlockingLane(root, rootRenderLanes)) {\n          pushStoreConsistencyCheck(fiber, getSnapshot, nextSnapshot);\n        }\n      } // Read the current snapshot from the store on every render. This breaks the\n      // normal rules of React, and only works because store updates are\n      // always synchronous.\n\n      hook.memoizedState = nextSnapshot;\n      var inst = {\n        value: nextSnapshot,\n        getSnapshot: getSnapshot\n      };\n      hook.queue = inst; // Schedule an effect to subscribe to the store.\n\n      mountEffect(subscribeToStore.bind(null, fiber, inst, subscribe), [\n        subscribe\n      ]); // Schedule an effect to update the mutable instance fields. We will update\n      // this whenever subscribe, getSnapshot, or value changes. Because there's no\n      // clean-up function, and we track the deps correctly, we can call pushEffect\n      // directly, without storing any additional state. For the same reason, we\n      // don't need to set a static flag, either.\n\n      fiber.flags |= Passive$1;\n      pushEffect(\n        HasEffect | Passive,\n        updateStoreInstance.bind(null, fiber, inst, nextSnapshot, getSnapshot),\n        createEffectInstance(),\n        null\n      );\n      return nextSnapshot;\n    }\n\n    function updateSyncExternalStore(\n      subscribe,\n      getSnapshot,\n      getServerSnapshot\n    ) {\n      var fiber = currentlyRenderingFiber$1;\n      var hook = updateWorkInProgressHook(); // Read the current snapshot from the store on every render. This breaks the\n      // normal rules of React, and only works because store updates are\n      // always synchronous.\n\n      var nextSnapshot;\n\n      {\n        nextSnapshot = getSnapshot();\n\n        {\n          if (!didWarnUncachedGetSnapshot) {\n            var cachedSnapshot = getSnapshot();\n\n            if (!objectIs(nextSnapshot, cachedSnapshot)) {\n              error(\n                \"The result of getSnapshot should be cached to avoid an infinite loop\"\n              );\n\n              didWarnUncachedGetSnapshot = true;\n            }\n          }\n        }\n      }\n\n      var prevSnapshot = (currentHook || hook).memoizedState;\n      var snapshotChanged = !objectIs(prevSnapshot, nextSnapshot);\n\n      if (snapshotChanged) {\n        hook.memoizedState = nextSnapshot;\n        markWorkInProgressReceivedUpdate();\n      }\n\n      var inst = hook.queue;\n      updateEffect(subscribeToStore.bind(null, fiber, inst, subscribe), [\n        subscribe\n      ]); // Whenever getSnapshot or subscribe changes, we need to check in the\n      // commit phase if there was an interleaved mutation. In concurrent mode\n      // this can happen all the time, but even in synchronous mode, an earlier\n      // effect may have mutated the store.\n\n      if (\n        inst.getSnapshot !== getSnapshot ||\n        snapshotChanged || // Check if the subscribe function changed. We can save some memory by\n        // checking whether we scheduled a subscription effect above.\n        (workInProgressHook !== null &&\n          workInProgressHook.memoizedState.tag & HasEffect)\n      ) {\n        fiber.flags |= Passive$1;\n        pushEffect(\n          HasEffect | Passive,\n          updateStoreInstance.bind(\n            null,\n            fiber,\n            inst,\n            nextSnapshot,\n            getSnapshot\n          ),\n          createEffectInstance(),\n          null\n        ); // Unless we're rendering a blocking lane, schedule a consistency check.\n        // Right before committing, we will walk the tree and check if any of the\n        // stores were mutated.\n\n        var root = getWorkInProgressRoot();\n\n        if (root === null) {\n          throw new Error(\n            \"Expected a work-in-progress root. This is a bug in React. Please file an issue.\"\n          );\n        }\n\n        if (!includesBlockingLane(root, renderLanes)) {\n          pushStoreConsistencyCheck(fiber, getSnapshot, nextSnapshot);\n        }\n      }\n\n      return nextSnapshot;\n    }\n\n    function pushStoreConsistencyCheck(fiber, getSnapshot, renderedSnapshot) {\n      fiber.flags |= StoreConsistency;\n      var check = {\n        getSnapshot: getSnapshot,\n        value: renderedSnapshot\n      };\n      var componentUpdateQueue = currentlyRenderingFiber$1.updateQueue;\n\n      if (componentUpdateQueue === null) {\n        componentUpdateQueue = createFunctionComponentUpdateQueue();\n        currentlyRenderingFiber$1.updateQueue = componentUpdateQueue;\n        componentUpdateQueue.stores = [check];\n      } else {\n        var stores = componentUpdateQueue.stores;\n\n        if (stores === null) {\n          componentUpdateQueue.stores = [check];\n        } else {\n          stores.push(check);\n        }\n      }\n    }\n\n    function updateStoreInstance(fiber, inst, nextSnapshot, getSnapshot) {\n      // These are updated in the passive phase\n      inst.value = nextSnapshot;\n      inst.getSnapshot = getSnapshot; // Something may have been mutated in between render and commit. This could\n      // have been in an event that fired before the passive effects, or it could\n      // have been in a layout effect. In that case, we would have used the old\n      // snapsho and getSnapshot values to bail out. We need to check one more time.\n\n      if (checkIfSnapshotChanged(inst)) {\n        // Force a re-render.\n        forceStoreRerender(fiber);\n      }\n    }\n\n    function subscribeToStore(fiber, inst, subscribe) {\n      var handleStoreChange = function () {\n        // The store changed. Check if the snapshot changed since the last time we\n        // read from the store.\n        if (checkIfSnapshotChanged(inst)) {\n          // Force a re-render.\n          forceStoreRerender(fiber);\n        }\n      }; // Subscribe to the store and return a clean-up function.\n\n      return subscribe(handleStoreChange);\n    }\n\n    function checkIfSnapshotChanged(inst) {\n      var latestGetSnapshot = inst.getSnapshot;\n      var prevValue = inst.value;\n\n      try {\n        var nextValue = latestGetSnapshot();\n        return !objectIs(prevValue, nextValue);\n      } catch (error) {\n        return true;\n      }\n    }\n\n    function forceStoreRerender(fiber) {\n      var root = enqueueConcurrentRenderForLane(fiber, SyncLane);\n\n      if (root !== null) {\n        scheduleUpdateOnFiber(root, fiber, SyncLane);\n      }\n    }\n\n    function mountStateImpl(initialState) {\n      var hook = mountWorkInProgressHook();\n\n      if (typeof initialState === \"function\") {\n        var initialStateInitializer = initialState; // $FlowFixMe[incompatible-use]: Flow doesn't like mixed types\n\n        initialState = initialStateInitializer();\n\n        if (shouldDoubleInvokeUserFnsInHooksDEV) {\n          setIsStrictModeForDevtools(true); // $FlowFixMe[incompatible-use]: Flow doesn't like mixed types\n\n          initialStateInitializer();\n          setIsStrictModeForDevtools(false);\n        }\n      }\n\n      hook.memoizedState = hook.baseState = initialState;\n      var queue = {\n        pending: null,\n        lanes: NoLanes,\n        dispatch: null,\n        lastRenderedReducer: basicStateReducer,\n        lastRenderedState: initialState\n      };\n      hook.queue = queue;\n      return hook;\n    }\n\n    function mountState(initialState) {\n      var hook = mountStateImpl(initialState);\n      var queue = hook.queue;\n      var dispatch = dispatchSetState.bind(\n        null,\n        currentlyRenderingFiber$1,\n        queue\n      );\n      queue.dispatch = dispatch;\n      return [hook.memoizedState, dispatch];\n    }\n\n    function updateState(initialState) {\n      return updateReducer(basicStateReducer);\n    }\n\n    function rerenderState(initialState) {\n      return rerenderReducer(basicStateReducer);\n    }\n\n    function pushEffect(tag, create, inst, deps) {\n      var effect = {\n        tag: tag,\n        create: create,\n        inst: inst,\n        deps: deps,\n        // Circular\n        next: null\n      };\n      var componentUpdateQueue = currentlyRenderingFiber$1.updateQueue;\n\n      if (componentUpdateQueue === null) {\n        componentUpdateQueue = createFunctionComponentUpdateQueue();\n        currentlyRenderingFiber$1.updateQueue = componentUpdateQueue;\n        componentUpdateQueue.lastEffect = effect.next = effect;\n      } else {\n        var lastEffect = componentUpdateQueue.lastEffect;\n\n        if (lastEffect === null) {\n          componentUpdateQueue.lastEffect = effect.next = effect;\n        } else {\n          var firstEffect = lastEffect.next;\n          lastEffect.next = effect;\n          effect.next = firstEffect;\n          componentUpdateQueue.lastEffect = effect;\n        }\n      }\n\n      return effect;\n    }\n\n    function createEffectInstance() {\n      return {\n        destroy: undefined\n      };\n    }\n\n    function mountRef(initialValue) {\n      var hook = mountWorkInProgressHook();\n\n      {\n        var _ref2 = {\n          current: initialValue\n        };\n        hook.memoizedState = _ref2;\n        return _ref2;\n      }\n    }\n\n    function updateRef(initialValue) {\n      var hook = updateWorkInProgressHook();\n      return hook.memoizedState;\n    }\n\n    function mountEffectImpl(fiberFlags, hookFlags, create, deps) {\n      var hook = mountWorkInProgressHook();\n      var nextDeps = deps === undefined ? null : deps;\n      currentlyRenderingFiber$1.flags |= fiberFlags;\n      hook.memoizedState = pushEffect(\n        HasEffect | hookFlags,\n        create,\n        createEffectInstance(),\n        nextDeps\n      );\n    }\n\n    function updateEffectImpl(fiberFlags, hookFlags, create, deps) {\n      var hook = updateWorkInProgressHook();\n      var nextDeps = deps === undefined ? null : deps;\n      var effect = hook.memoizedState;\n      var inst = effect.inst; // currentHook is null on initial mount when rerendering after a render phase\n      // state update or for strict mode.\n\n      if (currentHook !== null) {\n        if (nextDeps !== null) {\n          var prevEffect = currentHook.memoizedState;\n          var prevDeps = prevEffect.deps;\n\n          if (areHookInputsEqual(nextDeps, prevDeps)) {\n            hook.memoizedState = pushEffect(hookFlags, create, inst, nextDeps);\n            return;\n          }\n        }\n      }\n\n      currentlyRenderingFiber$1.flags |= fiberFlags;\n      hook.memoizedState = pushEffect(\n        HasEffect | hookFlags,\n        create,\n        inst,\n        nextDeps\n      );\n    }\n\n    function mountEffect(create, deps) {\n      if (\n        (currentlyRenderingFiber$1.mode & StrictEffectsMode) !== NoMode &&\n        (currentlyRenderingFiber$1.mode & NoStrictPassiveEffectsMode) === NoMode\n      ) {\n        mountEffectImpl(\n          MountPassiveDev | Passive$1 | PassiveStatic,\n          Passive,\n          create,\n          deps\n        );\n      } else {\n        mountEffectImpl(Passive$1 | PassiveStatic, Passive, create, deps);\n      }\n    }\n\n    function updateEffect(create, deps) {\n      updateEffectImpl(Passive$1, Passive, create, deps);\n    }\n\n    function mountInsertionEffect(create, deps) {\n      mountEffectImpl(Update, Insertion, create, deps);\n    }\n\n    function updateInsertionEffect(create, deps) {\n      return updateEffectImpl(Update, Insertion, create, deps);\n    }\n\n    function mountLayoutEffect(create, deps) {\n      var fiberFlags = Update | LayoutStatic;\n\n      if ((currentlyRenderingFiber$1.mode & StrictEffectsMode) !== NoMode) {\n        fiberFlags |= MountLayoutDev;\n      }\n\n      return mountEffectImpl(fiberFlags, Layout, create, deps);\n    }\n\n    function updateLayoutEffect(create, deps) {\n      return updateEffectImpl(Update, Layout, create, deps);\n    }\n\n    function imperativeHandleEffect(create, ref) {\n      if (typeof ref === \"function\") {\n        var refCallback = ref;\n        var inst = create();\n        refCallback(inst);\n        return function () {\n          refCallback(null);\n        };\n      } else if (ref !== null && ref !== undefined) {\n        var refObject = ref;\n\n        {\n          if (!refObject.hasOwnProperty(\"current\")) {\n            error(\n              \"Expected useImperativeHandle() first argument to either be a \" +\n                \"ref callback or React.createRef() object. Instead received: %s.\",\n              \"an object with keys {\" + Object.keys(refObject).join(\", \") + \"}\"\n            );\n          }\n        }\n\n        var _inst = create();\n\n        refObject.current = _inst;\n        return function () {\n          refObject.current = null;\n        };\n      }\n    }\n\n    function mountImperativeHandle(ref, create, deps) {\n      {\n        if (typeof create !== \"function\") {\n          error(\n            \"Expected useImperativeHandle() second argument to be a function \" +\n              \"that creates a handle. Instead received: %s.\",\n            create !== null ? typeof create : \"null\"\n          );\n        }\n      } // TODO: If deps are provided, should we skip comparing the ref itself?\n\n      var effectDeps =\n        deps !== null && deps !== undefined ? deps.concat([ref]) : null;\n      var fiberFlags = Update | LayoutStatic;\n\n      if ((currentlyRenderingFiber$1.mode & StrictEffectsMode) !== NoMode) {\n        fiberFlags |= MountLayoutDev;\n      }\n\n      mountEffectImpl(\n        fiberFlags,\n        Layout,\n        imperativeHandleEffect.bind(null, create, ref),\n        effectDeps\n      );\n    }\n\n    function updateImperativeHandle(ref, create, deps) {\n      {\n        if (typeof create !== \"function\") {\n          error(\n            \"Expected useImperativeHandle() second argument to be a function \" +\n              \"that creates a handle. Instead received: %s.\",\n            create !== null ? typeof create : \"null\"\n          );\n        }\n      } // TODO: If deps are provided, should we skip comparing the ref itself?\n\n      var effectDeps =\n        deps !== null && deps !== undefined ? deps.concat([ref]) : null;\n      updateEffectImpl(\n        Update,\n        Layout,\n        imperativeHandleEffect.bind(null, create, ref),\n        effectDeps\n      );\n    }\n\n    function mountDebugValue(value, formatterFn) {\n      // This hook is normally a no-op.\n      // The react-debug-hooks package injects its own implementation\n      // so that e.g. DevTools can display custom hook values.\n    }\n\n    var updateDebugValue = mountDebugValue;\n\n    function mountCallback(callback, deps) {\n      var hook = mountWorkInProgressHook();\n      var nextDeps = deps === undefined ? null : deps;\n      hook.memoizedState = [callback, nextDeps];\n      return callback;\n    }\n\n    function updateCallback(callback, deps) {\n      var hook = updateWorkInProgressHook();\n      var nextDeps = deps === undefined ? null : deps;\n      var prevState = hook.memoizedState;\n\n      if (nextDeps !== null) {\n        var prevDeps = prevState[1];\n\n        if (areHookInputsEqual(nextDeps, prevDeps)) {\n          return prevState[0];\n        }\n      }\n\n      hook.memoizedState = [callback, nextDeps];\n      return callback;\n    }\n\n    function mountMemo(nextCreate, deps) {\n      var hook = mountWorkInProgressHook();\n      var nextDeps = deps === undefined ? null : deps;\n      var nextValue = nextCreate();\n\n      if (shouldDoubleInvokeUserFnsInHooksDEV) {\n        setIsStrictModeForDevtools(true);\n        nextCreate();\n        setIsStrictModeForDevtools(false);\n      }\n\n      hook.memoizedState = [nextValue, nextDeps];\n      return nextValue;\n    }\n\n    function updateMemo(nextCreate, deps) {\n      var hook = updateWorkInProgressHook();\n      var nextDeps = deps === undefined ? null : deps;\n      var prevState = hook.memoizedState; // Assume these are defined. If they're not, areHookInputsEqual will warn.\n\n      if (nextDeps !== null) {\n        var prevDeps = prevState[1];\n\n        if (areHookInputsEqual(nextDeps, prevDeps)) {\n          return prevState[0];\n        }\n      }\n\n      var nextValue = nextCreate();\n\n      if (shouldDoubleInvokeUserFnsInHooksDEV) {\n        setIsStrictModeForDevtools(true);\n        nextCreate();\n        setIsStrictModeForDevtools(false);\n      }\n\n      hook.memoizedState = [nextValue, nextDeps];\n      return nextValue;\n    }\n\n    function mountDeferredValue(value, initialValue) {\n      var hook = mountWorkInProgressHook();\n      return mountDeferredValueImpl(hook, value, initialValue);\n    }\n\n    function updateDeferredValue(value, initialValue) {\n      var hook = updateWorkInProgressHook();\n      var resolvedCurrentHook = currentHook;\n      var prevValue = resolvedCurrentHook.memoizedState;\n      return updateDeferredValueImpl(hook, prevValue, value, initialValue);\n    }\n\n    function rerenderDeferredValue(value, initialValue) {\n      var hook = updateWorkInProgressHook();\n\n      if (currentHook === null) {\n        // This is a rerender during a mount.\n        return mountDeferredValueImpl(hook, value, initialValue);\n      } else {\n        // This is a rerender during an update.\n        var prevValue = currentHook.memoizedState;\n        return updateDeferredValueImpl(hook, prevValue, value, initialValue);\n      }\n    }\n\n    function mountDeferredValueImpl(hook, value, initialValue) {\n      if (\n        // When `initialValue` is provided, we defer the initial render even if the\n        // current render is not synchronous.\n        initialValue !== undefined && // However, to avoid waterfalls, we do not defer if this render\n        // was itself spawned by an earlier useDeferredValue. Check if DeferredLane\n        // is part of the render lanes.\n        !includesSomeLane(renderLanes, DeferredLane)\n      ) {\n        // Render with the initial value\n        hook.memoizedState = initialValue; // Schedule a deferred render to switch to the final value.\n\n        var deferredLane = requestDeferredLane();\n        currentlyRenderingFiber$1.lanes = mergeLanes(\n          currentlyRenderingFiber$1.lanes,\n          deferredLane\n        );\n        markSkippedUpdateLanes(deferredLane);\n        return initialValue;\n      } else {\n        hook.memoizedState = value;\n        return value;\n      }\n    }\n\n    function updateDeferredValueImpl(hook, prevValue, value, initialValue) {\n      if (objectIs(value, prevValue)) {\n        // The incoming value is referentially identical to the currently rendered\n        // value, so we can bail out quickly.\n        return value;\n      } else {\n        // Received a new value that's different from the current value.\n        // Check if we're inside a hidden tree\n        if (isCurrentTreeHidden()) {\n          // Revealing a prerendered tree is considered the same as mounting new\n          // one, so we reuse the \"mount\" path in this case.\n          var resultValue = mountDeferredValueImpl(hook, value, initialValue); // Unlike during an actual mount, we need to mark this as an update if\n          // the value changed.\n\n          if (!objectIs(resultValue, prevValue)) {\n            markWorkInProgressReceivedUpdate();\n          }\n\n          return resultValue;\n        }\n\n        var shouldDeferValue = !includesOnlyNonUrgentLanes(renderLanes);\n\n        if (shouldDeferValue) {\n          // This is an urgent update. Since the value has changed, keep using the\n          // previous value and spawn a deferred render to update it later.\n          // Schedule a deferred render\n          var deferredLane = requestDeferredLane();\n          currentlyRenderingFiber$1.lanes = mergeLanes(\n            currentlyRenderingFiber$1.lanes,\n            deferredLane\n          );\n          markSkippedUpdateLanes(deferredLane); // Reuse the previous value. We do not need to mark this as an update,\n          // because we did not render a new value.\n\n          return prevValue;\n        } else {\n          // This is not an urgent update, so we can use the latest value regardless\n          // of what it is. No need to defer it.\n          // Mark this as an update to prevent the fiber from bailing out.\n          markWorkInProgressReceivedUpdate();\n          hook.memoizedState = value;\n          return value;\n        }\n      }\n    }\n\n    function startTransition(\n      fiber,\n      queue,\n      pendingState,\n      finishedState,\n      callback,\n      options\n    ) {\n      var previousPriority = getCurrentUpdatePriority();\n      setCurrentUpdatePriority(\n        higherEventPriority(previousPriority, ContinuousEventPriority)\n      );\n      var prevTransition = ReactCurrentBatchConfig$2.transition;\n      var currentTransition = {\n        _callbacks: new Set()\n      };\n\n      {\n        ReactCurrentBatchConfig$2.transition = null;\n        dispatchSetState(fiber, queue, pendingState);\n        ReactCurrentBatchConfig$2.transition = currentTransition;\n      }\n\n      {\n        ReactCurrentBatchConfig$2.transition._updatedFibers = new Set();\n      }\n\n      try {\n        var returnValue, thenable, thenableForFinishedState;\n        if (enableAsyncActions);\n        else {\n          // Async actions are not enabled.\n          dispatchSetState(fiber, queue, finishedState);\n          callback();\n        }\n      } catch (error) {\n        {\n          // The error rethrowing behavior is only enabled when the async actions\n          // feature is on, even for sync actions.\n          throw error;\n        }\n      } finally {\n        setCurrentUpdatePriority(previousPriority);\n        ReactCurrentBatchConfig$2.transition = prevTransition;\n\n        {\n          if (prevTransition === null && currentTransition._updatedFibers) {\n            var updatedFibersCount = currentTransition._updatedFibers.size;\n\n            currentTransition._updatedFibers.clear();\n\n            if (updatedFibersCount > 10) {\n              warn(\n                \"Detected a large number of updates inside startTransition. \" +\n                  \"If this is due to a subscription please re-write it to use React provided hooks. \" +\n                  \"Otherwise concurrent mode guarantees are off the table.\"\n              );\n            }\n          }\n        }\n      }\n    }\n\n    function mountTransition() {\n      var stateHook = mountStateImpl(false); // The `start` method never changes.\n\n      var start = startTransition.bind(\n        null,\n        currentlyRenderingFiber$1,\n        stateHook.queue,\n        true,\n        false\n      );\n      var hook = mountWorkInProgressHook();\n      hook.memoizedState = start;\n      return [false, start];\n    }\n\n    function updateTransition() {\n      var _updateState = updateState(),\n        booleanOrThenable = _updateState[0];\n\n      var hook = updateWorkInProgressHook();\n      var start = hook.memoizedState;\n      var isPending =\n        typeof booleanOrThenable === \"boolean\"\n          ? booleanOrThenable // This will suspend until the async action scope has finished.\n          : useThenable(booleanOrThenable);\n      return [isPending, start];\n    }\n\n    function rerenderTransition() {\n      var _rerenderState = rerenderState(),\n        booleanOrThenable = _rerenderState[0];\n\n      var hook = updateWorkInProgressHook();\n      var start = hook.memoizedState;\n      var isPending =\n        typeof booleanOrThenable === \"boolean\"\n          ? booleanOrThenable // This will suspend until the async action scope has finished.\n          : useThenable(booleanOrThenable);\n      return [isPending, start];\n    }\n\n    function mountId() {\n      var hook = mountWorkInProgressHook();\n      var root = getWorkInProgressRoot(); // TODO: In Fizz, id generation is specific to each server config. Maybe we\n      // should do this in Fiber, too? Deferring this decision for now because\n      // there's no other place to store the prefix except for an internal field on\n      // the public createRoot object, which the fiber tree does not currently have\n      // a reference to.\n\n      var identifierPrefix = root.identifierPrefix;\n      var id;\n\n      {\n        // Use a lowercase r prefix for client-generated ids.\n        var globalClientId = globalClientIdCounter++;\n        id = \":\" + identifierPrefix + \"r\" + globalClientId.toString(32) + \":\";\n      }\n\n      hook.memoizedState = id;\n      return id;\n    }\n\n    function updateId() {\n      var hook = updateWorkInProgressHook();\n      var id = hook.memoizedState;\n      return id;\n    }\n\n    function dispatchReducerAction(fiber, queue, action) {\n      {\n        if (typeof arguments[3] === \"function\") {\n          error(\n            \"State updates from the useState() and useReducer() Hooks don't support the \" +\n              \"second callback argument. To execute a side effect after \" +\n              \"rendering, declare it in the component body with useEffect().\"\n          );\n        }\n      }\n\n      var lane = requestUpdateLane(fiber);\n      var update = {\n        lane: lane,\n        revertLane: NoLane,\n        action: action,\n        hasEagerState: false,\n        eagerState: null,\n        next: null\n      };\n\n      if (isRenderPhaseUpdate(fiber)) {\n        enqueueRenderPhaseUpdate(queue, update);\n      } else {\n        var root = enqueueConcurrentHookUpdate(fiber, queue, update, lane);\n\n        if (root !== null) {\n          scheduleUpdateOnFiber(root, fiber, lane);\n          entangleTransitionUpdate(root, queue, lane);\n        }\n      }\n    }\n\n    function dispatchSetState(fiber, queue, action) {\n      {\n        if (typeof arguments[3] === \"function\") {\n          error(\n            \"State updates from the useState() and useReducer() Hooks don't support the \" +\n              \"second callback argument. To execute a side effect after \" +\n              \"rendering, declare it in the component body with useEffect().\"\n          );\n        }\n      }\n\n      var lane = requestUpdateLane(fiber);\n      var update = {\n        lane: lane,\n        revertLane: NoLane,\n        action: action,\n        hasEagerState: false,\n        eagerState: null,\n        next: null\n      };\n\n      if (isRenderPhaseUpdate(fiber)) {\n        enqueueRenderPhaseUpdate(queue, update);\n      } else {\n        var alternate = fiber.alternate;\n\n        if (\n          fiber.lanes === NoLanes &&\n          (alternate === null || alternate.lanes === NoLanes)\n        ) {\n          // The queue is currently empty, which means we can eagerly compute the\n          // next state before entering the render phase. If the new state is the\n          // same as the current state, we may be able to bail out entirely.\n          var lastRenderedReducer = queue.lastRenderedReducer;\n\n          if (lastRenderedReducer !== null) {\n            var prevDispatcher;\n\n            {\n              prevDispatcher = ReactCurrentDispatcher$1.current;\n              ReactCurrentDispatcher$1.current =\n                InvalidNestedHooksDispatcherOnUpdateInDEV;\n            }\n\n            try {\n              var currentState = queue.lastRenderedState;\n              var eagerState = lastRenderedReducer(currentState, action); // Stash the eagerly computed state, and the reducer used to compute\n              // it, on the update object. If the reducer hasn't changed by the\n              // time we enter the render phase, then the eager state can be used\n              // without calling the reducer again.\n\n              update.hasEagerState = true;\n              update.eagerState = eagerState;\n\n              if (objectIs(eagerState, currentState)) {\n                // Fast path. We can bail out without scheduling React to re-render.\n                // It's still possible that we'll need to rebase this update later,\n                // if the component re-renders for a different reason and by that\n                // time the reducer has changed.\n                // TODO: Do we still need to entangle transitions in this case?\n                enqueueConcurrentHookUpdateAndEagerlyBailout(\n                  fiber,\n                  queue,\n                  update\n                );\n                return;\n              }\n            } catch (error) {\n              // Suppress the error. It will throw again in the render phase.\n            } finally {\n              {\n                ReactCurrentDispatcher$1.current = prevDispatcher;\n              }\n            }\n          }\n        }\n\n        var root = enqueueConcurrentHookUpdate(fiber, queue, update, lane);\n\n        if (root !== null) {\n          scheduleUpdateOnFiber(root, fiber, lane);\n          entangleTransitionUpdate(root, queue, lane);\n        }\n      }\n    }\n\n    function isRenderPhaseUpdate(fiber) {\n      var alternate = fiber.alternate;\n      return (\n        fiber === currentlyRenderingFiber$1 ||\n        (alternate !== null && alternate === currentlyRenderingFiber$1)\n      );\n    }\n\n    function enqueueRenderPhaseUpdate(queue, update) {\n      // This is a render phase update. Stash it in a lazily-created map of\n      // queue -> linked list of updates. After this render pass, we'll restart\n      // and apply the stashed updates on top of the work-in-progress hook.\n      didScheduleRenderPhaseUpdateDuringThisPass =\n        didScheduleRenderPhaseUpdate = true;\n      var pending = queue.pending;\n\n      if (pending === null) {\n        // This is the first update. Create a circular list.\n        update.next = update;\n      } else {\n        update.next = pending.next;\n        pending.next = update;\n      }\n\n      queue.pending = update;\n    } // TODO: Move to ReactFiberConcurrentUpdates?\n\n    function entangleTransitionUpdate(root, queue, lane) {\n      if (isTransitionLane(lane)) {\n        var queueLanes = queue.lanes; // If any entangled lanes are no longer pending on the root, then they\n        // must have finished. We can remove them from the shared queue, which\n        // represents a superset of the actually pending lanes. In some cases we\n        // may entangle more than we need to, but that's OK. In fact it's worse if\n        // we *don't* entangle when we should.\n\n        queueLanes = intersectLanes(queueLanes, root.pendingLanes); // Entangle the new transition lane with the other transition lanes.\n\n        var newQueueLanes = mergeLanes(queueLanes, lane);\n        queue.lanes = newQueueLanes; // Even if queue.lanes already include lane, we don't know for certain if\n        // the lane finished since the last time we entangled it. So we need to\n        // entangle it again, just to be sure.\n\n        markRootEntangled(root, newQueueLanes);\n      }\n    }\n\n    var ContextOnlyDispatcher = {\n      readContext: readContext,\n      use: use,\n      useCallback: throwInvalidHookError,\n      useContext: throwInvalidHookError,\n      useEffect: throwInvalidHookError,\n      useImperativeHandle: throwInvalidHookError,\n      useInsertionEffect: throwInvalidHookError,\n      useLayoutEffect: throwInvalidHookError,\n      useMemo: throwInvalidHookError,\n      useReducer: throwInvalidHookError,\n      useRef: throwInvalidHookError,\n      useState: throwInvalidHookError,\n      useDebugValue: throwInvalidHookError,\n      useDeferredValue: throwInvalidHookError,\n      useTransition: throwInvalidHookError,\n      useSyncExternalStore: throwInvalidHookError,\n      useId: throwInvalidHookError\n    };\n\n    var HooksDispatcherOnMountInDEV = null;\n    var HooksDispatcherOnMountWithHookTypesInDEV = null;\n    var HooksDispatcherOnUpdateInDEV = null;\n    var HooksDispatcherOnRerenderInDEV = null;\n    var InvalidNestedHooksDispatcherOnMountInDEV = null;\n    var InvalidNestedHooksDispatcherOnUpdateInDEV = null;\n    var InvalidNestedHooksDispatcherOnRerenderInDEV = null;\n\n    {\n      var warnInvalidContextAccess = function () {\n        error(\n          \"Context can only be read while React is rendering. \" +\n            \"In classes, you can read it in the render method or getDerivedStateFromProps. \" +\n            \"In function components, you can read it directly in the function body, but not \" +\n            \"inside Hooks like useReducer() or useMemo().\"\n        );\n      };\n\n      var warnInvalidHookAccess = function () {\n        error(\n          \"Do not call Hooks inside useEffect(...), useMemo(...), or other built-in Hooks. \" +\n            \"You can only call Hooks at the top level of your React function. \" +\n            \"For more information, see \" +\n            \"https://reactjs.org/link/rules-of-hooks\"\n        );\n      };\n\n      HooksDispatcherOnMountInDEV = {\n        readContext: function (context) {\n          return readContext(context);\n        },\n        use: use,\n        useCallback: function (callback, deps) {\n          currentHookNameInDev = \"useCallback\";\n          mountHookTypesDev();\n          checkDepsAreArrayDev(deps);\n          return mountCallback(callback, deps);\n        },\n        useContext: function (context) {\n          currentHookNameInDev = \"useContext\";\n          mountHookTypesDev();\n          return readContext(context);\n        },\n        useEffect: function (create, deps) {\n          currentHookNameInDev = \"useEffect\";\n          mountHookTypesDev();\n          checkDepsAreArrayDev(deps);\n          return mountEffect(create, deps);\n        },\n        useImperativeHandle: function (ref, create, deps) {\n          currentHookNameInDev = \"useImperativeHandle\";\n          mountHookTypesDev();\n          checkDepsAreArrayDev(deps);\n          return mountImperativeHandle(ref, create, deps);\n        },\n        useInsertionEffect: function (create, deps) {\n          currentHookNameInDev = \"useInsertionEffect\";\n          mountHookTypesDev();\n          checkDepsAreArrayDev(deps);\n          return mountInsertionEffect(create, deps);\n        },\n        useLayoutEffect: function (create, deps) {\n          currentHookNameInDev = \"useLayoutEffect\";\n          mountHookTypesDev();\n          checkDepsAreArrayDev(deps);\n          return mountLayoutEffect(create, deps);\n        },\n        useMemo: function (create, deps) {\n          currentHookNameInDev = \"useMemo\";\n          mountHookTypesDev();\n          checkDepsAreArrayDev(deps);\n          var prevDispatcher = ReactCurrentDispatcher$1.current;\n          ReactCurrentDispatcher$1.current =\n            InvalidNestedHooksDispatcherOnMountInDEV;\n\n          try {\n            return mountMemo(create, deps);\n          } finally {\n            ReactCurrentDispatcher$1.current = prevDispatcher;\n          }\n        },\n        useReducer: function (reducer, initialArg, init) {\n          currentHookNameInDev = \"useReducer\";\n          mountHookTypesDev();\n          var prevDispatcher = ReactCurrentDispatcher$1.current;\n          ReactCurrentDispatcher$1.current =\n            InvalidNestedHooksDispatcherOnMountInDEV;\n\n          try {\n            return mountReducer(reducer, initialArg, init);\n          } finally {\n            ReactCurrentDispatcher$1.current = prevDispatcher;\n          }\n        },\n        useRef: function (initialValue) {\n          currentHookNameInDev = \"useRef\";\n          mountHookTypesDev();\n          return mountRef(initialValue);\n        },\n        useState: function (initialState) {\n          currentHookNameInDev = \"useState\";\n          mountHookTypesDev();\n          var prevDispatcher = ReactCurrentDispatcher$1.current;\n          ReactCurrentDispatcher$1.current =\n            InvalidNestedHooksDispatcherOnMountInDEV;\n\n          try {\n            return mountState(initialState);\n          } finally {\n            ReactCurrentDispatcher$1.current = prevDispatcher;\n          }\n        },\n        useDebugValue: function (value, formatterFn) {\n          currentHookNameInDev = \"useDebugValue\";\n          mountHookTypesDev();\n          return mountDebugValue();\n        },\n        useDeferredValue: function (value, initialValue) {\n          currentHookNameInDev = \"useDeferredValue\";\n          mountHookTypesDev();\n          return mountDeferredValue(value, initialValue);\n        },\n        useTransition: function () {\n          currentHookNameInDev = \"useTransition\";\n          mountHookTypesDev();\n          return mountTransition();\n        },\n        useSyncExternalStore: function (\n          subscribe,\n          getSnapshot,\n          getServerSnapshot\n        ) {\n          currentHookNameInDev = \"useSyncExternalStore\";\n          mountHookTypesDev();\n          return mountSyncExternalStore(subscribe, getSnapshot);\n        },\n        useId: function () {\n          currentHookNameInDev = \"useId\";\n          mountHookTypesDev();\n          return mountId();\n        }\n      };\n\n      HooksDispatcherOnMountWithHookTypesInDEV = {\n        readContext: function (context) {\n          return readContext(context);\n        },\n        use: use,\n        useCallback: function (callback, deps) {\n          currentHookNameInDev = \"useCallback\";\n          updateHookTypesDev();\n          return mountCallback(callback, deps);\n        },\n        useContext: function (context) {\n          currentHookNameInDev = \"useContext\";\n          updateHookTypesDev();\n          return readContext(context);\n        },\n        useEffect: function (create, deps) {\n          currentHookNameInDev = \"useEffect\";\n          updateHookTypesDev();\n          return mountEffect(create, deps);\n        },\n        useImperativeHandle: function (ref, create, deps) {\n          currentHookNameInDev = \"useImperativeHandle\";\n          updateHookTypesDev();\n          return mountImperativeHandle(ref, create, deps);\n        },\n        useInsertionEffect: function (create, deps) {\n          currentHookNameInDev = \"useInsertionEffect\";\n          updateHookTypesDev();\n          return mountInsertionEffect(create, deps);\n        },\n        useLayoutEffect: function (create, deps) {\n          currentHookNameInDev = \"useLayoutEffect\";\n          updateHookTypesDev();\n          return mountLayoutEffect(create, deps);\n        },\n        useMemo: function (create, deps) {\n          currentHookNameInDev = \"useMemo\";\n          updateHookTypesDev();\n          var prevDispatcher = ReactCurrentDispatcher$1.current;\n          ReactCurrentDispatcher$1.current =\n            InvalidNestedHooksDispatcherOnMountInDEV;\n\n          try {\n            return mountMemo(create, deps);\n          } finally {\n            ReactCurrentDispatcher$1.current = prevDispatcher;\n          }\n        },\n        useReducer: function (reducer, initialArg, init) {\n          currentHookNameInDev = \"useReducer\";\n          updateHookTypesDev();\n          var prevDispatcher = ReactCurrentDispatcher$1.current;\n          ReactCurrentDispatcher$1.current =\n            InvalidNestedHooksDispatcherOnMountInDEV;\n\n          try {\n            return mountReducer(reducer, initialArg, init);\n          } finally {\n            ReactCurrentDispatcher$1.current = prevDispatcher;\n          }\n        },\n        useRef: function (initialValue) {\n          currentHookNameInDev = \"useRef\";\n          updateHookTypesDev();\n          return mountRef(initialValue);\n        },\n        useState: function (initialState) {\n          currentHookNameInDev = \"useState\";\n          updateHookTypesDev();\n          var prevDispatcher = ReactCurrentDispatcher$1.current;\n          ReactCurrentDispatcher$1.current =\n            InvalidNestedHooksDispatcherOnMountInDEV;\n\n          try {\n            return mountState(initialState);\n          } finally {\n            ReactCurrentDispatcher$1.current = prevDispatcher;\n          }\n        },\n        useDebugValue: function (value, formatterFn) {\n          currentHookNameInDev = \"useDebugValue\";\n          updateHookTypesDev();\n          return mountDebugValue();\n        },\n        useDeferredValue: function (value, initialValue) {\n          currentHookNameInDev = \"useDeferredValue\";\n          updateHookTypesDev();\n          return mountDeferredValue(value, initialValue);\n        },\n        useTransition: function () {\n          currentHookNameInDev = \"useTransition\";\n          updateHookTypesDev();\n          return mountTransition();\n        },\n        useSyncExternalStore: function (\n          subscribe,\n          getSnapshot,\n          getServerSnapshot\n        ) {\n          currentHookNameInDev = \"useSyncExternalStore\";\n          updateHookTypesDev();\n          return mountSyncExternalStore(subscribe, getSnapshot);\n        },\n        useId: function () {\n          currentHookNameInDev = \"useId\";\n          updateHookTypesDev();\n          return mountId();\n        }\n      };\n\n      HooksDispatcherOnUpdateInDEV = {\n        readContext: function (context) {\n          return readContext(context);\n        },\n        use: use,\n        useCallback: function (callback, deps) {\n          currentHookNameInDev = \"useCallback\";\n          updateHookTypesDev();\n          return updateCallback(callback, deps);\n        },\n        useContext: function (context) {\n          currentHookNameInDev = \"useContext\";\n          updateHookTypesDev();\n          return readContext(context);\n        },\n        useEffect: function (create, deps) {\n          currentHookNameInDev = \"useEffect\";\n          updateHookTypesDev();\n          return updateEffect(create, deps);\n        },\n        useImperativeHandle: function (ref, create, deps) {\n          currentHookNameInDev = \"useImperativeHandle\";\n          updateHookTypesDev();\n          return updateImperativeHandle(ref, create, deps);\n        },\n        useInsertionEffect: function (create, deps) {\n          currentHookNameInDev = \"useInsertionEffect\";\n          updateHookTypesDev();\n          return updateInsertionEffect(create, deps);\n        },\n        useLayoutEffect: function (create, deps) {\n          currentHookNameInDev = \"useLayoutEffect\";\n          updateHookTypesDev();\n          return updateLayoutEffect(create, deps);\n        },\n        useMemo: function (create, deps) {\n          currentHookNameInDev = \"useMemo\";\n          updateHookTypesDev();\n          var prevDispatcher = ReactCurrentDispatcher$1.current;\n          ReactCurrentDispatcher$1.current =\n            InvalidNestedHooksDispatcherOnUpdateInDEV;\n\n          try {\n            return updateMemo(create, deps);\n          } finally {\n            ReactCurrentDispatcher$1.current = prevDispatcher;\n          }\n        },\n        useReducer: function (reducer, initialArg, init) {\n          currentHookNameInDev = \"useReducer\";\n          updateHookTypesDev();\n          var prevDispatcher = ReactCurrentDispatcher$1.current;\n          ReactCurrentDispatcher$1.current =\n            InvalidNestedHooksDispatcherOnUpdateInDEV;\n\n          try {\n            return updateReducer(reducer, initialArg, init);\n          } finally {\n            ReactCurrentDispatcher$1.current = prevDispatcher;\n          }\n        },\n        useRef: function (initialValue) {\n          currentHookNameInDev = \"useRef\";\n          updateHookTypesDev();\n          return updateRef();\n        },\n        useState: function (initialState) {\n          currentHookNameInDev = \"useState\";\n          updateHookTypesDev();\n          var prevDispatcher = ReactCurrentDispatcher$1.current;\n          ReactCurrentDispatcher$1.current =\n            InvalidNestedHooksDispatcherOnUpdateInDEV;\n\n          try {\n            return updateState(initialState);\n          } finally {\n            ReactCurrentDispatcher$1.current = prevDispatcher;\n          }\n        },\n        useDebugValue: function (value, formatterFn) {\n          currentHookNameInDev = \"useDebugValue\";\n          updateHookTypesDev();\n          return updateDebugValue();\n        },\n        useDeferredValue: function (value, initialValue) {\n          currentHookNameInDev = \"useDeferredValue\";\n          updateHookTypesDev();\n          return updateDeferredValue(value, initialValue);\n        },\n        useTransition: function () {\n          currentHookNameInDev = \"useTransition\";\n          updateHookTypesDev();\n          return updateTransition();\n        },\n        useSyncExternalStore: function (\n          subscribe,\n          getSnapshot,\n          getServerSnapshot\n        ) {\n          currentHookNameInDev = \"useSyncExternalStore\";\n          updateHookTypesDev();\n          return updateSyncExternalStore(subscribe, getSnapshot);\n        },\n        useId: function () {\n          currentHookNameInDev = \"useId\";\n          updateHookTypesDev();\n          return updateId();\n        }\n      };\n\n      HooksDispatcherOnRerenderInDEV = {\n        readContext: function (context) {\n          return readContext(context);\n        },\n        use: use,\n        useCallback: function (callback, deps) {\n          currentHookNameInDev = \"useCallback\";\n          updateHookTypesDev();\n          return updateCallback(callback, deps);\n        },\n        useContext: function (context) {\n          currentHookNameInDev = \"useContext\";\n          updateHookTypesDev();\n          return readContext(context);\n        },\n        useEffect: function (create, deps) {\n          currentHookNameInDev = \"useEffect\";\n          updateHookTypesDev();\n          return updateEffect(create, deps);\n        },\n        useImperativeHandle: function (ref, create, deps) {\n          currentHookNameInDev = \"useImperativeHandle\";\n          updateHookTypesDev();\n          return updateImperativeHandle(ref, create, deps);\n        },\n        useInsertionEffect: function (create, deps) {\n          currentHookNameInDev = \"useInsertionEffect\";\n          updateHookTypesDev();\n          return updateInsertionEffect(create, deps);\n        },\n        useLayoutEffect: function (create, deps) {\n          currentHookNameInDev = \"useLayoutEffect\";\n          updateHookTypesDev();\n          return updateLayoutEffect(create, deps);\n        },\n        useMemo: function (create, deps) {\n          currentHookNameInDev = \"useMemo\";\n          updateHookTypesDev();\n          var prevDispatcher = ReactCurrentDispatcher$1.current;\n          ReactCurrentDispatcher$1.current =\n            InvalidNestedHooksDispatcherOnRerenderInDEV;\n\n          try {\n            return updateMemo(create, deps);\n          } finally {\n            ReactCurrentDispatcher$1.current = prevDispatcher;\n          }\n        },\n        useReducer: function (reducer, initialArg, init) {\n          currentHookNameInDev = \"useReducer\";\n          updateHookTypesDev();\n          var prevDispatcher = ReactCurrentDispatcher$1.current;\n          ReactCurrentDispatcher$1.current =\n            InvalidNestedHooksDispatcherOnRerenderInDEV;\n\n          try {\n            return rerenderReducer(reducer, initialArg, init);\n          } finally {\n            ReactCurrentDispatcher$1.current = prevDispatcher;\n          }\n        },\n        useRef: function (initialValue) {\n          currentHookNameInDev = \"useRef\";\n          updateHookTypesDev();\n          return updateRef();\n        },\n        useState: function (initialState) {\n          currentHookNameInDev = \"useState\";\n          updateHookTypesDev();\n          var prevDispatcher = ReactCurrentDispatcher$1.current;\n          ReactCurrentDispatcher$1.current =\n            InvalidNestedHooksDispatcherOnRerenderInDEV;\n\n          try {\n            return rerenderState(initialState);\n          } finally {\n            ReactCurrentDispatcher$1.current = prevDispatcher;\n          }\n        },\n        useDebugValue: function (value, formatterFn) {\n          currentHookNameInDev = \"useDebugValue\";\n          updateHookTypesDev();\n          return updateDebugValue();\n        },\n        useDeferredValue: function (value, initialValue) {\n          currentHookNameInDev = \"useDeferredValue\";\n          updateHookTypesDev();\n          return rerenderDeferredValue(value, initialValue);\n        },\n        useTransition: function () {\n          currentHookNameInDev = \"useTransition\";\n          updateHookTypesDev();\n          return rerenderTransition();\n        },\n        useSyncExternalStore: function (\n          subscribe,\n          getSnapshot,\n          getServerSnapshot\n        ) {\n          currentHookNameInDev = \"useSyncExternalStore\";\n          updateHookTypesDev();\n          return updateSyncExternalStore(subscribe, getSnapshot);\n        },\n        useId: function () {\n          currentHookNameInDev = \"useId\";\n          updateHookTypesDev();\n          return updateId();\n        }\n      };\n\n      InvalidNestedHooksDispatcherOnMountInDEV = {\n        readContext: function (context) {\n          warnInvalidContextAccess();\n          return readContext(context);\n        },\n        use: function (usable) {\n          warnInvalidHookAccess();\n          return use(usable);\n        },\n        useCallback: function (callback, deps) {\n          currentHookNameInDev = \"useCallback\";\n          warnInvalidHookAccess();\n          mountHookTypesDev();\n          return mountCallback(callback, deps);\n        },\n        useContext: function (context) {\n          currentHookNameInDev = \"useContext\";\n          warnInvalidHookAccess();\n          mountHookTypesDev();\n          return readContext(context);\n        },\n        useEffect: function (create, deps) {\n          currentHookNameInDev = \"useEffect\";\n          warnInvalidHookAccess();\n          mountHookTypesDev();\n          return mountEffect(create, deps);\n        },\n        useImperativeHandle: function (ref, create, deps) {\n          currentHookNameInDev = \"useImperativeHandle\";\n          warnInvalidHookAccess();\n          mountHookTypesDev();\n          return mountImperativeHandle(ref, create, deps);\n        },\n        useInsertionEffect: function (create, deps) {\n          currentHookNameInDev = \"useInsertionEffect\";\n          warnInvalidHookAccess();\n          mountHookTypesDev();\n          return mountInsertionEffect(create, deps);\n        },\n        useLayoutEffect: function (create, deps) {\n          currentHookNameInDev = \"useLayoutEffect\";\n          warnInvalidHookAccess();\n          mountHookTypesDev();\n          return mountLayoutEffect(create, deps);\n        },\n        useMemo: function (create, deps) {\n          currentHookNameInDev = \"useMemo\";\n          warnInvalidHookAccess();\n          mountHookTypesDev();\n          var prevDispatcher = ReactCurrentDispatcher$1.current;\n          ReactCurrentDispatcher$1.current =\n            InvalidNestedHooksDispatcherOnMountInDEV;\n\n          try {\n            return mountMemo(create, deps);\n          } finally {\n            ReactCurrentDispatcher$1.current = prevDispatcher;\n          }\n        },\n        useReducer: function (reducer, initialArg, init) {\n          currentHookNameInDev = \"useReducer\";\n          warnInvalidHookAccess();\n          mountHookTypesDev();\n          var prevDispatcher = ReactCurrentDispatcher$1.current;\n          ReactCurrentDispatcher$1.current =\n            InvalidNestedHooksDispatcherOnMountInDEV;\n\n          try {\n            return mountReducer(reducer, initialArg, init);\n          } finally {\n            ReactCurrentDispatcher$1.current = prevDispatcher;\n          }\n        },\n        useRef: function (initialValue) {\n          currentHookNameInDev = \"useRef\";\n          warnInvalidHookAccess();\n          mountHookTypesDev();\n          return mountRef(initialValue);\n        },\n        useState: function (initialState) {\n          currentHookNameInDev = \"useState\";\n          warnInvalidHookAccess();\n          mountHookTypesDev();\n          var prevDispatcher = ReactCurrentDispatcher$1.current;\n          ReactCurrentDispatcher$1.current =\n            InvalidNestedHooksDispatcherOnMountInDEV;\n\n          try {\n            return mountState(initialState);\n          } finally {\n            ReactCurrentDispatcher$1.current = prevDispatcher;\n          }\n        },\n        useDebugValue: function (value, formatterFn) {\n          currentHookNameInDev = \"useDebugValue\";\n          warnInvalidHookAccess();\n          mountHookTypesDev();\n          return mountDebugValue();\n        },\n        useDeferredValue: function (value, initialValue) {\n          currentHookNameInDev = \"useDeferredValue\";\n          warnInvalidHookAccess();\n          mountHookTypesDev();\n          return mountDeferredValue(value, initialValue);\n        },\n        useTransition: function () {\n          currentHookNameInDev = \"useTransition\";\n          warnInvalidHookAccess();\n          mountHookTypesDev();\n          return mountTransition();\n        },\n        useSyncExternalStore: function (\n          subscribe,\n          getSnapshot,\n          getServerSnapshot\n        ) {\n          currentHookNameInDev = \"useSyncExternalStore\";\n          warnInvalidHookAccess();\n          mountHookTypesDev();\n          return mountSyncExternalStore(subscribe, getSnapshot);\n        },\n        useId: function () {\n          currentHookNameInDev = \"useId\";\n          warnInvalidHookAccess();\n          mountHookTypesDev();\n          return mountId();\n        }\n      };\n\n      InvalidNestedHooksDispatcherOnUpdateInDEV = {\n        readContext: function (context) {\n          warnInvalidContextAccess();\n          return readContext(context);\n        },\n        use: function (usable) {\n          warnInvalidHookAccess();\n          return use(usable);\n        },\n        useCallback: function (callback, deps) {\n          currentHookNameInDev = \"useCallback\";\n          warnInvalidHookAccess();\n          updateHookTypesDev();\n          return updateCallback(callback, deps);\n        },\n        useContext: function (context) {\n          currentHookNameInDev = \"useContext\";\n          warnInvalidHookAccess();\n          updateHookTypesDev();\n          return readContext(context);\n        },\n        useEffect: function (create, deps) {\n          currentHookNameInDev = \"useEffect\";\n          warnInvalidHookAccess();\n          updateHookTypesDev();\n          return updateEffect(create, deps);\n        },\n        useImperativeHandle: function (ref, create, deps) {\n          currentHookNameInDev = \"useImperativeHandle\";\n          warnInvalidHookAccess();\n          updateHookTypesDev();\n          return updateImperativeHandle(ref, create, deps);\n        },\n        useInsertionEffect: function (create, deps) {\n          currentHookNameInDev = \"useInsertionEffect\";\n          warnInvalidHookAccess();\n          updateHookTypesDev();\n          return updateInsertionEffect(create, deps);\n        },\n        useLayoutEffect: function (create, deps) {\n          currentHookNameInDev = \"useLayoutEffect\";\n          warnInvalidHookAccess();\n          updateHookTypesDev();\n          return updateLayoutEffect(create, deps);\n        },\n        useMemo: function (create, deps) {\n          currentHookNameInDev = \"useMemo\";\n          warnInvalidHookAccess();\n          updateHookTypesDev();\n          var prevDispatcher = ReactCurrentDispatcher$1.current;\n          ReactCurrentDispatcher$1.current =\n            InvalidNestedHooksDispatcherOnUpdateInDEV;\n\n          try {\n            return updateMemo(create, deps);\n          } finally {\n            ReactCurrentDispatcher$1.current = prevDispatcher;\n          }\n        },\n        useReducer: function (reducer, initialArg, init) {\n          currentHookNameInDev = \"useReducer\";\n          warnInvalidHookAccess();\n          updateHookTypesDev();\n          var prevDispatcher = ReactCurrentDispatcher$1.current;\n          ReactCurrentDispatcher$1.current =\n            InvalidNestedHooksDispatcherOnUpdateInDEV;\n\n          try {\n            return updateReducer(reducer, initialArg, init);\n          } finally {\n            ReactCurrentDispatcher$1.current = prevDispatcher;\n          }\n        },\n        useRef: function (initialValue) {\n          currentHookNameInDev = \"useRef\";\n          warnInvalidHookAccess();\n          updateHookTypesDev();\n          return updateRef();\n        },\n        useState: function (initialState) {\n          currentHookNameInDev = \"useState\";\n          warnInvalidHookAccess();\n          updateHookTypesDev();\n          var prevDispatcher = ReactCurrentDispatcher$1.current;\n          ReactCurrentDispatcher$1.current =\n            InvalidNestedHooksDispatcherOnUpdateInDEV;\n\n          try {\n            return updateState(initialState);\n          } finally {\n            ReactCurrentDispatcher$1.current = prevDispatcher;\n          }\n        },\n        useDebugValue: function (value, formatterFn) {\n          currentHookNameInDev = \"useDebugValue\";\n          warnInvalidHookAccess();\n          updateHookTypesDev();\n          return updateDebugValue();\n        },\n        useDeferredValue: function (value, initialValue) {\n          currentHookNameInDev = \"useDeferredValue\";\n          warnInvalidHookAccess();\n          updateHookTypesDev();\n          return updateDeferredValue(value, initialValue);\n        },\n        useTransition: function () {\n          currentHookNameInDev = \"useTransition\";\n          warnInvalidHookAccess();\n          updateHookTypesDev();\n          return updateTransition();\n        },\n        useSyncExternalStore: function (\n          subscribe,\n          getSnapshot,\n          getServerSnapshot\n        ) {\n          currentHookNameInDev = \"useSyncExternalStore\";\n          warnInvalidHookAccess();\n          updateHookTypesDev();\n          return updateSyncExternalStore(subscribe, getSnapshot);\n        },\n        useId: function () {\n          currentHookNameInDev = \"useId\";\n          warnInvalidHookAccess();\n          updateHookTypesDev();\n          return updateId();\n        }\n      };\n\n      InvalidNestedHooksDispatcherOnRerenderInDEV = {\n        readContext: function (context) {\n          warnInvalidContextAccess();\n          return readContext(context);\n        },\n        use: function (usable) {\n          warnInvalidHookAccess();\n          return use(usable);\n        },\n        useCallback: function (callback, deps) {\n          currentHookNameInDev = \"useCallback\";\n          warnInvalidHookAccess();\n          updateHookTypesDev();\n          return updateCallback(callback, deps);\n        },\n        useContext: function (context) {\n          currentHookNameInDev = \"useContext\";\n          warnInvalidHookAccess();\n          updateHookTypesDev();\n          return readContext(context);\n        },\n        useEffect: function (create, deps) {\n          currentHookNameInDev = \"useEffect\";\n          warnInvalidHookAccess();\n          updateHookTypesDev();\n          return updateEffect(create, deps);\n        },\n        useImperativeHandle: function (ref, create, deps) {\n          currentHookNameInDev = \"useImperativeHandle\";\n          warnInvalidHookAccess();\n          updateHookTypesDev();\n          return updateImperativeHandle(ref, create, deps);\n        },\n        useInsertionEffect: function (create, deps) {\n          currentHookNameInDev = \"useInsertionEffect\";\n          warnInvalidHookAccess();\n          updateHookTypesDev();\n          return updateInsertionEffect(create, deps);\n        },\n        useLayoutEffect: function (create, deps) {\n          currentHookNameInDev = \"useLayoutEffect\";\n          warnInvalidHookAccess();\n          updateHookTypesDev();\n          return updateLayoutEffect(create, deps);\n        },\n        useMemo: function (create, deps) {\n          currentHookNameInDev = \"useMemo\";\n          warnInvalidHookAccess();\n          updateHookTypesDev();\n          var prevDispatcher = ReactCurrentDispatcher$1.current;\n          ReactCurrentDispatcher$1.current =\n            InvalidNestedHooksDispatcherOnUpdateInDEV;\n\n          try {\n            return updateMemo(create, deps);\n          } finally {\n            ReactCurrentDispatcher$1.current = prevDispatcher;\n          }\n        },\n        useReducer: function (reducer, initialArg, init) {\n          currentHookNameInDev = \"useReducer\";\n          warnInvalidHookAccess();\n          updateHookTypesDev();\n          var prevDispatcher = ReactCurrentDispatcher$1.current;\n          ReactCurrentDispatcher$1.current =\n            InvalidNestedHooksDispatcherOnUpdateInDEV;\n\n          try {\n            return rerenderReducer(reducer, initialArg, init);\n          } finally {\n            ReactCurrentDispatcher$1.current = prevDispatcher;\n          }\n        },\n        useRef: function (initialValue) {\n          currentHookNameInDev = \"useRef\";\n          warnInvalidHookAccess();\n          updateHookTypesDev();\n          return updateRef();\n        },\n        useState: function (initialState) {\n          currentHookNameInDev = \"useState\";\n          warnInvalidHookAccess();\n          updateHookTypesDev();\n          var prevDispatcher = ReactCurrentDispatcher$1.current;\n          ReactCurrentDispatcher$1.current =\n            InvalidNestedHooksDispatcherOnUpdateInDEV;\n\n          try {\n            return rerenderState(initialState);\n          } finally {\n            ReactCurrentDispatcher$1.current = prevDispatcher;\n          }\n        },\n        useDebugValue: function (value, formatterFn) {\n          currentHookNameInDev = \"useDebugValue\";\n          warnInvalidHookAccess();\n          updateHookTypesDev();\n          return updateDebugValue();\n        },\n        useDeferredValue: function (value, initialValue) {\n          currentHookNameInDev = \"useDeferredValue\";\n          warnInvalidHookAccess();\n          updateHookTypesDev();\n          return rerenderDeferredValue(value, initialValue);\n        },\n        useTransition: function () {\n          currentHookNameInDev = \"useTransition\";\n          warnInvalidHookAccess();\n          updateHookTypesDev();\n          return rerenderTransition();\n        },\n        useSyncExternalStore: function (\n          subscribe,\n          getSnapshot,\n          getServerSnapshot\n        ) {\n          currentHookNameInDev = \"useSyncExternalStore\";\n          warnInvalidHookAccess();\n          updateHookTypesDev();\n          return updateSyncExternalStore(subscribe, getSnapshot);\n        },\n        useId: function () {\n          currentHookNameInDev = \"useId\";\n          warnInvalidHookAccess();\n          updateHookTypesDev();\n          return updateId();\n        }\n      };\n    }\n\n    var now = Scheduler.unstable_now;\n    var commitTime = 0;\n    var layoutEffectStartTime = -1;\n    var profilerStartTime = -1;\n    var passiveEffectStartTime = -1;\n    /**\n     * Tracks whether the current update was a nested/cascading update (scheduled from a layout effect).\n     *\n     * The overall sequence is:\n     *   1. render\n     *   2. commit (and call `onRender`, `onCommit`)\n     *   3. check for nested updates\n     *   4. flush passive effects (and call `onPostCommit`)\n     *\n     * Nested updates are identified in step 3 above,\n     * but step 4 still applies to the work that was just committed.\n     * We use two flags to track nested updates then:\n     * one tracks whether the upcoming update is a nested update,\n     * and the other tracks whether the current update was a nested update.\n     * The first value gets synced to the second at the start of the render phase.\n     */\n\n    var currentUpdateIsNested = false;\n    var nestedUpdateScheduled = false;\n\n    function isCurrentUpdateNested() {\n      return currentUpdateIsNested;\n    }\n\n    function markNestedUpdateScheduled() {\n      {\n        nestedUpdateScheduled = true;\n      }\n    }\n\n    function resetNestedUpdateFlag() {\n      {\n        currentUpdateIsNested = false;\n        nestedUpdateScheduled = false;\n      }\n    }\n\n    function syncNestedUpdateFlag() {\n      {\n        currentUpdateIsNested = nestedUpdateScheduled;\n        nestedUpdateScheduled = false;\n      }\n    }\n\n    function getCommitTime() {\n      return commitTime;\n    }\n\n    function recordCommitTime() {\n      commitTime = now();\n    }\n\n    function startProfilerTimer(fiber) {\n      profilerStartTime = now();\n\n      if (fiber.actualStartTime < 0) {\n        fiber.actualStartTime = now();\n      }\n    }\n\n    function stopProfilerTimerIfRunning(fiber) {\n      profilerStartTime = -1;\n    }\n\n    function stopProfilerTimerIfRunningAndRecordDelta(fiber, overrideBaseTime) {\n      if (profilerStartTime >= 0) {\n        var elapsedTime = now() - profilerStartTime;\n        fiber.actualDuration += elapsedTime;\n\n        if (overrideBaseTime) {\n          fiber.selfBaseDuration = elapsedTime;\n        }\n\n        profilerStartTime = -1;\n      }\n    }\n\n    function recordLayoutEffectDuration(fiber) {\n      if (layoutEffectStartTime >= 0) {\n        var elapsedTime = now() - layoutEffectStartTime;\n        layoutEffectStartTime = -1; // Store duration on the next nearest Profiler ancestor\n        // Or the root (for the DevTools Profiler to read)\n\n        var parentFiber = fiber.return;\n\n        while (parentFiber !== null) {\n          switch (parentFiber.tag) {\n            case HostRoot:\n              var root = parentFiber.stateNode;\n              root.effectDuration += elapsedTime;\n              return;\n\n            case Profiler:\n              var parentStateNode = parentFiber.stateNode;\n              parentStateNode.effectDuration += elapsedTime;\n              return;\n          }\n\n          parentFiber = parentFiber.return;\n        }\n      }\n    }\n\n    function recordPassiveEffectDuration(fiber) {\n      if (passiveEffectStartTime >= 0) {\n        var elapsedTime = now() - passiveEffectStartTime;\n        passiveEffectStartTime = -1; // Store duration on the next nearest Profiler ancestor\n        // Or the root (for the DevTools Profiler to read)\n\n        var parentFiber = fiber.return;\n\n        while (parentFiber !== null) {\n          switch (parentFiber.tag) {\n            case HostRoot:\n              var root = parentFiber.stateNode;\n\n              if (root !== null) {\n                root.passiveEffectDuration += elapsedTime;\n              }\n\n              return;\n\n            case Profiler:\n              var parentStateNode = parentFiber.stateNode;\n\n              if (parentStateNode !== null) {\n                // Detached fibers have their state node cleared out.\n                // In this case, the return pointer is also cleared out,\n                // so we won't be able to report the time spent in this Profiler's subtree.\n                parentStateNode.passiveEffectDuration += elapsedTime;\n              }\n\n              return;\n          }\n\n          parentFiber = parentFiber.return;\n        }\n      }\n    }\n\n    function startLayoutEffectTimer() {\n      layoutEffectStartTime = now();\n    }\n\n    function startPassiveEffectTimer() {\n      passiveEffectStartTime = now();\n    }\n\n    function transferActualDuration(fiber) {\n      // Transfer time spent rendering these children so we don't lose it\n      // after we rerender. This is used as a helper in special cases\n      // where we should count the work of multiple passes.\n      var child = fiber.child;\n\n      while (child) {\n        // $FlowFixMe[unsafe-addition] addition with possible null/undefined value\n        fiber.actualDuration += child.actualDuration;\n        child = child.sibling;\n      }\n    }\n\n    function resolveDefaultProps(Component, baseProps) {\n      if (Component && Component.defaultProps) {\n        // Resolve default props. Taken from ReactElement\n        var props = assign({}, baseProps);\n        var defaultProps = Component.defaultProps;\n\n        for (var propName in defaultProps) {\n          if (props[propName] === undefined) {\n            props[propName] = defaultProps[propName];\n          }\n        }\n\n        return props;\n      }\n\n      return baseProps;\n    }\n\n    var fakeInternalInstance = {};\n    var didWarnAboutStateAssignmentForComponent;\n    var didWarnAboutUninitializedState;\n    var didWarnAboutGetSnapshotBeforeUpdateWithoutDidUpdate;\n    var didWarnAboutLegacyLifecyclesAndDerivedState;\n    var didWarnAboutUndefinedDerivedState;\n    var didWarnAboutDirectlyAssigningPropsToState;\n    var didWarnAboutContextTypeAndContextTypes;\n    var didWarnAboutInvalidateContextType;\n    var didWarnOnInvalidCallback;\n\n    {\n      didWarnAboutStateAssignmentForComponent = new Set();\n      didWarnAboutUninitializedState = new Set();\n      didWarnAboutGetSnapshotBeforeUpdateWithoutDidUpdate = new Set();\n      didWarnAboutLegacyLifecyclesAndDerivedState = new Set();\n      didWarnAboutDirectlyAssigningPropsToState = new Set();\n      didWarnAboutUndefinedDerivedState = new Set();\n      didWarnAboutContextTypeAndContextTypes = new Set();\n      didWarnAboutInvalidateContextType = new Set();\n      didWarnOnInvalidCallback = new Set(); // This is so gross but it's at least non-critical and can be removed if\n      // it causes problems. This is meant to give a nicer error message for\n      // ReactDOM15.unstable_renderSubtreeIntoContainer(reactDOM16Component,\n      // ...)) which otherwise throws a \"_processChildContext is not a function\"\n      // exception.\n\n      Object.defineProperty(fakeInternalInstance, \"_processChildContext\", {\n        enumerable: false,\n        value: function () {\n          throw new Error(\n            \"_processChildContext is not available in React 16+. This likely \" +\n              \"means you have multiple copies of React and are attempting to nest \" +\n              \"a React 15 tree inside a React 16 tree using \" +\n              \"unstable_renderSubtreeIntoContainer, which isn't supported. Try \" +\n              \"to make sure you have only one copy of React (and ideally, switch \" +\n              \"to ReactDOM.createPortal).\"\n          );\n        }\n      });\n      Object.freeze(fakeInternalInstance);\n    }\n\n    function warnOnInvalidCallback(callback, callerName) {\n      {\n        if (callback === null || typeof callback === \"function\") {\n          return;\n        }\n\n        var key = callerName + \"_\" + callback;\n\n        if (!didWarnOnInvalidCallback.has(key)) {\n          didWarnOnInvalidCallback.add(key);\n\n          error(\n            \"%s(...): Expected the last optional `callback` argument to be a \" +\n              \"function. Instead received: %s.\",\n            callerName,\n            callback\n          );\n        }\n      }\n    }\n\n    function warnOnUndefinedDerivedState(type, partialState) {\n      {\n        if (partialState === undefined) {\n          var componentName = getComponentNameFromType(type) || \"Component\";\n\n          if (!didWarnAboutUndefinedDerivedState.has(componentName)) {\n            didWarnAboutUndefinedDerivedState.add(componentName);\n\n            error(\n              \"%s.getDerivedStateFromProps(): A valid state object (or null) must be returned. \" +\n                \"You have returned undefined.\",\n              componentName\n            );\n          }\n        }\n      }\n    }\n\n    function applyDerivedStateFromProps(\n      workInProgress,\n      ctor,\n      getDerivedStateFromProps,\n      nextProps\n    ) {\n      var prevState = workInProgress.memoizedState;\n      var partialState = getDerivedStateFromProps(nextProps, prevState);\n\n      {\n        if (workInProgress.mode & StrictLegacyMode) {\n          setIsStrictModeForDevtools(true);\n\n          try {\n            // Invoke the function an extra time to help detect side-effects.\n            partialState = getDerivedStateFromProps(nextProps, prevState);\n          } finally {\n            setIsStrictModeForDevtools(false);\n          }\n        }\n\n        warnOnUndefinedDerivedState(ctor, partialState);\n      } // Merge the partial state and the previous state.\n\n      var memoizedState =\n        partialState === null || partialState === undefined\n          ? prevState\n          : assign({}, prevState, partialState);\n      workInProgress.memoizedState = memoizedState; // Once the update queue is empty, persist the derived state onto the\n      // base state.\n\n      if (workInProgress.lanes === NoLanes) {\n        // Queue is always non-null for classes\n        var updateQueue = workInProgress.updateQueue;\n        updateQueue.baseState = memoizedState;\n      }\n    }\n\n    var classComponentUpdater = {\n      isMounted: isMounted,\n      // $FlowFixMe[missing-local-annot]\n      enqueueSetState: function (inst, payload, callback) {\n        var fiber = get(inst);\n        var lane = requestUpdateLane(fiber);\n        var update = createUpdate(lane);\n        update.payload = payload;\n\n        if (callback !== undefined && callback !== null) {\n          {\n            warnOnInvalidCallback(callback, \"setState\");\n          }\n\n          update.callback = callback;\n        }\n\n        var root = enqueueUpdate(fiber, update, lane);\n\n        if (root !== null) {\n          scheduleUpdateOnFiber(root, fiber, lane);\n          entangleTransitions(root, fiber, lane);\n        }\n      },\n      enqueueReplaceState: function (inst, payload, callback) {\n        var fiber = get(inst);\n        var lane = requestUpdateLane(fiber);\n        var update = createUpdate(lane);\n        update.tag = ReplaceState;\n        update.payload = payload;\n\n        if (callback !== undefined && callback !== null) {\n          {\n            warnOnInvalidCallback(callback, \"replaceState\");\n          }\n\n          update.callback = callback;\n        }\n\n        var root = enqueueUpdate(fiber, update, lane);\n\n        if (root !== null) {\n          scheduleUpdateOnFiber(root, fiber, lane);\n          entangleTransitions(root, fiber, lane);\n        }\n      },\n      // $FlowFixMe[missing-local-annot]\n      enqueueForceUpdate: function (inst, callback) {\n        var fiber = get(inst);\n        var lane = requestUpdateLane(fiber);\n        var update = createUpdate(lane);\n        update.tag = ForceUpdate;\n\n        if (callback !== undefined && callback !== null) {\n          {\n            warnOnInvalidCallback(callback, \"forceUpdate\");\n          }\n\n          update.callback = callback;\n        }\n\n        var root = enqueueUpdate(fiber, update, lane);\n\n        if (root !== null) {\n          scheduleUpdateOnFiber(root, fiber, lane);\n          entangleTransitions(root, fiber, lane);\n        }\n      }\n    };\n\n    function checkShouldComponentUpdate(\n      workInProgress,\n      ctor,\n      oldProps,\n      newProps,\n      oldState,\n      newState,\n      nextContext\n    ) {\n      var instance = workInProgress.stateNode;\n\n      if (typeof instance.shouldComponentUpdate === \"function\") {\n        var shouldUpdate = instance.shouldComponentUpdate(\n          newProps,\n          newState,\n          nextContext\n        );\n\n        {\n          if (workInProgress.mode & StrictLegacyMode) {\n            setIsStrictModeForDevtools(true);\n\n            try {\n              // Invoke the function an extra time to help detect side-effects.\n              shouldUpdate = instance.shouldComponentUpdate(\n                newProps,\n                newState,\n                nextContext\n              );\n            } finally {\n              setIsStrictModeForDevtools(false);\n            }\n          }\n\n          if (shouldUpdate === undefined) {\n            error(\n              \"%s.shouldComponentUpdate(): Returned undefined instead of a \" +\n                \"boolean value. Make sure to return true or false.\",\n              getComponentNameFromType(ctor) || \"Component\"\n            );\n          }\n        }\n\n        return shouldUpdate;\n      }\n\n      if (ctor.prototype && ctor.prototype.isPureReactComponent) {\n        return (\n          !shallowEqual(oldProps, newProps) || !shallowEqual(oldState, newState)\n        );\n      }\n\n      return true;\n    }\n\n    function checkClassInstance(workInProgress, ctor, newProps) {\n      var instance = workInProgress.stateNode;\n\n      {\n        var name = getComponentNameFromType(ctor) || \"Component\";\n        var renderPresent = instance.render;\n\n        if (!renderPresent) {\n          if (ctor.prototype && typeof ctor.prototype.render === \"function\") {\n            error(\n              \"%s(...): No `render` method found on the returned component \" +\n                \"instance: did you accidentally return an object from the constructor?\",\n              name\n            );\n          } else {\n            error(\n              \"%s(...): No `render` method found on the returned component \" +\n                \"instance: you may have forgotten to define `render`.\",\n              name\n            );\n          }\n        }\n\n        if (\n          instance.getInitialState &&\n          !instance.getInitialState.isReactClassApproved &&\n          !instance.state\n        ) {\n          error(\n            \"getInitialState was defined on %s, a plain JavaScript class. \" +\n              \"This is only supported for classes created using React.createClass. \" +\n              \"Did you mean to define a state property instead?\",\n            name\n          );\n        }\n\n        if (\n          instance.getDefaultProps &&\n          !instance.getDefaultProps.isReactClassApproved\n        ) {\n          error(\n            \"getDefaultProps was defined on %s, a plain JavaScript class. \" +\n              \"This is only supported for classes created using React.createClass. \" +\n              \"Use a static property to define defaultProps instead.\",\n            name\n          );\n        }\n\n        if (instance.propTypes) {\n          error(\n            \"propTypes was defined as an instance property on %s. Use a static \" +\n              \"property to define propTypes instead.\",\n            name\n          );\n        }\n\n        if (instance.contextType) {\n          error(\n            \"contextType was defined as an instance property on %s. Use a static \" +\n              \"property to define contextType instead.\",\n            name\n          );\n        }\n\n        {\n          if (instance.contextTypes) {\n            error(\n              \"contextTypes was defined as an instance property on %s. Use a static \" +\n                \"property to define contextTypes instead.\",\n              name\n            );\n          }\n\n          if (\n            ctor.contextType &&\n            ctor.contextTypes &&\n            !didWarnAboutContextTypeAndContextTypes.has(ctor)\n          ) {\n            didWarnAboutContextTypeAndContextTypes.add(ctor);\n\n            error(\n              \"%s declares both contextTypes and contextType static properties. \" +\n                \"The legacy contextTypes property will be ignored.\",\n              name\n            );\n          }\n        }\n\n        if (typeof instance.componentShouldUpdate === \"function\") {\n          error(\n            \"%s has a method called \" +\n              \"componentShouldUpdate(). Did you mean shouldComponentUpdate()? \" +\n              \"The name is phrased as a question because the function is \" +\n              \"expected to return a value.\",\n            name\n          );\n        }\n\n        if (\n          ctor.prototype &&\n          ctor.prototype.isPureReactComponent &&\n          typeof instance.shouldComponentUpdate !== \"undefined\"\n        ) {\n          error(\n            \"%s has a method called shouldComponentUpdate(). \" +\n              \"shouldComponentUpdate should not be used when extending React.PureComponent. \" +\n              \"Please extend React.Component if shouldComponentUpdate is used.\",\n            getComponentNameFromType(ctor) || \"A pure component\"\n          );\n        }\n\n        if (typeof instance.componentDidUnmount === \"function\") {\n          error(\n            \"%s has a method called \" +\n              \"componentDidUnmount(). But there is no such lifecycle method. \" +\n              \"Did you mean componentWillUnmount()?\",\n            name\n          );\n        }\n\n        if (typeof instance.componentDidReceiveProps === \"function\") {\n          error(\n            \"%s has a method called \" +\n              \"componentDidReceiveProps(). But there is no such lifecycle method. \" +\n              \"If you meant to update the state in response to changing props, \" +\n              \"use componentWillReceiveProps(). If you meant to fetch data or \" +\n              \"run side-effects or mutations after React has updated the UI, use componentDidUpdate().\",\n            name\n          );\n        }\n\n        if (typeof instance.componentWillRecieveProps === \"function\") {\n          error(\n            \"%s has a method called \" +\n              \"componentWillRecieveProps(). Did you mean componentWillReceiveProps()?\",\n            name\n          );\n        }\n\n        if (typeof instance.UNSAFE_componentWillRecieveProps === \"function\") {\n          error(\n            \"%s has a method called \" +\n              \"UNSAFE_componentWillRecieveProps(). Did you mean UNSAFE_componentWillReceiveProps()?\",\n            name\n          );\n        }\n\n        var hasMutatedProps = instance.props !== newProps;\n\n        if (instance.props !== undefined && hasMutatedProps) {\n          error(\n            \"%s(...): When calling super() in `%s`, make sure to pass \" +\n              \"up the same props that your component's constructor was passed.\",\n            name,\n            name\n          );\n        }\n\n        if (instance.defaultProps) {\n          error(\n            \"Setting defaultProps as an instance property on %s is not supported and will be ignored.\" +\n              \" Instead, define defaultProps as a static property on %s.\",\n            name,\n            name\n          );\n        }\n\n        if (\n          typeof instance.getSnapshotBeforeUpdate === \"function\" &&\n          typeof instance.componentDidUpdate !== \"function\" &&\n          !didWarnAboutGetSnapshotBeforeUpdateWithoutDidUpdate.has(ctor)\n        ) {\n          didWarnAboutGetSnapshotBeforeUpdateWithoutDidUpdate.add(ctor);\n\n          error(\n            \"%s: getSnapshotBeforeUpdate() should be used with componentDidUpdate(). \" +\n              \"This component defines getSnapshotBeforeUpdate() only.\",\n            getComponentNameFromType(ctor)\n          );\n        }\n\n        if (typeof instance.getDerivedStateFromProps === \"function\") {\n          error(\n            \"%s: getDerivedStateFromProps() is defined as an instance method \" +\n              \"and will be ignored. Instead, declare it as a static method.\",\n            name\n          );\n        }\n\n        if (typeof instance.getDerivedStateFromError === \"function\") {\n          error(\n            \"%s: getDerivedStateFromError() is defined as an instance method \" +\n              \"and will be ignored. Instead, declare it as a static method.\",\n            name\n          );\n        }\n\n        if (typeof ctor.getSnapshotBeforeUpdate === \"function\") {\n          error(\n            \"%s: getSnapshotBeforeUpdate() is defined as a static method \" +\n              \"and will be ignored. Instead, declare it as an instance method.\",\n            name\n          );\n        }\n\n        var state = instance.state;\n\n        if (state && (typeof state !== \"object\" || isArray(state))) {\n          error(\"%s.state: must be set to an object or null\", name);\n        }\n\n        if (\n          typeof instance.getChildContext === \"function\" &&\n          typeof ctor.childContextTypes !== \"object\"\n        ) {\n          error(\n            \"%s.getChildContext(): childContextTypes must be defined in order to \" +\n              \"use getChildContext().\",\n            name\n          );\n        }\n      }\n    }\n\n    function adoptClassInstance(workInProgress, instance) {\n      instance.updater = classComponentUpdater;\n      workInProgress.stateNode = instance; // The instance needs access to the fiber so that it can schedule updates\n\n      set(instance, workInProgress);\n\n      {\n        instance._reactInternalInstance = fakeInternalInstance;\n      }\n    }\n\n    function constructClassInstance(workInProgress, ctor, props) {\n      var isLegacyContextConsumer = false;\n      var unmaskedContext = emptyContextObject;\n      var context = emptyContextObject;\n      var contextType = ctor.contextType;\n\n      {\n        if (\"contextType\" in ctor) {\n          var isValid = // Allow null for conditional declaration\n            contextType === null ||\n            (contextType !== undefined &&\n              contextType.$$typeof === REACT_CONTEXT_TYPE &&\n              contextType._context === undefined); // Not a <Context.Consumer>\n\n          if (!isValid && !didWarnAboutInvalidateContextType.has(ctor)) {\n            didWarnAboutInvalidateContextType.add(ctor);\n            var addendum = \"\";\n\n            if (contextType === undefined) {\n              addendum =\n                \" However, it is set to undefined. \" +\n                \"This can be caused by a typo or by mixing up named and default imports. \" +\n                \"This can also happen due to a circular dependency, so \" +\n                \"try moving the createContext() call to a separate file.\";\n            } else if (typeof contextType !== \"object\") {\n              addendum = \" However, it is set to a \" + typeof contextType + \".\";\n            } else if (contextType.$$typeof === REACT_PROVIDER_TYPE) {\n              addendum =\n                \" Did you accidentally pass the Context.Provider instead?\";\n            } else if (contextType._context !== undefined) {\n              // <Context.Consumer>\n              addendum =\n                \" Did you accidentally pass the Context.Consumer instead?\";\n            } else {\n              addendum =\n                \" However, it is set to an object with keys {\" +\n                Object.keys(contextType).join(\", \") +\n                \"}.\";\n            }\n\n            error(\n              \"%s defines an invalid contextType. \" +\n                \"contextType should point to the Context object returned by React.createContext().%s\",\n              getComponentNameFromType(ctor) || \"Component\",\n              addendum\n            );\n          }\n        }\n      }\n\n      if (typeof contextType === \"object\" && contextType !== null) {\n        context = readContext(contextType);\n      } else {\n        unmaskedContext = getUnmaskedContext(workInProgress, ctor, true);\n        var contextTypes = ctor.contextTypes;\n        isLegacyContextConsumer =\n          contextTypes !== null && contextTypes !== undefined;\n        context = isLegacyContextConsumer\n          ? getMaskedContext(workInProgress, unmaskedContext)\n          : emptyContextObject;\n      }\n\n      var instance = new ctor(props, context); // Instantiate twice to help detect side-effects.\n\n      {\n        if (workInProgress.mode & StrictLegacyMode) {\n          setIsStrictModeForDevtools(true);\n\n          try {\n            instance = new ctor(props, context); // eslint-disable-line no-new\n          } finally {\n            setIsStrictModeForDevtools(false);\n          }\n        }\n      }\n\n      var state = (workInProgress.memoizedState =\n        instance.state !== null && instance.state !== undefined\n          ? instance.state\n          : null);\n      adoptClassInstance(workInProgress, instance);\n\n      {\n        if (\n          typeof ctor.getDerivedStateFromProps === \"function\" &&\n          state === null\n        ) {\n          var componentName = getComponentNameFromType(ctor) || \"Component\";\n\n          if (!didWarnAboutUninitializedState.has(componentName)) {\n            didWarnAboutUninitializedState.add(componentName);\n\n            error(\n              \"`%s` uses `getDerivedStateFromProps` but its initial state is \" +\n                \"%s. This is not recommended. Instead, define the initial state by \" +\n                \"assigning an object to `this.state` in the constructor of `%s`. \" +\n                \"This ensures that `getDerivedStateFromProps` arguments have a consistent shape.\",\n              componentName,\n              instance.state === null ? \"null\" : \"undefined\",\n              componentName\n            );\n          }\n        } // If new component APIs are defined, \"unsafe\" lifecycles won't be called.\n        // Warn about these lifecycles if they are present.\n        // Don't warn about react-lifecycles-compat polyfilled methods though.\n\n        if (\n          typeof ctor.getDerivedStateFromProps === \"function\" ||\n          typeof instance.getSnapshotBeforeUpdate === \"function\"\n        ) {\n          var foundWillMountName = null;\n          var foundWillReceivePropsName = null;\n          var foundWillUpdateName = null;\n\n          if (\n            typeof instance.componentWillMount === \"function\" &&\n            instance.componentWillMount.__suppressDeprecationWarning !== true\n          ) {\n            foundWillMountName = \"componentWillMount\";\n          } else if (typeof instance.UNSAFE_componentWillMount === \"function\") {\n            foundWillMountName = \"UNSAFE_componentWillMount\";\n          }\n\n          if (\n            typeof instance.componentWillReceiveProps === \"function\" &&\n            instance.componentWillReceiveProps.__suppressDeprecationWarning !==\n              true\n          ) {\n            foundWillReceivePropsName = \"componentWillReceiveProps\";\n          } else if (\n            typeof instance.UNSAFE_componentWillReceiveProps === \"function\"\n          ) {\n            foundWillReceivePropsName = \"UNSAFE_componentWillReceiveProps\";\n          }\n\n          if (\n            typeof instance.componentWillUpdate === \"function\" &&\n            instance.componentWillUpdate.__suppressDeprecationWarning !== true\n          ) {\n            foundWillUpdateName = \"componentWillUpdate\";\n          } else if (\n            typeof instance.UNSAFE_componentWillUpdate === \"function\"\n          ) {\n            foundWillUpdateName = \"UNSAFE_componentWillUpdate\";\n          }\n\n          if (\n            foundWillMountName !== null ||\n            foundWillReceivePropsName !== null ||\n            foundWillUpdateName !== null\n          ) {\n            var _componentName = getComponentNameFromType(ctor) || \"Component\";\n\n            var newApiName =\n              typeof ctor.getDerivedStateFromProps === \"function\"\n                ? \"getDerivedStateFromProps()\"\n                : \"getSnapshotBeforeUpdate()\";\n\n            if (\n              !didWarnAboutLegacyLifecyclesAndDerivedState.has(_componentName)\n            ) {\n              didWarnAboutLegacyLifecyclesAndDerivedState.add(_componentName);\n\n              error(\n                \"Unsafe legacy lifecycles will not be called for components using new component APIs.\\n\\n\" +\n                  \"%s uses %s but also contains the following legacy lifecycles:%s%s%s\\n\\n\" +\n                  \"The above lifecycles should be removed. Learn more about this warning here:\\n\" +\n                  \"https://reactjs.org/link/unsafe-component-lifecycles\",\n                _componentName,\n                newApiName,\n                foundWillMountName !== null ? \"\\n  \" + foundWillMountName : \"\",\n                foundWillReceivePropsName !== null\n                  ? \"\\n  \" + foundWillReceivePropsName\n                  : \"\",\n                foundWillUpdateName !== null ? \"\\n  \" + foundWillUpdateName : \"\"\n              );\n            }\n          }\n        }\n      } // Cache unmasked context so we can avoid recreating masked context unless necessary.\n      // ReactFiberContext usually updates this cache but can't for newly-created instances.\n\n      if (isLegacyContextConsumer) {\n        cacheContext(workInProgress, unmaskedContext, context);\n      }\n\n      return instance;\n    }\n\n    function callComponentWillMount(workInProgress, instance) {\n      var oldState = instance.state;\n\n      if (typeof instance.componentWillMount === \"function\") {\n        instance.componentWillMount();\n      }\n\n      if (typeof instance.UNSAFE_componentWillMount === \"function\") {\n        instance.UNSAFE_componentWillMount();\n      }\n\n      if (oldState !== instance.state) {\n        {\n          error(\n            \"%s.componentWillMount(): Assigning directly to this.state is \" +\n              \"deprecated (except inside a component's \" +\n              \"constructor). Use setState instead.\",\n            getComponentNameFromFiber(workInProgress) || \"Component\"\n          );\n        }\n\n        classComponentUpdater.enqueueReplaceState(\n          instance,\n          instance.state,\n          null\n        );\n      }\n    }\n\n    function callComponentWillReceiveProps(\n      workInProgress,\n      instance,\n      newProps,\n      nextContext\n    ) {\n      var oldState = instance.state;\n\n      if (typeof instance.componentWillReceiveProps === \"function\") {\n        instance.componentWillReceiveProps(newProps, nextContext);\n      }\n\n      if (typeof instance.UNSAFE_componentWillReceiveProps === \"function\") {\n        instance.UNSAFE_componentWillReceiveProps(newProps, nextContext);\n      }\n\n      if (instance.state !== oldState) {\n        {\n          var componentName =\n            getComponentNameFromFiber(workInProgress) || \"Component\";\n\n          if (!didWarnAboutStateAssignmentForComponent.has(componentName)) {\n            didWarnAboutStateAssignmentForComponent.add(componentName);\n\n            error(\n              \"%s.componentWillReceiveProps(): Assigning directly to \" +\n                \"this.state is deprecated (except inside a component's \" +\n                \"constructor). Use setState instead.\",\n              componentName\n            );\n          }\n        }\n\n        classComponentUpdater.enqueueReplaceState(\n          instance,\n          instance.state,\n          null\n        );\n      }\n    } // Invokes the mount life-cycles on a previously never rendered instance.\n\n    function mountClassInstance(workInProgress, ctor, newProps, renderLanes) {\n      {\n        checkClassInstance(workInProgress, ctor, newProps);\n      }\n\n      var instance = workInProgress.stateNode;\n      instance.props = newProps;\n      instance.state = workInProgress.memoizedState;\n      instance.refs = {};\n      initializeUpdateQueue(workInProgress);\n      var contextType = ctor.contextType;\n\n      if (typeof contextType === \"object\" && contextType !== null) {\n        instance.context = readContext(contextType);\n      } else {\n        var unmaskedContext = getUnmaskedContext(workInProgress, ctor, true);\n        instance.context = getMaskedContext(workInProgress, unmaskedContext);\n      }\n\n      {\n        if (instance.state === newProps) {\n          var componentName = getComponentNameFromType(ctor) || \"Component\";\n\n          if (!didWarnAboutDirectlyAssigningPropsToState.has(componentName)) {\n            didWarnAboutDirectlyAssigningPropsToState.add(componentName);\n\n            error(\n              \"%s: It is not recommended to assign props directly to state \" +\n                \"because updates to props won't be reflected in state. \" +\n                \"In most cases, it is better to use props directly.\",\n              componentName\n            );\n          }\n        }\n\n        if (workInProgress.mode & StrictLegacyMode) {\n          ReactStrictModeWarnings.recordLegacyContextWarning(\n            workInProgress,\n            instance\n          );\n        }\n\n        ReactStrictModeWarnings.recordUnsafeLifecycleWarnings(\n          workInProgress,\n          instance\n        );\n      }\n\n      instance.state = workInProgress.memoizedState;\n      var getDerivedStateFromProps = ctor.getDerivedStateFromProps;\n\n      if (typeof getDerivedStateFromProps === \"function\") {\n        applyDerivedStateFromProps(\n          workInProgress,\n          ctor,\n          getDerivedStateFromProps,\n          newProps\n        );\n        instance.state = workInProgress.memoizedState;\n      } // In order to support react-lifecycles-compat polyfilled components,\n      // Unsafe lifecycles should not be invoked for components using the new APIs.\n\n      if (\n        typeof ctor.getDerivedStateFromProps !== \"function\" &&\n        typeof instance.getSnapshotBeforeUpdate !== \"function\" &&\n        (typeof instance.UNSAFE_componentWillMount === \"function\" ||\n          typeof instance.componentWillMount === \"function\")\n      ) {\n        callComponentWillMount(workInProgress, instance); // If we had additional state updates during this life-cycle, let's\n        // process them now.\n\n        processUpdateQueue(workInProgress, newProps, instance, renderLanes);\n        suspendIfUpdateReadFromEntangledAsyncAction();\n        instance.state = workInProgress.memoizedState;\n      }\n\n      if (typeof instance.componentDidMount === \"function\") {\n        workInProgress.flags |= Update | LayoutStatic;\n      }\n\n      if ((workInProgress.mode & StrictEffectsMode) !== NoMode) {\n        workInProgress.flags |= MountLayoutDev;\n      }\n    }\n\n    function resumeMountClassInstance(\n      workInProgress,\n      ctor,\n      newProps,\n      renderLanes\n    ) {\n      var instance = workInProgress.stateNode;\n      var oldProps = workInProgress.memoizedProps;\n      instance.props = oldProps;\n      var oldContext = instance.context;\n      var contextType = ctor.contextType;\n      var nextContext = emptyContextObject;\n\n      if (typeof contextType === \"object\" && contextType !== null) {\n        nextContext = readContext(contextType);\n      } else {\n        var nextLegacyUnmaskedContext = getUnmaskedContext(\n          workInProgress,\n          ctor,\n          true\n        );\n        nextContext = getMaskedContext(\n          workInProgress,\n          nextLegacyUnmaskedContext\n        );\n      }\n\n      var getDerivedStateFromProps = ctor.getDerivedStateFromProps;\n      var hasNewLifecycles =\n        typeof getDerivedStateFromProps === \"function\" ||\n        typeof instance.getSnapshotBeforeUpdate === \"function\"; // Note: During these life-cycles, instance.props/instance.state are what\n      // ever the previously attempted to render - not the \"current\". However,\n      // during componentDidUpdate we pass the \"current\" props.\n      // In order to support react-lifecycles-compat polyfilled components,\n      // Unsafe lifecycles should not be invoked for components using the new APIs.\n\n      if (\n        !hasNewLifecycles &&\n        (typeof instance.UNSAFE_componentWillReceiveProps === \"function\" ||\n          typeof instance.componentWillReceiveProps === \"function\")\n      ) {\n        if (oldProps !== newProps || oldContext !== nextContext) {\n          callComponentWillReceiveProps(\n            workInProgress,\n            instance,\n            newProps,\n            nextContext\n          );\n        }\n      }\n\n      resetHasForceUpdateBeforeProcessing();\n      var oldState = workInProgress.memoizedState;\n      var newState = (instance.state = oldState);\n      processUpdateQueue(workInProgress, newProps, instance, renderLanes);\n      suspendIfUpdateReadFromEntangledAsyncAction();\n      newState = workInProgress.memoizedState;\n\n      if (\n        oldProps === newProps &&\n        oldState === newState &&\n        !hasContextChanged() &&\n        !checkHasForceUpdateAfterProcessing()\n      ) {\n        // If an update was already in progress, we should schedule an Update\n        // effect even though we're bailing out, so that cWU/cDU are called.\n        if (typeof instance.componentDidMount === \"function\") {\n          workInProgress.flags |= Update | LayoutStatic;\n        }\n\n        if ((workInProgress.mode & StrictEffectsMode) !== NoMode) {\n          workInProgress.flags |= MountLayoutDev;\n        }\n\n        return false;\n      }\n\n      if (typeof getDerivedStateFromProps === \"function\") {\n        applyDerivedStateFromProps(\n          workInProgress,\n          ctor,\n          getDerivedStateFromProps,\n          newProps\n        );\n        newState = workInProgress.memoizedState;\n      }\n\n      var shouldUpdate =\n        checkHasForceUpdateAfterProcessing() ||\n        checkShouldComponentUpdate(\n          workInProgress,\n          ctor,\n          oldProps,\n          newProps,\n          oldState,\n          newState,\n          nextContext\n        );\n\n      if (shouldUpdate) {\n        // In order to support react-lifecycles-compat polyfilled components,\n        // Unsafe lifecycles should not be invoked for components using the new APIs.\n        if (\n          !hasNewLifecycles &&\n          (typeof instance.UNSAFE_componentWillMount === \"function\" ||\n            typeof instance.componentWillMount === \"function\")\n        ) {\n          if (typeof instance.componentWillMount === \"function\") {\n            instance.componentWillMount();\n          }\n\n          if (typeof instance.UNSAFE_componentWillMount === \"function\") {\n            instance.UNSAFE_componentWillMount();\n          }\n        }\n\n        if (typeof instance.componentDidMount === \"function\") {\n          workInProgress.flags |= Update | LayoutStatic;\n        }\n\n        if ((workInProgress.mode & StrictEffectsMode) !== NoMode) {\n          workInProgress.flags |= MountLayoutDev;\n        }\n      } else {\n        // If an update was already in progress, we should schedule an Update\n        // effect even though we're bailing out, so that cWU/cDU are called.\n        if (typeof instance.componentDidMount === \"function\") {\n          workInProgress.flags |= Update | LayoutStatic;\n        }\n\n        if ((workInProgress.mode & StrictEffectsMode) !== NoMode) {\n          workInProgress.flags |= MountLayoutDev;\n        } // If shouldComponentUpdate returned false, we should still update the\n        // memoized state to indicate that this work can be reused.\n\n        workInProgress.memoizedProps = newProps;\n        workInProgress.memoizedState = newState;\n      } // Update the existing instance's state, props, and context pointers even\n      // if shouldComponentUpdate returns false.\n\n      instance.props = newProps;\n      instance.state = newState;\n      instance.context = nextContext;\n      return shouldUpdate;\n    } // Invokes the update life-cycles and returns false if it shouldn't rerender.\n\n    function updateClassInstance(\n      current,\n      workInProgress,\n      ctor,\n      newProps,\n      renderLanes\n    ) {\n      var instance = workInProgress.stateNode;\n      cloneUpdateQueue(current, workInProgress);\n      var unresolvedOldProps = workInProgress.memoizedProps;\n      var oldProps =\n        workInProgress.type === workInProgress.elementType\n          ? unresolvedOldProps\n          : resolveDefaultProps(workInProgress.type, unresolvedOldProps);\n      instance.props = oldProps;\n      var unresolvedNewProps = workInProgress.pendingProps;\n      var oldContext = instance.context;\n      var contextType = ctor.contextType;\n      var nextContext = emptyContextObject;\n\n      if (typeof contextType === \"object\" && contextType !== null) {\n        nextContext = readContext(contextType);\n      } else {\n        var nextUnmaskedContext = getUnmaskedContext(\n          workInProgress,\n          ctor,\n          true\n        );\n        nextContext = getMaskedContext(workInProgress, nextUnmaskedContext);\n      }\n\n      var getDerivedStateFromProps = ctor.getDerivedStateFromProps;\n      var hasNewLifecycles =\n        typeof getDerivedStateFromProps === \"function\" ||\n        typeof instance.getSnapshotBeforeUpdate === \"function\"; // Note: During these life-cycles, instance.props/instance.state are what\n      // ever the previously attempted to render - not the \"current\". However,\n      // during componentDidUpdate we pass the \"current\" props.\n      // In order to support react-lifecycles-compat polyfilled components,\n      // Unsafe lifecycles should not be invoked for components using the new APIs.\n\n      if (\n        !hasNewLifecycles &&\n        (typeof instance.UNSAFE_componentWillReceiveProps === \"function\" ||\n          typeof instance.componentWillReceiveProps === \"function\")\n      ) {\n        if (\n          unresolvedOldProps !== unresolvedNewProps ||\n          oldContext !== nextContext\n        ) {\n          callComponentWillReceiveProps(\n            workInProgress,\n            instance,\n            newProps,\n            nextContext\n          );\n        }\n      }\n\n      resetHasForceUpdateBeforeProcessing();\n      var oldState = workInProgress.memoizedState;\n      var newState = (instance.state = oldState);\n      processUpdateQueue(workInProgress, newProps, instance, renderLanes);\n      suspendIfUpdateReadFromEntangledAsyncAction();\n      newState = workInProgress.memoizedState;\n\n      if (\n        unresolvedOldProps === unresolvedNewProps &&\n        oldState === newState &&\n        !hasContextChanged() &&\n        !checkHasForceUpdateAfterProcessing() &&\n        !enableLazyContextPropagation\n      ) {\n        // If an update was already in progress, we should schedule an Update\n        // effect even though we're bailing out, so that cWU/cDU are called.\n        if (typeof instance.componentDidUpdate === \"function\") {\n          if (\n            unresolvedOldProps !== current.memoizedProps ||\n            oldState !== current.memoizedState\n          ) {\n            workInProgress.flags |= Update;\n          }\n        }\n\n        if (typeof instance.getSnapshotBeforeUpdate === \"function\") {\n          if (\n            unresolvedOldProps !== current.memoizedProps ||\n            oldState !== current.memoizedState\n          ) {\n            workInProgress.flags |= Snapshot;\n          }\n        }\n\n        return false;\n      }\n\n      if (typeof getDerivedStateFromProps === \"function\") {\n        applyDerivedStateFromProps(\n          workInProgress,\n          ctor,\n          getDerivedStateFromProps,\n          newProps\n        );\n        newState = workInProgress.memoizedState;\n      }\n\n      var shouldUpdate =\n        checkHasForceUpdateAfterProcessing() ||\n        checkShouldComponentUpdate(\n          workInProgress,\n          ctor,\n          oldProps,\n          newProps,\n          oldState,\n          newState,\n          nextContext\n        ) || // TODO: In some cases, we'll end up checking if context has changed twice,\n        // both before and after `shouldComponentUpdate` has been called. Not ideal,\n        // but I'm loath to refactor this function. This only happens for memoized\n        // components so it's not that common.\n        enableLazyContextPropagation;\n\n      if (shouldUpdate) {\n        // In order to support react-lifecycles-compat polyfilled components,\n        // Unsafe lifecycles should not be invoked for components using the new APIs.\n        if (\n          !hasNewLifecycles &&\n          (typeof instance.UNSAFE_componentWillUpdate === \"function\" ||\n            typeof instance.componentWillUpdate === \"function\")\n        ) {\n          if (typeof instance.componentWillUpdate === \"function\") {\n            instance.componentWillUpdate(newProps, newState, nextContext);\n          }\n\n          if (typeof instance.UNSAFE_componentWillUpdate === \"function\") {\n            instance.UNSAFE_componentWillUpdate(\n              newProps,\n              newState,\n              nextContext\n            );\n          }\n        }\n\n        if (typeof instance.componentDidUpdate === \"function\") {\n          workInProgress.flags |= Update;\n        }\n\n        if (typeof instance.getSnapshotBeforeUpdate === \"function\") {\n          workInProgress.flags |= Snapshot;\n        }\n      } else {\n        // If an update was already in progress, we should schedule an Update\n        // effect even though we're bailing out, so that cWU/cDU are called.\n        if (typeof instance.componentDidUpdate === \"function\") {\n          if (\n            unresolvedOldProps !== current.memoizedProps ||\n            oldState !== current.memoizedState\n          ) {\n            workInProgress.flags |= Update;\n          }\n        }\n\n        if (typeof instance.getSnapshotBeforeUpdate === \"function\") {\n          if (\n            unresolvedOldProps !== current.memoizedProps ||\n            oldState !== current.memoizedState\n          ) {\n            workInProgress.flags |= Snapshot;\n          }\n        } // If shouldComponentUpdate returned false, we should still update the\n        // memoized props/state to indicate that this work can be reused.\n\n        workInProgress.memoizedProps = newProps;\n        workInProgress.memoizedState = newState;\n      } // Update the existing instance's state, props, and context pointers even\n      // if shouldComponentUpdate returns false.\n\n      instance.props = newProps;\n      instance.state = newState;\n      instance.context = nextContext;\n      return shouldUpdate;\n    }\n\n    function createCapturedValueAtFiber(value, source) {\n      // If the value is an error, call this function immediately after it is thrown\n      // so the stack is accurate.\n      return {\n        value: value,\n        source: source,\n        stack: getStackByFiberInDevAndProd(source),\n        digest: null\n      };\n    }\n    function createCapturedValue(value, digest, stack) {\n      return {\n        value: value,\n        source: null,\n        stack: stack != null ? stack : null,\n        digest: digest != null ? digest : null\n      };\n    }\n\n    if (\n      typeof ReactNativePrivateInterface.ReactFiberErrorDialog\n        .showErrorDialog !== \"function\"\n    ) {\n      throw new Error(\n        \"Expected ReactFiberErrorDialog.showErrorDialog to be a function.\"\n      );\n    }\n\n    function showErrorDialog(boundary, errorInfo) {\n      var capturedError = {\n        componentStack: errorInfo.stack !== null ? errorInfo.stack : \"\",\n        error: errorInfo.value,\n        errorBoundary:\n          boundary !== null && boundary.tag === ClassComponent\n            ? boundary.stateNode\n            : null\n      };\n      return ReactNativePrivateInterface.ReactFiberErrorDialog.showErrorDialog(\n        capturedError\n      );\n    }\n\n    function logCapturedError(boundary, errorInfo) {\n      try {\n        var logError = showErrorDialog(boundary, errorInfo); // Allow injected showErrorDialog() to prevent default console.error logging.\n        // This enables renderers like ReactNative to better manage redbox behavior.\n\n        if (logError === false) {\n          return;\n        }\n\n        var error = errorInfo.value;\n\n        if (true) {\n          var source = errorInfo.source;\n          var stack = errorInfo.stack;\n          var componentStack = stack !== null ? stack : \"\"; // Browsers support silencing uncaught errors by calling\n          // `preventDefault()` in window `error` handler.\n          // We record this information as an expando on the error.\n\n          if (error != null && error._suppressLogging) {\n            if (boundary.tag === ClassComponent) {\n              // The error is recoverable and was silenced.\n              // Ignore it and don't print the stack addendum.\n              // This is handy for testing error boundaries without noise.\n              return;\n            } // The error is fatal. Since the silencing might have\n            // been accidental, we'll surface it anyway.\n            // However, the browser would have silenced the original error\n            // so we'll print it first, and then print the stack addendum.\n\n            console[\"error\"](error); // Don't transform to our wrapper\n            // For a more detailed description of this block, see:\n            // https://github.com/facebook/react/pull/13384\n          }\n\n          var componentName = source ? getComponentNameFromFiber(source) : null;\n          var componentNameMessage = componentName\n            ? \"The above error occurred in the <\" +\n              componentName +\n              \"> component:\"\n            : \"The above error occurred in one of your React components:\";\n          var errorBoundaryMessage;\n\n          if (boundary.tag === HostRoot) {\n            errorBoundaryMessage =\n              \"Consider adding an error boundary to your tree to customize error handling behavior.\\n\" +\n              \"Visit https://reactjs.org/link/error-boundaries to learn more about error boundaries.\";\n          } else {\n            var errorBoundaryName =\n              getComponentNameFromFiber(boundary) || \"Anonymous\";\n            errorBoundaryMessage =\n              \"React will try to recreate this component tree from scratch \" +\n              (\"using the error boundary you provided, \" +\n                errorBoundaryName +\n                \".\");\n          }\n\n          var combinedMessage =\n            componentNameMessage +\n            \"\\n\" +\n            componentStack +\n            \"\\n\\n\" +\n            (\"\" + errorBoundaryMessage); // In development, we provide our own message with just the component stack.\n          // We don't include the original error message and JS stack because the browser\n          // has already printed it. Even if the application swallows the error, it is still\n          // displayed by the browser thanks to the DEV-only fake event trick in ReactErrorUtils.\n\n          console[\"error\"](combinedMessage); // Don't transform to our wrapper\n        }\n      } catch (e) {\n        // This method must not throw, or React internal state will get messed up.\n        // If console.error is overridden, or logCapturedError() shows a dialog that throws,\n        // we want to report this error outside of the normal stack as a last resort.\n        // https://github.com/facebook/react/issues/13188\n        setTimeout(function () {\n          throw e;\n        });\n      }\n    }\n\n    function createRootErrorUpdate(fiber, errorInfo, lane) {\n      var update = createUpdate(lane); // Unmount the root by rendering null.\n\n      update.tag = CaptureUpdate; // Caution: React DevTools currently depends on this property\n      // being called \"element\".\n\n      update.payload = {\n        element: null\n      };\n      var error = errorInfo.value;\n\n      update.callback = function () {\n        onUncaughtError(error);\n        logCapturedError(fiber, errorInfo);\n      };\n\n      return update;\n    }\n\n    function createClassErrorUpdate(fiber, errorInfo, lane) {\n      var update = createUpdate(lane);\n      update.tag = CaptureUpdate;\n      var getDerivedStateFromError = fiber.type.getDerivedStateFromError;\n\n      if (typeof getDerivedStateFromError === \"function\") {\n        var error$1 = errorInfo.value;\n\n        update.payload = function () {\n          return getDerivedStateFromError(error$1);\n        };\n\n        update.callback = function () {\n          {\n            markFailedErrorBoundaryForHotReloading(fiber);\n          }\n\n          logCapturedError(fiber, errorInfo);\n        };\n      }\n\n      var inst = fiber.stateNode;\n\n      if (inst !== null && typeof inst.componentDidCatch === \"function\") {\n        // $FlowFixMe[missing-this-annot]\n        update.callback = function callback() {\n          {\n            markFailedErrorBoundaryForHotReloading(fiber);\n          }\n\n          logCapturedError(fiber, errorInfo);\n\n          if (typeof getDerivedStateFromError !== \"function\") {\n            // To preserve the preexisting retry behavior of error boundaries,\n            // we keep track of which ones already failed during this batch.\n            // This gets reset before we yield back to the browser.\n            // TODO: Warn in strict mode if getDerivedStateFromError is\n            // not defined.\n            markLegacyErrorBoundaryAsFailed(this);\n          }\n\n          var error$1 = errorInfo.value;\n          var stack = errorInfo.stack;\n          this.componentDidCatch(error$1, {\n            componentStack: stack !== null ? stack : \"\"\n          });\n\n          {\n            if (typeof getDerivedStateFromError !== \"function\") {\n              // If componentDidCatch is the only error boundary method defined,\n              // then it needs to call setState to recover from errors.\n              // If no state update is scheduled then the boundary will swallow the error.\n              if (!includesSomeLane(fiber.lanes, SyncLane)) {\n                error(\n                  \"%s: Error boundaries should implement getDerivedStateFromError(). \" +\n                    \"In that method, return a state update to display an error message or fallback UI.\",\n                  getComponentNameFromFiber(fiber) || \"Unknown\"\n                );\n              }\n            }\n          }\n        };\n      }\n\n      return update;\n    }\n\n    function resetSuspendedComponent(sourceFiber, rootRenderLanes) {\n      // A legacy mode Suspense quirk, only relevant to hook components.\n\n      var tag = sourceFiber.tag;\n\n      if (\n        (sourceFiber.mode & ConcurrentMode) === NoMode &&\n        (tag === FunctionComponent ||\n          tag === ForwardRef ||\n          tag === SimpleMemoComponent)\n      ) {\n        var currentSource = sourceFiber.alternate;\n\n        if (currentSource) {\n          sourceFiber.updateQueue = currentSource.updateQueue;\n          sourceFiber.memoizedState = currentSource.memoizedState;\n          sourceFiber.lanes = currentSource.lanes;\n        } else {\n          sourceFiber.updateQueue = null;\n          sourceFiber.memoizedState = null;\n        }\n      }\n    }\n\n    function markSuspenseBoundaryShouldCapture(\n      suspenseBoundary,\n      returnFiber,\n      sourceFiber,\n      root,\n      rootRenderLanes\n    ) {\n      // This marks a Suspense boundary so that when we're unwinding the stack,\n      // it captures the suspended \"exception\" and does a second (fallback) pass.\n      if ((suspenseBoundary.mode & ConcurrentMode) === NoMode) {\n        // Legacy Mode Suspense\n        //\n        // If the boundary is in legacy mode, we should *not*\n        // suspend the commit. Pretend as if the suspended component rendered\n        // null and keep rendering. When the Suspense boundary completes,\n        // we'll do a second pass to render the fallback.\n        if (suspenseBoundary === returnFiber) {\n          // Special case where we suspended while reconciling the children of\n          // a Suspense boundary's inner Offscreen wrapper fiber. This happens\n          // when a React.lazy component is a direct child of a\n          // Suspense boundary.\n          //\n          // Suspense boundaries are implemented as multiple fibers, but they\n          // are a single conceptual unit. The legacy mode behavior where we\n          // pretend the suspended fiber committed as `null` won't work,\n          // because in this case the \"suspended\" fiber is the inner\n          // Offscreen wrapper.\n          //\n          // Because the contents of the boundary haven't started rendering\n          // yet (i.e. nothing in the tree has partially rendered) we can\n          // switch to the regular, concurrent mode behavior: mark the\n          // boundary with ShouldCapture and enter the unwind phase.\n          suspenseBoundary.flags |= ShouldCapture;\n        } else {\n          suspenseBoundary.flags |= DidCapture;\n          sourceFiber.flags |= ForceUpdateForLegacySuspense; // We're going to commit this fiber even though it didn't complete.\n          // But we shouldn't call any lifecycle methods or callbacks. Remove\n          // all lifecycle effect tags.\n\n          sourceFiber.flags &= ~(LifecycleEffectMask | Incomplete);\n\n          if (sourceFiber.tag === ClassComponent) {\n            var currentSourceFiber = sourceFiber.alternate;\n\n            if (currentSourceFiber === null) {\n              // This is a new mount. Change the tag so it's not mistaken for a\n              // completed class component. For example, we should not call\n              // componentWillUnmount if it is deleted.\n              sourceFiber.tag = IncompleteClassComponent;\n            } else {\n              // When we try rendering again, we should not reuse the current fiber,\n              // since it's known to be in an inconsistent state. Use a force update to\n              // prevent a bail out.\n              var update = createUpdate(SyncLane);\n              update.tag = ForceUpdate;\n              enqueueUpdate(sourceFiber, update, SyncLane);\n            }\n          } // The source fiber did not complete. Mark it with Sync priority to\n          // indicate that it still has pending work.\n\n          sourceFiber.lanes = mergeLanes(sourceFiber.lanes, SyncLane);\n        }\n\n        return suspenseBoundary;\n      } // Confirmed that the boundary is in a concurrent mode tree. Continue\n      // with the normal suspend path.\n      //\n      // After this we'll use a set of heuristics to determine whether this\n      // render pass will run to completion or restart or \"suspend\" the commit.\n      // The actual logic for this is spread out in different places.\n      //\n      // This first principle is that if we're going to suspend when we complete\n      // a root, then we should also restart if we get an update or ping that\n      // might unsuspend it, and vice versa. The only reason to suspend is\n      // because you think you might want to restart before committing. However,\n      // it doesn't make sense to restart only while in the period we're suspended.\n      //\n      // Restarting too aggressively is also not good because it starves out any\n      // intermediate loading state. So we use heuristics to determine when.\n      // Suspense Heuristics\n      //\n      // If nothing threw a Promise or all the same fallbacks are already showing,\n      // then don't suspend/restart.\n      //\n      // If this is an initial render of a new tree of Suspense boundaries and\n      // those trigger a fallback, then don't suspend/restart. We want to ensure\n      // that we can show the initial loading state as quickly as possible.\n      //\n      // If we hit a \"Delayed\" case, such as when we'd switch from content back into\n      // a fallback, then we should always suspend/restart. Transitions apply\n      // to this case. If none is defined, JND is used instead.\n      //\n      // If we're already showing a fallback and it gets \"retried\", allowing us to show\n      // another level, but there's still an inner boundary that would show a fallback,\n      // then we suspend/restart for 500ms since the last time we showed a fallback\n      // anywhere in the tree. This effectively throttles progressive loading into a\n      // consistent train of commits. This also gives us an opportunity to restart to\n      // get to the completed state slightly earlier.\n      //\n      // If there's ambiguity due to batching it's resolved in preference of:\n      // 1) \"delayed\", 2) \"initial render\", 3) \"retry\".\n      //\n      // We want to ensure that a \"busy\" state doesn't get force committed. We want to\n      // ensure that new initial loading states can commit as soon as possible.\n\n      suspenseBoundary.flags |= ShouldCapture; // TODO: I think we can remove this, since we now use `DidCapture` in\n      // the begin phase to prevent an early bailout.\n\n      suspenseBoundary.lanes = rootRenderLanes;\n      return suspenseBoundary;\n    }\n\n    function throwException(\n      root,\n      returnFiber,\n      sourceFiber,\n      value,\n      rootRenderLanes\n    ) {\n      // The source fiber did not complete.\n      sourceFiber.flags |= Incomplete;\n\n      {\n        if (isDevToolsPresent) {\n          // If we have pending work still, restore the original updaters\n          restorePendingUpdaters(root, rootRenderLanes);\n        }\n      }\n\n      if (value !== null && typeof value === \"object\") {\n        if (typeof value.then === \"function\") {\n          // This is a wakeable. The component suspended.\n          var wakeable = value;\n          resetSuspendedComponent(sourceFiber);\n\n          var suspenseBoundary = getSuspenseHandler();\n\n          if (suspenseBoundary !== null) {\n            switch (suspenseBoundary.tag) {\n              case SuspenseComponent: {\n                // If this suspense boundary is not already showing a fallback, mark\n                // the in-progress render as suspended. We try to perform this logic\n                // as soon as soon as possible during the render phase, so the work\n                // loop can know things like whether it's OK to switch to other tasks,\n                // or whether it can wait for data to resolve before continuing.\n                // TODO: Most of these checks are already performed when entering a\n                // Suspense boundary. We should track the information on the stack so\n                // we don't have to recompute it on demand. This would also allow us\n                // to unify with `use` which needs to perform this logic even sooner,\n                // before `throwException` is called.\n                if (sourceFiber.mode & ConcurrentMode) {\n                  if (getShellBoundary() === null) {\n                    // Suspended in the \"shell\" of the app. This is an undesirable\n                    // loading state. We should avoid committing this tree.\n                    renderDidSuspendDelayIfPossible();\n                  } else {\n                    // If we suspended deeper than the shell, we don't need to delay\n                    // the commmit. However, we still call renderDidSuspend if this is\n                    // a new boundary, to tell the work loop that a new fallback has\n                    // appeared during this render.\n                    // TODO: Theoretically we should be able to delete this branch.\n                    // It's currently used for two things: 1) to throttle the\n                    // appearance of successive loading states, and 2) in\n                    // SuspenseList, to determine whether the children include any\n                    // pending fallbacks. For 1, we should apply throttling to all\n                    // retries, not just ones that render an additional fallback. For\n                    // 2, we should check subtreeFlags instead. Then we can delete\n                    // this branch.\n                    var current = suspenseBoundary.alternate;\n\n                    if (current === null) {\n                      renderDidSuspend();\n                    }\n                  }\n                }\n\n                suspenseBoundary.flags &= ~ForceClientRender;\n                markSuspenseBoundaryShouldCapture(\n                  suspenseBoundary,\n                  returnFiber,\n                  sourceFiber,\n                  root,\n                  rootRenderLanes\n                ); // Retry listener\n                //\n                // If the fallback does commit, we need to attach a different type of\n                // listener. This one schedules an update on the Suspense boundary to\n                // turn the fallback state off.\n                //\n                // Stash the wakeable on the boundary fiber so we can access it in the\n                // commit phase.\n                //\n                // When the wakeable resolves, we'll attempt to render the boundary\n                // again (\"retry\").\n                // Check if this is a Suspensey resource. We do not attach retry\n                // listeners to these, because we don't actually need them for\n                // rendering. Only for committing. Instead, if a fallback commits\n                // and the only thing that suspended was a Suspensey resource, we\n                // retry immediately.\n                // TODO: Refactor throwException so that we don't have to do this type\n                // check. The caller already knows what the cause was.\n\n                var isSuspenseyResource =\n                  wakeable === noopSuspenseyCommitThenable;\n\n                if (isSuspenseyResource) {\n                  suspenseBoundary.flags |= ScheduleRetry;\n                } else {\n                  var retryQueue = suspenseBoundary.updateQueue;\n\n                  if (retryQueue === null) {\n                    suspenseBoundary.updateQueue = new Set([wakeable]);\n                  } else {\n                    retryQueue.add(wakeable);\n                  } // We only attach ping listeners in concurrent mode. Legacy\n                  // Suspense always commits fallbacks synchronously, so there are\n                  // no pings.\n\n                  if (suspenseBoundary.mode & ConcurrentMode) {\n                    attachPingListener(root, wakeable, rootRenderLanes);\n                  }\n                }\n\n                return false;\n              }\n\n              case OffscreenComponent: {\n                if (suspenseBoundary.mode & ConcurrentMode) {\n                  suspenseBoundary.flags |= ShouldCapture;\n\n                  var _isSuspenseyResource =\n                    wakeable === noopSuspenseyCommitThenable;\n\n                  if (_isSuspenseyResource) {\n                    suspenseBoundary.flags |= ScheduleRetry;\n                  } else {\n                    var offscreenQueue = suspenseBoundary.updateQueue;\n\n                    if (offscreenQueue === null) {\n                      var newOffscreenQueue = {\n                        transitions: null,\n                        markerInstances: null,\n                        retryQueue: new Set([wakeable])\n                      };\n                      suspenseBoundary.updateQueue = newOffscreenQueue;\n                    } else {\n                      var _retryQueue = offscreenQueue.retryQueue;\n\n                      if (_retryQueue === null) {\n                        offscreenQueue.retryQueue = new Set([wakeable]);\n                      } else {\n                        _retryQueue.add(wakeable);\n                      }\n                    }\n\n                    attachPingListener(root, wakeable, rootRenderLanes);\n                  }\n\n                  return false;\n                }\n              }\n            }\n\n            throw new Error(\n              \"Unexpected Suspense handler tag (\" +\n                suspenseBoundary.tag +\n                \"). This \" +\n                \"is a bug in React.\"\n            );\n          } else {\n            // No boundary was found. Unless this is a sync update, this is OK.\n            // We can suspend and wait for more data to arrive.\n            if (root.tag === ConcurrentRoot) {\n              // In a concurrent root, suspending without a Suspense boundary is\n              // allowed. It will suspend indefinitely without committing.\n              //\n              // TODO: Should we have different behavior for discrete updates? What\n              // about flushSync? Maybe it should put the tree into an inert state,\n              // and potentially log a warning. Revisit this for a future release.\n              attachPingListener(root, wakeable, rootRenderLanes);\n              renderDidSuspendDelayIfPossible();\n              return false;\n            } else {\n              // In a legacy root, suspending without a boundary is always an error.\n              var uncaughtSuspenseError = new Error(\n                \"A component suspended while responding to synchronous input. This \" +\n                  \"will cause the UI to be replaced with a loading indicator. To \" +\n                  \"fix, updates that suspend should be wrapped \" +\n                  \"with startTransition.\"\n              );\n              value = uncaughtSuspenseError;\n            }\n          }\n        }\n      } // This is a regular error, not a Suspense wakeable.\n\n      value = createCapturedValueAtFiber(value, sourceFiber);\n      renderDidError(value); // We didn't find a boundary that could handle this type of exception. Start\n      // over and traverse parent path again, this time treating the exception\n      // as an error.\n\n      if (returnFiber === null) {\n        // There's no return fiber, which means the root errored. This should never\n        // happen. Return `true` to trigger a fatal error (panic).\n        return true;\n      }\n\n      var workInProgress = returnFiber;\n\n      do {\n        switch (workInProgress.tag) {\n          case HostRoot: {\n            var _errorInfo = value;\n            workInProgress.flags |= ShouldCapture;\n            var lane = pickArbitraryLane(rootRenderLanes);\n            workInProgress.lanes = mergeLanes(workInProgress.lanes, lane);\n            var update = createRootErrorUpdate(\n              workInProgress,\n              _errorInfo,\n              lane\n            );\n            enqueueCapturedUpdate(workInProgress, update);\n            return false;\n          }\n\n          case ClassComponent:\n            // Capture and retry\n            var errorInfo = value;\n            var ctor = workInProgress.type;\n            var instance = workInProgress.stateNode;\n\n            if (\n              (workInProgress.flags & DidCapture) === NoFlags$1 &&\n              (typeof ctor.getDerivedStateFromError === \"function\" ||\n                (instance !== null &&\n                  typeof instance.componentDidCatch === \"function\" &&\n                  !isAlreadyFailedLegacyErrorBoundary(instance)))\n            ) {\n              workInProgress.flags |= ShouldCapture;\n\n              var _lane = pickArbitraryLane(rootRenderLanes);\n\n              workInProgress.lanes = mergeLanes(workInProgress.lanes, _lane); // Schedule the error boundary to re-render using updated state\n\n              var _update = createClassErrorUpdate(\n                workInProgress,\n                errorInfo,\n                _lane\n              );\n\n              enqueueCapturedUpdate(workInProgress, _update);\n              return false;\n            }\n\n            break;\n        } // $FlowFixMe[incompatible-type] we bail out when we get a null\n\n        workInProgress = workInProgress.return;\n      } while (workInProgress !== null);\n\n      return false;\n    }\n\n    var ReactCurrentOwner$2 = ReactSharedInternals.ReactCurrentOwner; // A special exception that's used to unwind the stack when an update flows\n    // into a dehydrated boundary.\n\n    var SelectiveHydrationException = new Error(\n      \"This is not a real error. It's an implementation detail of React's \" +\n        \"selective hydration feature. If this leaks into userspace, it's a bug in \" +\n        \"React. Please file an issue.\"\n    );\n    var didReceiveUpdate = false;\n    var didWarnAboutBadClass;\n    var didWarnAboutModulePatternComponent;\n    var didWarnAboutContextTypeOnFunctionComponent;\n    var didWarnAboutGetDerivedStateOnFunctionComponent;\n    var didWarnAboutFunctionRefs;\n    var didWarnAboutReassigningProps;\n    var didWarnAboutRevealOrder;\n    var didWarnAboutTailOptions;\n    var didWarnAboutDefaultPropsOnFunctionComponent;\n\n    {\n      didWarnAboutBadClass = {};\n      didWarnAboutModulePatternComponent = {};\n      didWarnAboutContextTypeOnFunctionComponent = {};\n      didWarnAboutGetDerivedStateOnFunctionComponent = {};\n      didWarnAboutFunctionRefs = {};\n      didWarnAboutReassigningProps = false;\n      didWarnAboutRevealOrder = {};\n      didWarnAboutTailOptions = {};\n      didWarnAboutDefaultPropsOnFunctionComponent = {};\n    }\n\n    function reconcileChildren(\n      current,\n      workInProgress,\n      nextChildren,\n      renderLanes\n    ) {\n      if (current === null) {\n        // If this is a fresh new component that hasn't been rendered yet, we\n        // won't update its child set by applying minimal side-effects. Instead,\n        // we will add them all to the child before it gets rendered. That means\n        // we can optimize this reconciliation pass by not tracking side-effects.\n        workInProgress.child = mountChildFibers(\n          workInProgress,\n          null,\n          nextChildren,\n          renderLanes\n        );\n      } else {\n        // If the current child is the same as the work in progress, it means that\n        // we haven't yet started any work on these children. Therefore, we use\n        // the clone algorithm to create a copy of all the current children.\n        // If we had any progressed work already, that is invalid at this point so\n        // let's throw it out.\n        workInProgress.child = reconcileChildFibers(\n          workInProgress,\n          current.child,\n          nextChildren,\n          renderLanes\n        );\n      }\n    }\n\n    function forceUnmountCurrentAndReconcile(\n      current,\n      workInProgress,\n      nextChildren,\n      renderLanes\n    ) {\n      // This function is fork of reconcileChildren. It's used in cases where we\n      // want to reconcile without matching against the existing set. This has the\n      // effect of all current children being unmounted; even if the type and key\n      // are the same, the old child is unmounted and a new child is created.\n      //\n      // To do this, we're going to go through the reconcile algorithm twice. In\n      // the first pass, we schedule a deletion for all the current children by\n      // passing null.\n      workInProgress.child = reconcileChildFibers(\n        workInProgress,\n        current.child,\n        null,\n        renderLanes\n      ); // In the second pass, we mount the new children. The trick here is that we\n      // pass null in place of where we usually pass the current child set. This has\n      // the effect of remounting all children regardless of whether their\n      // identities match.\n\n      workInProgress.child = reconcileChildFibers(\n        workInProgress,\n        null,\n        nextChildren,\n        renderLanes\n      );\n    }\n\n    function updateForwardRef(\n      current,\n      workInProgress,\n      Component,\n      nextProps,\n      renderLanes\n    ) {\n      // TODO: current can be non-null here even if the component\n      // hasn't yet mounted. This happens after the first render suspends.\n      // We'll need to figure out if this is fine or can cause issues.\n      {\n        if (workInProgress.type !== workInProgress.elementType) {\n          // Lazy component props can't be validated in createElement\n          // because they're only guaranteed to be resolved here.\n          var innerPropTypes = Component.propTypes;\n\n          if (innerPropTypes) {\n            checkPropTypes(\n              innerPropTypes,\n              nextProps, // Resolved props\n              \"prop\",\n              getComponentNameFromType(Component)\n            );\n          }\n        }\n      }\n\n      var render = Component.render;\n      var ref = workInProgress.ref; // The rest is a fork of updateFunctionComponent\n\n      var nextChildren;\n      prepareToReadContext(workInProgress, renderLanes);\n\n      {\n        ReactCurrentOwner$2.current = workInProgress;\n        setIsRendering(true);\n        nextChildren = renderWithHooks(\n          current,\n          workInProgress,\n          render,\n          nextProps,\n          ref,\n          renderLanes\n        );\n        setIsRendering(false);\n      }\n\n      if (current !== null && !didReceiveUpdate) {\n        bailoutHooks(current, workInProgress, renderLanes);\n        return bailoutOnAlreadyFinishedWork(\n          current,\n          workInProgress,\n          renderLanes\n        );\n      }\n\n      workInProgress.flags |= PerformedWork;\n      reconcileChildren(current, workInProgress, nextChildren, renderLanes);\n      return workInProgress.child;\n    }\n\n    function updateMemoComponent(\n      current,\n      workInProgress,\n      Component,\n      nextProps,\n      renderLanes\n    ) {\n      if (current === null) {\n        var type = Component.type;\n\n        if (\n          isSimpleFunctionComponent(type) &&\n          Component.compare === null && // SimpleMemoComponent codepath doesn't resolve outer props either.\n          Component.defaultProps === undefined\n        ) {\n          var resolvedType = type;\n\n          {\n            resolvedType = resolveFunctionForHotReloading(type);\n          } // If this is a plain function component without default props,\n          // and with only the default shallow comparison, we upgrade it\n          // to a SimpleMemoComponent to allow fast path updates.\n\n          workInProgress.tag = SimpleMemoComponent;\n          workInProgress.type = resolvedType;\n\n          {\n            validateFunctionComponentInDev(workInProgress, type);\n          }\n\n          return updateSimpleMemoComponent(\n            current,\n            workInProgress,\n            resolvedType,\n            nextProps,\n            renderLanes\n          );\n        }\n\n        {\n          var innerPropTypes = type.propTypes;\n\n          if (innerPropTypes) {\n            // Inner memo component props aren't currently validated in createElement.\n            // We could move it there, but we'd still need this for lazy code path.\n            checkPropTypes(\n              innerPropTypes,\n              nextProps, // Resolved props\n              \"prop\",\n              getComponentNameFromType(type)\n            );\n          }\n\n          if (Component.defaultProps !== undefined) {\n            var componentName = getComponentNameFromType(type) || \"Unknown\";\n\n            if (!didWarnAboutDefaultPropsOnFunctionComponent[componentName]) {\n              error(\n                \"%s: Support for defaultProps will be removed from memo components \" +\n                  \"in a future major release. Use JavaScript default parameters instead.\",\n                componentName\n              );\n\n              didWarnAboutDefaultPropsOnFunctionComponent[componentName] = true;\n            }\n          }\n        }\n\n        var child = createFiberFromTypeAndProps(\n          Component.type,\n          null,\n          nextProps,\n          workInProgress,\n          workInProgress.mode,\n          renderLanes\n        );\n        child.ref = workInProgress.ref;\n        child.return = workInProgress;\n        workInProgress.child = child;\n        return child;\n      }\n\n      {\n        var _type = Component.type;\n        var _innerPropTypes = _type.propTypes;\n\n        if (_innerPropTypes) {\n          // Inner memo component props aren't currently validated in createElement.\n          // We could move it there, but we'd still need this for lazy code path.\n          checkPropTypes(\n            _innerPropTypes,\n            nextProps, // Resolved props\n            \"prop\",\n            getComponentNameFromType(_type)\n          );\n        }\n      }\n\n      var currentChild = current.child; // This is always exactly one child\n\n      var hasScheduledUpdateOrContext = checkScheduledUpdateOrContext(\n        current,\n        renderLanes\n      );\n\n      if (!hasScheduledUpdateOrContext) {\n        // This will be the props with resolved defaultProps,\n        // unlike current.memoizedProps which will be the unresolved ones.\n        var prevProps = currentChild.memoizedProps; // Default to shallow comparison\n\n        var compare = Component.compare;\n        compare = compare !== null ? compare : shallowEqual;\n\n        if (\n          compare(prevProps, nextProps) &&\n          current.ref === workInProgress.ref\n        ) {\n          return bailoutOnAlreadyFinishedWork(\n            current,\n            workInProgress,\n            renderLanes\n          );\n        }\n      } // React DevTools reads this flag.\n\n      workInProgress.flags |= PerformedWork;\n      var newChild = createWorkInProgress(currentChild, nextProps);\n      newChild.ref = workInProgress.ref;\n      newChild.return = workInProgress;\n      workInProgress.child = newChild;\n      return newChild;\n    }\n\n    function updateSimpleMemoComponent(\n      current,\n      workInProgress,\n      Component,\n      nextProps,\n      renderLanes\n    ) {\n      // TODO: current can be non-null here even if the component\n      // hasn't yet mounted. This happens when the inner render suspends.\n      // We'll need to figure out if this is fine or can cause issues.\n      {\n        if (workInProgress.type !== workInProgress.elementType) {\n          // Lazy component props can't be validated in createElement\n          // because they're only guaranteed to be resolved here.\n          var outerMemoType = workInProgress.elementType;\n\n          if (outerMemoType.$$typeof === REACT_LAZY_TYPE) {\n            // We warn when you define propTypes on lazy()\n            // so let's just skip over it to find memo() outer wrapper.\n            // Inner props for memo are validated later.\n            var lazyComponent = outerMemoType;\n            var payload = lazyComponent._payload;\n            var init = lazyComponent._init;\n\n            try {\n              outerMemoType = init(payload);\n            } catch (x) {\n              outerMemoType = null;\n            } // Inner propTypes will be validated in the function component path.\n\n            var outerPropTypes = outerMemoType && outerMemoType.propTypes;\n\n            if (outerPropTypes) {\n              checkPropTypes(\n                outerPropTypes,\n                nextProps, // Resolved (SimpleMemoComponent has no defaultProps)\n                \"prop\",\n                getComponentNameFromType(outerMemoType)\n              );\n            }\n          }\n        }\n      }\n\n      if (current !== null) {\n        var prevProps = current.memoizedProps;\n\n        if (\n          shallowEqual(prevProps, nextProps) &&\n          current.ref === workInProgress.ref && // Prevent bailout if the implementation changed due to hot reload.\n          workInProgress.type === current.type\n        ) {\n          didReceiveUpdate = false; // The props are shallowly equal. Reuse the previous props object, like we\n          // would during a normal fiber bailout.\n          //\n          // We don't have strong guarantees that the props object is referentially\n          // equal during updates where we can't bail out anyway — like if the props\n          // are shallowly equal, but there's a local state or context update in the\n          // same batch.\n          //\n          // However, as a principle, we should aim to make the behavior consistent\n          // across different ways of memoizing a component. For example, React.memo\n          // has a different internal Fiber layout if you pass a normal function\n          // component (SimpleMemoComponent) versus if you pass a different type\n          // like forwardRef (MemoComponent). But this is an implementation detail.\n          // Wrapping a component in forwardRef (or React.lazy, etc) shouldn't\n          // affect whether the props object is reused during a bailout.\n\n          workInProgress.pendingProps = nextProps = prevProps;\n\n          if (!checkScheduledUpdateOrContext(current, renderLanes)) {\n            // The pending lanes were cleared at the beginning of beginWork. We're\n            // about to bail out, but there might be other lanes that weren't\n            // included in the current render. Usually, the priority level of the\n            // remaining updates is accumulated during the evaluation of the\n            // component (i.e. when processing the update queue). But since since\n            // we're bailing out early *without* evaluating the component, we need\n            // to account for it here, too. Reset to the value of the current fiber.\n            // NOTE: This only applies to SimpleMemoComponent, not MemoComponent,\n            // because a MemoComponent fiber does not have hooks or an update queue;\n            // rather, it wraps around an inner component, which may or may not\n            // contains hooks.\n            // TODO: Move the reset at in beginWork out of the common path so that\n            // this is no longer necessary.\n            workInProgress.lanes = current.lanes;\n            return bailoutOnAlreadyFinishedWork(\n              current,\n              workInProgress,\n              renderLanes\n            );\n          } else if (\n            (current.flags & ForceUpdateForLegacySuspense) !==\n            NoFlags$1\n          ) {\n            // This is a special case that only exists for legacy mode.\n            // See https://github.com/facebook/react/pull/19216.\n            didReceiveUpdate = true;\n          }\n        }\n      }\n\n      return updateFunctionComponent(\n        current,\n        workInProgress,\n        Component,\n        nextProps,\n        renderLanes\n      );\n    }\n\n    function updateOffscreenComponent(current, workInProgress, renderLanes) {\n      var nextProps = workInProgress.pendingProps;\n      var nextChildren = nextProps.children;\n      var nextIsDetached =\n        (workInProgress.stateNode._pendingVisibility & OffscreenDetached) !== 0;\n      var prevState = current !== null ? current.memoizedState : null;\n      markRef$1(current, workInProgress);\n\n      if (nextProps.mode === \"hidden\" || enableLegacyHidden || nextIsDetached) {\n        // Rendering a hidden tree.\n        var didSuspend = (workInProgress.flags & DidCapture) !== NoFlags$1;\n\n        if (didSuspend) {\n          // Something suspended inside a hidden tree\n          // Include the base lanes from the last render\n          var nextBaseLanes =\n            prevState !== null\n              ? mergeLanes(prevState.baseLanes, renderLanes)\n              : renderLanes;\n\n          if (current !== null) {\n            // Reset to the current children\n            var currentChild = (workInProgress.child = current.child); // The current render suspended, but there may be other lanes with\n            // pending work. We can't read `childLanes` from the current Offscreen\n            // fiber because we reset it when it was deferred; however, we can read\n            // the pending lanes from the child fibers.\n\n            var currentChildLanes = NoLanes;\n\n            while (currentChild !== null) {\n              currentChildLanes = mergeLanes(\n                mergeLanes(currentChildLanes, currentChild.lanes),\n                currentChild.childLanes\n              );\n              currentChild = currentChild.sibling;\n            }\n\n            var lanesWeJustAttempted = nextBaseLanes;\n            var remainingChildLanes = removeLanes(\n              currentChildLanes,\n              lanesWeJustAttempted\n            );\n            workInProgress.childLanes = remainingChildLanes;\n          } else {\n            workInProgress.childLanes = NoLanes;\n            workInProgress.child = null;\n          }\n\n          return deferHiddenOffscreenComponent(\n            current,\n            workInProgress,\n            nextBaseLanes\n          );\n        }\n\n        if ((workInProgress.mode & ConcurrentMode) === NoMode) {\n          // In legacy sync mode, don't defer the subtree. Render it now.\n          // TODO: Consider how Offscreen should work with transitions in the future\n          var nextState = {\n            baseLanes: NoLanes,\n            cachePool: null\n          };\n          workInProgress.memoizedState = nextState;\n\n          reuseHiddenContextOnStack(workInProgress);\n          pushOffscreenSuspenseHandler(workInProgress);\n        } else if (!includesSomeLane(renderLanes, OffscreenLane)) {\n          // We're hidden, and we're not rendering at Offscreen. We will bail out\n          // and resume this tree later.\n          // Schedule this fiber to re-render at Offscreen priority\n          workInProgress.lanes = workInProgress.childLanes =\n            laneToLanes(OffscreenLane); // Include the base lanes from the last render\n\n          var _nextBaseLanes =\n            prevState !== null\n              ? mergeLanes(prevState.baseLanes, renderLanes)\n              : renderLanes;\n\n          return deferHiddenOffscreenComponent(\n            current,\n            workInProgress,\n            _nextBaseLanes\n          );\n        } else {\n          // This is the second render. The surrounding visible content has already\n          // committed. Now we resume rendering the hidden tree.\n          // Rendering at offscreen, so we can clear the base lanes.\n          var _nextState = {\n            baseLanes: NoLanes,\n            cachePool: null\n          };\n          workInProgress.memoizedState = _nextState;\n\n          if (prevState !== null) {\n            pushHiddenContext(workInProgress, prevState);\n          } else {\n            reuseHiddenContextOnStack(workInProgress);\n          }\n\n          pushOffscreenSuspenseHandler(workInProgress);\n        }\n      } else {\n        // Rendering a visible tree.\n        if (prevState !== null) {\n          pushHiddenContext(workInProgress, prevState);\n          reuseSuspenseHandlerOnStack(workInProgress); // Since we're not hidden anymore, reset the state\n\n          workInProgress.memoizedState = null;\n        } else {\n          // to avoid a push/pop misalignment.\n\n          reuseHiddenContextOnStack(workInProgress);\n          reuseSuspenseHandlerOnStack(workInProgress);\n        }\n      }\n\n      reconcileChildren(current, workInProgress, nextChildren, renderLanes);\n      return workInProgress.child;\n    }\n\n    function deferHiddenOffscreenComponent(\n      current,\n      workInProgress,\n      nextBaseLanes,\n      renderLanes\n    ) {\n      var nextState = {\n        baseLanes: nextBaseLanes,\n        // Save the cache pool so we can resume later.\n        cachePool: null\n      };\n      workInProgress.memoizedState = nextState;\n      // to avoid a push/pop misalignment.\n\n      reuseHiddenContextOnStack(workInProgress);\n      pushOffscreenSuspenseHandler(workInProgress);\n\n      return null;\n    } // Note: These happen to have identical begin phases, for now. We shouldn't hold\n\n    function updateFragment(current, workInProgress, renderLanes) {\n      var nextChildren = workInProgress.pendingProps;\n      reconcileChildren(current, workInProgress, nextChildren, renderLanes);\n      return workInProgress.child;\n    }\n\n    function updateMode(current, workInProgress, renderLanes) {\n      var nextChildren = workInProgress.pendingProps.children;\n      reconcileChildren(current, workInProgress, nextChildren, renderLanes);\n      return workInProgress.child;\n    }\n\n    function updateProfiler(current, workInProgress, renderLanes) {\n      {\n        workInProgress.flags |= Update;\n\n        {\n          // Reset effect durations for the next eventual effect phase.\n          // These are reset during render to allow the DevTools commit hook a chance to read them,\n          var stateNode = workInProgress.stateNode;\n          stateNode.effectDuration = 0;\n          stateNode.passiveEffectDuration = 0;\n        }\n      }\n\n      var nextProps = workInProgress.pendingProps;\n      var nextChildren = nextProps.children;\n      reconcileChildren(current, workInProgress, nextChildren, renderLanes);\n      return workInProgress.child;\n    }\n\n    function markRef$1(current, workInProgress) {\n      var ref = workInProgress.ref;\n\n      if (\n        (current === null && ref !== null) ||\n        (current !== null && current.ref !== ref)\n      ) {\n        // Schedule a Ref effect\n        workInProgress.flags |= Ref;\n        workInProgress.flags |= RefStatic;\n      }\n    }\n\n    function updateFunctionComponent(\n      current,\n      workInProgress,\n      Component,\n      nextProps,\n      renderLanes\n    ) {\n      {\n        if (workInProgress.type !== workInProgress.elementType) {\n          // Lazy component props can't be validated in createElement\n          // because they're only guaranteed to be resolved here.\n          var innerPropTypes = Component.propTypes;\n\n          if (innerPropTypes) {\n            checkPropTypes(\n              innerPropTypes,\n              nextProps, // Resolved props\n              \"prop\",\n              getComponentNameFromType(Component)\n            );\n          }\n        }\n      }\n\n      var context;\n\n      {\n        var unmaskedContext = getUnmaskedContext(\n          workInProgress,\n          Component,\n          true\n        );\n        context = getMaskedContext(workInProgress, unmaskedContext);\n      }\n\n      var nextChildren;\n      prepareToReadContext(workInProgress, renderLanes);\n\n      {\n        ReactCurrentOwner$2.current = workInProgress;\n        setIsRendering(true);\n        nextChildren = renderWithHooks(\n          current,\n          workInProgress,\n          Component,\n          nextProps,\n          context,\n          renderLanes\n        );\n        setIsRendering(false);\n      }\n\n      if (current !== null && !didReceiveUpdate) {\n        bailoutHooks(current, workInProgress, renderLanes);\n        return bailoutOnAlreadyFinishedWork(\n          current,\n          workInProgress,\n          renderLanes\n        );\n      }\n\n      workInProgress.flags |= PerformedWork;\n      reconcileChildren(current, workInProgress, nextChildren, renderLanes);\n      return workInProgress.child;\n    }\n\n    function replayFunctionComponent(\n      current,\n      workInProgress,\n      nextProps,\n      Component,\n      secondArg,\n      renderLanes\n    ) {\n      // This function is used to replay a component that previously suspended,\n      // after its data resolves. It's a simplified version of\n      // updateFunctionComponent that reuses the hooks from the previous attempt.\n      prepareToReadContext(workInProgress, renderLanes);\n\n      var nextChildren = replaySuspendedComponentWithHooks(\n        current,\n        workInProgress,\n        Component,\n        nextProps,\n        secondArg\n      );\n\n      if (current !== null && !didReceiveUpdate) {\n        bailoutHooks(current, workInProgress, renderLanes);\n        return bailoutOnAlreadyFinishedWork(\n          current,\n          workInProgress,\n          renderLanes\n        );\n      }\n\n      workInProgress.flags |= PerformedWork;\n      reconcileChildren(current, workInProgress, nextChildren, renderLanes);\n      return workInProgress.child;\n    }\n\n    function updateClassComponent(\n      current,\n      workInProgress,\n      Component,\n      nextProps,\n      renderLanes\n    ) {\n      {\n        // This is used by DevTools to force a boundary to error.\n        switch (shouldError(workInProgress)) {\n          case false: {\n            var _instance = workInProgress.stateNode;\n            var ctor = workInProgress.type; // TODO This way of resetting the error boundary state is a hack.\n            // Is there a better way to do this?\n\n            var tempInstance = new ctor(\n              workInProgress.memoizedProps,\n              _instance.context\n            );\n            var state = tempInstance.state;\n\n            _instance.updater.enqueueSetState(_instance, state, null);\n\n            break;\n          }\n\n          case true: {\n            workInProgress.flags |= DidCapture;\n            workInProgress.flags |= ShouldCapture; // eslint-disable-next-line react-internal/prod-error-codes\n\n            var error$1 = new Error(\"Simulated error coming from DevTools\");\n            var lane = pickArbitraryLane(renderLanes);\n            workInProgress.lanes = mergeLanes(workInProgress.lanes, lane); // Schedule the error boundary to re-render using updated state\n\n            var update = createClassErrorUpdate(\n              workInProgress,\n              createCapturedValueAtFiber(error$1, workInProgress),\n              lane\n            );\n            enqueueCapturedUpdate(workInProgress, update);\n            break;\n          }\n        }\n\n        if (workInProgress.type !== workInProgress.elementType) {\n          // Lazy component props can't be validated in createElement\n          // because they're only guaranteed to be resolved here.\n          var innerPropTypes = Component.propTypes;\n\n          if (innerPropTypes) {\n            checkPropTypes(\n              innerPropTypes,\n              nextProps, // Resolved props\n              \"prop\",\n              getComponentNameFromType(Component)\n            );\n          }\n        }\n      } // Push context providers early to prevent context stack mismatches.\n      // During mounting we don't know the child context yet as the instance doesn't exist.\n      // We will invalidate the child context in finishClassComponent() right after rendering.\n\n      var hasContext;\n\n      if (isContextProvider(Component)) {\n        hasContext = true;\n        pushContextProvider(workInProgress);\n      } else {\n        hasContext = false;\n      }\n\n      prepareToReadContext(workInProgress, renderLanes);\n      var instance = workInProgress.stateNode;\n      var shouldUpdate;\n\n      if (instance === null) {\n        resetSuspendedCurrentOnMountInLegacyMode(current, workInProgress); // In the initial pass we might need to construct the instance.\n\n        constructClassInstance(workInProgress, Component, nextProps);\n        mountClassInstance(workInProgress, Component, nextProps, renderLanes);\n        shouldUpdate = true;\n      } else if (current === null) {\n        // In a resume, we'll already have an instance we can reuse.\n        shouldUpdate = resumeMountClassInstance(\n          workInProgress,\n          Component,\n          nextProps,\n          renderLanes\n        );\n      } else {\n        shouldUpdate = updateClassInstance(\n          current,\n          workInProgress,\n          Component,\n          nextProps,\n          renderLanes\n        );\n      }\n\n      var nextUnitOfWork = finishClassComponent(\n        current,\n        workInProgress,\n        Component,\n        shouldUpdate,\n        hasContext,\n        renderLanes\n      );\n\n      {\n        var inst = workInProgress.stateNode;\n\n        if (shouldUpdate && inst.props !== nextProps) {\n          if (!didWarnAboutReassigningProps) {\n            error(\n              \"It looks like %s is reassigning its own `this.props` while rendering. \" +\n                \"This is not supported and can lead to confusing bugs.\",\n              getComponentNameFromFiber(workInProgress) || \"a component\"\n            );\n          }\n\n          didWarnAboutReassigningProps = true;\n        }\n      }\n\n      return nextUnitOfWork;\n    }\n\n    function finishClassComponent(\n      current,\n      workInProgress,\n      Component,\n      shouldUpdate,\n      hasContext,\n      renderLanes\n    ) {\n      // Refs should update even if shouldComponentUpdate returns false\n      markRef$1(current, workInProgress);\n      var didCaptureError = (workInProgress.flags & DidCapture) !== NoFlags$1;\n\n      if (!shouldUpdate && !didCaptureError) {\n        // Context providers should defer to sCU for rendering\n        if (hasContext) {\n          invalidateContextProvider(workInProgress, Component, false);\n        }\n\n        return bailoutOnAlreadyFinishedWork(\n          current,\n          workInProgress,\n          renderLanes\n        );\n      }\n\n      var instance = workInProgress.stateNode; // Rerender\n\n      ReactCurrentOwner$2.current = workInProgress;\n      var nextChildren;\n\n      if (\n        didCaptureError &&\n        typeof Component.getDerivedStateFromError !== \"function\"\n      ) {\n        // If we captured an error, but getDerivedStateFromError is not defined,\n        // unmount all the children. componentDidCatch will schedule an update to\n        // re-render a fallback. This is temporary until we migrate everyone to\n        // the new API.\n        // TODO: Warn in a future release.\n        nextChildren = null;\n\n        {\n          stopProfilerTimerIfRunning();\n        }\n      } else {\n        {\n          setIsRendering(true);\n          nextChildren = instance.render();\n\n          if (workInProgress.mode & StrictLegacyMode) {\n            setIsStrictModeForDevtools(true);\n\n            try {\n              instance.render();\n            } finally {\n              setIsStrictModeForDevtools(false);\n            }\n          }\n\n          setIsRendering(false);\n        }\n      } // React DevTools reads this flag.\n\n      workInProgress.flags |= PerformedWork;\n\n      if (current !== null && didCaptureError) {\n        // If we're recovering from an error, reconcile without reusing any of\n        // the existing children. Conceptually, the normal children and the children\n        // that are shown on error are two different sets, so we shouldn't reuse\n        // normal children even if their identities match.\n        forceUnmountCurrentAndReconcile(\n          current,\n          workInProgress,\n          nextChildren,\n          renderLanes\n        );\n      } else {\n        reconcileChildren(current, workInProgress, nextChildren, renderLanes);\n      } // Memoize state using the values we just used to render.\n      // TODO: Restructure so we never read values from the instance.\n\n      workInProgress.memoizedState = instance.state; // The context might have changed so we need to recalculate it.\n\n      if (hasContext) {\n        invalidateContextProvider(workInProgress, Component, true);\n      }\n\n      return workInProgress.child;\n    }\n\n    function pushHostRootContext(workInProgress) {\n      var root = workInProgress.stateNode;\n\n      if (root.pendingContext) {\n        pushTopLevelContextObject(\n          workInProgress,\n          root.pendingContext,\n          root.pendingContext !== root.context\n        );\n      } else if (root.context) {\n        // Should always be set\n        pushTopLevelContextObject(workInProgress, root.context, false);\n      }\n\n      pushHostContainer(workInProgress, root.containerInfo);\n    }\n\n    function updateHostRoot(current, workInProgress, renderLanes) {\n      pushHostRootContext(workInProgress);\n\n      if (current === null) {\n        throw new Error(\"Should have a current fiber. This is a bug in React.\");\n      }\n\n      var nextProps = workInProgress.pendingProps;\n      var prevState = workInProgress.memoizedState;\n      var prevChildren = prevState.element;\n      cloneUpdateQueue(current, workInProgress);\n      processUpdateQueue(workInProgress, nextProps, null, renderLanes);\n      var nextState = workInProgress.memoizedState;\n      // it needs to happen after the `pushCacheProvider` call above to avoid a\n      // context stack mismatch. A bit unfortunate.\n\n      suspendIfUpdateReadFromEntangledAsyncAction(); // Caution: React DevTools currently depends on this property\n      // being called \"element\".\n\n      var nextChildren = nextState.element;\n\n      {\n        if (nextChildren === prevChildren) {\n          return bailoutOnAlreadyFinishedWork(\n            current,\n            workInProgress,\n            renderLanes\n          );\n        }\n\n        reconcileChildren(current, workInProgress, nextChildren, renderLanes);\n      }\n\n      return workInProgress.child;\n    }\n\n    function updateHostComponent$1(current, workInProgress, renderLanes) {\n      pushHostContext(workInProgress);\n      var nextProps = workInProgress.pendingProps;\n      var prevProps = current !== null ? current.memoizedProps : null;\n      var nextChildren = nextProps.children;\n\n      if (prevProps !== null && shouldSetTextContent()) {\n        // If we're switching from a direct text child to a normal child, or to\n        // empty, we need to schedule the text content to be reset.\n        workInProgress.flags |= ContentReset;\n      }\n\n      markRef$1(current, workInProgress);\n      reconcileChildren(current, workInProgress, nextChildren, renderLanes);\n      return workInProgress.child;\n    }\n\n    function updateHostText$1(current, workInProgress) {\n      // immediately after.\n\n      return null;\n    }\n\n    function mountLazyComponent(\n      _current,\n      workInProgress,\n      elementType,\n      renderLanes\n    ) {\n      resetSuspendedCurrentOnMountInLegacyMode(_current, workInProgress);\n      var props = workInProgress.pendingProps;\n      var lazyComponent = elementType;\n      var payload = lazyComponent._payload;\n      var init = lazyComponent._init;\n      var Component = init(payload); // Store the unwrapped component in the type.\n\n      workInProgress.type = Component;\n      var resolvedTag = (workInProgress.tag =\n        resolveLazyComponentTag(Component));\n      var resolvedProps = resolveDefaultProps(Component, props);\n      var child;\n\n      switch (resolvedTag) {\n        case FunctionComponent: {\n          {\n            validateFunctionComponentInDev(workInProgress, Component);\n            workInProgress.type = Component =\n              resolveFunctionForHotReloading(Component);\n          }\n\n          child = updateFunctionComponent(\n            null,\n            workInProgress,\n            Component,\n            resolvedProps,\n            renderLanes\n          );\n          return child;\n        }\n\n        case ClassComponent: {\n          {\n            workInProgress.type = Component =\n              resolveClassForHotReloading(Component);\n          }\n\n          child = updateClassComponent(\n            null,\n            workInProgress,\n            Component,\n            resolvedProps,\n            renderLanes\n          );\n          return child;\n        }\n\n        case ForwardRef: {\n          {\n            workInProgress.type = Component =\n              resolveForwardRefForHotReloading(Component);\n          }\n\n          child = updateForwardRef(\n            null,\n            workInProgress,\n            Component,\n            resolvedProps,\n            renderLanes\n          );\n          return child;\n        }\n\n        case MemoComponent: {\n          {\n            if (workInProgress.type !== workInProgress.elementType) {\n              var outerPropTypes = Component.propTypes;\n\n              if (outerPropTypes) {\n                checkPropTypes(\n                  outerPropTypes,\n                  resolvedProps, // Resolved for outer only\n                  \"prop\",\n                  getComponentNameFromType(Component)\n                );\n              }\n            }\n          }\n\n          child = updateMemoComponent(\n            null,\n            workInProgress,\n            Component,\n            resolveDefaultProps(Component.type, resolvedProps), // The inner type can have defaults too\n            renderLanes\n          );\n          return child;\n        }\n      }\n\n      var hint = \"\";\n\n      {\n        if (\n          Component !== null &&\n          typeof Component === \"object\" &&\n          Component.$$typeof === REACT_LAZY_TYPE\n        ) {\n          hint = \" Did you wrap a component in React.lazy() more than once?\";\n        }\n      } // This message intentionally doesn't mention ForwardRef or MemoComponent\n      // because the fact that it's a separate type of work is an\n      // implementation detail.\n\n      throw new Error(\n        \"Element type is invalid. Received a promise that resolves to: \" +\n          Component +\n          \". \" +\n          (\"Lazy element type must resolve to a class or function.\" + hint)\n      );\n    }\n\n    function mountIncompleteClassComponent(\n      _current,\n      workInProgress,\n      Component,\n      nextProps,\n      renderLanes\n    ) {\n      resetSuspendedCurrentOnMountInLegacyMode(_current, workInProgress); // Promote the fiber to a class and try rendering again.\n\n      workInProgress.tag = ClassComponent; // The rest of this function is a fork of `updateClassComponent`\n      // Push context providers early to prevent context stack mismatches.\n      // During mounting we don't know the child context yet as the instance doesn't exist.\n      // We will invalidate the child context in finishClassComponent() right after rendering.\n\n      var hasContext;\n\n      if (isContextProvider(Component)) {\n        hasContext = true;\n        pushContextProvider(workInProgress);\n      } else {\n        hasContext = false;\n      }\n\n      prepareToReadContext(workInProgress, renderLanes);\n      constructClassInstance(workInProgress, Component, nextProps);\n      mountClassInstance(workInProgress, Component, nextProps, renderLanes);\n      return finishClassComponent(\n        null,\n        workInProgress,\n        Component,\n        true,\n        hasContext,\n        renderLanes\n      );\n    }\n\n    function mountIndeterminateComponent(\n      _current,\n      workInProgress,\n      Component,\n      renderLanes\n    ) {\n      resetSuspendedCurrentOnMountInLegacyMode(_current, workInProgress);\n      var props = workInProgress.pendingProps;\n      var context;\n\n      {\n        var unmaskedContext = getUnmaskedContext(\n          workInProgress,\n          Component,\n          false\n        );\n        context = getMaskedContext(workInProgress, unmaskedContext);\n      }\n\n      prepareToReadContext(workInProgress, renderLanes);\n      var value;\n\n      {\n        if (\n          Component.prototype &&\n          typeof Component.prototype.render === \"function\"\n        ) {\n          var componentName = getComponentNameFromType(Component) || \"Unknown\";\n\n          if (!didWarnAboutBadClass[componentName]) {\n            error(\n              \"The <%s /> component appears to have a render method, but doesn't extend React.Component. \" +\n                \"This is likely to cause errors. Change %s to extend React.Component instead.\",\n              componentName,\n              componentName\n            );\n\n            didWarnAboutBadClass[componentName] = true;\n          }\n        }\n\n        if (workInProgress.mode & StrictLegacyMode) {\n          ReactStrictModeWarnings.recordLegacyContextWarning(\n            workInProgress,\n            null\n          );\n        }\n\n        setIsRendering(true);\n        ReactCurrentOwner$2.current = workInProgress;\n        value = renderWithHooks(\n          null,\n          workInProgress,\n          Component,\n          props,\n          context,\n          renderLanes\n        );\n        setIsRendering(false);\n      }\n\n      workInProgress.flags |= PerformedWork;\n\n      {\n        // Support for module components is deprecated and is removed behind a flag.\n        // Whether or not it would crash later, we want to show a good message in DEV first.\n        if (\n          typeof value === \"object\" &&\n          value !== null &&\n          typeof value.render === \"function\" &&\n          value.$$typeof === undefined\n        ) {\n          var _componentName = getComponentNameFromType(Component) || \"Unknown\";\n\n          if (!didWarnAboutModulePatternComponent[_componentName]) {\n            error(\n              \"The <%s /> component appears to be a function component that returns a class instance. \" +\n                \"Change %s to a class that extends React.Component instead. \" +\n                \"If you can't use a class try assigning the prototype on the function as a workaround. \" +\n                \"`%s.prototype = React.Component.prototype`. Don't use an arrow function since it \" +\n                \"cannot be called with `new` by React.\",\n              _componentName,\n              _componentName,\n              _componentName\n            );\n\n            didWarnAboutModulePatternComponent[_componentName] = true;\n          }\n        }\n      }\n\n      if (\n        // Run these checks in production only if the flag is off.\n        // Eventually we'll delete this branch altogether.\n        typeof value === \"object\" &&\n        value !== null &&\n        typeof value.render === \"function\" &&\n        value.$$typeof === undefined\n      ) {\n        {\n          var _componentName2 =\n            getComponentNameFromType(Component) || \"Unknown\";\n\n          if (!didWarnAboutModulePatternComponent[_componentName2]) {\n            error(\n              \"The <%s /> component appears to be a function component that returns a class instance. \" +\n                \"Change %s to a class that extends React.Component instead. \" +\n                \"If you can't use a class try assigning the prototype on the function as a workaround. \" +\n                \"`%s.prototype = React.Component.prototype`. Don't use an arrow function since it \" +\n                \"cannot be called with `new` by React.\",\n              _componentName2,\n              _componentName2,\n              _componentName2\n            );\n\n            didWarnAboutModulePatternComponent[_componentName2] = true;\n          }\n        } // Proceed under the assumption that this is a class instance\n\n        workInProgress.tag = ClassComponent; // Throw out any hooks that were used.\n\n        workInProgress.memoizedState = null;\n        workInProgress.updateQueue = null; // Push context providers early to prevent context stack mismatches.\n        // During mounting we don't know the child context yet as the instance doesn't exist.\n        // We will invalidate the child context in finishClassComponent() right after rendering.\n\n        var hasContext = false;\n\n        if (isContextProvider(Component)) {\n          hasContext = true;\n          pushContextProvider(workInProgress);\n        } else {\n          hasContext = false;\n        }\n\n        workInProgress.memoizedState =\n          value.state !== null && value.state !== undefined\n            ? value.state\n            : null;\n        initializeUpdateQueue(workInProgress);\n        adoptClassInstance(workInProgress, value);\n        mountClassInstance(workInProgress, Component, props, renderLanes);\n        return finishClassComponent(\n          null,\n          workInProgress,\n          Component,\n          true,\n          hasContext,\n          renderLanes\n        );\n      } else {\n        // Proceed under the assumption that this is a function component\n        workInProgress.tag = FunctionComponent;\n\n        reconcileChildren(null, workInProgress, value, renderLanes);\n\n        {\n          validateFunctionComponentInDev(workInProgress, Component);\n        }\n\n        return workInProgress.child;\n      }\n    }\n\n    function validateFunctionComponentInDev(workInProgress, Component) {\n      {\n        if (Component) {\n          if (Component.childContextTypes) {\n            error(\n              \"%s(...): childContextTypes cannot be defined on a function component.\",\n              Component.displayName || Component.name || \"Component\"\n            );\n          }\n        }\n\n        if (workInProgress.ref !== null) {\n          var info = \"\";\n          var componentName = getComponentNameFromType(Component) || \"Unknown\";\n          var ownerName = getCurrentFiberOwnerNameInDevOrNull();\n\n          if (ownerName) {\n            info += \"\\n\\nCheck the render method of `\" + ownerName + \"`.\";\n          }\n\n          var warningKey = componentName + \"|\" + (ownerName || \"\");\n\n          if (!didWarnAboutFunctionRefs[warningKey]) {\n            didWarnAboutFunctionRefs[warningKey] = true;\n\n            error(\n              \"Function components cannot be given refs. \" +\n                \"Attempts to access this ref will fail. \" +\n                \"Did you mean to use React.forwardRef()?%s\",\n              info\n            );\n          }\n        }\n\n        if (Component.defaultProps !== undefined) {\n          var _componentName3 =\n            getComponentNameFromType(Component) || \"Unknown\";\n\n          if (!didWarnAboutDefaultPropsOnFunctionComponent[_componentName3]) {\n            error(\n              \"%s: Support for defaultProps will be removed from function components \" +\n                \"in a future major release. Use JavaScript default parameters instead.\",\n              _componentName3\n            );\n\n            didWarnAboutDefaultPropsOnFunctionComponent[_componentName3] = true;\n          }\n        }\n\n        if (typeof Component.getDerivedStateFromProps === \"function\") {\n          var _componentName4 =\n            getComponentNameFromType(Component) || \"Unknown\";\n\n          if (\n            !didWarnAboutGetDerivedStateOnFunctionComponent[_componentName4]\n          ) {\n            error(\n              \"%s: Function components do not support getDerivedStateFromProps.\",\n              _componentName4\n            );\n\n            didWarnAboutGetDerivedStateOnFunctionComponent[_componentName4] =\n              true;\n          }\n        }\n\n        if (\n          typeof Component.contextType === \"object\" &&\n          Component.contextType !== null\n        ) {\n          var _componentName5 =\n            getComponentNameFromType(Component) || \"Unknown\";\n\n          if (!didWarnAboutContextTypeOnFunctionComponent[_componentName5]) {\n            error(\n              \"%s: Function components do not support contextType.\",\n              _componentName5\n            );\n\n            didWarnAboutContextTypeOnFunctionComponent[_componentName5] = true;\n          }\n        }\n      }\n    }\n\n    var SUSPENDED_MARKER = {\n      dehydrated: null,\n      treeContext: null,\n      retryLane: NoLane\n    };\n\n    function mountSuspenseOffscreenState(renderLanes) {\n      return {\n        baseLanes: renderLanes,\n        cachePool: getSuspendedCache()\n      };\n    }\n\n    function updateSuspenseOffscreenState(prevOffscreenState, renderLanes) {\n      var cachePool = null;\n\n      return {\n        baseLanes: mergeLanes(prevOffscreenState.baseLanes, renderLanes),\n        cachePool: cachePool\n      };\n    } // TODO: Probably should inline this back\n\n    function shouldRemainOnFallback(current, workInProgress, renderLanes) {\n      // If we're already showing a fallback, there are cases where we need to\n      // remain on that fallback regardless of whether the content has resolved.\n      // For example, SuspenseList coordinates when nested content appears.\n      // TODO: For compatibility with offscreen prerendering, this should also check\n      // whether the current fiber (if it exists) was visible in the previous tree.\n      if (current !== null) {\n        var suspenseState = current.memoizedState;\n\n        if (suspenseState === null) {\n          // Currently showing content. Don't hide it, even if ForceSuspenseFallback\n          // is true. More precise name might be \"ForceRemainSuspenseFallback\".\n          // Note: This is a factoring smell. Can't remain on a fallback if there's\n          // no fallback to remain on.\n          return false;\n        }\n      } // Not currently showing content. Consult the Suspense context.\n\n      var suspenseContext = suspenseStackCursor.current;\n      return hasSuspenseListContext(suspenseContext, ForceSuspenseFallback);\n    }\n\n    function getRemainingWorkInPrimaryTree(\n      current,\n      primaryTreeDidDefer,\n      renderLanes\n    ) {\n      var remainingLanes =\n        current !== null\n          ? removeLanes(current.childLanes, renderLanes)\n          : NoLanes;\n\n      if (primaryTreeDidDefer) {\n        // A useDeferredValue hook spawned a deferred task inside the primary tree.\n        // Ensure that we retry this component at the deferred priority.\n        // TODO: We could make this a per-subtree value instead of a global one.\n        // Would need to track it on the context stack somehow, similar to what\n        // we'd have to do for resumable contexts.\n        remainingLanes = mergeLanes(remainingLanes, peekDeferredLane());\n      }\n\n      return remainingLanes;\n    }\n\n    function updateSuspenseComponent(current, workInProgress, renderLanes) {\n      var nextProps = workInProgress.pendingProps; // This is used by DevTools to force a boundary to suspend.\n\n      {\n        if (shouldSuspend(workInProgress)) {\n          workInProgress.flags |= DidCapture;\n        }\n      }\n\n      var showFallback = false;\n      var didSuspend = (workInProgress.flags & DidCapture) !== NoFlags$1;\n\n      if (didSuspend || shouldRemainOnFallback(current)) {\n        // Something in this boundary's subtree already suspended. Switch to\n        // rendering the fallback children.\n        showFallback = true;\n        workInProgress.flags &= ~DidCapture;\n      } // Check if the primary children spawned a deferred task (useDeferredValue)\n      // during the first pass.\n\n      var didPrimaryChildrenDefer =\n        (workInProgress.flags & DidDefer) !== NoFlags$1;\n      workInProgress.flags &= ~DidDefer; // OK, the next part is confusing. We're about to reconcile the Suspense\n      // boundary's children. This involves some custom reconciliation logic. Two\n      // main reasons this is so complicated.\n      //\n      // First, Legacy Mode has different semantics for backwards compatibility. The\n      // primary tree will commit in an inconsistent state, so when we do the\n      // second pass to render the fallback, we do some exceedingly, uh, clever\n      // hacks to make that not totally break. Like transferring effects and\n      // deletions from hidden tree. In Concurrent Mode, it's much simpler,\n      // because we bailout on the primary tree completely and leave it in its old\n      // state, no effects. Same as what we do for Offscreen (except that\n      // Offscreen doesn't have the first render pass).\n      //\n      // Second is hydration. During hydration, the Suspense fiber has a slightly\n      // different layout, where the child points to a dehydrated fragment, which\n      // contains the DOM rendered by the server.\n      //\n      // Third, even if you set all that aside, Suspense is like error boundaries in\n      // that we first we try to render one tree, and if that fails, we render again\n      // and switch to a different tree. Like a try/catch block. So we have to track\n      // which branch we're currently rendering. Ideally we would model this using\n      // a stack.\n\n      if (current === null) {\n        var nextPrimaryChildren = nextProps.children;\n        var nextFallbackChildren = nextProps.fallback;\n\n        if (showFallback) {\n          pushFallbackTreeSuspenseHandler(workInProgress);\n          var fallbackFragment = mountSuspenseFallbackChildren(\n            workInProgress,\n            nextPrimaryChildren,\n            nextFallbackChildren,\n            renderLanes\n          );\n          var primaryChildFragment = workInProgress.child;\n          primaryChildFragment.memoizedState =\n            mountSuspenseOffscreenState(renderLanes);\n          primaryChildFragment.childLanes = getRemainingWorkInPrimaryTree(\n            current,\n            didPrimaryChildrenDefer,\n            renderLanes\n          );\n          workInProgress.memoizedState = SUSPENDED_MARKER;\n\n          return fallbackFragment;\n        } else {\n          pushPrimaryTreeSuspenseHandler(workInProgress);\n          return mountSuspensePrimaryChildren(\n            workInProgress,\n            nextPrimaryChildren\n          );\n        }\n      } else {\n        // This is an update.\n        // Special path for hydration\n        var prevState = current.memoizedState;\n\n        if (prevState !== null) {\n          var _dehydrated = prevState.dehydrated;\n\n          if (_dehydrated !== null) {\n            return updateDehydratedSuspenseComponent(\n              current,\n              workInProgress,\n              didSuspend,\n              didPrimaryChildrenDefer,\n              nextProps,\n              _dehydrated,\n              prevState,\n              renderLanes\n            );\n          }\n        }\n\n        if (showFallback) {\n          pushFallbackTreeSuspenseHandler(workInProgress);\n          var _nextFallbackChildren = nextProps.fallback;\n          var _nextPrimaryChildren = nextProps.children;\n          var fallbackChildFragment = updateSuspenseFallbackChildren(\n            current,\n            workInProgress,\n            _nextPrimaryChildren,\n            _nextFallbackChildren,\n            renderLanes\n          );\n          var _primaryChildFragment2 = workInProgress.child;\n          var prevOffscreenState = current.child.memoizedState;\n          _primaryChildFragment2.memoizedState =\n            prevOffscreenState === null\n              ? mountSuspenseOffscreenState(renderLanes)\n              : updateSuspenseOffscreenState(prevOffscreenState, renderLanes);\n\n          _primaryChildFragment2.childLanes = getRemainingWorkInPrimaryTree(\n            current,\n            didPrimaryChildrenDefer,\n            renderLanes\n          );\n          workInProgress.memoizedState = SUSPENDED_MARKER;\n          return fallbackChildFragment;\n        } else {\n          pushPrimaryTreeSuspenseHandler(workInProgress);\n          var _nextPrimaryChildren2 = nextProps.children;\n\n          var _primaryChildFragment3 = updateSuspensePrimaryChildren(\n            current,\n            workInProgress,\n            _nextPrimaryChildren2,\n            renderLanes\n          );\n\n          workInProgress.memoizedState = null;\n          return _primaryChildFragment3;\n        }\n      }\n    }\n\n    function mountSuspensePrimaryChildren(\n      workInProgress,\n      primaryChildren,\n      renderLanes\n    ) {\n      var mode = workInProgress.mode;\n      var primaryChildProps = {\n        mode: \"visible\",\n        children: primaryChildren\n      };\n      var primaryChildFragment = mountWorkInProgressOffscreenFiber(\n        primaryChildProps,\n        mode\n      );\n      primaryChildFragment.return = workInProgress;\n      workInProgress.child = primaryChildFragment;\n      return primaryChildFragment;\n    }\n\n    function mountSuspenseFallbackChildren(\n      workInProgress,\n      primaryChildren,\n      fallbackChildren,\n      renderLanes\n    ) {\n      var mode = workInProgress.mode;\n      var progressedPrimaryFragment = workInProgress.child;\n      var primaryChildProps = {\n        mode: \"hidden\",\n        children: primaryChildren\n      };\n      var primaryChildFragment;\n      var fallbackChildFragment;\n\n      if (\n        (mode & ConcurrentMode) === NoMode &&\n        progressedPrimaryFragment !== null\n      ) {\n        // In legacy mode, we commit the primary tree as if it successfully\n        // completed, even though it's in an inconsistent state.\n        primaryChildFragment = progressedPrimaryFragment;\n        primaryChildFragment.childLanes = NoLanes;\n        primaryChildFragment.pendingProps = primaryChildProps;\n\n        if (workInProgress.mode & ProfileMode) {\n          // Reset the durations from the first pass so they aren't included in the\n          // final amounts. This seems counterintuitive, since we're intentionally\n          // not measuring part of the render phase, but this makes it match what we\n          // do in Concurrent Mode.\n          primaryChildFragment.actualDuration = 0;\n          primaryChildFragment.actualStartTime = -1;\n          primaryChildFragment.selfBaseDuration = 0;\n          primaryChildFragment.treeBaseDuration = 0;\n        }\n\n        fallbackChildFragment = createFiberFromFragment(\n          fallbackChildren,\n          mode,\n          renderLanes,\n          null\n        );\n      } else {\n        primaryChildFragment = mountWorkInProgressOffscreenFiber(\n          primaryChildProps,\n          mode\n        );\n        fallbackChildFragment = createFiberFromFragment(\n          fallbackChildren,\n          mode,\n          renderLanes,\n          null\n        );\n      }\n\n      primaryChildFragment.return = workInProgress;\n      fallbackChildFragment.return = workInProgress;\n      primaryChildFragment.sibling = fallbackChildFragment;\n      workInProgress.child = primaryChildFragment;\n      return fallbackChildFragment;\n    }\n\n    function mountWorkInProgressOffscreenFiber(\n      offscreenProps,\n      mode,\n      renderLanes\n    ) {\n      // The props argument to `createFiberFromOffscreen` is `any` typed, so we use\n      // this wrapper function to constrain it.\n      return createFiberFromOffscreen(offscreenProps, mode, NoLanes, null);\n    }\n\n    function updateWorkInProgressOffscreenFiber(current, offscreenProps) {\n      // The props argument to `createWorkInProgress` is `any` typed, so we use this\n      // wrapper function to constrain it.\n      return createWorkInProgress(current, offscreenProps);\n    }\n\n    function updateSuspensePrimaryChildren(\n      current,\n      workInProgress,\n      primaryChildren,\n      renderLanes\n    ) {\n      var currentPrimaryChildFragment = current.child;\n      var currentFallbackChildFragment = currentPrimaryChildFragment.sibling;\n      var primaryChildFragment = updateWorkInProgressOffscreenFiber(\n        currentPrimaryChildFragment,\n        {\n          mode: \"visible\",\n          children: primaryChildren\n        }\n      );\n\n      if ((workInProgress.mode & ConcurrentMode) === NoMode) {\n        primaryChildFragment.lanes = renderLanes;\n      }\n\n      primaryChildFragment.return = workInProgress;\n      primaryChildFragment.sibling = null;\n\n      if (currentFallbackChildFragment !== null) {\n        // Delete the fallback child fragment\n        var deletions = workInProgress.deletions;\n\n        if (deletions === null) {\n          workInProgress.deletions = [currentFallbackChildFragment];\n          workInProgress.flags |= ChildDeletion;\n        } else {\n          deletions.push(currentFallbackChildFragment);\n        }\n      }\n\n      workInProgress.child = primaryChildFragment;\n      return primaryChildFragment;\n    }\n\n    function updateSuspenseFallbackChildren(\n      current,\n      workInProgress,\n      primaryChildren,\n      fallbackChildren,\n      renderLanes\n    ) {\n      var mode = workInProgress.mode;\n      var currentPrimaryChildFragment = current.child;\n      var currentFallbackChildFragment = currentPrimaryChildFragment.sibling;\n      var primaryChildProps = {\n        mode: \"hidden\",\n        children: primaryChildren\n      };\n      var primaryChildFragment;\n\n      if (\n        // In legacy mode, we commit the primary tree as if it successfully\n        // completed, even though it's in an inconsistent state.\n        (mode & ConcurrentMode) === NoMode && // Make sure we're on the second pass, i.e. the primary child fragment was\n        // already cloned. In legacy mode, the only case where this isn't true is\n        // when DevTools forces us to display a fallback; we skip the first render\n        // pass entirely and go straight to rendering the fallback. (In Concurrent\n        // Mode, SuspenseList can also trigger this scenario, but this is a legacy-\n        // only codepath.)\n        workInProgress.child !== currentPrimaryChildFragment\n      ) {\n        var progressedPrimaryFragment = workInProgress.child;\n        primaryChildFragment = progressedPrimaryFragment;\n        primaryChildFragment.childLanes = NoLanes;\n        primaryChildFragment.pendingProps = primaryChildProps;\n\n        if (workInProgress.mode & ProfileMode) {\n          // Reset the durations from the first pass so they aren't included in the\n          // final amounts. This seems counterintuitive, since we're intentionally\n          // not measuring part of the render phase, but this makes it match what we\n          // do in Concurrent Mode.\n          primaryChildFragment.actualDuration = 0;\n          primaryChildFragment.actualStartTime = -1;\n          primaryChildFragment.selfBaseDuration =\n            currentPrimaryChildFragment.selfBaseDuration;\n          primaryChildFragment.treeBaseDuration =\n            currentPrimaryChildFragment.treeBaseDuration;\n        } // The fallback fiber was added as a deletion during the first pass.\n        // However, since we're going to remain on the fallback, we no longer want\n        // to delete it.\n\n        workInProgress.deletions = null;\n      } else {\n        primaryChildFragment = updateWorkInProgressOffscreenFiber(\n          currentPrimaryChildFragment,\n          primaryChildProps\n        ); // Since we're reusing a current tree, we need to reuse the flags, too.\n        // (We don't do this in legacy mode, because in legacy mode we don't re-use\n        // the current tree; see previous branch.)\n\n        primaryChildFragment.subtreeFlags =\n          currentPrimaryChildFragment.subtreeFlags & StaticMask;\n      }\n\n      var fallbackChildFragment;\n\n      if (currentFallbackChildFragment !== null) {\n        fallbackChildFragment = createWorkInProgress(\n          currentFallbackChildFragment,\n          fallbackChildren\n        );\n      } else {\n        fallbackChildFragment = createFiberFromFragment(\n          fallbackChildren,\n          mode,\n          renderLanes,\n          null\n        ); // Needs a placement effect because the parent (the Suspense boundary) already\n        // mounted but this is a new fiber.\n\n        fallbackChildFragment.flags |= Placement;\n      }\n\n      fallbackChildFragment.return = workInProgress;\n      primaryChildFragment.return = workInProgress;\n      primaryChildFragment.sibling = fallbackChildFragment;\n      workInProgress.child = primaryChildFragment;\n      return fallbackChildFragment;\n    }\n\n    function retrySuspenseComponentWithoutHydrating(\n      current,\n      workInProgress,\n      renderLanes,\n      recoverableError\n    ) {\n      // Falling back to client rendering. Because this has performance\n      // implications, it's considered a recoverable error, even though the user\n      // likely won't observe anything wrong with the UI.\n      //\n      // The error is passed in as an argument to enforce that every caller provide\n      // a custom message, or explicitly opt out (currently the only path that opts\n      // out is legacy mode; every concurrent path provides an error).\n      if (recoverableError !== null) {\n        queueHydrationError(recoverableError);\n      } // This will add the old fiber to the deletion list\n\n      reconcileChildFibers(workInProgress, current.child, null, renderLanes); // We're now not suspended nor dehydrated.\n\n      var nextProps = workInProgress.pendingProps;\n      var primaryChildren = nextProps.children;\n      var primaryChildFragment = mountSuspensePrimaryChildren(\n        workInProgress,\n        primaryChildren\n      ); // Needs a placement effect because the parent (the Suspense boundary) already\n      // mounted but this is a new fiber.\n\n      primaryChildFragment.flags |= Placement;\n      workInProgress.memoizedState = null;\n      return primaryChildFragment;\n    }\n\n    function mountSuspenseFallbackAfterRetryWithoutHydrating(\n      current,\n      workInProgress,\n      primaryChildren,\n      fallbackChildren,\n      renderLanes\n    ) {\n      var fiberMode = workInProgress.mode;\n      var primaryChildProps = {\n        mode: \"visible\",\n        children: primaryChildren\n      };\n      var primaryChildFragment = mountWorkInProgressOffscreenFiber(\n        primaryChildProps,\n        fiberMode\n      );\n      var fallbackChildFragment = createFiberFromFragment(\n        fallbackChildren,\n        fiberMode,\n        renderLanes,\n        null\n      ); // Needs a placement effect because the parent (the Suspense\n      // boundary) already mounted but this is a new fiber.\n\n      fallbackChildFragment.flags |= Placement;\n      primaryChildFragment.return = workInProgress;\n      fallbackChildFragment.return = workInProgress;\n      primaryChildFragment.sibling = fallbackChildFragment;\n      workInProgress.child = primaryChildFragment;\n\n      if ((workInProgress.mode & ConcurrentMode) !== NoMode) {\n        // We will have dropped the effect list which contains the\n        // deletion. We need to reconcile to delete the current child.\n        reconcileChildFibers(workInProgress, current.child, null, renderLanes);\n      }\n\n      return fallbackChildFragment;\n    }\n\n    function updateDehydratedSuspenseComponent(\n      current,\n      workInProgress,\n      didSuspend,\n      didPrimaryChildrenDefer,\n      nextProps,\n      suspenseInstance,\n      suspenseState,\n      renderLanes\n    ) {\n      if (!didSuspend) {\n        // This is the first render pass. Attempt to hydrate.\n        pushPrimaryTreeSuspenseHandler(workInProgress); // We should never be hydrating at this point because it is the first pass,\n\n        if ((workInProgress.mode & ConcurrentMode) === NoMode) {\n          return retrySuspenseComponentWithoutHydrating(\n            current,\n            workInProgress,\n            renderLanes,\n            null\n          );\n        }\n\n        if (isSuspenseInstanceFallback()) {\n          // This boundary is in a permanent fallback state. In this case, we'll never\n          // get an update and we'll never be able to hydrate the final content. Let's just try the\n          // client side render instead.\n          var digest;\n          var message, stack;\n\n          {\n            var _getSuspenseInstanceF =\n              getSuspenseInstanceFallbackErrorDetails();\n\n            digest = _getSuspenseInstanceF.digest;\n            message = _getSuspenseInstanceF.message;\n            stack = _getSuspenseInstanceF.stack;\n          }\n\n          var capturedValue = null; // TODO: Figure out a better signal than encoding a magic digest value.\n\n          {\n            var error;\n\n            if (message) {\n              // eslint-disable-next-line react-internal/prod-error-codes\n              error = new Error(message);\n            } else {\n              error = new Error(\n                \"The server could not finish this Suspense boundary, likely \" +\n                  \"due to an error during server rendering. Switched to \" +\n                  \"client rendering.\"\n              );\n            }\n\n            error.digest = digest;\n            capturedValue = createCapturedValue(error, digest, stack);\n          }\n\n          return retrySuspenseComponentWithoutHydrating(\n            current,\n            workInProgress,\n            renderLanes,\n            capturedValue\n          );\n        }\n        // any context has changed, we need to treat is as if the input might have changed.\n\n        var hasContextChanged = includesSomeLane(\n          renderLanes,\n          current.childLanes\n        );\n\n        if (didReceiveUpdate || hasContextChanged) {\n          // This boundary has changed since the first render. This means that we are now unable to\n          // hydrate it. We might still be able to hydrate it using a higher priority lane.\n          var root = getWorkInProgressRoot();\n\n          if (root !== null) {\n            var attemptHydrationAtLane = getBumpedLaneForHydration(\n              root,\n              renderLanes\n            );\n\n            if (\n              attemptHydrationAtLane !== NoLane &&\n              attemptHydrationAtLane !== suspenseState.retryLane\n            ) {\n              // Intentionally mutating since this render will get interrupted. This\n              // is one of the very rare times where we mutate the current tree\n              // during the render phase.\n              suspenseState.retryLane = attemptHydrationAtLane;\n              enqueueConcurrentRenderForLane(current, attemptHydrationAtLane);\n              scheduleUpdateOnFiber(root, current, attemptHydrationAtLane); // Throw a special object that signals to the work loop that it should\n              // interrupt the current render.\n              //\n              // Because we're inside a React-only execution stack, we don't\n              // strictly need to throw here — we could instead modify some internal\n              // work loop state. But using an exception means we don't need to\n              // check for this case on every iteration of the work loop. So doing\n              // it this way moves the check out of the fast path.\n\n              throw SelectiveHydrationException;\n            }\n          } // If we did not selectively hydrate, we'll continue rendering without\n          // hydrating. Mark this tree as suspended to prevent it from committing\n          // outside a transition.\n          //\n          // This path should only happen if the hydration lane already suspended.\n          // Currently, it also happens during sync updates because there is no\n          // hydration lane for sync updates.\n          // TODO: We should ideally have a sync hydration lane that we can apply to do\n          // a pass where we hydrate this subtree in place using the previous Context and then\n          // reapply the update afterwards.\n\n          if (isSuspenseInstancePending());\n          else {\n            renderDidSuspendDelayIfPossible();\n          }\n\n          return retrySuspenseComponentWithoutHydrating(\n            current,\n            workInProgress,\n            renderLanes,\n            null\n          );\n        } else if (isSuspenseInstancePending()) {\n          // This component is still pending more data from the server, so we can't hydrate its\n          // content. We treat it as if this component suspended itself. It might seem as if\n          // we could just try to render it client-side instead. However, this will perform a\n          // lot of unnecessary work and is unlikely to complete since it often will suspend\n          // on missing data anyway. Additionally, the server might be able to render more\n          // than we can on the client yet. In that case we'd end up with more fallback states\n          // on the client than if we just leave it alone. If the server times out or errors\n          // these should update this boundary to the permanent Fallback state instead.\n          // Mark it as having captured (i.e. suspended).\n          workInProgress.flags |= DidCapture; // Leave the child in place. I.e. the dehydrated fragment.\n\n          workInProgress.child = current.child; // Register a callback to retry this boundary once the server has sent the result.\n\n          retryDehydratedSuspenseBoundary.bind(null, current);\n          registerSuspenseInstanceRetry();\n          return null;\n        } else {\n          var primaryChildren = nextProps.children;\n          var primaryChildFragment = mountSuspensePrimaryChildren(\n            workInProgress,\n            primaryChildren\n          ); // Mark the children as hydrating. This is a fast path to know whether this\n          // tree is part of a hydrating tree. This is used to determine if a child\n          // node has fully mounted yet, and for scheduling event replaying.\n          // Conceptually this is similar to Placement in that a new subtree is\n          // inserted into the React tree here. It just happens to not need DOM\n          // mutations because it already exists.\n\n          primaryChildFragment.flags |= Hydrating;\n          return primaryChildFragment;\n        }\n      } else {\n        // This is the second render pass. We already attempted to hydrated, but\n        // something either suspended or errored.\n        if (workInProgress.flags & ForceClientRender) {\n          // Something errored during hydration. Try again without hydrating.\n          pushPrimaryTreeSuspenseHandler(workInProgress);\n          workInProgress.flags &= ~ForceClientRender;\n\n          var _capturedValue = createCapturedValue(\n            new Error(\n              \"There was an error while hydrating this Suspense boundary. \" +\n                \"Switched to client rendering.\"\n            )\n          );\n\n          return retrySuspenseComponentWithoutHydrating(\n            current,\n            workInProgress,\n            renderLanes,\n            _capturedValue\n          );\n        } else if (workInProgress.memoizedState !== null) {\n          // Something suspended and we should still be in dehydrated mode.\n          // Leave the existing child in place.\n          // Push to avoid a mismatch\n          pushFallbackTreeSuspenseHandler(workInProgress);\n          workInProgress.child = current.child; // The dehydrated completion pass expects this flag to be there\n          // but the normal suspense pass doesn't.\n\n          workInProgress.flags |= DidCapture;\n          return null;\n        } else {\n          // Suspended but we should no longer be in dehydrated mode.\n          // Therefore we now have to render the fallback.\n          pushFallbackTreeSuspenseHandler(workInProgress);\n          var nextPrimaryChildren = nextProps.children;\n          var nextFallbackChildren = nextProps.fallback;\n          var fallbackChildFragment =\n            mountSuspenseFallbackAfterRetryWithoutHydrating(\n              current,\n              workInProgress,\n              nextPrimaryChildren,\n              nextFallbackChildren,\n              renderLanes\n            );\n          var _primaryChildFragment4 = workInProgress.child;\n          _primaryChildFragment4.memoizedState =\n            mountSuspenseOffscreenState(renderLanes);\n          _primaryChildFragment4.childLanes = getRemainingWorkInPrimaryTree(\n            current,\n            didPrimaryChildrenDefer,\n            renderLanes\n          );\n          workInProgress.memoizedState = SUSPENDED_MARKER;\n          return fallbackChildFragment;\n        }\n      }\n    }\n\n    function scheduleSuspenseWorkOnFiber(fiber, renderLanes, propagationRoot) {\n      fiber.lanes = mergeLanes(fiber.lanes, renderLanes);\n      var alternate = fiber.alternate;\n\n      if (alternate !== null) {\n        alternate.lanes = mergeLanes(alternate.lanes, renderLanes);\n      }\n\n      scheduleContextWorkOnParentPath(\n        fiber.return,\n        renderLanes,\n        propagationRoot\n      );\n    }\n\n    function propagateSuspenseContextChange(\n      workInProgress,\n      firstChild,\n      renderLanes\n    ) {\n      // Mark any Suspense boundaries with fallbacks as having work to do.\n      // If they were previously forced into fallbacks, they may now be able\n      // to unblock.\n      var node = firstChild;\n\n      while (node !== null) {\n        if (node.tag === SuspenseComponent) {\n          var state = node.memoizedState;\n\n          if (state !== null) {\n            scheduleSuspenseWorkOnFiber(node, renderLanes, workInProgress);\n          }\n        } else if (node.tag === SuspenseListComponent) {\n          // If the tail is hidden there might not be an Suspense boundaries\n          // to schedule work on. In this case we have to schedule it on the\n          // list itself.\n          // We don't have to traverse to the children of the list since\n          // the list will propagate the change when it rerenders.\n          scheduleSuspenseWorkOnFiber(node, renderLanes, workInProgress);\n        } else if (node.child !== null) {\n          node.child.return = node;\n          node = node.child;\n          continue;\n        }\n\n        if (node === workInProgress) {\n          return;\n        } // $FlowFixMe[incompatible-use] found when upgrading Flow\n\n        while (node.sibling === null) {\n          // $FlowFixMe[incompatible-use] found when upgrading Flow\n          if (node.return === null || node.return === workInProgress) {\n            return;\n          }\n\n          node = node.return;\n        } // $FlowFixMe[incompatible-use] found when upgrading Flow\n\n        node.sibling.return = node.return;\n        node = node.sibling;\n      }\n    }\n\n    function findLastContentRow(firstChild) {\n      // This is going to find the last row among these children that is already\n      // showing content on the screen, as opposed to being in fallback state or\n      // new. If a row has multiple Suspense boundaries, any of them being in the\n      // fallback state, counts as the whole row being in a fallback state.\n      // Note that the \"rows\" will be workInProgress, but any nested children\n      // will still be current since we haven't rendered them yet. The mounted\n      // order may not be the same as the new order. We use the new order.\n      var row = firstChild;\n      var lastContentRow = null;\n\n      while (row !== null) {\n        var currentRow = row.alternate; // New rows can't be content rows.\n\n        if (currentRow !== null && findFirstSuspended(currentRow) === null) {\n          lastContentRow = row;\n        }\n\n        row = row.sibling;\n      }\n\n      return lastContentRow;\n    }\n\n    function validateRevealOrder(revealOrder) {\n      {\n        if (\n          revealOrder !== undefined &&\n          revealOrder !== \"forwards\" &&\n          revealOrder !== \"backwards\" &&\n          revealOrder !== \"together\" &&\n          !didWarnAboutRevealOrder[revealOrder]\n        ) {\n          didWarnAboutRevealOrder[revealOrder] = true;\n\n          if (typeof revealOrder === \"string\") {\n            switch (revealOrder.toLowerCase()) {\n              case \"together\":\n              case \"forwards\":\n              case \"backwards\": {\n                error(\n                  '\"%s\" is not a valid value for revealOrder on <SuspenseList />. ' +\n                    'Use lowercase \"%s\" instead.',\n                  revealOrder,\n                  revealOrder.toLowerCase()\n                );\n\n                break;\n              }\n\n              case \"forward\":\n              case \"backward\": {\n                error(\n                  '\"%s\" is not a valid value for revealOrder on <SuspenseList />. ' +\n                    'React uses the -s suffix in the spelling. Use \"%ss\" instead.',\n                  revealOrder,\n                  revealOrder.toLowerCase()\n                );\n\n                break;\n              }\n\n              default:\n                error(\n                  '\"%s\" is not a supported revealOrder on <SuspenseList />. ' +\n                    'Did you mean \"together\", \"forwards\" or \"backwards\"?',\n                  revealOrder\n                );\n\n                break;\n            }\n          } else {\n            error(\n              \"%s is not a supported value for revealOrder on <SuspenseList />. \" +\n                'Did you mean \"together\", \"forwards\" or \"backwards\"?',\n              revealOrder\n            );\n          }\n        }\n      }\n    }\n\n    function validateTailOptions(tailMode, revealOrder) {\n      {\n        if (tailMode !== undefined && !didWarnAboutTailOptions[tailMode]) {\n          if (tailMode !== \"collapsed\" && tailMode !== \"hidden\") {\n            didWarnAboutTailOptions[tailMode] = true;\n\n            error(\n              '\"%s\" is not a supported value for tail on <SuspenseList />. ' +\n                'Did you mean \"collapsed\" or \"hidden\"?',\n              tailMode\n            );\n          } else if (\n            revealOrder !== \"forwards\" &&\n            revealOrder !== \"backwards\"\n          ) {\n            didWarnAboutTailOptions[tailMode] = true;\n\n            error(\n              '<SuspenseList tail=\"%s\" /> is only valid if revealOrder is ' +\n                '\"forwards\" or \"backwards\". ' +\n                'Did you mean to specify revealOrder=\"forwards\"?',\n              tailMode\n            );\n          }\n        }\n      }\n    }\n\n    function validateSuspenseListNestedChild(childSlot, index) {\n      {\n        var isAnArray = isArray(childSlot);\n        var isIterable =\n          !isAnArray && typeof getIteratorFn(childSlot) === \"function\";\n\n        if (isAnArray || isIterable) {\n          var type = isAnArray ? \"array\" : \"iterable\";\n\n          error(\n            \"A nested %s was passed to row #%s in <SuspenseList />. Wrap it in \" +\n              \"an additional SuspenseList to configure its revealOrder: \" +\n              \"<SuspenseList revealOrder=...> ... \" +\n              \"<SuspenseList revealOrder=...>{%s}</SuspenseList> ... \" +\n              \"</SuspenseList>\",\n            type,\n            index,\n            type\n          );\n\n          return false;\n        }\n      }\n\n      return true;\n    }\n\n    function validateSuspenseListChildren(children, revealOrder) {\n      {\n        if (\n          (revealOrder === \"forwards\" || revealOrder === \"backwards\") &&\n          children !== undefined &&\n          children !== null &&\n          children !== false\n        ) {\n          if (isArray(children)) {\n            for (var i = 0; i < children.length; i++) {\n              if (!validateSuspenseListNestedChild(children[i], i)) {\n                return;\n              }\n            }\n          } else {\n            var iteratorFn = getIteratorFn(children);\n\n            if (typeof iteratorFn === \"function\") {\n              var childrenIterator = iteratorFn.call(children);\n\n              if (childrenIterator) {\n                var step = childrenIterator.next();\n                var _i = 0;\n\n                for (; !step.done; step = childrenIterator.next()) {\n                  if (!validateSuspenseListNestedChild(step.value, _i)) {\n                    return;\n                  }\n\n                  _i++;\n                }\n              }\n            } else {\n              error(\n                'A single row was passed to a <SuspenseList revealOrder=\"%s\" />. ' +\n                  \"This is not useful since it needs multiple rows. \" +\n                  \"Did you mean to pass multiple children or an array?\",\n                revealOrder\n              );\n            }\n          }\n        }\n      }\n    }\n\n    function initSuspenseListRenderState(\n      workInProgress,\n      isBackwards,\n      tail,\n      lastContentRow,\n      tailMode\n    ) {\n      var renderState = workInProgress.memoizedState;\n\n      if (renderState === null) {\n        workInProgress.memoizedState = {\n          isBackwards: isBackwards,\n          rendering: null,\n          renderingStartTime: 0,\n          last: lastContentRow,\n          tail: tail,\n          tailMode: tailMode\n        };\n      } else {\n        // We can reuse the existing object from previous renders.\n        renderState.isBackwards = isBackwards;\n        renderState.rendering = null;\n        renderState.renderingStartTime = 0;\n        renderState.last = lastContentRow;\n        renderState.tail = tail;\n        renderState.tailMode = tailMode;\n      }\n    } // This can end up rendering this component multiple passes.\n    // The first pass splits the children fibers into two sets. A head and tail.\n    // We first render the head. If anything is in fallback state, we do another\n    // pass through beginWork to rerender all children (including the tail) with\n    // the force suspend context. If the first render didn't have anything in\n    // in fallback state. Then we render each row in the tail one-by-one.\n    // That happens in the completeWork phase without going back to beginWork.\n\n    function updateSuspenseListComponent(current, workInProgress, renderLanes) {\n      var nextProps = workInProgress.pendingProps;\n      var revealOrder = nextProps.revealOrder;\n      var tailMode = nextProps.tail;\n      var newChildren = nextProps.children;\n      validateRevealOrder(revealOrder);\n      validateTailOptions(tailMode, revealOrder);\n      validateSuspenseListChildren(newChildren, revealOrder);\n      reconcileChildren(current, workInProgress, newChildren, renderLanes);\n      var suspenseContext = suspenseStackCursor.current;\n      var shouldForceFallback = hasSuspenseListContext(\n        suspenseContext,\n        ForceSuspenseFallback\n      );\n\n      if (shouldForceFallback) {\n        suspenseContext = setShallowSuspenseListContext(\n          suspenseContext,\n          ForceSuspenseFallback\n        );\n        workInProgress.flags |= DidCapture;\n      } else {\n        var didSuspendBefore =\n          current !== null && (current.flags & DidCapture) !== NoFlags$1;\n\n        if (didSuspendBefore) {\n          // If we previously forced a fallback, we need to schedule work\n          // on any nested boundaries to let them know to try to render\n          // again. This is the same as context updating.\n          propagateSuspenseContextChange(\n            workInProgress,\n            workInProgress.child,\n            renderLanes\n          );\n        }\n\n        suspenseContext = setDefaultShallowSuspenseListContext(suspenseContext);\n      }\n\n      pushSuspenseListContext(workInProgress, suspenseContext);\n\n      if ((workInProgress.mode & ConcurrentMode) === NoMode) {\n        // In legacy mode, SuspenseList doesn't work so we just\n        // use make it a noop by treating it as the default revealOrder.\n        workInProgress.memoizedState = null;\n      } else {\n        switch (revealOrder) {\n          case \"forwards\": {\n            var lastContentRow = findLastContentRow(workInProgress.child);\n            var tail;\n\n            if (lastContentRow === null) {\n              // The whole list is part of the tail.\n              // TODO: We could fast path by just rendering the tail now.\n              tail = workInProgress.child;\n              workInProgress.child = null;\n            } else {\n              // Disconnect the tail rows after the content row.\n              // We're going to render them separately later.\n              tail = lastContentRow.sibling;\n              lastContentRow.sibling = null;\n            }\n\n            initSuspenseListRenderState(\n              workInProgress,\n              false, // isBackwards\n              tail,\n              lastContentRow,\n              tailMode\n            );\n            break;\n          }\n\n          case \"backwards\": {\n            // We're going to find the first row that has existing content.\n            // At the same time we're going to reverse the list of everything\n            // we pass in the meantime. That's going to be our tail in reverse\n            // order.\n            var _tail = null;\n            var row = workInProgress.child;\n            workInProgress.child = null;\n\n            while (row !== null) {\n              var currentRow = row.alternate; // New rows can't be content rows.\n\n              if (\n                currentRow !== null &&\n                findFirstSuspended(currentRow) === null\n              ) {\n                // This is the beginning of the main content.\n                workInProgress.child = row;\n                break;\n              }\n\n              var nextRow = row.sibling;\n              row.sibling = _tail;\n              _tail = row;\n              row = nextRow;\n            } // TODO: If workInProgress.child is null, we can continue on the tail immediately.\n\n            initSuspenseListRenderState(\n              workInProgress,\n              true, // isBackwards\n              _tail,\n              null, // last\n              tailMode\n            );\n            break;\n          }\n\n          case \"together\": {\n            initSuspenseListRenderState(\n              workInProgress,\n              false, // isBackwards\n              null, // tail\n              null, // last\n              undefined\n            );\n            break;\n          }\n\n          default: {\n            // The default reveal order is the same as not having\n            // a boundary.\n            workInProgress.memoizedState = null;\n          }\n        }\n      }\n\n      return workInProgress.child;\n    }\n\n    function updatePortalComponent(current, workInProgress, renderLanes) {\n      pushHostContainer(workInProgress, workInProgress.stateNode.containerInfo);\n      var nextChildren = workInProgress.pendingProps;\n\n      if (current === null) {\n        // Portals are special because we don't append the children during mount\n        // but at commit. Therefore we need to track insertions which the normal\n        // flow doesn't do during mount. This doesn't happen at the root because\n        // the root always starts with a \"current\" with a null child.\n        // TODO: Consider unifying this with how the root works.\n        workInProgress.child = reconcileChildFibers(\n          workInProgress,\n          null,\n          nextChildren,\n          renderLanes\n        );\n      } else {\n        reconcileChildren(current, workInProgress, nextChildren, renderLanes);\n      }\n\n      return workInProgress.child;\n    }\n\n    var hasWarnedAboutUsingNoValuePropOnContextProvider = false;\n\n    function updateContextProvider(current, workInProgress, renderLanes) {\n      var providerType = workInProgress.type;\n      var context = providerType._context;\n      var newProps = workInProgress.pendingProps;\n      var oldProps = workInProgress.memoizedProps;\n      var newValue = newProps.value;\n\n      {\n        if (!(\"value\" in newProps)) {\n          if (!hasWarnedAboutUsingNoValuePropOnContextProvider) {\n            hasWarnedAboutUsingNoValuePropOnContextProvider = true;\n\n            error(\n              \"The `value` prop is required for the `<Context.Provider>`. Did you misspell it or forget to pass it?\"\n            );\n          }\n        }\n\n        var providerPropTypes = workInProgress.type.propTypes;\n\n        if (providerPropTypes) {\n          checkPropTypes(\n            providerPropTypes,\n            newProps,\n            \"prop\",\n            \"Context.Provider\"\n          );\n        }\n      }\n\n      pushProvider(workInProgress, context, newValue);\n\n      {\n        if (oldProps !== null) {\n          var oldValue = oldProps.value;\n\n          if (objectIs(oldValue, newValue)) {\n            // No change. Bailout early if children are the same.\n            if (\n              oldProps.children === newProps.children &&\n              !hasContextChanged()\n            ) {\n              return bailoutOnAlreadyFinishedWork(\n                current,\n                workInProgress,\n                renderLanes\n              );\n            }\n          } else {\n            // The context value changed. Search for matching consumers and schedule\n            // them to update.\n            propagateContextChange(workInProgress, context, renderLanes);\n          }\n        }\n      }\n\n      var newChildren = newProps.children;\n      reconcileChildren(current, workInProgress, newChildren, renderLanes);\n      return workInProgress.child;\n    }\n\n    var hasWarnedAboutUsingContextAsConsumer = false;\n\n    function updateContextConsumer(current, workInProgress, renderLanes) {\n      var context = workInProgress.type; // The logic below for Context differs depending on PROD or DEV mode. In\n      // DEV mode, we create a separate object for Context.Consumer that acts\n      // like a proxy to Context. This proxy object adds unnecessary code in PROD\n      // so we use the old behaviour (Context.Consumer references Context) to\n      // reduce size and overhead. The separate object references context via\n      // a property called \"_context\", which also gives us the ability to check\n      // in DEV mode if this property exists or not and warn if it does not.\n\n      {\n        if (context._context === undefined) {\n          // This may be because it's a Context (rather than a Consumer).\n          // Or it may be because it's older React where they're the same thing.\n          // We only want to warn if we're sure it's a new React.\n          if (context !== context.Consumer) {\n            if (!hasWarnedAboutUsingContextAsConsumer) {\n              hasWarnedAboutUsingContextAsConsumer = true;\n\n              error(\n                \"Rendering <Context> directly is not supported and will be removed in \" +\n                  \"a future major release. Did you mean to render <Context.Consumer> instead?\"\n              );\n            }\n          }\n        } else {\n          context = context._context;\n        }\n      }\n\n      var newProps = workInProgress.pendingProps;\n      var render = newProps.children;\n\n      {\n        if (typeof render !== \"function\") {\n          error(\n            \"A context consumer was rendered with multiple children, or a child \" +\n              \"that isn't a function. A context consumer expects a single child \" +\n              \"that is a function. If you did pass a function, make sure there \" +\n              \"is no trailing or leading whitespace around it.\"\n          );\n        }\n      }\n\n      prepareToReadContext(workInProgress, renderLanes);\n      var newValue = readContext(context);\n\n      var newChildren;\n\n      {\n        ReactCurrentOwner$2.current = workInProgress;\n        setIsRendering(true);\n        newChildren = render(newValue);\n        setIsRendering(false);\n      }\n\n      workInProgress.flags |= PerformedWork;\n      reconcileChildren(current, workInProgress, newChildren, renderLanes);\n      return workInProgress.child;\n    }\n\n    function markWorkInProgressReceivedUpdate() {\n      didReceiveUpdate = true;\n    }\n\n    function resetSuspendedCurrentOnMountInLegacyMode(current, workInProgress) {\n      if ((workInProgress.mode & ConcurrentMode) === NoMode) {\n        if (current !== null) {\n          // A lazy component only mounts if it suspended inside a non-\n          // concurrent tree, in an inconsistent state. We want to treat it like\n          // a new mount, even though an empty version of it already committed.\n          // Disconnect the alternate pointers.\n          current.alternate = null;\n          workInProgress.alternate = null; // Since this is conceptually a new fiber, schedule a Placement effect\n\n          workInProgress.flags |= Placement;\n        }\n      }\n    }\n\n    function bailoutOnAlreadyFinishedWork(\n      current,\n      workInProgress,\n      renderLanes\n    ) {\n      if (current !== null) {\n        // Reuse previous dependencies\n        workInProgress.dependencies = current.dependencies;\n      }\n\n      {\n        // Don't update \"base\" render times for bailouts.\n        stopProfilerTimerIfRunning();\n      }\n\n      markSkippedUpdateLanes(workInProgress.lanes); // Check if the children have any pending work.\n\n      if (!includesSomeLane(renderLanes, workInProgress.childLanes)) {\n        // The children don't have any work either. We can skip them.\n        // TODO: Once we add back resuming, we should check if the children are\n        // a work-in-progress set. If so, we need to transfer their effects.\n        {\n          return null;\n        }\n      } // This fiber doesn't have work, but its subtree does. Clone the child\n      // fibers and continue.\n\n      cloneChildFibers(current, workInProgress);\n      return workInProgress.child;\n    }\n\n    function remountFiber(current, oldWorkInProgress, newWorkInProgress) {\n      {\n        var returnFiber = oldWorkInProgress.return;\n\n        if (returnFiber === null) {\n          // eslint-disable-next-line react-internal/prod-error-codes\n          throw new Error(\"Cannot swap the root fiber.\");\n        } // Disconnect from the old current.\n        // It will get deleted.\n\n        current.alternate = null;\n        oldWorkInProgress.alternate = null; // Connect to the new tree.\n\n        newWorkInProgress.index = oldWorkInProgress.index;\n        newWorkInProgress.sibling = oldWorkInProgress.sibling;\n        newWorkInProgress.return = oldWorkInProgress.return;\n        newWorkInProgress.ref = oldWorkInProgress.ref; // Replace the child/sibling pointers above it.\n\n        if (oldWorkInProgress === returnFiber.child) {\n          returnFiber.child = newWorkInProgress;\n        } else {\n          var prevSibling = returnFiber.child;\n\n          if (prevSibling === null) {\n            // eslint-disable-next-line react-internal/prod-error-codes\n            throw new Error(\"Expected parent to have a child.\");\n          } // $FlowFixMe[incompatible-use] found when upgrading Flow\n\n          while (prevSibling.sibling !== oldWorkInProgress) {\n            // $FlowFixMe[incompatible-use] found when upgrading Flow\n            prevSibling = prevSibling.sibling;\n\n            if (prevSibling === null) {\n              // eslint-disable-next-line react-internal/prod-error-codes\n              throw new Error(\"Expected to find the previous sibling.\");\n            }\n          } // $FlowFixMe[incompatible-use] found when upgrading Flow\n\n          prevSibling.sibling = newWorkInProgress;\n        } // Delete the old fiber and place the new one.\n        // Since the old fiber is disconnected, we have to schedule it manually.\n\n        var deletions = returnFiber.deletions;\n\n        if (deletions === null) {\n          returnFiber.deletions = [current];\n          returnFiber.flags |= ChildDeletion;\n        } else {\n          deletions.push(current);\n        }\n\n        newWorkInProgress.flags |= Placement; // Restart work from the new fiber.\n\n        return newWorkInProgress;\n      }\n    }\n\n    function checkScheduledUpdateOrContext(current, renderLanes) {\n      // Before performing an early bailout, we must check if there are pending\n      // updates or context.\n      var updateLanes = current.lanes;\n\n      if (includesSomeLane(updateLanes, renderLanes)) {\n        return true;\n      } // No pending update, but because context is propagated lazily, we need\n\n      return false;\n    }\n\n    function attemptEarlyBailoutIfNoScheduledUpdate(\n      current,\n      workInProgress,\n      renderLanes\n    ) {\n      // This fiber does not have any pending work. Bailout without entering\n      // the begin phase. There's still some bookkeeping we that needs to be done\n      // in this optimized path, mostly pushing stuff onto the stack.\n      switch (workInProgress.tag) {\n        case HostRoot:\n          pushHostRootContext(workInProgress);\n          break;\n\n        case HostSingleton:\n        case HostComponent:\n          pushHostContext(workInProgress);\n          break;\n\n        case ClassComponent: {\n          var Component = workInProgress.type;\n\n          if (isContextProvider(Component)) {\n            pushContextProvider(workInProgress);\n          }\n\n          break;\n        }\n\n        case HostPortal:\n          pushHostContainer(\n            workInProgress,\n            workInProgress.stateNode.containerInfo\n          );\n          break;\n\n        case ContextProvider: {\n          var newValue = workInProgress.memoizedProps.value;\n          var context = workInProgress.type._context;\n          pushProvider(workInProgress, context, newValue);\n          break;\n        }\n\n        case Profiler:\n          {\n            // Profiler should only call onRender when one of its descendants actually rendered.\n            var hasChildWork = includesSomeLane(\n              renderLanes,\n              workInProgress.childLanes\n            );\n\n            if (hasChildWork) {\n              workInProgress.flags |= Update;\n            }\n\n            {\n              // Reset effect durations for the next eventual effect phase.\n              // These are reset during render to allow the DevTools commit hook a chance to read them,\n              var stateNode = workInProgress.stateNode;\n              stateNode.effectDuration = 0;\n              stateNode.passiveEffectDuration = 0;\n            }\n          }\n\n          break;\n\n        case SuspenseComponent: {\n          var state = workInProgress.memoizedState;\n\n          if (state !== null) {\n            if (state.dehydrated !== null) {\n              // We're not going to render the children, so this is just to maintain\n              // push/pop symmetry\n              pushPrimaryTreeSuspenseHandler(workInProgress); // We know that this component will suspend again because if it has\n              // been unsuspended it has committed as a resolved Suspense component.\n              // If it needs to be retried, it should have work scheduled on it.\n\n              workInProgress.flags |= DidCapture; // We should never render the children of a dehydrated boundary until we\n              // upgrade it. We return null instead of bailoutOnAlreadyFinishedWork.\n\n              return null;\n            } // If this boundary is currently timed out, we need to decide\n            // whether to retry the primary children, or to skip over it and\n            // go straight to the fallback. Check the priority of the primary\n            // child fragment.\n\n            var primaryChildFragment = workInProgress.child;\n            var primaryChildLanes = primaryChildFragment.childLanes;\n\n            if (includesSomeLane(renderLanes, primaryChildLanes)) {\n              // The primary children have pending work. Use the normal path\n              // to attempt to render the primary children again.\n              return updateSuspenseComponent(\n                current,\n                workInProgress,\n                renderLanes\n              );\n            } else {\n              // The primary child fragment does not have pending work marked\n              // on it\n              pushPrimaryTreeSuspenseHandler(workInProgress); // The primary children do not have pending work with sufficient\n              // priority. Bailout.\n\n              var child = bailoutOnAlreadyFinishedWork(\n                current,\n                workInProgress,\n                renderLanes\n              );\n\n              if (child !== null) {\n                // The fallback children have pending work. Skip over the\n                // primary children and work on the fallback.\n                return child.sibling;\n              } else {\n                // Note: We can return `null` here because we already checked\n                // whether there were nested context consumers, via the call to\n                // `bailoutOnAlreadyFinishedWork` above.\n                return null;\n              }\n            }\n          } else {\n            pushPrimaryTreeSuspenseHandler(workInProgress);\n          }\n\n          break;\n        }\n\n        case SuspenseListComponent: {\n          var didSuspendBefore = (current.flags & DidCapture) !== NoFlags$1;\n\n          var _hasChildWork = includesSomeLane(\n            renderLanes,\n            workInProgress.childLanes\n          );\n\n          if (didSuspendBefore) {\n            if (_hasChildWork) {\n              // If something was in fallback state last time, and we have all the\n              // same children then we're still in progressive loading state.\n              // Something might get unblocked by state updates or retries in the\n              // tree which will affect the tail. So we need to use the normal\n              // path to compute the correct tail.\n              return updateSuspenseListComponent(\n                current,\n                workInProgress,\n                renderLanes\n              );\n            } // If none of the children had any work, that means that none of\n            // them got retried so they'll still be blocked in the same way\n            // as before. We can fast bail out.\n\n            workInProgress.flags |= DidCapture;\n          } // If nothing suspended before and we're rendering the same children,\n          // then the tail doesn't matter. Anything new that suspends will work\n          // in the \"together\" mode, so we can continue from the state we had.\n\n          var renderState = workInProgress.memoizedState;\n\n          if (renderState !== null) {\n            // Reset to the \"together\" mode in case we've started a different\n            // update in the past but didn't complete it.\n            renderState.rendering = null;\n            renderState.tail = null;\n            renderState.lastEffect = null;\n          }\n\n          pushSuspenseListContext(workInProgress, suspenseStackCursor.current);\n\n          if (_hasChildWork) {\n            break;\n          } else {\n            // If none of the children had any work, that means that none of\n            // them got retried so they'll still be blocked in the same way\n            // as before. We can fast bail out.\n            return null;\n          }\n        }\n\n        case OffscreenComponent:\n        case LegacyHiddenComponent: {\n          // Need to check if the tree still needs to be deferred. This is\n          // almost identical to the logic used in the normal update path,\n          // so we'll just enter that. The only difference is we'll bail out\n          // at the next level instead of this one, because the child props\n          // have not changed. Which is fine.\n          // TODO: Probably should refactor `beginWork` to split the bailout\n          // path from the normal path. I'm tempted to do a labeled break here\n          // but I won't :)\n          workInProgress.lanes = NoLanes;\n          return updateOffscreenComponent(current, workInProgress, renderLanes);\n        }\n      }\n\n      return bailoutOnAlreadyFinishedWork(current, workInProgress, renderLanes);\n    }\n\n    function beginWork$1(current, workInProgress, renderLanes) {\n      {\n        if (workInProgress._debugNeedsRemount && current !== null) {\n          // This will restart the begin phase with a new fiber.\n          return remountFiber(\n            current,\n            workInProgress,\n            createFiberFromTypeAndProps(\n              workInProgress.type,\n              workInProgress.key,\n              workInProgress.pendingProps,\n              workInProgress._debugOwner || null,\n              workInProgress.mode,\n              workInProgress.lanes\n            )\n          );\n        }\n      }\n\n      if (current !== null) {\n        var oldProps = current.memoizedProps;\n        var newProps = workInProgress.pendingProps;\n\n        if (\n          oldProps !== newProps ||\n          hasContextChanged() || // Force a re-render if the implementation changed due to hot reload:\n          workInProgress.type !== current.type\n        ) {\n          // If props or context changed, mark the fiber as having performed work.\n          // This may be unset if the props are determined to be equal later (memo).\n          didReceiveUpdate = true;\n        } else {\n          // Neither props nor legacy context changes. Check if there's a pending\n          // update or context change.\n          var hasScheduledUpdateOrContext = checkScheduledUpdateOrContext(\n            current,\n            renderLanes\n          );\n\n          if (\n            !hasScheduledUpdateOrContext && // If this is the second pass of an error or suspense boundary, there\n            // may not be work scheduled on `current`, so we check for this flag.\n            (workInProgress.flags & DidCapture) === NoFlags$1\n          ) {\n            // No pending updates or context. Bail out now.\n            didReceiveUpdate = false;\n            return attemptEarlyBailoutIfNoScheduledUpdate(\n              current,\n              workInProgress,\n              renderLanes\n            );\n          }\n\n          if ((current.flags & ForceUpdateForLegacySuspense) !== NoFlags$1) {\n            // This is a special case that only exists for legacy mode.\n            // See https://github.com/facebook/react/pull/19216.\n            didReceiveUpdate = true;\n          } else {\n            // An update was scheduled on this fiber, but there are no new props\n            // nor legacy context. Set this to false. If an update queue or context\n            // consumer produces a changed value, it will set this to true. Otherwise,\n            // the component will assume the children have not changed and bail out.\n            didReceiveUpdate = false;\n          }\n        }\n      } else {\n        didReceiveUpdate = false;\n      } // Before entering the begin phase, clear pending update priority.\n      // TODO: This assumes that we're about to evaluate the component and process\n      // the update queue. However, there's an exception: SimpleMemoComponent\n      // sometimes bails out later in the begin phase. This indicates that we should\n      // move this assignment out of the common path and into each branch.\n\n      workInProgress.lanes = NoLanes;\n\n      switch (workInProgress.tag) {\n        case IndeterminateComponent: {\n          return mountIndeterminateComponent(\n            current,\n            workInProgress,\n            workInProgress.type,\n            renderLanes\n          );\n        }\n\n        case LazyComponent: {\n          var elementType = workInProgress.elementType;\n          return mountLazyComponent(\n            current,\n            workInProgress,\n            elementType,\n            renderLanes\n          );\n        }\n\n        case FunctionComponent: {\n          var Component = workInProgress.type;\n          var unresolvedProps = workInProgress.pendingProps;\n          var resolvedProps =\n            workInProgress.elementType === Component\n              ? unresolvedProps\n              : resolveDefaultProps(Component, unresolvedProps);\n          return updateFunctionComponent(\n            current,\n            workInProgress,\n            Component,\n            resolvedProps,\n            renderLanes\n          );\n        }\n\n        case ClassComponent: {\n          var _Component = workInProgress.type;\n          var _unresolvedProps = workInProgress.pendingProps;\n\n          var _resolvedProps =\n            workInProgress.elementType === _Component\n              ? _unresolvedProps\n              : resolveDefaultProps(_Component, _unresolvedProps);\n\n          return updateClassComponent(\n            current,\n            workInProgress,\n            _Component,\n            _resolvedProps,\n            renderLanes\n          );\n        }\n\n        case HostRoot:\n          return updateHostRoot(current, workInProgress, renderLanes);\n\n        case HostHoistable:\n\n        // Fall through\n\n        case HostSingleton:\n\n        // Fall through\n\n        case HostComponent:\n          return updateHostComponent$1(current, workInProgress, renderLanes);\n\n        case HostText:\n          return updateHostText$1();\n\n        case SuspenseComponent:\n          return updateSuspenseComponent(current, workInProgress, renderLanes);\n\n        case HostPortal:\n          return updatePortalComponent(current, workInProgress, renderLanes);\n\n        case ForwardRef: {\n          var type = workInProgress.type;\n          var _unresolvedProps2 = workInProgress.pendingProps;\n\n          var _resolvedProps2 =\n            workInProgress.elementType === type\n              ? _unresolvedProps2\n              : resolveDefaultProps(type, _unresolvedProps2);\n\n          return updateForwardRef(\n            current,\n            workInProgress,\n            type,\n            _resolvedProps2,\n            renderLanes\n          );\n        }\n\n        case Fragment:\n          return updateFragment(current, workInProgress, renderLanes);\n\n        case Mode:\n          return updateMode(current, workInProgress, renderLanes);\n\n        case Profiler:\n          return updateProfiler(current, workInProgress, renderLanes);\n\n        case ContextProvider:\n          return updateContextProvider(current, workInProgress, renderLanes);\n\n        case ContextConsumer:\n          return updateContextConsumer(current, workInProgress, renderLanes);\n\n        case MemoComponent: {\n          var _type2 = workInProgress.type;\n          var _unresolvedProps3 = workInProgress.pendingProps; // Resolve outer props first, then resolve inner props.\n\n          var _resolvedProps3 = resolveDefaultProps(_type2, _unresolvedProps3);\n\n          {\n            if (workInProgress.type !== workInProgress.elementType) {\n              var outerPropTypes = _type2.propTypes;\n\n              if (outerPropTypes) {\n                checkPropTypes(\n                  outerPropTypes,\n                  _resolvedProps3, // Resolved for outer only\n                  \"prop\",\n                  getComponentNameFromType(_type2)\n                );\n              }\n            }\n          }\n\n          _resolvedProps3 = resolveDefaultProps(_type2.type, _resolvedProps3);\n          return updateMemoComponent(\n            current,\n            workInProgress,\n            _type2,\n            _resolvedProps3,\n            renderLanes\n          );\n        }\n\n        case SimpleMemoComponent: {\n          return updateSimpleMemoComponent(\n            current,\n            workInProgress,\n            workInProgress.type,\n            workInProgress.pendingProps,\n            renderLanes\n          );\n        }\n\n        case IncompleteClassComponent: {\n          var _Component2 = workInProgress.type;\n          var _unresolvedProps4 = workInProgress.pendingProps;\n\n          var _resolvedProps4 =\n            workInProgress.elementType === _Component2\n              ? _unresolvedProps4\n              : resolveDefaultProps(_Component2, _unresolvedProps4);\n\n          return mountIncompleteClassComponent(\n            current,\n            workInProgress,\n            _Component2,\n            _resolvedProps4,\n            renderLanes\n          );\n        }\n\n        case SuspenseListComponent: {\n          return updateSuspenseListComponent(\n            current,\n            workInProgress,\n            renderLanes\n          );\n        }\n\n        case ScopeComponent: {\n          break;\n        }\n\n        case OffscreenComponent: {\n          return updateOffscreenComponent(current, workInProgress, renderLanes);\n        }\n      }\n\n      throw new Error(\n        \"Unknown unit of work tag (\" +\n          workInProgress.tag +\n          \"). This error is likely caused by a bug in \" +\n          \"React. Please file an issue.\"\n      );\n    }\n\n    var valueCursor = createCursor(null);\n    var rendererCursorDEV;\n\n    {\n      rendererCursorDEV = createCursor(null);\n    }\n\n    var rendererSigil;\n\n    {\n      // Use this to detect multiple renderers using the same context\n      rendererSigil = {};\n    }\n\n    var currentlyRenderingFiber = null;\n    var lastContextDependency = null;\n    var lastFullyObservedContext = null;\n    var isDisallowedContextReadInDEV = false;\n    function resetContextDependencies() {\n      // This is called right before React yields execution, to ensure `readContext`\n      // cannot be called outside the render phase.\n      currentlyRenderingFiber = null;\n      lastContextDependency = null;\n      lastFullyObservedContext = null;\n\n      {\n        isDisallowedContextReadInDEV = false;\n      }\n    }\n    function enterDisallowedContextReadInDEV() {\n      {\n        isDisallowedContextReadInDEV = true;\n      }\n    }\n    function exitDisallowedContextReadInDEV() {\n      {\n        isDisallowedContextReadInDEV = false;\n      }\n    }\n    function pushProvider(providerFiber, context, nextValue) {\n      {\n        push(valueCursor, context._currentValue, providerFiber);\n        context._currentValue = nextValue;\n\n        {\n          push(rendererCursorDEV, context._currentRenderer, providerFiber);\n\n          if (\n            context._currentRenderer !== undefined &&\n            context._currentRenderer !== null &&\n            context._currentRenderer !== rendererSigil\n          ) {\n            error(\n              \"Detected multiple renderers concurrently rendering the \" +\n                \"same context provider. This is currently unsupported.\"\n            );\n          }\n\n          context._currentRenderer = rendererSigil;\n        }\n      }\n    }\n    function popProvider(context, providerFiber) {\n      var currentValue = valueCursor.current;\n\n      {\n        context._currentValue = currentValue;\n\n        {\n          var currentRenderer = rendererCursorDEV.current;\n          pop(rendererCursorDEV, providerFiber);\n          context._currentRenderer = currentRenderer;\n        }\n      }\n\n      pop(valueCursor, providerFiber);\n    }\n    function scheduleContextWorkOnParentPath(\n      parent,\n      renderLanes,\n      propagationRoot\n    ) {\n      // Update the child lanes of all the ancestors, including the alternates.\n      var node = parent;\n\n      while (node !== null) {\n        var alternate = node.alternate;\n\n        if (!isSubsetOfLanes(node.childLanes, renderLanes)) {\n          node.childLanes = mergeLanes(node.childLanes, renderLanes);\n\n          if (alternate !== null) {\n            alternate.childLanes = mergeLanes(\n              alternate.childLanes,\n              renderLanes\n            );\n          }\n        } else if (\n          alternate !== null &&\n          !isSubsetOfLanes(alternate.childLanes, renderLanes)\n        ) {\n          alternate.childLanes = mergeLanes(alternate.childLanes, renderLanes);\n        } else;\n\n        if (node === propagationRoot) {\n          break;\n        }\n\n        node = node.return;\n      }\n\n      {\n        if (node !== propagationRoot) {\n          error(\n            \"Expected to find the propagation root when scheduling context work. \" +\n              \"This error is likely caused by a bug in React. Please file an issue.\"\n          );\n        }\n      }\n    }\n    function propagateContextChange(workInProgress, context, renderLanes) {\n      {\n        propagateContextChange_eager(workInProgress, context, renderLanes);\n      }\n    }\n\n    function propagateContextChange_eager(\n      workInProgress,\n      context,\n      renderLanes\n    ) {\n      var fiber = workInProgress.child;\n\n      if (fiber !== null) {\n        // Set the return pointer of the child to the work-in-progress fiber.\n        fiber.return = workInProgress;\n      }\n\n      while (fiber !== null) {\n        var nextFiber = void 0; // Visit this fiber.\n\n        var list = fiber.dependencies;\n\n        if (list !== null) {\n          nextFiber = fiber.child;\n          var dependency = list.firstContext;\n\n          while (dependency !== null) {\n            // Check if the context matches.\n            if (dependency.context === context) {\n              // Match! Schedule an update on this fiber.\n              if (fiber.tag === ClassComponent) {\n                // Schedule a force update on the work-in-progress.\n                var lane = pickArbitraryLane(renderLanes);\n                var update = createUpdate(lane);\n                update.tag = ForceUpdate; // TODO: Because we don't have a work-in-progress, this will add the\n                // update to the current fiber, too, which means it will persist even if\n                // this render is thrown away. Since it's a race condition, not sure it's\n                // worth fixing.\n                // Inlined `enqueueUpdate` to remove interleaved update check\n\n                var updateQueue = fiber.updateQueue;\n\n                if (updateQueue === null);\n                else {\n                  var sharedQueue = updateQueue.shared;\n                  var pending = sharedQueue.pending;\n\n                  if (pending === null) {\n                    // This is the first update. Create a circular list.\n                    update.next = update;\n                  } else {\n                    update.next = pending.next;\n                    pending.next = update;\n                  }\n\n                  sharedQueue.pending = update;\n                }\n              }\n\n              fiber.lanes = mergeLanes(fiber.lanes, renderLanes);\n              var alternate = fiber.alternate;\n\n              if (alternate !== null) {\n                alternate.lanes = mergeLanes(alternate.lanes, renderLanes);\n              }\n\n              scheduleContextWorkOnParentPath(\n                fiber.return,\n                renderLanes,\n                workInProgress\n              ); // Mark the updated lanes on the list, too.\n\n              list.lanes = mergeLanes(list.lanes, renderLanes); // Since we already found a match, we can stop traversing the\n              // dependency list.\n\n              break;\n            }\n\n            dependency = dependency.next;\n          }\n        } else if (fiber.tag === ContextProvider) {\n          // Don't scan deeper if this is a matching provider\n          nextFiber = fiber.type === workInProgress.type ? null : fiber.child;\n        } else if (fiber.tag === DehydratedFragment) {\n          // If a dehydrated suspense boundary is in this subtree, we don't know\n          // if it will have any context consumers in it. The best we can do is\n          // mark it as having updates.\n          var parentSuspense = fiber.return;\n\n          if (parentSuspense === null) {\n            throw new Error(\n              \"We just came from a parent so we must have had a parent. This is a bug in React.\"\n            );\n          }\n\n          parentSuspense.lanes = mergeLanes(parentSuspense.lanes, renderLanes);\n          var _alternate = parentSuspense.alternate;\n\n          if (_alternate !== null) {\n            _alternate.lanes = mergeLanes(_alternate.lanes, renderLanes);\n          } // This is intentionally passing this fiber as the parent\n          // because we want to schedule this fiber as having work\n          // on its children. We'll use the childLanes on\n          // this fiber to indicate that a context has changed.\n\n          scheduleContextWorkOnParentPath(\n            parentSuspense,\n            renderLanes,\n            workInProgress\n          );\n          nextFiber = fiber.sibling;\n        } else {\n          // Traverse down.\n          nextFiber = fiber.child;\n        }\n\n        if (nextFiber !== null) {\n          // Set the return pointer of the child to the work-in-progress fiber.\n          nextFiber.return = fiber;\n        } else {\n          // No child. Traverse to next sibling.\n          nextFiber = fiber;\n\n          while (nextFiber !== null) {\n            if (nextFiber === workInProgress) {\n              // We're back to the root of this subtree. Exit.\n              nextFiber = null;\n              break;\n            }\n\n            var sibling = nextFiber.sibling;\n\n            if (sibling !== null) {\n              // Set the return pointer of the sibling to the work-in-progress fiber.\n              sibling.return = nextFiber.return;\n              nextFiber = sibling;\n              break;\n            } // No more siblings. Traverse up.\n\n            nextFiber = nextFiber.return;\n          }\n        }\n\n        fiber = nextFiber;\n      }\n    }\n    function prepareToReadContext(workInProgress, renderLanes) {\n      currentlyRenderingFiber = workInProgress;\n      lastContextDependency = null;\n      lastFullyObservedContext = null;\n      var dependencies = workInProgress.dependencies;\n\n      if (dependencies !== null) {\n        {\n          var firstContext = dependencies.firstContext;\n\n          if (firstContext !== null) {\n            if (includesSomeLane(dependencies.lanes, renderLanes)) {\n              // Context list has a pending update. Mark that this fiber performed work.\n              markWorkInProgressReceivedUpdate();\n            } // Reset the work-in-progress list\n\n            dependencies.firstContext = null;\n          }\n        }\n      }\n    }\n    function readContext(context) {\n      {\n        // This warning would fire if you read context inside a Hook like useMemo.\n        // Unlike the class check below, it's not enforced in production for perf.\n        if (isDisallowedContextReadInDEV) {\n          error(\n            \"Context can only be read while React is rendering. \" +\n              \"In classes, you can read it in the render method or getDerivedStateFromProps. \" +\n              \"In function components, you can read it directly in the function body, but not \" +\n              \"inside Hooks like useReducer() or useMemo().\"\n          );\n        }\n      }\n\n      return readContextForConsumer(currentlyRenderingFiber, context);\n    }\n    function readContextDuringReconcilation(consumer, context, renderLanes) {\n      if (currentlyRenderingFiber === null) {\n        prepareToReadContext(consumer, renderLanes);\n      }\n\n      return readContextForConsumer(consumer, context);\n    }\n\n    function readContextForConsumer(consumer, context) {\n      var value = context._currentValue;\n\n      if (lastFullyObservedContext === context);\n      else {\n        var contextItem = {\n          context: context,\n          memoizedValue: value,\n          next: null\n        };\n\n        if (lastContextDependency === null) {\n          if (consumer === null) {\n            throw new Error(\n              \"Context can only be read while React is rendering. \" +\n                \"In classes, you can read it in the render method or getDerivedStateFromProps. \" +\n                \"In function components, you can read it directly in the function body, but not \" +\n                \"inside Hooks like useReducer() or useMemo().\"\n            );\n          } // This is the first dependency for this component. Create a new list.\n\n          lastContextDependency = contextItem;\n          consumer.dependencies = {\n            lanes: NoLanes,\n            firstContext: contextItem\n          };\n        } else {\n          // Append a new context item.\n          lastContextDependency = lastContextDependency.next = contextItem;\n        }\n      }\n\n      return value;\n    }\n\n    var ReactCurrentBatchConfig$1 =\n      ReactSharedInternals.ReactCurrentBatchConfig;\n    function requestCurrentTransition() {\n      var transition = ReactCurrentBatchConfig$1.transition;\n\n      if (transition !== null) {\n        // Whenever a transition update is scheduled, register a callback on the\n        // transition object so we can get the return value of the scope function.\n        transition._callbacks.add(handleAsyncAction);\n      }\n\n      return transition;\n    }\n\n    function handleAsyncAction(transition, thenable) {}\n\n    function notifyTransitionCallbacks(transition, returnValue) {\n      var callbacks = transition._callbacks;\n      callbacks.forEach(function (callback) {\n        return callback(transition, returnValue);\n      });\n    } // When retrying a Suspense/Offscreen boundary, we restore the cache that was\n    function getSuspendedCache() {\n      {\n        return null;\n      } // This function is called when a Suspense boundary suspends. It returns the\n    }\n\n    /**\n     * Tag the fiber with an update effect. This turns a Placement into\n     * a PlacementAndUpdate.\n     */\n\n    function markUpdate(workInProgress) {\n      workInProgress.flags |= Update;\n    }\n\n    function markRef(workInProgress) {\n      workInProgress.flags |= Ref | RefStatic;\n    }\n\n    function appendAllChildren(\n      parent,\n      workInProgress,\n      needsVisibilityToggle,\n      isHidden\n    ) {\n      {\n        // We only have the top Fiber that was created but we need recurse down its\n        // children to find all the terminal nodes.\n        var node = workInProgress.child;\n\n        while (node !== null) {\n          if (node.tag === HostComponent || node.tag === HostText) {\n            appendInitialChild(parent, node.stateNode);\n          } else if (node.tag === HostPortal || false);\n          else if (node.child !== null) {\n            node.child.return = node;\n            node = node.child;\n            continue;\n          }\n\n          if (node === workInProgress) {\n            return;\n          } // $FlowFixMe[incompatible-use] found when upgrading Flow\n\n          while (node.sibling === null) {\n            // $FlowFixMe[incompatible-use] found when upgrading Flow\n            if (node.return === null || node.return === workInProgress) {\n              return;\n            }\n\n            node = node.return;\n          } // $FlowFixMe[incompatible-use] found when upgrading Flow\n\n          node.sibling.return = node.return;\n          node = node.sibling;\n        }\n      }\n    } // An unfortunate fork of appendAllChildren because we have two different parent types.\n\n    function updateHostComponent(\n      current,\n      workInProgress,\n      type,\n      newProps,\n      renderLanes\n    ) {\n      {\n        // If we have an alternate, that means this is an update and we need to\n        // schedule a side-effect to do the updates.\n        var oldProps = current.memoizedProps;\n\n        if (oldProps === newProps) {\n          // In mutation mode, this is sufficient for a bailout because\n          // we won't touch this node even if children changed.\n          return;\n        }\n\n        markUpdate(workInProgress);\n      }\n    } // This function must be called at the very end of the complete phase, because\n    // it might throw to suspend, and if the resource immediately loads, the work\n    // loop will resume rendering as if the work-in-progress completed. So it must\n    // fully complete.\n    // TODO: This should ideally move to begin phase, but currently the instance is\n    // not created until the complete phase. For our existing use cases, host nodes\n    // that suspend don't have children, so it doesn't matter. But that might not\n    // always be true in the future.\n\n    function preloadInstanceAndSuspendIfNeeded(\n      workInProgress,\n      type,\n      props,\n      renderLanes\n    ) {\n      {\n        // If this flag was set previously, we can remove it. The flag\n        // represents whether this particular set of props might ever need to\n        // suspend. The safest thing to do is for maySuspendCommit to always\n        // return true, but if the renderer is reasonably confident that the\n        // underlying resource won't be evicted, it can return false as a\n        // performance optimization.\n        workInProgress.flags &= ~MaySuspendCommit;\n        return;\n      } // Mark this fiber with a flag. This gets set on all host instances\n    }\n\n    function scheduleRetryEffect(workInProgress, retryQueue) {\n      var wakeables = retryQueue;\n\n      if (wakeables !== null) {\n        // Schedule an effect to attach a retry listener to the promise.\n        // TODO: Move to passive phase\n        workInProgress.flags |= Update;\n      } else {\n        // This boundary suspended, but no wakeables were added to the retry\n        // queue. Check if the renderer suspended commit. If so, this means\n        // that once the fallback is committed, we can immediately retry\n        // rendering again, because rendering wasn't actually blocked. Only\n        // the commit phase.\n        // TODO: Consider a model where we always schedule an immediate retry, even\n        // for normal Suspense. That way the retry can partially render up to the\n        // first thing that suspends.\n        if (workInProgress.flags & ScheduleRetry) {\n          var retryLane = // TODO: This check should probably be moved into claimNextRetryLane\n            // I also suspect that we need some further consolidation of offscreen\n            // and retry lanes.\n            workInProgress.tag !== OffscreenComponent\n              ? claimNextRetryLane()\n              : OffscreenLane;\n          workInProgress.lanes = mergeLanes(workInProgress.lanes, retryLane);\n        }\n      }\n    }\n\n    function updateHostText(current, workInProgress, oldText, newText) {\n      {\n        // If the text differs, mark it as an update. All the work in done in commitWork.\n        if (oldText !== newText) {\n          markUpdate(workInProgress);\n        }\n      }\n    }\n\n    function cutOffTailIfNeeded(renderState, hasRenderedATailFallback) {\n      switch (renderState.tailMode) {\n        case \"hidden\": {\n          // Any insertions at the end of the tail list after this point\n          // should be invisible. If there are already mounted boundaries\n          // anything before them are not considered for collapsing.\n          // Therefore we need to go through the whole tail to find if\n          // there are any.\n          var tailNode = renderState.tail;\n          var lastTailNode = null;\n\n          while (tailNode !== null) {\n            if (tailNode.alternate !== null) {\n              lastTailNode = tailNode;\n            }\n\n            tailNode = tailNode.sibling;\n          } // Next we're simply going to delete all insertions after the\n          // last rendered item.\n\n          if (lastTailNode === null) {\n            // All remaining items in the tail are insertions.\n            renderState.tail = null;\n          } else {\n            // Detach the insertion after the last node that was already\n            // inserted.\n            lastTailNode.sibling = null;\n          }\n\n          break;\n        }\n\n        case \"collapsed\": {\n          // Any insertions at the end of the tail list after this point\n          // should be invisible. If there are already mounted boundaries\n          // anything before them are not considered for collapsing.\n          // Therefore we need to go through the whole tail to find if\n          // there are any.\n          var _tailNode = renderState.tail;\n          var _lastTailNode = null;\n\n          while (_tailNode !== null) {\n            if (_tailNode.alternate !== null) {\n              _lastTailNode = _tailNode;\n            }\n\n            _tailNode = _tailNode.sibling;\n          } // Next we're simply going to delete all insertions after the\n          // last rendered item.\n\n          if (_lastTailNode === null) {\n            // All remaining items in the tail are insertions.\n            if (!hasRenderedATailFallback && renderState.tail !== null) {\n              // We suspended during the head. We want to show at least one\n              // row at the tail. So we'll keep on and cut off the rest.\n              renderState.tail.sibling = null;\n            } else {\n              renderState.tail = null;\n            }\n          } else {\n            // Detach the insertion after the last node that was already\n            // inserted.\n            _lastTailNode.sibling = null;\n          }\n\n          break;\n        }\n      }\n    }\n\n    function bubbleProperties(completedWork) {\n      var didBailout =\n        completedWork.alternate !== null &&\n        completedWork.alternate.child === completedWork.child;\n      var newChildLanes = NoLanes;\n      var subtreeFlags = NoFlags$1;\n\n      if (!didBailout) {\n        // Bubble up the earliest expiration time.\n        if ((completedWork.mode & ProfileMode) !== NoMode) {\n          // In profiling mode, resetChildExpirationTime is also used to reset\n          // profiler durations.\n          var actualDuration = completedWork.actualDuration;\n          var treeBaseDuration = completedWork.selfBaseDuration;\n          var child = completedWork.child;\n\n          while (child !== null) {\n            newChildLanes = mergeLanes(\n              newChildLanes,\n              mergeLanes(child.lanes, child.childLanes)\n            );\n            subtreeFlags |= child.subtreeFlags;\n            subtreeFlags |= child.flags; // When a fiber is cloned, its actualDuration is reset to 0. This value will\n            // only be updated if work is done on the fiber (i.e. it doesn't bailout).\n            // When work is done, it should bubble to the parent's actualDuration. If\n            // the fiber has not been cloned though, (meaning no work was done), then\n            // this value will reflect the amount of time spent working on a previous\n            // render. In that case it should not bubble. We determine whether it was\n            // cloned by comparing the child pointer.\n            // $FlowFixMe[unsafe-addition] addition with possible null/undefined value\n\n            actualDuration += child.actualDuration; // $FlowFixMe[unsafe-addition] addition with possible null/undefined value\n\n            treeBaseDuration += child.treeBaseDuration;\n            child = child.sibling;\n          }\n\n          completedWork.actualDuration = actualDuration;\n          completedWork.treeBaseDuration = treeBaseDuration;\n        } else {\n          var _child = completedWork.child;\n\n          while (_child !== null) {\n            newChildLanes = mergeLanes(\n              newChildLanes,\n              mergeLanes(_child.lanes, _child.childLanes)\n            );\n            subtreeFlags |= _child.subtreeFlags;\n            subtreeFlags |= _child.flags; // Update the return pointer so the tree is consistent. This is a code\n            // smell because it assumes the commit phase is never concurrent with\n            // the render phase. Will address during refactor to alternate model.\n\n            _child.return = completedWork;\n            _child = _child.sibling;\n          }\n        }\n\n        completedWork.subtreeFlags |= subtreeFlags;\n      } else {\n        // Bubble up the earliest expiration time.\n        if ((completedWork.mode & ProfileMode) !== NoMode) {\n          // In profiling mode, resetChildExpirationTime is also used to reset\n          // profiler durations.\n          var _treeBaseDuration = completedWork.selfBaseDuration;\n          var _child2 = completedWork.child;\n\n          while (_child2 !== null) {\n            newChildLanes = mergeLanes(\n              newChildLanes,\n              mergeLanes(_child2.lanes, _child2.childLanes)\n            ); // \"Static\" flags share the lifetime of the fiber/hook they belong to,\n            // so we should bubble those up even during a bailout. All the other\n            // flags have a lifetime only of a single render + commit, so we should\n            // ignore them.\n\n            subtreeFlags |= _child2.subtreeFlags & StaticMask;\n            subtreeFlags |= _child2.flags & StaticMask; // $FlowFixMe[unsafe-addition] addition with possible null/undefined value\n\n            _treeBaseDuration += _child2.treeBaseDuration;\n            _child2 = _child2.sibling;\n          }\n\n          completedWork.treeBaseDuration = _treeBaseDuration;\n        } else {\n          var _child3 = completedWork.child;\n\n          while (_child3 !== null) {\n            newChildLanes = mergeLanes(\n              newChildLanes,\n              mergeLanes(_child3.lanes, _child3.childLanes)\n            ); // \"Static\" flags share the lifetime of the fiber/hook they belong to,\n            // so we should bubble those up even during a bailout. All the other\n            // flags have a lifetime only of a single render + commit, so we should\n            // ignore them.\n\n            subtreeFlags |= _child3.subtreeFlags & StaticMask;\n            subtreeFlags |= _child3.flags & StaticMask; // Update the return pointer so the tree is consistent. This is a code\n            // smell because it assumes the commit phase is never concurrent with\n            // the render phase. Will address during refactor to alternate model.\n\n            _child3.return = completedWork;\n            _child3 = _child3.sibling;\n          }\n        }\n\n        completedWork.subtreeFlags |= subtreeFlags;\n      }\n\n      completedWork.childLanes = newChildLanes;\n      return didBailout;\n    }\n\n    function completeDehydratedSuspenseBoundary(\n      current,\n      workInProgress,\n      nextState\n    ) {\n      var wasHydrated = popHydrationState();\n\n      if (nextState !== null && nextState.dehydrated !== null) {\n        // We might be inside a hydration state the first time we're picking up this\n        // Suspense boundary, and also after we've reentered it for further hydration.\n        if (current === null) {\n          if (!wasHydrated) {\n            throw new Error(\n              \"A dehydrated suspense component was completed without a hydrated node. \" +\n                \"This is probably a bug in React.\"\n            );\n          }\n\n          prepareToHydrateHostSuspenseInstance();\n          bubbleProperties(workInProgress);\n\n          {\n            if ((workInProgress.mode & ProfileMode) !== NoMode) {\n              var isTimedOutSuspense = nextState !== null;\n\n              if (isTimedOutSuspense) {\n                // Don't count time spent in a timed out Suspense subtree as part of the base duration.\n                var primaryChildFragment = workInProgress.child;\n\n                if (primaryChildFragment !== null) {\n                  // $FlowFixMe[unsafe-arithmetic] Flow doesn't support type casting in combination with the -= operator\n                  workInProgress.treeBaseDuration -=\n                    primaryChildFragment.treeBaseDuration;\n                }\n              }\n            }\n          }\n\n          return false;\n        } else {\n          if ((workInProgress.flags & DidCapture) === NoFlags$1) {\n            // This boundary did not suspend so it's now hydrated and unsuspended.\n            workInProgress.memoizedState = null;\n          } // If nothing suspended, we need to schedule an effect to mark this boundary\n          // as having hydrated so events know that they're free to be invoked.\n          // It's also a signal to replay events and the suspense callback.\n          // If something suspended, schedule an effect to attach retry listeners.\n          // So we might as well always mark this.\n\n          workInProgress.flags |= Update;\n          bubbleProperties(workInProgress);\n\n          {\n            if ((workInProgress.mode & ProfileMode) !== NoMode) {\n              var _isTimedOutSuspense = nextState !== null;\n\n              if (_isTimedOutSuspense) {\n                // Don't count time spent in a timed out Suspense subtree as part of the base duration.\n                var _primaryChildFragment = workInProgress.child;\n\n                if (_primaryChildFragment !== null) {\n                  // $FlowFixMe[unsafe-arithmetic] Flow doesn't support type casting in combination with the -= operator\n                  workInProgress.treeBaseDuration -=\n                    _primaryChildFragment.treeBaseDuration;\n                }\n              }\n            }\n          }\n\n          return false;\n        }\n      } else {\n        // Successfully completed this tree. If this was a forced client render,\n        // there may have been recoverable errors during first hydration\n        // attempt. If so, add them to a queue so we can log them in the\n        // commit phase.\n        upgradeHydrationErrorsToRecoverable(); // Fall through to normal Suspense path\n\n        return true;\n      }\n    }\n\n    function completeWork(current, workInProgress, renderLanes) {\n      var newProps = workInProgress.pendingProps; // Note: This intentionally doesn't check if we're hydrating because comparing\n\n      switch (workInProgress.tag) {\n        case IndeterminateComponent:\n        case LazyComponent:\n        case SimpleMemoComponent:\n        case FunctionComponent:\n        case ForwardRef:\n        case Fragment:\n        case Mode:\n        case Profiler:\n        case ContextConsumer:\n        case MemoComponent:\n          bubbleProperties(workInProgress);\n          return null;\n\n        case ClassComponent: {\n          var Component = workInProgress.type;\n\n          if (isContextProvider(Component)) {\n            popContext(workInProgress);\n          }\n\n          bubbleProperties(workInProgress);\n          return null;\n        }\n\n        case HostRoot: {\n          var fiberRoot = workInProgress.stateNode;\n          popHostContainer(workInProgress);\n          popTopLevelContextObject(workInProgress);\n\n          if (fiberRoot.pendingContext) {\n            fiberRoot.context = fiberRoot.pendingContext;\n            fiberRoot.pendingContext = null;\n          }\n\n          if (current === null || current.child === null) {\n            // If we hydrated, pop so that we can delete any remaining children\n            // that weren't hydrated.\n            var wasHydrated = popHydrationState();\n\n            if (wasHydrated) {\n              // If we hydrated, then we'll need to schedule an update for\n              // the commit side-effects on the root.\n              markUpdate(workInProgress);\n            } else {\n              if (current !== null) {\n                var prevState = current.memoizedState;\n\n                if (\n                  // Check if this is a client root\n                  !prevState.isDehydrated || // Check if we reverted to client rendering (e.g. due to an error)\n                  (workInProgress.flags & ForceClientRender) !== NoFlags$1\n                ) {\n                  // Schedule an effect to clear this container at the start of the\n                  // next commit. This handles the case of React rendering into a\n                  // container with previous children. It's also safe to do for\n                  // updates too, because current.child would only be null if the\n                  // previous render was null (so the container would already\n                  // be empty).\n                  workInProgress.flags |= Snapshot; // If this was a forced client render, there may have been\n                  // recoverable errors during first hydration attempt. If so, add\n                  // them to a queue so we can log them in the commit phase.\n\n                  upgradeHydrationErrorsToRecoverable();\n                }\n              }\n            }\n          }\n          bubbleProperties(workInProgress);\n\n          return null;\n        }\n\n        case HostHoistable:\n\n        case HostSingleton:\n\n        case HostComponent: {\n          popHostContext(workInProgress);\n          var _type2 = workInProgress.type;\n\n          if (current !== null && workInProgress.stateNode != null) {\n            updateHostComponent(current, workInProgress, _type2, newProps);\n\n            if (current.ref !== workInProgress.ref) {\n              markRef(workInProgress);\n            }\n          } else {\n            if (!newProps) {\n              if (workInProgress.stateNode === null) {\n                throw new Error(\n                  \"We must have new props for new mounts. This error is likely \" +\n                    \"caused by a bug in React. Please file an issue.\"\n                );\n              } // This can happen when we abort work.\n\n              bubbleProperties(workInProgress);\n              return null;\n            }\n\n            var _currentHostContext = getHostContext(); // TODO: Move createInstance to beginWork and keep it on a context\n            // \"stack\" as the parent. Then append children as we go in beginWork\n            // or completeWork depending on whether we want to add them top->down or\n            // bottom->up. Top->down is faster in IE11.\n\n            var _wasHydrated2 = popHydrationState();\n\n            if (_wasHydrated2) {\n              // TODO: Move this and createInstance step into the beginPhase\n              // to consolidate.\n              prepareToHydrateHostInstance();\n            } else {\n              var _rootContainerInstance = getRootHostContainer();\n\n              var _instance3 = createInstance(\n                _type2,\n                newProps,\n                _rootContainerInstance,\n                _currentHostContext,\n                workInProgress\n              ); // TODO: For persistent renderers, we should pass children as part\n              // of the initial instance creation\n\n              appendAllChildren(_instance3, workInProgress);\n              workInProgress.stateNode = _instance3; // Certain renderers require commit-time effects for initial mount.\n              // (eg DOM renderer supports auto-focus for certain elements).\n              // Make sure such renderers get scheduled for later work.\n\n              if (finalizeInitialChildren(_instance3)) {\n                markUpdate(workInProgress);\n              }\n            }\n\n            if (workInProgress.ref !== null) {\n              // If there is a ref on a host node we need to schedule a callback\n              markRef(workInProgress);\n            }\n          }\n\n          bubbleProperties(workInProgress); // This must come at the very end of the complete phase, because it might\n          // throw to suspend, and if the resource immediately loads, the work loop\n          // will resume rendering as if the work-in-progress completed. So it must\n          // fully complete.\n\n          preloadInstanceAndSuspendIfNeeded(workInProgress);\n          return null;\n        }\n\n        case HostText: {\n          var newText = newProps;\n\n          if (current && workInProgress.stateNode != null) {\n            var oldText = current.memoizedProps; // If we have an alternate, that means this is an update and we need\n            // to schedule a side-effect to do the updates.\n\n            updateHostText(current, workInProgress, oldText, newText);\n          } else {\n            if (typeof newText !== \"string\") {\n              if (workInProgress.stateNode === null) {\n                throw new Error(\n                  \"We must have new props for new mounts. This error is likely \" +\n                    \"caused by a bug in React. Please file an issue.\"\n                );\n              } // This can happen when we abort work.\n            }\n\n            var _rootContainerInstance2 = getRootHostContainer();\n\n            var _currentHostContext2 = getHostContext();\n\n            var _wasHydrated3 = popHydrationState();\n\n            if (_wasHydrated3) {\n              if (prepareToHydrateHostTextInstance()) {\n                markUpdate(workInProgress);\n              }\n            } else {\n              workInProgress.stateNode = createTextInstance(\n                newText,\n                _rootContainerInstance2,\n                _currentHostContext2,\n                workInProgress\n              );\n            }\n          }\n\n          bubbleProperties(workInProgress);\n          return null;\n        }\n\n        case SuspenseComponent: {\n          popSuspenseHandler(workInProgress);\n          var nextState = workInProgress.memoizedState; // Special path for dehydrated boundaries. We may eventually move this\n          // to its own fiber type so that we can add other kinds of hydration\n          // boundaries that aren't associated with a Suspense tree. In anticipation\n          // of such a refactor, all the hydration logic is contained in\n          // this branch.\n\n          if (\n            current === null ||\n            (current.memoizedState !== null &&\n              current.memoizedState.dehydrated !== null)\n          ) {\n            var fallthroughToNormalSuspensePath =\n              completeDehydratedSuspenseBoundary(\n                current,\n                workInProgress,\n                nextState\n              );\n\n            if (!fallthroughToNormalSuspensePath) {\n              if (workInProgress.flags & ForceClientRender) {\n                // Special case. There were remaining unhydrated nodes. We treat\n                // this as a mismatch. Revert to client rendering.\n                return workInProgress;\n              } else {\n                // Did not finish hydrating, either because this is the initial\n                // render or because something suspended.\n                return null;\n              }\n            } // Continue with the normal Suspense path.\n          }\n\n          if ((workInProgress.flags & DidCapture) !== NoFlags$1) {\n            // Something suspended. Re-render with the fallback children.\n            workInProgress.lanes = renderLanes; // Do not reset the effect list.\n\n            if ((workInProgress.mode & ProfileMode) !== NoMode) {\n              transferActualDuration(workInProgress);\n            } // Don't bubble properties in this case.\n\n            return workInProgress;\n          }\n\n          var nextDidTimeout = nextState !== null;\n          var prevDidTimeout =\n            current !== null && current.memoizedState !== null;\n          // a passive effect, which is when we process the transitions\n\n          if (nextDidTimeout !== prevDidTimeout) {\n            // an effect to toggle the subtree's visibility. When we switch from\n            // fallback -> primary, the inner Offscreen fiber schedules this effect\n            // as part of its normal complete phase. But when we switch from\n            // primary -> fallback, the inner Offscreen fiber does not have a complete\n            // phase. So we need to schedule its effect here.\n            //\n            // We also use this flag to connect/disconnect the effects, but the same\n            // logic applies: when re-connecting, the Offscreen fiber's complete\n            // phase will handle scheduling the effect. It's only when the fallback\n            // is active that we have to do anything special.\n\n            if (nextDidTimeout) {\n              var _offscreenFiber2 = workInProgress.child;\n              _offscreenFiber2.flags |= Visibility;\n            }\n          }\n\n          var retryQueue = workInProgress.updateQueue;\n          scheduleRetryEffect(workInProgress, retryQueue);\n\n          bubbleProperties(workInProgress);\n\n          {\n            if ((workInProgress.mode & ProfileMode) !== NoMode) {\n              if (nextDidTimeout) {\n                // Don't count time spent in a timed out Suspense subtree as part of the base duration.\n                var primaryChildFragment = workInProgress.child;\n\n                if (primaryChildFragment !== null) {\n                  // $FlowFixMe[unsafe-arithmetic] Flow doesn't support type casting in combination with the -= operator\n                  workInProgress.treeBaseDuration -=\n                    primaryChildFragment.treeBaseDuration;\n                }\n              }\n            }\n          }\n\n          return null;\n        }\n\n        case HostPortal:\n          popHostContainer(workInProgress);\n\n          bubbleProperties(workInProgress);\n          return null;\n\n        case ContextProvider:\n          // Pop provider fiber\n          var context = workInProgress.type._context;\n          popProvider(context, workInProgress);\n          bubbleProperties(workInProgress);\n          return null;\n\n        case IncompleteClassComponent: {\n          // Same as class component case. I put it down here so that the tags are\n          // sequential to ensure this switch is compiled to a jump table.\n          var _Component = workInProgress.type;\n\n          if (isContextProvider(_Component)) {\n            popContext(workInProgress);\n          }\n\n          bubbleProperties(workInProgress);\n          return null;\n        }\n\n        case SuspenseListComponent: {\n          popSuspenseListContext(workInProgress);\n          var renderState = workInProgress.memoizedState;\n\n          if (renderState === null) {\n            // We're running in the default, \"independent\" mode.\n            // We don't do anything in this mode.\n            bubbleProperties(workInProgress);\n            return null;\n          }\n\n          var didSuspendAlready =\n            (workInProgress.flags & DidCapture) !== NoFlags$1;\n          var renderedTail = renderState.rendering;\n\n          if (renderedTail === null) {\n            // We just rendered the head.\n            if (!didSuspendAlready) {\n              // This is the first pass. We need to figure out if anything is still\n              // suspended in the rendered set.\n              // If new content unsuspended, but there's still some content that\n              // didn't. Then we need to do a second pass that forces everything\n              // to keep showing their fallbacks.\n              // We might be suspended if something in this render pass suspended, or\n              // something in the previous committed pass suspended. Otherwise,\n              // there's no chance so we can skip the expensive call to\n              // findFirstSuspended.\n              var cannotBeSuspended =\n                renderHasNotSuspendedYet() &&\n                (current === null ||\n                  (current.flags & DidCapture) === NoFlags$1);\n\n              if (!cannotBeSuspended) {\n                var row = workInProgress.child;\n\n                while (row !== null) {\n                  var suspended = findFirstSuspended(row);\n\n                  if (suspended !== null) {\n                    didSuspendAlready = true;\n                    workInProgress.flags |= DidCapture;\n                    cutOffTailIfNeeded(renderState, false); // If this is a newly suspended tree, it might not get committed as\n                    // part of the second pass. In that case nothing will subscribe to\n                    // its thenables. Instead, we'll transfer its thenables to the\n                    // SuspenseList so that it can retry if they resolve.\n                    // There might be multiple of these in the list but since we're\n                    // going to wait for all of them anyway, it doesn't really matter\n                    // which ones gets to ping. In theory we could get clever and keep\n                    // track of how many dependencies remain but it gets tricky because\n                    // in the meantime, we can add/remove/change items and dependencies.\n                    // We might bail out of the loop before finding any but that\n                    // doesn't matter since that means that the other boundaries that\n                    // we did find already has their listeners attached.\n\n                    var _retryQueue = suspended.updateQueue;\n                    workInProgress.updateQueue = _retryQueue;\n                    scheduleRetryEffect(workInProgress, _retryQueue); // Rerender the whole list, but this time, we'll force fallbacks\n                    // to stay in place.\n                    // Reset the effect flags before doing the second pass since that's now invalid.\n                    // Reset the child fibers to their original state.\n\n                    workInProgress.subtreeFlags = NoFlags$1;\n                    resetChildFibers(workInProgress, renderLanes); // Set up the Suspense List Context to force suspense and\n                    // immediately rerender the children.\n\n                    pushSuspenseListContext(\n                      workInProgress,\n                      setShallowSuspenseListContext(\n                        suspenseStackCursor.current,\n                        ForceSuspenseFallback\n                      )\n                    ); // Don't bubble properties in this case.\n\n                    return workInProgress.child;\n                  }\n\n                  row = row.sibling;\n                }\n              }\n\n              if (\n                renderState.tail !== null &&\n                now$1() > getRenderTargetTime()\n              ) {\n                // We have already passed our CPU deadline but we still have rows\n                // left in the tail. We'll just give up further attempts to render\n                // the main content and only render fallbacks.\n                workInProgress.flags |= DidCapture;\n                didSuspendAlready = true;\n                cutOffTailIfNeeded(renderState, false); // Since nothing actually suspended, there will nothing to ping this\n                // to get it started back up to attempt the next item. While in terms\n                // of priority this work has the same priority as this current render,\n                // it's not part of the same transition once the transition has\n                // committed. If it's sync, we still want to yield so that it can be\n                // painted. Conceptually, this is really the same as pinging.\n                // We can use any RetryLane even if it's the one currently rendering\n                // since we're leaving it behind on this node.\n\n                workInProgress.lanes = SomeRetryLane;\n              }\n            } else {\n              cutOffTailIfNeeded(renderState, false);\n            } // Next we're going to render the tail.\n          } else {\n            // Append the rendered row to the child list.\n            if (!didSuspendAlready) {\n              var _suspended = findFirstSuspended(renderedTail);\n\n              if (_suspended !== null) {\n                workInProgress.flags |= DidCapture;\n                didSuspendAlready = true; // Ensure we transfer the update queue to the parent so that it doesn't\n                // get lost if this row ends up dropped during a second pass.\n\n                var _retryQueue2 = _suspended.updateQueue;\n                workInProgress.updateQueue = _retryQueue2;\n                scheduleRetryEffect(workInProgress, _retryQueue2);\n                cutOffTailIfNeeded(renderState, true); // This might have been modified.\n\n                if (\n                  renderState.tail === null &&\n                  renderState.tailMode === \"hidden\" &&\n                  !renderedTail.alternate &&\n                  !getIsHydrating() // We don't cut it if we're hydrating.\n                ) {\n                  // We're done.\n                  bubbleProperties(workInProgress);\n                  return null;\n                }\n              } else if (\n                // The time it took to render last row is greater than the remaining\n                // time we have to render. So rendering one more row would likely\n                // exceed it.\n                now$1() * 2 - renderState.renderingStartTime >\n                  getRenderTargetTime() &&\n                renderLanes !== OffscreenLane\n              ) {\n                // We have now passed our CPU deadline and we'll just give up further\n                // attempts to render the main content and only render fallbacks.\n                // The assumption is that this is usually faster.\n                workInProgress.flags |= DidCapture;\n                didSuspendAlready = true;\n                cutOffTailIfNeeded(renderState, false); // Since nothing actually suspended, there will nothing to ping this\n                // to get it started back up to attempt the next item. While in terms\n                // of priority this work has the same priority as this current render,\n                // it's not part of the same transition once the transition has\n                // committed. If it's sync, we still want to yield so that it can be\n                // painted. Conceptually, this is really the same as pinging.\n                // We can use any RetryLane even if it's the one currently rendering\n                // since we're leaving it behind on this node.\n\n                workInProgress.lanes = SomeRetryLane;\n              }\n            }\n\n            if (renderState.isBackwards) {\n              // The effect list of the backwards tail will have been added\n              // to the end. This breaks the guarantee that life-cycles fire in\n              // sibling order but that isn't a strong guarantee promised by React.\n              // Especially since these might also just pop in during future commits.\n              // Append to the beginning of the list.\n              renderedTail.sibling = workInProgress.child;\n              workInProgress.child = renderedTail;\n            } else {\n              var previousSibling = renderState.last;\n\n              if (previousSibling !== null) {\n                previousSibling.sibling = renderedTail;\n              } else {\n                workInProgress.child = renderedTail;\n              }\n\n              renderState.last = renderedTail;\n            }\n          }\n\n          if (renderState.tail !== null) {\n            // We still have tail rows to render.\n            // Pop a row.\n            var next = renderState.tail;\n            renderState.rendering = next;\n            renderState.tail = next.sibling;\n            renderState.renderingStartTime = now$1();\n            next.sibling = null; // Restore the context.\n            // TODO: We can probably just avoid popping it instead and only\n            // setting it the first time we go from not suspended to suspended.\n\n            var suspenseContext = suspenseStackCursor.current;\n\n            if (didSuspendAlready) {\n              suspenseContext = setShallowSuspenseListContext(\n                suspenseContext,\n                ForceSuspenseFallback\n              );\n            } else {\n              suspenseContext =\n                setDefaultShallowSuspenseListContext(suspenseContext);\n            }\n\n            pushSuspenseListContext(workInProgress, suspenseContext); // Do a pass over the next row.\n            // Don't bubble properties in this case.\n\n            return next;\n          }\n\n          bubbleProperties(workInProgress);\n          return null;\n        }\n\n        case ScopeComponent: {\n          break;\n        }\n\n        case OffscreenComponent:\n        case LegacyHiddenComponent: {\n          popSuspenseHandler(workInProgress);\n          popHiddenContext(workInProgress);\n          var _nextState = workInProgress.memoizedState;\n          var nextIsHidden = _nextState !== null; // Schedule a Visibility effect if the visibility has changed\n\n          {\n            if (current !== null) {\n              var _prevState = current.memoizedState;\n              var prevIsHidden = _prevState !== null;\n\n              if (prevIsHidden !== nextIsHidden) {\n                workInProgress.flags |= Visibility;\n              }\n            } else {\n              // On initial mount, we only need a Visibility effect if the tree\n              // is hidden.\n              if (nextIsHidden) {\n                workInProgress.flags |= Visibility;\n              }\n            }\n          }\n\n          if (\n            !nextIsHidden ||\n            (workInProgress.mode & ConcurrentMode) === NoMode\n          ) {\n            bubbleProperties(workInProgress);\n          } else {\n            // Don't bubble properties for hidden children unless we're rendering\n            // at offscreen priority.\n            if (\n              includesSomeLane(renderLanes, OffscreenLane) && // Also don't bubble if the tree suspended\n              (workInProgress.flags & DidCapture) === NoLanes\n            ) {\n              bubbleProperties(workInProgress); // Check if there was an insertion or update in the hidden subtree.\n              // If so, we need to hide those nodes in the commit phase, so\n              // schedule a visibility effect.\n\n              if (workInProgress.subtreeFlags & (Placement | Update)) {\n                workInProgress.flags |= Visibility;\n              }\n            }\n          }\n\n          var offscreenQueue = workInProgress.updateQueue;\n\n          if (offscreenQueue !== null) {\n            var _retryQueue3 = offscreenQueue.retryQueue;\n            scheduleRetryEffect(workInProgress, _retryQueue3);\n          }\n          return null;\n        }\n\n        case CacheComponent: {\n          return null;\n        }\n\n        case TracingMarkerComponent: {\n          return null;\n        }\n      }\n\n      throw new Error(\n        \"Unknown unit of work tag (\" +\n          workInProgress.tag +\n          \"). This error is likely caused by a bug in \" +\n          \"React. Please file an issue.\"\n      );\n    }\n\n    function unwindWork(current, workInProgress, renderLanes) {\n      switch (workInProgress.tag) {\n        case ClassComponent: {\n          var Component = workInProgress.type;\n\n          if (isContextProvider(Component)) {\n            popContext(workInProgress);\n          }\n\n          var flags = workInProgress.flags;\n\n          if (flags & ShouldCapture) {\n            workInProgress.flags = (flags & ~ShouldCapture) | DidCapture;\n\n            if ((workInProgress.mode & ProfileMode) !== NoMode) {\n              transferActualDuration(workInProgress);\n            }\n\n            return workInProgress;\n          }\n\n          return null;\n        }\n\n        case HostRoot: {\n          popHostContainer(workInProgress);\n          popTopLevelContextObject(workInProgress);\n          var _flags = workInProgress.flags;\n\n          if (\n            (_flags & ShouldCapture) !== NoFlags$1 &&\n            (_flags & DidCapture) === NoFlags$1\n          ) {\n            // There was an error during render that wasn't captured by a suspense\n            // boundary. Do a second pass on the root to unmount the children.\n            workInProgress.flags = (_flags & ~ShouldCapture) | DidCapture;\n            return workInProgress;\n          } // We unwound to the root without completing it. Exit.\n\n          return null;\n        }\n\n        case HostHoistable:\n        case HostSingleton:\n        case HostComponent: {\n          // TODO: popHydrationState\n          popHostContext(workInProgress);\n          return null;\n        }\n\n        case SuspenseComponent: {\n          popSuspenseHandler(workInProgress);\n          var suspenseState = workInProgress.memoizedState;\n\n          if (suspenseState !== null && suspenseState.dehydrated !== null) {\n            if (workInProgress.alternate === null) {\n              throw new Error(\n                \"Threw in newly mounted dehydrated component. This is likely a bug in \" +\n                  \"React. Please file an issue.\"\n              );\n            }\n          }\n\n          var _flags2 = workInProgress.flags;\n\n          if (_flags2 & ShouldCapture) {\n            workInProgress.flags = (_flags2 & ~ShouldCapture) | DidCapture; // Captured a suspense effect. Re-render the boundary.\n\n            if ((workInProgress.mode & ProfileMode) !== NoMode) {\n              transferActualDuration(workInProgress);\n            }\n\n            return workInProgress;\n          }\n\n          return null;\n        }\n\n        case SuspenseListComponent: {\n          popSuspenseListContext(workInProgress); // SuspenseList doesn't actually catch anything. It should've been\n          // caught by a nested boundary. If not, it should bubble through.\n\n          return null;\n        }\n\n        case HostPortal:\n          popHostContainer(workInProgress);\n          return null;\n\n        case ContextProvider:\n          var context = workInProgress.type._context;\n          popProvider(context, workInProgress);\n          return null;\n\n        case OffscreenComponent:\n        case LegacyHiddenComponent: {\n          popSuspenseHandler(workInProgress);\n          popHiddenContext(workInProgress);\n          var _flags3 = workInProgress.flags;\n\n          if (_flags3 & ShouldCapture) {\n            workInProgress.flags = (_flags3 & ~ShouldCapture) | DidCapture; // Captured a suspense effect. Re-render the boundary.\n\n            if ((workInProgress.mode & ProfileMode) !== NoMode) {\n              transferActualDuration(workInProgress);\n            }\n\n            return workInProgress;\n          }\n\n          return null;\n        }\n\n        case CacheComponent:\n          return null;\n\n        case TracingMarkerComponent:\n          return null;\n\n        default:\n          return null;\n      }\n    }\n\n    function unwindInterruptedWork(current, interruptedWork, renderLanes) {\n      switch (interruptedWork.tag) {\n        case ClassComponent: {\n          var childContextTypes = interruptedWork.type.childContextTypes;\n\n          if (childContextTypes !== null && childContextTypes !== undefined) {\n            popContext(interruptedWork);\n          }\n\n          break;\n        }\n\n        case HostRoot: {\n          popHostContainer(interruptedWork);\n          popTopLevelContextObject(interruptedWork);\n          break;\n        }\n\n        case HostHoistable:\n        case HostSingleton:\n        case HostComponent: {\n          popHostContext(interruptedWork);\n          break;\n        }\n\n        case HostPortal:\n          popHostContainer(interruptedWork);\n          break;\n\n        case SuspenseComponent:\n          popSuspenseHandler(interruptedWork);\n          break;\n\n        case SuspenseListComponent:\n          popSuspenseListContext(interruptedWork);\n          break;\n\n        case ContextProvider:\n          var context = interruptedWork.type._context;\n          popProvider(context, interruptedWork);\n          break;\n\n        case OffscreenComponent:\n        case LegacyHiddenComponent:\n          popSuspenseHandler(interruptedWork);\n          popHiddenContext(interruptedWork);\n          break;\n      }\n    }\n\n    var didWarnAboutUndefinedSnapshotBeforeUpdate = null;\n\n    {\n      didWarnAboutUndefinedSnapshotBeforeUpdate = new Set();\n    } // Used during the commit phase to track the state of the Offscreen component stack.\n    // Allows us to avoid traversing the return path to find the nearest Offscreen ancestor.\n\n    var offscreenSubtreeIsHidden = false;\n    var offscreenSubtreeWasHidden = false;\n    var PossiblyWeakSet = typeof WeakSet === \"function\" ? WeakSet : Set;\n    var nextEffect = null; // Used for Profiling builds to track updaters.\n\n    var inProgressLanes = null;\n    var inProgressRoot = null;\n\n    function shouldProfile(current) {\n      return (\n        (current.mode & ProfileMode) !== NoMode &&\n        (getExecutionContext() & CommitContext) !== NoContext\n      );\n    }\n\n    function reportUncaughtErrorInDEV(error) {\n      // Wrapping each small part of the commit phase into a guarded\n      // callback is a bit too slow (https://github.com/facebook/react/pull/21666).\n      // But we rely on it to surface errors to DEV tools like overlays\n      // (https://github.com/facebook/react/issues/21712).\n      // As a compromise, rethrow only caught errors in a guard.\n      {\n        invokeGuardedCallback(null, function () {\n          throw error;\n        });\n        clearCaughtError();\n      }\n    }\n\n    function callComponentWillUnmountWithTimer(current, instance) {\n      instance.props = current.memoizedProps;\n      instance.state = current.memoizedState;\n\n      if (shouldProfile(current)) {\n        try {\n          startLayoutEffectTimer();\n          instance.componentWillUnmount();\n        } finally {\n          recordLayoutEffectDuration(current);\n        }\n      } else {\n        instance.componentWillUnmount();\n      }\n    } // Capture errors so they don't interrupt unmounting.\n\n    function safelyCallComponentWillUnmount(\n      current,\n      nearestMountedAncestor,\n      instance\n    ) {\n      try {\n        callComponentWillUnmountWithTimer(current, instance);\n      } catch (error) {\n        captureCommitPhaseError(current, nearestMountedAncestor, error);\n      }\n    } // Capture errors so they don't interrupt mounting.\n\n    function safelyAttachRef(current, nearestMountedAncestor) {\n      try {\n        commitAttachRef(current);\n      } catch (error) {\n        captureCommitPhaseError(current, nearestMountedAncestor, error);\n      }\n    }\n\n    function safelyDetachRef(current, nearestMountedAncestor) {\n      var ref = current.ref;\n      var refCleanup = current.refCleanup;\n\n      if (ref !== null) {\n        if (typeof refCleanup === \"function\") {\n          try {\n            if (shouldProfile(current)) {\n              try {\n                startLayoutEffectTimer();\n                refCleanup();\n              } finally {\n                recordLayoutEffectDuration(current);\n              }\n            } else {\n              refCleanup();\n            }\n          } catch (error) {\n            captureCommitPhaseError(current, nearestMountedAncestor, error);\n          } finally {\n            // `refCleanup` has been called. Nullify all references to it to prevent double invocation.\n            current.refCleanup = null;\n            var finishedWork = current.alternate;\n\n            if (finishedWork != null) {\n              finishedWork.refCleanup = null;\n            }\n          }\n        } else if (typeof ref === \"function\") {\n          var retVal;\n\n          try {\n            if (shouldProfile(current)) {\n              try {\n                startLayoutEffectTimer();\n                retVal = ref(null);\n              } finally {\n                recordLayoutEffectDuration(current);\n              }\n            } else {\n              retVal = ref(null);\n            }\n          } catch (error) {\n            captureCommitPhaseError(current, nearestMountedAncestor, error);\n          }\n\n          {\n            if (typeof retVal === \"function\") {\n              error(\n                \"Unexpected return value from a callback ref in %s. \" +\n                  \"A callback ref should not return a function.\",\n                getComponentNameFromFiber(current)\n              );\n            }\n          }\n        } else {\n          // $FlowFixMe[incompatible-use] unable to narrow type to RefObject\n          ref.current = null;\n        }\n      }\n    }\n\n    function safelyCallDestroy(current, nearestMountedAncestor, destroy) {\n      try {\n        destroy();\n      } catch (error) {\n        captureCommitPhaseError(current, nearestMountedAncestor, error);\n      }\n    }\n    var shouldFireAfterActiveInstanceBlur = false;\n    function commitBeforeMutationEffects(root, firstChild) {\n      nextEffect = firstChild;\n      commitBeforeMutationEffects_begin(); // We no longer need to track the active instance fiber\n\n      var shouldFire = shouldFireAfterActiveInstanceBlur;\n      shouldFireAfterActiveInstanceBlur = false;\n      return shouldFire;\n    }\n\n    function commitBeforeMutationEffects_begin() {\n      while (nextEffect !== null) {\n        var fiber = nextEffect; // This phase is only used for beforeActiveInstanceBlur.\n\n        var child = fiber.child;\n\n        if (\n          (fiber.subtreeFlags & BeforeMutationMask) !== NoFlags$1 &&\n          child !== null\n        ) {\n          child.return = fiber;\n          nextEffect = child;\n        } else {\n          commitBeforeMutationEffects_complete();\n        }\n      }\n    }\n\n    function commitBeforeMutationEffects_complete() {\n      while (nextEffect !== null) {\n        var fiber = nextEffect;\n        setCurrentFiber(fiber);\n\n        try {\n          commitBeforeMutationEffectsOnFiber(fiber);\n        } catch (error) {\n          captureCommitPhaseError(fiber, fiber.return, error);\n        }\n\n        resetCurrentFiber();\n        var sibling = fiber.sibling;\n\n        if (sibling !== null) {\n          sibling.return = fiber.return;\n          nextEffect = sibling;\n          return;\n        }\n\n        nextEffect = fiber.return;\n      }\n    }\n\n    function commitBeforeMutationEffectsOnFiber(finishedWork) {\n      var current = finishedWork.alternate;\n      var flags = finishedWork.flags;\n\n      if ((flags & Snapshot) !== NoFlags$1) {\n        setCurrentFiber(finishedWork);\n      }\n\n      switch (finishedWork.tag) {\n        case FunctionComponent: {\n          break;\n        }\n\n        case ForwardRef:\n        case SimpleMemoComponent: {\n          break;\n        }\n\n        case ClassComponent: {\n          if ((flags & Snapshot) !== NoFlags$1) {\n            if (current !== null) {\n              var prevProps = current.memoizedProps;\n              var prevState = current.memoizedState;\n              var instance = finishedWork.stateNode; // We could update instance props and state here,\n              // but instead we rely on them being set during last render.\n              // TODO: revisit this when we implement resuming.\n\n              {\n                if (\n                  finishedWork.type === finishedWork.elementType &&\n                  !didWarnAboutReassigningProps\n                ) {\n                  if (instance.props !== finishedWork.memoizedProps) {\n                    error(\n                      \"Expected %s props to match memoized props before \" +\n                        \"getSnapshotBeforeUpdate. \" +\n                        \"This might either be because of a bug in React, or because \" +\n                        \"a component reassigns its own `this.props`. \" +\n                        \"Please file an issue.\",\n                      getComponentNameFromFiber(finishedWork) || \"instance\"\n                    );\n                  }\n\n                  if (instance.state !== finishedWork.memoizedState) {\n                    error(\n                      \"Expected %s state to match memoized state before \" +\n                        \"getSnapshotBeforeUpdate. \" +\n                        \"This might either be because of a bug in React, or because \" +\n                        \"a component reassigns its own `this.state`. \" +\n                        \"Please file an issue.\",\n                      getComponentNameFromFiber(finishedWork) || \"instance\"\n                    );\n                  }\n                }\n              }\n\n              var snapshot = instance.getSnapshotBeforeUpdate(\n                finishedWork.elementType === finishedWork.type\n                  ? prevProps\n                  : resolveDefaultProps(finishedWork.type, prevProps),\n                prevState\n              );\n\n              {\n                var didWarnSet = didWarnAboutUndefinedSnapshotBeforeUpdate;\n\n                if (\n                  snapshot === undefined &&\n                  !didWarnSet.has(finishedWork.type)\n                ) {\n                  didWarnSet.add(finishedWork.type);\n\n                  error(\n                    \"%s.getSnapshotBeforeUpdate(): A snapshot value (or null) \" +\n                      \"must be returned. You have returned undefined.\",\n                    getComponentNameFromFiber(finishedWork)\n                  );\n                }\n              }\n\n              instance.__reactInternalSnapshotBeforeUpdate = snapshot;\n            }\n          }\n\n          break;\n        }\n\n        case HostRoot: {\n          break;\n        }\n\n        case HostComponent:\n        case HostHoistable:\n        case HostSingleton:\n        case HostText:\n        case HostPortal:\n        case IncompleteClassComponent:\n          // Nothing to do for these component types\n          break;\n\n        default: {\n          if ((flags & Snapshot) !== NoFlags$1) {\n            throw new Error(\n              \"This unit of work tag should not have side-effects. This error is \" +\n                \"likely caused by a bug in React. Please file an issue.\"\n            );\n          }\n        }\n      }\n\n      if ((flags & Snapshot) !== NoFlags$1) {\n        resetCurrentFiber();\n      }\n    }\n\n    function commitHookEffectListUnmount(\n      flags,\n      finishedWork,\n      nearestMountedAncestor\n    ) {\n      var updateQueue = finishedWork.updateQueue;\n      var lastEffect = updateQueue !== null ? updateQueue.lastEffect : null;\n\n      if (lastEffect !== null) {\n        var firstEffect = lastEffect.next;\n        var effect = firstEffect;\n\n        do {\n          if ((effect.tag & flags) === flags) {\n            // Unmount\n            var inst = effect.inst;\n            var destroy = inst.destroy;\n\n            if (destroy !== undefined) {\n              inst.destroy = undefined;\n\n              {\n                if ((flags & Insertion) !== NoFlags) {\n                  setIsRunningInsertionEffect(true);\n                }\n              }\n\n              safelyCallDestroy(finishedWork, nearestMountedAncestor, destroy);\n\n              {\n                if ((flags & Insertion) !== NoFlags) {\n                  setIsRunningInsertionEffect(false);\n                }\n              }\n            }\n          }\n\n          effect = effect.next;\n        } while (effect !== firstEffect);\n      }\n    }\n\n    function commitHookEffectListMount(flags, finishedWork) {\n      var updateQueue = finishedWork.updateQueue;\n      var lastEffect = updateQueue !== null ? updateQueue.lastEffect : null;\n\n      if (lastEffect !== null) {\n        var firstEffect = lastEffect.next;\n        var effect = firstEffect;\n\n        do {\n          if ((effect.tag & flags) === flags) {\n            var create = effect.create;\n\n            {\n              if ((flags & Insertion) !== NoFlags) {\n                setIsRunningInsertionEffect(true);\n              }\n            }\n\n            var inst = effect.inst;\n            var destroy = create();\n            inst.destroy = destroy;\n\n            {\n              if ((flags & Insertion) !== NoFlags) {\n                setIsRunningInsertionEffect(false);\n              }\n            }\n\n            {\n              if (destroy !== undefined && typeof destroy !== \"function\") {\n                var hookName = void 0;\n\n                if ((effect.tag & Layout) !== NoFlags$1) {\n                  hookName = \"useLayoutEffect\";\n                } else if ((effect.tag & Insertion) !== NoFlags$1) {\n                  hookName = \"useInsertionEffect\";\n                } else {\n                  hookName = \"useEffect\";\n                }\n\n                var addendum = void 0;\n\n                if (destroy === null) {\n                  addendum =\n                    \" You returned null. If your effect does not require clean \" +\n                    \"up, return undefined (or nothing).\";\n                } else if (typeof destroy.then === \"function\") {\n                  addendum =\n                    \"\\n\\nIt looks like you wrote \" +\n                    hookName +\n                    \"(async () => ...) or returned a Promise. \" +\n                    \"Instead, write the async function inside your effect \" +\n                    \"and call it immediately:\\n\\n\" +\n                    hookName +\n                    \"(() => {\\n\" +\n                    \"  async function fetchData() {\\n\" +\n                    \"    // You can await here\\n\" +\n                    \"    const response = await MyAPI.getData(someId);\\n\" +\n                    \"    // ...\\n\" +\n                    \"  }\\n\" +\n                    \"  fetchData();\\n\" +\n                    \"}, [someId]); // Or [] if effect doesn't need props or state\\n\\n\" +\n                    \"Learn more about data fetching with Hooks: https://reactjs.org/link/hooks-data-fetching\";\n                } else {\n                  addendum = \" You returned: \" + destroy;\n                }\n\n                error(\n                  \"%s must not return anything besides a function, \" +\n                    \"which is used for clean-up.%s\",\n                  hookName,\n                  addendum\n                );\n              }\n            }\n          }\n\n          effect = effect.next;\n        } while (effect !== firstEffect);\n      }\n    }\n\n    function commitPassiveEffectDurations(finishedRoot, finishedWork) {\n      if (getExecutionContext() & CommitContext) {\n        // Only Profilers with work in their subtree will have an Update effect scheduled.\n        if ((finishedWork.flags & Update) !== NoFlags$1) {\n          switch (finishedWork.tag) {\n            case Profiler: {\n              var passiveEffectDuration =\n                finishedWork.stateNode.passiveEffectDuration;\n              var _finishedWork$memoize = finishedWork.memoizedProps,\n                id = _finishedWork$memoize.id,\n                onPostCommit = _finishedWork$memoize.onPostCommit; // This value will still reflect the previous commit phase.\n              // It does not get reset until the start of the next commit phase.\n\n              var commitTime = getCommitTime();\n              var phase = finishedWork.alternate === null ? \"mount\" : \"update\";\n\n              {\n                if (isCurrentUpdateNested()) {\n                  phase = \"nested-update\";\n                }\n              }\n\n              if (typeof onPostCommit === \"function\") {\n                onPostCommit(id, phase, passiveEffectDuration, commitTime);\n              } // Bubble times to the next nearest ancestor Profiler.\n              // After we process that Profiler, we'll bubble further up.\n\n              var parentFiber = finishedWork.return;\n\n              outer: while (parentFiber !== null) {\n                switch (parentFiber.tag) {\n                  case HostRoot:\n                    var root = parentFiber.stateNode;\n                    root.passiveEffectDuration += passiveEffectDuration;\n                    break outer;\n\n                  case Profiler:\n                    var parentStateNode = parentFiber.stateNode;\n                    parentStateNode.passiveEffectDuration +=\n                      passiveEffectDuration;\n                    break outer;\n                }\n\n                parentFiber = parentFiber.return;\n              }\n\n              break;\n            }\n          }\n        }\n      }\n    }\n\n    function commitHookLayoutEffects(finishedWork, hookFlags) {\n      // At this point layout effects have already been destroyed (during mutation phase).\n      // This is done to prevent sibling component effects from interfering with each other,\n      // e.g. a destroy function in one component should never override a ref set\n      // by a create function in another component during the same commit.\n      if (shouldProfile(finishedWork)) {\n        try {\n          startLayoutEffectTimer();\n          commitHookEffectListMount(hookFlags, finishedWork);\n        } catch (error) {\n          captureCommitPhaseError(finishedWork, finishedWork.return, error);\n        }\n\n        recordLayoutEffectDuration(finishedWork);\n      } else {\n        try {\n          commitHookEffectListMount(hookFlags, finishedWork);\n        } catch (error) {\n          captureCommitPhaseError(finishedWork, finishedWork.return, error);\n        }\n      }\n    }\n\n    function commitClassLayoutLifecycles(finishedWork, current) {\n      var instance = finishedWork.stateNode;\n\n      if (current === null) {\n        // We could update instance props and state here,\n        // but instead we rely on them being set during last render.\n        // TODO: revisit this when we implement resuming.\n        {\n          if (\n            finishedWork.type === finishedWork.elementType &&\n            !didWarnAboutReassigningProps\n          ) {\n            if (instance.props !== finishedWork.memoizedProps) {\n              error(\n                \"Expected %s props to match memoized props before \" +\n                  \"componentDidMount. \" +\n                  \"This might either be because of a bug in React, or because \" +\n                  \"a component reassigns its own `this.props`. \" +\n                  \"Please file an issue.\",\n                getComponentNameFromFiber(finishedWork) || \"instance\"\n              );\n            }\n\n            if (instance.state !== finishedWork.memoizedState) {\n              error(\n                \"Expected %s state to match memoized state before \" +\n                  \"componentDidMount. \" +\n                  \"This might either be because of a bug in React, or because \" +\n                  \"a component reassigns its own `this.state`. \" +\n                  \"Please file an issue.\",\n                getComponentNameFromFiber(finishedWork) || \"instance\"\n              );\n            }\n          }\n        }\n\n        if (shouldProfile(finishedWork)) {\n          try {\n            startLayoutEffectTimer();\n            instance.componentDidMount();\n          } catch (error) {\n            captureCommitPhaseError(finishedWork, finishedWork.return, error);\n          }\n\n          recordLayoutEffectDuration(finishedWork);\n        } else {\n          try {\n            instance.componentDidMount();\n          } catch (error) {\n            captureCommitPhaseError(finishedWork, finishedWork.return, error);\n          }\n        }\n      } else {\n        var prevProps =\n          finishedWork.elementType === finishedWork.type\n            ? current.memoizedProps\n            : resolveDefaultProps(finishedWork.type, current.memoizedProps);\n        var prevState = current.memoizedState; // We could update instance props and state here,\n        // but instead we rely on them being set during last render.\n        // TODO: revisit this when we implement resuming.\n\n        {\n          if (\n            finishedWork.type === finishedWork.elementType &&\n            !didWarnAboutReassigningProps\n          ) {\n            if (instance.props !== finishedWork.memoizedProps) {\n              error(\n                \"Expected %s props to match memoized props before \" +\n                  \"componentDidUpdate. \" +\n                  \"This might either be because of a bug in React, or because \" +\n                  \"a component reassigns its own `this.props`. \" +\n                  \"Please file an issue.\",\n                getComponentNameFromFiber(finishedWork) || \"instance\"\n              );\n            }\n\n            if (instance.state !== finishedWork.memoizedState) {\n              error(\n                \"Expected %s state to match memoized state before \" +\n                  \"componentDidUpdate. \" +\n                  \"This might either be because of a bug in React, or because \" +\n                  \"a component reassigns its own `this.state`. \" +\n                  \"Please file an issue.\",\n                getComponentNameFromFiber(finishedWork) || \"instance\"\n              );\n            }\n          }\n        }\n\n        if (shouldProfile(finishedWork)) {\n          try {\n            startLayoutEffectTimer();\n            instance.componentDidUpdate(\n              prevProps,\n              prevState,\n              instance.__reactInternalSnapshotBeforeUpdate\n            );\n          } catch (error) {\n            captureCommitPhaseError(finishedWork, finishedWork.return, error);\n          }\n\n          recordLayoutEffectDuration(finishedWork);\n        } else {\n          try {\n            instance.componentDidUpdate(\n              prevProps,\n              prevState,\n              instance.__reactInternalSnapshotBeforeUpdate\n            );\n          } catch (error) {\n            captureCommitPhaseError(finishedWork, finishedWork.return, error);\n          }\n        }\n      }\n    }\n\n    function commitClassCallbacks(finishedWork) {\n      // TODO: I think this is now always non-null by the time it reaches the\n      // commit phase. Consider removing the type check.\n      var updateQueue = finishedWork.updateQueue;\n\n      if (updateQueue !== null) {\n        var instance = finishedWork.stateNode;\n\n        {\n          if (\n            finishedWork.type === finishedWork.elementType &&\n            !didWarnAboutReassigningProps\n          ) {\n            if (instance.props !== finishedWork.memoizedProps) {\n              error(\n                \"Expected %s props to match memoized props before \" +\n                  \"processing the update queue. \" +\n                  \"This might either be because of a bug in React, or because \" +\n                  \"a component reassigns its own `this.props`. \" +\n                  \"Please file an issue.\",\n                getComponentNameFromFiber(finishedWork) || \"instance\"\n              );\n            }\n\n            if (instance.state !== finishedWork.memoizedState) {\n              error(\n                \"Expected %s state to match memoized state before \" +\n                  \"processing the update queue. \" +\n                  \"This might either be because of a bug in React, or because \" +\n                  \"a component reassigns its own `this.state`. \" +\n                  \"Please file an issue.\",\n                getComponentNameFromFiber(finishedWork) || \"instance\"\n              );\n            }\n          }\n        } // We could update instance props and state here,\n        // but instead we rely on them being set during last render.\n        // TODO: revisit this when we implement resuming.\n\n        try {\n          commitCallbacks(updateQueue, instance);\n        } catch (error) {\n          captureCommitPhaseError(finishedWork, finishedWork.return, error);\n        }\n      }\n    }\n\n    function commitHostComponentMount(finishedWork) {\n      var type = finishedWork.type;\n      var props = finishedWork.memoizedProps;\n      var instance = finishedWork.stateNode;\n\n      try {\n        commitMount(instance, type, props, finishedWork);\n      } catch (error) {\n        captureCommitPhaseError(finishedWork, finishedWork.return, error);\n      }\n    }\n\n    function commitProfilerUpdate(finishedWork, current) {\n      if (getExecutionContext() & CommitContext) {\n        try {\n          var _finishedWork$memoize2 = finishedWork.memoizedProps,\n            onCommit = _finishedWork$memoize2.onCommit,\n            onRender = _finishedWork$memoize2.onRender;\n          var effectDuration = finishedWork.stateNode.effectDuration;\n          var commitTime = getCommitTime();\n          var phase = current === null ? \"mount\" : \"update\";\n\n          if (enableProfilerNestedUpdatePhase) {\n            if (isCurrentUpdateNested()) {\n              phase = \"nested-update\";\n            }\n          }\n\n          if (typeof onRender === \"function\") {\n            onRender(\n              finishedWork.memoizedProps.id,\n              phase,\n              finishedWork.actualDuration,\n              finishedWork.treeBaseDuration,\n              finishedWork.actualStartTime,\n              commitTime\n            );\n          }\n\n          if (enableProfilerCommitHooks) {\n            if (typeof onCommit === \"function\") {\n              onCommit(\n                finishedWork.memoizedProps.id,\n                phase,\n                effectDuration,\n                commitTime\n              );\n            } // Schedule a passive effect for this Profiler to call onPostCommit hooks.\n            // This effect should be scheduled even if there is no onPostCommit callback for this Profiler,\n            // because the effect is also where times bubble to parent Profilers.\n\n            enqueuePendingPassiveProfilerEffect(finishedWork); // Propagate layout effect durations to the next nearest Profiler ancestor.\n            // Do not reset these values until the next render so DevTools has a chance to read them first.\n\n            var parentFiber = finishedWork.return;\n\n            outer: while (parentFiber !== null) {\n              switch (parentFiber.tag) {\n                case HostRoot:\n                  var root = parentFiber.stateNode;\n                  root.effectDuration += effectDuration;\n                  break outer;\n\n                case Profiler:\n                  var parentStateNode = parentFiber.stateNode;\n                  parentStateNode.effectDuration += effectDuration;\n                  break outer;\n              }\n\n              parentFiber = parentFiber.return;\n            }\n          }\n        } catch (error) {\n          captureCommitPhaseError(finishedWork, finishedWork.return, error);\n        }\n      }\n    }\n\n    function commitLayoutEffectOnFiber(\n      finishedRoot,\n      current,\n      finishedWork,\n      committedLanes\n    ) {\n      // When updating this function, also update reappearLayoutEffects, which does\n      // most of the same things when an offscreen tree goes from hidden -> visible.\n      var flags = finishedWork.flags;\n\n      switch (finishedWork.tag) {\n        case FunctionComponent:\n        case ForwardRef:\n        case SimpleMemoComponent: {\n          recursivelyTraverseLayoutEffects(finishedRoot, finishedWork);\n\n          if (flags & Update) {\n            commitHookLayoutEffects(finishedWork, Layout | HasEffect);\n          }\n\n          break;\n        }\n\n        case ClassComponent: {\n          recursivelyTraverseLayoutEffects(finishedRoot, finishedWork);\n\n          if (flags & Update) {\n            commitClassLayoutLifecycles(finishedWork, current);\n          }\n\n          if (flags & Callback) {\n            commitClassCallbacks(finishedWork);\n          }\n\n          if (flags & Ref) {\n            safelyAttachRef(finishedWork, finishedWork.return);\n          }\n\n          break;\n        }\n\n        case HostRoot: {\n          recursivelyTraverseLayoutEffects(finishedRoot, finishedWork);\n\n          if (flags & Callback) {\n            // TODO: I think this is now always non-null by the time it reaches the\n            // commit phase. Consider removing the type check.\n            var updateQueue = finishedWork.updateQueue;\n\n            if (updateQueue !== null) {\n              var instance = null;\n\n              if (finishedWork.child !== null) {\n                switch (finishedWork.child.tag) {\n                  case HostSingleton:\n                  case HostComponent:\n                    instance = getPublicInstance(finishedWork.child.stateNode);\n                    break;\n\n                  case ClassComponent:\n                    instance = finishedWork.child.stateNode;\n                    break;\n                }\n              }\n\n              try {\n                commitCallbacks(updateQueue, instance);\n              } catch (error) {\n                captureCommitPhaseError(\n                  finishedWork,\n                  finishedWork.return,\n                  error\n                );\n              }\n            }\n          }\n\n          break;\n        }\n\n        case HostHoistable:\n\n        case HostSingleton:\n        case HostComponent: {\n          recursivelyTraverseLayoutEffects(finishedRoot, finishedWork); // Renderers may schedule work to be done after host components are mounted\n          // (eg DOM renderer may schedule auto-focus for inputs and form controls).\n          // These effects should only be committed when components are first mounted,\n          // aka when there is no current/alternate.\n\n          if (current === null && flags & Update) {\n            commitHostComponentMount(finishedWork);\n          }\n\n          if (flags & Ref) {\n            safelyAttachRef(finishedWork, finishedWork.return);\n          }\n\n          break;\n        }\n\n        case Profiler: {\n          recursivelyTraverseLayoutEffects(finishedRoot, finishedWork); // TODO: Should this fire inside an offscreen tree? Or should it wait to\n          // fire when the tree becomes visible again.\n\n          if (flags & Update) {\n            commitProfilerUpdate(finishedWork, current);\n          }\n\n          break;\n        }\n\n        case SuspenseComponent: {\n          recursivelyTraverseLayoutEffects(finishedRoot, finishedWork);\n\n          break;\n        }\n\n        case OffscreenComponent: {\n          var isModernRoot = (finishedWork.mode & ConcurrentMode) !== NoMode;\n\n          if (isModernRoot) {\n            var isHidden = finishedWork.memoizedState !== null;\n            var newOffscreenSubtreeIsHidden =\n              isHidden || offscreenSubtreeIsHidden;\n\n            if (newOffscreenSubtreeIsHidden);\n            else {\n              // The Offscreen tree is visible.\n              var wasHidden =\n                current !== null && current.memoizedState !== null;\n              var newOffscreenSubtreeWasHidden =\n                wasHidden || offscreenSubtreeWasHidden;\n              var prevOffscreenSubtreeIsHidden = offscreenSubtreeIsHidden;\n              var prevOffscreenSubtreeWasHidden = offscreenSubtreeWasHidden;\n              offscreenSubtreeIsHidden = newOffscreenSubtreeIsHidden;\n              offscreenSubtreeWasHidden = newOffscreenSubtreeWasHidden;\n\n              if (offscreenSubtreeWasHidden && !prevOffscreenSubtreeWasHidden) {\n                // This is the root of a reappearing boundary. As we continue\n                // traversing the layout effects, we must also re-mount layout\n                // effects that were unmounted when the Offscreen subtree was\n                // hidden. So this is a superset of the normal commitLayoutEffects.\n                var includeWorkInProgressEffects =\n                  (finishedWork.subtreeFlags & LayoutMask) !== NoFlags$1;\n                recursivelyTraverseReappearLayoutEffects(\n                  finishedRoot,\n                  finishedWork,\n                  includeWorkInProgressEffects\n                );\n              } else {\n                recursivelyTraverseLayoutEffects(finishedRoot, finishedWork);\n              }\n\n              offscreenSubtreeIsHidden = prevOffscreenSubtreeIsHidden;\n              offscreenSubtreeWasHidden = prevOffscreenSubtreeWasHidden;\n            }\n          } else {\n            recursivelyTraverseLayoutEffects(finishedRoot, finishedWork);\n          }\n\n          if (flags & Ref) {\n            var props = finishedWork.memoizedProps;\n\n            if (props.mode === \"manual\") {\n              safelyAttachRef(finishedWork, finishedWork.return);\n            } else {\n              safelyDetachRef(finishedWork, finishedWork.return);\n            }\n          }\n\n          break;\n        }\n\n        default: {\n          recursivelyTraverseLayoutEffects(finishedRoot, finishedWork);\n          break;\n        }\n      }\n    }\n\n    function hideOrUnhideAllChildren(finishedWork, isHidden) {\n      // Only hide or unhide the top-most host nodes.\n      var hostSubtreeRoot = null;\n\n      {\n        // We only have the top Fiber that was inserted but we need to recurse down its\n        // children to find all the terminal nodes.\n        var node = finishedWork;\n\n        while (true) {\n          if (node.tag === HostComponent || false || false) {\n            if (hostSubtreeRoot === null) {\n              hostSubtreeRoot = node;\n\n              try {\n                var instance = node.stateNode;\n\n                if (isHidden) {\n                  hideInstance(instance);\n                } else {\n                  unhideInstance(node.stateNode, node.memoizedProps);\n                }\n              } catch (error) {\n                captureCommitPhaseError(\n                  finishedWork,\n                  finishedWork.return,\n                  error\n                );\n              }\n            }\n          } else if (node.tag === HostText) {\n            if (hostSubtreeRoot === null) {\n              try {\n                var _instance = node.stateNode;\n\n                if (isHidden) {\n                  hideTextInstance(_instance);\n                } else {\n                  unhideTextInstance(_instance, node.memoizedProps);\n                }\n              } catch (error) {\n                captureCommitPhaseError(\n                  finishedWork,\n                  finishedWork.return,\n                  error\n                );\n              }\n            }\n          } else if (\n            (node.tag === OffscreenComponent ||\n              node.tag === LegacyHiddenComponent) &&\n            node.memoizedState !== null &&\n            node !== finishedWork\n          );\n          else if (node.child !== null) {\n            node.child.return = node;\n            node = node.child;\n            continue;\n          }\n\n          if (node === finishedWork) {\n            return;\n          }\n\n          while (node.sibling === null) {\n            if (node.return === null || node.return === finishedWork) {\n              return;\n            }\n\n            if (hostSubtreeRoot === node) {\n              hostSubtreeRoot = null;\n            }\n\n            node = node.return;\n          }\n\n          if (hostSubtreeRoot === node) {\n            hostSubtreeRoot = null;\n          }\n\n          node.sibling.return = node.return;\n          node = node.sibling;\n        }\n      }\n    }\n\n    function commitAttachRef(finishedWork) {\n      var ref = finishedWork.ref;\n\n      if (ref !== null) {\n        var instance = finishedWork.stateNode;\n        var instanceToUse;\n\n        switch (finishedWork.tag) {\n          case HostHoistable:\n          case HostSingleton:\n          case HostComponent:\n            instanceToUse = getPublicInstance(instance);\n            break;\n\n          default:\n            instanceToUse = instance;\n        } // Moved outside to ensure DCE works with this flag\n\n        if (typeof ref === \"function\") {\n          if (shouldProfile(finishedWork)) {\n            try {\n              startLayoutEffectTimer();\n              finishedWork.refCleanup = ref(instanceToUse);\n            } finally {\n              recordLayoutEffectDuration(finishedWork);\n            }\n          } else {\n            finishedWork.refCleanup = ref(instanceToUse);\n          }\n        } else {\n          {\n            if (!ref.hasOwnProperty(\"current\")) {\n              error(\n                \"Unexpected ref object provided for %s. \" +\n                  \"Use either a ref-setter function or React.createRef().\",\n                getComponentNameFromFiber(finishedWork)\n              );\n            }\n          } // $FlowFixMe[incompatible-use] unable to narrow type to the non-function case\n\n          ref.current = instanceToUse;\n        }\n      }\n    }\n\n    function detachFiberMutation(fiber) {\n      // Cut off the return pointer to disconnect it from the tree.\n      // This enables us to detect and warn against state updates on an unmounted component.\n      // It also prevents events from bubbling from within disconnected components.\n      //\n      // Ideally, we should also clear the child pointer of the parent alternate to let this\n      // get GC:ed but we don't know which for sure which parent is the current\n      // one so we'll settle for GC:ing the subtree of this child.\n      // This child itself will be GC:ed when the parent updates the next time.\n      //\n      // Note that we can't clear child or sibling pointers yet.\n      // They're needed for passive effects and for findDOMNode.\n      // We defer those fields, and all other cleanup, to the passive phase (see detachFiberAfterEffects).\n      //\n      // Don't reset the alternate yet, either. We need that so we can detach the\n      // alternate's fields in the passive phase. Clearing the return pointer is\n      // sufficient for findDOMNode semantics.\n      var alternate = fiber.alternate;\n\n      if (alternate !== null) {\n        alternate.return = null;\n      }\n\n      fiber.return = null;\n    }\n\n    function detachFiberAfterEffects(fiber) {\n      var alternate = fiber.alternate;\n\n      if (alternate !== null) {\n        fiber.alternate = null;\n        detachFiberAfterEffects(alternate);\n      } // Clear cyclical Fiber fields. This level alone is designed to roughly\n      // approximate the planned Fiber refactor. In that world, `setState` will be\n      // bound to a special \"instance\" object instead of a Fiber. The Instance\n      // object will not have any of these fields. It will only be connected to\n      // the fiber tree via a single link at the root. So if this level alone is\n      // sufficient to fix memory issues, that bodes well for our plans.\n\n      fiber.child = null;\n      fiber.deletions = null;\n      fiber.sibling = null; // The `stateNode` is cyclical because on host nodes it points to the host\n\n      fiber.stateNode = null;\n\n      {\n        fiber._debugOwner = null;\n      } // Theoretically, nothing in here should be necessary, because we already\n      // disconnected the fiber from the tree. So even if something leaks this\n      // particular fiber, it won't leak anything else.\n\n      fiber.return = null;\n      fiber.dependencies = null;\n      fiber.memoizedProps = null;\n      fiber.memoizedState = null;\n      fiber.pendingProps = null;\n      fiber.stateNode = null; // TODO: Move to `commitPassiveUnmountInsideDeletedTreeOnFiber` instead.\n\n      fiber.updateQueue = null;\n    }\n\n    function getHostParentFiber(fiber) {\n      var parent = fiber.return;\n\n      while (parent !== null) {\n        if (isHostParent(parent)) {\n          return parent;\n        }\n\n        parent = parent.return;\n      }\n\n      throw new Error(\n        \"Expected to find a host parent. This error is likely caused by a bug \" +\n          \"in React. Please file an issue.\"\n      );\n    }\n\n    function isHostParent(fiber) {\n      return (\n        fiber.tag === HostComponent ||\n        fiber.tag === HostRoot ||\n        false ||\n        false ||\n        fiber.tag === HostPortal\n      );\n    }\n\n    function getHostSibling(fiber) {\n      // We're going to search forward into the tree until we find a sibling host\n      // node. Unfortunately, if multiple insertions are done in a row we have to\n      // search past them. This leads to exponential search for the next sibling.\n      // TODO: Find a more efficient way to do this.\n      var node = fiber;\n\n      siblings: while (true) {\n        // If we didn't find anything, let's try the next sibling.\n        while (node.sibling === null) {\n          if (node.return === null || isHostParent(node.return)) {\n            // If we pop out of the root or hit the parent the fiber we are the\n            // last sibling.\n            return null;\n          } // $FlowFixMe[incompatible-type] found when upgrading Flow\n\n          node = node.return;\n        }\n\n        node.sibling.return = node.return;\n        node = node.sibling;\n\n        while (\n          node.tag !== HostComponent &&\n          node.tag !== HostText &&\n          true &&\n          node.tag !== DehydratedFragment\n        ) {\n          // If it is not host node and, we might have a host node inside it.\n          // Try to search down until we find one.\n          if (node.flags & Placement) {\n            // If we don't have a child, try the siblings instead.\n            continue siblings;\n          } // If we don't have a child, try the siblings instead.\n          // We also skip portals because they are not part of this host tree.\n\n          if (node.child === null || node.tag === HostPortal) {\n            continue siblings;\n          } else {\n            node.child.return = node;\n            node = node.child;\n          }\n        } // Check if this host node is stable or about to be placed.\n\n        if (!(node.flags & Placement)) {\n          // Found it!\n          return node.stateNode;\n        }\n      }\n    }\n\n    function commitPlacement(finishedWork) {\n      var parentFiber = getHostParentFiber(finishedWork);\n\n      switch (parentFiber.tag) {\n        case HostSingleton:\n\n        case HostComponent: {\n          var _parent = parentFiber.stateNode;\n\n          if (parentFiber.flags & ContentReset) {\n            parentFiber.flags &= ~ContentReset;\n          }\n\n          var _before = getHostSibling(finishedWork); // We only have the top Fiber that was inserted but we need to recurse down its\n          // children to find all the terminal nodes.\n\n          insertOrAppendPlacementNode(finishedWork, _before, _parent);\n          break;\n        }\n\n        case HostRoot:\n        case HostPortal: {\n          var _parent2 = parentFiber.stateNode.containerInfo;\n\n          var _before2 = getHostSibling(finishedWork);\n\n          insertOrAppendPlacementNodeIntoContainer(\n            finishedWork,\n            _before2,\n            _parent2\n          );\n          break;\n        }\n\n        default:\n          throw new Error(\n            \"Invalid host parent fiber. This error is likely caused by a bug \" +\n              \"in React. Please file an issue.\"\n          );\n      }\n    }\n\n    function insertOrAppendPlacementNodeIntoContainer(node, before, parent) {\n      var tag = node.tag;\n      var isHost = tag === HostComponent || tag === HostText;\n\n      if (isHost) {\n        var stateNode = node.stateNode;\n\n        if (before) {\n          insertInContainerBefore(parent);\n        } else {\n          appendChildToContainer(parent, stateNode);\n        }\n      } else if (tag === HostPortal || false);\n      else {\n        var child = node.child;\n\n        if (child !== null) {\n          insertOrAppendPlacementNodeIntoContainer(child, before, parent);\n          var sibling = child.sibling;\n\n          while (sibling !== null) {\n            insertOrAppendPlacementNodeIntoContainer(sibling, before, parent);\n            sibling = sibling.sibling;\n          }\n        }\n      }\n    }\n\n    function insertOrAppendPlacementNode(node, before, parent) {\n      var tag = node.tag;\n      var isHost = tag === HostComponent || tag === HostText;\n\n      if (isHost) {\n        var stateNode = node.stateNode;\n\n        if (before) {\n          insertBefore(parent, stateNode, before);\n        } else {\n          appendChild(parent, stateNode);\n        }\n      } else if (tag === HostPortal || false);\n      else {\n        var child = node.child;\n\n        if (child !== null) {\n          insertOrAppendPlacementNode(child, before, parent);\n          var sibling = child.sibling;\n\n          while (sibling !== null) {\n            insertOrAppendPlacementNode(sibling, before, parent);\n            sibling = sibling.sibling;\n          }\n        }\n      }\n    } // These are tracked on the stack as we recursively traverse a\n    // deleted subtree.\n    // TODO: Update these during the whole mutation phase, not just during\n    // a deletion.\n\n    var hostParent = null;\n    var hostParentIsContainer = false;\n\n    function commitDeletionEffects(root, returnFiber, deletedFiber) {\n      {\n        // We only have the top Fiber that was deleted but we need to recurse down its\n        // children to find all the terminal nodes.\n        // Recursively delete all host nodes from the parent, detach refs, clean\n        // up mounted layout effects, and call componentWillUnmount.\n        // We only need to remove the topmost host child in each branch. But then we\n        // still need to keep traversing to unmount effects, refs, and cWU. TODO: We\n        // could split this into two separate traversals functions, where the second\n        // one doesn't include any removeChild logic. This is maybe the same\n        // function as \"disappearLayoutEffects\" (or whatever that turns into after\n        // the layout phase is refactored to use recursion).\n        // Before starting, find the nearest host parent on the stack so we know\n        // which instance/container to remove the children from.\n        // TODO: Instead of searching up the fiber return path on every deletion, we\n        // can track the nearest host component on the JS stack as we traverse the\n        // tree during the commit phase. This would make insertions faster, too.\n        var parent = returnFiber;\n\n        findParent: while (parent !== null) {\n          switch (parent.tag) {\n            case HostSingleton:\n            case HostComponent: {\n              hostParent = parent.stateNode;\n              hostParentIsContainer = false;\n              break findParent;\n            }\n\n            case HostRoot: {\n              hostParent = parent.stateNode.containerInfo;\n              hostParentIsContainer = true;\n              break findParent;\n            }\n\n            case HostPortal: {\n              hostParent = parent.stateNode.containerInfo;\n              hostParentIsContainer = true;\n              break findParent;\n            }\n          }\n\n          parent = parent.return;\n        }\n\n        if (hostParent === null) {\n          throw new Error(\n            \"Expected to find a host parent. This error is likely caused by \" +\n              \"a bug in React. Please file an issue.\"\n          );\n        }\n\n        commitDeletionEffectsOnFiber(root, returnFiber, deletedFiber);\n        hostParent = null;\n        hostParentIsContainer = false;\n      }\n\n      detachFiberMutation(deletedFiber);\n    }\n\n    function recursivelyTraverseDeletionEffects(\n      finishedRoot,\n      nearestMountedAncestor,\n      parent\n    ) {\n      // TODO: Use a static flag to skip trees that don't have unmount effects\n      var child = parent.child;\n\n      while (child !== null) {\n        commitDeletionEffectsOnFiber(\n          finishedRoot,\n          nearestMountedAncestor,\n          child\n        );\n        child = child.sibling;\n      }\n    }\n\n    function commitDeletionEffectsOnFiber(\n      finishedRoot,\n      nearestMountedAncestor,\n      deletedFiber\n    ) {\n      onCommitUnmount(deletedFiber); // The cases in this outer switch modify the stack before they traverse\n      // into their subtree. There are simpler cases in the inner switch\n      // that don't modify the stack.\n\n      switch (deletedFiber.tag) {\n        case HostHoistable:\n\n        case HostSingleton:\n\n        case HostComponent: {\n          if (!offscreenSubtreeWasHidden) {\n            safelyDetachRef(deletedFiber, nearestMountedAncestor);\n          } // Intentional fallthrough to next branch\n        }\n\n        case HostText: {\n          // We only need to remove the nearest host child. Set the host parent\n          // to `null` on the stack to indicate that nested children don't\n          // need to be removed.\n          {\n            var _prevHostParent = hostParent;\n            var _prevHostParentIsContainer = hostParentIsContainer;\n            hostParent = null;\n            recursivelyTraverseDeletionEffects(\n              finishedRoot,\n              nearestMountedAncestor,\n              deletedFiber\n            );\n            hostParent = _prevHostParent;\n            hostParentIsContainer = _prevHostParentIsContainer;\n\n            if (hostParent !== null) {\n              // Now that all the child effects have unmounted, we can remove the\n              // node from the tree.\n              if (hostParentIsContainer) {\n                removeChildFromContainer(hostParent, deletedFiber.stateNode);\n              } else {\n                removeChild(hostParent, deletedFiber.stateNode);\n              }\n            }\n          }\n\n          return;\n        }\n\n        case DehydratedFragment: {\n          // Delete the dehydrated suspense boundary and all of its content.\n\n          {\n            if (hostParent !== null) {\n              if (hostParentIsContainer) {\n                clearSuspenseBoundaryFromContainer();\n              } else {\n                clearSuspenseBoundary();\n              }\n            }\n          }\n\n          return;\n        }\n\n        case HostPortal: {\n          {\n            // When we go into a portal, it becomes the parent to remove from.\n            var _prevHostParent2 = hostParent;\n            var _prevHostParentIsContainer2 = hostParentIsContainer;\n            hostParent = deletedFiber.stateNode.containerInfo;\n            hostParentIsContainer = true;\n            recursivelyTraverseDeletionEffects(\n              finishedRoot,\n              nearestMountedAncestor,\n              deletedFiber\n            );\n            hostParent = _prevHostParent2;\n            hostParentIsContainer = _prevHostParentIsContainer2;\n          }\n\n          return;\n        }\n\n        case FunctionComponent:\n        case ForwardRef:\n        case MemoComponent:\n        case SimpleMemoComponent: {\n          if (!offscreenSubtreeWasHidden) {\n            var updateQueue = deletedFiber.updateQueue;\n\n            if (updateQueue !== null) {\n              var lastEffect = updateQueue.lastEffect;\n\n              if (lastEffect !== null) {\n                var firstEffect = lastEffect.next;\n                var effect = firstEffect;\n\n                do {\n                  var tag = effect.tag;\n                  var inst = effect.inst;\n                  var destroy = inst.destroy;\n\n                  if (destroy !== undefined) {\n                    if ((tag & Insertion) !== NoFlags) {\n                      inst.destroy = undefined;\n                      safelyCallDestroy(\n                        deletedFiber,\n                        nearestMountedAncestor,\n                        destroy\n                      );\n                    } else if ((tag & Layout) !== NoFlags) {\n                      if (shouldProfile(deletedFiber)) {\n                        startLayoutEffectTimer();\n                        inst.destroy = undefined;\n                        safelyCallDestroy(\n                          deletedFiber,\n                          nearestMountedAncestor,\n                          destroy\n                        );\n                        recordLayoutEffectDuration(deletedFiber);\n                      } else {\n                        inst.destroy = undefined;\n                        safelyCallDestroy(\n                          deletedFiber,\n                          nearestMountedAncestor,\n                          destroy\n                        );\n                      }\n                    }\n                  }\n\n                  effect = effect.next;\n                } while (effect !== firstEffect);\n              }\n            }\n          }\n\n          recursivelyTraverseDeletionEffects(\n            finishedRoot,\n            nearestMountedAncestor,\n            deletedFiber\n          );\n          return;\n        }\n\n        case ClassComponent: {\n          if (!offscreenSubtreeWasHidden) {\n            safelyDetachRef(deletedFiber, nearestMountedAncestor);\n            var instance = deletedFiber.stateNode;\n\n            if (typeof instance.componentWillUnmount === \"function\") {\n              safelyCallComponentWillUnmount(\n                deletedFiber,\n                nearestMountedAncestor,\n                instance\n              );\n            }\n          }\n\n          recursivelyTraverseDeletionEffects(\n            finishedRoot,\n            nearestMountedAncestor,\n            deletedFiber\n          );\n          return;\n        }\n\n        case ScopeComponent: {\n          recursivelyTraverseDeletionEffects(\n            finishedRoot,\n            nearestMountedAncestor,\n            deletedFiber\n          );\n          return;\n        }\n\n        case OffscreenComponent: {\n          safelyDetachRef(deletedFiber, nearestMountedAncestor);\n\n          if (deletedFiber.mode & ConcurrentMode) {\n            // If this offscreen component is hidden, we already unmounted it. Before\n            // deleting the children, track that it's already unmounted so that we\n            // don't attempt to unmount the effects again.\n            // TODO: If the tree is hidden, in most cases we should be able to skip\n            // over the nested children entirely. An exception is we haven't yet found\n            // the topmost host node to delete, which we already track on the stack.\n            // But the other case is portals, which need to be detached no matter how\n            // deeply they are nested. We should use a subtree flag to track whether a\n            // subtree includes a nested portal.\n            var prevOffscreenSubtreeWasHidden = offscreenSubtreeWasHidden;\n            offscreenSubtreeWasHidden =\n              prevOffscreenSubtreeWasHidden ||\n              deletedFiber.memoizedState !== null;\n            recursivelyTraverseDeletionEffects(\n              finishedRoot,\n              nearestMountedAncestor,\n              deletedFiber\n            );\n            offscreenSubtreeWasHidden = prevOffscreenSubtreeWasHidden;\n          } else {\n            recursivelyTraverseDeletionEffects(\n              finishedRoot,\n              nearestMountedAncestor,\n              deletedFiber\n            );\n          }\n\n          break;\n        }\n\n        default: {\n          recursivelyTraverseDeletionEffects(\n            finishedRoot,\n            nearestMountedAncestor,\n            deletedFiber\n          );\n          return;\n        }\n      }\n    }\n\n    function commitSuspenseCallback(finishedWork) {}\n\n    function getRetryCache(finishedWork) {\n      // TODO: Unify the interface for the retry cache so we don't have to switch\n      // on the tag like this.\n      switch (finishedWork.tag) {\n        case SuspenseComponent:\n        case SuspenseListComponent: {\n          var retryCache = finishedWork.stateNode;\n\n          if (retryCache === null) {\n            retryCache = finishedWork.stateNode = new PossiblyWeakSet();\n          }\n\n          return retryCache;\n        }\n\n        case OffscreenComponent: {\n          var instance = finishedWork.stateNode;\n          var _retryCache = instance._retryCache;\n\n          if (_retryCache === null) {\n            _retryCache = instance._retryCache = new PossiblyWeakSet();\n          }\n\n          return _retryCache;\n        }\n\n        default: {\n          throw new Error(\n            \"Unexpected Suspense handler tag (\" +\n              finishedWork.tag +\n              \"). This is a \" +\n              \"bug in React.\"\n          );\n        }\n      }\n    }\n\n    function detachOffscreenInstance(instance) {\n      var fiber = instance._current;\n\n      if (fiber === null) {\n        throw new Error(\n          \"Calling Offscreen.detach before instance handle has been set.\"\n        );\n      }\n\n      if ((instance._pendingVisibility & OffscreenDetached) !== NoFlags$1) {\n        // The instance is already detached, this is a noop.\n        return;\n      } // TODO: There is an opportunity to optimise this by not entering commit phase\n      // and unmounting effects directly.\n\n      var root = enqueueConcurrentRenderForLane(fiber, SyncLane);\n\n      if (root !== null) {\n        instance._pendingVisibility |= OffscreenDetached;\n        scheduleUpdateOnFiber(root, fiber, SyncLane);\n      }\n    }\n    function attachOffscreenInstance(instance) {\n      var fiber = instance._current;\n\n      if (fiber === null) {\n        throw new Error(\n          \"Calling Offscreen.detach before instance handle has been set.\"\n        );\n      }\n\n      if ((instance._pendingVisibility & OffscreenDetached) === NoFlags$1) {\n        // The instance is already attached, this is a noop.\n        return;\n      }\n\n      var root = enqueueConcurrentRenderForLane(fiber, SyncLane);\n\n      if (root !== null) {\n        instance._pendingVisibility &= ~OffscreenDetached;\n        scheduleUpdateOnFiber(root, fiber, SyncLane);\n      }\n    }\n\n    function attachSuspenseRetryListeners(finishedWork, wakeables) {\n      // If this boundary just timed out, then it will have a set of wakeables.\n      // For each wakeable, attach a listener so that when it resolves, React\n      // attempts to re-render the boundary in the primary (pre-timeout) state.\n      var retryCache = getRetryCache(finishedWork);\n      wakeables.forEach(function (wakeable) {\n        // Memoize using the boundary fiber to prevent redundant listeners.\n        var retry = resolveRetryWakeable.bind(null, finishedWork, wakeable);\n\n        if (!retryCache.has(wakeable)) {\n          retryCache.add(wakeable);\n\n          {\n            if (isDevToolsPresent) {\n              if (inProgressLanes !== null && inProgressRoot !== null) {\n                // If we have pending work still, associate the original updaters with it.\n                restorePendingUpdaters(inProgressRoot, inProgressLanes);\n              } else {\n                throw Error(\n                  \"Expected finished root and lanes to be set. This is a bug in React.\"\n                );\n              }\n            }\n          }\n\n          wakeable.then(retry, retry);\n        }\n      });\n    } // This function detects when a Suspense boundary goes from visible to hidden.\n    function commitMutationEffects(root, finishedWork, committedLanes) {\n      inProgressLanes = committedLanes;\n      inProgressRoot = root;\n      setCurrentFiber(finishedWork);\n      commitMutationEffectsOnFiber(finishedWork, root);\n      setCurrentFiber(finishedWork);\n      inProgressLanes = null;\n      inProgressRoot = null;\n    }\n\n    function recursivelyTraverseMutationEffects(root, parentFiber, lanes) {\n      // Deletions effects can be scheduled on any fiber type. They need to happen\n      // before the children effects hae fired.\n      var deletions = parentFiber.deletions;\n\n      if (deletions !== null) {\n        for (var i = 0; i < deletions.length; i++) {\n          var childToDelete = deletions[i];\n\n          try {\n            commitDeletionEffects(root, parentFiber, childToDelete);\n          } catch (error) {\n            captureCommitPhaseError(childToDelete, parentFiber, error);\n          }\n        }\n      }\n\n      var prevDebugFiber = getCurrentFiber();\n\n      if (parentFiber.subtreeFlags & MutationMask) {\n        var child = parentFiber.child;\n\n        while (child !== null) {\n          setCurrentFiber(child);\n          commitMutationEffectsOnFiber(child, root);\n          child = child.sibling;\n        }\n      }\n\n      setCurrentFiber(prevDebugFiber);\n    }\n\n    function commitMutationEffectsOnFiber(finishedWork, root, lanes) {\n      var current = finishedWork.alternate;\n      var flags = finishedWork.flags; // The effect flag should be checked *after* we refine the type of fiber,\n      // because the fiber tag is more specific. An exception is any flag related\n      // to reconciliation, because those can be set on all fiber types.\n\n      switch (finishedWork.tag) {\n        case FunctionComponent:\n        case ForwardRef:\n        case MemoComponent:\n        case SimpleMemoComponent: {\n          recursivelyTraverseMutationEffects(root, finishedWork);\n          commitReconciliationEffects(finishedWork);\n\n          if (flags & Update) {\n            try {\n              commitHookEffectListUnmount(\n                Insertion | HasEffect,\n                finishedWork,\n                finishedWork.return\n              );\n              commitHookEffectListMount(Insertion | HasEffect, finishedWork);\n            } catch (error) {\n              captureCommitPhaseError(finishedWork, finishedWork.return, error);\n            } // Layout effects are destroyed during the mutation phase so that all\n            // destroy functions for all fibers are called before any create functions.\n            // This prevents sibling component effects from interfering with each other,\n            // e.g. a destroy function in one component should never override a ref set\n            // by a create function in another component during the same commit.\n\n            if (shouldProfile(finishedWork)) {\n              try {\n                startLayoutEffectTimer();\n                commitHookEffectListUnmount(\n                  Layout | HasEffect,\n                  finishedWork,\n                  finishedWork.return\n                );\n              } catch (error) {\n                captureCommitPhaseError(\n                  finishedWork,\n                  finishedWork.return,\n                  error\n                );\n              }\n\n              recordLayoutEffectDuration(finishedWork);\n            } else {\n              try {\n                commitHookEffectListUnmount(\n                  Layout | HasEffect,\n                  finishedWork,\n                  finishedWork.return\n                );\n              } catch (error) {\n                captureCommitPhaseError(\n                  finishedWork,\n                  finishedWork.return,\n                  error\n                );\n              }\n            }\n          }\n\n          return;\n        }\n\n        case ClassComponent: {\n          recursivelyTraverseMutationEffects(root, finishedWork);\n          commitReconciliationEffects(finishedWork);\n\n          if (flags & Ref) {\n            if (current !== null) {\n              safelyDetachRef(current, current.return);\n            }\n          }\n\n          if (flags & Callback && offscreenSubtreeIsHidden) {\n            var updateQueue = finishedWork.updateQueue;\n\n            if (updateQueue !== null) {\n              deferHiddenCallbacks(updateQueue);\n            }\n          }\n\n          return;\n        }\n\n        case HostHoistable:\n\n        case HostSingleton:\n\n        case HostComponent: {\n          recursivelyTraverseMutationEffects(root, finishedWork);\n          commitReconciliationEffects(finishedWork);\n\n          if (flags & Ref) {\n            if (current !== null) {\n              safelyDetachRef(current, current.return);\n            }\n          }\n\n          {\n            // TODO: ContentReset gets cleared by the children during the commit\n            // phase. This is a refactor hazard because it means we must read\n            // flags the flags after `commitReconciliationEffects` has already run;\n            // the order matters. We should refactor so that ContentReset does not\n            // rely on mutating the flag during commit. Like by setting a flag\n            // during the render phase instead.\n            if (finishedWork.flags & ContentReset) {\n              var instance = finishedWork.stateNode;\n\n              try {\n                resetTextContent(instance);\n              } catch (error) {\n                captureCommitPhaseError(\n                  finishedWork,\n                  finishedWork.return,\n                  error\n                );\n              }\n            }\n\n            if (flags & Update) {\n              var _instance2 = finishedWork.stateNode;\n\n              if (_instance2 != null) {\n                // Commit the work prepared earlier.\n                var newProps = finishedWork.memoizedProps; // For hydration we reuse the update path but we treat the oldProps\n                // as the newProps. The updatePayload will contain the real change in\n                // this case.\n\n                var oldProps =\n                  current !== null ? current.memoizedProps : newProps;\n                var type = finishedWork.type; // TODO: Type the updateQueue to be specific to host components.\n\n                var _updatePayload = finishedWork.updateQueue;\n                finishedWork.updateQueue = null;\n\n                try {\n                  commitUpdate(\n                    _instance2,\n                    _updatePayload,\n                    type,\n                    oldProps,\n                    newProps,\n                    finishedWork\n                  );\n                } catch (error) {\n                  captureCommitPhaseError(\n                    finishedWork,\n                    finishedWork.return,\n                    error\n                  );\n                }\n              }\n            }\n          }\n\n          return;\n        }\n\n        case HostText: {\n          recursivelyTraverseMutationEffects(root, finishedWork);\n          commitReconciliationEffects(finishedWork);\n\n          if (flags & Update) {\n            {\n              if (finishedWork.stateNode === null) {\n                throw new Error(\n                  \"This should have a text node initialized. This error is likely \" +\n                    \"caused by a bug in React. Please file an issue.\"\n                );\n              }\n\n              var textInstance = finishedWork.stateNode;\n              var newText = finishedWork.memoizedProps; // For hydration we reuse the update path but we treat the oldProps\n              // as the newProps. The updatePayload will contain the real change in\n              // this case.\n\n              var oldText = current !== null ? current.memoizedProps : newText;\n\n              try {\n                commitTextUpdate(textInstance, oldText, newText);\n              } catch (error) {\n                captureCommitPhaseError(\n                  finishedWork,\n                  finishedWork.return,\n                  error\n                );\n              }\n            }\n          }\n\n          return;\n        }\n\n        case HostRoot: {\n          {\n            recursivelyTraverseMutationEffects(root, finishedWork);\n            commitReconciliationEffects(finishedWork);\n          }\n\n          return;\n        }\n\n        case HostPortal: {\n          {\n            recursivelyTraverseMutationEffects(root, finishedWork);\n            commitReconciliationEffects(finishedWork);\n          }\n\n          return;\n        }\n\n        case SuspenseComponent: {\n          recursivelyTraverseMutationEffects(root, finishedWork);\n          commitReconciliationEffects(finishedWork); // TODO: We should mark a flag on the Suspense fiber itself, rather than\n          // relying on the Offscreen fiber having a flag also being marked. The\n          // reason is that this offscreen fiber might not be part of the work-in-\n          // progress tree! It could have been reused from a previous render. This\n          // doesn't lead to incorrect behavior because we don't rely on the flag\n          // check alone; we also compare the states explicitly below. But for\n          // modeling purposes, we _should_ be able to rely on the flag check alone.\n          // So this is a bit fragile.\n          //\n          // Also, all this logic could/should move to the passive phase so it\n          // doesn't block paint.\n\n          var offscreenFiber = finishedWork.child;\n\n          if (offscreenFiber.flags & Visibility) {\n            // Throttle the appearance and disappearance of Suspense fallbacks.\n            var isShowingFallback = finishedWork.memoizedState !== null;\n            var wasShowingFallback =\n              current !== null && current.memoizedState !== null;\n\n            {\n              if (isShowingFallback && !wasShowingFallback) {\n                // Old behavior. Only mark when a fallback appears, not when\n                // it disappears.\n                markCommitTimeOfFallback();\n              }\n            }\n          }\n\n          if (flags & Update) {\n            try {\n              commitSuspenseCallback(finishedWork);\n            } catch (error) {\n              captureCommitPhaseError(finishedWork, finishedWork.return, error);\n            }\n\n            var retryQueue = finishedWork.updateQueue;\n\n            if (retryQueue !== null) {\n              finishedWork.updateQueue = null;\n              attachSuspenseRetryListeners(finishedWork, retryQueue);\n            }\n          }\n\n          return;\n        }\n\n        case OffscreenComponent: {\n          if (flags & Ref) {\n            if (current !== null) {\n              safelyDetachRef(current, current.return);\n            }\n          }\n\n          var newState = finishedWork.memoizedState;\n          var isHidden = newState !== null;\n          var wasHidden = current !== null && current.memoizedState !== null;\n\n          if (finishedWork.mode & ConcurrentMode) {\n            // Before committing the children, track on the stack whether this\n            // offscreen subtree was already hidden, so that we don't unmount the\n            // effects again.\n            var prevOffscreenSubtreeIsHidden = offscreenSubtreeIsHidden;\n            var prevOffscreenSubtreeWasHidden = offscreenSubtreeWasHidden;\n            offscreenSubtreeIsHidden = prevOffscreenSubtreeIsHidden || isHidden;\n            offscreenSubtreeWasHidden =\n              prevOffscreenSubtreeWasHidden || wasHidden;\n            recursivelyTraverseMutationEffects(root, finishedWork);\n            offscreenSubtreeWasHidden = prevOffscreenSubtreeWasHidden;\n            offscreenSubtreeIsHidden = prevOffscreenSubtreeIsHidden;\n          } else {\n            recursivelyTraverseMutationEffects(root, finishedWork);\n          }\n\n          commitReconciliationEffects(finishedWork);\n          var offscreenInstance = finishedWork.stateNode; // TODO: Add explicit effect flag to set _current.\n\n          offscreenInstance._current = finishedWork; // Offscreen stores pending changes to visibility in `_pendingVisibility`. This is\n          // to support batching of `attach` and `detach` calls.\n\n          offscreenInstance._visibility &= ~OffscreenDetached;\n          offscreenInstance._visibility |=\n            offscreenInstance._pendingVisibility & OffscreenDetached;\n\n          if (flags & Visibility) {\n            // Track the current state on the Offscreen instance so we can\n            // read it during an event\n            if (isHidden) {\n              offscreenInstance._visibility &= ~OffscreenVisible;\n            } else {\n              offscreenInstance._visibility |= OffscreenVisible;\n            }\n\n            if (isHidden) {\n              var isUpdate = current !== null;\n              var wasHiddenByAncestorOffscreen =\n                offscreenSubtreeIsHidden || offscreenSubtreeWasHidden; // Only trigger disapper layout effects if:\n              //   - This is an update, not first mount.\n              //   - This Offscreen was not hidden before.\n              //   - Ancestor Offscreen was not hidden in previous commit.\n\n              if (isUpdate && !wasHidden && !wasHiddenByAncestorOffscreen) {\n                if ((finishedWork.mode & ConcurrentMode) !== NoMode) {\n                  // Disappear the layout effects of all the children\n                  recursivelyTraverseDisappearLayoutEffects(finishedWork);\n                }\n              }\n            } // Offscreen with manual mode manages visibility manually.\n\n            if (!isOffscreenManual(finishedWork)) {\n              // TODO: This needs to run whenever there's an insertion or update\n              // inside a hidden Offscreen tree.\n              hideOrUnhideAllChildren(finishedWork, isHidden);\n            }\n          } // TODO: Move to passive phase\n\n          if (flags & Update) {\n            var offscreenQueue = finishedWork.updateQueue;\n\n            if (offscreenQueue !== null) {\n              var _retryQueue = offscreenQueue.retryQueue;\n\n              if (_retryQueue !== null) {\n                offscreenQueue.retryQueue = null;\n                attachSuspenseRetryListeners(finishedWork, _retryQueue);\n              }\n            }\n          }\n\n          return;\n        }\n\n        case SuspenseListComponent: {\n          recursivelyTraverseMutationEffects(root, finishedWork);\n          commitReconciliationEffects(finishedWork);\n\n          if (flags & Update) {\n            var _retryQueue2 = finishedWork.updateQueue;\n\n            if (_retryQueue2 !== null) {\n              finishedWork.updateQueue = null;\n              attachSuspenseRetryListeners(finishedWork, _retryQueue2);\n            }\n          }\n\n          return;\n        }\n\n        case ScopeComponent: {\n          return;\n        }\n\n        default: {\n          recursivelyTraverseMutationEffects(root, finishedWork);\n          commitReconciliationEffects(finishedWork);\n          return;\n        }\n      }\n    }\n\n    function commitReconciliationEffects(finishedWork) {\n      // Placement effects (insertions, reorders) can be scheduled on any fiber\n      // type. They needs to happen after the children effects have fired, but\n      // before the effects on this fiber have fired.\n      var flags = finishedWork.flags;\n\n      if (flags & Placement) {\n        try {\n          commitPlacement(finishedWork);\n        } catch (error) {\n          captureCommitPhaseError(finishedWork, finishedWork.return, error);\n        } // Clear the \"placement\" from effect tag so that we know that this is\n        // inserted, before any life-cycles like componentDidMount gets called.\n        // TODO: findDOMNode doesn't rely on this any more but isMounted does\n        // and isMounted is deprecated anyway so we should be able to kill this.\n\n        finishedWork.flags &= ~Placement;\n      }\n\n      if (flags & Hydrating) {\n        finishedWork.flags &= ~Hydrating;\n      }\n    }\n\n    function commitLayoutEffects(finishedWork, root, committedLanes) {\n      inProgressLanes = committedLanes;\n      inProgressRoot = root;\n      var current = finishedWork.alternate;\n      commitLayoutEffectOnFiber(root, current, finishedWork);\n      inProgressLanes = null;\n      inProgressRoot = null;\n    }\n\n    function recursivelyTraverseLayoutEffects(root, parentFiber, lanes) {\n      var prevDebugFiber = getCurrentFiber();\n\n      if (parentFiber.subtreeFlags & LayoutMask) {\n        var child = parentFiber.child;\n\n        while (child !== null) {\n          setCurrentFiber(child);\n          var current = child.alternate;\n          commitLayoutEffectOnFiber(root, current, child);\n          child = child.sibling;\n        }\n      }\n\n      setCurrentFiber(prevDebugFiber);\n    }\n\n    function disappearLayoutEffects(finishedWork) {\n      switch (finishedWork.tag) {\n        case FunctionComponent:\n        case ForwardRef:\n        case MemoComponent:\n        case SimpleMemoComponent: {\n          // TODO (Offscreen) Check: flags & LayoutStatic\n          if (shouldProfile(finishedWork)) {\n            try {\n              startLayoutEffectTimer();\n              commitHookEffectListUnmount(\n                Layout,\n                finishedWork,\n                finishedWork.return\n              );\n            } finally {\n              recordLayoutEffectDuration(finishedWork);\n            }\n          } else {\n            commitHookEffectListUnmount(\n              Layout,\n              finishedWork,\n              finishedWork.return\n            );\n          }\n\n          recursivelyTraverseDisappearLayoutEffects(finishedWork);\n          break;\n        }\n\n        case ClassComponent: {\n          // TODO (Offscreen) Check: flags & RefStatic\n          safelyDetachRef(finishedWork, finishedWork.return);\n          var instance = finishedWork.stateNode;\n\n          if (typeof instance.componentWillUnmount === \"function\") {\n            safelyCallComponentWillUnmount(\n              finishedWork,\n              finishedWork.return,\n              instance\n            );\n          }\n\n          recursivelyTraverseDisappearLayoutEffects(finishedWork);\n          break;\n        }\n\n        case HostHoistable:\n        case HostSingleton:\n        case HostComponent: {\n          // TODO (Offscreen) Check: flags & RefStatic\n          safelyDetachRef(finishedWork, finishedWork.return);\n          recursivelyTraverseDisappearLayoutEffects(finishedWork);\n          break;\n        }\n\n        case OffscreenComponent: {\n          // TODO (Offscreen) Check: flags & RefStatic\n          safelyDetachRef(finishedWork, finishedWork.return);\n          var isHidden = finishedWork.memoizedState !== null;\n\n          if (isHidden);\n          else {\n            recursivelyTraverseDisappearLayoutEffects(finishedWork);\n          }\n\n          break;\n        }\n\n        default: {\n          recursivelyTraverseDisappearLayoutEffects(finishedWork);\n          break;\n        }\n      }\n    }\n\n    function recursivelyTraverseDisappearLayoutEffects(parentFiber) {\n      // TODO (Offscreen) Check: flags & (RefStatic | LayoutStatic)\n      var child = parentFiber.child;\n\n      while (child !== null) {\n        disappearLayoutEffects(child);\n        child = child.sibling;\n      }\n    }\n\n    function reappearLayoutEffects(\n      finishedRoot,\n      current,\n      finishedWork, // This function visits both newly finished work and nodes that were re-used\n      // from a previously committed tree. We cannot check non-static flags if the\n      // node was reused.\n      includeWorkInProgressEffects\n    ) {\n      // Turn on layout effects in a tree that previously disappeared.\n      var flags = finishedWork.flags;\n\n      switch (finishedWork.tag) {\n        case FunctionComponent:\n        case ForwardRef:\n        case SimpleMemoComponent: {\n          recursivelyTraverseReappearLayoutEffects(\n            finishedRoot,\n            finishedWork,\n            includeWorkInProgressEffects\n          ); // TODO: Check flags & LayoutStatic\n\n          commitHookLayoutEffects(finishedWork, Layout);\n          break;\n        }\n\n        case ClassComponent: {\n          recursivelyTraverseReappearLayoutEffects(\n            finishedRoot,\n            finishedWork,\n            includeWorkInProgressEffects\n          ); // TODO: Check for LayoutStatic flag\n\n          var instance = finishedWork.stateNode;\n\n          if (typeof instance.componentDidMount === \"function\") {\n            try {\n              instance.componentDidMount();\n            } catch (error) {\n              captureCommitPhaseError(finishedWork, finishedWork.return, error);\n            }\n          } // Commit any callbacks that would have fired while the component\n          // was hidden.\n\n          var updateQueue = finishedWork.updateQueue;\n\n          if (updateQueue !== null) {\n            commitHiddenCallbacks(updateQueue, instance);\n          } // If this is newly finished work, check for setState callbacks\n\n          if (includeWorkInProgressEffects && flags & Callback) {\n            commitClassCallbacks(finishedWork);\n          } // TODO: Check flags & RefStatic\n\n          safelyAttachRef(finishedWork, finishedWork.return);\n          break;\n        }\n        // Unlike commitLayoutEffectsOnFiber, we don't need to handle HostRoot\n        // because this function only visits nodes that are inside an\n        // Offscreen fiber.\n        // case HostRoot: {\n        //  ...\n        // }\n\n        case HostHoistable:\n        case HostSingleton:\n        case HostComponent: {\n          recursivelyTraverseReappearLayoutEffects(\n            finishedRoot,\n            finishedWork,\n            includeWorkInProgressEffects\n          ); // Renderers may schedule work to be done after host components are mounted\n          // (eg DOM renderer may schedule auto-focus for inputs and form controls).\n          // These effects should only be committed when components are first mounted,\n          // aka when there is no current/alternate.\n\n          if (\n            includeWorkInProgressEffects &&\n            current === null &&\n            flags & Update\n          ) {\n            commitHostComponentMount(finishedWork);\n          } // TODO: Check flags & Ref\n\n          safelyAttachRef(finishedWork, finishedWork.return);\n          break;\n        }\n\n        case Profiler: {\n          recursivelyTraverseReappearLayoutEffects(\n            finishedRoot,\n            finishedWork,\n            includeWorkInProgressEffects\n          ); // TODO: Figure out how Profiler updates should work with Offscreen\n\n          if (includeWorkInProgressEffects && flags & Update) {\n            commitProfilerUpdate(finishedWork, current);\n          }\n\n          break;\n        }\n\n        case SuspenseComponent: {\n          recursivelyTraverseReappearLayoutEffects(\n            finishedRoot,\n            finishedWork,\n            includeWorkInProgressEffects\n          ); // TODO: Figure out how Suspense hydration callbacks should work\n\n          break;\n        }\n\n        case OffscreenComponent: {\n          var offscreenState = finishedWork.memoizedState;\n          var isHidden = offscreenState !== null;\n\n          if (isHidden);\n          else {\n            recursivelyTraverseReappearLayoutEffects(\n              finishedRoot,\n              finishedWork,\n              includeWorkInProgressEffects\n            );\n          } // TODO: Check flags & Ref\n\n          safelyAttachRef(finishedWork, finishedWork.return);\n          break;\n        }\n\n        default: {\n          recursivelyTraverseReappearLayoutEffects(\n            finishedRoot,\n            finishedWork,\n            includeWorkInProgressEffects\n          );\n          break;\n        }\n      }\n    }\n\n    function recursivelyTraverseReappearLayoutEffects(\n      finishedRoot,\n      parentFiber,\n      includeWorkInProgressEffects\n    ) {\n      // This function visits both newly finished work and nodes that were re-used\n      // from a previously committed tree. We cannot check non-static flags if the\n      // node was reused.\n      var childShouldIncludeWorkInProgressEffects =\n        includeWorkInProgressEffects &&\n        (parentFiber.subtreeFlags & LayoutMask) !== NoFlags$1; // TODO (Offscreen) Check: flags & (RefStatic | LayoutStatic)\n\n      var prevDebugFiber = getCurrentFiber();\n      var child = parentFiber.child;\n\n      while (child !== null) {\n        var current = child.alternate;\n        reappearLayoutEffects(\n          finishedRoot,\n          current,\n          child,\n          childShouldIncludeWorkInProgressEffects\n        );\n        child = child.sibling;\n      }\n\n      setCurrentFiber(prevDebugFiber);\n    }\n\n    function commitHookPassiveMountEffects(finishedWork, hookFlags) {\n      if (shouldProfile(finishedWork)) {\n        startPassiveEffectTimer();\n\n        try {\n          commitHookEffectListMount(hookFlags, finishedWork);\n        } catch (error) {\n          captureCommitPhaseError(finishedWork, finishedWork.return, error);\n        }\n\n        recordPassiveEffectDuration(finishedWork);\n      } else {\n        try {\n          commitHookEffectListMount(hookFlags, finishedWork);\n        } catch (error) {\n          captureCommitPhaseError(finishedWork, finishedWork.return, error);\n        }\n      }\n    }\n\n    function commitPassiveMountEffects(\n      root,\n      finishedWork,\n      committedLanes,\n      committedTransitions\n    ) {\n      setCurrentFiber(finishedWork);\n      commitPassiveMountOnFiber(root, finishedWork);\n      resetCurrentFiber();\n    }\n\n    function recursivelyTraversePassiveMountEffects(\n      root,\n      parentFiber,\n      committedLanes,\n      committedTransitions\n    ) {\n      var prevDebugFiber = getCurrentFiber();\n\n      if (parentFiber.subtreeFlags & PassiveMask) {\n        var child = parentFiber.child;\n\n        while (child !== null) {\n          setCurrentFiber(child);\n          commitPassiveMountOnFiber(root, child);\n          child = child.sibling;\n        }\n      }\n\n      setCurrentFiber(prevDebugFiber);\n    }\n\n    function commitPassiveMountOnFiber(\n      finishedRoot,\n      finishedWork,\n      committedLanes,\n      committedTransitions\n    ) {\n      // When updating this function, also update reconnectPassiveEffects, which does\n      // most of the same things when an offscreen tree goes from hidden -> visible,\n      // or when toggling effects inside a hidden tree.\n      var flags = finishedWork.flags;\n\n      switch (finishedWork.tag) {\n        case FunctionComponent:\n        case ForwardRef:\n        case SimpleMemoComponent: {\n          recursivelyTraversePassiveMountEffects(finishedRoot, finishedWork);\n\n          if (flags & Passive$1) {\n            commitHookPassiveMountEffects(finishedWork, Passive | HasEffect);\n          }\n\n          break;\n        }\n\n        case HostRoot: {\n          recursivelyTraversePassiveMountEffects(finishedRoot, finishedWork);\n\n          break;\n        }\n\n        case LegacyHiddenComponent: {\n          break;\n        }\n\n        case OffscreenComponent: {\n          // TODO: Pass `current` as argument to this function\n          var _instance3 = finishedWork.stateNode;\n          var nextState = finishedWork.memoizedState;\n          var isHidden = nextState !== null;\n\n          if (isHidden) {\n            if (_instance3._visibility & OffscreenPassiveEffectsConnected) {\n              // The effects are currently connected. Update them.\n              recursivelyTraversePassiveMountEffects(\n                finishedRoot,\n                finishedWork\n              );\n            } else {\n              if (finishedWork.mode & ConcurrentMode);\n              else {\n                // Legacy Mode: Fire the effects even if the tree is hidden.\n                _instance3._visibility |= OffscreenPassiveEffectsConnected;\n                recursivelyTraversePassiveMountEffects(\n                  finishedRoot,\n                  finishedWork\n                );\n              }\n            }\n          } else {\n            // Tree is visible\n            if (_instance3._visibility & OffscreenPassiveEffectsConnected) {\n              // The effects are currently connected. Update them.\n              recursivelyTraversePassiveMountEffects(\n                finishedRoot,\n                finishedWork\n              );\n            } else {\n              // The effects are currently disconnected. Reconnect them, while also\n              // firing effects inside newly mounted trees. This also applies to\n              // the initial render.\n              _instance3._visibility |= OffscreenPassiveEffectsConnected;\n              recursivelyTraverseReconnectPassiveEffects(\n                finishedRoot,\n                finishedWork\n              );\n            }\n          }\n\n          break;\n        }\n\n        case CacheComponent: {\n          recursivelyTraversePassiveMountEffects(finishedRoot, finishedWork);\n\n          break;\n        }\n\n        case TracingMarkerComponent:\n\n        default: {\n          recursivelyTraversePassiveMountEffects(finishedRoot, finishedWork);\n          break;\n        }\n      }\n    }\n\n    function recursivelyTraverseReconnectPassiveEffects(\n      finishedRoot,\n      parentFiber,\n      committedLanes,\n      committedTransitions,\n      includeWorkInProgressEffects\n    ) {\n      var prevDebugFiber = getCurrentFiber();\n      var child = parentFiber.child;\n\n      while (child !== null) {\n        reconnectPassiveEffects(finishedRoot, child);\n        child = child.sibling;\n      }\n\n      setCurrentFiber(prevDebugFiber);\n    }\n\n    function reconnectPassiveEffects(\n      finishedRoot,\n      finishedWork,\n      committedLanes,\n      committedTransitions, // This function visits both newly finished work and nodes that were re-used\n      // from a previously committed tree. We cannot check non-static flags if the\n      // node was reused.\n      includeWorkInProgressEffects\n    ) {\n      switch (finishedWork.tag) {\n        case FunctionComponent:\n        case ForwardRef:\n        case SimpleMemoComponent: {\n          recursivelyTraverseReconnectPassiveEffects(\n            finishedRoot,\n            finishedWork\n          ); // TODO: Check for PassiveStatic flag\n\n          commitHookPassiveMountEffects(finishedWork, Passive);\n          break;\n        }\n        // Unlike commitPassiveMountOnFiber, we don't need to handle HostRoot\n        // because this function only visits nodes that are inside an\n        // Offscreen fiber.\n        // case HostRoot: {\n        //  ...\n        // }\n\n        case LegacyHiddenComponent: {\n          break;\n        }\n\n        case OffscreenComponent: {\n          var _instance4 = finishedWork.stateNode;\n          var nextState = finishedWork.memoizedState;\n          var isHidden = nextState !== null;\n\n          if (isHidden) {\n            if (_instance4._visibility & OffscreenPassiveEffectsConnected) {\n              // The effects are currently connected. Update them.\n              recursivelyTraverseReconnectPassiveEffects(\n                finishedRoot,\n                finishedWork\n              );\n            } else {\n              if (finishedWork.mode & ConcurrentMode);\n              else {\n                // Legacy Mode: Fire the effects even if the tree is hidden.\n                _instance4._visibility |= OffscreenPassiveEffectsConnected;\n                recursivelyTraverseReconnectPassiveEffects(\n                  finishedRoot,\n                  finishedWork\n                );\n              }\n            }\n          } else {\n            // Tree is visible\n            // Since we're already inside a reconnecting tree, it doesn't matter\n            // whether the effects are currently connected. In either case, we'll\n            // continue traversing the tree and firing all the effects.\n            //\n            // We do need to set the \"connected\" flag on the instance, though.\n            _instance4._visibility |= OffscreenPassiveEffectsConnected;\n            recursivelyTraverseReconnectPassiveEffects(\n              finishedRoot,\n              finishedWork\n            );\n          }\n\n          break;\n        }\n\n        case CacheComponent: {\n          recursivelyTraverseReconnectPassiveEffects(\n            finishedRoot,\n            finishedWork\n          );\n\n          break;\n        }\n\n        case TracingMarkerComponent:\n\n        default: {\n          recursivelyTraverseReconnectPassiveEffects(\n            finishedRoot,\n            finishedWork\n          );\n          break;\n        }\n      }\n    }\n\n    function commitPassiveUnmountEffects(finishedWork) {\n      setCurrentFiber(finishedWork);\n      commitPassiveUnmountOnFiber(finishedWork);\n      resetCurrentFiber();\n    } // If we're inside a brand new tree, or a tree that was already visible, then we\n    // should only suspend host components that have a ShouldSuspendCommit flag.\n    // Components without it haven't changed since the last commit, so we can skip\n    // over those.\n    //\n    // When we enter a tree that is being revealed (going from hidden -> visible),\n    // we need to suspend _any_ component that _may_ suspend. Even if they're\n    // already in the \"current\" tree. Because their visibility has changed, the\n    // browser may not have prerendered them yet. So we check the MaySuspendCommit\n    // flag instead.\n\n    var suspenseyCommitFlag = ShouldSuspendCommit;\n    function accumulateSuspenseyCommit(finishedWork) {\n      accumulateSuspenseyCommitOnFiber(finishedWork);\n    }\n\n    function recursivelyAccumulateSuspenseyCommit(parentFiber) {\n      if (parentFiber.subtreeFlags & suspenseyCommitFlag) {\n        var child = parentFiber.child;\n\n        while (child !== null) {\n          accumulateSuspenseyCommitOnFiber(child);\n          child = child.sibling;\n        }\n      }\n    }\n\n    function accumulateSuspenseyCommitOnFiber(fiber) {\n      switch (fiber.tag) {\n        case HostHoistable: {\n          recursivelyAccumulateSuspenseyCommit(fiber);\n\n          if (fiber.flags & suspenseyCommitFlag) {\n            if (fiber.memoizedState !== null) {\n              suspendResource();\n            }\n          }\n\n          break;\n        }\n\n        case HostComponent: {\n          recursivelyAccumulateSuspenseyCommit(fiber);\n\n          break;\n        }\n\n        case HostRoot:\n        case HostPortal: {\n          {\n            recursivelyAccumulateSuspenseyCommit(fiber);\n          }\n\n          break;\n        }\n\n        case OffscreenComponent: {\n          var isHidden = fiber.memoizedState !== null;\n\n          if (isHidden);\n          else {\n            var current = fiber.alternate;\n            var wasHidden = current !== null && current.memoizedState !== null;\n\n            if (wasHidden) {\n              // This tree is being revealed. Visit all newly visible suspensey\n              // instances, even if they're in the current tree.\n              var prevFlags = suspenseyCommitFlag;\n              suspenseyCommitFlag = MaySuspendCommit;\n              recursivelyAccumulateSuspenseyCommit(fiber);\n              suspenseyCommitFlag = prevFlags;\n            } else {\n              recursivelyAccumulateSuspenseyCommit(fiber);\n            }\n          }\n\n          break;\n        }\n\n        default: {\n          recursivelyAccumulateSuspenseyCommit(fiber);\n        }\n      }\n    }\n\n    function detachAlternateSiblings(parentFiber) {\n      // A fiber was deleted from this parent fiber, but it's still part of the\n      // previous (alternate) parent fiber's list of children. Because children\n      // are a linked list, an earlier sibling that's still alive will be\n      // connected to the deleted fiber via its `alternate`:\n      //\n      //   live fiber --alternate--> previous live fiber --sibling--> deleted\n      //   fiber\n      //\n      // We can't disconnect `alternate` on nodes that haven't been deleted yet,\n      // but we can disconnect the `sibling` and `child` pointers.\n      var previousFiber = parentFiber.alternate;\n\n      if (previousFiber !== null) {\n        var detachedChild = previousFiber.child;\n\n        if (detachedChild !== null) {\n          previousFiber.child = null;\n\n          do {\n            // $FlowFixMe[incompatible-use] found when upgrading Flow\n            var detachedSibling = detachedChild.sibling; // $FlowFixMe[incompatible-use] found when upgrading Flow\n\n            detachedChild.sibling = null;\n            detachedChild = detachedSibling;\n          } while (detachedChild !== null);\n        }\n      }\n    }\n\n    function commitHookPassiveUnmountEffects(\n      finishedWork,\n      nearestMountedAncestor,\n      hookFlags\n    ) {\n      if (shouldProfile(finishedWork)) {\n        startPassiveEffectTimer();\n        commitHookEffectListUnmount(\n          hookFlags,\n          finishedWork,\n          nearestMountedAncestor\n        );\n        recordPassiveEffectDuration(finishedWork);\n      } else {\n        commitHookEffectListUnmount(\n          hookFlags,\n          finishedWork,\n          nearestMountedAncestor\n        );\n      }\n    }\n\n    function recursivelyTraversePassiveUnmountEffects(parentFiber) {\n      // Deletions effects can be scheduled on any fiber type. They need to happen\n      // before the children effects have fired.\n      var deletions = parentFiber.deletions;\n\n      if ((parentFiber.flags & ChildDeletion) !== NoFlags$1) {\n        if (deletions !== null) {\n          for (var i = 0; i < deletions.length; i++) {\n            var childToDelete = deletions[i]; // TODO: Convert this to use recursion\n\n            nextEffect = childToDelete;\n            commitPassiveUnmountEffectsInsideOfDeletedTree_begin(\n              childToDelete,\n              parentFiber\n            );\n          }\n        }\n\n        detachAlternateSiblings(parentFiber);\n      }\n\n      var prevDebugFiber = getCurrentFiber(); // TODO: Split PassiveMask into separate masks for mount and unmount?\n\n      if (parentFiber.subtreeFlags & PassiveMask) {\n        var child = parentFiber.child;\n\n        while (child !== null) {\n          setCurrentFiber(child);\n          commitPassiveUnmountOnFiber(child);\n          child = child.sibling;\n        }\n      }\n\n      setCurrentFiber(prevDebugFiber);\n    }\n\n    function commitPassiveUnmountOnFiber(finishedWork) {\n      switch (finishedWork.tag) {\n        case FunctionComponent:\n        case ForwardRef:\n        case SimpleMemoComponent: {\n          recursivelyTraversePassiveUnmountEffects(finishedWork);\n\n          if (finishedWork.flags & Passive$1) {\n            commitHookPassiveUnmountEffects(\n              finishedWork,\n              finishedWork.return,\n              Passive | HasEffect\n            );\n          }\n\n          break;\n        }\n\n        case OffscreenComponent: {\n          var instance = finishedWork.stateNode;\n          var nextState = finishedWork.memoizedState;\n          var isHidden = nextState !== null;\n\n          if (\n            isHidden &&\n            instance._visibility & OffscreenPassiveEffectsConnected && // For backwards compatibility, don't unmount when a tree suspends. In\n            // the future we may change this to unmount after a delay.\n            (finishedWork.return === null ||\n              finishedWork.return.tag !== SuspenseComponent)\n          ) {\n            // The effects are currently connected. Disconnect them.\n            // TODO: Add option or heuristic to delay before disconnecting the\n            // effects. Then if the tree reappears before the delay has elapsed, we\n            // can skip toggling the effects entirely.\n            instance._visibility &= ~OffscreenPassiveEffectsConnected;\n            recursivelyTraverseDisconnectPassiveEffects(finishedWork);\n          } else {\n            recursivelyTraversePassiveUnmountEffects(finishedWork);\n          }\n\n          break;\n        }\n\n        default: {\n          recursivelyTraversePassiveUnmountEffects(finishedWork);\n          break;\n        }\n      }\n    }\n\n    function recursivelyTraverseDisconnectPassiveEffects(parentFiber) {\n      // Deletions effects can be scheduled on any fiber type. They need to happen\n      // before the children effects have fired.\n      var deletions = parentFiber.deletions;\n\n      if ((parentFiber.flags & ChildDeletion) !== NoFlags$1) {\n        if (deletions !== null) {\n          for (var i = 0; i < deletions.length; i++) {\n            var childToDelete = deletions[i]; // TODO: Convert this to use recursion\n\n            nextEffect = childToDelete;\n            commitPassiveUnmountEffectsInsideOfDeletedTree_begin(\n              childToDelete,\n              parentFiber\n            );\n          }\n        }\n\n        detachAlternateSiblings(parentFiber);\n      }\n\n      var prevDebugFiber = getCurrentFiber(); // TODO: Check PassiveStatic flag\n\n      var child = parentFiber.child;\n\n      while (child !== null) {\n        setCurrentFiber(child);\n        disconnectPassiveEffect(child);\n        child = child.sibling;\n      }\n\n      setCurrentFiber(prevDebugFiber);\n    }\n\n    function disconnectPassiveEffect(finishedWork) {\n      switch (finishedWork.tag) {\n        case FunctionComponent:\n        case ForwardRef:\n        case SimpleMemoComponent: {\n          // TODO: Check PassiveStatic flag\n          commitHookPassiveUnmountEffects(\n            finishedWork,\n            finishedWork.return,\n            Passive\n          ); // When disconnecting passive effects, we fire the effects in the same\n          // order as during a deletiong: parent before child\n\n          recursivelyTraverseDisconnectPassiveEffects(finishedWork);\n          break;\n        }\n\n        case OffscreenComponent: {\n          var instance = finishedWork.stateNode;\n\n          if (instance._visibility & OffscreenPassiveEffectsConnected) {\n            instance._visibility &= ~OffscreenPassiveEffectsConnected;\n            recursivelyTraverseDisconnectPassiveEffects(finishedWork);\n          }\n\n          break;\n        }\n\n        default: {\n          recursivelyTraverseDisconnectPassiveEffects(finishedWork);\n          break;\n        }\n      }\n    }\n\n    function commitPassiveUnmountEffectsInsideOfDeletedTree_begin(\n      deletedSubtreeRoot,\n      nearestMountedAncestor\n    ) {\n      while (nextEffect !== null) {\n        var fiber = nextEffect; // Deletion effects fire in parent -> child order\n        // TODO: Check if fiber has a PassiveStatic flag\n\n        setCurrentFiber(fiber);\n        commitPassiveUnmountInsideDeletedTreeOnFiber(\n          fiber,\n          nearestMountedAncestor\n        );\n        resetCurrentFiber();\n        var child = fiber.child; // TODO: Only traverse subtree if it has a PassiveStatic flag.\n\n        if (child !== null) {\n          child.return = fiber;\n          nextEffect = child;\n        } else {\n          commitPassiveUnmountEffectsInsideOfDeletedTree_complete(\n            deletedSubtreeRoot\n          );\n        }\n      }\n    }\n\n    function commitPassiveUnmountEffectsInsideOfDeletedTree_complete(\n      deletedSubtreeRoot\n    ) {\n      while (nextEffect !== null) {\n        var fiber = nextEffect;\n        var sibling = fiber.sibling;\n        var returnFiber = fiber.return; // Recursively traverse the entire deleted tree and clean up fiber fields.\n        // This is more aggressive than ideal, and the long term goal is to only\n        // have to detach the deleted tree at the root.\n\n        detachFiberAfterEffects(fiber);\n\n        if (fiber === deletedSubtreeRoot) {\n          nextEffect = null;\n          return;\n        }\n\n        if (sibling !== null) {\n          sibling.return = returnFiber;\n          nextEffect = sibling;\n          return;\n        }\n\n        nextEffect = returnFiber;\n      }\n    }\n\n    function commitPassiveUnmountInsideDeletedTreeOnFiber(\n      current,\n      nearestMountedAncestor\n    ) {\n      switch (current.tag) {\n        case FunctionComponent:\n        case ForwardRef:\n        case SimpleMemoComponent: {\n          commitHookPassiveUnmountEffects(\n            current,\n            nearestMountedAncestor,\n            Passive\n          );\n          break;\n        }\n      }\n    }\n\n    function invokeLayoutEffectMountInDEV(fiber) {\n      {\n        // We don't need to re-check StrictEffectsMode here.\n        // This function is only called if that check has already passed.\n        switch (fiber.tag) {\n          case FunctionComponent:\n          case ForwardRef:\n          case SimpleMemoComponent: {\n            try {\n              commitHookEffectListMount(Layout | HasEffect, fiber);\n            } catch (error) {\n              captureCommitPhaseError(fiber, fiber.return, error);\n            }\n\n            break;\n          }\n\n          case ClassComponent: {\n            var instance = fiber.stateNode;\n\n            if (typeof instance.componentDidMount === \"function\") {\n              try {\n                instance.componentDidMount();\n              } catch (error) {\n                captureCommitPhaseError(fiber, fiber.return, error);\n              }\n            }\n\n            break;\n          }\n        }\n      }\n    }\n\n    function invokePassiveEffectMountInDEV(fiber) {\n      {\n        // We don't need to re-check StrictEffectsMode here.\n        // This function is only called if that check has already passed.\n        switch (fiber.tag) {\n          case FunctionComponent:\n          case ForwardRef:\n          case SimpleMemoComponent: {\n            try {\n              commitHookEffectListMount(Passive | HasEffect, fiber);\n            } catch (error) {\n              captureCommitPhaseError(fiber, fiber.return, error);\n            }\n\n            break;\n          }\n        }\n      }\n    }\n\n    function invokeLayoutEffectUnmountInDEV(fiber) {\n      {\n        // We don't need to re-check StrictEffectsMode here.\n        // This function is only called if that check has already passed.\n        switch (fiber.tag) {\n          case FunctionComponent:\n          case ForwardRef:\n          case SimpleMemoComponent: {\n            try {\n              commitHookEffectListUnmount(\n                Layout | HasEffect,\n                fiber,\n                fiber.return\n              );\n            } catch (error) {\n              captureCommitPhaseError(fiber, fiber.return, error);\n            }\n\n            break;\n          }\n\n          case ClassComponent: {\n            var instance = fiber.stateNode;\n\n            if (typeof instance.componentWillUnmount === \"function\") {\n              safelyCallComponentWillUnmount(fiber, fiber.return, instance);\n            }\n\n            break;\n          }\n        }\n      }\n    }\n\n    function invokePassiveEffectUnmountInDEV(fiber) {\n      {\n        // We don't need to re-check StrictEffectsMode here.\n        // This function is only called if that check has already passed.\n        switch (fiber.tag) {\n          case FunctionComponent:\n          case ForwardRef:\n          case SimpleMemoComponent: {\n            try {\n              commitHookEffectListUnmount(\n                Passive | HasEffect,\n                fiber,\n                fiber.return\n              );\n            } catch (error) {\n              captureCommitPhaseError(fiber, fiber.return, error);\n            }\n          }\n        }\n      }\n    }\n\n    if (typeof Symbol === \"function\" && Symbol.for) {\n      var symbolFor = Symbol.for;\n      symbolFor(\"selector.component\");\n      symbolFor(\"selector.has_pseudo_class\");\n      symbolFor(\"selector.role\");\n      symbolFor(\"selector.test_id\");\n      symbolFor(\"selector.text\");\n    }\n\n    var ReactCurrentActQueue$1 = ReactSharedInternals.ReactCurrentActQueue;\n    function isLegacyActEnvironment(fiber) {\n      {\n        // Legacy mode. We preserve the behavior of React 17's act. It assumes an\n        // act environment whenever `jest` is defined, but you can still turn off\n        // spurious warnings by setting IS_REACT_ACT_ENVIRONMENT explicitly\n        // to false.\n        var isReactActEnvironmentGlobal = // $FlowFixMe[cannot-resolve-name] Flow doesn't know about IS_REACT_ACT_ENVIRONMENT global\n          typeof IS_REACT_ACT_ENVIRONMENT !== \"undefined\" // $FlowFixMe[cannot-resolve-name]\n            ? IS_REACT_ACT_ENVIRONMENT\n            : undefined; // $FlowFixMe[cannot-resolve-name] - Flow doesn't know about jest\n\n        var jestIsDefined = typeof jest !== \"undefined\";\n        return jestIsDefined && isReactActEnvironmentGlobal !== false;\n      }\n    }\n    function isConcurrentActEnvironment() {\n      {\n        var isReactActEnvironmentGlobal = // $FlowFixMe[cannot-resolve-name] Flow doesn't know about IS_REACT_ACT_ENVIRONMENT global\n          typeof IS_REACT_ACT_ENVIRONMENT !== \"undefined\" // $FlowFixMe[cannot-resolve-name]\n            ? IS_REACT_ACT_ENVIRONMENT\n            : undefined;\n\n        if (\n          !isReactActEnvironmentGlobal &&\n          ReactCurrentActQueue$1.current !== null\n        ) {\n          // TODO: Include link to relevant documentation page.\n          error(\n            \"The current testing environment is not configured to support \" +\n              \"act(...)\"\n          );\n        }\n\n        return isReactActEnvironmentGlobal;\n      }\n    }\n\n    var PossiblyWeakMap = typeof WeakMap === \"function\" ? WeakMap : Map;\n    var ReactCurrentDispatcher = ReactSharedInternals.ReactCurrentDispatcher,\n      ReactCurrentOwner$1 = ReactSharedInternals.ReactCurrentOwner,\n      ReactCurrentBatchConfig = ReactSharedInternals.ReactCurrentBatchConfig,\n      ReactCurrentActQueue = ReactSharedInternals.ReactCurrentActQueue;\n    var NoContext =\n      /*             */\n      0;\n    var BatchedContext =\n      /*               */\n      1;\n    var RenderContext =\n      /*         */\n      2;\n    var CommitContext =\n      /*         */\n      4;\n    var RootInProgress = 0;\n    var RootFatalErrored = 1;\n    var RootErrored = 2;\n    var RootSuspended = 3;\n    var RootSuspendedWithDelay = 4;\n    var RootCompleted = 5;\n    var RootDidNotComplete = 6; // Describes where we are in the React execution stack\n\n    var executionContext = NoContext; // The root we're working on\n\n    var workInProgressRoot = null; // The fiber we're working on\n\n    var workInProgress = null; // The lanes we're rendering\n\n    var workInProgressRootRenderLanes = NoLanes;\n    var NotSuspended = 0;\n    var SuspendedOnError = 1;\n    var SuspendedOnData = 2;\n    var SuspendedOnImmediate = 3;\n    var SuspendedOnInstance = 4;\n    var SuspendedOnInstanceAndReadyToContinue = 5;\n    var SuspendedOnDeprecatedThrowPromise = 6;\n    var SuspendedAndReadyToContinue = 7;\n    var SuspendedOnHydration = 8; // When this is true, the work-in-progress fiber just suspended (or errored) and\n    // we've yet to unwind the stack. In some cases, we may yield to the main thread\n    // after this happens. If the fiber is pinged before we resume, we can retry\n    // immediately instead of unwinding the stack.\n\n    var workInProgressSuspendedReason = NotSuspended;\n    var workInProgressThrownValue = null; // Whether a ping listener was attached during this render. This is slightly\n    // different that whether something suspended, because we don't add multiple\n    // listeners to a promise we've already seen (per root and lane).\n\n    var workInProgressRootDidAttachPingListener = false; // A contextual version of workInProgressRootRenderLanes. It is a superset of\n    // the lanes that we started working on at the root. When we enter a subtree\n    // that is currently hidden, we add the lanes that would have committed if\n    // the hidden tree hadn't been deferred. This is modified by the\n    // HiddenContext module.\n    //\n    // Most things in the work loop should deal with workInProgressRootRenderLanes.\n    // Most things in begin/complete phases should deal with entangledRenderLanes.\n\n    var entangledRenderLanes = NoLanes; // Whether to root completed, errored, suspended, etc.\n\n    var workInProgressRootExitStatus = RootInProgress; // A fatal error, if one is thrown\n\n    var workInProgressRootFatalError = null; // The work left over by components that were visited during this render. Only\n    // includes unprocessed updates, not work in bailed out children.\n\n    var workInProgressRootSkippedLanes = NoLanes; // Lanes that were updated (in an interleaved event) during this render.\n\n    var workInProgressRootInterleavedUpdatedLanes = NoLanes; // Lanes that were updated during the render phase (*not* an interleaved event).\n\n    var workInProgressRootPingedLanes = NoLanes; // If this lane scheduled deferred work, this is the lane of the deferred task.\n\n    var workInProgressDeferredLane = NoLane; // Errors that are thrown during the render phase.\n\n    var workInProgressRootConcurrentErrors = null; // These are errors that we recovered from without surfacing them to the UI.\n    // We will log them once the tree commits.\n\n    var workInProgressRootRecoverableErrors = null; // The most recent time we either committed a fallback, or when a fallback was\n    // filled in with the resolved UI. This lets us throttle the appearance of new\n    // content as it streams in, to minimize jank.\n    // TODO: Think of a better name for this variable?\n\n    var globalMostRecentFallbackTime = 0;\n    var FALLBACK_THROTTLE_MS = 300; // The absolute time for when we should start giving up on rendering\n    // more and prefer CPU suspense heuristics instead.\n\n    var workInProgressRootRenderTargetTime = Infinity; // How long a render is supposed to take before we start following CPU\n    // suspense heuristics and opt out of rendering more content.\n\n    var RENDER_TIMEOUT_MS = 500;\n    var workInProgressTransitions = null;\n\n    function resetRenderTimer() {\n      workInProgressRootRenderTargetTime = now$1() + RENDER_TIMEOUT_MS;\n    }\n\n    function getRenderTargetTime() {\n      return workInProgressRootRenderTargetTime;\n    }\n    var hasUncaughtError = false;\n    var firstUncaughtError = null;\n    var legacyErrorBoundariesThatAlreadyFailed = null; // Only used when enableProfilerNestedUpdateScheduledHook is true;\n    var rootDoesHavePassiveEffects = false;\n    var rootWithPendingPassiveEffects = null;\n    var pendingPassiveEffectsLanes = NoLanes;\n    var pendingPassiveProfilerEffects = [];\n\n    var NESTED_UPDATE_LIMIT = 50;\n    var nestedUpdateCount = 0;\n    var rootWithNestedUpdates = null;\n    var isFlushingPassiveEffects = false;\n    var didScheduleUpdateDuringPassiveEffects = false;\n    var NESTED_PASSIVE_UPDATE_LIMIT = 50;\n    var nestedPassiveUpdateCount = 0;\n    var rootWithPassiveNestedUpdates = null;\n    var isRunningInsertionEffect = false;\n    function getWorkInProgressRoot() {\n      return workInProgressRoot;\n    }\n    function getWorkInProgressRootRenderLanes() {\n      return workInProgressRootRenderLanes;\n    }\n    function isWorkLoopSuspendedOnData() {\n      return workInProgressSuspendedReason === SuspendedOnData;\n    }\n    function requestUpdateLane(fiber) {\n      // Special cases\n      var mode = fiber.mode;\n\n      if ((mode & ConcurrentMode) === NoMode) {\n        return SyncLane;\n      } else if (\n        (executionContext & RenderContext) !== NoContext &&\n        workInProgressRootRenderLanes !== NoLanes\n      ) {\n        // This is a render phase update. These are not officially supported. The\n        // old behavior is to give this the same \"thread\" (lanes) as\n        // whatever is currently rendering. So if you call `setState` on a component\n        // that happens later in the same render, it will flush. Ideally, we want to\n        // remove the special case and treat them as if they came from an\n        // interleaved event. Regardless, this pattern is not officially supported.\n        // This behavior is only a fallback. The flag only exists until we can roll\n        // out the setState warning, since existing code might accidentally rely on\n        // the current behavior.\n        return pickArbitraryLane(workInProgressRootRenderLanes);\n      }\n\n      var transition = requestCurrentTransition();\n\n      if (transition !== null) {\n        {\n          var batchConfigTransition = ReactCurrentBatchConfig.transition;\n\n          if (!batchConfigTransition._updatedFibers) {\n            batchConfigTransition._updatedFibers = new Set();\n          }\n\n          batchConfigTransition._updatedFibers.add(fiber);\n        }\n\n        var actionScopeLane = peekEntangledActionLane();\n        return actionScopeLane !== NoLane // We're inside an async action scope. Reuse the same lane.\n          ? actionScopeLane // We may or may not be inside an async action scope. If we are, this\n          : // is the first update in that scope. Either way, we need to get a\n            // fresh transition lane.\n            requestTransitionLane();\n      } // Updates originating inside certain React methods, like flushSync, have\n      // their priority set by tracking it with a context variable.\n      //\n      // The opaque type returned by the host config is internally a lane, so we can\n      // use that directly.\n      // TODO: Move this type conversion to the event priority module.\n\n      var updateLane = getCurrentUpdatePriority();\n\n      if (updateLane !== NoLane) {\n        return updateLane;\n      } // This update originated outside React. Ask the host environment for an\n      // appropriate priority, based on the type of event.\n      //\n      // The opaque type returned by the host config is internally a lane, so we can\n      // use that directly.\n      // TODO: Move this type conversion to the event priority module.\n\n      var eventLane = getCurrentEventPriority();\n      return eventLane;\n    }\n\n    function requestRetryLane(fiber) {\n      // This is a fork of `requestUpdateLane` designed specifically for Suspense\n      // \"retries\" — a special update that attempts to flip a Suspense boundary\n      // from its placeholder state to its primary/resolved state.\n      // Special cases\n      var mode = fiber.mode;\n\n      if ((mode & ConcurrentMode) === NoMode) {\n        return SyncLane;\n      }\n\n      return claimNextRetryLane();\n    }\n\n    function requestDeferredLane() {\n      if (workInProgressDeferredLane === NoLane) {\n        // If there are multiple useDeferredValue hooks in the same render, the\n        // tasks that they spawn should all be batched together, so they should all\n        // receive the same lane.\n        // Check the priority of the current render to decide the priority of the\n        // deferred task.\n        // OffscreenLane is used for prerendering, but we also use OffscreenLane\n        // for incremental hydration. It's given the lowest priority because the\n        // initial HTML is the same as the final UI. But useDeferredValue during\n        // hydration is an exception — we need to upgrade the UI to the final\n        // value. So if we're currently hydrating, we treat it like a transition.\n        var isPrerendering =\n          includesSomeLane(workInProgressRootRenderLanes, OffscreenLane) &&\n          !getIsHydrating();\n\n        if (isPrerendering) {\n          // There's only one OffscreenLane, so if it contains deferred work, we\n          // should just reschedule using the same lane.\n          workInProgressDeferredLane = OffscreenLane;\n        } else {\n          // Everything else is spawned as a transition.\n          workInProgressDeferredLane = claimNextTransitionLane();\n        }\n      } // Mark the parent Suspense boundary so it knows to spawn the deferred lane.\n\n      var suspenseHandler = getSuspenseHandler();\n\n      if (suspenseHandler !== null) {\n        // TODO: As an optimization, we shouldn't entangle the lanes at the root; we\n        // can entangle them using the baseLanes of the Suspense boundary instead.\n        // We only need to do something special if there's no Suspense boundary.\n        suspenseHandler.flags |= DidDefer;\n      }\n\n      return workInProgressDeferredLane;\n    }\n    function peekDeferredLane() {\n      return workInProgressDeferredLane;\n    }\n    function scheduleUpdateOnFiber(root, fiber, lane) {\n      {\n        if (isRunningInsertionEffect) {\n          error(\"useInsertionEffect must not schedule updates.\");\n        }\n      }\n\n      {\n        if (isFlushingPassiveEffects) {\n          didScheduleUpdateDuringPassiveEffects = true;\n        }\n      } // Check if the work loop is currently suspended and waiting for data to\n      // finish loading.\n\n      if (\n        // Suspended render phase\n        (root === workInProgressRoot &&\n          workInProgressSuspendedReason === SuspendedOnData) || // Suspended commit phase\n        root.cancelPendingCommit !== null\n      ) {\n        // The incoming update might unblock the current render. Interrupt the\n        // current attempt and restart from the top.\n        prepareFreshStack(root, NoLanes);\n        markRootSuspended(\n          root,\n          workInProgressRootRenderLanes,\n          workInProgressDeferredLane\n        );\n      } // Mark that the root has a pending update.\n\n      markRootUpdated(root, lane);\n\n      if (\n        (executionContext & RenderContext) !== NoLanes &&\n        root === workInProgressRoot\n      ) {\n        // This update was dispatched during the render phase. This is a mistake\n        // if the update originates from user space (with the exception of local\n        // hook updates, which are handled differently and don't reach this\n        // function), but there are some internal React features that use this as\n        // an implementation detail, like selective hydration.\n        warnAboutRenderPhaseUpdatesInDEV(fiber); // Track lanes that were updated during the render phase\n      } else {\n        // This is a normal update, scheduled from outside the render phase. For\n        // example, during an input event.\n        {\n          if (isDevToolsPresent) {\n            addFiberToLanesMap(root, fiber, lane);\n          }\n        }\n\n        warnIfUpdatesNotWrappedWithActDEV(fiber);\n\n        if (root === workInProgressRoot) {\n          // Received an update to a tree that's in the middle of rendering. Mark\n          // that there was an interleaved update work on this root.\n          if ((executionContext & RenderContext) === NoContext) {\n            workInProgressRootInterleavedUpdatedLanes = mergeLanes(\n              workInProgressRootInterleavedUpdatedLanes,\n              lane\n            );\n          }\n\n          if (workInProgressRootExitStatus === RootSuspendedWithDelay) {\n            // The root already suspended with a delay, which means this render\n            // definitely won't finish. Since we have a new update, let's mark it as\n            // suspended now, right before marking the incoming update. This has the\n            // effect of interrupting the current render and switching to the update.\n            // TODO: Make sure this doesn't override pings that happen while we've\n            // already started rendering.\n            markRootSuspended(\n              root,\n              workInProgressRootRenderLanes,\n              workInProgressDeferredLane\n            );\n          }\n        }\n\n        ensureRootIsScheduled(root);\n\n        if (\n          lane === SyncLane &&\n          executionContext === NoContext &&\n          (fiber.mode & ConcurrentMode) === NoMode\n        ) {\n          if (ReactCurrentActQueue.isBatchingLegacy);\n          else {\n            // Flush the synchronous work now, unless we're already working or inside\n            // a batch. This is intentionally inside scheduleUpdateOnFiber instead of\n            // scheduleCallbackForFiber to preserve the ability to schedule a callback\n            // without immediately flushing it. We only do this for user-initiated\n            // updates, to preserve historical behavior of legacy mode.\n            resetRenderTimer();\n            flushSyncWorkOnLegacyRootsOnly();\n          }\n        }\n      }\n    }\n    function isUnsafeClassRenderPhaseUpdate(fiber) {\n      // Check if this is a render phase update. Only called by class components,\n      // which special (deprecated) behavior for UNSAFE_componentWillReceive props.\n      return (executionContext & RenderContext) !== NoContext;\n    } // This is the entry point for every concurrent task, i.e. anything that\n    // goes through Scheduler.\n\n    function performConcurrentWorkOnRoot(root, didTimeout) {\n      {\n        resetNestedUpdateFlag();\n      }\n\n      if ((executionContext & (RenderContext | CommitContext)) !== NoContext) {\n        throw new Error(\"Should not already be working.\");\n      } // Flush any pending passive effects before deciding which lanes to work on,\n      // in case they schedule additional work.\n\n      var originalCallbackNode = root.callbackNode;\n      var didFlushPassiveEffects = flushPassiveEffects();\n\n      if (didFlushPassiveEffects) {\n        // Something in the passive effect phase may have canceled the current task.\n        // Check if the task node for this root was changed.\n        if (root.callbackNode !== originalCallbackNode) {\n          // The current task was canceled. Exit. We don't need to call\n          // `ensureRootIsScheduled` because the check above implies either that\n          // there's a new task, or that there's no remaining work on this root.\n          return null;\n        }\n      } // Determine the next lanes to work on, using the fields stored\n      // on the root.\n      // TODO: This was already computed in the caller. Pass it as an argument.\n\n      var lanes = getNextLanes(\n        root,\n        root === workInProgressRoot ? workInProgressRootRenderLanes : NoLanes\n      );\n\n      if (lanes === NoLanes) {\n        // Defensive coding. This is never expected to happen.\n        return null;\n      } // We disable time-slicing in some cases: if the work has been CPU-bound\n      // for too long (\"expired\" work, to prevent starvation), or we're in\n      // sync-updates-by-default mode.\n      // TODO: We only check `didTimeout` defensively, to account for a Scheduler\n      // bug we're still investigating. Once the bug in Scheduler is fixed,\n      // we can remove this, since we track expiration ourselves.\n\n      var shouldTimeSlice =\n        !includesBlockingLane(root, lanes) &&\n        !includesExpiredLane(root, lanes) &&\n        !didTimeout;\n      var exitStatus = shouldTimeSlice\n        ? renderRootConcurrent(root, lanes)\n        : renderRootSync(root, lanes);\n\n      if (exitStatus !== RootInProgress) {\n        var renderWasConcurrent = shouldTimeSlice;\n\n        do {\n          if (exitStatus === RootDidNotComplete) {\n            // The render unwound without completing the tree. This happens in special\n            // cases where need to exit the current render without producing a\n            // consistent tree or committing.\n            markRootSuspended(root, lanes, NoLane);\n          } else {\n            // The render completed.\n            // Check if this render may have yielded to a concurrent event, and if so,\n            // confirm that any newly rendered stores are consistent.\n            // TODO: It's possible that even a concurrent render may never have yielded\n            // to the main thread, if it was fast enough, or if it expired. We could\n            // skip the consistency check in that case, too.\n            var finishedWork = root.current.alternate;\n\n            if (\n              renderWasConcurrent &&\n              !isRenderConsistentWithExternalStores(finishedWork)\n            ) {\n              // A store was mutated in an interleaved event. Render again,\n              // synchronously, to block further mutations.\n              exitStatus = renderRootSync(root, lanes); // We assume the tree is now consistent because we didn't yield to any\n              // concurrent events.\n\n              renderWasConcurrent = false; // Need to check the exit status again.\n\n              continue;\n            } // Check if something threw\n\n            if (exitStatus === RootErrored) {\n              var originallyAttemptedLanes = lanes;\n              var errorRetryLanes = getLanesToRetrySynchronouslyOnError(\n                root,\n                originallyAttemptedLanes\n              );\n\n              if (errorRetryLanes !== NoLanes) {\n                lanes = errorRetryLanes;\n                exitStatus = recoverFromConcurrentError(\n                  root,\n                  originallyAttemptedLanes,\n                  errorRetryLanes\n                );\n                renderWasConcurrent = false;\n              }\n            }\n\n            if (exitStatus === RootFatalErrored) {\n              var fatalError = workInProgressRootFatalError;\n              prepareFreshStack(root, NoLanes);\n              markRootSuspended(root, lanes, NoLane);\n              ensureRootIsScheduled(root);\n              throw fatalError;\n            } // We now have a consistent tree. The next step is either to commit it,\n            // or, if something suspended, wait to commit it after a timeout.\n\n            root.finishedWork = finishedWork;\n            root.finishedLanes = lanes;\n            finishConcurrentRender(root, exitStatus, finishedWork, lanes);\n          }\n\n          break;\n        } while (true);\n      }\n\n      ensureRootIsScheduled(root);\n      return getContinuationForRoot(root, originalCallbackNode);\n    }\n\n    function recoverFromConcurrentError(\n      root,\n      originallyAttemptedLanes,\n      errorRetryLanes\n    ) {\n      // If an error occurred during hydration, discard server response and fall\n      // back to client side render.\n      // Before rendering again, save the errors from the previous attempt.\n      var errorsFromFirstAttempt = workInProgressRootConcurrentErrors;\n      var wasRootDehydrated = isRootDehydrated(root);\n\n      if (wasRootDehydrated) {\n        // The shell failed to hydrate. Set a flag to force a client rendering\n        // during the next attempt. To do this, we call prepareFreshStack now\n        // to create the root work-in-progress fiber. This is a bit weird in terms\n        // of factoring, because it relies on renderRootSync not calling\n        // prepareFreshStack again in the call below, which happens because the\n        // root and lanes haven't changed.\n        //\n        // TODO: I think what we should do is set ForceClientRender inside\n        // throwException, like we do for nested Suspense boundaries. The reason\n        // it's here instead is so we can switch to the synchronous work loop, too.\n        // Something to consider for a future refactor.\n        var rootWorkInProgress = prepareFreshStack(root, errorRetryLanes);\n        rootWorkInProgress.flags |= ForceClientRender;\n\n        {\n          errorHydratingContainer();\n        }\n      }\n\n      var exitStatus = renderRootSync(root, errorRetryLanes);\n\n      if (exitStatus !== RootErrored) {\n        // Successfully finished rendering on retry\n        if (workInProgressRootDidAttachPingListener && !wasRootDehydrated) {\n          // During the synchronous render, we attached additional ping listeners.\n          // This is highly suggestive of an uncached promise (though it's not the\n          // only reason this would happen). If it was an uncached promise, then\n          // it may have masked a downstream error from ocurring without actually\n          // fixing it. Example:\n          //\n          //    use(Promise.resolve('uncached'))\n          //    throw new Error('Oops!')\n          //\n          // When this happens, there's a conflict between blocking potential\n          // concurrent data races and unwrapping uncached promise values. We\n          // have to choose one or the other. Because the data race recovery is\n          // a last ditch effort, we'll disable it.\n          root.errorRecoveryDisabledLanes = mergeLanes(\n            root.errorRecoveryDisabledLanes,\n            originallyAttemptedLanes\n          ); // Mark the current render as suspended and force it to restart. Once\n          // these lanes finish successfully, we'll re-enable the error recovery\n          // mechanism for subsequent updates.\n\n          workInProgressRootInterleavedUpdatedLanes |= originallyAttemptedLanes;\n          return RootSuspendedWithDelay;\n        } // The errors from the failed first attempt have been recovered. Add\n        // them to the collection of recoverable errors. We'll log them in the\n        // commit phase.\n\n        var errorsFromSecondAttempt = workInProgressRootRecoverableErrors;\n        workInProgressRootRecoverableErrors = errorsFromFirstAttempt; // The errors from the second attempt should be queued after the errors\n        // from the first attempt, to preserve the causal sequence.\n\n        if (errorsFromSecondAttempt !== null) {\n          queueRecoverableErrors(errorsFromSecondAttempt);\n        }\n      }\n\n      return exitStatus;\n    }\n\n    function queueRecoverableErrors(errors) {\n      if (workInProgressRootRecoverableErrors === null) {\n        workInProgressRootRecoverableErrors = errors;\n      } else {\n        // $FlowFixMe[method-unbinding]\n        workInProgressRootRecoverableErrors.push.apply(\n          workInProgressRootRecoverableErrors,\n          errors\n        );\n      }\n    }\n\n    function finishConcurrentRender(root, exitStatus, finishedWork, lanes) {\n      // TODO: The fact that most of these branches are identical suggests that some\n      // of the exit statuses are not best modeled as exit statuses and should be\n      // tracked orthogonally.\n      switch (exitStatus) {\n        case RootInProgress:\n        case RootFatalErrored: {\n          throw new Error(\"Root did not complete. This is a bug in React.\");\n        }\n\n        case RootSuspendedWithDelay: {\n          if (includesOnlyTransitions(lanes)) {\n            // This is a transition, so we should exit without committing a\n            // placeholder and without scheduling a timeout. Delay indefinitely\n            // until we receive more data.\n            markRootSuspended(root, lanes, workInProgressDeferredLane);\n            return;\n          } // Commit the placeholder.\n\n          break;\n        }\n\n        case RootErrored:\n        case RootSuspended:\n        case RootCompleted: {\n          break;\n        }\n\n        default: {\n          throw new Error(\"Unknown root exit status.\");\n        }\n      }\n\n      if (shouldForceFlushFallbacksInDEV()) {\n        // We're inside an `act` scope. Commit immediately.\n        commitRoot(\n          root,\n          workInProgressRootRecoverableErrors,\n          workInProgressTransitions,\n          workInProgressDeferredLane\n        );\n      } else {\n        if (includesOnlyRetries(lanes) && exitStatus === RootSuspended) {\n          // This render only included retries, no updates. Throttle committing\n          // retries so that we don't show too many loading states too quickly.\n          var msUntilTimeout =\n            globalMostRecentFallbackTime + FALLBACK_THROTTLE_MS - now$1(); // Don't bother with a very short suspense time.\n\n          if (msUntilTimeout > 10) {\n            markRootSuspended(root, lanes, workInProgressDeferredLane);\n            var nextLanes = getNextLanes(root, NoLanes);\n\n            if (nextLanes !== NoLanes) {\n              // There's additional work we can do on this root. We might as well\n              // attempt to work on that while we're suspended.\n              return;\n            } // The render is suspended, it hasn't timed out, and there's no\n            // lower priority work to do. Instead of committing the fallback\n            // immediately, wait for more data to arrive.\n            // TODO: Combine retry throttling with Suspensey commits. Right now they\n            // run one after the other.\n\n            root.timeoutHandle = scheduleTimeout(\n              commitRootWhenReady.bind(\n                null,\n                root,\n                finishedWork,\n                workInProgressRootRecoverableErrors,\n                workInProgressTransitions,\n                lanes,\n                workInProgressDeferredLane\n              ),\n              msUntilTimeout\n            );\n            return;\n          }\n        }\n\n        commitRootWhenReady(\n          root,\n          finishedWork,\n          workInProgressRootRecoverableErrors,\n          workInProgressTransitions,\n          lanes,\n          workInProgressDeferredLane\n        );\n      }\n    }\n\n    function commitRootWhenReady(\n      root,\n      finishedWork,\n      recoverableErrors,\n      transitions,\n      lanes,\n      spawnedLane\n    ) {\n      // TODO: Combine retry throttling with Suspensey commits. Right now they run\n      // one after the other.\n      if (includesOnlyNonUrgentLanes(lanes)) {\n        // the suspensey resources. The renderer is responsible for accumulating\n        // all the load events. This all happens in a single synchronous\n        // transaction, so it track state in its own module scope.\n\n        accumulateSuspenseyCommit(finishedWork); // At the end, ask the renderer if it's ready to commit, or if we should\n        // suspend. If it's not ready, it will return a callback to subscribe to\n        // a ready event.\n\n        var schedulePendingCommit = waitForCommitToBeReady();\n\n        if (schedulePendingCommit !== null) {\n          // NOTE: waitForCommitToBeReady returns a subscribe function so that we\n          // only allocate a function if the commit isn't ready yet. The other\n          // pattern would be to always pass a callback to waitForCommitToBeReady.\n          // Not yet ready to commit. Delay the commit until the renderer notifies\n          // us that it's ready. This will be canceled if we start work on the\n          // root again.\n          root.cancelPendingCommit = schedulePendingCommit(\n            commitRoot.bind(null, root, recoverableErrors, transitions)\n          );\n          markRootSuspended(root, lanes, spawnedLane);\n          return;\n        }\n      } // Otherwise, commit immediately.\n\n      commitRoot(root, recoverableErrors, transitions, spawnedLane);\n    }\n\n    function isRenderConsistentWithExternalStores(finishedWork) {\n      // Search the rendered tree for external store reads, and check whether the\n      // stores were mutated in a concurrent event. Intentionally using an iterative\n      // loop instead of recursion so we can exit early.\n      var node = finishedWork;\n\n      while (true) {\n        if (node.flags & StoreConsistency) {\n          var updateQueue = node.updateQueue;\n\n          if (updateQueue !== null) {\n            var checks = updateQueue.stores;\n\n            if (checks !== null) {\n              for (var i = 0; i < checks.length; i++) {\n                var check = checks[i];\n                var getSnapshot = check.getSnapshot;\n                var renderedValue = check.value;\n\n                try {\n                  if (!objectIs(getSnapshot(), renderedValue)) {\n                    // Found an inconsistent store.\n                    return false;\n                  }\n                } catch (error) {\n                  // If `getSnapshot` throws, return `false`. This will schedule\n                  // a re-render, and the error will be rethrown during render.\n                  return false;\n                }\n              }\n            }\n          }\n        }\n\n        var child = node.child;\n\n        if (node.subtreeFlags & StoreConsistency && child !== null) {\n          child.return = node;\n          node = child;\n          continue;\n        }\n\n        if (node === finishedWork) {\n          return true;\n        }\n\n        while (node.sibling === null) {\n          if (node.return === null || node.return === finishedWork) {\n            return true;\n          }\n\n          node = node.return;\n        }\n\n        node.sibling.return = node.return;\n        node = node.sibling;\n      } // Flow doesn't know this is unreachable, but eslint does\n      // eslint-disable-next-line no-unreachable\n\n      return true;\n    }\n\n    function markRootSuspended(root, suspendedLanes, spawnedLane) {\n      // When suspending, we should always exclude lanes that were pinged or (more\n      // rarely, since we try to avoid it) updated during the render phase.\n      // TODO: Lol maybe there's a better way to factor this besides this\n      // obnoxiously named function :)\n      suspendedLanes = removeLanes(\n        suspendedLanes,\n        workInProgressRootPingedLanes\n      );\n      suspendedLanes = removeLanes(\n        suspendedLanes,\n        workInProgressRootInterleavedUpdatedLanes\n      );\n      markRootSuspended$1(root, suspendedLanes, spawnedLane);\n    } // This is the entry point for synchronous tasks that don't go\n    // through Scheduler\n\n    function performSyncWorkOnRoot(root, lanes) {\n      if ((executionContext & (RenderContext | CommitContext)) !== NoContext) {\n        throw new Error(\"Should not already be working.\");\n      }\n\n      var didFlushPassiveEffects = flushPassiveEffects();\n\n      if (didFlushPassiveEffects) {\n        // If passive effects were flushed, exit to the outer work loop in the root\n        // scheduler, so we can recompute the priority.\n        // TODO: We don't actually need this `ensureRootIsScheduled` call because\n        // this path is only reachable if the root is already part of the schedule.\n        // I'm including it only for consistency with the other exit points from\n        // this function. Can address in a subsequent refactor.\n        ensureRootIsScheduled(root);\n        return null;\n      }\n\n      {\n        syncNestedUpdateFlag();\n      }\n\n      var exitStatus = renderRootSync(root, lanes);\n\n      if (root.tag !== LegacyRoot && exitStatus === RootErrored) {\n        // If something threw an error, try rendering one more time. We'll render\n        // synchronously to block concurrent data mutations, and we'll includes\n        // all pending updates are included. If it still fails after the second\n        // attempt, we'll give up and commit the resulting tree.\n        var originallyAttemptedLanes = lanes;\n        var errorRetryLanes = getLanesToRetrySynchronouslyOnError(\n          root,\n          originallyAttemptedLanes\n        );\n\n        if (errorRetryLanes !== NoLanes) {\n          lanes = errorRetryLanes;\n          exitStatus = recoverFromConcurrentError(\n            root,\n            originallyAttemptedLanes,\n            errorRetryLanes\n          );\n        }\n      }\n\n      if (exitStatus === RootFatalErrored) {\n        var fatalError = workInProgressRootFatalError;\n        prepareFreshStack(root, NoLanes);\n        markRootSuspended(root, lanes, NoLane);\n        ensureRootIsScheduled(root);\n        throw fatalError;\n      }\n\n      if (exitStatus === RootDidNotComplete) {\n        // The render unwound without completing the tree. This happens in special\n        // cases where need to exit the current render without producing a\n        // consistent tree or committing.\n        markRootSuspended(root, lanes, workInProgressDeferredLane);\n        ensureRootIsScheduled(root);\n        return null;\n      } // We now have a consistent tree. Because this is a sync render, we\n      // will commit it even if something suspended.\n\n      var finishedWork = root.current.alternate;\n      root.finishedWork = finishedWork;\n      root.finishedLanes = lanes;\n      commitRoot(\n        root,\n        workInProgressRootRecoverableErrors,\n        workInProgressTransitions,\n        workInProgressDeferredLane\n      ); // Before exiting, make sure there's a callback scheduled for the next\n      // pending level.\n\n      ensureRootIsScheduled(root);\n      return null;\n    }\n    function getExecutionContext() {\n      return executionContext;\n    }\n    function batchedUpdates(fn, a) {\n      var prevExecutionContext = executionContext;\n      executionContext |= BatchedContext;\n\n      try {\n        return fn(a);\n      } finally {\n        executionContext = prevExecutionContext; // If there were legacy sync updates, flush them at the end of the outer\n        // most batchedUpdates-like method.\n\n        if (\n          executionContext === NoContext && // Treat `act` as if it's inside `batchedUpdates`, even in legacy mode.\n          !ReactCurrentActQueue.isBatchingLegacy\n        ) {\n          resetRenderTimer();\n          flushSyncWorkOnLegacyRootsOnly();\n        }\n      }\n    }\n    // Warning, this opts-out of checking the function body.\n    // eslint-disable-next-line no-unused-vars\n    // eslint-disable-next-line no-redeclare\n    // eslint-disable-next-line no-redeclare\n\n    function flushSync(fn) {\n      // In legacy mode, we flush pending passive effects at the beginning of the\n      // next event, not at the end of the previous one.\n      if (\n        rootWithPendingPassiveEffects !== null &&\n        rootWithPendingPassiveEffects.tag === LegacyRoot &&\n        (executionContext & (RenderContext | CommitContext)) === NoContext\n      ) {\n        flushPassiveEffects();\n      }\n\n      var prevExecutionContext = executionContext;\n      executionContext |= BatchedContext;\n      var prevTransition = ReactCurrentBatchConfig.transition;\n      var previousPriority = getCurrentUpdatePriority();\n\n      try {\n        ReactCurrentBatchConfig.transition = null;\n        setCurrentUpdatePriority(DiscreteEventPriority);\n\n        if (fn) {\n          return fn();\n        } else {\n          return undefined;\n        }\n      } finally {\n        setCurrentUpdatePriority(previousPriority);\n        ReactCurrentBatchConfig.transition = prevTransition;\n        executionContext = prevExecutionContext; // Flush the immediate callbacks that were scheduled during this batch.\n        // Note that this will happen even if batchedUpdates is higher up\n        // the stack.\n\n        if (\n          (executionContext & (RenderContext | CommitContext)) ===\n          NoContext\n        ) {\n          flushSyncWorkOnAllRoots();\n        }\n      }\n    }\n    // hidden subtree. The stack logic is managed there because that's the only\n    // place that ever modifies it. Which module it lives in doesn't matter for\n    // performance because this function will get inlined regardless\n\n    function setEntangledRenderLanes(newEntangledRenderLanes) {\n      entangledRenderLanes = newEntangledRenderLanes;\n    }\n    function getEntangledRenderLanes() {\n      return entangledRenderLanes;\n    }\n\n    function resetWorkInProgressStack() {\n      if (workInProgress === null) return;\n      var interruptedWork;\n\n      if (workInProgressSuspendedReason === NotSuspended) {\n        // Normal case. Work-in-progress hasn't started yet. Unwind all\n        // its parents.\n        interruptedWork = workInProgress.return;\n      } else {\n        // Work-in-progress is in suspended state. Reset the work loop and unwind\n        // both the suspended fiber and all its parents.\n        resetSuspendedWorkLoopOnUnwind(workInProgress);\n        interruptedWork = workInProgress;\n      }\n\n      while (interruptedWork !== null) {\n        var current = interruptedWork.alternate;\n        unwindInterruptedWork(current, interruptedWork);\n        interruptedWork = interruptedWork.return;\n      }\n\n      workInProgress = null;\n    }\n\n    function prepareFreshStack(root, lanes) {\n      root.finishedWork = null;\n      root.finishedLanes = NoLanes;\n      var timeoutHandle = root.timeoutHandle;\n\n      if (timeoutHandle !== noTimeout) {\n        // The root previous suspended and scheduled a timeout to commit a fallback\n        // state. Now that we have additional work, cancel the timeout.\n        root.timeoutHandle = noTimeout; // $FlowFixMe[incompatible-call] Complains noTimeout is not a TimeoutID, despite the check above\n\n        cancelTimeout(timeoutHandle);\n      }\n\n      var cancelPendingCommit = root.cancelPendingCommit;\n\n      if (cancelPendingCommit !== null) {\n        root.cancelPendingCommit = null;\n        cancelPendingCommit();\n      }\n\n      resetWorkInProgressStack();\n      workInProgressRoot = root;\n      var rootWorkInProgress = createWorkInProgress(root.current, null);\n      workInProgress = rootWorkInProgress;\n      workInProgressRootRenderLanes = lanes;\n      workInProgressSuspendedReason = NotSuspended;\n      workInProgressThrownValue = null;\n      workInProgressRootDidAttachPingListener = false;\n      workInProgressRootExitStatus = RootInProgress;\n      workInProgressRootFatalError = null;\n      workInProgressRootSkippedLanes = NoLanes;\n      workInProgressRootInterleavedUpdatedLanes = NoLanes;\n      workInProgressRootPingedLanes = NoLanes;\n      workInProgressDeferredLane = NoLane;\n      workInProgressRootConcurrentErrors = null;\n      workInProgressRootRecoverableErrors = null; // Get the lanes that are entangled with whatever we're about to render. We\n      // track these separately so we can distinguish the priority of the render\n      // task from the priority of the lanes it is entangled with. For example, a\n      // transition may not be allowed to finish unless it includes the Sync lane,\n      // which is currently suspended. We should be able to render the Transition\n      // and Sync lane in the same batch, but at Transition priority, because the\n      // Sync lane already suspended.\n\n      entangledRenderLanes = getEntangledLanes(root, lanes);\n      finishQueueingConcurrentUpdates();\n\n      {\n        ReactStrictModeWarnings.discardPendingWarnings();\n      }\n\n      return rootWorkInProgress;\n    }\n\n    function resetSuspendedWorkLoopOnUnwind(fiber) {\n      // Reset module-level state that was set during the render phase.\n      resetContextDependencies();\n      resetHooksOnUnwind(fiber);\n      resetChildReconcilerOnUnwind();\n    }\n\n    function handleThrow(root, thrownValue) {\n      // A component threw an exception. Usually this is because it suspended, but\n      // it also includes regular program errors.\n      //\n      // We're either going to unwind the stack to show a Suspense or error\n      // boundary, or we're going to replay the component again. Like after a\n      // promise resolves.\n      //\n      // Until we decide whether we're going to unwind or replay, we should preserve\n      // the current state of the work loop without resetting anything.\n      //\n      // If we do decide to unwind the stack, module-level variables will be reset\n      // in resetSuspendedWorkLoopOnUnwind.\n      // These should be reset immediately because they're only supposed to be set\n      // when React is executing user code.\n      resetHooksAfterThrow();\n      resetCurrentFiber();\n      ReactCurrentOwner$1.current = null;\n\n      if (thrownValue === SuspenseException) {\n        // This is a special type of exception used for Suspense. For historical\n        // reasons, the rest of the Suspense implementation expects the thrown value\n        // to be a thenable, because before `use` existed that was the (unstable)\n        // API for suspending. This implementation detail can change later, once we\n        // deprecate the old API in favor of `use`.\n        thrownValue = getSuspendedThenable();\n        workInProgressSuspendedReason =\n          shouldRemainOnPreviousScreen() && // Check if there are other pending updates that might possibly unblock this\n          // component from suspending. This mirrors the check in\n          // renderDidSuspendDelayIfPossible. We should attempt to unify them somehow.\n          // TODO: Consider unwinding immediately, using the\n          // SuspendedOnHydration mechanism.\n          !includesNonIdleWork(workInProgressRootSkippedLanes) &&\n          !includesNonIdleWork(workInProgressRootInterleavedUpdatedLanes) // Suspend work loop until data resolves\n            ? SuspendedOnData // Don't suspend work loop, except to check if the data has\n            : // immediately resolved (i.e. in a microtask). Otherwise, trigger the\n              // nearest Suspense fallback.\n              SuspendedOnImmediate;\n      } else if (thrownValue === SuspenseyCommitException) {\n        thrownValue = getSuspendedThenable();\n        workInProgressSuspendedReason = SuspendedOnInstance;\n      } else if (thrownValue === SelectiveHydrationException) {\n        // An update flowed into a dehydrated boundary. Before we can apply the\n        // update, we need to finish hydrating. Interrupt the work-in-progress\n        // render so we can restart at the hydration lane.\n        //\n        // The ideal implementation would be able to switch contexts without\n        // unwinding the current stack.\n        //\n        // We could name this something more general but as of now it's the only\n        // case where we think this should happen.\n        workInProgressSuspendedReason = SuspendedOnHydration;\n      } else {\n        // This is a regular error.\n        var isWakeable =\n          thrownValue !== null &&\n          typeof thrownValue === \"object\" &&\n          typeof thrownValue.then === \"function\";\n        workInProgressSuspendedReason = isWakeable // A wakeable object was thrown by a legacy Suspense implementation.\n          ? // This has slightly different behavior than suspending with `use`.\n            SuspendedOnDeprecatedThrowPromise // This is a regular error. If something earlier in the component already\n          : // suspended, we must clear the thenable state to unblock the work loop.\n            SuspendedOnError;\n      }\n\n      workInProgressThrownValue = thrownValue;\n      var erroredWork = workInProgress;\n\n      if (erroredWork === null) {\n        // This is a fatal error\n        workInProgressRootExitStatus = RootFatalErrored;\n        workInProgressRootFatalError = thrownValue;\n        return;\n      }\n\n      if (erroredWork.mode & ProfileMode) {\n        // Record the time spent rendering before an error was thrown. This\n        // avoids inaccurate Profiler durations in the case of a\n        // suspended render.\n        stopProfilerTimerIfRunningAndRecordDelta(erroredWork, true);\n      }\n    }\n\n    function shouldRemainOnPreviousScreen() {\n      // This is asking whether it's better to suspend the transition and remain\n      // on the previous screen, versus showing a fallback as soon as possible. It\n      // takes into account both the priority of render and also whether showing a\n      // fallback would produce a desirable user experience.\n      var handler = getSuspenseHandler();\n\n      if (handler === null) {\n        // There's no Suspense boundary that can provide a fallback. We have no\n        // choice but to remain on the previous screen.\n        // NOTE: We do this even for sync updates, for lack of any better option. In\n        // the future, we may change how we handle this, like by putting the whole\n        // root into a \"detached\" mode.\n        return true;\n      } // TODO: Once `use` has fully replaced the `throw promise` pattern, we should\n      // be able to remove the equivalent check in finishConcurrentRender, and rely\n      // just on this one.\n\n      if (includesOnlyTransitions(workInProgressRootRenderLanes)) {\n        if (getShellBoundary() === null) {\n          // We're rendering inside the \"shell\" of the app. Activating the nearest\n          // fallback would cause visible content to disappear. It's better to\n          // suspend the transition and remain on the previous screen.\n          return true;\n        } else {\n          // We're rendering content that wasn't part of the previous screen.\n          // Rather than block the transition, it's better to show a fallback as\n          // soon as possible. The appearance of any nested fallbacks will be\n          // throttled to avoid jank.\n          return false;\n        }\n      }\n\n      if (\n        includesOnlyRetries(workInProgressRootRenderLanes) || // In this context, an OffscreenLane counts as a Retry\n        // TODO: It's become increasingly clear that Retries and Offscreen are\n        // deeply connected. They probably can be unified further.\n        includesSomeLane(workInProgressRootRenderLanes, OffscreenLane)\n      ) {\n        // During a retry, we can suspend rendering if the nearest Suspense boundary\n        // is the boundary of the \"shell\", because we're guaranteed not to block\n        // any new content from appearing.\n        //\n        // The reason we must check if this is a retry is because it guarantees\n        // that suspending the work loop won't block an actual update, because\n        // retries don't \"update\" anything; they fill in fallbacks that were left\n        // behind by a previous transition.\n        return handler === getShellBoundary();\n      } // For all other Lanes besides Transitions and Retries, we should not wait\n      // for the data to load.\n\n      return false;\n    }\n\n    function pushDispatcher(container) {\n      var prevDispatcher = ReactCurrentDispatcher.current;\n      ReactCurrentDispatcher.current = ContextOnlyDispatcher;\n\n      if (prevDispatcher === null) {\n        // The React isomorphic package does not include a default dispatcher.\n        // Instead the first renderer will lazily attach one, in order to give\n        // nicer error messages.\n        return ContextOnlyDispatcher;\n      } else {\n        return prevDispatcher;\n      }\n    }\n\n    function popDispatcher(prevDispatcher) {\n      ReactCurrentDispatcher.current = prevDispatcher;\n    }\n\n    function markCommitTimeOfFallback() {\n      globalMostRecentFallbackTime = now$1();\n    }\n    function markSkippedUpdateLanes(lane) {\n      workInProgressRootSkippedLanes = mergeLanes(\n        lane,\n        workInProgressRootSkippedLanes\n      );\n    }\n    function renderDidSuspend() {\n      if (workInProgressRootExitStatus === RootInProgress) {\n        workInProgressRootExitStatus = RootSuspended;\n      }\n    }\n    function renderDidSuspendDelayIfPossible() {\n      workInProgressRootExitStatus = RootSuspendedWithDelay; // Check if there are updates that we skipped tree that might have unblocked\n      // this render.\n\n      if (\n        (includesNonIdleWork(workInProgressRootSkippedLanes) ||\n          includesNonIdleWork(workInProgressRootInterleavedUpdatedLanes)) &&\n        workInProgressRoot !== null\n      ) {\n        // Mark the current render as suspended so that we switch to working on\n        // the updates that were skipped. Usually we only suspend at the end of\n        // the render phase.\n        // TODO: We should probably always mark the root as suspended immediately\n        // (inside this function), since by suspending at the end of the render\n        // phase introduces a potential mistake where we suspend lanes that were\n        // pinged or updated while we were rendering.\n        // TODO: Consider unwinding immediately, using the\n        // SuspendedOnHydration mechanism.\n        markRootSuspended(\n          workInProgressRoot,\n          workInProgressRootRenderLanes,\n          workInProgressDeferredLane\n        );\n      }\n    }\n    function renderDidError(error) {\n      if (workInProgressRootExitStatus !== RootSuspendedWithDelay) {\n        workInProgressRootExitStatus = RootErrored;\n      }\n\n      if (workInProgressRootConcurrentErrors === null) {\n        workInProgressRootConcurrentErrors = [error];\n      } else {\n        workInProgressRootConcurrentErrors.push(error);\n      }\n    } // Called during render to determine if anything has suspended.\n    // Returns false if we're not sure.\n\n    function renderHasNotSuspendedYet() {\n      // If something errored or completed, we can't really be sure,\n      // so those are false.\n      return workInProgressRootExitStatus === RootInProgress;\n    } // TODO: Over time, this function and renderRootConcurrent have become more\n    // and more similar. Not sure it makes sense to maintain forked paths. Consider\n    // unifying them again.\n\n    function renderRootSync(root, lanes) {\n      var prevExecutionContext = executionContext;\n      executionContext |= RenderContext;\n      var prevDispatcher = pushDispatcher();\n      // and prepare a fresh one. Otherwise we'll continue where we left off.\n\n      if (\n        workInProgressRoot !== root ||\n        workInProgressRootRenderLanes !== lanes\n      ) {\n        {\n          if (isDevToolsPresent) {\n            var memoizedUpdaters = root.memoizedUpdaters;\n\n            if (memoizedUpdaters.size > 0) {\n              restorePendingUpdaters(root, workInProgressRootRenderLanes);\n              memoizedUpdaters.clear();\n            } // At this point, move Fibers that scheduled the upcoming work from the Map to the Set.\n            // If we bailout on this work, we'll move them back (like above).\n            // It's important to move them now in case the work spawns more work at the same priority with different updaters.\n            // That way we can keep the current update and future updates separate.\n\n            movePendingFibersToMemoized(root, lanes);\n          }\n        }\n\n        workInProgressTransitions = getTransitionsForLanes();\n        prepareFreshStack(root, lanes);\n      }\n\n      var didSuspendInShell = false;\n\n      outer: do {\n        try {\n          if (\n            workInProgressSuspendedReason !== NotSuspended &&\n            workInProgress !== null\n          ) {\n            // The work loop is suspended. During a synchronous render, we don't\n            // yield to the main thread. Immediately unwind the stack. This will\n            // trigger either a fallback or an error boundary.\n            // TODO: For discrete and \"default\" updates (anything that's not\n            // flushSync), we want to wait for the microtasks the flush before\n            // unwinding. Will probably implement this using renderRootConcurrent,\n            // or merge renderRootSync and renderRootConcurrent into the same\n            // function and fork the behavior some other way.\n            var unitOfWork = workInProgress;\n            var thrownValue = workInProgressThrownValue;\n\n            switch (workInProgressSuspendedReason) {\n              case SuspendedOnHydration: {\n                // Selective hydration. An update flowed into a dehydrated tree.\n                // Interrupt the current render so the work loop can switch to the\n                // hydration lane.\n                resetWorkInProgressStack();\n                workInProgressRootExitStatus = RootDidNotComplete;\n                break outer;\n              }\n\n              case SuspendedOnImmediate:\n              case SuspendedOnData: {\n                if (!didSuspendInShell && getSuspenseHandler() === null) {\n                  didSuspendInShell = true;\n                } // Intentional fallthrough\n              }\n\n              default: {\n                // Unwind then continue with the normal work loop.\n                workInProgressSuspendedReason = NotSuspended;\n                workInProgressThrownValue = null;\n                throwAndUnwindWorkLoop(root, unitOfWork, thrownValue);\n                break;\n              }\n            }\n          }\n\n          workLoopSync();\n          break;\n        } catch (thrownValue) {\n          handleThrow(root, thrownValue);\n        }\n      } while (true); // Check if something suspended in the shell. We use this to detect an\n      // infinite ping loop caused by an uncached promise.\n      //\n      // Only increment this counter once per synchronous render attempt across the\n      // whole tree. Even if there are many sibling components that suspend, this\n      // counter only gets incremented once.\n\n      if (didSuspendInShell) {\n        root.shellSuspendCounter++;\n      }\n\n      resetContextDependencies();\n      executionContext = prevExecutionContext;\n      popDispatcher(prevDispatcher);\n\n      if (workInProgress !== null) {\n        // This is a sync render, so we should have finished the whole tree.\n        throw new Error(\n          \"Cannot commit an incomplete root. This error is likely caused by a \" +\n            \"bug in React. Please file an issue.\"\n        );\n      }\n\n      workInProgressRoot = null;\n      workInProgressRootRenderLanes = NoLanes; // It's safe to process the queue now that the render phase is complete.\n\n      finishQueueingConcurrentUpdates();\n      return workInProgressRootExitStatus;\n    } // The work loop is an extremely hot path. Tell Closure not to inline it.\n\n    /** @noinline */\n\n    function workLoopSync() {\n      // Perform work without checking if we need to yield between fiber.\n      while (workInProgress !== null) {\n        performUnitOfWork(workInProgress);\n      }\n    }\n\n    function renderRootConcurrent(root, lanes) {\n      var prevExecutionContext = executionContext;\n      executionContext |= RenderContext;\n      var prevDispatcher = pushDispatcher();\n      // and prepare a fresh one. Otherwise we'll continue where we left off.\n\n      if (\n        workInProgressRoot !== root ||\n        workInProgressRootRenderLanes !== lanes\n      ) {\n        {\n          if (isDevToolsPresent) {\n            var memoizedUpdaters = root.memoizedUpdaters;\n\n            if (memoizedUpdaters.size > 0) {\n              restorePendingUpdaters(root, workInProgressRootRenderLanes);\n              memoizedUpdaters.clear();\n            } // At this point, move Fibers that scheduled the upcoming work from the Map to the Set.\n            // If we bailout on this work, we'll move them back (like above).\n            // It's important to move them now in case the work spawns more work at the same priority with different updaters.\n            // That way we can keep the current update and future updates separate.\n\n            movePendingFibersToMemoized(root, lanes);\n          }\n        }\n\n        workInProgressTransitions = getTransitionsForLanes();\n        resetRenderTimer();\n        prepareFreshStack(root, lanes);\n      }\n\n      outer: do {\n        try {\n          if (\n            workInProgressSuspendedReason !== NotSuspended &&\n            workInProgress !== null\n          ) {\n            // The work loop is suspended. We need to either unwind the stack or\n            // replay the suspended component.\n            var unitOfWork = workInProgress;\n            var thrownValue = workInProgressThrownValue;\n\n            resumeOrUnwind: switch (workInProgressSuspendedReason) {\n              case SuspendedOnError: {\n                // Unwind then continue with the normal work loop.\n                workInProgressSuspendedReason = NotSuspended;\n                workInProgressThrownValue = null;\n                throwAndUnwindWorkLoop(root, unitOfWork, thrownValue);\n                break;\n              }\n\n              case SuspendedOnData: {\n                var thenable = thrownValue;\n\n                if (isThenableResolved(thenable)) {\n                  // The data resolved. Try rendering the component again.\n                  workInProgressSuspendedReason = NotSuspended;\n                  workInProgressThrownValue = null;\n                  replaySuspendedUnitOfWork(unitOfWork);\n                  break;\n                } // The work loop is suspended on data. We should wait for it to\n                // resolve before continuing to render.\n                // TODO: Handle the case where the promise resolves synchronously.\n                // Usually this is handled when we instrument the promise to add a\n                // `status` field, but if the promise already has a status, we won't\n                // have added a listener until right here.\n\n                var onResolution = function () {\n                  // Check if the root is still suspended on this promise.\n                  if (\n                    workInProgressSuspendedReason === SuspendedOnData &&\n                    workInProgressRoot === root\n                  ) {\n                    // Mark the root as ready to continue rendering.\n                    workInProgressSuspendedReason = SuspendedAndReadyToContinue;\n                  } // Ensure the root is scheduled. We should do this even if we're\n                  // currently working on a different root, so that we resume\n                  // rendering later.\n\n                  ensureRootIsScheduled(root);\n                };\n\n                thenable.then(onResolution, onResolution);\n                break outer;\n              }\n\n              case SuspendedOnImmediate: {\n                // If this fiber just suspended, it's possible the data is already\n                // cached. Yield to the main thread to give it a chance to ping. If\n                // it does, we can retry immediately without unwinding the stack.\n                workInProgressSuspendedReason = SuspendedAndReadyToContinue;\n                break outer;\n              }\n\n              case SuspendedOnInstance: {\n                workInProgressSuspendedReason =\n                  SuspendedOnInstanceAndReadyToContinue;\n                break outer;\n              }\n\n              case SuspendedAndReadyToContinue: {\n                var _thenable = thrownValue;\n\n                if (isThenableResolved(_thenable)) {\n                  // The data resolved. Try rendering the component again.\n                  workInProgressSuspendedReason = NotSuspended;\n                  workInProgressThrownValue = null;\n                  replaySuspendedUnitOfWork(unitOfWork);\n                } else {\n                  // Otherwise, unwind then continue with the normal work loop.\n                  workInProgressSuspendedReason = NotSuspended;\n                  workInProgressThrownValue = null;\n                  throwAndUnwindWorkLoop(root, unitOfWork, thrownValue);\n                }\n\n                break;\n              }\n\n              case SuspendedOnInstanceAndReadyToContinue: {\n                switch (workInProgress.tag) {\n                  case HostComponent:\n                  case HostHoistable:\n                  case HostSingleton: {\n                    // Before unwinding the stack, check one more time if the\n                    // instance is ready. It may have loaded when React yielded to\n                    // the main thread.\n                    // Assigning this to a constant so Flow knows the binding won't\n                    // be mutated by `preloadInstance`.\n                    var hostFiber = workInProgress;\n                    var type = hostFiber.type;\n                    var props = hostFiber.pendingProps;\n                    var isReady = preloadInstance(type, props);\n\n                    if (isReady) {\n                      // The data resolved. Resume the work loop as if nothing\n                      // suspended. Unlike when a user component suspends, we don't\n                      // have to replay anything because the host fiber\n                      // already completed.\n                      workInProgressSuspendedReason = NotSuspended;\n                      workInProgressThrownValue = null;\n                      var sibling = hostFiber.sibling;\n\n                      if (sibling !== null) {\n                        workInProgress = sibling;\n                      } else {\n                        var returnFiber = hostFiber.return;\n\n                        if (returnFiber !== null) {\n                          workInProgress = returnFiber;\n                          completeUnitOfWork(returnFiber);\n                        } else {\n                          workInProgress = null;\n                        }\n                      }\n\n                      break resumeOrUnwind;\n                    }\n\n                    break;\n                  }\n\n                  default: {\n                    // This will fail gracefully but it's not correct, so log a\n                    // warning in dev.\n                    if (true) {\n                      error(\n                        \"Unexpected type of fiber triggered a suspensey commit. \" +\n                          \"This is a bug in React.\"\n                      );\n                    }\n\n                    break;\n                  }\n                } // Otherwise, unwind then continue with the normal work loop.\n\n                workInProgressSuspendedReason = NotSuspended;\n                workInProgressThrownValue = null;\n                throwAndUnwindWorkLoop(root, unitOfWork, thrownValue);\n                break;\n              }\n\n              case SuspendedOnDeprecatedThrowPromise: {\n                // Suspended by an old implementation that uses the `throw promise`\n                // pattern. The newer replaying behavior can cause subtle issues\n                // like infinite ping loops. So we maintain the old behavior and\n                // always unwind.\n                workInProgressSuspendedReason = NotSuspended;\n                workInProgressThrownValue = null;\n                throwAndUnwindWorkLoop(root, unitOfWork, thrownValue);\n                break;\n              }\n\n              case SuspendedOnHydration: {\n                // Selective hydration. An update flowed into a dehydrated tree.\n                // Interrupt the current render so the work loop can switch to the\n                // hydration lane.\n                resetWorkInProgressStack();\n                workInProgressRootExitStatus = RootDidNotComplete;\n                break outer;\n              }\n\n              default: {\n                throw new Error(\n                  \"Unexpected SuspendedReason. This is a bug in React.\"\n                );\n              }\n            }\n          }\n\n          if (true && ReactCurrentActQueue.current !== null) {\n            // `act` special case: If we're inside an `act` scope, don't consult\n            // `shouldYield`. Always keep working until the render is complete.\n            // This is not just an optimization: in a unit test environment, we\n            // can't trust the result of `shouldYield`, because the host I/O is\n            // likely mocked.\n            workLoopSync();\n          } else {\n            workLoopConcurrent();\n          }\n\n          break;\n        } catch (thrownValue) {\n          handleThrow(root, thrownValue);\n        }\n      } while (true);\n\n      resetContextDependencies();\n      popDispatcher(prevDispatcher);\n      executionContext = prevExecutionContext;\n\n      if (workInProgress !== null) {\n        return RootInProgress;\n      } else {\n        workInProgressRoot = null;\n        workInProgressRootRenderLanes = NoLanes; // It's safe to process the queue now that the render phase is complete.\n\n        finishQueueingConcurrentUpdates(); // Return the final exit status.\n\n        return workInProgressRootExitStatus;\n      }\n    }\n    /** @noinline */\n\n    function workLoopConcurrent() {\n      // Perform work until Scheduler asks us to yield\n      while (workInProgress !== null && !shouldYield()) {\n        // $FlowFixMe[incompatible-call] found when upgrading Flow\n        performUnitOfWork(workInProgress);\n      }\n    }\n\n    function performUnitOfWork(unitOfWork) {\n      // The current, flushed, state of this fiber is the alternate. Ideally\n      // nothing should rely on this, but relying on it here means that we don't\n      // need an additional field on the work in progress.\n      var current = unitOfWork.alternate;\n      setCurrentFiber(unitOfWork);\n      var next;\n\n      if ((unitOfWork.mode & ProfileMode) !== NoMode) {\n        startProfilerTimer(unitOfWork);\n        next = beginWork(current, unitOfWork, entangledRenderLanes);\n        stopProfilerTimerIfRunningAndRecordDelta(unitOfWork, true);\n      } else {\n        next = beginWork(current, unitOfWork, entangledRenderLanes);\n      }\n\n      resetCurrentFiber();\n      unitOfWork.memoizedProps = unitOfWork.pendingProps;\n\n      if (next === null) {\n        // If this doesn't spawn new work, complete the current work.\n        completeUnitOfWork(unitOfWork);\n      } else {\n        workInProgress = next;\n      }\n\n      ReactCurrentOwner$1.current = null;\n    }\n\n    function replaySuspendedUnitOfWork(unitOfWork) {\n      // This is a fork of performUnitOfWork specifcally for replaying a fiber that\n      // just suspended.\n      //\n      var current = unitOfWork.alternate;\n      setCurrentFiber(unitOfWork);\n      var next;\n      setCurrentFiber(unitOfWork);\n      var isProfilingMode = (unitOfWork.mode & ProfileMode) !== NoMode;\n\n      if (isProfilingMode) {\n        startProfilerTimer(unitOfWork);\n      }\n\n      switch (unitOfWork.tag) {\n        case IndeterminateComponent: {\n          // Because it suspended with `use`, we can assume it's a\n          // function component.\n          unitOfWork.tag = FunctionComponent; // Fallthrough to the next branch.\n        }\n\n        case SimpleMemoComponent:\n        case FunctionComponent: {\n          // Resolve `defaultProps`. This logic is copied from `beginWork`.\n          // TODO: Consider moving this switch statement into that module. Also,\n          // could maybe use this as an opportunity to say `use` doesn't work with\n          // `defaultProps` :)\n          var Component = unitOfWork.type;\n          var unresolvedProps = unitOfWork.pendingProps;\n          var resolvedProps =\n            unitOfWork.elementType === Component\n              ? unresolvedProps\n              : resolveDefaultProps(Component, unresolvedProps);\n          var context;\n\n          {\n            var unmaskedContext = getUnmaskedContext(\n              unitOfWork,\n              Component,\n              true\n            );\n            context = getMaskedContext(unitOfWork, unmaskedContext);\n          }\n\n          next = replayFunctionComponent(\n            current,\n            unitOfWork,\n            resolvedProps,\n            Component,\n            context,\n            workInProgressRootRenderLanes\n          );\n          break;\n        }\n\n        case ForwardRef: {\n          // Resolve `defaultProps`. This logic is copied from `beginWork`.\n          // TODO: Consider moving this switch statement into that module. Also,\n          // could maybe use this as an opportunity to say `use` doesn't work with\n          // `defaultProps` :)\n          var _Component = unitOfWork.type.render;\n          var _unresolvedProps = unitOfWork.pendingProps;\n\n          var _resolvedProps =\n            unitOfWork.elementType === _Component\n              ? _unresolvedProps\n              : resolveDefaultProps(_Component, _unresolvedProps);\n\n          next = replayFunctionComponent(\n            current,\n            unitOfWork,\n            _resolvedProps,\n            _Component,\n            unitOfWork.ref,\n            workInProgressRootRenderLanes\n          );\n          break;\n        }\n\n        case HostComponent: {\n          // Some host components are stateful (that's how we implement form\n          // actions) but we don't bother to reuse the memoized state because it's\n          // not worth the extra code. The main reason to reuse the previous hooks\n          // is to reuse uncached promises, but we happen to know that the only\n          // promises that a host component might suspend on are definitely cached\n          // because they are controlled by us. So don't bother.\n          resetHooksOnUnwind(unitOfWork); // Fallthrough to the next branch.\n        }\n\n        default: {\n          // Other types besides function components are reset completely before\n          // being replayed. Currently this only happens when a Usable type is\n          // reconciled — the reconciler will suspend.\n          //\n          // We reset the fiber back to its original state; however, this isn't\n          // a full \"unwind\" because we're going to reuse the promises that were\n          // reconciled previously. So it's intentional that we don't call\n          // resetSuspendedWorkLoopOnUnwind here.\n          unwindInterruptedWork(current, unitOfWork);\n          unitOfWork = workInProgress = resetWorkInProgress(\n            unitOfWork,\n            entangledRenderLanes\n          );\n          next = beginWork(current, unitOfWork, entangledRenderLanes);\n          break;\n        }\n      }\n\n      if (isProfilingMode) {\n        stopProfilerTimerIfRunningAndRecordDelta(unitOfWork, true);\n      } // The begin phase finished successfully without suspending. Return to the\n      // normal work loop.\n\n      resetCurrentFiber();\n      unitOfWork.memoizedProps = unitOfWork.pendingProps;\n\n      if (next === null) {\n        // If this doesn't spawn new work, complete the current work.\n        completeUnitOfWork(unitOfWork);\n      } else {\n        workInProgress = next;\n      }\n\n      ReactCurrentOwner$1.current = null;\n    }\n\n    function throwAndUnwindWorkLoop(root, unitOfWork, thrownValue) {\n      // This is a fork of performUnitOfWork specifcally for unwinding a fiber\n      // that threw an exception.\n      //\n      // Return to the normal work loop. This will unwind the stack, and potentially\n      // result in showing a fallback.\n      resetSuspendedWorkLoopOnUnwind(unitOfWork);\n      var returnFiber = unitOfWork.return;\n\n      try {\n        // Find and mark the nearest Suspense or error boundary that can handle\n        // this \"exception\".\n        var didFatal = throwException(\n          root,\n          returnFiber,\n          unitOfWork,\n          thrownValue,\n          workInProgressRootRenderLanes\n        );\n\n        if (didFatal) {\n          panicOnRootError(thrownValue);\n          return;\n        }\n      } catch (error) {\n        // We had trouble processing the error. An example of this happening is\n        // when accessing the `componentDidCatch` property of an error boundary\n        // throws an error. A weird edge case. There's a regression test for this.\n        // To prevent an infinite loop, bubble the error up to the next parent.\n        if (returnFiber !== null) {\n          workInProgress = returnFiber;\n          throw error;\n        } else {\n          panicOnRootError(thrownValue);\n          return;\n        }\n      }\n\n      if (unitOfWork.flags & Incomplete) {\n        // Unwind the stack until we reach the nearest boundary.\n        unwindUnitOfWork(unitOfWork);\n      } else {\n        // Although the fiber suspended, we're intentionally going to commit it in\n        // an inconsistent state. We can do this safely in cases where we know the\n        // inconsistent tree will be hidden.\n        //\n        // This currently only applies to Legacy Suspense implementation, but we may\n        // port a version of this to concurrent roots, too, when performing a\n        // synchronous render. Because that will allow us to mutate the tree as we\n        // go instead of buffering mutations until the end. Though it's unclear if\n        // this particular path is how that would be implemented.\n        completeUnitOfWork(unitOfWork);\n      }\n    }\n\n    function panicOnRootError(error) {\n      // There's no ancestor that can handle this exception. This should never\n      // happen because the root is supposed to capture all errors that weren't\n      // caught by an error boundary. This is a fatal error, or panic condition,\n      // because we've run out of ways to recover.\n      workInProgressRootExitStatus = RootFatalErrored;\n      workInProgressRootFatalError = error; // Set `workInProgress` to null. This represents advancing to the next\n      // sibling, or the parent if there are no siblings. But since the root\n      // has no siblings nor a parent, we set it to null. Usually this is\n      // handled by `completeUnitOfWork` or `unwindWork`, but since we're\n      // intentionally not calling those, we need set it here.\n      // TODO: Consider calling `unwindWork` to pop the contexts.\n\n      workInProgress = null;\n    }\n\n    function completeUnitOfWork(unitOfWork) {\n      // Attempt to complete the current unit of work, then move to the next\n      // sibling. If there are no more siblings, return to the parent fiber.\n      var completedWork = unitOfWork;\n\n      do {\n        {\n          if ((completedWork.flags & Incomplete) !== NoFlags$1) {\n            // NOTE: If we re-enable sibling prerendering in some cases, this branch\n            // is where we would switch to the unwinding path.\n            error(\n              \"Internal React error: Expected this fiber to be complete, but \" +\n                \"it isn't. It should have been unwound. This is a bug in React.\"\n            );\n          }\n        } // The current, flushed, state of this fiber is the alternate. Ideally\n        // nothing should rely on this, but relying on it here means that we don't\n        // need an additional field on the work in progress.\n\n        var current = completedWork.alternate;\n        var returnFiber = completedWork.return;\n        setCurrentFiber(completedWork);\n        var next = void 0;\n\n        if ((completedWork.mode & ProfileMode) === NoMode) {\n          next = completeWork(current, completedWork, entangledRenderLanes);\n        } else {\n          startProfilerTimer(completedWork);\n          next = completeWork(current, completedWork, entangledRenderLanes); // Update render duration assuming we didn't error.\n\n          stopProfilerTimerIfRunningAndRecordDelta(completedWork, false);\n        }\n\n        resetCurrentFiber();\n\n        if (next !== null) {\n          // Completing this fiber spawned new work. Work on that next.\n          workInProgress = next;\n          return;\n        }\n\n        var siblingFiber = completedWork.sibling;\n\n        if (siblingFiber !== null) {\n          // If there is more work to do in this returnFiber, do that next.\n          workInProgress = siblingFiber;\n          return;\n        } // Otherwise, return to the parent\n        // $FlowFixMe[incompatible-type] we bail out when we get a null\n\n        completedWork = returnFiber; // Update the next thing we're working on in case something throws.\n\n        workInProgress = completedWork;\n      } while (completedWork !== null); // We've reached the root.\n\n      if (workInProgressRootExitStatus === RootInProgress) {\n        workInProgressRootExitStatus = RootCompleted;\n      }\n    }\n\n    function unwindUnitOfWork(unitOfWork) {\n      var incompleteWork = unitOfWork;\n\n      do {\n        // The current, flushed, state of this fiber is the alternate. Ideally\n        // nothing should rely on this, but relying on it here means that we don't\n        // need an additional field on the work in progress.\n        var current = incompleteWork.alternate; // This fiber did not complete because something threw. Pop values off\n        // the stack without entering the complete phase. If this is a boundary,\n        // capture values if possible.\n\n        var next = unwindWork(current, incompleteWork); // Because this fiber did not complete, don't reset its lanes.\n\n        if (next !== null) {\n          // Found a boundary that can handle this exception. Re-renter the\n          // begin phase. This branch will return us to the normal work loop.\n          //\n          // Since we're restarting, remove anything that is not a host effect\n          // from the effect tag.\n          next.flags &= HostEffectMask;\n          workInProgress = next;\n          return;\n        } // Keep unwinding until we reach either a boundary or the root.\n\n        if ((incompleteWork.mode & ProfileMode) !== NoMode) {\n          // Record the render duration for the fiber that errored.\n          stopProfilerTimerIfRunningAndRecordDelta(incompleteWork, false); // Include the time spent working on failed children before continuing.\n\n          var actualDuration = incompleteWork.actualDuration;\n          var child = incompleteWork.child;\n\n          while (child !== null) {\n            // $FlowFixMe[unsafe-addition] addition with possible null/undefined value\n            actualDuration += child.actualDuration;\n            child = child.sibling;\n          }\n\n          incompleteWork.actualDuration = actualDuration;\n        } // TODO: Once we stop prerendering siblings, instead of resetting the parent\n        // of the node being unwound, we should be able to reset node itself as we\n        // unwind the stack. Saves an additional null check.\n\n        var returnFiber = incompleteWork.return;\n\n        if (returnFiber !== null) {\n          // Mark the parent fiber as incomplete and clear its subtree flags.\n          // TODO: Once we stop prerendering siblings, we may be able to get rid of\n          // the Incomplete flag because unwinding to the nearest boundary will\n          // happen synchronously.\n          returnFiber.flags |= Incomplete;\n          returnFiber.subtreeFlags = NoFlags$1;\n          returnFiber.deletions = null;\n        } // NOTE: If we re-enable sibling prerendering in some cases, here we\n        // would switch to the normal completion path: check if a sibling\n        // exists, and if so, begin work on it.\n        // Otherwise, return to the parent\n        // $FlowFixMe[incompatible-type] we bail out when we get a null\n\n        incompleteWork = returnFiber; // Update the next thing we're working on in case something throws.\n\n        workInProgress = incompleteWork;\n      } while (incompleteWork !== null); // We've unwound all the way to the root.\n\n      workInProgressRootExitStatus = RootDidNotComplete;\n      workInProgress = null;\n    }\n\n    function commitRoot(root, recoverableErrors, transitions, spawnedLane) {\n      // TODO: This no longer makes any sense. We already wrap the mutation and\n      // layout phases. Should be able to remove.\n      var previousUpdateLanePriority = getCurrentUpdatePriority();\n      var prevTransition = ReactCurrentBatchConfig.transition;\n\n      try {\n        ReactCurrentBatchConfig.transition = null;\n        setCurrentUpdatePriority(DiscreteEventPriority);\n        commitRootImpl(\n          root,\n          recoverableErrors,\n          transitions,\n          previousUpdateLanePriority,\n          spawnedLane\n        );\n      } finally {\n        ReactCurrentBatchConfig.transition = prevTransition;\n        setCurrentUpdatePriority(previousUpdateLanePriority);\n      }\n\n      return null;\n    }\n\n    function commitRootImpl(\n      root,\n      recoverableErrors,\n      transitions,\n      renderPriorityLevel,\n      spawnedLane\n    ) {\n      do {\n        // `flushPassiveEffects` will call `flushSyncUpdateQueue` at the end, which\n        // means `flushPassiveEffects` will sometimes result in additional\n        // passive effects. So we need to keep flushing in a loop until there are\n        // no more pending effects.\n        // TODO: Might be better if `flushPassiveEffects` did not automatically\n        // flush synchronous work at the end, to avoid factoring hazards like this.\n        flushPassiveEffects();\n      } while (rootWithPendingPassiveEffects !== null);\n\n      flushRenderPhaseStrictModeWarningsInDEV();\n\n      if ((executionContext & (RenderContext | CommitContext)) !== NoContext) {\n        throw new Error(\"Should not already be working.\");\n      }\n\n      var finishedWork = root.finishedWork;\n      var lanes = root.finishedLanes;\n\n      if (finishedWork === null) {\n        return null;\n      } else {\n        {\n          if (lanes === NoLanes) {\n            error(\n              \"root.finishedLanes should not be empty during a commit. This is a \" +\n                \"bug in React.\"\n            );\n          }\n        }\n      }\n\n      root.finishedWork = null;\n      root.finishedLanes = NoLanes;\n\n      if (finishedWork === root.current) {\n        throw new Error(\n          \"Cannot commit the same tree as before. This error is likely caused by \" +\n            \"a bug in React. Please file an issue.\"\n        );\n      } // commitRoot never returns a continuation; it always finishes synchronously.\n      // So we can clear these now to allow a new callback to be scheduled.\n\n      root.callbackNode = null;\n      root.callbackPriority = NoLane;\n      root.cancelPendingCommit = null; // Check which lanes no longer have any work scheduled on them, and mark\n      // those as finished.\n\n      var remainingLanes = mergeLanes(\n        finishedWork.lanes,\n        finishedWork.childLanes\n      ); // Make sure to account for lanes that were updated by a concurrent event\n      // during the render phase; don't mark them as finished.\n\n      var concurrentlyUpdatedLanes = getConcurrentlyUpdatedLanes();\n      remainingLanes = mergeLanes(remainingLanes, concurrentlyUpdatedLanes);\n      markRootFinished(root, remainingLanes, spawnedLane);\n\n      if (root === workInProgressRoot) {\n        // We can reset these now that they are finished.\n        workInProgressRoot = null;\n        workInProgress = null;\n        workInProgressRootRenderLanes = NoLanes;\n      } // If there are pending passive effects, schedule a callback to process them.\n      // Do this as early as possible, so it is queued before anything else that\n      // might get scheduled in the commit phase. (See #16714.)\n      // TODO: Delete all other places that schedule the passive effect callback\n      // They're redundant.\n\n      if (\n        (finishedWork.subtreeFlags & PassiveMask) !== NoFlags$1 ||\n        (finishedWork.flags & PassiveMask) !== NoFlags$1\n      ) {\n        if (!rootDoesHavePassiveEffects) {\n          rootDoesHavePassiveEffects = true;\n          scheduleCallback(NormalPriority, function () {\n            flushPassiveEffects(); // This render triggered passive effects: release the root cache pool\n            // *after* passive effects fire to avoid freeing a cache pool that may\n            // be referenced by a node in the tree (HostRoot, Cache boundary etc)\n\n            return null;\n          });\n        }\n      } // Check if there are any effects in the whole tree.\n      // TODO: This is left over from the effect list implementation, where we had\n      // to check for the existence of `firstEffect` to satisfy Flow. I think the\n      // only other reason this optimization exists is because it affects profiling.\n      // Reconsider whether this is necessary.\n\n      var subtreeHasEffects =\n        (finishedWork.subtreeFlags &\n          (BeforeMutationMask | MutationMask | LayoutMask | PassiveMask)) !==\n        NoFlags$1;\n      var rootHasEffect =\n        (finishedWork.flags &\n          (BeforeMutationMask | MutationMask | LayoutMask | PassiveMask)) !==\n        NoFlags$1;\n\n      if (subtreeHasEffects || rootHasEffect) {\n        var prevTransition = ReactCurrentBatchConfig.transition;\n        ReactCurrentBatchConfig.transition = null;\n        var previousPriority = getCurrentUpdatePriority();\n        setCurrentUpdatePriority(DiscreteEventPriority);\n        var prevExecutionContext = executionContext;\n        executionContext |= CommitContext; // Reset this to null before calling lifecycles\n\n        ReactCurrentOwner$1.current = null; // The commit phase is broken into several sub-phases. We do a separate pass\n        // of the effect list for each phase: all mutation effects come before all\n        // layout effects, and so on.\n        // The first phase a \"before mutation\" phase. We use this phase to read the\n        // state of the host tree right before we mutate it. This is where\n        // getSnapshotBeforeUpdate is called.\n\n        commitBeforeMutationEffects(root, finishedWork);\n\n        {\n          // Mark the current commit time to be shared by all Profilers in this\n          // batch. This enables them to be grouped later.\n          recordCommitTime();\n        }\n\n        commitMutationEffects(root, finishedWork, lanes);\n        // the mutation phase, so that the previous tree is still current during\n        // componentWillUnmount, but before the layout phase, so that the finished\n        // work is current during componentDidMount/Update.\n\n        root.current = finishedWork; // The next phase is the layout phase, where we call effects that read\n\n        commitLayoutEffects(finishedWork, root, lanes);\n        // opportunity to paint.\n\n        requestPaint();\n        executionContext = prevExecutionContext; // Reset the priority to the previous non-sync value.\n\n        setCurrentUpdatePriority(previousPriority);\n        ReactCurrentBatchConfig.transition = prevTransition;\n      } else {\n        // No effects.\n        root.current = finishedWork; // Measure these anyway so the flamegraph explicitly shows that there were\n        // no effects.\n        // TODO: Maybe there's a better way to report this.\n\n        {\n          recordCommitTime();\n        }\n      }\n\n      var rootDidHavePassiveEffects = rootDoesHavePassiveEffects;\n\n      if (rootDoesHavePassiveEffects) {\n        // This commit has passive effects. Stash a reference to them. But don't\n        // schedule a callback until after flushing layout work.\n        rootDoesHavePassiveEffects = false;\n        rootWithPendingPassiveEffects = root;\n        pendingPassiveEffectsLanes = lanes;\n      } else {\n        {\n          nestedPassiveUpdateCount = 0;\n          rootWithPassiveNestedUpdates = null;\n        }\n      } // Read this again, since an effect might have updated it\n\n      remainingLanes = root.pendingLanes; // Check if there's remaining work on this root\n      // TODO: This is part of the `componentDidCatch` implementation. Its purpose\n      // is to detect whether something might have called setState inside\n      // `componentDidCatch`. The mechanism is known to be flawed because `setState`\n      // inside `componentDidCatch` is itself flawed — that's why we recommend\n      // `getDerivedStateFromError` instead. However, it could be improved by\n      // checking if remainingLanes includes Sync work, instead of whether there's\n      // any work remaining at all (which would also include stuff like Suspense\n      // retries or transitions). It's been like this for a while, though, so fixing\n      // it probably isn't that urgent.\n\n      if (remainingLanes === NoLanes) {\n        // If there's no remaining work, we can clear the set of already failed\n        // error boundaries.\n        legacyErrorBoundariesThatAlreadyFailed = null;\n      }\n\n      {\n        if (!rootDidHavePassiveEffects) {\n          commitDoubleInvokeEffectsInDEV(root, false);\n        }\n      }\n\n      onCommitRoot(finishedWork.stateNode, renderPriorityLevel);\n\n      {\n        if (isDevToolsPresent) {\n          root.memoizedUpdaters.clear();\n        }\n      }\n      // additional work on this root is scheduled.\n\n      ensureRootIsScheduled(root);\n\n      if (recoverableErrors !== null) {\n        // There were errors during this render, but recovered from them without\n        // needing to surface it to the UI. We log them here.\n        var onRecoverableError = root.onRecoverableError;\n\n        for (var i = 0; i < recoverableErrors.length; i++) {\n          var recoverableError = recoverableErrors[i];\n          var errorInfo = makeErrorInfo(\n            recoverableError.digest,\n            recoverableError.stack\n          );\n          onRecoverableError(recoverableError.value, errorInfo);\n        }\n      }\n\n      if (hasUncaughtError) {\n        hasUncaughtError = false;\n        var error$1 = firstUncaughtError;\n        firstUncaughtError = null;\n        throw error$1;\n      } // If the passive effects are the result of a discrete render, flush them\n      // synchronously at the end of the current task so that the result is\n      // immediately observable. Otherwise, we assume that they are not\n      // order-dependent and do not need to be observed by external systems, so we\n      // can wait until after paint.\n      // TODO: We can optimize this by not scheduling the callback earlier. Since we\n      // currently schedule the callback in multiple places, will wait until those\n      // are consolidated.\n\n      if (\n        includesSyncLane(pendingPassiveEffectsLanes) &&\n        root.tag !== LegacyRoot\n      ) {\n        flushPassiveEffects();\n      } // Read this again, since a passive effect might have updated it\n\n      remainingLanes = root.pendingLanes; // Check if this render scheduled a cascading synchronous update. This is a\n      // heurstic to detect infinite update loops. We are intentionally excluding\n      // hydration lanes in this check, because render triggered by selective\n      // hydration is conceptually not an update.\n\n      if (\n        // Was the finished render the result of an update (not hydration)?\n        includesSomeLane(lanes, UpdateLanes) && // Did it schedule a sync update?\n        includesSomeLane(remainingLanes, SyncUpdateLanes)\n      ) {\n        {\n          markNestedUpdateScheduled();\n        } // Count the number of times the root synchronously re-renders without\n        // finishing. If there are too many, it indicates an infinite update loop.\n\n        if (root === rootWithNestedUpdates) {\n          nestedUpdateCount++;\n        } else {\n          nestedUpdateCount = 0;\n          rootWithNestedUpdates = root;\n        }\n      } else {\n        nestedUpdateCount = 0;\n      } // If layout work was scheduled, flush it now.\n\n      flushSyncWorkOnAllRoots();\n\n      return null;\n    }\n\n    function makeErrorInfo(digest, componentStack) {\n      {\n        var errorInfo = {\n          componentStack: componentStack,\n          digest: digest\n        };\n        Object.defineProperty(errorInfo, \"digest\", {\n          configurable: false,\n          enumerable: true,\n          get: function () {\n            error(\n              'You are accessing \"digest\" from the errorInfo object passed to onRecoverableError.' +\n                \" This property is deprecated and will be removed in a future version of React.\" +\n                \" To access the digest of an Error look for this property on the Error instance itself.\"\n            );\n\n            return digest;\n          }\n        });\n        return errorInfo;\n      }\n    }\n\n    function flushPassiveEffects() {\n      // Returns whether passive effects were flushed.\n      // TODO: Combine this check with the one in flushPassiveEFfectsImpl. We should\n      // probably just combine the two functions. I believe they were only separate\n      // in the first place because we used to wrap it with\n      // `Scheduler.runWithPriority`, which accepts a function. But now we track the\n      // priority within React itself, so we can mutate the variable directly.\n      if (rootWithPendingPassiveEffects !== null) {\n        var renderPriority = lanesToEventPriority(pendingPassiveEffectsLanes);\n        var priority = lowerEventPriority(DefaultEventPriority, renderPriority);\n        var prevTransition = ReactCurrentBatchConfig.transition;\n        var previousPriority = getCurrentUpdatePriority();\n\n        try {\n          ReactCurrentBatchConfig.transition = null;\n          setCurrentUpdatePriority(priority);\n          return flushPassiveEffectsImpl();\n        } finally {\n          setCurrentUpdatePriority(previousPriority);\n          ReactCurrentBatchConfig.transition = prevTransition; // Once passive effects have run for the tree - giving components a\n        }\n      }\n\n      return false;\n    }\n    function enqueuePendingPassiveProfilerEffect(fiber) {\n      {\n        pendingPassiveProfilerEffects.push(fiber);\n\n        if (!rootDoesHavePassiveEffects) {\n          rootDoesHavePassiveEffects = true;\n          scheduleCallback(NormalPriority, function () {\n            flushPassiveEffects();\n            return null;\n          });\n        }\n      }\n    }\n\n    function flushPassiveEffectsImpl() {\n      if (rootWithPendingPassiveEffects === null) {\n        return false;\n      } // Cache and clear the transitions flag\n      var root = rootWithPendingPassiveEffects;\n      rootWithPendingPassiveEffects = null; // TODO: This is sometimes out of sync with rootWithPendingPassiveEffects.\n      // Figure out why and fix it. It's not causing any known issues (probably\n      // because it's only used for profiling), but it's a refactor hazard.\n\n      pendingPassiveEffectsLanes = NoLanes;\n\n      if ((executionContext & (RenderContext | CommitContext)) !== NoContext) {\n        throw new Error(\n          \"Cannot flush passive effects while already rendering.\"\n        );\n      }\n\n      {\n        isFlushingPassiveEffects = true;\n        didScheduleUpdateDuringPassiveEffects = false;\n      }\n\n      var prevExecutionContext = executionContext;\n      executionContext |= CommitContext;\n      commitPassiveUnmountEffects(root.current);\n      commitPassiveMountEffects(root, root.current); // TODO: Move to commitPassiveMountEffects\n\n      {\n        var profilerEffects = pendingPassiveProfilerEffects;\n        pendingPassiveProfilerEffects = [];\n\n        for (var i = 0; i < profilerEffects.length; i++) {\n          var fiber = profilerEffects[i];\n          commitPassiveEffectDurations(root, fiber);\n        }\n      }\n\n      {\n        commitDoubleInvokeEffectsInDEV(root, true);\n      }\n\n      executionContext = prevExecutionContext;\n      flushSyncWorkOnAllRoots();\n\n      {\n        // If additional passive effects were scheduled, increment a counter. If this\n        // exceeds the limit, we'll fire a warning.\n        if (didScheduleUpdateDuringPassiveEffects) {\n          if (root === rootWithPassiveNestedUpdates) {\n            nestedPassiveUpdateCount++;\n          } else {\n            nestedPassiveUpdateCount = 0;\n            rootWithPassiveNestedUpdates = root;\n          }\n        } else {\n          nestedPassiveUpdateCount = 0;\n        }\n\n        isFlushingPassiveEffects = false;\n        didScheduleUpdateDuringPassiveEffects = false;\n      } // TODO: Move to commitPassiveMountEffects\n\n      onPostCommitRoot(root);\n\n      {\n        var stateNode = root.current.stateNode;\n        stateNode.effectDuration = 0;\n        stateNode.passiveEffectDuration = 0;\n      }\n\n      return true;\n    }\n\n    function isAlreadyFailedLegacyErrorBoundary(instance) {\n      return (\n        legacyErrorBoundariesThatAlreadyFailed !== null &&\n        legacyErrorBoundariesThatAlreadyFailed.has(instance)\n      );\n    }\n    function markLegacyErrorBoundaryAsFailed(instance) {\n      if (legacyErrorBoundariesThatAlreadyFailed === null) {\n        legacyErrorBoundariesThatAlreadyFailed = new Set([instance]);\n      } else {\n        legacyErrorBoundariesThatAlreadyFailed.add(instance);\n      }\n    }\n\n    function prepareToThrowUncaughtError(error) {\n      if (!hasUncaughtError) {\n        hasUncaughtError = true;\n        firstUncaughtError = error;\n      }\n    }\n\n    var onUncaughtError = prepareToThrowUncaughtError;\n\n    function captureCommitPhaseErrorOnRoot(rootFiber, sourceFiber, error) {\n      var errorInfo = createCapturedValueAtFiber(error, sourceFiber);\n      var update = createRootErrorUpdate(rootFiber, errorInfo, SyncLane);\n      var root = enqueueUpdate(rootFiber, update, SyncLane);\n\n      if (root !== null) {\n        markRootUpdated(root, SyncLane);\n        ensureRootIsScheduled(root);\n      }\n    }\n\n    function captureCommitPhaseError(\n      sourceFiber,\n      nearestMountedAncestor,\n      error$1\n    ) {\n      {\n        reportUncaughtErrorInDEV(error$1);\n        setIsRunningInsertionEffect(false);\n      }\n\n      if (sourceFiber.tag === HostRoot) {\n        // Error was thrown at the root. There is no parent, so the root\n        // itself should capture it.\n        captureCommitPhaseErrorOnRoot(sourceFiber, sourceFiber, error$1);\n        return;\n      }\n\n      var fiber = nearestMountedAncestor;\n\n      while (fiber !== null) {\n        if (fiber.tag === HostRoot) {\n          captureCommitPhaseErrorOnRoot(fiber, sourceFiber, error$1);\n          return;\n        } else if (fiber.tag === ClassComponent) {\n          var ctor = fiber.type;\n          var instance = fiber.stateNode;\n\n          if (\n            typeof ctor.getDerivedStateFromError === \"function\" ||\n            (typeof instance.componentDidCatch === \"function\" &&\n              !isAlreadyFailedLegacyErrorBoundary(instance))\n          ) {\n            var errorInfo = createCapturedValueAtFiber(error$1, sourceFiber);\n            var update = createClassErrorUpdate(fiber, errorInfo, SyncLane);\n            var root = enqueueUpdate(fiber, update, SyncLane);\n\n            if (root !== null) {\n              markRootUpdated(root, SyncLane);\n              ensureRootIsScheduled(root);\n            }\n\n            return;\n          }\n        }\n\n        fiber = fiber.return;\n      }\n\n      {\n        error(\n          \"Internal React error: Attempted to capture a commit phase error \" +\n            \"inside a detached tree. This indicates a bug in React. Potential \" +\n            \"causes include deleting the same fiber more than once, committing an \" +\n            \"already-finished tree, or an inconsistent return pointer.\\n\\n\" +\n            \"Error message:\\n\\n%s\",\n          error$1\n        );\n      }\n    }\n    function attachPingListener(root, wakeable, lanes) {\n      // Attach a ping listener\n      //\n      // The data might resolve before we have a chance to commit the fallback. Or,\n      // in the case of a refresh, we'll never commit a fallback. So we need to\n      // attach a listener now. When it resolves (\"pings\"), we can decide whether to\n      // try rendering the tree again.\n      //\n      // Only attach a listener if one does not already exist for the lanes\n      // we're currently rendering (which acts like a \"thread ID\" here).\n      //\n      // We only need to do this in concurrent mode. Legacy Suspense always\n      // commits fallbacks synchronously, so there are no pings.\n      var pingCache = root.pingCache;\n      var threadIDs;\n\n      if (pingCache === null) {\n        pingCache = root.pingCache = new PossiblyWeakMap();\n        threadIDs = new Set();\n        pingCache.set(wakeable, threadIDs);\n      } else {\n        threadIDs = pingCache.get(wakeable);\n\n        if (threadIDs === undefined) {\n          threadIDs = new Set();\n          pingCache.set(wakeable, threadIDs);\n        }\n      }\n\n      if (!threadIDs.has(lanes)) {\n        workInProgressRootDidAttachPingListener = true; // Memoize using the thread ID to prevent redundant listeners.\n\n        threadIDs.add(lanes);\n        var ping = pingSuspendedRoot.bind(null, root, wakeable, lanes);\n\n        {\n          if (isDevToolsPresent) {\n            // If we have pending work still, restore the original updaters\n            restorePendingUpdaters(root, lanes);\n          }\n        }\n\n        wakeable.then(ping, ping);\n      }\n    }\n\n    function pingSuspendedRoot(root, wakeable, pingedLanes) {\n      var pingCache = root.pingCache;\n\n      if (pingCache !== null) {\n        // The wakeable resolved, so we no longer need to memoize, because it will\n        // never be thrown again.\n        pingCache.delete(wakeable);\n      }\n\n      markRootPinged(root, pingedLanes);\n      warnIfSuspenseResolutionNotWrappedWithActDEV(root);\n\n      if (\n        workInProgressRoot === root &&\n        isSubsetOfLanes(workInProgressRootRenderLanes, pingedLanes)\n      ) {\n        // Received a ping at the same priority level at which we're currently\n        // rendering. We might want to restart this render. This should mirror\n        // the logic of whether or not a root suspends once it completes.\n        // TODO: If we're rendering sync either due to Sync, Batched or expired,\n        // we should probably never restart.\n        // If we're suspended with delay, or if it's a retry, we'll always suspend\n        // so we can always restart.\n        if (\n          workInProgressRootExitStatus === RootSuspendedWithDelay ||\n          (workInProgressRootExitStatus === RootSuspended &&\n            includesOnlyRetries(workInProgressRootRenderLanes) &&\n            now$1() - globalMostRecentFallbackTime < FALLBACK_THROTTLE_MS)\n        ) {\n          // Force a restart from the root by unwinding the stack. Unless this is\n          // being called from the render phase, because that would cause a crash.\n          if ((executionContext & RenderContext) === NoContext) {\n            prepareFreshStack(root, NoLanes);\n          }\n        } else {\n          // Even though we can't restart right now, we might get an\n          // opportunity later. So we mark this render as having a ping.\n          workInProgressRootPingedLanes = mergeLanes(\n            workInProgressRootPingedLanes,\n            pingedLanes\n          );\n        }\n      }\n\n      ensureRootIsScheduled(root);\n    }\n\n    function retryTimedOutBoundary(boundaryFiber, retryLane) {\n      // The boundary fiber (a Suspense component or SuspenseList component)\n      // previously was rendered in its fallback state. One of the promises that\n      // suspended it has resolved, which means at least part of the tree was\n      // likely unblocked. Try rendering again, at a new lanes.\n      if (retryLane === NoLane) {\n        // TODO: Assign this to `suspenseState.retryLane`? to avoid\n        // unnecessary entanglement?\n        retryLane = requestRetryLane(boundaryFiber);\n      } // TODO: Special case idle priority?\n\n      var root = enqueueConcurrentRenderForLane(boundaryFiber, retryLane);\n\n      if (root !== null) {\n        markRootUpdated(root, retryLane);\n        ensureRootIsScheduled(root);\n      }\n    }\n\n    function retryDehydratedSuspenseBoundary(boundaryFiber) {\n      var suspenseState = boundaryFiber.memoizedState;\n      var retryLane = NoLane;\n\n      if (suspenseState !== null) {\n        retryLane = suspenseState.retryLane;\n      }\n\n      retryTimedOutBoundary(boundaryFiber, retryLane);\n    }\n    function resolveRetryWakeable(boundaryFiber, wakeable) {\n      var retryLane = NoLane; // Default\n\n      var retryCache;\n\n      switch (boundaryFiber.tag) {\n        case SuspenseComponent:\n          retryCache = boundaryFiber.stateNode;\n          var suspenseState = boundaryFiber.memoizedState;\n\n          if (suspenseState !== null) {\n            retryLane = suspenseState.retryLane;\n          }\n\n          break;\n\n        case SuspenseListComponent:\n          retryCache = boundaryFiber.stateNode;\n          break;\n\n        case OffscreenComponent: {\n          var instance = boundaryFiber.stateNode;\n          retryCache = instance._retryCache;\n          break;\n        }\n\n        default:\n          throw new Error(\n            \"Pinged unknown suspense boundary type. \" +\n              \"This is probably a bug in React.\"\n          );\n      }\n\n      if (retryCache !== null) {\n        // The wakeable resolved, so we no longer need to memoize, because it will\n        // never be thrown again.\n        retryCache.delete(wakeable);\n      }\n\n      retryTimedOutBoundary(boundaryFiber, retryLane);\n    }\n    function throwIfInfiniteUpdateLoopDetected() {\n      if (nestedUpdateCount > NESTED_UPDATE_LIMIT) {\n        nestedUpdateCount = 0;\n        nestedPassiveUpdateCount = 0;\n        rootWithNestedUpdates = null;\n        rootWithPassiveNestedUpdates = null;\n        throw new Error(\n          \"Maximum update depth exceeded. This can happen when a component \" +\n            \"repeatedly calls setState inside componentWillUpdate or \" +\n            \"componentDidUpdate. React limits the number of nested updates to \" +\n            \"prevent infinite loops.\"\n        );\n      }\n\n      {\n        if (nestedPassiveUpdateCount > NESTED_PASSIVE_UPDATE_LIMIT) {\n          nestedPassiveUpdateCount = 0;\n          rootWithPassiveNestedUpdates = null;\n\n          error(\n            \"Maximum update depth exceeded. This can happen when a component \" +\n              \"calls setState inside useEffect, but useEffect either doesn't \" +\n              \"have a dependency array, or one of the dependencies changes on \" +\n              \"every render.\"\n          );\n        }\n      }\n    }\n\n    function flushRenderPhaseStrictModeWarningsInDEV() {\n      {\n        ReactStrictModeWarnings.flushLegacyContextWarning();\n        ReactStrictModeWarnings.flushPendingUnsafeLifecycleWarnings();\n      }\n    }\n\n    function commitDoubleInvokeEffectsInDEV(root, hasPassiveEffects) {\n      {\n        {\n          legacyCommitDoubleInvokeEffectsInDEV(root.current, hasPassiveEffects);\n        }\n      }\n    }\n\n    function legacyCommitDoubleInvokeEffectsInDEV(fiber, hasPassiveEffects) {\n      // TODO (StrictEffects) Should we set a marker on the root if it contains strict effects\n      // so we don't traverse unnecessarily? similar to subtreeFlags but just at the root level.\n      // Maybe not a big deal since this is DEV only behavior.\n      setCurrentFiber(fiber);\n      invokeEffectsInDev(fiber, MountLayoutDev, invokeLayoutEffectUnmountInDEV);\n\n      if (hasPassiveEffects) {\n        invokeEffectsInDev(\n          fiber,\n          MountPassiveDev,\n          invokePassiveEffectUnmountInDEV\n        );\n      }\n\n      invokeEffectsInDev(fiber, MountLayoutDev, invokeLayoutEffectMountInDEV);\n\n      if (hasPassiveEffects) {\n        invokeEffectsInDev(\n          fiber,\n          MountPassiveDev,\n          invokePassiveEffectMountInDEV\n        );\n      }\n\n      resetCurrentFiber();\n    }\n\n    function invokeEffectsInDev(firstChild, fiberFlags, invokeEffectFn) {\n      var current = firstChild;\n      var subtreeRoot = null;\n\n      while (current != null) {\n        var primarySubtreeFlag = current.subtreeFlags & fiberFlags;\n\n        if (\n          current !== subtreeRoot &&\n          current.child != null &&\n          primarySubtreeFlag !== NoFlags$1\n        ) {\n          current = current.child;\n        } else {\n          if ((current.flags & fiberFlags) !== NoFlags$1) {\n            invokeEffectFn(current);\n          }\n\n          if (current.sibling !== null) {\n            current = current.sibling;\n          } else {\n            current = subtreeRoot = current.return;\n          }\n        }\n      }\n    }\n\n    var didWarnStateUpdateForNotYetMountedComponent = null;\n    function warnAboutUpdateOnNotYetMountedFiberInDEV(fiber) {\n      {\n        if ((executionContext & RenderContext) !== NoContext) {\n          // We let the other warning about render phase updates deal with this one.\n          return;\n        }\n\n        if (!(fiber.mode & ConcurrentMode)) {\n          return;\n        }\n\n        var tag = fiber.tag;\n\n        if (\n          tag !== IndeterminateComponent &&\n          tag !== HostRoot &&\n          tag !== ClassComponent &&\n          tag !== FunctionComponent &&\n          tag !== ForwardRef &&\n          tag !== MemoComponent &&\n          tag !== SimpleMemoComponent\n        ) {\n          // Only warn for user-defined components, not internal ones like Suspense.\n          return;\n        } // We show the whole stack but dedupe on the top component's name because\n        // the problematic code almost always lies inside that component.\n\n        var componentName =\n          getComponentNameFromFiber(fiber) || \"ReactComponent\";\n\n        if (didWarnStateUpdateForNotYetMountedComponent !== null) {\n          if (didWarnStateUpdateForNotYetMountedComponent.has(componentName)) {\n            return;\n          } // $FlowFixMe[incompatible-use] found when upgrading Flow\n\n          didWarnStateUpdateForNotYetMountedComponent.add(componentName);\n        } else {\n          didWarnStateUpdateForNotYetMountedComponent = new Set([\n            componentName\n          ]);\n        }\n\n        var previousFiber = current;\n\n        try {\n          setCurrentFiber(fiber);\n\n          error(\n            \"Can't perform a React state update on a component that hasn't mounted yet. \" +\n              \"This indicates that you have a side-effect in your render function that \" +\n              \"asynchronously later calls tries to update the component. Move this work to \" +\n              \"useEffect instead.\"\n          );\n        } finally {\n          if (previousFiber) {\n            setCurrentFiber(fiber);\n          } else {\n            resetCurrentFiber();\n          }\n        }\n      }\n    }\n    var beginWork;\n\n    {\n      var dummyFiber = null;\n\n      beginWork = function (current, unitOfWork, lanes) {\n        // If a component throws an error, we replay it again in a synchronously\n        // dispatched event, so that the debugger will treat it as an uncaught\n        // error See ReactErrorUtils for more information.\n        // Before entering the begin phase, copy the work-in-progress onto a dummy\n        // fiber. If beginWork throws, we'll use this to reset the state.\n        var originalWorkInProgressCopy = assignFiberPropertiesInDEV(\n          dummyFiber,\n          unitOfWork\n        );\n\n        try {\n          return beginWork$1(current, unitOfWork, lanes);\n        } catch (originalError) {\n          if (\n            didSuspendOrErrorWhileHydratingDEV() ||\n            originalError === SuspenseException ||\n            originalError === SelectiveHydrationException ||\n            (originalError !== null &&\n              typeof originalError === \"object\" &&\n              typeof originalError.then === \"function\")\n          ) {\n            // Don't replay promises.\n            // Don't replay errors if we are hydrating and have already suspended or handled an error\n            throw originalError;\n          } // Don't reset current debug fiber, since we're about to work on the\n          // same fiber again.\n          // Unwind the failed stack frame\n\n          resetSuspendedWorkLoopOnUnwind(unitOfWork);\n          unwindInterruptedWork(current, unitOfWork); // Restore the original properties of the fiber.\n\n          assignFiberPropertiesInDEV(unitOfWork, originalWorkInProgressCopy);\n\n          if (unitOfWork.mode & ProfileMode) {\n            // Reset the profiler timer.\n            startProfilerTimer(unitOfWork);\n          } // Run beginWork again.\n\n          invokeGuardedCallback(\n            null,\n            beginWork$1,\n            null,\n            current,\n            unitOfWork,\n            lanes\n          );\n\n          if (hasCaughtError()) {\n            var replayError = clearCaughtError();\n\n            if (\n              typeof replayError === \"object\" &&\n              replayError !== null &&\n              replayError._suppressLogging &&\n              typeof originalError === \"object\" &&\n              originalError !== null &&\n              !originalError._suppressLogging\n            ) {\n              // If suppressed, let the flag carry over to the original error which is the one we'll rethrow.\n              originalError._suppressLogging = true;\n            }\n          } // We always throw the original error in case the second render pass is not idempotent.\n          // This can happen if a memoized function or CommonJS module doesn't throw after first invocation.\n\n          throw originalError;\n        }\n      };\n    }\n\n    var didWarnAboutUpdateInRender = false;\n    var didWarnAboutUpdateInRenderForAnotherComponent;\n\n    {\n      didWarnAboutUpdateInRenderForAnotherComponent = new Set();\n    }\n\n    function warnAboutRenderPhaseUpdatesInDEV(fiber) {\n      {\n        if (isRendering) {\n          switch (fiber.tag) {\n            case FunctionComponent:\n            case ForwardRef:\n            case SimpleMemoComponent: {\n              var renderingComponentName =\n                (workInProgress && getComponentNameFromFiber(workInProgress)) ||\n                \"Unknown\"; // Dedupe by the rendering component because it's the one that needs to be fixed.\n\n              var dedupeKey = renderingComponentName;\n\n              if (\n                !didWarnAboutUpdateInRenderForAnotherComponent.has(dedupeKey)\n              ) {\n                didWarnAboutUpdateInRenderForAnotherComponent.add(dedupeKey);\n                var setStateComponentName =\n                  getComponentNameFromFiber(fiber) || \"Unknown\";\n\n                error(\n                  \"Cannot update a component (`%s`) while rendering a \" +\n                    \"different component (`%s`). To locate the bad setState() call inside `%s`, \" +\n                    \"follow the stack trace as described in https://reactjs.org/link/setstate-in-render\",\n                  setStateComponentName,\n                  renderingComponentName,\n                  renderingComponentName\n                );\n              }\n\n              break;\n            }\n\n            case ClassComponent: {\n              if (!didWarnAboutUpdateInRender) {\n                error(\n                  \"Cannot update during an existing state transition (such as \" +\n                    \"within `render`). Render methods should be a pure \" +\n                    \"function of props and state.\"\n                );\n\n                didWarnAboutUpdateInRender = true;\n              }\n\n              break;\n            }\n          }\n        }\n      }\n    }\n\n    function restorePendingUpdaters(root, lanes) {\n      {\n        if (isDevToolsPresent) {\n          var memoizedUpdaters = root.memoizedUpdaters;\n          memoizedUpdaters.forEach(function (schedulingFiber) {\n            addFiberToLanesMap(root, schedulingFiber, lanes);\n          }); // This function intentionally does not clear memoized updaters.\n          // Those may still be relevant to the current commit\n          // and a future one (e.g. Suspense).\n        }\n      }\n    }\n    var fakeActCallbackNode = {}; // $FlowFixMe[missing-local-annot]\n\n    function scheduleCallback(priorityLevel, callback) {\n      {\n        // If we're currently inside an `act` scope, bypass Scheduler and push to\n        // the `act` queue instead.\n        var actQueue = ReactCurrentActQueue.current;\n\n        if (actQueue !== null) {\n          actQueue.push(callback);\n          return fakeActCallbackNode;\n        } else {\n          return scheduleCallback$2(priorityLevel, callback);\n        }\n      }\n    }\n\n    function shouldForceFlushFallbacksInDEV() {\n      // Never force flush in production. This function should get stripped out.\n      return ReactCurrentActQueue.current !== null;\n    }\n\n    function warnIfUpdatesNotWrappedWithActDEV(fiber) {\n      {\n        if (fiber.mode & ConcurrentMode) {\n          if (!isConcurrentActEnvironment()) {\n            // Not in an act environment. No need to warn.\n            return;\n          }\n        } else {\n          // Legacy mode has additional cases where we suppress a warning.\n          if (!isLegacyActEnvironment()) {\n            // Not in an act environment. No need to warn.\n            return;\n          }\n\n          if (executionContext !== NoContext) {\n            // Legacy mode doesn't warn if the update is batched, i.e.\n            // batchedUpdates or flushSync.\n            return;\n          }\n\n          if (\n            fiber.tag !== FunctionComponent &&\n            fiber.tag !== ForwardRef &&\n            fiber.tag !== SimpleMemoComponent\n          ) {\n            // For backwards compatibility with pre-hooks code, legacy mode only\n            // warns for updates that originate from a hook.\n            return;\n          }\n        }\n\n        if (ReactCurrentActQueue.current === null) {\n          var previousFiber = current;\n\n          try {\n            setCurrentFiber(fiber);\n\n            error(\n              \"An update to %s inside a test was not wrapped in act(...).\\n\\n\" +\n                \"When testing, code that causes React state updates should be \" +\n                \"wrapped into act(...):\\n\\n\" +\n                \"act(() => {\\n\" +\n                \"  /* fire events that update state */\\n\" +\n                \"});\\n\" +\n                \"/* assert on the output */\\n\\n\" +\n                \"This ensures that you're testing the behavior the user would see \" +\n                \"in the browser.\" +\n                \" Learn more at https://reactjs.org/link/wrap-tests-with-act\",\n              getComponentNameFromFiber(fiber)\n            );\n          } finally {\n            if (previousFiber) {\n              setCurrentFiber(fiber);\n            } else {\n              resetCurrentFiber();\n            }\n          }\n        }\n      }\n    }\n\n    function warnIfSuspenseResolutionNotWrappedWithActDEV(root) {\n      {\n        if (\n          root.tag !== LegacyRoot &&\n          isConcurrentActEnvironment() &&\n          ReactCurrentActQueue.current === null\n        ) {\n          error(\n            \"A suspended resource finished loading inside a test, but the event \" +\n              \"was not wrapped in act(...).\\n\\n\" +\n              \"When testing, code that resolves suspended data should be wrapped \" +\n              \"into act(...):\\n\\n\" +\n              \"act(() => {\\n\" +\n              \"  /* finish loading suspended data */\\n\" +\n              \"});\\n\" +\n              \"/* assert on the output */\\n\\n\" +\n              \"This ensures that you're testing the behavior the user would see \" +\n              \"in the browser.\" +\n              \" Learn more at https://reactjs.org/link/wrap-tests-with-act\"\n          );\n        }\n      }\n    }\n\n    function setIsRunningInsertionEffect(isRunning) {\n      {\n        isRunningInsertionEffect = isRunning;\n      }\n    }\n\n    /* eslint-disable react-internal/prod-error-codes */\n    // Used by React Refresh runtime through DevTools Global Hook.\n\n    var resolveFamily = null;\n    var failedBoundaries = null;\n    var setRefreshHandler = function (handler) {\n      {\n        resolveFamily = handler;\n      }\n    };\n    function resolveFunctionForHotReloading(type) {\n      {\n        if (resolveFamily === null) {\n          // Hot reloading is disabled.\n          return type;\n        }\n\n        var family = resolveFamily(type);\n\n        if (family === undefined) {\n          return type;\n        } // Use the latest known implementation.\n\n        return family.current;\n      }\n    }\n    function resolveClassForHotReloading(type) {\n      // No implementation differences.\n      return resolveFunctionForHotReloading(type);\n    }\n    function resolveForwardRefForHotReloading(type) {\n      {\n        if (resolveFamily === null) {\n          // Hot reloading is disabled.\n          return type;\n        }\n\n        var family = resolveFamily(type);\n\n        if (family === undefined) {\n          // Check if we're dealing with a real forwardRef. Don't want to crash early.\n          if (\n            type !== null &&\n            type !== undefined &&\n            typeof type.render === \"function\"\n          ) {\n            // ForwardRef is special because its resolved .type is an object,\n            // but it's possible that we only have its inner render function in the map.\n            // If that inner render function is different, we'll build a new forwardRef type.\n            var currentRender = resolveFunctionForHotReloading(type.render);\n\n            if (type.render !== currentRender) {\n              var syntheticType = {\n                $$typeof: REACT_FORWARD_REF_TYPE,\n                render: currentRender\n              };\n\n              if (type.displayName !== undefined) {\n                syntheticType.displayName = type.displayName;\n              }\n\n              return syntheticType;\n            }\n          }\n\n          return type;\n        } // Use the latest known implementation.\n\n        return family.current;\n      }\n    }\n    function isCompatibleFamilyForHotReloading(fiber, element) {\n      {\n        if (resolveFamily === null) {\n          // Hot reloading is disabled.\n          return false;\n        }\n\n        var prevType = fiber.elementType;\n        var nextType = element.type; // If we got here, we know types aren't === equal.\n\n        var needsCompareFamilies = false;\n        var $$typeofNextType =\n          typeof nextType === \"object\" && nextType !== null\n            ? nextType.$$typeof\n            : null;\n\n        switch (fiber.tag) {\n          case ClassComponent: {\n            if (typeof nextType === \"function\") {\n              needsCompareFamilies = true;\n            }\n\n            break;\n          }\n\n          case FunctionComponent: {\n            if (typeof nextType === \"function\") {\n              needsCompareFamilies = true;\n            } else if ($$typeofNextType === REACT_LAZY_TYPE) {\n              // We don't know the inner type yet.\n              // We're going to assume that the lazy inner type is stable,\n              // and so it is sufficient to avoid reconciling it away.\n              // We're not going to unwrap or actually use the new lazy type.\n              needsCompareFamilies = true;\n            }\n\n            break;\n          }\n\n          case ForwardRef: {\n            if ($$typeofNextType === REACT_FORWARD_REF_TYPE) {\n              needsCompareFamilies = true;\n            } else if ($$typeofNextType === REACT_LAZY_TYPE) {\n              needsCompareFamilies = true;\n            }\n\n            break;\n          }\n\n          case MemoComponent:\n          case SimpleMemoComponent: {\n            if ($$typeofNextType === REACT_MEMO_TYPE) {\n              // TODO: if it was but can no longer be simple,\n              // we shouldn't set this.\n              needsCompareFamilies = true;\n            } else if ($$typeofNextType === REACT_LAZY_TYPE) {\n              needsCompareFamilies = true;\n            }\n\n            break;\n          }\n\n          default:\n            return false;\n        } // Check if both types have a family and it's the same one.\n\n        if (needsCompareFamilies) {\n          // Note: memo() and forwardRef() we'll compare outer rather than inner type.\n          // This means both of them need to be registered to preserve state.\n          // If we unwrapped and compared the inner types for wrappers instead,\n          // then we would risk falsely saying two separate memo(Foo)\n          // calls are equivalent because they wrap the same Foo function.\n          var prevFamily = resolveFamily(prevType); // $FlowFixMe[not-a-function] found when upgrading Flow\n\n          if (\n            prevFamily !== undefined &&\n            prevFamily === resolveFamily(nextType)\n          ) {\n            return true;\n          }\n        }\n\n        return false;\n      }\n    }\n    function markFailedErrorBoundaryForHotReloading(fiber) {\n      {\n        if (resolveFamily === null) {\n          // Hot reloading is disabled.\n          return;\n        }\n\n        if (typeof WeakSet !== \"function\") {\n          return;\n        }\n\n        if (failedBoundaries === null) {\n          failedBoundaries = new WeakSet();\n        }\n\n        failedBoundaries.add(fiber);\n      }\n    }\n    var scheduleRefresh = function (root, update) {\n      {\n        if (resolveFamily === null) {\n          // Hot reloading is disabled.\n          return;\n        }\n\n        var staleFamilies = update.staleFamilies,\n          updatedFamilies = update.updatedFamilies;\n        flushPassiveEffects();\n        flushSync(function () {\n          scheduleFibersWithFamiliesRecursively(\n            root.current,\n            updatedFamilies,\n            staleFamilies\n          );\n        });\n      }\n    };\n    var scheduleRoot = function (root, element) {\n      {\n        if (root.context !== emptyContextObject) {\n          // Super edge case: root has a legacy _renderSubtree context\n          // but we don't know the parentComponent so we can't pass it.\n          // Just ignore. We'll delete this with _renderSubtree code path later.\n          return;\n        }\n\n        flushPassiveEffects();\n        flushSync(function () {\n          updateContainer(element, root, null, null);\n        });\n      }\n    };\n\n    function scheduleFibersWithFamiliesRecursively(\n      fiber,\n      updatedFamilies,\n      staleFamilies\n    ) {\n      {\n        var alternate = fiber.alternate,\n          child = fiber.child,\n          sibling = fiber.sibling,\n          tag = fiber.tag,\n          type = fiber.type;\n        var candidateType = null;\n\n        switch (tag) {\n          case FunctionComponent:\n          case SimpleMemoComponent:\n          case ClassComponent:\n            candidateType = type;\n            break;\n\n          case ForwardRef:\n            candidateType = type.render;\n            break;\n        }\n\n        if (resolveFamily === null) {\n          throw new Error(\n            \"Expected resolveFamily to be set during hot reload.\"\n          );\n        }\n\n        var needsRender = false;\n        var needsRemount = false;\n\n        if (candidateType !== null) {\n          var family = resolveFamily(candidateType);\n\n          if (family !== undefined) {\n            if (staleFamilies.has(family)) {\n              needsRemount = true;\n            } else if (updatedFamilies.has(family)) {\n              if (tag === ClassComponent) {\n                needsRemount = true;\n              } else {\n                needsRender = true;\n              }\n            }\n          }\n        }\n\n        if (failedBoundaries !== null) {\n          if (\n            failedBoundaries.has(fiber) || // $FlowFixMe[incompatible-use] found when upgrading Flow\n            (alternate !== null && failedBoundaries.has(alternate))\n          ) {\n            needsRemount = true;\n          }\n        }\n\n        if (needsRemount) {\n          fiber._debugNeedsRemount = true;\n        }\n\n        if (needsRemount || needsRender) {\n          var root = enqueueConcurrentRenderForLane(fiber, SyncLane);\n\n          if (root !== null) {\n            scheduleUpdateOnFiber(root, fiber, SyncLane);\n          }\n        }\n\n        if (child !== null && !needsRemount) {\n          scheduleFibersWithFamiliesRecursively(\n            child,\n            updatedFamilies,\n            staleFamilies\n          );\n        }\n\n        if (sibling !== null) {\n          scheduleFibersWithFamiliesRecursively(\n            sibling,\n            updatedFamilies,\n            staleFamilies\n          );\n        }\n      }\n    }\n\n    var findHostInstancesForRefresh = function (root, families) {\n      {\n        var hostInstances = new Set();\n        var types = new Set(\n          families.map(function (family) {\n            return family.current;\n          })\n        );\n        findHostInstancesForMatchingFibersRecursively(\n          root.current,\n          types,\n          hostInstances\n        );\n        return hostInstances;\n      }\n    };\n\n    function findHostInstancesForMatchingFibersRecursively(\n      fiber,\n      types,\n      hostInstances\n    ) {\n      {\n        var child = fiber.child,\n          sibling = fiber.sibling,\n          tag = fiber.tag,\n          type = fiber.type;\n        var candidateType = null;\n\n        switch (tag) {\n          case FunctionComponent:\n          case SimpleMemoComponent:\n          case ClassComponent:\n            candidateType = type;\n            break;\n\n          case ForwardRef:\n            candidateType = type.render;\n            break;\n        }\n\n        var didMatch = false;\n\n        if (candidateType !== null) {\n          if (types.has(candidateType)) {\n            didMatch = true;\n          }\n        }\n\n        if (didMatch) {\n          // We have a match. This only drills down to the closest host components.\n          // There's no need to search deeper because for the purpose of giving\n          // visual feedback, \"flashing\" outermost parent rectangles is sufficient.\n          findHostInstancesForFiberShallowly(fiber, hostInstances);\n        } else {\n          // If there's no match, maybe there will be one further down in the child tree.\n          if (child !== null) {\n            findHostInstancesForMatchingFibersRecursively(\n              child,\n              types,\n              hostInstances\n            );\n          }\n        }\n\n        if (sibling !== null) {\n          findHostInstancesForMatchingFibersRecursively(\n            sibling,\n            types,\n            hostInstances\n          );\n        }\n      }\n    }\n\n    function findHostInstancesForFiberShallowly(fiber, hostInstances) {\n      {\n        var foundHostInstances = findChildHostInstancesForFiberShallowly(\n          fiber,\n          hostInstances\n        );\n\n        if (foundHostInstances) {\n          return;\n        } // If we didn't find any host children, fallback to closest host parent.\n\n        var node = fiber;\n\n        while (true) {\n          switch (node.tag) {\n            case HostSingleton:\n            case HostComponent:\n              hostInstances.add(node.stateNode);\n              return;\n\n            case HostPortal:\n              hostInstances.add(node.stateNode.containerInfo);\n              return;\n\n            case HostRoot:\n              hostInstances.add(node.stateNode.containerInfo);\n              return;\n          }\n\n          if (node.return === null) {\n            throw new Error(\"Expected to reach root first.\");\n          }\n\n          node = node.return;\n        }\n      }\n    }\n\n    function findChildHostInstancesForFiberShallowly(fiber, hostInstances) {\n      {\n        var node = fiber;\n        var foundHostInstances = false;\n\n        while (true) {\n          if (\n            node.tag === HostComponent ||\n            node.tag === HostHoistable ||\n            false\n          ) {\n            // We got a match.\n            foundHostInstances = true;\n            hostInstances.add(node.stateNode); // There may still be more, so keep searching.\n          } else if (node.child !== null) {\n            node.child.return = node;\n            node = node.child;\n            continue;\n          }\n\n          if (node === fiber) {\n            return foundHostInstances;\n          }\n\n          while (node.sibling === null) {\n            if (node.return === null || node.return === fiber) {\n              return foundHostInstances;\n            }\n\n            node = node.return;\n          }\n\n          node.sibling.return = node.return;\n          node = node.sibling;\n        }\n      }\n\n      return false;\n    }\n\n    var hasBadMapPolyfill;\n\n    {\n      hasBadMapPolyfill = false;\n\n      try {\n        var nonExtensibleObject = Object.preventExtensions({});\n        /* eslint-disable no-new */\n\n        new Map([[nonExtensibleObject, null]]);\n        new Set([nonExtensibleObject]);\n        /* eslint-enable no-new */\n      } catch (e) {\n        // TODO: Consider warning about bad polyfills\n        hasBadMapPolyfill = true;\n      }\n    }\n\n    function FiberNode(tag, pendingProps, key, mode) {\n      // Instance\n      this.tag = tag;\n      this.key = key;\n      this.elementType = null;\n      this.type = null;\n      this.stateNode = null; // Fiber\n\n      this.return = null;\n      this.child = null;\n      this.sibling = null;\n      this.index = 0;\n      this.ref = null;\n      this.refCleanup = null;\n      this.pendingProps = pendingProps;\n      this.memoizedProps = null;\n      this.updateQueue = null;\n      this.memoizedState = null;\n      this.dependencies = null;\n      this.mode = mode; // Effects\n\n      this.flags = NoFlags$1;\n      this.subtreeFlags = NoFlags$1;\n      this.deletions = null;\n      this.lanes = NoLanes;\n      this.childLanes = NoLanes;\n      this.alternate = null;\n\n      {\n        // Note: The following is done to avoid a v8 performance cliff.\n        //\n        // Initializing the fields below to smis and later updating them with\n        // double values will cause Fibers to end up having separate shapes.\n        // This behavior/bug has something to do with Object.preventExtension().\n        // Fortunately this only impacts DEV builds.\n        // Unfortunately it makes React unusably slow for some applications.\n        // To work around this, initialize the fields below with doubles.\n        //\n        // Learn more about this here:\n        // https://github.com/facebook/react/issues/14365\n        // https://bugs.chromium.org/p/v8/issues/detail?id=8538\n        this.actualDuration = Number.NaN;\n        this.actualStartTime = Number.NaN;\n        this.selfBaseDuration = Number.NaN;\n        this.treeBaseDuration = Number.NaN; // It's okay to replace the initial doubles with smis after initialization.\n        // This won't trigger the performance cliff mentioned above,\n        // and it simplifies other profiler code (including DevTools).\n\n        this.actualDuration = 0;\n        this.actualStartTime = -1;\n        this.selfBaseDuration = 0;\n        this.treeBaseDuration = 0;\n      }\n\n      {\n        // This isn't directly used but is handy for debugging internals:\n        this._debugOwner = null;\n        this._debugNeedsRemount = false;\n        this._debugHookTypes = null;\n\n        if (\n          !hasBadMapPolyfill &&\n          typeof Object.preventExtensions === \"function\"\n        ) {\n          Object.preventExtensions(this);\n        }\n      }\n    } // This is a constructor function, rather than a POJO constructor, still\n    // please ensure we do the following:\n    // 1) Nobody should add any instance methods on this. Instance methods can be\n    //    more difficult to predict when they get optimized and they are almost\n    //    never inlined properly in static compilers.\n    // 2) Nobody should rely on `instanceof Fiber` for type testing. We should\n    //    always know when it is a fiber.\n    // 3) We might want to experiment with using numeric keys since they are easier\n    //    to optimize in a non-JIT environment.\n    // 4) We can easily go from a constructor to a createFiber object literal if that\n    //    is faster.\n    // 5) It should be easy to port this to a C struct and keep a C implementation\n    //    compatible.\n\n    function createFiber(tag, pendingProps, key, mode) {\n      // $FlowFixMe[invalid-constructor]: the shapes are exact here but Flow doesn't like constructors\n      return new FiberNode(tag, pendingProps, key, mode);\n    }\n\n    function shouldConstruct(Component) {\n      var prototype = Component.prototype;\n      return !!(prototype && prototype.isReactComponent);\n    }\n\n    function isSimpleFunctionComponent(type) {\n      return (\n        typeof type === \"function\" &&\n        !shouldConstruct(type) &&\n        type.defaultProps === undefined\n      );\n    }\n    function resolveLazyComponentTag(Component) {\n      if (typeof Component === \"function\") {\n        return shouldConstruct(Component) ? ClassComponent : FunctionComponent;\n      } else if (Component !== undefined && Component !== null) {\n        var $$typeof = Component.$$typeof;\n\n        if ($$typeof === REACT_FORWARD_REF_TYPE) {\n          return ForwardRef;\n        }\n\n        if ($$typeof === REACT_MEMO_TYPE) {\n          return MemoComponent;\n        }\n      }\n\n      return IndeterminateComponent;\n    } // This is used to create an alternate fiber to do work on.\n\n    function createWorkInProgress(current, pendingProps) {\n      var workInProgress = current.alternate;\n\n      if (workInProgress === null) {\n        // We use a double buffering pooling technique because we know that we'll\n        // only ever need at most two versions of a tree. We pool the \"other\" unused\n        // node that we're free to reuse. This is lazily created to avoid allocating\n        // extra objects for things that are never updated. It also allow us to\n        // reclaim the extra memory if needed.\n        workInProgress = createFiber(\n          current.tag,\n          pendingProps,\n          current.key,\n          current.mode\n        );\n        workInProgress.elementType = current.elementType;\n        workInProgress.type = current.type;\n        workInProgress.stateNode = current.stateNode;\n\n        {\n          // DEV-only fields\n          workInProgress._debugOwner = current._debugOwner;\n          workInProgress._debugHookTypes = current._debugHookTypes;\n        }\n\n        workInProgress.alternate = current;\n        current.alternate = workInProgress;\n      } else {\n        workInProgress.pendingProps = pendingProps; // Needed because Blocks store data on type.\n\n        workInProgress.type = current.type; // We already have an alternate.\n        // Reset the effect tag.\n\n        workInProgress.flags = NoFlags$1; // The effects are no longer valid.\n\n        workInProgress.subtreeFlags = NoFlags$1;\n        workInProgress.deletions = null;\n\n        {\n          // We intentionally reset, rather than copy, actualDuration & actualStartTime.\n          // This prevents time from endlessly accumulating in new commits.\n          // This has the downside of resetting values for different priority renders,\n          // But works for yielding (the common case) and should support resuming.\n          workInProgress.actualDuration = 0;\n          workInProgress.actualStartTime = -1;\n        }\n      } // Reset all effects except static ones.\n      // Static effects are not specific to a render.\n\n      workInProgress.flags = current.flags & StaticMask;\n      workInProgress.childLanes = current.childLanes;\n      workInProgress.lanes = current.lanes;\n      workInProgress.child = current.child;\n      workInProgress.memoizedProps = current.memoizedProps;\n      workInProgress.memoizedState = current.memoizedState;\n      workInProgress.updateQueue = current.updateQueue; // Clone the dependencies object. This is mutated during the render phase, so\n      // it cannot be shared with the current fiber.\n\n      var currentDependencies = current.dependencies;\n      workInProgress.dependencies =\n        currentDependencies === null\n          ? null\n          : {\n              lanes: currentDependencies.lanes,\n              firstContext: currentDependencies.firstContext\n            }; // These will be overridden during the parent's reconciliation\n\n      workInProgress.sibling = current.sibling;\n      workInProgress.index = current.index;\n      workInProgress.ref = current.ref;\n      workInProgress.refCleanup = current.refCleanup;\n\n      {\n        workInProgress.selfBaseDuration = current.selfBaseDuration;\n        workInProgress.treeBaseDuration = current.treeBaseDuration;\n      }\n\n      {\n        workInProgress._debugNeedsRemount = current._debugNeedsRemount;\n\n        switch (workInProgress.tag) {\n          case IndeterminateComponent:\n          case FunctionComponent:\n          case SimpleMemoComponent:\n            workInProgress.type = resolveFunctionForHotReloading(current.type);\n            break;\n\n          case ClassComponent:\n            workInProgress.type = resolveClassForHotReloading(current.type);\n            break;\n\n          case ForwardRef:\n            workInProgress.type = resolveForwardRefForHotReloading(\n              current.type\n            );\n            break;\n        }\n      }\n\n      return workInProgress;\n    } // Used to reuse a Fiber for a second pass.\n\n    function resetWorkInProgress(workInProgress, renderLanes) {\n      // This resets the Fiber to what createFiber or createWorkInProgress would\n      // have set the values to before during the first pass. Ideally this wouldn't\n      // be necessary but unfortunately many code paths reads from the workInProgress\n      // when they should be reading from current and writing to workInProgress.\n      // We assume pendingProps, index, key, ref, return are still untouched to\n      // avoid doing another reconciliation.\n      // Reset the effect flags but keep any Placement tags, since that's something\n      // that child fiber is setting, not the reconciliation.\n      workInProgress.flags &= StaticMask | Placement; // The effects are no longer valid.\n\n      var current = workInProgress.alternate;\n\n      if (current === null) {\n        // Reset to createFiber's initial values.\n        workInProgress.childLanes = NoLanes;\n        workInProgress.lanes = renderLanes;\n        workInProgress.child = null;\n        workInProgress.subtreeFlags = NoFlags$1;\n        workInProgress.memoizedProps = null;\n        workInProgress.memoizedState = null;\n        workInProgress.updateQueue = null;\n        workInProgress.dependencies = null;\n        workInProgress.stateNode = null;\n\n        {\n          // Note: We don't reset the actualTime counts. It's useful to accumulate\n          // actual time across multiple render passes.\n          workInProgress.selfBaseDuration = 0;\n          workInProgress.treeBaseDuration = 0;\n        }\n      } else {\n        // Reset to the cloned values that createWorkInProgress would've.\n        workInProgress.childLanes = current.childLanes;\n        workInProgress.lanes = current.lanes;\n        workInProgress.child = current.child;\n        workInProgress.subtreeFlags = NoFlags$1;\n        workInProgress.deletions = null;\n        workInProgress.memoizedProps = current.memoizedProps;\n        workInProgress.memoizedState = current.memoizedState;\n        workInProgress.updateQueue = current.updateQueue; // Needed because Blocks store data on type.\n\n        workInProgress.type = current.type; // Clone the dependencies object. This is mutated during the render phase, so\n        // it cannot be shared with the current fiber.\n\n        var currentDependencies = current.dependencies;\n        workInProgress.dependencies =\n          currentDependencies === null\n            ? null\n            : {\n                lanes: currentDependencies.lanes,\n                firstContext: currentDependencies.firstContext\n              };\n\n        {\n          // Note: We don't reset the actualTime counts. It's useful to accumulate\n          // actual time across multiple render passes.\n          workInProgress.selfBaseDuration = current.selfBaseDuration;\n          workInProgress.treeBaseDuration = current.treeBaseDuration;\n        }\n      }\n\n      return workInProgress;\n    }\n    function createHostRootFiber(\n      tag,\n      isStrictMode,\n      concurrentUpdatesByDefaultOverride\n    ) {\n      var mode;\n\n      if (tag === ConcurrentRoot) {\n        mode = ConcurrentMode;\n\n        if (isStrictMode === true) {\n          mode |= StrictLegacyMode | StrictEffectsMode;\n        }\n      } else {\n        mode = NoMode;\n      }\n\n      if (isDevToolsPresent) {\n        // Always collect profile timings when DevTools are present.\n        // This enables DevTools to start capturing timing at any point–\n        // Without some nodes in the tree having empty base times.\n        mode |= ProfileMode;\n      }\n\n      return createFiber(HostRoot, null, null, mode);\n    }\n    function createFiberFromTypeAndProps(\n      type, // React$ElementType\n      key,\n      pendingProps,\n      owner,\n      mode,\n      lanes\n    ) {\n      var fiberTag = IndeterminateComponent; // The resolved type is set if we know what the final type will be. I.e. it's not lazy.\n\n      var resolvedType = type;\n\n      if (typeof type === \"function\") {\n        if (shouldConstruct(type)) {\n          fiberTag = ClassComponent;\n\n          {\n            resolvedType = resolveClassForHotReloading(resolvedType);\n          }\n        } else {\n          {\n            resolvedType = resolveFunctionForHotReloading(resolvedType);\n          }\n        }\n      } else if (typeof type === \"string\") {\n        {\n          fiberTag = HostComponent;\n        }\n      } else {\n        getTag: switch (type) {\n          case REACT_FRAGMENT_TYPE:\n            return createFiberFromFragment(\n              pendingProps.children,\n              mode,\n              lanes,\n              key\n            );\n\n          case REACT_STRICT_MODE_TYPE:\n            fiberTag = Mode;\n            mode |= StrictLegacyMode;\n\n            if ((mode & ConcurrentMode) !== NoMode) {\n              // Strict effects should never run on legacy roots\n              mode |= StrictEffectsMode;\n            }\n\n            break;\n\n          case REACT_PROFILER_TYPE:\n            return createFiberFromProfiler(pendingProps, mode, lanes, key);\n\n          case REACT_SUSPENSE_TYPE:\n            return createFiberFromSuspense(pendingProps, mode, lanes, key);\n\n          case REACT_SUSPENSE_LIST_TYPE:\n            return createFiberFromSuspenseList(pendingProps, mode, lanes, key);\n\n          case REACT_OFFSCREEN_TYPE:\n            return createFiberFromOffscreen(pendingProps, mode, lanes, key);\n\n          case REACT_LEGACY_HIDDEN_TYPE:\n\n          // Fall through\n\n          case REACT_SCOPE_TYPE:\n\n          // Fall through\n\n          case REACT_CACHE_TYPE:\n\n          // Fall through\n\n          case REACT_TRACING_MARKER_TYPE:\n\n          // Fall through\n\n          case REACT_DEBUG_TRACING_MODE_TYPE:\n\n          // Fall through\n\n          default: {\n            if (typeof type === \"object\" && type !== null) {\n              switch (type.$$typeof) {\n                case REACT_PROVIDER_TYPE:\n                  fiberTag = ContextProvider;\n                  break getTag;\n\n                case REACT_CONTEXT_TYPE:\n                  // This is a consumer\n                  fiberTag = ContextConsumer;\n                  break getTag;\n\n                case REACT_FORWARD_REF_TYPE:\n                  fiberTag = ForwardRef;\n\n                  {\n                    resolvedType =\n                      resolveForwardRefForHotReloading(resolvedType);\n                  }\n\n                  break getTag;\n\n                case REACT_MEMO_TYPE:\n                  fiberTag = MemoComponent;\n                  break getTag;\n\n                case REACT_LAZY_TYPE:\n                  fiberTag = LazyComponent;\n                  resolvedType = null;\n                  break getTag;\n              }\n            }\n\n            var info = \"\";\n\n            {\n              if (\n                type === undefined ||\n                (typeof type === \"object\" &&\n                  type !== null &&\n                  Object.keys(type).length === 0)\n              ) {\n                info +=\n                  \" You likely forgot to export your component from the file \" +\n                  \"it's defined in, or you might have mixed up default and \" +\n                  \"named imports.\";\n              }\n\n              var ownerName = owner ? getComponentNameFromFiber(owner) : null;\n\n              if (ownerName) {\n                info += \"\\n\\nCheck the render method of `\" + ownerName + \"`.\";\n              }\n            }\n\n            throw new Error(\n              \"Element type is invalid: expected a string (for built-in \" +\n                \"components) or a class/function (for composite components) \" +\n                (\"but got: \" + (type == null ? type : typeof type) + \".\" + info)\n            );\n          }\n        }\n      }\n\n      var fiber = createFiber(fiberTag, pendingProps, key, mode);\n      fiber.elementType = type;\n      fiber.type = resolvedType;\n      fiber.lanes = lanes;\n\n      {\n        fiber._debugOwner = owner;\n      }\n\n      return fiber;\n    }\n    function createFiberFromElement(element, mode, lanes) {\n      var owner = null;\n\n      {\n        owner = element._owner;\n      }\n\n      var type = element.type;\n      var key = element.key;\n      var pendingProps = element.props;\n      var fiber = createFiberFromTypeAndProps(\n        type,\n        key,\n        pendingProps,\n        owner,\n        mode,\n        lanes\n      );\n\n      {\n        fiber._debugOwner = element._owner;\n      }\n\n      return fiber;\n    }\n    function createFiberFromFragment(elements, mode, lanes, key) {\n      var fiber = createFiber(Fragment, elements, key, mode);\n      fiber.lanes = lanes;\n      return fiber;\n    }\n\n    function createFiberFromProfiler(pendingProps, mode, lanes, key) {\n      {\n        if (typeof pendingProps.id !== \"string\") {\n          error(\n            'Profiler must specify an \"id\" of type `string` as a prop. Received the type `%s` instead.',\n            typeof pendingProps.id\n          );\n        }\n      }\n\n      var fiber = createFiber(Profiler, pendingProps, key, mode | ProfileMode);\n      fiber.elementType = REACT_PROFILER_TYPE;\n      fiber.lanes = lanes;\n\n      {\n        fiber.stateNode = {\n          effectDuration: 0,\n          passiveEffectDuration: 0\n        };\n      }\n\n      return fiber;\n    }\n\n    function createFiberFromSuspense(pendingProps, mode, lanes, key) {\n      var fiber = createFiber(SuspenseComponent, pendingProps, key, mode);\n      fiber.elementType = REACT_SUSPENSE_TYPE;\n      fiber.lanes = lanes;\n      return fiber;\n    }\n    function createFiberFromSuspenseList(pendingProps, mode, lanes, key) {\n      var fiber = createFiber(SuspenseListComponent, pendingProps, key, mode);\n      fiber.elementType = REACT_SUSPENSE_LIST_TYPE;\n      fiber.lanes = lanes;\n      return fiber;\n    }\n    function createFiberFromOffscreen(pendingProps, mode, lanes, key) {\n      var fiber = createFiber(OffscreenComponent, pendingProps, key, mode);\n      fiber.elementType = REACT_OFFSCREEN_TYPE;\n      fiber.lanes = lanes;\n      var primaryChildInstance = {\n        _visibility: OffscreenVisible,\n        _pendingVisibility: OffscreenVisible,\n        _pendingMarkers: null,\n        _retryCache: null,\n        _transitions: null,\n        _current: null,\n        detach: function () {\n          return detachOffscreenInstance(primaryChildInstance);\n        },\n        attach: function () {\n          return attachOffscreenInstance(primaryChildInstance);\n        }\n      };\n      fiber.stateNode = primaryChildInstance;\n      return fiber;\n    }\n    function createFiberFromText(content, mode, lanes) {\n      var fiber = createFiber(HostText, content, null, mode);\n      fiber.lanes = lanes;\n      return fiber;\n    }\n    function createFiberFromPortal(portal, mode, lanes) {\n      var pendingProps = portal.children !== null ? portal.children : [];\n      var fiber = createFiber(HostPortal, pendingProps, portal.key, mode);\n      fiber.lanes = lanes;\n      fiber.stateNode = {\n        containerInfo: portal.containerInfo,\n        pendingChildren: null,\n        // Used by persistent updates\n        implementation: portal.implementation\n      };\n      return fiber;\n    } // Used for stashing WIP properties to replay failed work in DEV.\n\n    function assignFiberPropertiesInDEV(target, source) {\n      if (target === null) {\n        // This Fiber's initial properties will always be overwritten.\n        // We only use a Fiber to ensure the same hidden class so DEV isn't slow.\n        target = createFiber(IndeterminateComponent, null, null, NoMode);\n      } // This is intentionally written as a list of all properties.\n      // We tried to use Object.assign() instead but this is called in\n      // the hottest path, and Object.assign() was too slow:\n      // https://github.com/facebook/react/issues/12502\n      // This code is DEV-only so size is not a concern.\n\n      target.tag = source.tag;\n      target.key = source.key;\n      target.elementType = source.elementType;\n      target.type = source.type;\n      target.stateNode = source.stateNode;\n      target.return = source.return;\n      target.child = source.child;\n      target.sibling = source.sibling;\n      target.index = source.index;\n      target.ref = source.ref;\n      target.refCleanup = source.refCleanup;\n      target.pendingProps = source.pendingProps;\n      target.memoizedProps = source.memoizedProps;\n      target.updateQueue = source.updateQueue;\n      target.memoizedState = source.memoizedState;\n      target.dependencies = source.dependencies;\n      target.mode = source.mode;\n      target.flags = source.flags;\n      target.subtreeFlags = source.subtreeFlags;\n      target.deletions = source.deletions;\n      target.lanes = source.lanes;\n      target.childLanes = source.childLanes;\n      target.alternate = source.alternate;\n\n      {\n        target.actualDuration = source.actualDuration;\n        target.actualStartTime = source.actualStartTime;\n        target.selfBaseDuration = source.selfBaseDuration;\n        target.treeBaseDuration = source.treeBaseDuration;\n      }\n\n      target._debugOwner = source._debugOwner;\n      target._debugNeedsRemount = source._debugNeedsRemount;\n      target._debugHookTypes = source._debugHookTypes;\n      return target;\n    }\n\n    function FiberRootNode(\n      containerInfo, // $FlowFixMe[missing-local-annot]\n      tag,\n      hydrate,\n      identifierPrefix,\n      onRecoverableError,\n      formState\n    ) {\n      this.tag = tag;\n      this.containerInfo = containerInfo;\n      this.pendingChildren = null;\n      this.current = null;\n      this.pingCache = null;\n      this.finishedWork = null;\n      this.timeoutHandle = noTimeout;\n      this.cancelPendingCommit = null;\n      this.context = null;\n      this.pendingContext = null;\n      this.next = null;\n      this.callbackNode = null;\n      this.callbackPriority = NoLane;\n      this.expirationTimes = createLaneMap(NoTimestamp);\n      this.pendingLanes = NoLanes;\n      this.suspendedLanes = NoLanes;\n      this.pingedLanes = NoLanes;\n      this.expiredLanes = NoLanes;\n      this.finishedLanes = NoLanes;\n      this.errorRecoveryDisabledLanes = NoLanes;\n      this.shellSuspendCounter = 0;\n      this.entangledLanes = NoLanes;\n      this.entanglements = createLaneMap(NoLanes);\n      this.hiddenUpdates = createLaneMap(null);\n      this.identifierPrefix = identifierPrefix;\n      this.onRecoverableError = onRecoverableError;\n\n      this.formState = formState;\n      this.incompleteTransitions = new Map();\n\n      {\n        this.effectDuration = 0;\n        this.passiveEffectDuration = 0;\n      }\n\n      {\n        this.memoizedUpdaters = new Set();\n        var pendingUpdatersLaneMap = (this.pendingUpdatersLaneMap = []);\n\n        for (var _i = 0; _i < TotalLanes; _i++) {\n          pendingUpdatersLaneMap.push(new Set());\n        }\n      }\n\n      {\n        switch (tag) {\n          case ConcurrentRoot:\n            this._debugRootType = hydrate ? \"hydrateRoot()\" : \"createRoot()\";\n            break;\n\n          case LegacyRoot:\n            this._debugRootType = hydrate ? \"hydrate()\" : \"render()\";\n            break;\n        }\n      }\n    }\n\n    function createFiberRoot(\n      containerInfo,\n      tag,\n      hydrate,\n      initialChildren,\n      hydrationCallbacks,\n      isStrictMode,\n      concurrentUpdatesByDefaultOverride, // TODO: We have several of these arguments that are conceptually part of the\n      // host config, but because they are passed in at runtime, we have to thread\n      // them through the root constructor. Perhaps we should put them all into a\n      // single type, like a DynamicHostConfig that is defined by the renderer.\n      identifierPrefix,\n      onRecoverableError,\n      transitionCallbacks,\n      formState\n    ) {\n      // $FlowFixMe[invalid-constructor] Flow no longer supports calling new on functions\n      var root = new FiberRootNode(\n        containerInfo,\n        tag,\n        hydrate,\n        identifierPrefix,\n        onRecoverableError,\n        formState\n      );\n      // stateNode is any.\n\n      var uninitializedFiber = createHostRootFiber(tag, isStrictMode);\n      root.current = uninitializedFiber;\n      uninitializedFiber.stateNode = root;\n\n      {\n        var _initialState = {\n          element: initialChildren,\n          isDehydrated: hydrate,\n          cache: null // not enabled yet\n        };\n        uninitializedFiber.memoizedState = _initialState;\n      }\n\n      initializeUpdateQueue(uninitializedFiber);\n      return root;\n    }\n\n    var ReactVersion = \"18.3.0-canary-03d6f7cf0-20240209\";\n\n    function createPortal$1(\n      children,\n      containerInfo, // TODO: figure out the API for cross-renderer implementation.\n      implementation\n    ) {\n      var key =\n        arguments.length > 3 && arguments[3] !== undefined\n          ? arguments[3]\n          : null;\n\n      {\n        checkKeyStringCoercion(key);\n      }\n\n      return {\n        // This tag allow us to uniquely identify this as a React Portal\n        $$typeof: REACT_PORTAL_TYPE,\n        key: key == null ? null : \"\" + key,\n        children: children,\n        containerInfo: containerInfo,\n        implementation: implementation\n      };\n    }\n\n    // Might add PROFILE later.\n\n    var didWarnAboutNestedUpdates;\n    var didWarnAboutFindNodeInStrictMode;\n\n    {\n      didWarnAboutNestedUpdates = false;\n      didWarnAboutFindNodeInStrictMode = {};\n    }\n\n    function getContextForSubtree(parentComponent) {\n      if (!parentComponent) {\n        return emptyContextObject;\n      }\n\n      var fiber = get(parentComponent);\n      var parentContext = findCurrentUnmaskedContext(fiber);\n\n      if (fiber.tag === ClassComponent) {\n        var Component = fiber.type;\n\n        if (isContextProvider(Component)) {\n          return processChildContext(fiber, Component, parentContext);\n        }\n      }\n\n      return parentContext;\n    }\n\n    function findHostInstanceWithWarning(component, methodName) {\n      {\n        var fiber = get(component);\n\n        if (fiber === undefined) {\n          if (typeof component.render === \"function\") {\n            throw new Error(\"Unable to find node on an unmounted component.\");\n          } else {\n            var keys = Object.keys(component).join(\",\");\n            throw new Error(\n              \"Argument appears to not be a ReactComponent. Keys: \" + keys\n            );\n          }\n        }\n\n        var hostFiber = findCurrentHostFiber(fiber);\n\n        if (hostFiber === null) {\n          return null;\n        }\n\n        if (hostFiber.mode & StrictLegacyMode) {\n          var componentName = getComponentNameFromFiber(fiber) || \"Component\";\n\n          if (!didWarnAboutFindNodeInStrictMode[componentName]) {\n            didWarnAboutFindNodeInStrictMode[componentName] = true;\n            var previousFiber = current;\n\n            try {\n              setCurrentFiber(hostFiber);\n\n              if (fiber.mode & StrictLegacyMode) {\n                error(\n                  \"%s is deprecated in StrictMode. \" +\n                    \"%s was passed an instance of %s which is inside StrictMode. \" +\n                    \"Instead, add a ref directly to the element you want to reference. \" +\n                    \"Learn more about using refs safely here: \" +\n                    \"https://reactjs.org/link/strict-mode-find-node\",\n                  methodName,\n                  methodName,\n                  componentName\n                );\n              } else {\n                error(\n                  \"%s is deprecated in StrictMode. \" +\n                    \"%s was passed an instance of %s which renders StrictMode children. \" +\n                    \"Instead, add a ref directly to the element you want to reference. \" +\n                    \"Learn more about using refs safely here: \" +\n                    \"https://reactjs.org/link/strict-mode-find-node\",\n                  methodName,\n                  methodName,\n                  componentName\n                );\n              }\n            } finally {\n              // Ideally this should reset to previous but this shouldn't be called in\n              // render and there's another warning for that anyway.\n              if (previousFiber) {\n                setCurrentFiber(previousFiber);\n              } else {\n                resetCurrentFiber();\n              }\n            }\n          }\n        }\n\n        return getPublicInstance(hostFiber.stateNode);\n      }\n    }\n\n    function createContainer(\n      containerInfo,\n      tag,\n      hydrationCallbacks,\n      isStrictMode,\n      concurrentUpdatesByDefaultOverride,\n      identifierPrefix,\n      onRecoverableError,\n      transitionCallbacks\n    ) {\n      var hydrate = false;\n      var initialChildren = null;\n      return createFiberRoot(\n        containerInfo,\n        tag,\n        hydrate,\n        initialChildren,\n        hydrationCallbacks,\n        isStrictMode,\n        concurrentUpdatesByDefaultOverride,\n        identifierPrefix,\n        onRecoverableError,\n        transitionCallbacks,\n        null\n      );\n    }\n    function updateContainer(element, container, parentComponent, callback) {\n      {\n        onScheduleRoot(container, element);\n      }\n\n      var current$1 = container.current;\n      var lane = requestUpdateLane(current$1);\n\n      var context = getContextForSubtree(parentComponent);\n\n      if (container.context === null) {\n        container.context = context;\n      } else {\n        container.pendingContext = context;\n      }\n\n      {\n        if (isRendering && current !== null && !didWarnAboutNestedUpdates) {\n          didWarnAboutNestedUpdates = true;\n\n          error(\n            \"Render methods should be a pure function of props and state; \" +\n              \"triggering nested component updates from render is not allowed. \" +\n              \"If necessary, trigger nested updates in componentDidUpdate.\\n\\n\" +\n              \"Check the render method of %s.\",\n            getComponentNameFromFiber(current) || \"Unknown\"\n          );\n        }\n      }\n\n      var update = createUpdate(lane); // Caution: React DevTools currently depends on this property\n      // being called \"element\".\n\n      update.payload = {\n        element: element\n      };\n      callback = callback === undefined ? null : callback;\n\n      if (callback !== null) {\n        {\n          if (typeof callback !== \"function\") {\n            error(\n              \"render(...): Expected the last optional `callback` argument to be a \" +\n                \"function. Instead received: %s.\",\n              callback\n            );\n          }\n        }\n\n        update.callback = callback;\n      }\n\n      var root = enqueueUpdate(current$1, update, lane);\n\n      if (root !== null) {\n        scheduleUpdateOnFiber(root, current$1, lane);\n        entangleTransitions(root, current$1, lane);\n      }\n\n      return lane;\n    }\n    function getPublicRootInstance(container) {\n      var containerFiber = container.current;\n\n      if (!containerFiber.child) {\n        return null;\n      }\n\n      switch (containerFiber.child.tag) {\n        case HostSingleton:\n        case HostComponent:\n          return getPublicInstance(containerFiber.child.stateNode);\n\n        default:\n          return containerFiber.child.stateNode;\n      }\n    }\n\n    var shouldErrorImpl = function (fiber) {\n      return null;\n    };\n\n    function shouldError(fiber) {\n      return shouldErrorImpl(fiber);\n    }\n\n    var shouldSuspendImpl = function (fiber) {\n      return false;\n    };\n\n    function shouldSuspend(fiber) {\n      return shouldSuspendImpl(fiber);\n    }\n    var overrideHookState = null;\n    var overrideHookStateDeletePath = null;\n    var overrideHookStateRenamePath = null;\n    var overrideProps = null;\n    var overridePropsDeletePath = null;\n    var overridePropsRenamePath = null;\n    var scheduleUpdate = null;\n    var setErrorHandler = null;\n    var setSuspenseHandler = null;\n\n    {\n      var copyWithDeleteImpl = function (obj, path, index) {\n        var key = path[index];\n        var updated = isArray(obj) ? obj.slice() : assign({}, obj);\n\n        if (index + 1 === path.length) {\n          if (isArray(updated)) {\n            updated.splice(key, 1);\n          } else {\n            delete updated[key];\n          }\n\n          return updated;\n        } // $FlowFixMe[incompatible-use] number or string is fine here\n\n        updated[key] = copyWithDeleteImpl(obj[key], path, index + 1);\n        return updated;\n      };\n\n      var copyWithDelete = function (obj, path) {\n        return copyWithDeleteImpl(obj, path, 0);\n      };\n\n      var copyWithRenameImpl = function (obj, oldPath, newPath, index) {\n        var oldKey = oldPath[index];\n        var updated = isArray(obj) ? obj.slice() : assign({}, obj);\n\n        if (index + 1 === oldPath.length) {\n          var newKey = newPath[index]; // $FlowFixMe[incompatible-use] number or string is fine here\n\n          updated[newKey] = updated[oldKey];\n\n          if (isArray(updated)) {\n            updated.splice(oldKey, 1);\n          } else {\n            delete updated[oldKey];\n          }\n        } else {\n          // $FlowFixMe[incompatible-use] number or string is fine here\n          updated[oldKey] = copyWithRenameImpl(\n            // $FlowFixMe[incompatible-use] number or string is fine here\n            obj[oldKey],\n            oldPath,\n            newPath,\n            index + 1\n          );\n        }\n\n        return updated;\n      };\n\n      var copyWithRename = function (obj, oldPath, newPath) {\n        if (oldPath.length !== newPath.length) {\n          warn(\"copyWithRename() expects paths of the same length\");\n\n          return;\n        } else {\n          for (var i = 0; i < newPath.length - 1; i++) {\n            if (oldPath[i] !== newPath[i]) {\n              warn(\n                \"copyWithRename() expects paths to be the same except for the deepest key\"\n              );\n\n              return;\n            }\n          }\n        }\n\n        return copyWithRenameImpl(obj, oldPath, newPath, 0);\n      };\n\n      var copyWithSetImpl = function (obj, path, index, value) {\n        if (index >= path.length) {\n          return value;\n        }\n\n        var key = path[index];\n        var updated = isArray(obj) ? obj.slice() : assign({}, obj); // $FlowFixMe[incompatible-use] number or string is fine here\n\n        updated[key] = copyWithSetImpl(obj[key], path, index + 1, value);\n        return updated;\n      };\n\n      var copyWithSet = function (obj, path, value) {\n        return copyWithSetImpl(obj, path, 0, value);\n      };\n\n      var findHook = function (fiber, id) {\n        // For now, the \"id\" of stateful hooks is just the stateful hook index.\n        // This may change in the future with e.g. nested hooks.\n        var currentHook = fiber.memoizedState;\n\n        while (currentHook !== null && id > 0) {\n          currentHook = currentHook.next;\n          id--;\n        }\n\n        return currentHook;\n      }; // Support DevTools editable values for useState and useReducer.\n\n      overrideHookState = function (fiber, id, path, value) {\n        var hook = findHook(fiber, id);\n\n        if (hook !== null) {\n          var newState = copyWithSet(hook.memoizedState, path, value);\n          hook.memoizedState = newState;\n          hook.baseState = newState; // We aren't actually adding an update to the queue,\n          // because there is no update we can add for useReducer hooks that won't trigger an error.\n          // (There's no appropriate action type for DevTools overrides.)\n          // As a result though, React will see the scheduled update as a noop and bailout.\n          // Shallow cloning props works as a workaround for now to bypass the bailout check.\n\n          fiber.memoizedProps = assign({}, fiber.memoizedProps);\n          var root = enqueueConcurrentRenderForLane(fiber, SyncLane);\n\n          if (root !== null) {\n            scheduleUpdateOnFiber(root, fiber, SyncLane);\n          }\n        }\n      };\n\n      overrideHookStateDeletePath = function (fiber, id, path) {\n        var hook = findHook(fiber, id);\n\n        if (hook !== null) {\n          var newState = copyWithDelete(hook.memoizedState, path);\n          hook.memoizedState = newState;\n          hook.baseState = newState; // We aren't actually adding an update to the queue,\n          // because there is no update we can add for useReducer hooks that won't trigger an error.\n          // (There's no appropriate action type for DevTools overrides.)\n          // As a result though, React will see the scheduled update as a noop and bailout.\n          // Shallow cloning props works as a workaround for now to bypass the bailout check.\n\n          fiber.memoizedProps = assign({}, fiber.memoizedProps);\n          var root = enqueueConcurrentRenderForLane(fiber, SyncLane);\n\n          if (root !== null) {\n            scheduleUpdateOnFiber(root, fiber, SyncLane);\n          }\n        }\n      };\n\n      overrideHookStateRenamePath = function (fiber, id, oldPath, newPath) {\n        var hook = findHook(fiber, id);\n\n        if (hook !== null) {\n          var newState = copyWithRename(hook.memoizedState, oldPath, newPath);\n          hook.memoizedState = newState;\n          hook.baseState = newState; // We aren't actually adding an update to the queue,\n          // because there is no update we can add for useReducer hooks that won't trigger an error.\n          // (There's no appropriate action type for DevTools overrides.)\n          // As a result though, React will see the scheduled update as a noop and bailout.\n          // Shallow cloning props works as a workaround for now to bypass the bailout check.\n\n          fiber.memoizedProps = assign({}, fiber.memoizedProps);\n          var root = enqueueConcurrentRenderForLane(fiber, SyncLane);\n\n          if (root !== null) {\n            scheduleUpdateOnFiber(root, fiber, SyncLane);\n          }\n        }\n      }; // Support DevTools props for function components, forwardRef, memo, host components, etc.\n\n      overrideProps = function (fiber, path, value) {\n        fiber.pendingProps = copyWithSet(fiber.memoizedProps, path, value);\n\n        if (fiber.alternate) {\n          fiber.alternate.pendingProps = fiber.pendingProps;\n        }\n\n        var root = enqueueConcurrentRenderForLane(fiber, SyncLane);\n\n        if (root !== null) {\n          scheduleUpdateOnFiber(root, fiber, SyncLane);\n        }\n      };\n\n      overridePropsDeletePath = function (fiber, path) {\n        fiber.pendingProps = copyWithDelete(fiber.memoizedProps, path);\n\n        if (fiber.alternate) {\n          fiber.alternate.pendingProps = fiber.pendingProps;\n        }\n\n        var root = enqueueConcurrentRenderForLane(fiber, SyncLane);\n\n        if (root !== null) {\n          scheduleUpdateOnFiber(root, fiber, SyncLane);\n        }\n      };\n\n      overridePropsRenamePath = function (fiber, oldPath, newPath) {\n        fiber.pendingProps = copyWithRename(\n          fiber.memoizedProps,\n          oldPath,\n          newPath\n        );\n\n        if (fiber.alternate) {\n          fiber.alternate.pendingProps = fiber.pendingProps;\n        }\n\n        var root = enqueueConcurrentRenderForLane(fiber, SyncLane);\n\n        if (root !== null) {\n          scheduleUpdateOnFiber(root, fiber, SyncLane);\n        }\n      };\n\n      scheduleUpdate = function (fiber) {\n        var root = enqueueConcurrentRenderForLane(fiber, SyncLane);\n\n        if (root !== null) {\n          scheduleUpdateOnFiber(root, fiber, SyncLane);\n        }\n      };\n\n      setErrorHandler = function (newShouldErrorImpl) {\n        shouldErrorImpl = newShouldErrorImpl;\n      };\n\n      setSuspenseHandler = function (newShouldSuspendImpl) {\n        shouldSuspendImpl = newShouldSuspendImpl;\n      };\n    }\n\n    function findHostInstanceByFiber(fiber) {\n      var hostFiber = findCurrentHostFiber(fiber);\n\n      if (hostFiber === null) {\n        return null;\n      }\n\n      return hostFiber.stateNode;\n    }\n\n    function emptyFindFiberByHostInstance(instance) {\n      return null;\n    }\n\n    function getCurrentFiberForDevTools() {\n      return current;\n    }\n\n    function injectIntoDevTools(devToolsConfig) {\n      var findFiberByHostInstance = devToolsConfig.findFiberByHostInstance;\n      var ReactCurrentDispatcher = ReactSharedInternals.ReactCurrentDispatcher;\n      return injectInternals({\n        bundleType: devToolsConfig.bundleType,\n        version: devToolsConfig.version,\n        rendererPackageName: devToolsConfig.rendererPackageName,\n        rendererConfig: devToolsConfig.rendererConfig,\n        overrideHookState: overrideHookState,\n        overrideHookStateDeletePath: overrideHookStateDeletePath,\n        overrideHookStateRenamePath: overrideHookStateRenamePath,\n        overrideProps: overrideProps,\n        overridePropsDeletePath: overridePropsDeletePath,\n        overridePropsRenamePath: overridePropsRenamePath,\n        setErrorHandler: setErrorHandler,\n        setSuspenseHandler: setSuspenseHandler,\n        scheduleUpdate: scheduleUpdate,\n        currentDispatcherRef: ReactCurrentDispatcher,\n        findHostInstanceByFiber: findHostInstanceByFiber,\n        findFiberByHostInstance:\n          findFiberByHostInstance || emptyFindFiberByHostInstance,\n        // React Refresh\n        findHostInstancesForRefresh: findHostInstancesForRefresh,\n        scheduleRefresh: scheduleRefresh,\n        scheduleRoot: scheduleRoot,\n        setRefreshHandler: setRefreshHandler,\n        // Enables DevTools to append owner stacks to error messages in DEV mode.\n        getCurrentFiber: getCurrentFiberForDevTools,\n        // Enables DevTools to detect reconciler version rather than renderer version\n        // which may not match for third party renderers.\n        reconcilerVersion: ReactVersion\n      });\n    }\n\n    var ReactCurrentOwner = ReactSharedInternals.ReactCurrentOwner;\n    function findHostInstance_DEPRECATED(componentOrHandle) {\n      {\n        var owner = ReactCurrentOwner.current;\n\n        if (owner !== null && owner.stateNode !== null) {\n          if (!owner.stateNode._warnedAboutRefsInRender) {\n            error(\n              \"%s is accessing findNodeHandle inside its render(). \" +\n                \"render() should be a pure function of props and state. It should \" +\n                \"never access something that requires stale data from the previous \" +\n                \"render, such as refs. Move this logic to componentDidMount and \" +\n                \"componentDidUpdate instead.\",\n              getComponentNameFromType(owner.type) || \"A component\"\n            );\n          }\n\n          owner.stateNode._warnedAboutRefsInRender = true;\n        }\n      }\n\n      if (componentOrHandle == null) {\n        return null;\n      } // For compatibility with Fabric instances\n\n      if (\n        componentOrHandle.canonical &&\n        componentOrHandle.canonical.publicInstance\n      ) {\n        // $FlowExpectedError[incompatible-return] Can't refine componentOrHandle as a Fabric instance\n        return componentOrHandle.canonical.publicInstance;\n      } // For compatibility with legacy renderer instances\n\n      if (componentOrHandle._nativeTag) {\n        // $FlowFixMe[incompatible-exact] Necessary when running Flow on Fabric\n        // $FlowFixMe[incompatible-return]\n        return componentOrHandle;\n      }\n\n      var hostInstance;\n\n      {\n        hostInstance = findHostInstanceWithWarning(\n          componentOrHandle,\n          \"findHostInstance_DEPRECATED\"\n        );\n      } // findHostInstance handles legacy vs. Fabric differences correctly\n      // $FlowFixMe[incompatible-exact] we need to fix the definition of `HostComponent` to use NativeMethods as an interface, not as a type.\n      // $FlowFixMe[incompatible-return]\n\n      return hostInstance;\n    }\n    function findNodeHandle(componentOrHandle) {\n      {\n        var owner = ReactCurrentOwner.current;\n\n        if (owner !== null && owner.stateNode !== null) {\n          if (!owner.stateNode._warnedAboutRefsInRender) {\n            error(\n              \"%s is accessing findNodeHandle inside its render(). \" +\n                \"render() should be a pure function of props and state. It should \" +\n                \"never access something that requires stale data from the previous \" +\n                \"render, such as refs. Move this logic to componentDidMount and \" +\n                \"componentDidUpdate instead.\",\n              getComponentNameFromType(owner.type) || \"A component\"\n            );\n          }\n\n          owner.stateNode._warnedAboutRefsInRender = true;\n        }\n      }\n\n      if (componentOrHandle == null) {\n        return null;\n      }\n\n      if (typeof componentOrHandle === \"number\") {\n        // Already a node handle\n        return componentOrHandle;\n      } // For compatibility with legacy renderer instances\n\n      if (componentOrHandle._nativeTag) {\n        return componentOrHandle._nativeTag;\n      } // For compatibility with Fabric instances\n\n      if (\n        componentOrHandle.canonical != null &&\n        componentOrHandle.canonical.nativeTag != null\n      ) {\n        return componentOrHandle.canonical.nativeTag;\n      } // For compatibility with Fabric public instances\n\n      var nativeTag =\n        ReactNativePrivateInterface.getNativeTagFromPublicInstance(\n          componentOrHandle\n        );\n\n      if (nativeTag) {\n        return nativeTag;\n      }\n\n      var hostInstance;\n\n      {\n        hostInstance = findHostInstanceWithWarning(\n          componentOrHandle,\n          \"findNodeHandle\"\n        );\n      }\n\n      if (hostInstance == null) {\n        // $FlowFixMe[incompatible-return] Flow limitation in refining an opaque type\n        return hostInstance;\n      }\n\n      if (hostInstance._nativeTag != null) {\n        // $FlowFixMe[incompatible-return] For compatibility with legacy renderer instances\n        return hostInstance._nativeTag;\n      } // $FlowFixMe[incompatible-call] Necessary when running Flow on the legacy renderer\n\n      return ReactNativePrivateInterface.getNativeTagFromPublicInstance(\n        hostInstance\n      );\n    }\n    function dispatchCommand(handle, command, args) {\n      var nativeTag =\n        handle._nativeTag != null\n          ? handle._nativeTag\n          : ReactNativePrivateInterface.getNativeTagFromPublicInstance(handle);\n\n      if (nativeTag == null) {\n        {\n          error(\n            \"dispatchCommand was called with a ref that isn't a \" +\n              \"native component. Use React.forwardRef to get access to the underlying native component\"\n          );\n        }\n\n        return;\n      }\n\n      var node = ReactNativePrivateInterface.getNodeFromPublicInstance(handle);\n\n      if (node != null) {\n        nativeFabricUIManager.dispatchCommand(node, command, args);\n      } else {\n        ReactNativePrivateInterface.UIManager.dispatchViewManagerCommand(\n          nativeTag,\n          command,\n          args\n        );\n      }\n    }\n    function sendAccessibilityEvent(handle, eventType) {\n      var nativeTag =\n        handle._nativeTag != null\n          ? handle._nativeTag\n          : ReactNativePrivateInterface.getNativeTagFromPublicInstance(handle);\n\n      if (nativeTag == null) {\n        {\n          error(\n            \"sendAccessibilityEvent was called with a ref that isn't a \" +\n              \"native component. Use React.forwardRef to get access to the underlying native component\"\n          );\n        }\n\n        return;\n      }\n\n      var node = ReactNativePrivateInterface.getNodeFromPublicInstance(handle);\n\n      if (node != null) {\n        nativeFabricUIManager.sendAccessibilityEvent(node, eventType);\n      } else {\n        ReactNativePrivateInterface.legacySendAccessibilityEvent(\n          nativeTag,\n          eventType\n        );\n      }\n    }\n    function getNodeFromInternalInstanceHandle(internalInstanceHandle) {\n      return (\n        // $FlowExpectedError[incompatible-return] internalInstanceHandle is opaque but we need to make an exception here.\n        internalInstanceHandle && // $FlowExpectedError[incompatible-return]\n        internalInstanceHandle.stateNode && // $FlowExpectedError[incompatible-use]\n        internalInstanceHandle.stateNode.node\n      );\n    } // Should have been PublicInstance from ReactFiberConfigFabric\n    // Should have been PublicInstance from ReactFiberConfigNative\n    // Remove this once Paper is no longer supported and DOM Node API are enabled by default in RN.\n\n    function isChildPublicInstance(parentInstance, childInstance) {\n      {\n        // Paper\n        if (\n          // $FlowExpectedError[incompatible-type]\n          // $FlowExpectedError[prop-missing] Don't check via `instanceof ReactNativeFiberHostComponent`, so it won't be leaked to Fabric.\n          parentInstance._internalFiberInstanceHandleDEV && // $FlowExpectedError[incompatible-type]\n          // $FlowExpectedError[prop-missing] Don't check via `instanceof ReactNativeFiberHostComponent`, so it won't be leaked to Fabric.\n          childInstance._internalFiberInstanceHandleDEV\n        ) {\n          return doesFiberContain(\n            // $FlowExpectedError[incompatible-call]\n            parentInstance._internalFiberInstanceHandleDEV, // $FlowExpectedError[incompatible-call]\n            childInstance._internalFiberInstanceHandleDEV\n          );\n        }\n\n        var parentInternalInstanceHandle = // $FlowExpectedError[incompatible-call] Type for parentInstance should have been PublicInstance from ReactFiberConfigFabric.\n          ReactNativePrivateInterface.getInternalInstanceHandleFromPublicInstance(\n            parentInstance\n          );\n        var childInternalInstanceHandle = // $FlowExpectedError[incompatible-call] Type for childInstance should have been PublicInstance from ReactFiberConfigFabric.\n          ReactNativePrivateInterface.getInternalInstanceHandleFromPublicInstance(\n            childInstance\n          ); // Fabric\n\n        if (\n          parentInternalInstanceHandle != null &&\n          childInternalInstanceHandle != null\n        ) {\n          return doesFiberContain(\n            parentInternalInstanceHandle,\n            childInternalInstanceHandle\n          );\n        } // Means that one instance is from Fabric and other is from Paper.\n\n        return false;\n      }\n    }\n\n    var emptyObject = {};\n\n    {\n      Object.freeze(emptyObject);\n    } // $FlowFixMe[missing-local-annot]\n\n    function createHierarchy(fiberHierarchy) {\n      return fiberHierarchy.map(function (fiber) {\n        return {\n          name: getComponentNameFromType(fiber.type),\n          getInspectorData: function (findNodeHandle) {\n            return {\n              props: getHostProps(fiber),\n              measure: function (callback) {\n                // If this is Fabric, we'll find a shadow node and use that to measure.\n                var hostFiber = findCurrentHostFiber(fiber);\n                var node =\n                  hostFiber != null &&\n                  hostFiber.stateNode !== null &&\n                  hostFiber.stateNode.node;\n\n                if (node) {\n                  nativeFabricUIManager.measure(node, callback);\n                } else {\n                  return ReactNativePrivateInterface.UIManager.measure(\n                    getHostNode(fiber, findNodeHandle),\n                    callback\n                  );\n                }\n              }\n            };\n          }\n        };\n      });\n    } // $FlowFixMe[missing-local-annot]\n\n    function getHostNode(fiber, findNodeHandle) {\n      {\n        var hostNode; // look for children first for the hostNode\n        // as composite fibers do not have a hostNode\n\n        while (fiber) {\n          if (fiber.stateNode !== null && fiber.tag === HostComponent) {\n            hostNode = findNodeHandle(fiber.stateNode);\n          }\n\n          if (hostNode) {\n            return hostNode;\n          }\n\n          fiber = fiber.child;\n        }\n\n        return null;\n      }\n    } // $FlowFixMe[missing-local-annot]\n\n    function getHostProps(fiber) {\n      var host = findCurrentHostFiber(fiber);\n\n      if (host) {\n        return host.memoizedProps || emptyObject;\n      }\n\n      return emptyObject;\n    }\n\n    function getInspectorDataForInstance(closestInstance) {\n      {\n        // Handle case where user clicks outside of ReactNative\n        if (!closestInstance) {\n          return {\n            hierarchy: [],\n            props: emptyObject,\n            selectedIndex: null,\n            componentStack: \"\"\n          };\n        }\n\n        var fiber = findCurrentFiberUsingSlowPath(closestInstance);\n        var fiberHierarchy = getOwnerHierarchy(fiber);\n        var instance = lastNonHostInstance(fiberHierarchy);\n        var hierarchy = createHierarchy(fiberHierarchy);\n        var props = getHostProps(instance);\n        var selectedIndex = fiberHierarchy.indexOf(instance);\n        var componentStack =\n          fiber !== null ? getStackByFiberInDevAndProd(fiber) : \"\";\n        return {\n          closestInstance: instance,\n          hierarchy: hierarchy,\n          props: props,\n          selectedIndex: selectedIndex,\n          componentStack: componentStack\n        };\n      }\n    }\n\n    function getOwnerHierarchy(instance) {\n      var hierarchy = [];\n      traverseOwnerTreeUp(hierarchy, instance);\n      return hierarchy;\n    } // $FlowFixMe[missing-local-annot]\n\n    function lastNonHostInstance(hierarchy) {\n      for (var i = hierarchy.length - 1; i > 1; i--) {\n        var instance = hierarchy[i];\n\n        if (instance.tag !== HostComponent) {\n          return instance;\n        }\n      }\n\n      return hierarchy[0];\n    } // $FlowFixMe[missing-local-annot]\n\n    function traverseOwnerTreeUp(hierarchy, instance) {\n      {\n        if (instance) {\n          hierarchy.unshift(instance);\n          traverseOwnerTreeUp(hierarchy, instance._debugOwner);\n        }\n      }\n    }\n\n    function getInspectorDataForViewTag(viewTag) {\n      {\n        var closestInstance = getInstanceFromTag(viewTag);\n        return getInspectorDataForInstance(closestInstance);\n      }\n    }\n\n    function getInspectorDataForViewAtPoint(\n      findNodeHandle,\n      inspectedView,\n      locationX,\n      locationY,\n      callback\n    ) {\n      {\n        var closestInstance = null;\n        var fabricNode =\n          ReactNativePrivateInterface.getNodeFromPublicInstance(inspectedView);\n\n        if (fabricNode) {\n          // For Fabric we can look up the instance handle directly and measure it.\n          nativeFabricUIManager.findNodeAtPoint(\n            fabricNode,\n            locationX,\n            locationY,\n            function (internalInstanceHandle) {\n              var node =\n                internalInstanceHandle != null\n                  ? getNodeFromInternalInstanceHandle(internalInstanceHandle)\n                  : null;\n\n              if (internalInstanceHandle == null || node == null) {\n                callback(\n                  assign(\n                    {\n                      pointerY: locationY,\n                      frame: {\n                        left: 0,\n                        top: 0,\n                        width: 0,\n                        height: 0\n                      }\n                    },\n                    getInspectorDataForInstance(closestInstance)\n                  )\n                );\n                return;\n              }\n\n              closestInstance =\n                internalInstanceHandle.stateNode.canonical\n                  .internalInstanceHandle; // Note: this is deprecated and we want to remove it ASAP. Keeping it here for React DevTools compatibility for now.\n\n              var nativeViewTag =\n                internalInstanceHandle.stateNode.canonical.nativeTag;\n              nativeFabricUIManager.measure(\n                node,\n                function (x, y, width, height, pageX, pageY) {\n                  var inspectorData =\n                    getInspectorDataForInstance(closestInstance);\n                  callback(\n                    assign({}, inspectorData, {\n                      pointerY: locationY,\n                      frame: {\n                        left: pageX,\n                        top: pageY,\n                        width: width,\n                        height: height\n                      },\n                      touchedViewTag: nativeViewTag\n                    })\n                  );\n                }\n              );\n            }\n          );\n        } else if (inspectedView._internalFiberInstanceHandleDEV != null) {\n          // For Paper we fall back to the old strategy using the React tag.\n          ReactNativePrivateInterface.UIManager.findSubviewIn(\n            findNodeHandle(inspectedView),\n            [locationX, locationY],\n            function (nativeViewTag, left, top, width, height) {\n              var inspectorData = getInspectorDataForInstance(\n                getInstanceFromTag(nativeViewTag)\n              );\n              callback(\n                assign({}, inspectorData, {\n                  pointerY: locationY,\n                  frame: {\n                    left: left,\n                    top: top,\n                    width: width,\n                    height: height\n                  },\n                  touchedViewTag: nativeViewTag\n                })\n              );\n            }\n          );\n        } else {\n          error(\n            \"getInspectorDataForViewAtPoint expects to receive a host component\"\n          );\n\n          return;\n        }\n      }\n    }\n\n    function onRecoverableError(error$1) {\n      // TODO: Expose onRecoverableError option to userspace\n      // eslint-disable-next-line react-internal/no-production-logging, react-internal/warning-args\n      error(error$1);\n    }\n\n    function render(element, containerTag, callback) {\n      var root = roots.get(containerTag);\n\n      if (!root) {\n        // TODO (bvaughn): If we decide to keep the wrapper component,\n        // We could create a wrapper for containerTag as well to reduce special casing.\n        root = createContainer(\n          containerTag,\n          LegacyRoot,\n          null,\n          false,\n          null,\n          \"\",\n          onRecoverableError,\n          null\n        );\n        roots.set(containerTag, root);\n      }\n\n      updateContainer(element, root, null, callback);\n      return getPublicRootInstance(root);\n    }\n\n    function unmountComponentAtNode(containerTag) {\n      var root = roots.get(containerTag);\n\n      if (root) {\n        // TODO: Is it safe to reset this now or should I wait since this unmount could be deferred?\n        updateContainer(null, root, null, function () {\n          roots.delete(containerTag);\n        });\n      }\n    }\n\n    function unmountComponentAtNodeAndRemoveContainer(containerTag) {\n      unmountComponentAtNode(containerTag); // Call back into native to remove all of the subviews from this container\n\n      ReactNativePrivateInterface.UIManager.removeRootView(containerTag);\n    }\n\n    function createPortal(children, containerTag) {\n      var key =\n        arguments.length > 2 && arguments[2] !== undefined\n          ? arguments[2]\n          : null;\n      return createPortal$1(children, containerTag, null, key);\n    }\n\n    setBatchingImplementation(batchedUpdates);\n\n    function computeComponentStackForErrorReporting(reactTag) {\n      var fiber = getInstanceFromTag(reactTag);\n\n      if (!fiber) {\n        return \"\";\n      }\n\n      return getStackByFiberInDevAndProd(fiber);\n    }\n\n    var roots = new Map();\n    var Internals = {\n      computeComponentStackForErrorReporting:\n        computeComponentStackForErrorReporting\n    };\n    injectIntoDevTools({\n      findFiberByHostInstance: getInstanceFromTag,\n      bundleType: 1,\n      version: ReactVersion,\n      rendererPackageName: \"react-native-renderer\",\n      rendererConfig: {\n        getInspectorDataForInstance: getInspectorDataForInstance,\n        getInspectorDataForViewTag: getInspectorDataForViewTag,\n        getInspectorDataForViewAtPoint: getInspectorDataForViewAtPoint.bind(\n          null,\n          findNodeHandle\n        )\n      }\n    });\n\n    exports.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED = Internals;\n    exports.createPortal = createPortal;\n    exports.dispatchCommand = dispatchCommand;\n    exports.findHostInstance_DEPRECATED = findHostInstance_DEPRECATED;\n    exports.findNodeHandle = findNodeHandle;\n    exports.getInspectorDataForInstance = getInspectorDataForInstance;\n    exports.isChildPublicInstance = isChildPublicInstance;\n    exports.render = render;\n    exports.sendAccessibilityEvent = sendAccessibilityEvent;\n    exports.unmountComponentAtNode = unmountComponentAtNode;\n    exports.unmountComponentAtNodeAndRemoveContainer =\n      unmountComponentAtNodeAndRemoveContainer;\n    exports.unstable_batchedUpdates = batchedUpdates$1;\n    /* global __REACT_DEVTOOLS_GLOBAL_HOOK__ */\n    if (\n      typeof __REACT_DEVTOOLS_GLOBAL_HOOK__ !== \"undefined\" &&\n      typeof __REACT_DEVTOOLS_GLOBAL_HOOK__.registerInternalModuleStop ===\n        \"function\"\n    ) {\n      __REACT_DEVTOOLS_GLOBAL_HOOK__.registerInternalModuleStop(new Error());\n    }\n  })();\n}\n"],"mappings":"AAaA,YAAY;;AAEZ,IAAIA,OAAO,EAAE;EACX,CAAC,YAAY;IACX,YAAY;IAGZ,IACE,OAAOC,8BAA8B,KAAK,WAAW,IACrD,OAAOA,8BAA8B,CAACC,2BAA2B,KAC/D,UAAU,EACZ;MACAD,8BAA8B,CAACC,2BAA2B,CAAC,IAAIC,KAAK,CAAC,CAAC,CAAC;IACzE;IACA,IAAIC,KAAK,GAAGC,OAAO,CAAC,OAAO,CAAC;IAC5BA,OAAO,CAAC,sEAAsE,CAAC;IAC/E,IAAIC,2BAA2B,GAAGD,OAAO,CAAC,iEAAiE,CAAC;IAC5G,IAAIE,SAAS,GAAGF,OAAO,CAAC,WAAW,CAAC;IAEpC,IAAIG,oBAAoB,GACtBJ,KAAK,CAACK,kDAAkD;IAO1D,SAASC,IAAIA,CAACC,MAAM,EAAE;MACpB;QACE;UACE,KACE,IAAIC,IAAI,GAAGC,SAAS,CAACC,MAAM,EACzBC,IAAI,GAAG,IAAIC,KAAK,CAACJ,IAAI,GAAG,CAAC,GAAGA,IAAI,GAAG,CAAC,GAAG,CAAC,CAAC,EACzCK,IAAI,GAAG,CAAC,EACVA,IAAI,GAAGL,IAAI,EACXK,IAAI,EAAE,EACN;YACAF,IAAI,CAACE,IAAI,GAAG,CAAC,CAAC,GAAGJ,SAAS,CAACI,IAAI,CAAC;UAClC;UAEAC,YAAY,CAAC,MAAM,EAAEP,MAAM,EAAEI,IAAI,CAAC;QACpC;MACF;IACF;IACA,SAASI,KAAKA,CAACR,MAAM,EAAE;MACrB;QACE;UACE,KACE,IAAIS,KAAK,GAAGP,SAAS,CAACC,MAAM,EAC1BC,IAAI,GAAG,IAAIC,KAAK,CAACI,KAAK,GAAG,CAAC,GAAGA,KAAK,GAAG,CAAC,GAAG,CAAC,CAAC,EAC3CC,KAAK,GAAG,CAAC,EACXA,KAAK,GAAGD,KAAK,EACbC,KAAK,EAAE,EACP;YACAN,IAAI,CAACM,KAAK,GAAG,CAAC,CAAC,GAAGR,SAAS,CAACQ,KAAK,CAAC;UACpC;UAEAH,YAAY,CAAC,OAAO,EAAEP,MAAM,EAAEI,IAAI,CAAC;QACrC;MACF;IACF;IAEA,SAASG,YAAYA,CAACI,KAAK,EAAEX,MAAM,EAAEI,IAAI,EAAE;MAGzC;QACE,IAAIQ,sBAAsB,GACxBf,oBAAoB,CAACe,sBAAsB;QAC7C,IAAIC,KAAK,GAAGD,sBAAsB,CAACE,gBAAgB,CAAC,CAAC;QAErD,IAAID,KAAK,KAAK,EAAE,EAAE;UAChBb,MAAM,IAAI,IAAI;UACdI,IAAI,GAAGA,IAAI,CAACW,MAAM,CAAC,CAACF,KAAK,CAAC,CAAC;QAC7B;QAEA,IAAIG,cAAc,GAAGZ,IAAI,CAACa,GAAG,CAAC,UAAUC,IAAI,EAAE;UAC5C,OAAOC,MAAM,CAACD,IAAI,CAAC;QACrB,CAAC,CAAC;QAEFF,cAAc,CAACI,OAAO,CAAC,WAAW,GAAGpB,MAAM,CAAC;QAI5CqB,QAAQ,CAACC,SAAS,CAACC,KAAK,CAACC,IAAI,CAACC,OAAO,CAACd,KAAK,CAAC,EAAEc,OAAO,EAAET,cAAc,CAAC;MACxE;IACF;IAEA,IAAIU,QAAQ,GAAG,IAAI;IAEnB;MACE,IACE,QACA,OAAOC,MAAM,CAACC,aAAa,KAAK,UAAU,IAC1C,OAAOC,QAAQ,KAAK,WAAW,IAC/B,OAAOA,QAAQ,CAACC,WAAW,KAAK,UAAU,EAC1C;QACAJ,QAAQ,GAAGG,QAAQ,CAACE,aAAa,CAAC,OAAO,CAAC;MAC5C;IACF;IAEA,SAASC,yBAAyBA,CAACC,IAAI,EAAEC,IAAI,EAAEC,OAAO,EAAE;MACtD;QAmBE,IAAIT,QAAQ,EAAE;UACZ,IAAIU,GAAG,GAAGP,QAAQ,CAACC,WAAW,CAAC,OAAO,CAAC;UACvC,IAAIO,OAAO,GAAG,KAAK;UAOnB,IAAIC,QAAQ,GAAG,IAAI;UAInB,IAAIC,WAAW,GAAGZ,MAAM,CAACa,KAAK;UAG9B,IAAIC,qBAAqB,GAAGC,MAAM,CAACC,wBAAwB,CACzDhB,MAAM,EACN,OACF,CAAC;UAED,IAAIiB,oBAAoB,GAAG,SAAAA,CAAA,EAAY;YAKrClB,QAAQ,CAACmB,mBAAmB,CAACC,OAAO,EAAEC,YAAY,EAAE,KAAK,CAAC;YAK1D,IACE,OAAOpB,MAAM,CAACa,KAAK,KAAK,WAAW,IACnCb,MAAM,CAACqB,cAAc,CAAC,OAAO,CAAC,EAC9B;cACArB,MAAM,CAACa,KAAK,GAAGD,WAAW;YAC5B;UACF,CAAC;UAKD,IAAIU,SAAS,GAAG5C,KAAK,CAACiB,SAAS,CAAC4B,KAAK,CAAC1B,IAAI,CAACtB,SAAS,EAAE,CAAC,CAAC;UAExD,IAAI6C,YAAY,GAAG,SAAAA,CAAA,EAAY;YAC7BV,OAAO,GAAG,IAAI;YACdO,oBAAoB,CAAC,CAAC;YAEtBV,IAAI,CAACX,KAAK,CAACY,OAAO,EAAEc,SAAS,CAAC;YAC9BX,QAAQ,GAAG,KAAK;UAClB,CAAC;UAYD,IAAI9B,KAAK;UAET,IAAI2C,WAAW,GAAG,KAAK;UACvB,IAAIC,kBAAkB,GAAG,KAAK;UAE9B,IAAIC,iBAAiB,GAAG,SAAAA,CAAUb,KAAK,EAAE;YACvChC,KAAK,GAAGgC,KAAK,CAAChC,KAAK;YACnB2C,WAAW,GAAG,IAAI;YAElB,IAAI3C,KAAK,KAAK,IAAI,IAAIgC,KAAK,CAACc,KAAK,KAAK,CAAC,IAAId,KAAK,CAACe,MAAM,KAAK,CAAC,EAAE;cAC7DH,kBAAkB,GAAG,IAAI;YAC3B;YAEA,IAAIZ,KAAK,CAACgB,gBAAgB,EAAE;cAI1B,IAAIhD,KAAK,IAAI,IAAI,IAAI,OAAOA,KAAK,KAAK,QAAQ,EAAE;gBAC9C,IAAI;kBACFA,KAAK,CAACiD,gBAAgB,GAAG,IAAI;gBAC/B,CAAC,CAAC,OAAOC,KAAK,EAAE,CAEhB;cACF;YACF;UACF,CAAC;UAED,IAAIZ,OAAO,GAAG,QAAQ,IAAIb,IAAI,GAAGA,IAAI,GAAG,uBAAuB,CAAC;UAEhEN,MAAM,CAACgC,gBAAgB,CAAC,OAAO,EAAEN,iBAAiB,CAAC;UACnD3B,QAAQ,CAACiC,gBAAgB,CAACb,OAAO,EAAEC,YAAY,EAAE,KAAK,CAAC;UAGvDX,GAAG,CAACwB,SAAS,CAACd,OAAO,EAAE,KAAK,EAAE,KAAK,CAAC;UACpCpB,QAAQ,CAACE,aAAa,CAACQ,GAAG,CAAC;UAE3B,IAAIK,qBAAqB,EAAE;YACzBC,MAAM,CAACmB,cAAc,CAAClC,MAAM,EAAE,OAAO,EAAEc,qBAAqB,CAAC;UAC/D;UAEA,IAAIJ,OAAO,IAAIC,QAAQ,EAAE;YACvB,IAAI,CAACa,WAAW,EAAE;cAGhB3C,KAAK,GAAG,IAAIhB,KAAK,CACf,+DAA+D,GAC7D,0DAA0D,GAC1D,2DAA2D,GAC3D,4DAA4D,GAC5D,+DAA+D,GAC/D,6DAA6D,GAC7D,gEAAgE,GAChE,qDACJ,CAAC;YACH,CAAC,MAAM,IAAI4D,kBAAkB,EAAE;cAE7B5C,KAAK,GAAG,IAAIhB,KAAK,CACf,gEAAgE,GAC9D,0CAA0C,GAC1C,sEACJ,CAAC;YACH;YAEA,IAAI,CAACsE,OAAO,CAACtD,KAAK,CAAC;UACrB;UAEAmB,MAAM,CAACkB,mBAAmB,CAAC,OAAO,EAAEQ,iBAAiB,CAAC;UAEtD,IAAIhB,OAAO,EAAE;YACX;UACF,CAAC,MAAM;YAKLO,oBAAoB,CAAC,CAAC;UACxB;QACF;QAIA,IAAImB,QAAQ,GAAG1D,KAAK,CAACiB,SAAS,CAAC4B,KAAK,CAAC1B,IAAI,CAACtB,SAAS,EAAE,CAAC,CAAC;QAEvD,IAAI;UAEFgC,IAAI,CAACX,KAAK,CAACY,OAAO,EAAE4B,QAAQ,CAAC;QAC/B,CAAC,CAAC,OAAOvD,KAAK,EAAE;UACd,IAAI,CAACsD,OAAO,CAACtD,KAAK,CAAC;QACrB;MACF;IACF;IAEA,IAAIwD,QAAQ,GAAG,KAAK;IACpB,IAAIC,WAAW,GAAG,IAAI;IAEtB,IAAIC,eAAe,GAAG,KAAK;IAC3B,IAAIC,YAAY,GAAG,IAAI;IACvB,IAAIC,QAAQ,GAAG;MACbN,OAAO,EAAE,SAAAA,CAAUtD,KAAK,EAAE;QACxBwD,QAAQ,GAAG,IAAI;QACfC,WAAW,GAAGzD,KAAK;MACrB;IACF,CAAC;IAeD,SAAS6D,qBAAqBA,CAACpC,IAAI,EAAEC,IAAI,EAAEC,OAAO,EAAEmC,CAAC,EAAEC,CAAC,EAAEC,CAAC,EAAEC,CAAC,EAAEC,CAAC,EAAEC,CAAC,EAAE;MACpEX,QAAQ,GAAG,KAAK;MAChBC,WAAW,GAAG,IAAI;MAClBjC,yBAAyB,CAACT,KAAK,CAAC6C,QAAQ,EAAElE,SAAS,CAAC;IACtD;IAYA,SAAS0E,uCAAuCA,CAC9C3C,IAAI,EACJC,IAAI,EACJC,OAAO,EACPmC,CAAC,EACDC,CAAC,EACDC,CAAC,EACDC,CAAC,EACDC,CAAC,EACDC,CAAC,EACD;MACAN,qBAAqB,CAAC9C,KAAK,CAAC,IAAI,EAAErB,SAAS,CAAC;MAE5C,IAAI8D,QAAQ,EAAE;QACZ,IAAIxD,KAAK,GAAGqE,gBAAgB,CAAC,CAAC;QAE9B,IAAI,CAACX,eAAe,EAAE;UACpBA,eAAe,GAAG,IAAI;UACtBC,YAAY,GAAG3D,KAAK;QACtB;MACF;IACF;IAMA,SAASsE,kBAAkBA,CAAA,EAAG;MAC5B,IAAIZ,eAAe,EAAE;QACnB,IAAI1D,KAAK,GAAG2D,YAAY;QACxBD,eAAe,GAAG,KAAK;QACvBC,YAAY,GAAG,IAAI;QACnB,MAAM3D,KAAK;MACb;IACF;IACA,SAASuE,cAAcA,CAAA,EAAG;MACxB,OAAOf,QAAQ;IACjB;IACA,SAASa,gBAAgBA,CAAA,EAAG;MAC1B,IAAIb,QAAQ,EAAE;QACZ,IAAIxD,KAAK,GAAGyD,WAAW;QACvBD,QAAQ,GAAG,KAAK;QAChBC,WAAW,GAAG,IAAI;QAClB,OAAOzD,KAAK;MACd,CAAC,MAAM;QACL,MAAM,IAAIhB,KAAK,CACb,oEAAoE,GAClE,2DACJ,CAAC;MACH;IACF;IAEA,IAAIwF,WAAW,GAAG3E,KAAK,CAAC4E,OAAO;IAE/B,SAASA,OAAOA,CAACX,CAAC,EAAE;MAClB,OAAOU,WAAW,CAACV,CAAC,CAAC;IACvB;IAEA,IAAIY,8BAA8B,GAAG,IAAI;IACzC,IAAIC,mBAAmB,GAAG,IAAI;IAC9B,IAAIC,mBAAmB,GAAG,IAAI;IAC9B,SAASC,gBAAgBA,CACvBC,gCAAgC,EAChCC,uBAAuB,EACvBC,uBAAuB,EACvB;MACAN,8BAA8B,GAAGI,gCAAgC;MACjEH,mBAAmB,GAAGI,uBAAuB;MAC7CH,mBAAmB,GAAGI,uBAAuB;MAE7C;QACE,IAAI,CAACJ,mBAAmB,IAAI,CAACD,mBAAmB,EAAE;UAChD3E,KAAK,CACH,mDAAmD,GACjD,+DACJ,CAAC;QACH;MACF;IACF;IAEA,SAASiF,uBAAuBA,CAACjD,KAAK,EAAE;MACtC;QACE,IAAIkD,iBAAiB,GAAGlD,KAAK,CAACmD,kBAAkB;QAChD,IAAIC,iBAAiB,GAAGpD,KAAK,CAACqD,kBAAkB;QAChD,IAAIC,cAAc,GAAGb,OAAO,CAACS,iBAAiB,CAAC;QAC/C,IAAIK,YAAY,GAAGD,cAAc,GAC7BJ,iBAAiB,CAACvF,MAAM,GACxBuF,iBAAiB,GACjB,CAAC,GACD,CAAC;QACL,IAAIM,cAAc,GAAGf,OAAO,CAACW,iBAAiB,CAAC;QAC/C,IAAIK,YAAY,GAAGD,cAAc,GAC7BJ,iBAAiB,CAACzF,MAAM,GACxByF,iBAAiB,GACjB,CAAC,GACD,CAAC;QAEL,IACEI,cAAc,KAAKF,cAAc,IACjCG,YAAY,KAAKF,YAAY,EAC7B;UACAvF,KAAK,CAAC,oCAAoC,CAAC;QAC7C;MACF;IACF;IAQA,SAAS0F,eAAeA,CAAC1D,KAAK,EAAE2D,QAAQ,EAAEC,IAAI,EAAE;MAC9C,IAAIC,IAAI,GAAG7D,KAAK,CAAC6D,IAAI,IAAI,eAAe;MACxC7D,KAAK,CAAC8D,aAAa,GAAGlB,mBAAmB,CAACgB,IAAI,CAAC;MAC/CxB,uCAAuC,CAACyB,IAAI,EAAEF,QAAQ,EAAEI,SAAS,EAAE/D,KAAK,CAAC;MACzEA,KAAK,CAAC8D,aAAa,GAAG,IAAI;IAC5B;IAKA,SAASE,wBAAwBA,CAAChE,KAAK,EAAE;MACvC,IAAIkD,iBAAiB,GAAGlD,KAAK,CAACmD,kBAAkB;MAChD,IAAIC,iBAAiB,GAAGpD,KAAK,CAACqD,kBAAkB;MAEhD;QACEJ,uBAAuB,CAACjD,KAAK,CAAC;MAChC;MAEA,IAAIyC,OAAO,CAACS,iBAAiB,CAAC,EAAE;QAC9B,KAAK,IAAIe,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGf,iBAAiB,CAACvF,MAAM,EAAEsG,CAAC,EAAE,EAAE;UACjD,IAAIjE,KAAK,CAACkE,oBAAoB,CAAC,CAAC,EAAE;YAChC;UACF;UAEAR,eAAe,CAAC1D,KAAK,EAAEkD,iBAAiB,CAACe,CAAC,CAAC,EAAEb,iBAAiB,CAACa,CAAC,CAAC,CAAC;QACpE;MACF,CAAC,MAAM,IAAIf,iBAAiB,EAAE;QAC5BQ,eAAe,CAAC1D,KAAK,EAAEkD,iBAAiB,EAAEE,iBAAiB,CAAC;MAC9D;MAEApD,KAAK,CAACmD,kBAAkB,GAAG,IAAI;MAC/BnD,KAAK,CAACqD,kBAAkB,GAAG,IAAI;IACjC;IASA,SAASc,sCAAsCA,CAACnE,KAAK,EAAE;MACrD,IAAIkD,iBAAiB,GAAGlD,KAAK,CAACmD,kBAAkB;MAChD,IAAIC,iBAAiB,GAAGpD,KAAK,CAACqD,kBAAkB;MAEhD;QACEJ,uBAAuB,CAACjD,KAAK,CAAC;MAChC;MAEA,IAAIyC,OAAO,CAACS,iBAAiB,CAAC,EAAE;QAC9B,KAAK,IAAIe,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGf,iBAAiB,CAACvF,MAAM,EAAEsG,CAAC,EAAE,EAAE;UACjD,IAAIjE,KAAK,CAACkE,oBAAoB,CAAC,CAAC,EAAE;YAChC;UACF;UAEA,IAAIhB,iBAAiB,CAACe,CAAC,CAAC,CAACjE,KAAK,EAAEoD,iBAAiB,CAACa,CAAC,CAAC,CAAC,EAAE;YACrD,OAAOb,iBAAiB,CAACa,CAAC,CAAC;UAC7B;QACF;MACF,CAAC,MAAM,IAAIf,iBAAiB,EAAE;QAC5B,IAAIA,iBAAiB,CAAClD,KAAK,EAAEoD,iBAAiB,CAAC,EAAE;UAC/C,OAAOA,iBAAiB;QAC1B;MACF;MAEA,OAAO,IAAI;IACb;IAKA,SAASgB,kCAAkCA,CAACpE,KAAK,EAAE;MACjD,IAAIqE,GAAG,GAAGF,sCAAsC,CAACnE,KAAK,CAAC;MACvDA,KAAK,CAACqD,kBAAkB,GAAG,IAAI;MAC/BrD,KAAK,CAACmD,kBAAkB,GAAG,IAAI;MAC/B,OAAOkB,GAAG;IACZ;IAWA,SAASC,qBAAqBA,CAACtE,KAAK,EAAE;MACpC;QACEiD,uBAAuB,CAACjD,KAAK,CAAC;MAChC;MAEA,IAAIuE,gBAAgB,GAAGvE,KAAK,CAACmD,kBAAkB;MAC/C,IAAIqB,gBAAgB,GAAGxE,KAAK,CAACqD,kBAAkB;MAE/C,IAAIZ,OAAO,CAAC8B,gBAAgB,CAAC,EAAE;QAC7B,MAAM,IAAIvH,KAAK,CAAC,8CAA8C,CAAC;MACjE;MAEAgD,KAAK,CAAC8D,aAAa,GAAGS,gBAAgB,GAClC3B,mBAAmB,CAAC4B,gBAAgB,CAAC,GACrC,IAAI;MACR,IAAIC,GAAG,GAAGF,gBAAgB,GAAGA,gBAAgB,CAACvE,KAAK,CAAC,GAAG,IAAI;MAC3DA,KAAK,CAAC8D,aAAa,GAAG,IAAI;MAC1B9D,KAAK,CAACmD,kBAAkB,GAAG,IAAI;MAC/BnD,KAAK,CAACqD,kBAAkB,GAAG,IAAI;MAC/B,OAAOoB,GAAG;IACZ;IAMA,SAASC,aAAaA,CAAC1E,KAAK,EAAE;MAC5B,OAAO,CAAC,CAACA,KAAK,CAACmD,kBAAkB;IACnC;IAEA,IAAIwB,MAAM,GAAGzE,MAAM,CAACyE,MAAM;IAE1B,IAAIC,eAAe,GAAG,EAAE;IAMxB,IAAIC,cAAc,GAAG;MACnBhB,IAAI,EAAE,IAAI;MACViB,MAAM,EAAE,IAAI;MAEZhB,aAAa,EAAE,SAAAA,CAAA,EAAY;QACzB,OAAO,IAAI;MACb,CAAC;MACDiB,UAAU,EAAE,IAAI;MAChBC,OAAO,EAAE,IAAI;MACbC,UAAU,EAAE,IAAI;MAChBC,SAAS,EAAE,SAAAA,CAAUlF,KAAK,EAAE;QAC1B,OAAOA,KAAK,CAACkF,SAAS,IAAIC,IAAI,CAACC,GAAG,CAAC,CAAC;MACtC,CAAC;MACDpE,gBAAgB,EAAE,IAAI;MACtBqE,SAAS,EAAE;IACb,CAAC;IAED,SAASC,uBAAuBA,CAAA,EAAG;MACjC,OAAO,IAAI;IACb;IAEA,SAASC,wBAAwBA,CAAA,EAAG;MAClC,OAAO,KAAK;IACd;IAoBA,SAASC,cAAcA,CACrBC,cAAc,EACdC,UAAU,EACVC,WAAW,EACXC,iBAAiB,EACjB;MACA;QAEE,OAAO,IAAI,CAACD,WAAW;QACvB,OAAO,IAAI,CAACE,cAAc;QAC1B,OAAO,IAAI,CAACC,eAAe;QAC3B,OAAO,IAAI,CAACC,kBAAkB;QAC9B,OAAO,IAAI,CAAC7B,oBAAoB;MAClC;MAEA,IAAI,CAACuB,cAAc,GAAGA,cAAc;MACpC,IAAI,CAACO,WAAW,GAAGN,UAAU;MAC7B,IAAI,CAACC,WAAW,GAAGA,WAAW;MAC9B,IAAI,CAACxC,kBAAkB,GAAG,IAAI;MAC9B,IAAI,CAACE,kBAAkB,GAAG,IAAI;MAC9B,IAAI4C,SAAS,GAAG,IAAI,CAACC,WAAW,CAACD,SAAS;MAE1C,KAAK,IAAIE,QAAQ,IAAIF,SAAS,EAAE;QAC9B,IAAI,CAACA,SAAS,CAACzF,cAAc,CAAC2F,QAAQ,CAAC,EAAE;UACvC;QACF;QAEA;UACE,OAAO,IAAI,CAACA,QAAQ,CAAC;QACvB;QAEA,IAAIC,SAAS,GAAGH,SAAS,CAACE,QAAQ,CAAC;QAEnC,IAAIC,SAAS,EAAE;UACb,IAAI,CAACD,QAAQ,CAAC,GAAGC,SAAS,CAACT,WAAW,CAAC;QACzC,CAAC,MAAM;UACL,IAAIQ,QAAQ,KAAK,QAAQ,EAAE;YACzB,IAAI,CAACrB,MAAM,GAAGc,iBAAiB;UACjC,CAAC,MAAM;YACL,IAAI,CAACO,QAAQ,CAAC,GAAGR,WAAW,CAACQ,QAAQ,CAAC;UACxC;QACF;MACF;MAEA,IAAInF,gBAAgB,GAClB2E,WAAW,CAAC3E,gBAAgB,IAAI,IAAI,GAChC2E,WAAW,CAAC3E,gBAAgB,GAC5B2E,WAAW,CAACU,WAAW,KAAK,KAAK;MAEvC,IAAIrF,gBAAgB,EAAE;QACpB,IAAI,CAAC+E,kBAAkB,GAAGT,uBAAuB;MACnD,CAAC,MAAM;QACL,IAAI,CAACS,kBAAkB,GAAGR,wBAAwB;MACpD;MAEA,IAAI,CAACrB,oBAAoB,GAAGqB,wBAAwB;MACpD,OAAO,IAAI;IACb;IAEAZ,MAAM,CAACa,cAAc,CAAC1G,SAAS,EAAE;MAC/B+G,cAAc,EAAE,SAAAA,CAAA,EAAY;QAC1B,IAAI,CAAC7E,gBAAgB,GAAG,IAAI;QAC5B,IAAIhB,KAAK,GAAG,IAAI,CAAC2F,WAAW;QAE5B,IAAI,CAAC3F,KAAK,EAAE;UACV;QACF;QAEA,IAAIA,KAAK,CAAC6F,cAAc,EAAE;UACxB7F,KAAK,CAAC6F,cAAc,CAAC,CAAC;QACxB,CAAC,MAAM,IAAI,OAAO7F,KAAK,CAACqG,WAAW,KAAK,SAAS,EAAE;UACjDrG,KAAK,CAACqG,WAAW,GAAG,KAAK;QAC3B;QAEA,IAAI,CAACN,kBAAkB,GAAGT,uBAAuB;MACnD,CAAC;MACDQ,eAAe,EAAE,SAAAA,CAAA,EAAY;QAC3B,IAAI9F,KAAK,GAAG,IAAI,CAAC2F,WAAW;QAE5B,IAAI,CAAC3F,KAAK,EAAE;UACV;QACF;QAEA,IAAIA,KAAK,CAAC8F,eAAe,EAAE;UACzB9F,KAAK,CAAC8F,eAAe,CAAC,CAAC;QACzB,CAAC,MAAM,IAAI,OAAO9F,KAAK,CAACsG,YAAY,KAAK,SAAS,EAAE;UAMlDtG,KAAK,CAACsG,YAAY,GAAG,IAAI;QAC3B;QAEA,IAAI,CAACpC,oBAAoB,GAAGoB,uBAAuB;MACrD,CAAC;MAODiB,OAAO,EAAE,SAAAA,CAAA,EAAY;QACnB,IAAI,CAACC,YAAY,GAAGlB,uBAAuB;MAC7C,CAAC;MAODkB,YAAY,EAAEjB,wBAAwB;MAKtCkB,UAAU,EAAE,SAAAA,CAAA,EAAY;QACtB,IAAIR,SAAS,GAAG,IAAI,CAACC,WAAW,CAACD,SAAS;QAE1C,KAAK,IAAIE,QAAQ,IAAIF,SAAS,EAAE;UAC9B;YACE/F,MAAM,CAACmB,cAAc,CACnB,IAAI,EACJ8E,QAAQ,EACRO,kCAAkC,CAACP,QAAQ,EAAEF,SAAS,CAACE,QAAQ,CAAC,CAClE,CAAC;UACH;QACF;QAEA,IAAI,CAACV,cAAc,GAAG,IAAI;QAC1B,IAAI,CAACO,WAAW,GAAG,IAAI;QACvB,IAAI,CAACL,WAAW,GAAG,IAAI;QACvB,IAAI,CAACI,kBAAkB,GAAGR,wBAAwB;QAClD,IAAI,CAACrB,oBAAoB,GAAGqB,wBAAwB;QACpD,IAAI,CAACpC,kBAAkB,GAAG,IAAI;QAC9B,IAAI,CAACE,kBAAkB,GAAG,IAAI;QAE9B;UACEnD,MAAM,CAACmB,cAAc,CACnB,IAAI,EACJ,aAAa,EACbqF,kCAAkC,CAAC,aAAa,EAAE,IAAI,CACxD,CAAC;UACDxG,MAAM,CAACmB,cAAc,CACnB,IAAI,EACJ,oBAAoB,EACpBqF,kCAAkC,CAChC,oBAAoB,EACpBnB,wBACF,CACF,CAAC;UACDrF,MAAM,CAACmB,cAAc,CACnB,IAAI,EACJ,sBAAsB,EACtBqF,kCAAkC,CAChC,sBAAsB,EACtBnB,wBACF,CACF,CAAC;UACDrF,MAAM,CAACmB,cAAc,CACnB,IAAI,EACJ,gBAAgB,EAChBqF,kCAAkC,CAAC,gBAAgB,EAAE,YAAY,CAAC,CAAC,CACrE,CAAC;UACDxG,MAAM,CAACmB,cAAc,CACnB,IAAI,EACJ,iBAAiB,EACjBqF,kCAAkC,CAChC,iBAAiB,EACjB,YAAY,CAAC,CACf,CACF,CAAC;QACH;MACF;IACF,CAAC,CAAC;IACFlB,cAAc,CAACS,SAAS,GAAGpB,cAAc;IAKzCW,cAAc,CAACmB,MAAM,GAAG,UAAUV,SAAS,EAAE;MAC3C,IAAIW,KAAK,GAAG,IAAI;MAEhB,IAAIC,CAAC,GAAG,SAAAA,CAAA,EAAY,CAAC,CAAC;MAEtBA,CAAC,CAAC/H,SAAS,GAAG8H,KAAK,CAAC9H,SAAS;MAC7B,IAAIA,SAAS,GAAG,IAAI+H,CAAC,CAAC,CAAC;MAEvB,SAASC,KAAKA,CAAA,EAAG;QACf,OAAOF,KAAK,CAAC7H,KAAK,CAAC,IAAI,EAAErB,SAAS,CAAC;MACrC;MAEAiH,MAAM,CAAC7F,SAAS,EAAEgI,KAAK,CAAChI,SAAS,CAAC;MAClCgI,KAAK,CAAChI,SAAS,GAAGA,SAAS;MAC3BgI,KAAK,CAAChI,SAAS,CAACoH,WAAW,GAAGY,KAAK;MACnCA,KAAK,CAACb,SAAS,GAAGtB,MAAM,CAAC,CAAC,CAAC,EAAEiC,KAAK,CAACX,SAAS,EAAEA,SAAS,CAAC;MACxDa,KAAK,CAACH,MAAM,GAAGC,KAAK,CAACD,MAAM;MAC3BI,iBAAiB,CAACD,KAAK,CAAC;MACxB,OAAOA,KAAK;IACd,CAAC;IAEDC,iBAAiB,CAACvB,cAAc,CAAC;IASjC,SAASkB,kCAAkCA,CAACP,QAAQ,EAAEa,MAAM,EAAE;MAC5D,SAASC,GAAGA,CAACC,GAAG,EAAE;QAChB,IAAIC,MAAM,GAAGC,UAAU,GAAG,oBAAoB,GAAG,sBAAsB;QACvE7J,IAAI,CAAC4J,MAAM,EAAE,6BAA6B,CAAC;QAC3C,OAAOD,GAAG;MACZ;MAEA,SAASG,GAAGA,CAAA,EAAG;QACb,IAAIF,MAAM,GAAGC,UAAU,GACnB,sBAAsB,GACtB,wBAAwB;QAC5B,IAAIE,MAAM,GAAGF,UAAU,GACnB,0BAA0B,GAC1B,qBAAqB;QACzB7J,IAAI,CAAC4J,MAAM,EAAEG,MAAM,CAAC;QACpB,OAAON,MAAM;MACf;MAEA,SAASzJ,IAAIA,CAAC4J,MAAM,EAAEG,MAAM,EAAE;QAC5B;UACEtJ,KAAK,CACH,iFAAiF,GAC/E,8DAA8D,GAC9D,6EAA6E,GAC7E,kEAAkE,EACpEmJ,MAAM,EACNhB,QAAQ,EACRmB,MACF,CAAC;QACH;MACF;MAEA,IAAIF,UAAU,GAAG,OAAOJ,MAAM,KAAK,UAAU;MAC7C,OAAO;QACLO,YAAY,EAAE,IAAI;QAClBN,GAAG,EAAEA,GAAG;QACRI,GAAG,EAAEA;MACP,CAAC;IACH;IAEA,SAASG,sBAAsBA,CAC7B/B,cAAc,EACdC,UAAU,EACVC,WAAW,EACX8B,UAAU,EACV;MACA,IAAIC,gBAAgB,GAAG,IAAI;MAE3B,IAAIA,gBAAgB,CAACC,SAAS,CAAChK,MAAM,EAAE;QACrC,IAAIiK,QAAQ,GAAGF,gBAAgB,CAACC,SAAS,CAACE,GAAG,CAAC,CAAC;QAC/CH,gBAAgB,CAAC1I,IAAI,CACnB4I,QAAQ,EACRnC,cAAc,EACdC,UAAU,EACVC,WAAW,EACX8B,UACF,CAAC;QACD,OAAOG,QAAQ;MACjB;MAEA,OAAO,IAAIF,gBAAgB,CACzBjC,cAAc,EACdC,UAAU,EACVC,WAAW,EACX8B,UACF,CAAC;IACH;IAEA,SAASK,kBAAkBA,CAAC9H,KAAK,EAAE;MACjC,IAAI0H,gBAAgB,GAAG,IAAI;MAE3B,IAAI,EAAE1H,KAAK,YAAY0H,gBAAgB,CAAC,EAAE;QACxC,MAAM,IAAI1K,KAAK,CACb,sEACF,CAAC;MACH;MAEAgD,KAAK,CAACyG,UAAU,CAAC,CAAC;MAElB,IAAIiB,gBAAgB,CAACC,SAAS,CAAChK,MAAM,GAAGiH,eAAe,EAAE;QACvD8C,gBAAgB,CAACC,SAAS,CAACI,IAAI,CAAC/H,KAAK,CAAC;MACxC;IACF;IAEA,SAAS+G,iBAAiBA,CAACW,gBAAgB,EAAE;MAC3CA,gBAAgB,CAACM,SAAS,GAAGR,sBAAsB;MACnDE,gBAAgB,CAACC,SAAS,GAAG,EAAE;MAC/BD,gBAAgB,CAACO,OAAO,GAAGH,kBAAkB;IAC/C;IAQA,IAAII,uBAAuB,GAAG1C,cAAc,CAACmB,MAAM,CAAC;MAClDwB,YAAY,EAAE,SAAAA,CAAUxC,WAAW,EAAE;QACnC,OAAO,IAAI;MACb;IACF,CAAC,CAAC;IAEF,IAAIyC,eAAe,GAAG,eAAe;IACrC,IAAIC,cAAc,GAAG,cAAc;IACnC,IAAIC,aAAa,GAAG,aAAa;IACjC,IAAIC,gBAAgB,GAAG,gBAAgB;IACvC,IAAIC,UAAU,GAAG,WAAW;IAC5B,IAAIC,oBAAoB,GAAG,oBAAoB;IAC/C,SAASC,UAAUA,CAACC,YAAY,EAAE;MAChC,OAAOA,YAAY,KAAKP,eAAe;IACzC;IACA,SAASQ,SAASA,CAACD,YAAY,EAAE;MAC/B,OAAOA,YAAY,KAAKN,cAAc;IACxC;IACA,SAASQ,QAAQA,CAACF,YAAY,EAAE;MAC9B,OACEA,YAAY,KAAKL,aAAa,IAAIK,YAAY,KAAKJ,gBAAgB;IAEvE;IACA,IAAIO,iBAAiB,GAAG,CAACV,eAAe,CAAC;IACzC,IAAIW,gBAAgB,GAAG,CAACV,cAAc,CAAC;IACvC,IAAIW,eAAe,GAAG,CAACT,gBAAgB,EAAED,aAAa,CAAC;IAQvD,IAAIW,cAAc,GAAG,EAAE;IACvB,IAAIC,SAAS,GAAG,EAAE;IAClB,IAAIf,YAAY,GAAG;MACjBe,SAAS,EAAEA,SAAS;MACpBC,mBAAmB,EAAE,CAAC;MAItBC,wBAAwB,EAAE,CAAC,CAAC;MAC5BC,mBAAmB,EAAE;IACvB,CAAC;IAED,SAASC,iBAAiBA,CAACC,KAAK,EAAE;MAIhC,OAAOA,KAAK,CAACrE,SAAS,IAAIqE,KAAK,CAACC,SAAS;IAC3C;IAMA,SAASC,iBAAiBA,CAACF,KAAK,EAAE;MAChC,OAAO;QACLG,WAAW,EAAE,IAAI;QACjBC,UAAU,EAAEJ,KAAK,CAACK,KAAK;QACvBC,UAAU,EAAEN,KAAK,CAACO,KAAK;QACvBC,cAAc,EAAET,iBAAiB,CAACC,KAAK,CAAC;QACxCS,YAAY,EAAET,KAAK,CAACK,KAAK;QACzBK,YAAY,EAAEV,KAAK,CAACO,KAAK;QACzBI,gBAAgB,EAAEZ,iBAAiB,CAACC,KAAK,CAAC;QAC1CY,aAAa,EAAEZ,KAAK,CAACK,KAAK;QAC1BQ,aAAa,EAAEb,KAAK,CAACO,KAAK;QAC1BO,iBAAiB,EAAEf,iBAAiB,CAACC,KAAK;MAC5C,CAAC;IACH;IAEA,SAASe,gBAAgBA,CAACC,WAAW,EAAEhB,KAAK,EAAE;MAC5CgB,WAAW,CAACb,WAAW,GAAG,IAAI;MAC9Ba,WAAW,CAACZ,UAAU,GAAGJ,KAAK,CAACK,KAAK;MACpCW,WAAW,CAACV,UAAU,GAAGN,KAAK,CAACO,KAAK;MACpCS,WAAW,CAACR,cAAc,GAAGT,iBAAiB,CAACC,KAAK,CAAC;MACrDgB,WAAW,CAACP,YAAY,GAAGT,KAAK,CAACK,KAAK;MACtCW,WAAW,CAACN,YAAY,GAAGV,KAAK,CAACO,KAAK;MACtCS,WAAW,CAACL,gBAAgB,GAAGZ,iBAAiB,CAACC,KAAK,CAAC;MACvDgB,WAAW,CAACJ,aAAa,GAAGZ,KAAK,CAACK,KAAK;MACvCW,WAAW,CAACH,aAAa,GAAGb,KAAK,CAACO,KAAK;MACvCS,WAAW,CAACF,iBAAiB,GAAGf,iBAAiB,CAACC,KAAK,CAAC;IAC1D;IAEA,SAASiB,kBAAkBA,CAACC,IAAI,EAAE;MAChC,IAAIC,UAAU,GAAGD,IAAI,CAACC,UAAU;MAEhC,IAAIA,UAAU,IAAI,IAAI,EAAE;QACtB,MAAM,IAAI1N,KAAK,CAAC,qCAAqC,CAAC;MACxD;MAEA;QACE,IAAI0N,UAAU,GAAGzB,cAAc,EAAE;UAC/BjL,KAAK,CACH,wEAAwE,GACtE,wEAAwE,EAC1E0M,UAAU,EACVzB,cACF,CAAC;QACH;MACF;MAEA,OAAOyB,UAAU;IACnB;IAEA,SAASC,gBAAgBA,CAACpB,KAAK,EAAE;MAC/B,IAAImB,UAAU,GAAGF,kBAAkB,CAACjB,KAAK,CAAC;MAC1C,IAAIgB,WAAW,GAAGrB,SAAS,CAACwB,UAAU,CAAC;MAEvC,IAAIH,WAAW,EAAE;QACfD,gBAAgB,CAACC,WAAW,EAAEhB,KAAK,CAAC;MACtC,CAAC,MAAM;QACLL,SAAS,CAACwB,UAAU,CAAC,GAAGjB,iBAAiB,CAACF,KAAK,CAAC;MAClD;MAEApB,YAAY,CAACkB,mBAAmB,GAAGC,iBAAiB,CAACC,KAAK,CAAC;IAC7D;IAEA,SAASqB,eAAeA,CAACrB,KAAK,EAAE;MAC9B,IAAIgB,WAAW,GAAGrB,SAAS,CAACsB,kBAAkB,CAACjB,KAAK,CAAC,CAAC;MAEtD,IAAIgB,WAAW,EAAE;QACfA,WAAW,CAACb,WAAW,GAAG,IAAI;QAC9Ba,WAAW,CAACJ,aAAa,GAAGI,WAAW,CAACP,YAAY;QACpDO,WAAW,CAACH,aAAa,GAAGG,WAAW,CAACN,YAAY;QACpDM,WAAW,CAACF,iBAAiB,GAAGE,WAAW,CAACL,gBAAgB;QAC5DK,WAAW,CAACP,YAAY,GAAGT,KAAK,CAACK,KAAK;QACtCW,WAAW,CAACN,YAAY,GAAGV,KAAK,CAACO,KAAK;QACtCS,WAAW,CAACL,gBAAgB,GAAGZ,iBAAiB,CAACC,KAAK,CAAC;QACvDpB,YAAY,CAACkB,mBAAmB,GAAGC,iBAAiB,CAACC,KAAK,CAAC;MAC7D,CAAC,MAAM;QACL;UACEhM,IAAI,CACF,mDAAmD,GACjD,kBAAkB,GAClB,gBAAgB,EAClBsN,UAAU,CAACtB,KAAK,CAAC,EACjBuB,cAAc,CAAC,CACjB,CAAC;QACH;MACF;IACF;IAEA,SAASC,cAAcA,CAACxB,KAAK,EAAE;MAC7B,IAAIgB,WAAW,GAAGrB,SAAS,CAACsB,kBAAkB,CAACjB,KAAK,CAAC,CAAC;MAEtD,IAAIgB,WAAW,EAAE;QACfA,WAAW,CAACb,WAAW,GAAG,KAAK;QAC/Ba,WAAW,CAACJ,aAAa,GAAGI,WAAW,CAACP,YAAY;QACpDO,WAAW,CAACH,aAAa,GAAGG,WAAW,CAACN,YAAY;QACpDM,WAAW,CAACF,iBAAiB,GAAGE,WAAW,CAACL,gBAAgB;QAC5DK,WAAW,CAACP,YAAY,GAAGT,KAAK,CAACK,KAAK;QACtCW,WAAW,CAACN,YAAY,GAAGV,KAAK,CAACO,KAAK;QACtCS,WAAW,CAACL,gBAAgB,GAAGZ,iBAAiB,CAACC,KAAK,CAAC;QACvDpB,YAAY,CAACkB,mBAAmB,GAAGC,iBAAiB,CAACC,KAAK,CAAC;MAC7D,CAAC,MAAM;QACL;UACEhM,IAAI,CACF,kDAAkD,GAChD,iBAAiB,GACjB,gBAAgB,EAClBsN,UAAU,CAACtB,KAAK,CAAC,EACjBuB,cAAc,CAAC,CACjB,CAAC;QACH;MACF;IACF;IAEA,SAASD,UAAUA,CAACtB,KAAK,EAAE;MACzB,OAAOyB,IAAI,CAACC,SAAS,CAAC;QACpBP,UAAU,EAAEnB,KAAK,CAACmB,UAAU;QAC5Bd,KAAK,EAAEL,KAAK,CAACK,KAAK;QAClBE,KAAK,EAAEP,KAAK,CAACO,KAAK;QAClBN,SAAS,EAAEF,iBAAiB,CAACC,KAAK;MACpC,CAAC,CAAC;IACJ;IAEA,SAASuB,cAAcA,CAAA,EAAG;MACxB,IAAII,OAAO,GAAGF,IAAI,CAACC,SAAS,CAAC/B,SAAS,CAACxI,KAAK,CAAC,CAAC,EAAEuI,cAAc,CAAC,CAAC;MAEhE,IAAIC,SAAS,CAACvL,MAAM,GAAGsL,cAAc,EAAE;QACrCiC,OAAO,IAAI,mBAAmB,GAAGhC,SAAS,CAACvL,MAAM,GAAG,GAAG;MACzD;MAEA,OAAOuN,OAAO;IAChB;IAEA,IAAIC,uBAAuB;IAC3B,IAAIC,0BAA0B,GAAG;MAI/BC,UAAU,EAAE,SAAAA,CAAUC,QAAQ,EAAE;QAC9BH,uBAAuB,GAAGG,QAAQ;MACpC,CAAC;MACDC,gBAAgB,EAAE,SAAAA,CAAU5C,YAAY,EAAEhD,WAAW,EAAE;QACrD,IAAIwF,uBAAuB,IAAI,IAAI,EAAE;UACnCA,uBAAuB,CAACxC,YAAY,EAAEhD,WAAW,CAAC;QACpD;QAEA,IAAIiD,SAAS,CAACD,YAAY,CAAC,EAAE;UAC3BhD,WAAW,CAAC6F,cAAc,CAACC,OAAO,CAACb,eAAe,CAAC;QACrD,CAAC,MAAM,IAAIlC,UAAU,CAACC,YAAY,CAAC,EAAE;UACnChD,WAAW,CAAC6F,cAAc,CAACC,OAAO,CAACd,gBAAgB,CAAC;UACpDxC,YAAY,CAACgB,mBAAmB,GAAGxD,WAAW,CAAC+F,OAAO,CAAC/N,MAAM;UAE7D,IAAIwK,YAAY,CAACgB,mBAAmB,KAAK,CAAC,EAAE;YAC1ChB,YAAY,CAACiB,wBAAwB,GACnCzD,WAAW,CAAC+F,OAAO,CAAC,CAAC,CAAC,CAAChB,UAAU;UACrC;QACF,CAAC,MAAM,IAAI7B,QAAQ,CAACF,YAAY,CAAC,EAAE;UACjChD,WAAW,CAAC6F,cAAc,CAACC,OAAO,CAACV,cAAc,CAAC;UAClD5C,YAAY,CAACgB,mBAAmB,GAAGxD,WAAW,CAAC+F,OAAO,CAAC/N,MAAM;UAE7D,IAAIwK,YAAY,CAACgB,mBAAmB,KAAK,CAAC,EAAE;YAC1C,KAAK,IAAIlF,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGiF,SAAS,CAACvL,MAAM,EAAEsG,CAAC,EAAE,EAAE;cACzC,IAAI0H,iBAAiB,GAAGzC,SAAS,CAACjF,CAAC,CAAC;cAEpC,IAAI0H,iBAAiB,IAAI,IAAI,IAAIA,iBAAiB,CAACjC,WAAW,EAAE;gBAC9DvB,YAAY,CAACiB,wBAAwB,GAAGnF,CAAC;gBACzC;cACF;YACF;YAEA;cACE,IAAI2H,YAAY,GACd1C,SAAS,CAACf,YAAY,CAACiB,wBAAwB,CAAC;cAElD,IAAIwC,YAAY,IAAI,IAAI,IAAI,CAACA,YAAY,CAAClC,WAAW,EAAE;gBACrD1L,KAAK,CAAC,kCAAkC,CAAC;cAC3C;YACF;UACF;QACF;MACF,CAAC;MACDmK,YAAY,EAAEA;IAChB,CAAC;IAUD,SAAS0D,UAAUA,CAACC,OAAO,EAAEC,IAAI,EAAE;MACjC,IAAIA,IAAI,IAAI,IAAI,EAAE;QAChB,MAAM,IAAI/O,KAAK,CACb,mEACF,CAAC;MACH;MAEA,IAAI8O,OAAO,IAAI,IAAI,EAAE;QACnB,OAAOC,IAAI;MACb;MAGA,IAAItJ,OAAO,CAACqJ,OAAO,CAAC,EAAE;QAGpB,OAAOA,OAAO,CAACvN,MAAM,CAACwN,IAAI,CAAC;MAC7B;MAEA,IAAItJ,OAAO,CAACsJ,IAAI,CAAC,EAAE;QAGjB,OAAO,CAACD,OAAO,CAAC,CAACvN,MAAM,CAACwN,IAAI,CAAC;MAC/B;MAEA,OAAO,CAACD,OAAO,EAAEC,IAAI,CAAC;IACxB;IAeA,SAASC,cAAcA,CAACF,OAAO,EAAEC,IAAI,EAAE;MACrC,IAAIA,IAAI,IAAI,IAAI,EAAE;QAChB,MAAM,IAAI/O,KAAK,CACb,uEACF,CAAC;MACH;MAEA,IAAI8O,OAAO,IAAI,IAAI,EAAE;QACnB,OAAOC,IAAI;MACb;MAGA,IAAItJ,OAAO,CAACqJ,OAAO,CAAC,EAAE;QACpB,IAAIrJ,OAAO,CAACsJ,IAAI,CAAC,EAAE;UAGjBD,OAAO,CAAC/D,IAAI,CAAChJ,KAAK,CAAC+M,OAAO,EAAEC,IAAI,CAAC;UACjC,OAAOD,OAAO;QAChB;QAEAA,OAAO,CAAC/D,IAAI,CAACgE,IAAI,CAAC;QAClB,OAAOD,OAAO;MAChB;MAEA,IAAIrJ,OAAO,CAACsJ,IAAI,CAAC,EAAE;QAKjB,OAAO,CAACD,OAAO,CAAC,CAACvN,MAAM,CAACwN,IAAI,CAAC;MAC/B;MAEA,OAAO,CAACD,OAAO,EAAEC,IAAI,CAAC;IACxB;IAWA,SAASE,kBAAkBA,CAACC,GAAG,EAAEC,EAAE,EAAEC,KAAK,EAAE;MAC1C,IAAIvO,KAAK,CAAC4E,OAAO,CAACyJ,GAAG,CAAC,EAAE;QAEtBA,GAAG,CAACT,OAAO,CAACU,EAAE,EAAEC,KAAK,CAAC;MACxB,CAAC,MAAM,IAAIF,GAAG,EAAE;QACdC,EAAE,CAACnN,IAAI,CAACoN,KAAK,EAAEF,GAAG,CAAC;MACrB;IACF;IAEA,IAAIG,iBAAiB,GAAG,CAAC;IACzB,IAAIC,cAAc,GAAG,CAAC;IACtB,IAAIC,sBAAsB,GAAG,CAAC;IAE9B,IAAIC,QAAQ,GAAG,CAAC;IAEhB,IAAIC,UAAU,GAAG,CAAC;IAElB,IAAIC,aAAa,GAAG,CAAC;IACrB,IAAIC,QAAQ,GAAG,CAAC;IAChB,IAAIC,QAAQ,GAAG,CAAC;IAChB,IAAIC,IAAI,GAAG,CAAC;IACZ,IAAIC,eAAe,GAAG,CAAC;IACvB,IAAIC,eAAe,GAAG,EAAE;IACxB,IAAIC,UAAU,GAAG,EAAE;IACnB,IAAIC,QAAQ,GAAG,EAAE;IACjB,IAAIC,iBAAiB,GAAG,EAAE;IAC1B,IAAIC,aAAa,GAAG,EAAE;IACtB,IAAIC,mBAAmB,GAAG,EAAE;IAC5B,IAAIC,aAAa,GAAG,EAAE;IACtB,IAAIC,wBAAwB,GAAG,EAAE;IACjC,IAAIC,kBAAkB,GAAG,EAAE;IAC3B,IAAIC,qBAAqB,GAAG,EAAE;IAC9B,IAAIC,cAAc,GAAG,EAAE;IACvB,IAAIC,kBAAkB,GAAG,EAAE;IAC3B,IAAIC,qBAAqB,GAAG,EAAE;IAC9B,IAAIC,cAAc,GAAG,EAAE;IACvB,IAAIC,sBAAsB,GAAG,EAAE;IAC/B,IAAIC,aAAa,GAAG,EAAE;IACtB,IAAIC,aAAa,GAAG,EAAE;IAOtB,IAAIC,aAAa,GAAG,IAAI;IAMxB,IAAIC,iBAAiB,GAAG,CAAC;IAEzB,SAASC,eAAeA,CAACC,iBAAiB,EAAEC,kBAAkB,EAAE;MAC9D,IAAIC,gBAAgB,GAAGL,aAAa;MACpCA,aAAa,GAAGG,iBAAiB;MAEjC,IAAIG,oBAAoB,CAACC,sBAAsB,KAAK,IAAI,EAAE;QACxDD,oBAAoB,CAACC,sBAAsB,CAACC,QAAQ,CAClDH,gBAAgB,EAChBF,iBAAiB,EACjBC,kBACF,CAAC;MACH;IACF;IAEA,IAAIK,UAAU,GAAG;MAKfC,uBAAuB,EAAE;QACvBC,uBAAuB,EAAE;UACvBC,OAAO,EAAE,2BAA2B;UACpCC,QAAQ,EAAE;QACZ,CAAC;QACDC,YAAY,EAAEhG;MAChB,CAAC;MAWDiG,wBAAwB,EAAE;QACxBJ,uBAAuB,EAAE;UACvBC,OAAO,EAAE,4BAA4B;UACrCC,QAAQ,EAAE;QACZ,CAAC;QACDC,YAAY,EAAE,CAACtG,UAAU;MAC3B,CAAC;MASDwG,iCAAiC,EAAE;QACjCL,uBAAuB,EAAE;UACvBC,OAAO,EAAE,qCAAqC;UAC9CC,QAAQ,EAAE;QACZ,CAAC;QACDC,YAAY,EAAE,CAACrG,oBAAoB;MACrC,CAAC;MAMDwG,sBAAsB,EAAE;QACtBN,uBAAuB,EAAE;UACvBC,OAAO,EAAE,0BAA0B;UACnCC,QAAQ,EAAE;QACZ,CAAC;QACDC,YAAY,EAAE/F;MAChB,CAAC;MAKDmG,cAAc,EAAE;QACdC,gBAAgB,EAAE,kBAAkB;QACpCL,YAAY,EAAEhG;MAChB,CAAC;MACDsG,aAAa,EAAE;QACbD,gBAAgB,EAAE,iBAAiB;QACnCL,YAAY,EAAE/F;MAChB,CAAC;MACDsG,YAAY,EAAE;QACZF,gBAAgB,EAAE,gBAAgB;QAClCL,YAAY,EAAE9F;MAChB,CAAC;MACDsG,gBAAgB,EAAE;QAChBH,gBAAgB,EAAE,oBAAoB;QACtCL,YAAY,EAAE9F;MAChB,CAAC;MACDuG,2BAA2B,EAAE;QAC3BJ,gBAAgB,EAAE,+BAA+B;QACjDL,YAAY,EAAE;MAChB,CAAC;MACDU,cAAc,EAAE;QACdL,gBAAgB,EAAE,kBAAkB;QACpCL,YAAY,EAAE;MAChB,CAAC;MACDW,eAAe,EAAE;QACfN,gBAAgB,EAAE,mBAAmB;QACrCL,YAAY,EAAE;MAChB,CAAC;MACDY,kBAAkB,EAAE;QAClBP,gBAAgB,EAAE,sBAAsB;QACxCL,YAAY,EAAE;MAChB;IACF,CAAC;IAID,SAASa,WAAWA,CAAC/L,IAAI,EAAE;MACzB,GAAG;QACDA,IAAI,GAAGA,IAAI,CAACgM,MAAM;MAKpB,CAAC,QAAQhM,IAAI,IAAIA,IAAI,CAACiM,GAAG,KAAKnD,aAAa;MAE3C,IAAI9I,IAAI,EAAE;QACR,OAAOA,IAAI;MACb;MAEA,OAAO,IAAI;IACb;IAMA,SAASkM,uBAAuBA,CAACC,KAAK,EAAEC,KAAK,EAAE;MAC7C,IAAIC,MAAM,GAAG,CAAC;MAEd,KAAK,IAAIC,KAAK,GAAGH,KAAK,EAAEG,KAAK,EAAEA,KAAK,GAAGP,WAAW,CAACO,KAAK,CAAC,EAAE;QACzDD,MAAM,EAAE;MACV;MAEA,IAAIE,MAAM,GAAG,CAAC;MAEd,KAAK,IAAIC,KAAK,GAAGJ,KAAK,EAAEI,KAAK,EAAEA,KAAK,GAAGT,WAAW,CAACS,KAAK,CAAC,EAAE;QACzDD,MAAM,EAAE;MACV;MAEA,OAAOF,MAAM,GAAGE,MAAM,GAAG,CAAC,EAAE;QAC1BJ,KAAK,GAAGJ,WAAW,CAACI,KAAK,CAAC;QAC1BE,MAAM,EAAE;MACV;MAEA,OAAOE,MAAM,GAAGF,MAAM,GAAG,CAAC,EAAE;QAC1BD,KAAK,GAAGL,WAAW,CAACK,KAAK,CAAC;QAC1BG,MAAM,EAAE;MACV;MAEA,IAAIE,KAAK,GAAGJ,MAAM;MAElB,OAAOI,KAAK,EAAE,EAAE;QACd,IAAIN,KAAK,KAAKC,KAAK,IAAID,KAAK,KAAKC,KAAK,CAACM,SAAS,EAAE;UAChD,OAAOP,KAAK;QACd;QAEAA,KAAK,GAAGJ,WAAW,CAACI,KAAK,CAAC;QAC1BC,KAAK,GAAGL,WAAW,CAACK,KAAK,CAAC;MAC5B;MAEA,OAAO,IAAI;IACb;IAKA,SAASO,UAAUA,CAACR,KAAK,EAAEC,KAAK,EAAE;MAChC,OAAOA,KAAK,EAAE;QACZ,IAAID,KAAK,KAAKC,KAAK,IAAID,KAAK,KAAKC,KAAK,CAACM,SAAS,EAAE;UAChD,OAAO,IAAI;QACb;QAEAN,KAAK,GAAGL,WAAW,CAACK,KAAK,CAAC;MAC5B;MAEA,OAAO,KAAK;IACd;IAKA,SAASQ,kBAAkBA,CAAC5M,IAAI,EAAE6M,EAAE,EAAEC,GAAG,EAAE;MACzC,IAAIC,IAAI,GAAG,EAAE;MAEb,OAAO/M,IAAI,EAAE;QACX+M,IAAI,CAAC5I,IAAI,CAACnE,IAAI,CAAC;QACfA,IAAI,GAAG+L,WAAW,CAAC/L,IAAI,CAAC;MAC1B;MAEA,IAAIK,CAAC;MAEL,KAAKA,CAAC,GAAG0M,IAAI,CAAChT,MAAM,EAAEsG,CAAC,EAAE,GAAG,CAAC,GAAI;QAC/BwM,EAAE,CAACE,IAAI,CAAC1M,CAAC,CAAC,EAAE,UAAU,EAAEyM,GAAG,CAAC;MAC9B;MAEA,KAAKzM,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAG0M,IAAI,CAAChT,MAAM,EAAEsG,CAAC,EAAE,EAAE;QAChCwM,EAAE,CAACE,IAAI,CAAC1M,CAAC,CAAC,EAAE,SAAS,EAAEyM,GAAG,CAAC;MAC7B;IACF;IAEA,SAASE,aAAaA,CAAChN,IAAI,EAAEuL,gBAAgB,EAAE;MAC7C,IAAI0B,SAAS,GAAGjN,IAAI,CAACiN,SAAS;MAE9B,IAAIA,SAAS,KAAK,IAAI,EAAE;QAEtB,OAAO,IAAI;MACb;MAEA,IAAIC,KAAK,GAAGpO,8BAA8B,CAACmO,SAAS,CAAC;MAErD,IAAIC,KAAK,KAAK,IAAI,EAAE;QAElB,OAAO,IAAI;MACb;MAEA,IAAInN,QAAQ,GAAGmN,KAAK,CAAC3B,gBAAgB,CAAC;MAEtC,IAAIxL,QAAQ,IAAI,OAAOA,QAAQ,KAAK,UAAU,EAAE;QAC9C,MAAM,IAAI3G,KAAK,CACb,YAAY,GACVmS,gBAAgB,GAChB,uDAAuD,GACvD,OAAOxL,QAAQ,GACf,SACJ,CAAC;MACH;MAEA,OAAOA,QAAQ;IACjB;IAEA,SAASoN,iBAAiBA,CAACnN,IAAI,EAAE5D,KAAK,EAAEgR,gBAAgB,EAAE;MACxD,IAAI7B,gBAAgB,GAClBnP,KAAK,CAACyF,cAAc,CAACkJ,uBAAuB,CAACqC,gBAAgB,CAAC;MAChE,OAAOJ,aAAa,CAAChN,IAAI,EAAEuL,gBAAgB,CAAC;IAC9C;IAEA,SAAS8B,iCAAiCA,CAACrN,IAAI,EAAEsN,KAAK,EAAElR,KAAK,EAAE;MAC7D;QACE,IAAI,CAAC4D,IAAI,EAAE;UACT5F,KAAK,CAAC,mCAAmC,CAAC;QAC5C;MACF;MAEA,IAAI2F,QAAQ,GAAGoN,iBAAiB,CAACnN,IAAI,EAAE5D,KAAK,EAAEkR,KAAK,CAAC;MAEpD,IAAIvN,QAAQ,EAAE;QACZ3D,KAAK,CAACmD,kBAAkB,GAAG6I,cAAc,CACvChM,KAAK,CAACmD,kBAAkB,EACxBQ,QACF,CAAC;QACD3D,KAAK,CAACqD,kBAAkB,GAAG2I,cAAc,CACvChM,KAAK,CAACqD,kBAAkB,EACxBO,IACF,CAAC;MACH;IACF;IAOA,SAASuN,sBAAsBA,CAACvN,IAAI,EAAEwN,gBAAgB,EAAEpR,KAAK,EAAE;MAC7D,IAAI4D,IAAI,IAAI5D,KAAK,IAAIA,KAAK,CAACyF,cAAc,CAAC0J,gBAAgB,EAAE;QAC1D,IAAIA,gBAAgB,GAAGnP,KAAK,CAACyF,cAAc,CAAC0J,gBAAgB;QAC5D,IAAIxL,QAAQ,GAAGiN,aAAa,CAAChN,IAAI,EAAEuL,gBAAgB,CAAC;QAEpD,IAAIxL,QAAQ,EAAE;UACZ3D,KAAK,CAACmD,kBAAkB,GAAG6I,cAAc,CACvChM,KAAK,CAACmD,kBAAkB,EACxBQ,QACF,CAAC;UACD3D,KAAK,CAACqD,kBAAkB,GAAG2I,cAAc,CACvChM,KAAK,CAACqD,kBAAkB,EACxBO,IACF,CAAC;QACH;MACF;IACF;IAOA,SAASyN,kCAAkCA,CAACrR,KAAK,EAAE;MACjD,IAAIA,KAAK,IAAIA,KAAK,CAACyF,cAAc,CAAC0J,gBAAgB,EAAE;QAClDgC,sBAAsB,CAACnR,KAAK,CAACgG,WAAW,EAAE,IAAI,EAAEhG,KAAK,CAAC;MACxD;IACF;IAEA,SAASsR,4BAA4BA,CAACC,MAAM,EAAE;MAC5CtF,kBAAkB,CAACsF,MAAM,EAAEF,kCAAkC,CAAC;IAChE;IAEA,SAASG,4CAA4CA,CAACxR,KAAK,EAAE;MAC3D,IAAIA,KAAK,IAAIA,KAAK,CAACyF,cAAc,CAACkJ,uBAAuB,EAAE;QACzD,IAAIjJ,UAAU,GAAG1F,KAAK,CAACgG,WAAW;QAClC,IAAIyL,UAAU,GAAG/L,UAAU,GAAGiK,WAAW,CAACjK,UAAU,CAAC,GAAG,IAAI;QAC5D8K,kBAAkB,CAChBiB,UAAU,EACVR,iCAAiC,EACjCjR,KACF,CAAC;MACH;IACF;IAEA,SAAS0R,sCAAsCA,CAACH,MAAM,EAAE;MACtDtF,kBAAkB,CAACsF,MAAM,EAAEC,4CAA4C,CAAC;IAC1E;IAEA,SAASG,oCAAoCA,CAAC3R,KAAK,EAAE;MACnD,IAAIA,KAAK,IAAIA,KAAK,CAACyF,cAAc,CAACkJ,uBAAuB,EAAE;QACzD6B,kBAAkB,CAChBxQ,KAAK,CAACgG,WAAW,EACjBiL,iCAAiC,EACjCjR,KACF,CAAC;MACH;IACF;IAEA,SAAS4R,8BAA8BA,CAACL,MAAM,EAAE;MAC9CtF,kBAAkB,CAACsF,MAAM,EAAEI,oCAAoC,CAAC;IAClE;IAgMA,SAASE,8BAA8BA,CACrClJ,YAAY,EACZjD,UAAU,EACVC,WAAW,EACXC,iBAAiB,EACjB;MACA,IAAIkM,kBAAkB,GAAGpJ,UAAU,CAACC,YAAY,CAAC,GAC7C8F,UAAU,CAACC,uBAAuB,GAClC9F,SAAS,CAACD,YAAY,CAAC,GACvB8F,UAAU,CAACQ,sBAAsB,GACjCtG,YAAY,KAAKF,oBAAoB,GACrCgG,UAAU,CAACO,iCAAiC,GAC5CP,UAAU,CAACM,wBAAwB;MAEvC,IAAIgD,mBAAmB,GAAG,CAAC/D,aAAa,GACpCtI,UAAU,GACVoK,uBAAuB,CAAC9B,aAAa,EAAEtI,UAAU,CAAC;MAKtD,IAAIsM,2BAA2B,GAAGD,mBAAmB,KAAK/D,aAAa;MACvE,IAAIiE,cAAc,GAAG/J,uBAAuB,CAACF,SAAS,CACpD8J,kBAAkB,EAClBC,mBAAmB,EACnBpM,WAAW,EACXC,iBACF,CAAC;MACDqM,cAAc,CAAC9J,YAAY,GAAGiD,0BAA0B,CAACjD,YAAY;MAErE,IAAI6J,2BAA2B,EAAE;QAC/BN,sCAAsC,CAACO,cAAc,CAAC;MACxD,CAAC,MAAM;QACLL,8BAA8B,CAACK,cAAc,CAAC;MAChD;MAEA,IAAIC,kBAAkB,GACpB9N,kCAAkC,CAAC6N,cAAc,CAAC;MAEpD,IAAI,CAACA,cAAc,CAACzL,YAAY,CAAC,CAAC,EAAE;QAClCyL,cAAc,CAAC/L,WAAW,CAAC+B,OAAO,CAACgK,cAAc,CAAC;MACpD;MAEA,IAAI,CAACC,kBAAkB,IAAIA,kBAAkB,KAAKlE,aAAa,EAAE;QAC/D,OAAO,IAAI;MACb;MAEA,IAAImE,SAAS;MACb,IAAIC,UAAU,GAAGlK,uBAAuB,CAACF,SAAS,CAChDyG,UAAU,CAACe,cAAc,EACzB0C,kBAAkB,EAClBvM,WAAW,EACXC,iBACF,CAAC;MACDwM,UAAU,CAACjK,YAAY,GAAGiD,0BAA0B,CAACjD,YAAY;MACjEmJ,4BAA4B,CAACc,UAAU,CAAC;MACxC,IAAIhE,kBAAkB,GAAG9J,qBAAqB,CAAC8N,UAAU,CAAC,KAAK,IAAI;MAEnE,IAAIpE,aAAa,EAAE;QACjB,IAAIqE,uBAAuB,GAAGnK,uBAAuB,CAACF,SAAS,CAC7DyG,UAAU,CAACc,2BAA2B,EACtCvB,aAAa,EACbrI,WAAW,EACXC,iBACF,CAAC;QACDyM,uBAAuB,CAAClK,YAAY,GAClCiD,0BAA0B,CAACjD,YAAY;QACzCmJ,4BAA4B,CAACe,uBAAuB,CAAC;QACrD,IAAIC,YAAY,GACd,CAAC5N,aAAa,CAAC2N,uBAAuB,CAAC,IACvC/N,qBAAqB,CAAC+N,uBAAuB,CAAC;QAEhD,IAAI,CAACA,uBAAuB,CAAC7L,YAAY,CAAC,CAAC,EAAE;UAC3C6L,uBAAuB,CAACnM,WAAW,CAAC+B,OAAO,CAACoK,uBAAuB,CAAC;QACtE;QAEA,IAAIC,YAAY,EAAE;UAChB,IAAIC,cAAc,GAAGrK,uBAAuB,CAACF,SAAS,CACpDyG,UAAU,CAACiB,kBAAkB,EAC7B1B,aAAa,EACbrI,WAAW,EACXC,iBACF,CAAC;UACD2M,cAAc,CAACpK,YAAY,GAAGiD,0BAA0B,CAACjD,YAAY;UACrEmJ,4BAA4B,CAACiB,cAAc,CAAC;UAC5CJ,SAAS,GAAGtG,UAAU,CAACsG,SAAS,EAAE,CAACC,UAAU,EAAEG,cAAc,CAAC,CAAC;UAC/DrE,eAAe,CAACgE,kBAAkB,EAAE9D,kBAAkB,CAAC;QACzD,CAAC,MAAM;UACL,IAAIoE,WAAW,GAAGtK,uBAAuB,CAACF,SAAS,CACjDyG,UAAU,CAACgB,eAAe,EAC1ByC,kBAAkB,EAClBvM,WAAW,EACXC,iBACF,CAAC;UACD4M,WAAW,CAACrK,YAAY,GAAGiD,0BAA0B,CAACjD,YAAY;UAClEmJ,4BAA4B,CAACkB,WAAW,CAAC;UACzCL,SAAS,GAAGtG,UAAU,CAACsG,SAAS,EAAEK,WAAW,CAAC;QAChD;MACF,CAAC,MAAM;QACLL,SAAS,GAAGtG,UAAU,CAACsG,SAAS,EAAEC,UAAU,CAAC;QAC7ClE,eAAe,CAACgE,kBAAkB,EAAE9D,kBAAkB,CAAC;MACzD;MAEA,OAAO+D,SAAS;IAClB;IAUA,SAASM,kBAAkBA,CAAC9J,YAAY,EAAE+J,YAAY,EAAE/M,WAAW,EAAE;MACnE,OACE+M,YAAY,KAGV/J,YAAY,KAAKH,UAAU,IAAI,CAAC7C,WAAW,CAACgN,qBAAqB,IAChE1E,iBAAiB,GAAG,CAAC,IAAItF,YAAY,KAAKF,oBAAqB,IAChEC,UAAU,CAACC,YAAY,CAAC,IACxBC,SAAS,CAACD,YAAY,CAAC,CAAC;IAE9B;IASA,SAASiK,kBAAkBA,CAACjN,WAAW,EAAE;MACvC,IAAI+F,OAAO,GAAG/F,WAAW,CAAC+F,OAAO;MAEjC,IAAI,CAACA,OAAO,IAAIA,OAAO,CAAC/N,MAAM,KAAK,CAAC,EAAE;QACpC,OAAO,IAAI;MACb;MAEA,KAAK,IAAIsG,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGyH,OAAO,CAAC/N,MAAM,EAAEsG,CAAC,EAAE,EAAE;QACvC,IAAI4O,WAAW,GAAGnH,OAAO,CAACzH,CAAC,CAAC;QAC5B,IAAIa,MAAM,GAAG+N,WAAW,CAAC/N,MAAM;QAE/B,IAAIA,MAAM,KAAK,IAAI,IAAIA,MAAM,KAAKf,SAAS,IAAIe,MAAM,KAAK,CAAC,EAAE;UAE3D,IAAIY,UAAU,GAAG/C,mBAAmB,CAACmC,MAAM,CAAC;UAE5C,IAAIyL,UAAU,CAACvC,aAAa,EAAEtI,UAAU,CAAC,EAAE;YACzC,OAAO,KAAK;UACd;QACF;MACF;MAEA,OAAO,IAAI;IACb;IAEA,IAAI4I,oBAAoB,GAAG;MAEzBwE,aAAa,EAAE,SAAAA,CAAA,EAAY;QACzB,OAAO9E,aAAa;MACtB,CAAC;MACDS,UAAU,EAAEA,UAAU;MAOtBsE,aAAa,EAAE,SAAAA,CACbpK,YAAY,EACZjD,UAAU,EACVC,WAAW,EACXC,iBAAiB,EACjBoN,gBAAgB,EAChB;QACA,IAAItK,UAAU,CAACC,YAAY,CAAC,EAAE;UAC5BsF,iBAAiB,IAAI,CAAC;QACxB,CAAC,MAAM,IAAIpF,QAAQ,CAACF,YAAY,CAAC,EAAE;UACjC,IAAIsF,iBAAiB,IAAI,CAAC,EAAE;YAC1BA,iBAAiB,IAAI,CAAC;UACxB,CAAC,MAAM;YACL;cACE1Q,IAAI,CACF,mEACF,CAAC;YACH;YAEA,OAAO,IAAI;UACb;QACF;QAEA6N,0BAA0B,CAACG,gBAAgB,CAAC5C,YAAY,EAAEhD,WAAW,CAAC;QACtE,IAAIwM,SAAS,GAAGM,kBAAkB,CAChC9J,YAAY,EACZjD,UAAU,EACVC,WACF,CAAC,GACGkM,8BAA8B,CAC5BlJ,YAAY,EACZjD,UAAU,EACVC,WAAW,EACXC,iBACF,CAAC,GACD,IAAI;QAWR,IAAIqN,qBAAqB,GAAGjF,aAAa,IAAItF,UAAU,CAACC,YAAY,CAAC;QACrE,IAAIuK,oBAAoB,GAAGlF,aAAa,IAAIpF,SAAS,CAACD,YAAY,CAAC;QACnE,IAAIwK,mBAAmB,GAAGnF,aAAa,IAAInF,QAAQ,CAACF,YAAY,CAAC;QACjE,IAAIyK,gBAAgB,GAAGH,qBAAqB,GACxCxE,UAAU,CAACS,cAAc,GACzBgE,oBAAoB,GACpBzE,UAAU,CAACW,aAAa,GACxB+D,mBAAmB,GACnB1E,UAAU,CAACY,YAAY,GACvB,IAAI;QAER,IAAI+D,gBAAgB,EAAE;UACpB,IAAIC,OAAO,GAAGnL,uBAAuB,CAACF,SAAS,CAC7CoL,gBAAgB,EAChBpF,aAAa,EACbrI,WAAW,EACXC,iBACF,CAAC;UACDyN,OAAO,CAAClL,YAAY,GAAGiD,0BAA0B,CAACjD,YAAY;UAC9DmJ,4BAA4B,CAAC+B,OAAO,CAAC;UACrClB,SAAS,GAAGtG,UAAU,CAACsG,SAAS,EAAEkB,OAAO,CAAC;QAC5C;QAEA,IAAIC,oBAAoB,GACtBtF,aAAa,IAAIrF,YAAY,KAAKJ,gBAAgB;QACpD,IAAIgL,kBAAkB,GACpBvF,aAAa,IACb,CAACsF,oBAAoB,IACrBzK,QAAQ,CAACF,YAAY,CAAC,IACtBiK,kBAAkB,CAACjN,WAAW,CAAC;QACjC,IAAI6N,UAAU,GAAGF,oBAAoB,GACjC7E,UAAU,CAACiB,kBAAkB,GAC7B6D,kBAAkB,GAClB9E,UAAU,CAACa,gBAAgB,GAC3B,IAAI;QAER,IAAIkE,UAAU,EAAE;UACd,IAAIC,UAAU,GAAGvL,uBAAuB,CAACF,SAAS,CAChDwL,UAAU,EACVxF,aAAa,EACbrI,WAAW,EACXC,iBACF,CAAC;UACD6N,UAAU,CAACtL,YAAY,GAAGiD,0BAA0B,CAACjD,YAAY;UACjEmJ,4BAA4B,CAACmC,UAAU,CAAC;UACxCtB,SAAS,GAAGtG,UAAU,CAACsG,SAAS,EAAEsB,UAAU,CAAC;UAC7CvF,eAAe,CAAC,IAAI,CAAC;QACvB;QAEA,OAAOiE,SAAS;MAClB,CAAC;MACD5D,sBAAsB,EAAE,IAAI;MAC5BmF,SAAS,EAAE;QAMTC,4BAA4B,EAAE,SAAAA,CAAUpF,sBAAsB,EAAE;UAC9DD,oBAAoB,CAACC,sBAAsB,GAAGA,sBAAsB;QACtE;MACF;IACF,CAAC;IAKD,IAAIqF,gBAAgB,GAAG,IAAI;IAK3B,IAAIC,cAAc,GAAG,CAAC,CAAC;IAOvB,SAASC,uBAAuBA,CAAA,EAAG;MACjC,IAAI,CAACF,gBAAgB,EAAE;QAErB;MACF;MAEA,KAAK,IAAIG,UAAU,IAAIF,cAAc,EAAE;QACrC,IAAIG,YAAY,GAAGH,cAAc,CAACE,UAAU,CAAC;QAE7C,IAAIE,WAAW,GAAGL,gBAAgB,CAACM,OAAO,CAACH,UAAU,CAAC;QAEtD,IAAIE,WAAW,IAAI,CAAC,CAAC,EAAE;UACrB,MAAM,IAAIjX,KAAK,CACb,wEAAwE,IACrE,wBAAwB,GAAG+W,UAAU,GAAG,IAAI,CACjD,CAAC;QACH;QAEA,IAAII,OAAO,CAACF,WAAW,CAAC,EAAE;UACxB;QACF;QAEA,IAAI,CAACD,YAAY,CAACjB,aAAa,EAAE;UAC/B,MAAM,IAAI/V,KAAK,CACb,uEAAuE,IACpE,eAAe,GAAG+W,UAAU,GAAG,aAAa,CACjD,CAAC;QACH;QAEAI,OAAO,CAACF,WAAW,CAAC,GAAGD,YAAY;QACnC,IAAII,eAAe,GAAGJ,YAAY,CAACvF,UAAU;QAE7C,KAAK,IAAI4F,SAAS,IAAID,eAAe,EAAE;UACrC,IACE,CAACE,qBAAqB,CACpBF,eAAe,CAACC,SAAS,CAAC,EAC1BL,YAAY,EACZK,SACF,CAAC,EACD;YACA,MAAM,IAAIrX,KAAK,CACb,gDAAgD,GAC9CqX,SAAS,GACT,gBAAgB,GAChBN,UAAU,GACV,IACJ,CAAC;UACH;QACF;MACF;IACF;IAUA,SAASO,qBAAqBA,CAAC7O,cAAc,EAAEuO,YAAY,EAAEK,SAAS,EAAE;MACtE,IAAIE,wBAAwB,CAAC/T,cAAc,CAAC6T,SAAS,CAAC,EAAE;QACtD,MAAM,IAAIrX,KAAK,CACb,0EAA0E,IACvE,eAAe,GAAGqX,SAAS,GAAG,IAAI,CACvC,CAAC;MACH;MAEAE,wBAAwB,CAACF,SAAS,CAAC,GAAG5O,cAAc;MACpD,IAAIkJ,uBAAuB,GAAGlJ,cAAc,CAACkJ,uBAAuB;MAEpE,IAAIA,uBAAuB,EAAE;QAC3B,KAAK,IAAI6F,SAAS,IAAI7F,uBAAuB,EAAE;UAC7C,IAAIA,uBAAuB,CAACnO,cAAc,CAACgU,SAAS,CAAC,EAAE;YACrD,IAAIC,sBAAsB,GAAG9F,uBAAuB,CAAC6F,SAAS,CAAC;YAC/DE,uBAAuB,CAACD,sBAAsB,EAAET,YAAY,CAAC;UAC/D;QACF;QAEA,OAAO,IAAI;MACb,CAAC,MAAM,IAAIvO,cAAc,CAAC0J,gBAAgB,EAAE;QAC1CuF,uBAAuB,CAACjP,cAAc,CAAC0J,gBAAgB,EAAE6E,YAAY,CAAC;QACtE,OAAO,IAAI;MACb;MAEA,OAAO,KAAK;IACd;IASA,SAASU,uBAAuBA,CAC9BvF,gBAAgB,EAChB6E,YAAY,EACZK,SAAS,EACT;MACA,IAAIM,uBAAuB,CAACxF,gBAAgB,CAAC,EAAE;QAC7C,MAAM,IAAInS,KAAK,CACb,0EAA0E,IACvE,sBAAsB,GAAGmS,gBAAgB,GAAG,IAAI,CACrD,CAAC;MACH;MAEAwF,uBAAuB,CAACxF,gBAAgB,CAAC,GAAG6E,YAAY;MAExD;QACE7E,gBAAgB,CAACyF,WAAW,CAAC,CAAC;MAChC;IACF;IASA,IAAIT,OAAO,GAAG,EAAE;IAKhB,IAAII,wBAAwB,GAAG,CAAC,CAAC;IAKjC,IAAII,uBAAuB,GAAG,CAAC,CAAC;IAWhC,SAASE,sBAAsBA,CAACC,wBAAwB,EAAE;MACxD,IAAIlB,gBAAgB,EAAE;QACpB,MAAM,IAAI5W,KAAK,CACb,qEAAqE,GACnE,kEACJ,CAAC;MACH;MAGA4W,gBAAgB,GAAG/V,KAAK,CAACiB,SAAS,CAAC4B,KAAK,CAAC1B,IAAI,CAAC8V,wBAAwB,CAAC;MACvEhB,uBAAuB,CAAC,CAAC;IAC3B;IAWA,SAASiB,wBAAwBA,CAACC,sBAAsB,EAAE;MACxD,IAAIC,eAAe,GAAG,KAAK;MAE3B,KAAK,IAAIlB,UAAU,IAAIiB,sBAAsB,EAAE;QAC7C,IAAI,CAACA,sBAAsB,CAACxU,cAAc,CAACuT,UAAU,CAAC,EAAE;UACtD;QACF;QAEA,IAAIC,YAAY,GAAGgB,sBAAsB,CAACjB,UAAU,CAAC;QAErD,IACE,CAACF,cAAc,CAACrT,cAAc,CAACuT,UAAU,CAAC,IAC1CF,cAAc,CAACE,UAAU,CAAC,KAAKC,YAAY,EAC3C;UACA,IAAIH,cAAc,CAACE,UAAU,CAAC,EAAE;YAC9B,MAAM,IAAI/W,KAAK,CACb,iEAAiE,IAC9D,wBAAwB,GAAG+W,UAAU,GAAG,IAAI,CACjD,CAAC;UACH;UAEAF,cAAc,CAACE,UAAU,CAAC,GAAGC,YAAY;UACzCiB,eAAe,GAAG,IAAI;QACxB;MACF;MAEA,IAAIA,eAAe,EAAE;QACnBnB,uBAAuB,CAAC,CAAC;MAC3B;IACF;IAEA,SAASoB,WAAWA,CAACtR,IAAI,EAAEuL,gBAAgB,EAAE;MAC3C,IAAI0B,SAAS,GAAGjN,IAAI,CAACiN,SAAS;MAE9B,IAAIA,SAAS,KAAK,IAAI,EAAE;QAEtB,OAAO,IAAI;MACb;MAEA,IAAIC,KAAK,GAAGpO,8BAA8B,CAACmO,SAAS,CAAC;MAErD,IAAIC,KAAK,KAAK,IAAI,EAAE;QAElB,OAAO,IAAI;MACb;MAEA,IAAInN,QAAQ,GAAGmN,KAAK,CAAC3B,gBAAgB,CAAC;MAEtC,IAAIxL,QAAQ,IAAI,OAAOA,QAAQ,KAAK,UAAU,EAAE;QAC9C,MAAM,IAAI3G,KAAK,CACb,YAAY,GACVmS,gBAAgB,GAChB,uDAAuD,GACvD,OAAOxL,QAAQ,GACf,SACJ,CAAC;MACH;MAEA,OAAOA,QAAQ;IACjB;IAEA,IAAIwR,wBAAwB,GACxBhY,2BAA2B,CAACiY,6BAA6B,CACtDD,wBAAwB;MAC7BE,sBAAsB,GACpBlY,2BAA2B,CAACiY,6BAA6B,CACtDC,sBAAsB;IAK7B,SAASC,eAAeA,CAAC1R,IAAI,EAAE5D,KAAK,EAAEgR,gBAAgB,EAAE;MACtD,IAAI7B,gBAAgB,GAClBnP,KAAK,CAACyF,cAAc,CAACkJ,uBAAuB,CAACqC,gBAAgB,CAAC;MAChE,OAAOkE,WAAW,CAACtR,IAAI,EAAEuL,gBAAgB,CAAC;IAC5C;IAEA,SAASoG,+BAA+BA,CAAC3R,IAAI,EAAEsN,KAAK,EAAElR,KAAK,EAAE;MAC3D;QACE,IAAI,CAAC4D,IAAI,EAAE;UACT5F,KAAK,CAAC,mCAAmC,CAAC;QAC5C;MACF;MAEA,IAAI2F,QAAQ,GAAG2R,eAAe,CAAC1R,IAAI,EAAE5D,KAAK,EAAEkR,KAAK,CAAC;MAElD,IAAIvN,QAAQ,EAAE;QACZ3D,KAAK,CAACmD,kBAAkB,GAAG6I,cAAc,CACvChM,KAAK,CAACmD,kBAAkB,EACxBQ,QACF,CAAC;QACD3D,KAAK,CAACqD,kBAAkB,GAAG2I,cAAc,CACvChM,KAAK,CAACqD,kBAAkB,EACxBO,IACF,CAAC;MACH;IACF;IAEA,SAAS4R,SAASA,CAAC5R,IAAI,EAAE;MACvB,GAAG;QACDA,IAAI,GAAGA,IAAI,CAACgM,MAAM;MAKpB,CAAC,QAAQhM,IAAI,IAAIA,IAAI,CAACiM,GAAG,KAAKnD,aAAa;MAE3C,IAAI9I,IAAI,EAAE;QACR,OAAOA,IAAI;MACb;MAEA,OAAO,IAAI;IACb;IAKA,SAAS6R,gBAAgBA,CAAC7R,IAAI,EAAE6M,EAAE,EAAEC,GAAG,EAAEgF,YAAY,EAAE;MACrD,IAAI/E,IAAI,GAAG,EAAE;MAEb,OAAO/M,IAAI,EAAE;QACX+M,IAAI,CAAC5I,IAAI,CAACnE,IAAI,CAAC;QACfA,IAAI,GAAG4R,SAAS,CAAC5R,IAAI,CAAC;MACxB;MAEA,IAAIK,CAAC;MAEL,KAAKA,CAAC,GAAG0M,IAAI,CAAChT,MAAM,EAAEsG,CAAC,EAAE,GAAG,CAAC,GAAI;QAC/BwM,EAAE,CAACE,IAAI,CAAC1M,CAAC,CAAC,EAAE,UAAU,EAAEyM,GAAG,CAAC;MAC9B;MAEA,IAAIgF,YAAY,EAAE;QAEhBjF,EAAE,CAACE,IAAI,CAAC,CAAC,CAAC,EAAE,SAAS,EAAED,GAAG,CAAC;MAC7B,CAAC,MAAM;QACL,KAAKzM,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAG0M,IAAI,CAAChT,MAAM,EAAEsG,CAAC,EAAE,EAAE;UAChCwM,EAAE,CAACE,IAAI,CAAC1M,CAAC,CAAC,EAAE,SAAS,EAAEyM,GAAG,CAAC;QAC7B;MACF;IACF;IAEA,SAASiF,kCAAkCA,CAAC3V,KAAK,EAAE;MACjD,IAAIA,KAAK,IAAIA,KAAK,CAACyF,cAAc,CAACkJ,uBAAuB,EAAE;QACzD8G,gBAAgB,CACdzV,KAAK,CAACgG,WAAW,EACjBuP,+BAA+B,EAC/BvV,KAAK,EACL,KACF,CAAC;MACH;IACF;IAEA,SAAS4V,4BAA4BA,CAACrE,MAAM,EAAE;MAC5CtF,kBAAkB,CAACsF,MAAM,EAAEoE,kCAAkC,CAAC;IAChE;IAEA,SAASE,gCAAgCA,CAAC7V,KAAK,EAAE;MAC/C,IAAIA,KAAK,IAAIA,KAAK,CAACyF,cAAc,CAACkJ,uBAAuB,EAAE;QACzD8G,gBAAgB,CACdzV,KAAK,CAACgG,WAAW,EACjBuP,+BAA+B,EAC/BvV,KAAK,EACL,IACF,CAAC;MACH;IACF;IAOA,SAAS8V,oBAAoBA,CAAClS,IAAI,EAAEwN,gBAAgB,EAAEpR,KAAK,EAAE;MAC3D,IAAI4D,IAAI,IAAI5D,KAAK,IAAIA,KAAK,CAACyF,cAAc,CAAC0J,gBAAgB,EAAE;QAC1D,IAAIA,gBAAgB,GAAGnP,KAAK,CAACyF,cAAc,CAAC0J,gBAAgB;QAC5D,IAAIxL,QAAQ,GAAGuR,WAAW,CAACtR,IAAI,EAAEuL,gBAAgB,CAAC;QAElD,IAAIxL,QAAQ,EAAE;UACZ3D,KAAK,CAACmD,kBAAkB,GAAG6I,cAAc,CACvChM,KAAK,CAACmD,kBAAkB,EACxBQ,QACF,CAAC;UACD3D,KAAK,CAACqD,kBAAkB,GAAG2I,cAAc,CACvChM,KAAK,CAACqD,kBAAkB,EACxBO,IACF,CAAC;QACH;MACF;IACF;IAOA,SAASmS,gCAAgCA,CAAC/V,KAAK,EAAE;MAC/C,IAAIA,KAAK,IAAIA,KAAK,CAACyF,cAAc,CAAC0J,gBAAgB,EAAE;QAClD2G,oBAAoB,CAAC9V,KAAK,CAACgG,WAAW,EAAE,IAAI,EAAEhG,KAAK,CAAC;MACtD;IACF;IAEA,SAASgW,0BAA0BA,CAACzE,MAAM,EAAE;MAC1CtF,kBAAkB,CAACsF,MAAM,EAAEwE,gCAAgC,CAAC;IAC9D;IAEA,IAAIE,4BAA4B,GAAG;MACjCxH,UAAU,EAAE,CAAC,CAAC;MACdsE,aAAa,EAAE,SAAAA,CACbpK,YAAY,EACZjD,UAAU,EACVC,WAAW,EACXC,iBAAiB,EACjB;QACA,IAAIF,UAAU,IAAI,IAAI,EAAE;UAEtB,OAAO,IAAI;QACb;QAEA,IAAIwQ,oBAAoB,GAAGf,wBAAwB,CAACxM,YAAY,CAAC;QACjE,IAAIwN,oBAAoB,GAAGd,sBAAsB,CAAC1M,YAAY,CAAC;QAE/D,IAAI,CAACuN,oBAAoB,IAAI,CAACC,oBAAoB,EAAE;UAClD,MAAM,IAAInZ,KAAK,CACb,oCAAoC,GAAG2L,YAAY,GAAG,cACxD,CAAC;QACH;QAEA,IAAI3I,KAAK,GAAGwF,cAAc,CAACwC,SAAS,CAClCkO,oBAAoB,IAAIC,oBAAoB,EAC5CzQ,UAAU,EACVC,WAAW,EACXC,iBACF,CAAC;QAED,IAAIsQ,oBAAoB,EAAE;UACxB,IAAIR,YAAY,GACd1V,KAAK,IAAI,IAAI,IACbA,KAAK,CAACyF,cAAc,CAACkJ,uBAAuB,IAAI,IAAI,IACpD3O,KAAK,CAACyF,cAAc,CAACkJ,uBAAuB,CAAC+G,YAAY;UAE3D,IAAIA,YAAY,EAAE;YAChBG,gCAAgC,CAAC7V,KAAK,CAAC;UACzC,CAAC,MAAM;YACL4V,4BAA4B,CAAC5V,KAAK,CAAC;UACrC;QACF,CAAC,MAAM,IAAImW,oBAAoB,EAAE;UAC/BH,0BAA0B,CAAChW,KAAK,CAAC;QACnC,CAAC,MAAM;UACL,OAAO,IAAI;QACb;QAEA,OAAOA,KAAK;MACd;IACF,CAAC;IAED,IAAIoW,2BAA2B,GAAG,CAChC,sBAAsB,EACtB,8BAA8B,CAC/B;IAYDvB,sBAAsB,CAACuB,2BAA2B,CAAC;IAMnDrB,wBAAwB,CAAC;MACvBzG,oBAAoB,EAAEA,oBAAoB;MAC1C2H,4BAA4B,EAAEA;IAChC,CAAC,CAAC;IAEF,IAAII,aAAa,GAAG,IAAIC,GAAG,CAAC,CAAC;IAC7B,IAAIC,aAAa,GAAG,IAAID,GAAG,CAAC,CAAC;IAC7B,SAASE,iBAAiBA,CAACC,QAAQ,EAAE5G,GAAG,EAAE;MACxCwG,aAAa,CAACpP,GAAG,CAAC4I,GAAG,EAAE4G,QAAQ,CAAC;IAClC;IACA,SAASC,gBAAgBA,CAAC7G,GAAG,EAAE;MAC7BwG,aAAa,CAACM,MAAM,CAAC9G,GAAG,CAAC;MACzB0G,aAAa,CAACI,MAAM,CAAC9G,GAAG,CAAC;IAC3B;IAEA,SAAS+G,kBAAkBA,CAAC/G,GAAG,EAAE;MAC/B,OAAOwG,aAAa,CAAChP,GAAG,CAACwI,GAAG,CAAC,IAAI,IAAI;IACvC;IAEA,SAASgH,kBAAkBA,CAACjT,IAAI,EAAE;MAChC,IAAIkT,cAAc,GAAGlT,IAAI,CAACiN,SAAS;MACnC,IAAIhB,GAAG,GAAGiH,cAAc,CAACC,UAAU;MAEnC,IAAIlH,GAAG,KAAK9L,SAAS,IAAI+S,cAAc,CAACE,SAAS,IAAI,IAAI,EAAE;QAEzDnH,GAAG,GAAGiH,cAAc,CAACE,SAAS,CAACC,SAAS;QACxCH,cAAc,GAAGA,cAAc,CAACE,SAAS,CAACE,cAAc;MAC1D;MAEA,IAAI,CAACrH,GAAG,EAAE;QACR,MAAM,IAAI7S,KAAK,CAAC,yCAAyC,CAAC;MAC5D;MAEA,OAAO8Z,cAAc;IACvB;IACA,SAASK,4BAA4BA,CAACtG,SAAS,EAAE;MAC/C,OAAO0F,aAAa,CAAClP,GAAG,CAACwJ,SAAS,CAACkG,UAAU,CAAC,IAAI,IAAI;IACxD;IACA,SAASK,gBAAgBA,CAACvH,GAAG,EAAEiB,KAAK,EAAE;MACpCyF,aAAa,CAACtP,GAAG,CAAC4I,GAAG,EAAEiB,KAAK,CAAC;IAC/B;IAQA,IAAIuG,kBAAkB,GAAG,SAAAA,CAAU5G,EAAE,EAAE6G,WAAW,EAAE;MAClD,OAAO7G,EAAE,CAAC6G,WAAW,CAAC;IACxB,CAAC;IAED,IAAIC,oBAAoB,GAAG,KAAK;IAChC,SAASC,gBAAgBA,CAAC/G,EAAE,EAAE6G,WAAW,EAAE;MACzC,IAAIC,oBAAoB,EAAE;QAGxB,OAAO9G,EAAE,CAAC6G,WAAW,CAAC;MACxB;MAEAC,oBAAoB,GAAG,IAAI;MAE3B,IAAI;QACF,OAAOF,kBAAkB,CAAC5G,EAAE,EAAE6G,WAAW,CAAC;MAC5C,CAAC,SAAS;QACRC,oBAAoB,GAAG,KAAK;MAC9B;IACF;IACA,SAASE,yBAAyBA,CAChCC,mBAAmB,EACnBC,oBAAoB,EACpB;MACAN,kBAAkB,GAAGK,mBAAmB;IAC1C;IAOA,IAAIE,UAAU,GAAG,IAAI;IAQrB,SAASC,2BAA2BA,CAAC7X,KAAK,EAAE;MAC1C,IAAIA,KAAK,EAAE;QACTgE,wBAAwB,CAAChE,KAAK,CAAC;QAE/B,IAAI,CAACA,KAAK,CAACwG,YAAY,CAAC,CAAC,EAAE;UACzBxG,KAAK,CAACkG,WAAW,CAAC+B,OAAO,CAACjI,KAAK,CAAC;QAClC;MACF;IACF;IAEA,SAAS8X,mCAAmCA,CAAC5V,CAAC,EAAE;MAC9C,OAAO2V,2BAA2B,CAAC3V,CAAC,CAAC;IACvC;IAEA,SAAS6V,gBAAgBA,CAACxG,MAAM,EAAE;MAChC,IAAIA,MAAM,KAAK,IAAI,EAAE;QACnBqG,UAAU,GAAG5L,cAAc,CAAC4L,UAAU,EAAErG,MAAM,CAAC;MACjD;MAGA,IAAIyG,oBAAoB,GAAGJ,UAAU;MACrCA,UAAU,GAAG,IAAI;MAEjB,IAAI,CAACI,oBAAoB,EAAE;QACzB;MACF;MAEA/L,kBAAkB,CAChB+L,oBAAoB,EACpBF,mCACF,CAAC;MAED,IAAIF,UAAU,EAAE;QACd,MAAM,IAAI5a,KAAK,CACb,wEAAwE,GACtE,gEACJ,CAAC;MACH;MAEAsF,kBAAkB,CAAC,CAAC;IACtB;IAQA,IAAI2V,kBAAkB,GAAG,CAAC,CAAC;IAU3B,SAASC,gBAAgBA,CAACxM,OAAO,EAAEyM,OAAO,EAAE;MAC1C,IAAI9T,GAAG,GAAG,EAAE;MAEZ,KAAK,IAAIJ,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGkU,OAAO,CAACxa,MAAM,EAAEsG,CAAC,EAAE,EAAE;QACvCI,GAAG,CAAC0D,IAAI,CAAC2D,OAAO,CAACyM,OAAO,CAAClU,CAAC,CAAC,CAAC,CAAC;MAC/B;MAEA,OAAOI,GAAG;IACZ;IAaA,SAAS+T,sBAAsBA,CAAC1M,OAAO,EAAEyM,OAAO,EAAE;MAChD,IAAIE,SAAS,GAAG,EAAE;MAGlB,IAAIC,IAAI,GAAG5M,OAAO;MAElB,KAAK,IAAIzH,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGkU,OAAO,CAACxa,MAAM,EAAEsG,CAAC,EAAE,EAAE;QACvC,IAAIsU,KAAK,GAAGJ,OAAO,CAAClU,CAAC,CAAC;QACtBoU,SAAS,CAACtQ,IAAI,CAAC2D,OAAO,CAAC6M,KAAK,CAAC,CAAC;QAC9BD,IAAI,CAACC,KAAK,CAAC,GAAG,IAAI;MACpB;MAEA,IAAIC,MAAM,GAAG,CAAC;MAEd,KAAK,IAAIC,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGH,IAAI,CAAC3a,MAAM,EAAE8a,CAAC,EAAE,EAAE;QACpC,IAAIC,GAAG,GAAGJ,IAAI,CAACG,CAAC,CAAC;QAEjB,IAAIC,GAAG,KAAK,IAAI,EAAE;UAChBJ,IAAI,CAACE,MAAM,EAAE,CAAC,GAAGE,GAAG;QACtB;MACF;MAEAJ,IAAI,CAAC3a,MAAM,GAAG6a,MAAM;MACpB,OAAOH,SAAS;IAClB;IAYA,SAASM,uBAAuBA,CAC9BC,UAAU,EACVjQ,YAAY,EACZkQ,gBAAgB,EAChB;MACA,IAAIlT,WAAW,GAAGkT,gBAAgB,IAAIZ,kBAAkB;MACxD,IAAIrU,IAAI,GAAGgT,kBAAkB,CAACgC,UAAU,CAAC;MACzC,IAAI9T,MAAM,GAAG,IAAI;MAEjB,IAAIlB,IAAI,IAAI,IAAI,EAAE;QAChBkB,MAAM,GAAGlB,IAAI,CAACiN,SAAS;MACzB;MAEA2G,gBAAgB,CAAC,YAAY;QAC3BsB,+BAA+B,CAC7BnQ,YAAY,EACZ/E,IAAI,EACJ+B,WAAW,EACXb,MACF,CAAC;MACH,CAAC,CAAC;IAEJ;IASA,SAASiU,mBAAmBA,CAC1BpQ,YAAY,EACZjD,UAAU,EACVC,WAAW,EACXC,iBAAiB,EACjB;MACA,IAAI2L,MAAM,GAAG,IAAI;MACjB,IAAIyH,aAAa,GAAG7E,OAAO;MAE3B,KAAK,IAAIlQ,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAG+U,aAAa,CAACrb,MAAM,EAAEsG,CAAC,EAAE,EAAE;QAE7C,IAAIgV,cAAc,GAAGD,aAAa,CAAC/U,CAAC,CAAC;QAErC,IAAIgV,cAAc,EAAE;UAClB,IAAIC,eAAe,GAAGD,cAAc,CAAClG,aAAa,CAChDpK,YAAY,EACZjD,UAAU,EACVC,WAAW,EACXC,iBACF,CAAC;UAED,IAAIsT,eAAe,EAAE;YACnB3H,MAAM,GAAGvF,cAAc,CAACuF,MAAM,EAAE2H,eAAe,CAAC;UAClD;QACF;MACF;MAEA,OAAO3H,MAAM;IACf;IAEA,SAASuH,+BAA+BA,CACtCnQ,YAAY,EACZjD,UAAU,EACVC,WAAW,EACXC,iBAAiB,EACjB;MACA,IAAI2L,MAAM,GAAGwH,mBAAmB,CAC9BpQ,YAAY,EACZjD,UAAU,EACVC,WAAW,EACXC,iBACF,CAAC;MACDmS,gBAAgB,CAACxG,MAAM,CAAC;IAC1B;IASA,SAAS4H,YAAYA,CAACP,UAAU,EAAEjQ,YAAY,EAAEkQ,gBAAgB,EAAE;MAChEF,uBAAuB,CAACC,UAAU,EAAEjQ,YAAY,EAAEkQ,gBAAgB,CAAC;IACrE;IA0BA,SAASO,cAAcA,CAACC,iBAAiB,EAAE3N,OAAO,EAAE4N,cAAc,EAAE;MAClE,IAAI9N,cAAc,GAChB6N,iBAAiB,KAAK,aAAa,IACnCA,iBAAiB,KAAK,gBAAgB,GAClCjB,sBAAsB,CAAC1M,OAAO,EAAE4N,cAAc,CAAC,GAC/CpB,gBAAgB,CAACxM,OAAO,EAAE4N,cAAc,CAAC;MAE/C,KAAK,IAAIC,EAAE,GAAG,CAAC,EAAEA,EAAE,GAAG/N,cAAc,CAAC7N,MAAM,EAAE4b,EAAE,EAAE,EAAE;QACjD,IAAIhQ,KAAK,GAAGiC,cAAc,CAAC+N,EAAE,CAAC;QAG9BhQ,KAAK,CAACiC,cAAc,GAAGA,cAAc;QACrCjC,KAAK,CAACmC,OAAO,GAAGA,OAAO;QACvB,IAAI/F,WAAW,GAAG4D,KAAK;QACvB,IAAIqP,UAAU,GAAG,IAAI;QACrB,IAAI9T,MAAM,GAAGa,WAAW,CAACb,MAAM;QAE/B,IAAIA,MAAM,KAAK,IAAI,IAAIA,MAAM,KAAKf,SAAS,EAAE;UAC3C,IAAIe,MAAM,GAAG,CAAC,EAAE;YACd;cACE9G,KAAK,CAAC,wDAAwD,CAAC;YACjE;UACF,CAAC,MAAM;YACL4a,UAAU,GAAG9T,MAAM;UACrB;QACF;QAEA6T,uBAAuB,CAACC,UAAU,EAAES,iBAAiB,EAAE1T,WAAW,CAAC;MACrE;IACF;IAGA,IAAI6T,iCAAiC,GAAG;MACtChL,QAAQ,EAAE,SAAAA,CAAUiL,IAAI,EAAEC,EAAE,EAAEC,oBAAoB,EAAE;QAClD,IAAID,EAAE,KAAK,IAAI,EAAE;UACf,IAAI7J,GAAG,GAAG6J,EAAE,CAAC7I,SAAS,CAACkG,UAAU;UACjC5Z,2BAA2B,CAACyc,SAAS,CAACC,cAAc,CAClDhK,GAAG,EACH8J,oBACF,CAAC;QACH,CAAC,MAAM;UACLxc,2BAA2B,CAACyc,SAAS,CAACE,gBAAgB,CAAC,CAAC;QAC1D;MACF;IACF,CAAC;IAMD3c,2BAA2B,CAAC4c,eAAe,CAACC,QAAQ,CAAC;MACnDb,YAAY,EAAEA,YAAY;MAC1BC,cAAc,EAAEA;IAClB,CAAC,CAAC;IACFvW,gBAAgB,CACdsU,4BAA4B,EAC5BP,kBAAkB,EAClBC,kBACF,CAAC;IACDvI,oBAAoB,CAACoF,SAAS,CAACC,4BAA4B,CACzD6F,iCACF,CAAC;IAWD,SAASnS,GAAGA,CAAC4S,GAAG,EAAE;MAChB,OAAOA,GAAG,CAACC,eAAe;IAC5B;IACA,SAASjT,GAAGA,CAACgT,GAAG,EAAEE,KAAK,EAAE;MACvBF,GAAG,CAACC,eAAe,GAAGC,KAAK;IAC7B;IAEA,IAAIC,wBAAwB,GAAG,KAAK;IACpC,IAAIC,mBAAmB,GAAG,IAAI;IAC9B,IAAIC,yBAAyB,GAAG,IAAI;IACpC,IAAIC,+BAA+B,GAAG,IAAI;IAC1C,IAAIC,oBAAoB,GAAG,GAAG;IAC9B,IAAIC,0BAA0B,GAAG,IAAI;IACrC,IAAIC,4BAA4B,GAAG,KAAK;IACxC,IAAIC,kBAAkB,GAAG,KAAK;IAC9B,IAAIC,kBAAkB,GAAG,KAAK;IAM9B,IAAIC,kBAAkB,GAAGC,MAAM,CAACC,GAAG,CAAC,eAAe,CAAC;IACpD,IAAIC,iBAAiB,GAAGF,MAAM,CAACC,GAAG,CAAC,cAAc,CAAC;IAClD,IAAIE,mBAAmB,GAAGH,MAAM,CAACC,GAAG,CAAC,gBAAgB,CAAC;IACtD,IAAIG,sBAAsB,GAAGJ,MAAM,CAACC,GAAG,CAAC,mBAAmB,CAAC;IAC5D,IAAII,mBAAmB,GAAGL,MAAM,CAACC,GAAG,CAAC,gBAAgB,CAAC;IACtD,IAAIK,mBAAmB,GAAGN,MAAM,CAACC,GAAG,CAAC,gBAAgB,CAAC;IACtD,IAAIM,kBAAkB,GAAGP,MAAM,CAACC,GAAG,CAAC,eAAe,CAAC;IACpD,IAAIO,sBAAsB,GAAGR,MAAM,CAACC,GAAG,CAAC,mBAAmB,CAAC;IAC5D,IAAIQ,mBAAmB,GAAGT,MAAM,CAACC,GAAG,CAAC,gBAAgB,CAAC;IACtD,IAAIS,wBAAwB,GAAGV,MAAM,CAACC,GAAG,CAAC,qBAAqB,CAAC;IAChE,IAAIU,eAAe,GAAGX,MAAM,CAACC,GAAG,CAAC,YAAY,CAAC;IAC9C,IAAIW,eAAe,GAAGZ,MAAM,CAACC,GAAG,CAAC,YAAY,CAAC;IAC9C,IAAIY,gBAAgB,GAAGb,MAAM,CAACC,GAAG,CAAC,aAAa,CAAC;IAChD,IAAIa,6BAA6B,GAAGd,MAAM,CAACC,GAAG,CAAC,wBAAwB,CAAC;IACxE,IAAIc,oBAAoB,GAAGf,MAAM,CAACC,GAAG,CAAC,iBAAiB,CAAC;IACxD,IAAIe,wBAAwB,GAAGhB,MAAM,CAACC,GAAG,CAAC,qBAAqB,CAAC;IAChE,IAAIgB,gBAAgB,GAAGjB,MAAM,CAACC,GAAG,CAAC,aAAa,CAAC;IAChD,IAAIiB,yBAAyB,GAAGlB,MAAM,CAACC,GAAG,CAAC,sBAAsB,CAAC;IAClE,IAAIkB,qBAAqB,GAAGnB,MAAM,CAACoB,QAAQ;IAC3C,IAAIC,oBAAoB,GAAG,YAAY;IACvC,SAASC,aAAaA,CAACC,aAAa,EAAE;MACpC,IAAIA,aAAa,KAAK,IAAI,IAAI,OAAOA,aAAa,KAAK,QAAQ,EAAE;QAC/D,OAAO,IAAI;MACb;MAEA,IAAIC,aAAa,GACdL,qBAAqB,IAAII,aAAa,CAACJ,qBAAqB,CAAC,IAC9DI,aAAa,CAACF,oBAAoB,CAAC;MAErC,IAAI,OAAOG,aAAa,KAAK,UAAU,EAAE;QACvC,OAAOA,aAAa;MACtB;MAEA,OAAO,IAAI;IACb;IAEA,SAASC,gBAAgBA,CAACC,SAAS,EAAEC,SAAS,EAAEC,WAAW,EAAE;MAC3D,IAAIC,WAAW,GAAGH,SAAS,CAACG,WAAW;MAEvC,IAAIA,WAAW,EAAE;QACf,OAAOA,WAAW;MACpB;MAEA,IAAIC,YAAY,GAAGH,SAAS,CAACE,WAAW,IAAIF,SAAS,CAAChd,IAAI,IAAI,EAAE;MAChE,OAAOmd,YAAY,KAAK,EAAE,GACtBF,WAAW,GAAG,GAAG,GAAGE,YAAY,GAAG,GAAG,GACtCF,WAAW;IACjB;IAEA,SAASG,gBAAgBA,CAAChZ,IAAI,EAAE;MAC9B,OAAOA,IAAI,CAAC8Y,WAAW,IAAI,SAAS;IACtC;IAEA,IAAIG,sBAAsB,GAAGhC,MAAM,CAACC,GAAG,CAAC,wBAAwB,CAAC;IAEjE,SAASgC,wBAAwBA,CAAClZ,IAAI,EAAE;MACtC,IAAIA,IAAI,IAAI,IAAI,EAAE;QAEhB,OAAO,IAAI;MACb;MAEA,IAAI,OAAOA,IAAI,KAAK,UAAU,EAAE;QAC9B,IAAIA,IAAI,CAACmZ,QAAQ,KAAKF,sBAAsB,EAAE;UAE5C,OAAO,IAAI;QACb;QAEA,OAAOjZ,IAAI,CAAC8Y,WAAW,IAAI9Y,IAAI,CAACpE,IAAI,IAAI,IAAI;MAC9C;MAEA,IAAI,OAAOoE,IAAI,KAAK,QAAQ,EAAE;QAC5B,OAAOA,IAAI;MACb;MAEA,QAAQA,IAAI;QACV,KAAKoX,mBAAmB;UACtB,OAAO,UAAU;QAEnB,KAAKD,iBAAiB;UACpB,OAAO,QAAQ;QAEjB,KAAKG,mBAAmB;UACtB,OAAO,UAAU;QAEnB,KAAKD,sBAAsB;UACzB,OAAO,YAAY;QAErB,KAAKK,mBAAmB;UACtB,OAAO,UAAU;QAEnB,KAAKC,wBAAwB;UAC3B,OAAO,cAAc;MACzB;MAEA,IAAI,OAAO3X,IAAI,KAAK,QAAQ,EAAE;QAC5B;UACE,IAAI,OAAOA,IAAI,CAACgM,GAAG,KAAK,QAAQ,EAAE;YAChC7R,KAAK,CACH,+DAA+D,GAC7D,sDACJ,CAAC;UACH;QACF;QAEA,QAAQ6F,IAAI,CAACmZ,QAAQ;UACnB,KAAK3B,kBAAkB;YACrB,IAAI1b,OAAO,GAAGkE,IAAI;YAClB,OAAOgZ,gBAAgB,CAACld,OAAO,CAAC,GAAG,WAAW;UAEhD,KAAKyb,mBAAmB;YACtB,IAAI6B,QAAQ,GAAGpZ,IAAI;YACnB,OAAOgZ,gBAAgB,CAACI,QAAQ,CAACC,QAAQ,CAAC,GAAG,WAAW;UAE1D,KAAK5B,sBAAsB;YACzB,OAAOiB,gBAAgB,CAAC1Y,IAAI,EAAEA,IAAI,CAACsZ,MAAM,EAAE,YAAY,CAAC;UAE1D,KAAK1B,eAAe;YAClB,IAAI2B,SAAS,GAAGvZ,IAAI,CAAC8Y,WAAW,IAAI,IAAI;YAExC,IAAIS,SAAS,KAAK,IAAI,EAAE;cACtB,OAAOA,SAAS;YAClB;YAEA,OAAOL,wBAAwB,CAAClZ,IAAI,CAACA,IAAI,CAAC,IAAI,MAAM;UAEtD,KAAK6X,eAAe;YAAE;cACpB,IAAI2B,aAAa,GAAGxZ,IAAI;cACxB,IAAIyZ,OAAO,GAAGD,aAAa,CAACE,QAAQ;cACpC,IAAIC,IAAI,GAAGH,aAAa,CAACI,KAAK;cAE9B,IAAI;gBACF,OAAOV,wBAAwB,CAACS,IAAI,CAACF,OAAO,CAAC,CAAC;cAChD,CAAC,CAAC,OAAOI,CAAC,EAAE;gBACV,OAAO,IAAI;cACb;YACF;QACF;MACF;MAEA,OAAO,IAAI;IACb;IAEA,SAASC,cAAcA,CAACnB,SAAS,EAAEC,SAAS,EAAEC,WAAW,EAAE;MACzD,IAAIE,YAAY,GAAGH,SAAS,CAACE,WAAW,IAAIF,SAAS,CAAChd,IAAI,IAAI,EAAE;MAChE,OACE+c,SAAS,CAACG,WAAW,KACpBC,YAAY,KAAK,EAAE,GAChBF,WAAW,GAAG,GAAG,GAAGE,YAAY,GAAG,GAAG,GACtCF,WAAW,CAAC;IAEpB;IAEA,SAASkB,cAAcA,CAAC/Z,IAAI,EAAE;MAC5B,OAAOA,IAAI,CAAC8Y,WAAW,IAAI,SAAS;IACtC;IAEA,SAASkB,yBAAyBA,CAACC,KAAK,EAAE;MACxC,IAAIjO,GAAG,GAAGiO,KAAK,CAACjO,GAAG;QACjBhM,IAAI,GAAGia,KAAK,CAACja,IAAI;MAEnB,QAAQgM,GAAG;QACT,KAAKjC,cAAc;UACjB,OAAO,OAAO;QAEhB,KAAKd,eAAe;UAClB,IAAInN,OAAO,GAAGkE,IAAI;UAClB,OAAO+Z,cAAc,CAACje,OAAO,CAAC,GAAG,WAAW;QAE9C,KAAKoN,eAAe;UAClB,IAAIkQ,QAAQ,GAAGpZ,IAAI;UACnB,OAAO+Z,cAAc,CAACX,QAAQ,CAACC,QAAQ,CAAC,GAAG,WAAW;QAExD,KAAK3P,kBAAkB;UACrB,OAAO,oBAAoB;QAE7B,KAAKP,UAAU;UACb,OAAO2Q,cAAc,CAAC9Z,IAAI,EAAEA,IAAI,CAACsZ,MAAM,EAAE,YAAY,CAAC;QAExD,KAAKvQ,QAAQ;UACX,OAAO,UAAU;QAEnB,KAAKkB,aAAa;QAClB,KAAKC,aAAa;QAClB,KAAKrB,aAAa;UAEhB,OAAO7I,IAAI;QAEb,KAAK4I,UAAU;UACb,OAAO,QAAQ;QAEjB,KAAKD,QAAQ;UACX,OAAO,MAAM;QAEf,KAAKG,QAAQ;UACX,OAAO,MAAM;QAEf,KAAKU,aAAa;UAEhB,OAAO0P,wBAAwB,CAAClZ,IAAI,CAAC;QAEvC,KAAKgJ,IAAI;UACP,IAAIhJ,IAAI,KAAKqX,sBAAsB,EAAE;YAEnC,OAAO,YAAY;UACrB;UAEA,OAAO,MAAM;QAEf,KAAKxN,kBAAkB;UACrB,OAAO,WAAW;QAEpB,KAAKT,QAAQ;UACX,OAAO,UAAU;QAEnB,KAAKQ,cAAc;UACjB,OAAO,OAAO;QAEhB,KAAKP,iBAAiB;UACpB,OAAO,UAAU;QAEnB,KAAKM,qBAAqB;UACxB,OAAO,cAAc;QAEvB,KAAKK,sBAAsB;UACzB,OAAO,eAAe;QAGxB,KAAKvB,cAAc;QACnB,KAAKD,iBAAiB;QACtB,KAAKiB,wBAAwB;QAC7B,KAAKf,sBAAsB;QAC3B,KAAKY,aAAa;QAClB,KAAKC,mBAAmB;UACtB,IAAI,OAAOvJ,IAAI,KAAK,UAAU,EAAE;YAC9B,OAAOA,IAAI,CAAC8Y,WAAW,IAAI9Y,IAAI,CAACpE,IAAI,IAAI,IAAI;UAC9C;UAEA,IAAI,OAAOoE,IAAI,KAAK,QAAQ,EAAE;YAC5B,OAAOA,IAAI;UACb;UAEA;MACJ;MAEA,OAAO,IAAI;IACb;IAEA,IAAIka,SAAS,GAEX,CAAC;IACH,IAAIC,aAAa,GAEf,CAAC;IACH,IAAIC,SAAS,GAEX,CAAC;IACH,IAAIC,UAAU,GAEZ,GAAG;IACL,IAAIC,SAAS,GAEX,IAAI;IAEN,IAAIC,MAAM,GAER,CAAC;IAGH,IAAIC,aAAa,GAEf,EAAE;IACJ,IAAIC,YAAY,GAEd,EAAE;IACJ,IAAIC,QAAQ,GAEV,EAAE;IAGJ,IAAIC,iBAAiB,GAEnB,GAAG;IACL,IAAIC,GAAG,GAEL,GAAG;IACL,IAAIC,QAAQ,GAEV,IAAI;IACN,IAAIC,SAAS,GAEX,IAAI;IAGN,IAAIC,UAAU,GAEZ,IAAI;IACN,IAAIC,gBAAgB,GAElB,KAAK;IAIP,IAAIC,aAAa,GAAGD,gBAAgB;IACpC,IAAIE,mBAAmB,GAAGH,UAAU;IACpC,IAAII,QAAQ,GAAGV,YAAY;IAC3B,IAAIW,mBAAmB,GACrBN,SAAS,GAAGP,MAAM,GAAGG,QAAQ,GAAGE,GAAG,GAAGC,QAAQ,GAAGG,gBAAgB;IAEnE,IAAIK,cAAc,GAEhB,KAAK;IAEP,IAAIC,UAAU,GAEZ,KAAK;IACP,IAAIC,aAAa,GAEf,KAAK;IACP,IAAIC,4BAA4B,GAE9B,MAAM;IACR,IAAIC,MAAM,GAER,OAAO;IAMT,IAAIC,SAAS,GAEX,OAAO;IACT,IAAIC,YAAY,GAEd,OAAO;IACT,IAAIC,aAAa,GAEf,OAAO;IACT,IAAIC,gBAAgB,GAElB,QAAQ;IAEV,IAAIC,YAAY,GAEd,QAAQ;IACV,IAAIC,cAAc,GAEhB,QAAQ;IACV,IAAIC,eAAe,GAEjB,SAAS;IAGX,IAAIC,kBAAkB,GAEpB1B,MAAM,GAAGM,QAAQ,GAAG,CAAC;IACvB,IAAIqB,YAAY,GACd9B,SAAS,GACTG,MAAM,GACNC,aAAa,GACbC,YAAY,GACZG,GAAG,GACHN,SAAS,GACTS,UAAU;IACZ,IAAIoB,UAAU,GAAG5B,MAAM,GAAGG,QAAQ,GAAGE,GAAG,GAAGG,UAAU;IAErD,IAAIqB,WAAW,GAAGtB,SAAS,GAAGC,UAAU,GAAGP,aAAa;IAIxD,IAAI6B,UAAU,GACZV,YAAY,GAAGC,aAAa,GAAGF,SAAS,GAAGG,gBAAgB;IAE7D,IAAIS,mBAAmB,GAAG9iB,oBAAoB,CAAC+iB,iBAAiB;IAChE,SAASC,sBAAsBA,CAACvC,KAAK,EAAE;MACrC,IAAIwC,IAAI,GAAGxC,KAAK;MAChB,IAAIyC,cAAc,GAAGzC,KAAK;MAE1B,IAAI,CAACA,KAAK,CAACxN,SAAS,EAAE;QAGpB,IAAIkQ,QAAQ,GAAGF,IAAI;QAEnB,GAAG;UACDA,IAAI,GAAGE,QAAQ;UAEf,IAAI,CAACF,IAAI,CAACG,KAAK,IAAIxC,SAAS,GAAGE,SAAS,CAAC,MAAMJ,SAAS,EAAE;YAIxDwC,cAAc,GAAGD,IAAI,CAAC1Q,MAAM;UAC9B;UAEA4Q,QAAQ,GAAGF,IAAI,CAAC1Q,MAAM;QACxB,CAAC,QAAQ4Q,QAAQ;MACnB,CAAC,MAAM;QACL,OAAOF,IAAI,CAAC1Q,MAAM,EAAE;UAClB0Q,IAAI,GAAGA,IAAI,CAAC1Q,MAAM;QACpB;MACF;MAEA,IAAI0Q,IAAI,CAACzQ,GAAG,KAAKrD,QAAQ,EAAE;QAGzB,OAAO+T,cAAc;MACvB;MAGA,OAAO,IAAI;IACb;IACA,SAASG,cAAcA,CAAC5C,KAAK,EAAE;MAC7B,OAAOuC,sBAAsB,CAACvC,KAAK,CAAC,KAAKA,KAAK;IAChD;IACA,SAAS6C,SAASA,CAACC,SAAS,EAAE;MAC5B;QACE,IAAIC,KAAK,GAAGV,mBAAmB,CAACrU,OAAO;QAEvC,IAAI+U,KAAK,KAAK,IAAI,IAAIA,KAAK,CAAChR,GAAG,KAAKvD,cAAc,EAAE;UAClD,IAAIwU,UAAU,GAAGD,KAAK;UACtB,IAAIjZ,QAAQ,GAAGkZ,UAAU,CAACjQ,SAAS;UAEnC,IAAI,CAACjJ,QAAQ,CAACmZ,wBAAwB,EAAE;YACtC/iB,KAAK,CACH,0DAA0D,GACxD,mEAAmE,GACnE,oEAAoE,GACpE,iEAAiE,GACjE,6BAA6B,EAC/B6f,yBAAyB,CAACiD,UAAU,CAAC,IAAI,aAC3C,CAAC;UACH;UAEAlZ,QAAQ,CAACmZ,wBAAwB,GAAG,IAAI;QAC1C;MACF;MAEA,IAAIjD,KAAK,GAAGzW,GAAG,CAACuZ,SAAS,CAAC;MAE1B,IAAI,CAAC9C,KAAK,EAAE;QACV,OAAO,KAAK;MACd;MAEA,OAAOuC,sBAAsB,CAACvC,KAAK,CAAC,KAAKA,KAAK;IAChD;IAEA,SAASkD,eAAeA,CAAClD,KAAK,EAAE;MAC9B,IAAIuC,sBAAsB,CAACvC,KAAK,CAAC,KAAKA,KAAK,EAAE;QAC3C,MAAM,IAAI9gB,KAAK,CAAC,gDAAgD,CAAC;MACnE;IACF;IAEA,SAASikB,6BAA6BA,CAACnD,KAAK,EAAE;MAC5C,IAAIxN,SAAS,GAAGwN,KAAK,CAACxN,SAAS;MAE/B,IAAI,CAACA,SAAS,EAAE;QAEd,IAAIiQ,cAAc,GAAGF,sBAAsB,CAACvC,KAAK,CAAC;QAElD,IAAIyC,cAAc,KAAK,IAAI,EAAE;UAC3B,MAAM,IAAIvjB,KAAK,CAAC,gDAAgD,CAAC;QACnE;QAEA,IAAIujB,cAAc,KAAKzC,KAAK,EAAE;UAC5B,OAAO,IAAI;QACb;QAEA,OAAOA,KAAK;MACd;MAIA,IAAIhc,CAAC,GAAGgc,KAAK;MACb,IAAI/b,CAAC,GAAGuO,SAAS;MAEjB,OAAO,IAAI,EAAE;QACX,IAAI4Q,OAAO,GAAGpf,CAAC,CAAC8N,MAAM;QAEtB,IAAIsR,OAAO,KAAK,IAAI,EAAE;UAEpB;QACF;QAEA,IAAIC,OAAO,GAAGD,OAAO,CAAC5Q,SAAS;QAE/B,IAAI6Q,OAAO,KAAK,IAAI,EAAE;UAKpB,IAAIC,UAAU,GAAGF,OAAO,CAACtR,MAAM;UAE/B,IAAIwR,UAAU,KAAK,IAAI,EAAE;YACvBtf,CAAC,GAAGC,CAAC,GAAGqf,UAAU;YAClB;UACF;UAEA;QACF;QAIA,IAAIF,OAAO,CAACG,KAAK,KAAKF,OAAO,CAACE,KAAK,EAAE;UACnC,IAAIA,KAAK,GAAGH,OAAO,CAACG,KAAK;UAEzB,OAAOA,KAAK,EAAE;YACZ,IAAIA,KAAK,KAAKvf,CAAC,EAAE;cAEfkf,eAAe,CAACE,OAAO,CAAC;cACxB,OAAOpD,KAAK;YACd;YAEA,IAAIuD,KAAK,KAAKtf,CAAC,EAAE;cAEfif,eAAe,CAACE,OAAO,CAAC;cACxB,OAAO5Q,SAAS;YAClB;YAEA+Q,KAAK,GAAGA,KAAK,CAACC,OAAO;UACvB;UAGA,MAAM,IAAItkB,KAAK,CAAC,gDAAgD,CAAC;QACnE;QAEA,IAAI8E,CAAC,CAAC8N,MAAM,KAAK7N,CAAC,CAAC6N,MAAM,EAAE;UAKzB9N,CAAC,GAAGof,OAAO;UACXnf,CAAC,GAAGof,OAAO;QACb,CAAC,MAAM;UAML,IAAII,YAAY,GAAG,KAAK;UACxB,IAAIC,MAAM,GAAGN,OAAO,CAACG,KAAK;UAE1B,OAAOG,MAAM,EAAE;YACb,IAAIA,MAAM,KAAK1f,CAAC,EAAE;cAChByf,YAAY,GAAG,IAAI;cACnBzf,CAAC,GAAGof,OAAO;cACXnf,CAAC,GAAGof,OAAO;cACX;YACF;YAEA,IAAIK,MAAM,KAAKzf,CAAC,EAAE;cAChBwf,YAAY,GAAG,IAAI;cACnBxf,CAAC,GAAGmf,OAAO;cACXpf,CAAC,GAAGqf,OAAO;cACX;YACF;YAEAK,MAAM,GAAGA,MAAM,CAACF,OAAO;UACzB;UAEA,IAAI,CAACC,YAAY,EAAE;YAEjBC,MAAM,GAAGL,OAAO,CAACE,KAAK;YAEtB,OAAOG,MAAM,EAAE;cACb,IAAIA,MAAM,KAAK1f,CAAC,EAAE;gBAChByf,YAAY,GAAG,IAAI;gBACnBzf,CAAC,GAAGqf,OAAO;gBACXpf,CAAC,GAAGmf,OAAO;gBACX;cACF;cAEA,IAAIM,MAAM,KAAKzf,CAAC,EAAE;gBAChBwf,YAAY,GAAG,IAAI;gBACnBxf,CAAC,GAAGof,OAAO;gBACXrf,CAAC,GAAGof,OAAO;gBACX;cACF;cAEAM,MAAM,GAAGA,MAAM,CAACF,OAAO;YACzB;YAEA,IAAI,CAACC,YAAY,EAAE;cACjB,MAAM,IAAIvkB,KAAK,CACb,iEAAiE,GAC/D,+DACJ,CAAC;YACH;UACF;QACF;QAEA,IAAI8E,CAAC,CAACwO,SAAS,KAAKvO,CAAC,EAAE;UACrB,MAAM,IAAI/E,KAAK,CACb,0DAA0D,GACxD,sEACJ,CAAC;QACH;MACF;MAGA,IAAI8E,CAAC,CAAC+N,GAAG,KAAKrD,QAAQ,EAAE;QACtB,MAAM,IAAIxP,KAAK,CAAC,gDAAgD,CAAC;MACnE;MAEA,IAAI8E,CAAC,CAAC+O,SAAS,CAAC/E,OAAO,KAAKhK,CAAC,EAAE;QAE7B,OAAOgc,KAAK;MACd;MAEA,OAAOxN,SAAS;IAClB;IACA,SAASmR,oBAAoBA,CAACC,MAAM,EAAE;MACpC,IAAIC,aAAa,GAAGV,6BAA6B,CAACS,MAAM,CAAC;MACzD,OAAOC,aAAa,KAAK,IAAI,GACzBC,wBAAwB,CAACD,aAAa,CAAC,GACvC,IAAI;IACV;IAEA,SAASC,wBAAwBA,CAACtB,IAAI,EAAE;MAEtC,IAAIzQ,GAAG,GAAGyQ,IAAI,CAACzQ,GAAG;MAElB,IACEA,GAAG,KAAKnD,aAAa,IACrBmD,GAAG,KAAK/B,aAAa,IACrB+B,GAAG,KAAK9B,aAAa,IACrB8B,GAAG,KAAKlD,QAAQ,EAChB;QACA,OAAO2T,IAAI;MACb;MAEA,IAAIe,KAAK,GAAGf,IAAI,CAACe,KAAK;MAEtB,OAAOA,KAAK,KAAK,IAAI,EAAE;QACrB,IAAIQ,KAAK,GAAGD,wBAAwB,CAACP,KAAK,CAAC;QAE3C,IAAIQ,KAAK,KAAK,IAAI,EAAE;UAClB,OAAOA,KAAK;QACd;QAEAR,KAAK,GAAGA,KAAK,CAACC,OAAO;MACvB;MAEA,OAAO,IAAI;IACb;IACA,SAASQ,gBAAgBA,CAACC,WAAW,EAAEC,UAAU,EAAE;MACjD,IAAI1B,IAAI,GAAG0B,UAAU;MACrB,IAAIC,oBAAoB,GAAGF,WAAW,CAACzR,SAAS;MAEhD,OAAOgQ,IAAI,KAAK,IAAI,EAAE;QACpB,IAAIA,IAAI,KAAKyB,WAAW,IAAIzB,IAAI,KAAK2B,oBAAoB,EAAE;UACzD,OAAO,IAAI;QACb;QAEA3B,IAAI,GAAGA,IAAI,CAAC1Q,MAAM;MACpB;MAEA,OAAO,KAAK;IACd;IAGA,IAAIsS,aAAa,GAAG,CAAC,CAAC;IAWtB,IAAIC,WAAW,GAAG,IAAI;IACtB,IAAIC,eAAe,GAAG,CAAC;IACvB,IAAIC,iBAAiB,GAAG;MACtBC,uBAAuB,EAAE;IAC3B,CAAC;IAED,SAASC,aAAaA,CAACC,QAAQ,EAAEC,QAAQ,EAAE;MACzC,IAAI,OAAOA,QAAQ,KAAK,QAAQ,IAAIA,QAAQ,KAAK,IAAI,EAAE;QAErD,OAAO,IAAI;MACb,CAAC,MAAM;QAEL,OAAOtlB,2BAA2B,CAACulB,UAAU,CAC3CF,QAAQ,EACRC,QAAQ,EACRJ,iBACF,CAAC;MACH;IACF;IAEA,SAASM,iCAAiCA,CACxCC,aAAa,EACbtC,IAAI,EACJuC,eAAe,EACf;MACA,IAAIpgB,OAAO,CAAC6d,IAAI,CAAC,EAAE;QACjB,IAAIrc,CAAC,GAAGqc,IAAI,CAAC3iB,MAAM;QAEnB,OAAOsG,CAAC,EAAE,IAAIme,eAAe,GAAG,CAAC,EAAE;UACjCO,iCAAiC,CAC/BC,aAAa,EACbtC,IAAI,CAACrc,CAAC,CAAC,EACP4e,eACF,CAAC;QACH;MACF,CAAC,MAAM,IAAIvC,IAAI,IAAI8B,eAAe,GAAG,CAAC,EAAE;QACtC,IAAIU,GAAG,GAAGxC,IAAI;QAEd,KAAK,IAAIyC,OAAO,IAAIZ,WAAW,EAAE;UAE/B,IAAI,CAACA,WAAW,CAACY,OAAO,CAAC,EAAE;YACzB;UACF;UAEA,IAAIN,QAAQ,GAAGK,GAAG,CAACC,OAAO,CAAC;UAE3B,IAAIN,QAAQ,KAAK1e,SAAS,EAAE;YAC1B;UACF;UAEA,IAAIif,eAAe,GAAGH,eAAe,CAACE,OAAO,CAAC;UAE9C,IAAI,CAACC,eAAe,EAAE;YACpB;UACF;UAEA,IAAI,OAAOP,QAAQ,KAAK,UAAU,EAAE;YAElCA,QAAQ,GAAG,IAAI;UACjB;UAEA,IAAI,OAAOA,QAAQ,KAAK,WAAW,EAAE;YAEnCA,QAAQ,GAAG,IAAI;UACjB;UAEA,IAAI,OAAOO,eAAe,KAAK,QAAQ,EAAE;YAEvCJ,aAAa,CAACG,OAAO,CAAC,GAAGN,QAAQ;UACnC,CAAC,MAAM,IACL,OAAOO,eAAe,CAACC,IAAI,KAAK,UAAU,IAC1C,OAAOD,eAAe,CAACE,OAAO,KAAK,UAAU,EAC7C;YAEA,IAAIC,SAAS,GACX,OAAOH,eAAe,CAACE,OAAO,KAAK,UAAU,GACzCF,eAAe,CAACE,OAAO,CAACT,QAAQ,CAAC,GACjCA,QAAQ;YACdG,aAAa,CAACG,OAAO,CAAC,GAAGI,SAAS;UACpC;UAEAhB,WAAW,CAACY,OAAO,CAAC,GAAG,KAAK;UAC5BX,eAAe,EAAE;QACnB;MACF;IACF;IAEA,SAASgB,uBAAuBA,CAC9BR,aAAa,EACbS,SAAS,EACTC,SAAS,EACTT,eAAe,EACf;MACA,IAAIU,SAAS,GACXF,SAAS,CAAC1lB,MAAM,GAAG2lB,SAAS,CAAC3lB,MAAM,GAC/B0lB,SAAS,CAAC1lB,MAAM,GAChB2lB,SAAS,CAAC3lB,MAAM;MACtB,IAAIsG,CAAC;MAEL,KAAKA,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGsf,SAAS,EAAEtf,CAAC,EAAE,EAAE;QAG9B2e,aAAa,GAAGY,kBAAkB,CAChCZ,aAAa,EACbS,SAAS,CAACpf,CAAC,CAAC,EACZqf,SAAS,CAACrf,CAAC,CAAC,EACZ4e,eACF,CAAC;MACH;MAEA,OAAO5e,CAAC,GAAGof,SAAS,CAAC1lB,MAAM,EAAEsG,CAAC,EAAE,EAAE;QAEhC2e,aAAa,GAAGa,mBAAmB,CACjCb,aAAa,EACbS,SAAS,CAACpf,CAAC,CAAC,EACZ4e,eACF,CAAC;MACH;MAEA,OAAO5e,CAAC,GAAGqf,SAAS,CAAC3lB,MAAM,EAAEsG,CAAC,EAAE,EAAE;QAEhC2e,aAAa,GAAGc,iBAAiB,CAC/Bd,aAAa,EACbU,SAAS,CAACrf,CAAC,CAAC,EACZ4e,eACF,CAAC;MACH;MAEA,OAAOD,aAAa;IACtB;IAEA,SAASY,kBAAkBA,CACzBZ,aAAa,EACbJ,QAAQ,EACRC,QAAQ,EACRI,eAAe,EACf;MACA,IAAI,CAACD,aAAa,IAAIJ,QAAQ,KAAKC,QAAQ,EAAE;QAG3C,OAAOG,aAAa;MACtB;MAEA,IAAI,CAACJ,QAAQ,IAAI,CAACC,QAAQ,EAAE;QAC1B,IAAIA,QAAQ,EAAE;UACZ,OAAOiB,iBAAiB,CAACd,aAAa,EAAEH,QAAQ,EAAEI,eAAe,CAAC;QACpE;QAEA,IAAIL,QAAQ,EAAE;UACZ,OAAOiB,mBAAmB,CAACb,aAAa,EAAEJ,QAAQ,EAAEK,eAAe,CAAC;QACtE;QAEA,OAAOD,aAAa;MACtB;MAEA,IAAI,CAACngB,OAAO,CAAC+f,QAAQ,CAAC,IAAI,CAAC/f,OAAO,CAACggB,QAAQ,CAAC,EAAE;QAE5C,OAAOkB,cAAc,CACnBf,aAAa,EACbJ,QAAQ,EACRC,QAAQ,EACRI,eACF,CAAC;MACH;MAEA,IAAIpgB,OAAO,CAAC+f,QAAQ,CAAC,IAAI/f,OAAO,CAACggB,QAAQ,CAAC,EAAE;QAE1C,OAAOW,uBAAuB,CAC5BR,aAAa,EACbJ,QAAQ,EACRC,QAAQ,EACRI,eACF,CAAC;MACH;MAEA,IAAIpgB,OAAO,CAAC+f,QAAQ,CAAC,EAAE;QACrB,OAAOmB,cAAc,CACnBf,aAAa,EACbzlB,2BAA2B,CAACymB,YAAY,CAACpB,QAAQ,CAAC,EAClDC,QAAQ,EACRI,eACF,CAAC;MACH;MAEA,OAAOc,cAAc,CACnBf,aAAa,EACbJ,QAAQ,EACRrlB,2BAA2B,CAACymB,YAAY,CAACnB,QAAQ,CAAC,EAClDI,eACF,CAAC;IACH;IAOA,SAASa,iBAAiBA,CAACd,aAAa,EAAEH,QAAQ,EAAEI,eAAe,EAAE;MACnE,IAAI,CAACJ,QAAQ,EAAE;QACb,OAAOG,aAAa;MACtB;MAEA,IAAI,CAACngB,OAAO,CAACggB,QAAQ,CAAC,EAAE;QAEtB,OAAOoB,aAAa,CAACjB,aAAa,EAAEH,QAAQ,EAAEI,eAAe,CAAC;MAChE;MAEA,KAAK,IAAI5e,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGwe,QAAQ,CAAC9kB,MAAM,EAAEsG,CAAC,EAAE,EAAE;QAExC2e,aAAa,GAAGc,iBAAiB,CAC/Bd,aAAa,EACbH,QAAQ,CAACxe,CAAC,CAAC,EACX4e,eACF,CAAC;MACH;MAEA,OAAOD,aAAa;IACtB;IAMA,SAASa,mBAAmBA,CAACb,aAAa,EAAEJ,QAAQ,EAAEK,eAAe,EAAE;MACrE,IAAI,CAACL,QAAQ,EAAE;QACb,OAAOI,aAAa;MACtB;MAEA,IAAI,CAACngB,OAAO,CAAC+f,QAAQ,CAAC,EAAE;QAEtB,OAAOsB,eAAe,CAAClB,aAAa,EAAEJ,QAAQ,EAAEK,eAAe,CAAC;MAClE;MAEA,KAAK,IAAI5e,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGue,QAAQ,CAAC7kB,MAAM,EAAEsG,CAAC,EAAE,EAAE;QAExC2e,aAAa,GAAGa,mBAAmB,CACjCb,aAAa,EACbJ,QAAQ,CAACve,CAAC,CAAC,EACX4e,eACF,CAAC;MACH;MAEA,OAAOD,aAAa;IACtB;IAQA,SAASe,cAAcA,CACrBf,aAAa,EACbmB,SAAS,EACTC,SAAS,EACTnB,eAAe,EACf;MACA,IAAIG,eAAe;MACnB,IAAIP,QAAQ;MACZ,IAAID,QAAQ;MAEZ,KAAK,IAAIO,OAAO,IAAIiB,SAAS,EAAE;QAC7BhB,eAAe,GAAGH,eAAe,CAACE,OAAO,CAAC;QAE1C,IAAI,CAACC,eAAe,EAAE;UACpB;QACF;QAEAR,QAAQ,GAAGuB,SAAS,CAAChB,OAAO,CAAC;QAC7BN,QAAQ,GAAGuB,SAAS,CAACjB,OAAO,CAAC;QAG7B,IAAI,OAAON,QAAQ,KAAK,UAAU,EAAE;UAClCA,QAAQ,GAAG,IAAI;UAGf,IAAI,OAAOD,QAAQ,KAAK,UAAU,EAAE;YAClCA,QAAQ,GAAG,IAAI;UACjB;QACF;QAGA,IAAI,OAAOC,QAAQ,KAAK,WAAW,EAAE;UACnCA,QAAQ,GAAG,IAAI;UAEf,IAAI,OAAOD,QAAQ,KAAK,WAAW,EAAE;YACnCA,QAAQ,GAAG,IAAI;UACjB;QACF;QAEA,IAAIL,WAAW,EAAE;UACfA,WAAW,CAACY,OAAO,CAAC,GAAG,KAAK;QAC9B;QAEA,IAAIH,aAAa,IAAIA,aAAa,CAACG,OAAO,CAAC,KAAKhf,SAAS,EAAE;UAMzD,IAAI,OAAOif,eAAe,KAAK,QAAQ,EAAE;YAEvCJ,aAAa,CAACG,OAAO,CAAC,GAAGN,QAAQ;UACnC,CAAC,MAAM,IACL,OAAOO,eAAe,CAACC,IAAI,KAAK,UAAU,IAC1C,OAAOD,eAAe,CAACE,OAAO,KAAK,UAAU,EAC7C;YAEA,IAAIC,SAAS,GACX,OAAOH,eAAe,CAACE,OAAO,KAAK,UAAU,GACzCF,eAAe,CAACE,OAAO,CAACT,QAAQ,CAAC,GACjCA,QAAQ;YACdG,aAAa,CAACG,OAAO,CAAC,GAAGI,SAAS;UACpC;UAEA;QACF;QAEA,IAAIX,QAAQ,KAAKC,QAAQ,EAAE;UACzB;QACF;QAEA,IAAI,OAAOO,eAAe,KAAK,QAAQ,EAAE;UAEvC,IAAIT,aAAa,CAACC,QAAQ,EAAEC,QAAQ,CAAC,EAAE;YAErC,CAACG,aAAa,KAAKA,aAAa,GAAG,CAAC,CAAC,CAAC,EAAEG,OAAO,CAAC,GAAGN,QAAQ;UAC7D;QACF,CAAC,MAAM,IACL,OAAOO,eAAe,CAACC,IAAI,KAAK,UAAU,IAC1C,OAAOD,eAAe,CAACE,OAAO,KAAK,UAAU,EAC7C;UAEA,IAAIe,YAAY,GACdzB,QAAQ,KAAKze,SAAS,KACrB,OAAOif,eAAe,CAACC,IAAI,KAAK,UAAU,GACvCD,eAAe,CAACC,IAAI,CAACT,QAAQ,EAAEC,QAAQ,CAAC,GACxCF,aAAa,CAACC,QAAQ,EAAEC,QAAQ,CAAC,CAAC;UAExC,IAAIwB,YAAY,EAAE;YAChB,IAAIC,UAAU,GACZ,OAAOlB,eAAe,CAACE,OAAO,KAAK,UAAU,GACzCF,eAAe,CAACE,OAAO,CAACT,QAAQ,CAAC,GACjCA,QAAQ;YAEd,CAACG,aAAa,KAAKA,aAAa,GAAG,CAAC,CAAC,CAAC,EAAEG,OAAO,CAAC,GAAGmB,UAAU;UAC/D;QACF,CAAC,MAAM;UAEL/B,WAAW,GAAG,IAAI;UAClBC,eAAe,GAAG,CAAC;UAGnBQ,aAAa,GAAGY,kBAAkB,CAChCZ,aAAa,EACbJ,QAAQ,EACRC,QAAQ,EACRO,eACF,CAAC;UAED,IAAIZ,eAAe,GAAG,CAAC,IAAIQ,aAAa,EAAE;YACxCD,iCAAiC,CAC/BC,aAAa,EACbH,QAAQ,EACRO,eACF,CAAC;YACDb,WAAW,GAAG,IAAI;UACpB;QACF;MACF;MAIA,KAAK,IAAIgC,QAAQ,IAAIJ,SAAS,EAAE;QAC9B,IAAIC,SAAS,CAACG,QAAQ,CAAC,KAAKpgB,SAAS,EAAE;UACrC;QACF;QAEAif,eAAe,GAAGH,eAAe,CAACsB,QAAQ,CAAC;QAE3C,IAAI,CAACnB,eAAe,EAAE;UACpB;QACF;QAEA,IAAIJ,aAAa,IAAIA,aAAa,CAACuB,QAAQ,CAAC,KAAKpgB,SAAS,EAAE;UAE1D;QACF;QAEAye,QAAQ,GAAGuB,SAAS,CAACI,QAAQ,CAAC;QAE9B,IAAI3B,QAAQ,KAAKze,SAAS,EAAE;UAC1B;QACF;QAEA,IACE,OAAOif,eAAe,KAAK,QAAQ,IACnC,OAAOA,eAAe,CAACC,IAAI,KAAK,UAAU,IAC1C,OAAOD,eAAe,CAACE,OAAO,KAAK,UAAU,EAC7C;UAGA,CAACN,aAAa,KAAKA,aAAa,GAAG,CAAC,CAAC,CAAC,EAAEuB,QAAQ,CAAC,GAAG,IAAI;UAExD,IAAI,CAAChC,WAAW,EAAE;YAChBA,WAAW,GAAG,CAAC,CAAC;UAClB;UAEA,IAAI,CAACA,WAAW,CAACgC,QAAQ,CAAC,EAAE;YAC1BhC,WAAW,CAACgC,QAAQ,CAAC,GAAG,IAAI;YAC5B/B,eAAe,EAAE;UACnB;QACF,CAAC,MAAM;UAILQ,aAAa,GAAGa,mBAAmB,CACjCb,aAAa,EACbJ,QAAQ,EACRQ,eACF,CAAC;QACH;MACF;MAEA,OAAOJ,aAAa;IACtB;IAKA,SAASiB,aAAaA,CAACjB,aAAa,EAAE9R,KAAK,EAAE+R,eAAe,EAAE;MAE5D,OAAOc,cAAc,CACnBf,aAAa,EACbV,aAAa,EACbpR,KAAK,EACL+R,eACF,CAAC;IACH;IAMA,SAASiB,eAAeA,CAAClB,aAAa,EAAEmB,SAAS,EAAElB,eAAe,EAAE;MAElE,OAAOc,cAAc,CACnBf,aAAa,EACbmB,SAAS,EACT7B,aAAa,EACbW,eACF,CAAC;IACH;IAEA,SAASuB,MAAMA,CAACtT,KAAK,EAAE+R,eAAe,EAAE;MACtC,OAAOgB,aAAa,CAClB,IAAI,EACJ/S,KAAK,EACL+R,eACF,CAAC;IACH;IACA,SAASI,IAAIA,CAACc,SAAS,EAAEC,SAAS,EAAEnB,eAAe,EAAE;MACnD,OAAOc,cAAc,CACnB,IAAI,EACJI,SAAS,EACTC,SAAS,EACTnB,eACF,CAAC;IACH;IAMA,SAASwB,iCAAiCA,CAAC1kB,OAAO,EAAE2L,QAAQ,EAAE;MAC5D,OAAO,YAAY;QACjB,IAAI,CAACA,QAAQ,EAAE;UACb,OAAOvH,SAAS;QAClB;QAKA,IAAI,OAAOpE,OAAO,CAAC2kB,WAAW,KAAK,SAAS,EAAE;UAC5C,IAAI,CAAC3kB,OAAO,CAAC2kB,WAAW,EAAE;YACxB,OAAOvgB,SAAS;UAClB;QACF;QAUA,OAAOuH,QAAQ,CAACvM,KAAK,CAACY,OAAO,EAAEjC,SAAS,CAAC;MAC3C,CAAC;IACH;IACA,SAAS6mB,iBAAiBA,CAACzT,KAAK,EAAE+R,eAAe,EAAE;MACjD;QACE,KAAK,IAAI5I,GAAG,IAAI4I,eAAe,CAAC2B,KAAK,EAAE;UACrC,IAAI,EAAE3B,eAAe,CAAC5I,GAAG,CAAC,IAAInJ,KAAK,CAACmJ,GAAG,CAAC,KAAKlW,SAAS,CAAC,EAAE;YACvD/F,KAAK,CACH,iCAAiC,GAC/B,0BAA0B,GAC1B,oCAAoC,GACpC,qBAAqB,GACrB,YAAY,EACdic,GAAG,EACHA,GACF,CAAC;UACH;QACF;MACF;IACF;IAEA,IAAIwK,6BAA6B,GAAkB,YAAY;MAC7D,SAASA,6BAA6BA,CACpC5U,GAAG,EACH6U,UAAU,EACVC,yBAAyB,EACzB;QACA,IAAI,CAACC,SAAS,GAAG,KAAK,CAAC;QACvB,IAAI,CAAC7N,UAAU,GAAG,KAAK,CAAC;QACxB,IAAI,CAAC8N,+BAA+B,GAAG,KAAK,CAAC;QAC7C,IAAI,CAACH,UAAU,GAAG,KAAK,CAAC;QACxB,IAAI,CAAC3N,UAAU,GAAGlH,GAAG;QACrB,IAAI,CAAC+U,SAAS,GAAG,EAAE;QACnB,IAAI,CAACF,UAAU,GAAGA,UAAU;QAE5B;UACE,IAAI,CAACG,+BAA+B,GAAGF,yBAAyB;QAClE;MACF;MAEA,IAAIG,MAAM,GAAGL,6BAA6B,CAAC3lB,SAAS;MAEpDgmB,MAAM,CAACC,IAAI,GAAG,SAASA,IAAIA,CAAA,EAAG;QAC5B5nB,2BAA2B,CAAC6nB,cAAc,CAACC,aAAa,CAAC,IAAI,CAAC;MAChE,CAAC;MAEDH,MAAM,CAACI,KAAK,GAAG,SAASA,KAAKA,CAAA,EAAG;QAC9B/nB,2BAA2B,CAAC6nB,cAAc,CAACG,cAAc,CAAC,IAAI,CAAC;MACjE,CAAC;MAEDL,MAAM,CAACM,OAAO,GAAG,SAASA,OAAOA,CAAC9Z,QAAQ,EAAE;QAC1CnO,2BAA2B,CAACyc,SAAS,CAACwL,OAAO,CAC3C,IAAI,CAACrO,UAAU,EACfsN,iCAAiC,CAAC,IAAI,EAAE/Y,QAAQ,CAClD,CAAC;MACH,CAAC;MAEDwZ,MAAM,CAACO,eAAe,GAAG,SAASA,eAAeA,CAAC/Z,QAAQ,EAAE;QAC1DnO,2BAA2B,CAACyc,SAAS,CAACyL,eAAe,CACnD,IAAI,CAACtO,UAAU,EACfsN,iCAAiC,CAAC,IAAI,EAAE/Y,QAAQ,CAClD,CAAC;MACH,CAAC;MAEDwZ,MAAM,CAACQ,aAAa,GAAG,SAASA,aAAaA,CAC3CC,oBAAoB,EACpBC,SAAS,EACTC,MAAM,EAEN;QACA,IAAIC,YAAY;QAEhB,IAAI,OAAOH,oBAAoB,KAAK,QAAQ,EAAE;UAE5CG,YAAY,GAAGH,oBAAoB;QACrC,CAAC,MAAM;UACL,IAAII,UAAU,GAAGJ,oBAAoB;UAErC,IAAII,UAAU,CAAC5O,UAAU,EAAE;YACzB2O,YAAY,GAAGC,UAAU,CAAC5O,UAAU;UACtC;QACF;QAEA,IAAI2O,YAAY,IAAI,IAAI,EAAE;UACxB;YACE1nB,KAAK,CACH,8FACF,CAAC;UACH;UAEA;QACF;QAEAb,2BAA2B,CAACyc,SAAS,CAAC0L,aAAa,CACjD,IAAI,CAACvO,UAAU,EACf2O,YAAY,EACZrB,iCAAiC,CAAC,IAAI,EAAEoB,MAAM,CAAC,EAC/CpB,iCAAiC,CAAC,IAAI,EAAEmB,SAAS,CACnD,CAAC;MACH,CAAC;MAEDV,MAAM,CAACc,cAAc,GAAG,SAASA,cAAcA,CAACC,WAAW,EAAE;QAC3D;UACEtB,iBAAiB,CAACsB,WAAW,EAAE,IAAI,CAACnB,UAAU,CAAC7B,eAAe,CAAC;QACjE;QAEA,IAAID,aAAa,GAAGwB,MAAM,CACxByB,WAAW,EACX,IAAI,CAACnB,UAAU,CAAC7B,eAClB,CAAC;QAID,IAAID,aAAa,IAAI,IAAI,EAAE;UACzBzlB,2BAA2B,CAACyc,SAAS,CAACkM,UAAU,CAC9C,IAAI,CAAC/O,UAAU,EACf,IAAI,CAAC2N,UAAU,CAACqB,eAAe,EAC/BnD,aACF,CAAC;QACH;MACF,CAAC;MAED,OAAO6B,6BAA6B;IACtC,CAAC,CAAE,CAAC;IAGJ,IAAIuB,kBAAkB,GAAG5oB,SAAS,CAAC6oB,yBAAyB;IAC5D,IAAIC,gBAAgB,GAAG9oB,SAAS,CAAC+oB,uBAAuB;IACxD,IAAIC,WAAW,GAAGhpB,SAAS,CAACipB,oBAAoB;IAChD,IAAIC,YAAY,GAAGlpB,SAAS,CAACmpB,qBAAqB;IAClD,IAAIC,KAAK,GAAGppB,SAAS,CAACqpB,YAAY;IAClC,IAAIC,iBAAiB,GAAGtpB,SAAS,CAACupB,0BAA0B;IAC5D,IAAIC,oBAAoB,GAAGxpB,SAAS,CAACypB,6BAA6B;IAClE,IAAIC,cAAc,GAAG1pB,SAAS,CAAC2pB,uBAAuB;IACtD,IAAIC,YAAY,GAAG5pB,SAAS,CAAC6pB,qBAAqB;IAMlD,IAAIC,aAAa,GAAG,CAAC;IACrB,IAAIC,OAAO;IACX,IAAIC,QAAQ;IACZ,IAAIC,QAAQ;IACZ,IAAIC,SAAS;IACb,IAAIC,SAAS;IACb,IAAIC,kBAAkB;IACtB,IAAIC,YAAY;IAEhB,SAASC,WAAWA,CAAA,EAAG,CAAC;IAExBA,WAAW,CAACC,kBAAkB,GAAG,IAAI;IACrC,SAASC,WAAWA,CAAA,EAAG;MACrB;QACE,IAAIV,aAAa,KAAK,CAAC,EAAE;UAEvBC,OAAO,GAAGloB,OAAO,CAAC4oB,GAAG;UACrBT,QAAQ,GAAGnoB,OAAO,CAAC6oB,IAAI;UACvBT,QAAQ,GAAGpoB,OAAO,CAAC1B,IAAI;UACvB+pB,SAAS,GAAGroB,OAAO,CAACjB,KAAK;UACzBupB,SAAS,GAAGtoB,OAAO,CAAC8oB,KAAK;UACzBP,kBAAkB,GAAGvoB,OAAO,CAAC+oB,cAAc;UAC3CP,YAAY,GAAGxoB,OAAO,CAACgpB,QAAQ;UAE/B,IAAInX,KAAK,GAAG;YACVvJ,YAAY,EAAE,IAAI;YAClB2gB,UAAU,EAAE,IAAI;YAChB/N,KAAK,EAAEuN,WAAW;YAClBS,QAAQ,EAAE;UACZ,CAAC;UAEDjoB,MAAM,CAACkoB,gBAAgB,CAACnpB,OAAO,EAAE;YAC/B6oB,IAAI,EAAEhX,KAAK;YACX+W,GAAG,EAAE/W,KAAK;YACVvT,IAAI,EAAEuT,KAAK;YACX9S,KAAK,EAAE8S,KAAK;YACZiX,KAAK,EAAEjX,KAAK;YACZkX,cAAc,EAAElX,KAAK;YACrBmX,QAAQ,EAAEnX;UACZ,CAAC,CAAC;QAEJ;QAEAoW,aAAa,EAAE;MACjB;IACF;IACA,SAASmB,YAAYA,CAAA,EAAG;MACtB;QACEnB,aAAa,EAAE;QAEf,IAAIA,aAAa,KAAK,CAAC,EAAE;UAEvB,IAAIpW,KAAK,GAAG;YACVvJ,YAAY,EAAE,IAAI;YAClB2gB,UAAU,EAAE,IAAI;YAChBC,QAAQ,EAAE;UACZ,CAAC;UAEDjoB,MAAM,CAACkoB,gBAAgB,CAACnpB,OAAO,EAAE;YAC/B4oB,GAAG,EAAEljB,MAAM,CAAC,CAAC,CAAC,EAAEmM,KAAK,EAAE;cACrBqJ,KAAK,EAAEgN;YACT,CAAC,CAAC;YACFW,IAAI,EAAEnjB,MAAM,CAAC,CAAC,CAAC,EAAEmM,KAAK,EAAE;cACtBqJ,KAAK,EAAEiN;YACT,CAAC,CAAC;YACF7pB,IAAI,EAAEoH,MAAM,CAAC,CAAC,CAAC,EAAEmM,KAAK,EAAE;cACtBqJ,KAAK,EAAEkN;YACT,CAAC,CAAC;YACFrpB,KAAK,EAAE2G,MAAM,CAAC,CAAC,CAAC,EAAEmM,KAAK,EAAE;cACvBqJ,KAAK,EAAEmN;YACT,CAAC,CAAC;YACFS,KAAK,EAAEpjB,MAAM,CAAC,CAAC,CAAC,EAAEmM,KAAK,EAAE;cACvBqJ,KAAK,EAAEoN;YACT,CAAC,CAAC;YACFS,cAAc,EAAErjB,MAAM,CAAC,CAAC,CAAC,EAAEmM,KAAK,EAAE;cAChCqJ,KAAK,EAAEqN;YACT,CAAC,CAAC;YACFS,QAAQ,EAAEtjB,MAAM,CAAC,CAAC,CAAC,EAAEmM,KAAK,EAAE;cAC1BqJ,KAAK,EAAEsN;YACT,CAAC;UACH,CAAC,CAAC;QAEJ;QAEA,IAAIP,aAAa,GAAG,CAAC,EAAE;UACrBlpB,KAAK,CACH,iCAAiC,GAC/B,+CACJ,CAAC;QACH;MACF;IACF;IAEA,IAAIsqB,UAAU,GAAG,IAAI;IACrB,IAAIC,YAAY,GAAG,IAAI;IACvB,IAAIC,cAAc,GAAG,KAAK;IAC1B,IAAIC,iBAAiB,GACnB,OAAO3rB,8BAA8B,KAAK,WAAW;IACvD,SAAS4rB,eAAeA,CAACC,SAAS,EAAE;MAClC,IAAI,OAAO7rB,8BAA8B,KAAK,WAAW,EAAE;QAEzD,OAAO,KAAK;MACd;MAEA,IAAI8rB,IAAI,GAAG9rB,8BAA8B;MAEzC,IAAI8rB,IAAI,CAACC,UAAU,EAAE;QAInB,OAAO,IAAI;MACb;MAEA,IAAI,CAACD,IAAI,CAACE,aAAa,EAAE;QACvB;UACE9qB,KAAK,CACH,uEAAuE,GACrE,mEAAmE,GACnE,yCACJ,CAAC;QACH;QAEA,OAAO,IAAI;MACb;MAEA,IAAI;QACF,IAAIoc,wBAAwB,EAAC;QAE7BkO,UAAU,GAAGM,IAAI,CAACG,MAAM,CAACJ,SAAS,CAAC;QAEnCJ,YAAY,GAAGK,IAAI;MACrB,CAAC,CAAC,OAAOI,GAAG,EAAE;QAEZ;UACEhrB,KAAK,CAAC,iDAAiD,EAAEgrB,GAAG,CAAC;QAC/D;MACF;MAEA,IAAIJ,IAAI,CAACK,QAAQ,EAAE;QAEjB,OAAO,IAAI;MACb,CAAC,MAAM;QAEL,OAAO,KAAK;MACd;IACF;IACA,SAASC,cAAcA,CAACC,IAAI,EAAEC,QAAQ,EAAE;MACtC;QACE,IACEb,YAAY,IACZ,OAAOA,YAAY,CAACc,mBAAmB,KAAK,UAAU,EACtD;UACA,IAAI;YACFd,YAAY,CAACc,mBAAmB,CAACf,UAAU,EAAEa,IAAI,EAAEC,QAAQ,CAAC;UAC9D,CAAC,CAAC,OAAOJ,GAAG,EAAE;YACZ,IAAI,CAACR,cAAc,EAAE;cACnBA,cAAc,GAAG,IAAI;cAErBxqB,KAAK,CAAC,gDAAgD,EAAEgrB,GAAG,CAAC;YAC9D;UACF;QACF;MACF;IACF;IACA,SAASM,YAAYA,CAACH,IAAI,EAAEI,aAAa,EAAE;MACzC,IACEhB,YAAY,IACZ,OAAOA,YAAY,CAACiB,iBAAiB,KAAK,UAAU,EACpD;QACA,IAAI;UACF,IAAI1pB,QAAQ,GAAG,CAACqpB,IAAI,CAACrd,OAAO,CAAC2U,KAAK,GAAGvC,UAAU,MAAMA,UAAU;UAE/D,IAAI7D,mBAAmB,EAAE;YACvB,IAAIoP,iBAAiB;YAErB,QAAQF,aAAa;cACnB,KAAKG,qBAAqB;gBACxBD,iBAAiB,GAAG/C,iBAAiB;gBACrC;cAEF,KAAKiD,uBAAuB;gBAC1BF,iBAAiB,GAAG7C,oBAAoB;gBACxC;cAEF,KAAKgD,oBAAoB;gBACvBH,iBAAiB,GAAG3C,cAAc;gBAClC;cAEF,KAAK+C,iBAAiB;gBACpBJ,iBAAiB,GAAGzC,YAAY;gBAChC;cAEF;gBACEyC,iBAAiB,GAAG3C,cAAc;gBAClC;YACJ;YAEAyB,YAAY,CAACiB,iBAAiB,CAC5BlB,UAAU,EACVa,IAAI,EACJM,iBAAiB,EACjB3pB,QACF,CAAC;UACH;QACF,CAAC,CAAC,OAAOkpB,GAAG,EAAE;UACZ;YACE,IAAI,CAACR,cAAc,EAAE;cACnBA,cAAc,GAAG,IAAI;cAErBxqB,KAAK,CAAC,gDAAgD,EAAEgrB,GAAG,CAAC;YAC9D;UACF;QACF;MACF;IACF;IACA,SAASc,gBAAgBA,CAACX,IAAI,EAAE;MAC9B,IACEZ,YAAY,IACZ,OAAOA,YAAY,CAACwB,qBAAqB,KAAK,UAAU,EACxD;QACA,IAAI;UACFxB,YAAY,CAACwB,qBAAqB,CAACzB,UAAU,EAAEa,IAAI,CAAC;QACtD,CAAC,CAAC,OAAOH,GAAG,EAAE;UACZ;YACE,IAAI,CAACR,cAAc,EAAE;cACnBA,cAAc,GAAG,IAAI;cAErBxqB,KAAK,CAAC,gDAAgD,EAAEgrB,GAAG,CAAC;YAC9D;UACF;QACF;MACF;IACF;IACA,SAASgB,eAAeA,CAAClM,KAAK,EAAE;MAC9B,IACEyK,YAAY,IACZ,OAAOA,YAAY,CAAC0B,oBAAoB,KAAK,UAAU,EACvD;QACA,IAAI;UACF1B,YAAY,CAAC0B,oBAAoB,CAAC3B,UAAU,EAAExK,KAAK,CAAC;QACtD,CAAC,CAAC,OAAOkL,GAAG,EAAE;UACZ;YACE,IAAI,CAACR,cAAc,EAAE;cACnBA,cAAc,GAAG,IAAI;cAErBxqB,KAAK,CAAC,gDAAgD,EAAEgrB,GAAG,CAAC;YAC9D;UACF;QACF;MACF;IACF;IACA,SAASkB,0BAA0BA,CAACC,eAAe,EAAE;MACnD;QACE,IAAIA,eAAe,EAAE;UACnBvC,WAAW,CAAC,CAAC;QACf,CAAC,MAAM;UACLS,YAAY,CAAC,CAAC;QAChB;MACF;IACF;IAEA,SAAS+B,oBAAoBA,CAACC,cAAc,EAAE,CAAC;IAE/C,SAASC,eAAeA,CAAA,EAAG;MACzB;QACE,OAAO,IAAI;MACb;IACF;IAEA,IAAIC,MAAM,GAER,CAAC;IAEH,IAAIC,cAAc,GAEhB,CAAC;IACH,IAAIC,WAAW,GAEb,CAAC;IACH,IAAIC,gBAAgB,GAElB,CAAC;IACH,IAAIC,iBAAiB,GAEnB,EAAE;IACJ,IAAIC,0BAA0B,GAE5B,EAAE;IAGJ,IAAIC,KAAK,GAAGC,IAAI,CAACD,KAAK,GAAGC,IAAI,CAACD,KAAK,GAAGE,aAAa;IAInD,IAAIlD,GAAG,GAAGiD,IAAI,CAACjD,GAAG;IAClB,IAAImD,GAAG,GAAGF,IAAI,CAACE,GAAG;IAElB,SAASD,aAAaA,CAACrN,CAAC,EAAE;MACxB,IAAIuN,MAAM,GAAGvN,CAAC,KAAK,CAAC;MAEpB,IAAIuN,MAAM,KAAK,CAAC,EAAE;QAChB,OAAO,EAAE;MACX;MAEA,OAAQ,EAAE,IAAKpD,GAAG,CAACoD,MAAM,CAAC,GAAGD,GAAG,GAAI,CAAC,CAAC,GAAI,CAAC;IAC7C;IAIA,IAAIE,UAAU,GAAG,EAAE;IACnB,IAAIC,OAAO,GAET,CAAC;IACH,IAAIC,MAAM,GAER,CAAC;IACH,IAAIC,iBAAiB,GAEnB,CAAC;IACH,IAAIC,QAAQ,GAEV,CAAC;IACH,IAAIC,aAAa,GAAG,CAAC;IACrB,IAAIC,4BAA4B,GAE9B,CAAC;IACH,IAAIC,mBAAmB,GAErB,CAAC;IACH,IAAIC,oBAAoB,GAEtB,EAAE;IACJ,IAAIC,WAAW,GAEb,EAAE;IACJ,IAAIC,eAAe,GAAGN,QAAQ,GAAGG,mBAAmB,GAAGE,WAAW;IAClE,IAAIE,uBAAuB,GAEzB,EAAE;IACJ,IAAIC,eAAe,GAEjB,OAAO;IACT,IAAIC,eAAe,GAEjB,GAAG;IACL,IAAIC,eAAe,GAEjB,GAAG;IACL,IAAIC,eAAe,GAEjB,GAAG;IACL,IAAIC,eAAe,GAEjB,IAAI;IACN,IAAIC,eAAe,GAEjB,IAAI;IACN,IAAIC,eAAe,GAEjB,IAAI;IACN,IAAIC,eAAe,GAEjB,IAAI;IACN,IAAIC,eAAe,GAEjB,KAAK;IACP,IAAIC,eAAe,GAEjB,KAAK;IACP,IAAIC,gBAAgB,GAElB,KAAK;IACP,IAAIC,gBAAgB,GAElB,MAAM;IACR,IAAIC,gBAAgB,GAElB,MAAM;IACR,IAAIC,gBAAgB,GAElB,MAAM;IACR,IAAIC,gBAAgB,GAElB,OAAO;IACT,IAAIC,gBAAgB,GAElB,OAAO;IACT,IAAIC,UAAU,GAEZ,QAAQ;IACV,IAAIC,UAAU,GAEZ,OAAO;IACT,IAAIC,UAAU,GAEZ,OAAO;IACT,IAAIC,UAAU,GAEZ,QAAQ;IACV,IAAIC,UAAU,GAEZ,QAAQ;IACV,IAAIC,aAAa,GAAGJ,UAAU;IAC9B,IAAIK,sBAAsB,GAExB,QAAQ;IACV,IAAIC,YAAY,GAEd,SAAS;IACX,IAAIC,iBAAiB,GAEnB,SAAS;IACX,IAAIC,QAAQ,GAEV,SAAS;IACX,IAAIC,aAAa,GAEf,SAAS;IACX,IAAIC,YAAY,GAEd,UAAU;IAGZ,IAAIC,WAAW,GACbpC,QAAQ,GAAGG,mBAAmB,GAAGE,WAAW,GAAGG,eAAe;IAChE,IAAI6B,WAAW,GAAG,CAAC,CAAC;IACpB,IAAIC,kBAAkB,GAAG7B,eAAe;IACxC,IAAI8B,aAAa,GAAGd,UAAU;IAE9B,SAASe,uBAAuBA,CAACC,KAAK,EAAE;MACtC;QACE,IAAIC,gBAAgB,GAAGD,KAAK,GAAGnC,eAAe;QAE9C,IAAIoC,gBAAgB,KAAK,CAAC,EAAE;UAC1B,OAAOA,gBAAgB;QACzB;MACF;MAEA,QAAQC,sBAAsB,CAACF,KAAK,CAAC;QACnC,KAAK1C,iBAAiB;UACpB,OAAOA,iBAAiB;QAE1B,KAAKC,QAAQ;UACX,OAAOA,QAAQ;QAEjB,KAAKE,4BAA4B;UAC/B,OAAOA,4BAA4B;QAErC,KAAKC,mBAAmB;UACtB,OAAOA,mBAAmB;QAE5B,KAAKC,oBAAoB;UACvB,OAAOA,oBAAoB;QAE7B,KAAKC,WAAW;UACd,OAAOA,WAAW;QAEpB,KAAKE,uBAAuB;UAC1B,OAAOA,uBAAuB;QAEhC,KAAKE,eAAe;QACpB,KAAKC,eAAe;QACpB,KAAKC,eAAe;QACpB,KAAKC,eAAe;QACpB,KAAKC,eAAe;QACpB,KAAKC,eAAe;QACpB,KAAKC,eAAe;QACpB,KAAKC,eAAe;QACpB,KAAKC,eAAe;QACpB,KAAKC,gBAAgB;QACrB,KAAKC,gBAAgB;QACrB,KAAKC,gBAAgB;QACrB,KAAKC,gBAAgB;QACrB,KAAKC,gBAAgB;QACrB,KAAKC,gBAAgB;UACnB,OAAOkB,KAAK,GAAGjC,eAAe;QAEhC,KAAKiB,UAAU;QACf,KAAKC,UAAU;QACf,KAAKC,UAAU;QACf,KAAKC,UAAU;UACb,OAAOa,KAAK,GAAGjB,UAAU;QAE3B,KAAKM,sBAAsB;UACzB,OAAOA,sBAAsB;QAE/B,KAAKE,iBAAiB;UACpB,OAAOA,iBAAiB;QAE1B,KAAKC,QAAQ;UACX,OAAOA,QAAQ;QAEjB,KAAKC,aAAa;UAChB,OAAOA,aAAa;QAEtB,KAAKC,YAAY;UAGf,OAAOtC,OAAO;QAEhB;UACE;YACEntB,KAAK,CAAC,2DAA2D,CAAC;UACpE;UAEA,OAAO+vB,KAAK;MAChB;IACF;IAEA,SAASG,YAAYA,CAAC/E,IAAI,EAAEgF,QAAQ,EAAE;MAEpC,IAAIC,YAAY,GAAGjF,IAAI,CAACiF,YAAY;MAEpC,IAAIA,YAAY,KAAKjD,OAAO,EAAE;QAC5B,OAAOA,OAAO;MAChB;MAEA,IAAIkD,SAAS,GAAGlD,OAAO;MACvB,IAAImD,cAAc,GAAGnF,IAAI,CAACmF,cAAc;MACxC,IAAIC,WAAW,GAAGpF,IAAI,CAACoF,WAAW;MAGlC,IAAIC,mBAAmB,GAAGJ,YAAY,GAAGf,YAAY;MAErD,IAAImB,mBAAmB,KAAKrD,OAAO,EAAE;QACnC,IAAIsD,qBAAqB,GAAGD,mBAAmB,GAAG,CAACF,cAAc;QAEjE,IAAIG,qBAAqB,KAAKtD,OAAO,EAAE;UACrCkD,SAAS,GAAGP,uBAAuB,CAACW,qBAAqB,CAAC;QAC5D,CAAC,MAAM;UACL,IAAIC,kBAAkB,GAAGF,mBAAmB,GAAGD,WAAW;UAE1D,IAAIG,kBAAkB,KAAKvD,OAAO,EAAE;YAClCkD,SAAS,GAAGP,uBAAuB,CAACY,kBAAkB,CAAC;UACzD;QACF;MACF,CAAC,MAAM;QAEL,IAAIC,cAAc,GAAGP,YAAY,GAAG,CAACE,cAAc;QAEnD,IAAIK,cAAc,KAAKxD,OAAO,EAAE;UAC9BkD,SAAS,GAAGP,uBAAuB,CAACa,cAAc,CAAC;QACrD,CAAC,MAAM;UACL,IAAIJ,WAAW,KAAKpD,OAAO,EAAE;YAC3BkD,SAAS,GAAGP,uBAAuB,CAACS,WAAW,CAAC;UAClD;QACF;MACF;MAEA,IAAIF,SAAS,KAAKlD,OAAO,EAAE;QAGzB,OAAOA,OAAO;MAChB;MAIA,IACEgD,QAAQ,KAAKhD,OAAO,IACpBgD,QAAQ,KAAKE,SAAS,IAEtB,CAACF,QAAQ,GAAGG,cAAc,MAAMnD,OAAO,EACvC;QACA,IAAIyD,QAAQ,GAAGX,sBAAsB,CAACI,SAAS,CAAC;QAChD,IAAIQ,OAAO,GAAGZ,sBAAsB,CAACE,QAAQ,CAAC;QAE9C,IAGES,QAAQ,IAAIC,OAAO,IAGlBD,QAAQ,KAAKjD,WAAW,IAAI,CAACkD,OAAO,GAAG/C,eAAe,MAAMX,OAAQ,EACrE;UAEA,OAAOgD,QAAQ;QACjB;MACF;MAEA,OAAOE,SAAS;IAClB;IACA,SAASS,iBAAiBA,CAAC3F,IAAI,EAAE4F,WAAW,EAAE;MAC5C,IAAIC,cAAc,GAAGD,WAAW;MAEhC,IAAI,CAACC,cAAc,GAAGvD,mBAAmB,MAAMN,OAAO,EAAE;QAKtD6D,cAAc,IAAIA,cAAc,GAAGrD,WAAW;MAChD;MAuBA,IAAIsD,iBAAiB,GAAG9F,IAAI,CAAC6F,cAAc;MAE3C,IAAIC,iBAAiB,KAAK9D,OAAO,EAAE;QACjC,IAAI+D,aAAa,GAAG/F,IAAI,CAAC+F,aAAa;QACtC,IAAInB,KAAK,GAAGiB,cAAc,GAAGC,iBAAiB;QAE9C,OAAOlB,KAAK,GAAG,CAAC,EAAE;UAChB,IAAIxV,KAAK,GAAG4W,sBAAsB,CAACpB,KAAK,CAAC;UACzC,IAAIqB,IAAI,GAAG,CAAC,IAAI7W,KAAK;UACrByW,cAAc,IAAIE,aAAa,CAAC3W,KAAK,CAAC;UACtCwV,KAAK,IAAI,CAACqB,IAAI;QAChB;MACF;MAEA,OAAOJ,cAAc;IACvB;IAEA,SAASK,qBAAqBA,CAACD,IAAI,EAAEE,WAAW,EAAE;MAChD,QAAQF,IAAI;QACV,KAAK/D,iBAAiB;QACtB,KAAKC,QAAQ;QACb,KAAKE,4BAA4B;QACjC,KAAKC,mBAAmB;UAUtB,OAAO6D,WAAW,GAAG9U,oBAAoB;QAE3C,KAAKkR,oBAAoB;QACzB,KAAKC,WAAW;QAChB,KAAKE,uBAAuB;QAC5B,KAAKE,eAAe;QACpB,KAAKC,eAAe;QACpB,KAAKC,eAAe;QACpB,KAAKC,eAAe;QACpB,KAAKC,eAAe;QACpB,KAAKC,eAAe;QACpB,KAAKC,eAAe;QACpB,KAAKC,eAAe;QACpB,KAAKC,eAAe;QACpB,KAAKC,gBAAgB;QACrB,KAAKC,gBAAgB;QACrB,KAAKC,gBAAgB;QACrB,KAAKC,gBAAgB;QACrB,KAAKC,gBAAgB;QACrB,KAAKC,gBAAgB;UACnB,OAAOyC,WAAW,GAAG7U,0BAA0B;QAEjD,KAAKsS,UAAU;QACf,KAAKC,UAAU;QACf,KAAKC,UAAU;QACf,KAAKC,UAAU;UAMb,OAAOS,WAAW;QAEpB,KAAKP,sBAAsB;QAC3B,KAAKE,iBAAiB;QACtB,KAAKC,QAAQ;QACb,KAAKC,aAAa;QAClB,KAAKC,YAAY;UAEf,OAAOE,WAAW;QAEpB;UACE;YACE3vB,KAAK,CAAC,2DAA2D,CAAC;UACpE;UAEA,OAAO2vB,WAAW;MACtB;IACF;IAEA,SAAS4B,yBAAyBA,CAACpG,IAAI,EAAEmG,WAAW,EAAE;MAIpD,IAAIlB,YAAY,GAAGjF,IAAI,CAACiF,YAAY;MACpC,IAAIE,cAAc,GAAGnF,IAAI,CAACmF,cAAc;MACxC,IAAIC,WAAW,GAAGpF,IAAI,CAACoF,WAAW;MAClC,IAAIiB,eAAe,GAAGrG,IAAI,CAACqG,eAAe;MAS1C,IAAIzB,KAAK,GAAGK,YAAY,GAAG,CAACtB,UAAU;MAEtC,OAAOiB,KAAK,GAAG,CAAC,EAAE;QAChB,IAAIxV,KAAK,GAAG4W,sBAAsB,CAACpB,KAAK,CAAC;QACzC,IAAIqB,IAAI,GAAG,CAAC,IAAI7W,KAAK;QACrB,IAAIkX,cAAc,GAAGD,eAAe,CAACjX,KAAK,CAAC;QAE3C,IAAIkX,cAAc,KAAK9B,WAAW,EAAE;UAIlC,IACE,CAACyB,IAAI,GAAGd,cAAc,MAAMnD,OAAO,IACnC,CAACiE,IAAI,GAAGb,WAAW,MAAMpD,OAAO,EAChC;YAEAqE,eAAe,CAACjX,KAAK,CAAC,GAAG8W,qBAAqB,CAACD,IAAI,EAAEE,WAAW,CAAC;UACnE;QACF,CAAC,MAAM,IAAIG,cAAc,IAAIH,WAAW,EAAE;UAExCnG,IAAI,CAACuG,YAAY,IAAIN,IAAI;QAC3B;QAEArB,KAAK,IAAI,CAACqB,IAAI;MAChB;IACF;IACA,SAASO,mCAAmCA,CAC1CxG,IAAI,EACJyG,wBAAwB,EACxB;MACA,IAAIzG,IAAI,CAAC0G,0BAA0B,GAAGD,wBAAwB,EAAE;QAE9D,OAAOzE,OAAO;MAChB;MAEA,IAAI2E,sBAAsB,GAAG3G,IAAI,CAACiF,YAAY,GAAG,CAACZ,aAAa;MAE/D,IAAIsC,sBAAsB,KAAK3E,OAAO,EAAE;QACtC,OAAO2E,sBAAsB;MAC/B;MAEA,IAAIA,sBAAsB,GAAGtC,aAAa,EAAE;QAC1C,OAAOA,aAAa;MACtB;MAEA,OAAOrC,OAAO;IAChB;IACA,SAAS4E,gBAAgBA,CAAChC,KAAK,EAAE;MAC/B,OAAO,CAACA,KAAK,IAAIzC,QAAQ,GAAGD,iBAAiB,CAAC,MAAMF,OAAO;IAC7D;IACA,SAAS6E,mBAAmBA,CAACjC,KAAK,EAAE;MAClC,OAAO,CAACA,KAAK,GAAGV,YAAY,MAAMlC,OAAO;IAC3C;IACA,SAAS8E,mBAAmBA,CAAClC,KAAK,EAAE;MAClC,OAAO,CAACA,KAAK,GAAGjB,UAAU,MAAMiB,KAAK;IACvC;IACA,SAASmC,0BAA0BA,CAACnC,KAAK,EAAE;MAGzC,IAAIoC,WAAW,GAAG7E,QAAQ,GAAGG,mBAAmB,GAAGE,WAAW;MAC9D,OAAO,CAACoC,KAAK,GAAGoC,WAAW,MAAMhF,OAAO;IAC1C;IACA,SAASiF,uBAAuBA,CAACrC,KAAK,EAAE;MACtC,OAAO,CAACA,KAAK,GAAGjC,eAAe,MAAMiC,KAAK;IAC5C;IACA,SAASsC,oBAAoBA,CAAClH,IAAI,EAAE4E,KAAK,EAAE;MACzC,IAAIuC,gBAAgB,GAClB9E,4BAA4B,GAC5BC,mBAAmB,GACnBC,oBAAoB,GACpBC,WAAW;MACb,OAAO,CAACoC,KAAK,GAAGuC,gBAAgB,MAAMnF,OAAO;IAC/C;IACA,SAASoF,mBAAmBA,CAACpH,IAAI,EAAE4E,KAAK,EAAE;MAGxC,OAAO,CAACA,KAAK,GAAG5E,IAAI,CAACuG,YAAY,MAAMvE,OAAO;IAChD;IACA,SAASqF,gBAAgBA,CAACpB,IAAI,EAAE;MAC9B,OAAO,CAACA,IAAI,GAAGtD,eAAe,MAAMX,OAAO;IAC7C;IACA,SAASsF,uBAAuBA,CAAA,EAAG;MAIjC,IAAIrB,IAAI,GAAGxB,kBAAkB;MAC7BA,kBAAkB,KAAK,CAAC;MAExB,IAAI,CAACA,kBAAkB,GAAG9B,eAAe,MAAMX,OAAO,EAAE;QACtDyC,kBAAkB,GAAG7B,eAAe;MACtC;MAEA,OAAOqD,IAAI;IACb;IACA,SAASsB,kBAAkBA,CAAA,EAAG;MAC5B,IAAItB,IAAI,GAAGvB,aAAa;MACxBA,aAAa,KAAK,CAAC;MAEnB,IAAI,CAACA,aAAa,GAAGf,UAAU,MAAM3B,OAAO,EAAE;QAC5C0C,aAAa,GAAGd,UAAU;MAC5B;MAEA,OAAOqC,IAAI;IACb;IACA,SAASnB,sBAAsBA,CAACF,KAAK,EAAE;MACrC,OAAOA,KAAK,GAAG,CAACA,KAAK;IACvB;IACA,SAAS4C,iBAAiBA,CAAC5C,KAAK,EAAE;MAKhC,OAAOE,sBAAsB,CAACF,KAAK,CAAC;IACtC;IAEA,SAASoB,sBAAsBA,CAACpB,KAAK,EAAE;MACrC,OAAO,EAAE,GAAGlD,KAAK,CAACkD,KAAK,CAAC;IAC1B;IAEA,SAAS6C,WAAWA,CAACxB,IAAI,EAAE;MACzB,OAAOD,sBAAsB,CAACC,IAAI,CAAC;IACrC;IAEA,SAASyB,gBAAgBA,CAAC/uB,CAAC,EAAEC,CAAC,EAAE;MAC9B,OAAO,CAACD,CAAC,GAAGC,CAAC,MAAMopB,OAAO;IAC5B;IACA,SAAS2F,eAAeA,CAAC7pB,GAAG,EAAE8pB,MAAM,EAAE;MACpC,OAAO,CAAC9pB,GAAG,GAAG8pB,MAAM,MAAMA,MAAM;IAClC;IACA,SAASC,UAAUA,CAAClvB,CAAC,EAAEC,CAAC,EAAE;MACxB,OAAOD,CAAC,GAAGC,CAAC;IACd;IACA,SAASkvB,WAAWA,CAAChqB,GAAG,EAAE8pB,MAAM,EAAE;MAChC,OAAO9pB,GAAG,GAAG,CAAC8pB,MAAM;IACtB;IACA,SAASG,cAAcA,CAACpvB,CAAC,EAAEC,CAAC,EAAE;MAC5B,OAAOD,CAAC,GAAGC,CAAC;IACd;IAGA,SAASovB,WAAWA,CAAC/B,IAAI,EAAE;MACzB,OAAOA,IAAI;IACb;IACA,SAASgC,aAAaA,CAACC,OAAO,EAAE;MAG9B,IAAIC,OAAO,GAAG,EAAE;MAEhB,KAAK,IAAIrtB,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGinB,UAAU,EAAEjnB,CAAC,EAAE,EAAE;QACnCqtB,OAAO,CAACvpB,IAAI,CAACspB,OAAO,CAAC;MACvB;MAEA,OAAOC,OAAO;IAChB;IACA,SAASC,eAAeA,CAACpI,IAAI,EAAEqI,UAAU,EAAE;MACzCrI,IAAI,CAACiF,YAAY,IAAIoD,UAAU;MAa/B,IAAIA,UAAU,KAAKjE,QAAQ,EAAE;QAC3BpE,IAAI,CAACmF,cAAc,GAAGnD,OAAO;QAC7BhC,IAAI,CAACoF,WAAW,GAAGpD,OAAO;MAC5B;IACF;IACA,SAASsG,mBAAmBA,CAACtI,IAAI,EAAEmF,cAAc,EAAEoD,WAAW,EAAE;MAC9DvI,IAAI,CAACmF,cAAc,IAAIA,cAAc;MACrCnF,IAAI,CAACoF,WAAW,IAAI,CAACD,cAAc;MAEnC,IAAIkB,eAAe,GAAGrG,IAAI,CAACqG,eAAe;MAC1C,IAAIzB,KAAK,GAAGO,cAAc;MAE1B,OAAOP,KAAK,GAAG,CAAC,EAAE;QAChB,IAAIxV,KAAK,GAAG4W,sBAAsB,CAACpB,KAAK,CAAC;QACzC,IAAIqB,IAAI,GAAG,CAAC,IAAI7W,KAAK;QACrBiX,eAAe,CAACjX,KAAK,CAAC,GAAGoV,WAAW;QACpCI,KAAK,IAAI,CAACqB,IAAI;MAChB;MAEA,IAAIsC,WAAW,KAAKtG,MAAM,EAAE;QAC1BuG,uBAAuB,CAACxI,IAAI,EAAEuI,WAAW,EAAEpD,cAAc,CAAC;MAC5D;IACF;IACA,SAASsD,cAAcA,CAACzI,IAAI,EAAEoF,WAAW,EAAE;MACzCpF,IAAI,CAACoF,WAAW,IAAIpF,IAAI,CAACmF,cAAc,GAAGC,WAAW;IACvD;IACA,SAASsD,gBAAgBA,CAAC1I,IAAI,EAAE2I,cAAc,EAAEJ,WAAW,EAAE;MAC3D,IAAIK,oBAAoB,GAAG5I,IAAI,CAACiF,YAAY,GAAG,CAAC0D,cAAc;MAC9D3I,IAAI,CAACiF,YAAY,GAAG0D,cAAc;MAElC3I,IAAI,CAACmF,cAAc,GAAGnD,OAAO;MAC7BhC,IAAI,CAACoF,WAAW,GAAGpD,OAAO;MAC1BhC,IAAI,CAACuG,YAAY,IAAIoC,cAAc;MACnC3I,IAAI,CAAC6F,cAAc,IAAI8C,cAAc;MACrC3I,IAAI,CAAC0G,0BAA0B,IAAIiC,cAAc;MACjD3I,IAAI,CAAC6I,mBAAmB,GAAG,CAAC;MAC5B,IAAI9C,aAAa,GAAG/F,IAAI,CAAC+F,aAAa;MACtC,IAAIM,eAAe,GAAGrG,IAAI,CAACqG,eAAe;MAC1C,IAAIyC,aAAa,GAAG9I,IAAI,CAAC8I,aAAa;MAEtC,IAAIlE,KAAK,GAAGgE,oBAAoB;MAEhC,OAAOhE,KAAK,GAAG,CAAC,EAAE;QAChB,IAAIxV,KAAK,GAAG4W,sBAAsB,CAACpB,KAAK,CAAC;QACzC,IAAIqB,IAAI,GAAG,CAAC,IAAI7W,KAAK;QACrB2W,aAAa,CAAC3W,KAAK,CAAC,GAAG4S,OAAO;QAC9BqE,eAAe,CAACjX,KAAK,CAAC,GAAGoV,WAAW;QACpC,IAAIuE,oBAAoB,GAAGD,aAAa,CAAC1Z,KAAK,CAAC;QAE/C,IAAI2Z,oBAAoB,KAAK,IAAI,EAAE;UACjCD,aAAa,CAAC1Z,KAAK,CAAC,GAAG,IAAI;UAK3B,KAAK,IAAItU,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGiuB,oBAAoB,CAACv0B,MAAM,EAAEsG,CAAC,EAAE,EAAE;YACpD,IAAIkuB,MAAM,GAAGD,oBAAoB,CAACjuB,CAAC,CAAC;YAEpC,IAAIkuB,MAAM,KAAK,IAAI,EAAE;cACnBA,MAAM,CAAC/C,IAAI,IAAI,CAAC5B,aAAa;YAC/B;UACF;QACF;QAEAO,KAAK,IAAI,CAACqB,IAAI;MAChB;MAEA,IAAIsC,WAAW,KAAKtG,MAAM,EAAE;QAC1BuG,uBAAuB,CACrBxI,IAAI,EACJuI,WAAW,EAEXvG,OACF,CAAC;MACH;IACF;IAEA,SAASwG,uBAAuBA,CAACxI,IAAI,EAAEuI,WAAW,EAAE1C,cAAc,EAAE;MAElE7F,IAAI,CAACiF,YAAY,IAAIsD,WAAW;MAChCvI,IAAI,CAACmF,cAAc,IAAI,CAACoD,WAAW;MAInC,IAAIU,gBAAgB,GAAGxB,WAAW,CAACc,WAAW,CAAC;MAC/CvI,IAAI,CAAC6F,cAAc,IAAI0C,WAAW;MAClCvI,IAAI,CAAC+F,aAAa,CAACkD,gBAAgB,CAAC,IAClC3E,YAAY,GAIXuB,cAAc,GAAGtB,WAAY;IAClC;IAEA,SAAS2E,iBAAiBA,CAAClJ,IAAI,EAAE6F,cAAc,EAAE;MAY/C,IAAIsD,kBAAkB,GAAInJ,IAAI,CAAC6F,cAAc,IAAIA,cAAe;MAChE,IAAIE,aAAa,GAAG/F,IAAI,CAAC+F,aAAa;MACtC,IAAInB,KAAK,GAAGuE,kBAAkB;MAE9B,OAAOvE,KAAK,EAAE;QACZ,IAAIxV,KAAK,GAAG4W,sBAAsB,CAACpB,KAAK,CAAC;QACzC,IAAIqB,IAAI,GAAG,CAAC,IAAI7W,KAAK;QAErB,IAEG6W,IAAI,GAAGJ,cAAc,GACrBE,aAAa,CAAC3W,KAAK,CAAC,GAAGyW,cAAe,EACvC;UACAE,aAAa,CAAC3W,KAAK,CAAC,IAAIyW,cAAc;QACxC;QAEAjB,KAAK,IAAI,CAACqB,IAAI;MAChB;IACF;IACA,SAASmD,wBAAwBA,CAACpJ,IAAI,EAAEiG,IAAI,EAAE;MAG5CjG,IAAI,CAACiF,YAAY,IAAI9C,QAAQ;MAG7BnC,IAAI,CAAC6F,cAAc,IAAI1D,QAAQ;MAC/BnC,IAAI,CAAC+F,aAAa,CAAC3D,aAAa,CAAC,IAAI6D,IAAI;IAC3C;IACA,SAASoD,gBAAgBA,CAACrJ,IAAI,EAAEgJ,MAAM,EAAE/C,IAAI,EAAE;MAC5C,IAAI7W,KAAK,GAAGqY,WAAW,CAACxB,IAAI,CAAC;MAC7B,IAAI6C,aAAa,GAAG9I,IAAI,CAAC8I,aAAa;MACtC,IAAIC,oBAAoB,GAAGD,aAAa,CAAC1Z,KAAK,CAAC;MAE/C,IAAI2Z,oBAAoB,KAAK,IAAI,EAAE;QACjCD,aAAa,CAAC1Z,KAAK,CAAC,GAAG,CAAC4Z,MAAM,CAAC;MACjC,CAAC,MAAM;QACLD,oBAAoB,CAACnqB,IAAI,CAACoqB,MAAM,CAAC;MACnC;MAEAA,MAAM,CAAC/C,IAAI,GAAGA,IAAI,GAAG5B,aAAa;IACpC;IACA,SAASiF,yBAAyBA,CAACtJ,IAAI,EAAE4F,WAAW,EAAE;MACpD,IAAI2D,UAAU,GAAGzE,sBAAsB,CAACc,WAAW,CAAC;MACpD,IAAIK,IAAI;MAER,IAAI,CAACsD,UAAU,GAAG9G,eAAe,MAAMR,MAAM,EAAE;QAC7CgE,IAAI,GAAG/D,iBAAiB;MAC1B,CAAC,MAAM;QACL,QAAQqH,UAAU;UAChB,KAAKpH,QAAQ;YACX8D,IAAI,GAAG/D,iBAAiB;YACxB;UAEF,KAAKI,mBAAmB;YACtB2D,IAAI,GAAG5D,4BAA4B;YACnC;UAEF,KAAKG,WAAW;YACdyD,IAAI,GAAG1D,oBAAoB;YAC3B;UAEF,KAAKK,eAAe;UACpB,KAAKC,eAAe;UACpB,KAAKC,eAAe;UACpB,KAAKC,eAAe;UACpB,KAAKC,eAAe;UACpB,KAAKC,eAAe;UACpB,KAAKC,eAAe;UACpB,KAAKC,eAAe;UACpB,KAAKC,eAAe;UACpB,KAAKC,gBAAgB;UACrB,KAAKC,gBAAgB;UACrB,KAAKC,gBAAgB;UACrB,KAAKC,gBAAgB;UACrB,KAAKC,gBAAgB;UACrB,KAAKC,gBAAgB;UACrB,KAAKE,UAAU;UACf,KAAKC,UAAU;UACf,KAAKC,UAAU;UACf,KAAKC,UAAU;YACbkC,IAAI,GAAGvD,uBAAuB;YAC9B;UAEF,KAAK0B,QAAQ;YACX6B,IAAI,GAAG9B,iBAAiB;YACxB;UAEF;YAGE8B,IAAI,GAAGhE,MAAM;YACb;QACJ;MACF;MAIA,IAAI,CAACgE,IAAI,IAAIjG,IAAI,CAACmF,cAAc,GAAGS,WAAW,CAAC,MAAM3D,MAAM,EAAE;QAE3D,OAAOA,MAAM;MACf;MAEA,OAAOgE,IAAI;IACb;IACA,SAASuD,kBAAkBA,CAACxJ,IAAI,EAAErL,KAAK,EAAEiQ,KAAK,EAAE;MAC9C,IAAI,CAACtF,iBAAiB,EAAE;QACtB;MACF;MAEA,IAAImK,sBAAsB,GAAGzJ,IAAI,CAACyJ,sBAAsB;MAExD,OAAO7E,KAAK,GAAG,CAAC,EAAE;QAChB,IAAIxV,KAAK,GAAGqY,WAAW,CAAC7C,KAAK,CAAC;QAC9B,IAAIqB,IAAI,GAAG,CAAC,IAAI7W,KAAK;QACrB,IAAIsa,QAAQ,GAAGD,sBAAsB,CAACra,KAAK,CAAC;QAC5Csa,QAAQ,CAACC,GAAG,CAAChV,KAAK,CAAC;QACnBiQ,KAAK,IAAI,CAACqB,IAAI;MAChB;IACF;IACA,SAAS2D,2BAA2BA,CAAC5J,IAAI,EAAE4E,KAAK,EAAE;MAChD,IAAI,CAACtF,iBAAiB,EAAE;QACtB;MACF;MAEA,IAAImK,sBAAsB,GAAGzJ,IAAI,CAACyJ,sBAAsB;MACxD,IAAII,gBAAgB,GAAG7J,IAAI,CAAC6J,gBAAgB;MAE5C,OAAOjF,KAAK,GAAG,CAAC,EAAE;QAChB,IAAIxV,KAAK,GAAGqY,WAAW,CAAC7C,KAAK,CAAC;QAC9B,IAAIqB,IAAI,GAAG,CAAC,IAAI7W,KAAK;QACrB,IAAIsa,QAAQ,GAAGD,sBAAsB,CAACra,KAAK,CAAC;QAE5C,IAAIsa,QAAQ,CAACI,IAAI,GAAG,CAAC,EAAE;UACrBJ,QAAQ,CAACpnB,OAAO,CAAC,UAAUqS,KAAK,EAAE;YAChC,IAAIxN,SAAS,GAAGwN,KAAK,CAACxN,SAAS;YAE/B,IAAIA,SAAS,KAAK,IAAI,IAAI,CAAC0iB,gBAAgB,CAACE,GAAG,CAAC5iB,SAAS,CAAC,EAAE;cAC1D0iB,gBAAgB,CAACF,GAAG,CAAChV,KAAK,CAAC;YAC7B;UACF,CAAC,CAAC;UACF+U,QAAQ,CAACM,KAAK,CAAC,CAAC;QAClB;QAEApF,KAAK,IAAI,CAACqB,IAAI;MAChB;IACF;IACA,SAASgE,sBAAsBA,CAACjK,IAAI,EAAE4E,KAAK,EAAE;MAC3C;QACE,OAAO,IAAI;MACb;IACF;IAEA,IAAIrE,qBAAqB,GAAG4B,QAAQ;IACpC,IAAI3B,uBAAuB,GAAG8B,mBAAmB;IACjD,IAAI7B,oBAAoB,GAAG+B,WAAW;IACtC,IAAI9B,iBAAiB,GAAG0D,QAAQ;IAChC,IAAI8F,qBAAqB,GAAGjI,MAAM;IAClC,SAASkI,wBAAwBA,CAAA,EAAG;MAClC,OAAOD,qBAAqB;IAC9B;IACA,SAASE,wBAAwBA,CAACC,WAAW,EAAE;MAC7CH,qBAAqB,GAAGG,WAAW;IACrC;IACA,SAASC,mBAAmBA,CAAC3xB,CAAC,EAAEC,CAAC,EAAE;MACjC,OAAOD,CAAC,KAAK,CAAC,IAAIA,CAAC,GAAGC,CAAC,GAAGD,CAAC,GAAGC,CAAC;IACjC;IACA,SAAS2xB,kBAAkBA,CAAC5xB,CAAC,EAAEC,CAAC,EAAE;MAChC,OAAOD,CAAC,KAAK,CAAC,IAAIA,CAAC,GAAGC,CAAC,GAAGD,CAAC,GAAGC,CAAC;IACjC;IACA,SAAS4xB,qBAAqBA,CAAC7xB,CAAC,EAAEC,CAAC,EAAE;MACnC,OAAOD,CAAC,KAAK,CAAC,IAAIA,CAAC,GAAGC,CAAC;IACzB;IACA,SAAS6xB,oBAAoBA,CAAC7F,KAAK,EAAE;MACnC,IAAIqB,IAAI,GAAGnB,sBAAsB,CAACF,KAAK,CAAC;MAExC,IAAI,CAAC4F,qBAAqB,CAACjK,qBAAqB,EAAE0F,IAAI,CAAC,EAAE;QACvD,OAAO1F,qBAAqB;MAC9B;MAEA,IAAI,CAACiK,qBAAqB,CAAChK,uBAAuB,EAAEyF,IAAI,CAAC,EAAE;QACzD,OAAOzF,uBAAuB;MAChC;MAEA,IAAIqG,mBAAmB,CAACZ,IAAI,CAAC,EAAE;QAC7B,OAAOxF,oBAAoB;MAC7B;MAEA,OAAOC,iBAAiB;IAC1B;IAIA,SAASgK,MAAMA,CAAA,EAAG;MAChB,MAAM,IAAI72B,KAAK,CACb,mDAAmD,GACjD,iDAAiD,GACjD,uBACJ,CAAC;IACH;IACA,IAAI82B,yBAAyB,GAAGD,MAAM;IACtC,IAAIE,0BAA0B,GAAGF,MAAM;IACvC,IAAIG,uCAAuC,GAAGH,MAAM;IACpD,IAAII,6BAA6B,GAAGJ,MAAM;IAC1C,IAAIK,qBAAqB,GAAGL,MAAM;IAClC,IAAIM,kCAAkC,GAAGN,MAAM;IAC/C,IAAIO,uBAAuB,GAAGP,MAAM;IAIpC,SAASQ,IAAIA,CAAA,EAAG;MACd,MAAM,IAAIr3B,KAAK,CACb,mDAAmD,GACjD,iDAAiD,GACjD,uBACJ,CAAC;IACH;IACA,IAAIs3B,eAAe,GAAGD,IAAI;IAE1B,IAAIE,oBAAoB,GACtBp3B,2BAA2B,CAACiY,6BAA6B,CAAC/N,GAAG;IAM/D,IAAImtB,YAAY,GAAG,CAAC;IAEpB,SAASC,WAAWA,CAAA,EAAG;MACrB,IAAI5kB,GAAG,GAAG2kB,YAAY;MAEtB,IAAI3kB,GAAG,GAAG,EAAE,KAAK,CAAC,EAAE;QAClBA,GAAG,IAAI,CAAC;MACV;MAEA2kB,YAAY,GAAG3kB,GAAG,GAAG,CAAC;MACtB,OAAOA,GAAG;IACZ;IAEA,SAAS6kB,2BAA2BA,CAACpU,IAAI,EAAE;MACzC,IAAI,OAAOA,IAAI,KAAK,QAAQ,EAAE;QAE5B5J,gBAAgB,CAAC4J,IAAI,CAAC;MACxB,CAAC,MAAM;QACL5J,gBAAgB,CAAC4J,IAAI,CAACvJ,UAAU,CAAC;QAEjCuJ,IAAI,CAACsE,SAAS,CAACnZ,OAAO,CAACipB,2BAA2B,CAAC;MACrD;IACF;IACA,SAASC,kBAAkBA,CAACC,cAAc,EAAEvT,KAAK,EAAE;MACjDuT,cAAc,CAAChQ,SAAS,CAAC7c,IAAI,CAACsZ,KAAK,CAAC;IACtC;IACA,SAASwT,cAAcA,CACrBhxB,IAAI,EACJiN,KAAK,EACLgkB,qBAAqB,EACrBC,WAAW,EACXC,sBAAsB,EACtB;MACA,IAAInlB,GAAG,GAAG4kB,WAAW,CAAC,CAAC;MACvB,IAAI/P,UAAU,GAAG6P,oBAAoB,CAAC1wB,IAAI,CAAC;MAE3C;QACE,KAAK,IAAIoW,GAAG,IAAIyK,UAAU,CAAC7B,eAAe,EAAE;UAC1C,IAAI/R,KAAK,CAACtQ,cAAc,CAACyZ,GAAG,CAAC,EAAE;YAC7B9c,2BAA2B,CAAC83B,iCAAiC,CAC3DnkB,KAAK,CAACmJ,GAAG,CACX,CAAC;UACH;QACF;MACF;MAEA,IAAI2I,aAAa,GAAGwB,MAAM,CAACtT,KAAK,EAAE4T,UAAU,CAAC7B,eAAe,CAAC;MAC7D1lB,2BAA2B,CAACyc,SAAS,CAACsb,UAAU,CAC9CrlB,GAAG,EACH6U,UAAU,CAACqB,eAAe,EAC1B+O,qBAAqB,EACrBlS,aACF,CAAC;MACD,IAAIhC,SAAS,GAAG,IAAI6D,6BAA6B,CAC/C5U,GAAG,EACH6U,UAAU,EACVsQ,sBACF,CAAC;MACDxe,iBAAiB,CAACwe,sBAAsB,EAAEnlB,GAAG,CAAC;MAC9CuH,gBAAgB,CAACvH,GAAG,EAAEiB,KAAK,CAAC;MAG5B,OAAO8P,SAAS;IAClB;IACA,SAASuU,kBAAkBA,CACzBC,IAAI,EACJN,qBAAqB,EACrBC,WAAW,EACXC,sBAAsB,EACtB;MACA,IAAI,CAACD,WAAW,CAACM,eAAe,EAAE;QAChC,MAAM,IAAIr4B,KAAK,CACb,0DACF,CAAC;MACH;MAEA,IAAI6S,GAAG,GAAG4kB,WAAW,CAAC,CAAC;MACvBt3B,2BAA2B,CAACyc,SAAS,CAACsb,UAAU,CAC9CrlB,GAAG,EACH,YAAY,EACZilB,qBAAqB,EACrB;QACEM,IAAI,EAAEA;MACR,CACF,CAAC;MACD5e,iBAAiB,CAACwe,sBAAsB,EAAEnlB,GAAG,CAAC;MAC9C,OAAOA,GAAG;IACZ;IACA,SAASylB,uBAAuBA,CAACV,cAAc,EAAE/wB,IAAI,EAAEiN,KAAK,EAAEikB,WAAW,EAAE;MAEzE,IAAIH,cAAc,CAAChQ,SAAS,CAACjnB,MAAM,KAAK,CAAC,EAAE;QACzC,OAAO,KAAK;MACd;MAGA,IAAI43B,UAAU,GAAGX,cAAc,CAAChQ,SAAS,CAACnmB,GAAG,CAAC,UAAU4iB,KAAK,EAAE;QAC7D,OAAO,OAAOA,KAAK,KAAK,QAAQ,GAC5BA,KAAK,GACLA,KAAK,CAACtK,UAAU;MACtB,CAAC,CAAC;MAEF5Z,2BAA2B,CAACyc,SAAS,CAAC4b,WAAW,CAC/CZ,cAAc,CAAC7d,UAAU,EACzBwe,UACF,CAAC;MACD,OAAO,KAAK;IACd;IACA,SAASE,kBAAkBA,CAACX,qBAAqB,EAAE;MACjD,OAAO;QACLO,eAAe,EAAE;MACnB,CAAC;IACH;IACA,SAASK,mBAAmBA,CAACC,iBAAiB,EAAE9xB,IAAI,EAAE;MACpD,IAAI+xB,mBAAmB,GAAGD,iBAAiB,CAACN,eAAe;MAC3D,IAAIA,eAAe,GACjBxxB,IAAI,KAAK,kBAAkB,IAC3BA,IAAI,KAAK,2BAA2B,IACpCA,IAAI,KAAK,4BAA4B,IACrCA,IAAI,KAAK,SAAS,IAClBA,IAAI,KAAK,gBAAgB;MAE3B,IAAI+xB,mBAAmB,KAAKP,eAAe,EAAE;QAC3C,OAAO;UACLA,eAAe,EAAEA;QACnB,CAAC;MACH,CAAC,MAAM;QACL,OAAOM,iBAAiB;MAC1B;IACF;IACA,SAASE,iBAAiBA,CAACjuB,QAAQ,EAAE;MAEnC,IACEA,QAAQ,CAACoP,SAAS,IAAI,IAAI,IAC1BpP,QAAQ,CAACoP,SAAS,CAACE,cAAc,IAAI,IAAI,EACzC;QAEA,OAAOtP,QAAQ,CAACoP,SAAS,CAACE,cAAc;MAC1C;MAEA,OAAOtP,QAAQ;IACjB;IACA,IAAIkuB,eAAe,GAAGC,UAAU;IAChC,IAAIC,aAAa,GAAGC,YAAY;IAChC,IAAIC,SAAS,GAAG,CAAC,CAAC;IAClB,SAASC,oBAAoBA,CAACtyB,IAAI,EAAEiN,KAAK,EAAE;MAOzC,OAAO,KAAK;IACd;IACA,SAASslB,uBAAuBA,CAAA,EAAG;MACjC,OAAOxM,oBAAoB;IAC7B;IACA,SAASyM,4BAA4BA,CAAA,EAAG;MACtC,OAAO,KAAK;IACd;IACA,SAASC,WAAWA,CAAC1B,cAAc,EAAEvT,KAAK,EAAE;MAC1C,IAAIkV,QAAQ,GAAG,OAAOlV,KAAK,KAAK,QAAQ,GAAGA,KAAK,GAAGA,KAAK,CAACtK,UAAU;MACnE,IAAIqS,QAAQ,GAAGwL,cAAc,CAAChQ,SAAS;MACvC,IAAIrM,KAAK,GAAG6Q,QAAQ,CAAClV,OAAO,CAACmN,KAAK,CAAC;MAEnC,IAAI9I,KAAK,IAAI,CAAC,EAAE;QACd6Q,QAAQ,CAACoN,MAAM,CAACje,KAAK,EAAE,CAAC,CAAC;QACzB6Q,QAAQ,CAACrhB,IAAI,CAACsZ,KAAK,CAAC;QACpBlkB,2BAA2B,CAACyc,SAAS,CAAC6c,cAAc,CAClD7B,cAAc,CAAC7d,UAAU,EACzB,CAACwB,KAAK,CAAC,EACP,CAAC6Q,QAAQ,CAACzrB,MAAM,GAAG,CAAC,CAAC,EACrB,EAAE,EACF,EAAE,EACF,EACF,CAAC;MACH,CAAC,MAAM;QACLyrB,QAAQ,CAACrhB,IAAI,CAACsZ,KAAK,CAAC;QACpBlkB,2BAA2B,CAACyc,SAAS,CAAC6c,cAAc,CAClD7B,cAAc,CAAC7d,UAAU,EACzB,EAAE,EACF,EAAE,EACF,CAACwf,QAAQ,CAAC,EACV,CAACnN,QAAQ,CAACzrB,MAAM,GAAG,CAAC,CAAC,EACrB,EACF,CAAC;MACH;IACF;IACA,SAAS+4B,sBAAsBA,CAAC9B,cAAc,EAAEvT,KAAK,EAAE;MACrD,IAAIkV,QAAQ,GAAG,OAAOlV,KAAK,KAAK,QAAQ,GAAGA,KAAK,GAAGA,KAAK,CAACtK,UAAU;MACnE5Z,2BAA2B,CAACyc,SAAS,CAAC4b,WAAW,CAC/CZ,cAAc,EACd,CAAC2B,QAAQ,CACX,CAAC;IACH;IACA,SAASI,gBAAgBA,CAACC,YAAY,EAAEC,OAAO,EAAEC,OAAO,EAAE;MACxD35B,2BAA2B,CAACyc,SAAS,CAACkM,UAAU,CAC9C8Q,YAAY,EACZ,YAAY,EACZ;QACExB,IAAI,EAAE0B;MACR,CACF,CAAC;IACH;IACA,SAASC,WAAWA,CAACnvB,QAAQ,EAAE/D,IAAI,EAAEmzB,QAAQ,EAAEhC,sBAAsB,EAAE,CAEvE;IACA,SAASiC,YAAYA,CACnBrvB,QAAQ,EACRsvB,iBAAiB,EACjBrzB,IAAI,EACJszB,QAAQ,EACRH,QAAQ,EACRhC,sBAAsB,EACtB;MACA,IAAItQ,UAAU,GAAG9c,QAAQ,CAAC8c,UAAU;MACpCtN,gBAAgB,CAACxP,QAAQ,CAACmP,UAAU,EAAEigB,QAAQ,CAAC;MAC/C,IAAIpU,aAAa,GAAGK,IAAI,CAACkU,QAAQ,EAAEH,QAAQ,EAAEtS,UAAU,CAAC7B,eAAe,CAAC;MAIxE,IAAID,aAAa,IAAI,IAAI,EAAE;QACzBzlB,2BAA2B,CAACyc,SAAS,CAACkM,UAAU,CAC9Cle,QAAQ,CAACmP,UAAU,EACnB2N,UAAU,CAACqB,eAAe,EAC1BnD,aACF,CAAC;MACH;IACF;IACA,SAASwU,YAAYA,CAACxC,cAAc,EAAEvT,KAAK,EAAEgW,WAAW,EAAE;MACxD,IAAIjO,QAAQ,GAAGwL,cAAc,CAAChQ,SAAS;MACvC,IAAIrM,KAAK,GAAG6Q,QAAQ,CAAClV,OAAO,CAACmN,KAAK,CAAC;MAEnC,IAAI9I,KAAK,IAAI,CAAC,EAAE;QACd6Q,QAAQ,CAACoN,MAAM,CAACje,KAAK,EAAE,CAAC,CAAC;QACzB,IAAI+e,gBAAgB,GAAGlO,QAAQ,CAAClV,OAAO,CAACmjB,WAAW,CAAC;QACpDjO,QAAQ,CAACoN,MAAM,CAACc,gBAAgB,EAAE,CAAC,EAAEjW,KAAK,CAAC;QAC3ClkB,2BAA2B,CAACyc,SAAS,CAAC6c,cAAc,CAClD7B,cAAc,CAAC7d,UAAU,EACzB,CAACwB,KAAK,CAAC,EACP,CAAC+e,gBAAgB,CAAC,EAClB,EAAE,EACF,EAAE,EACF,EACF,CAAC;MACH,CAAC,MAAM;QACL,IAAIC,iBAAiB,GAAGnO,QAAQ,CAAClV,OAAO,CAACmjB,WAAW,CAAC;QAErDjO,QAAQ,CAACoN,MAAM,CAACe,iBAAiB,EAAE,CAAC,EAAElW,KAAK,CAAC;QAC5C,IAAIkV,QAAQ,GAAG,OAAOlV,KAAK,KAAK,QAAQ,GAAGA,KAAK,GAAGA,KAAK,CAACtK,UAAU;QACnE5Z,2BAA2B,CAACyc,SAAS,CAAC6c,cAAc,CAClD7B,cAAc,CAAC7d,UAAU,EACzB,EAAE,EACF,EAAE,EACF,CAACwf,QAAQ,CAAC,EACV,CAACgB,iBAAiB,CAAC,EACnB,EACF,CAAC;MACH;IACF;IACA,SAASC,uBAAuBA,CAAC5C,cAAc,EAAEvT,KAAK,EAAEgW,WAAW,EAAE;MAKnE,IAAI,OAAOzC,cAAc,KAAK,QAAQ,EAAE;QACtC,MAAM,IAAI53B,KAAK,CAAC,mDAAmD,CAAC;MACtE;IACF;IACA,SAASy6B,WAAWA,CAAC7C,cAAc,EAAEvT,KAAK,EAAE;MAC1CqT,2BAA2B,CAACrT,KAAK,CAAC;MAClC,IAAI+H,QAAQ,GAAGwL,cAAc,CAAChQ,SAAS;MACvC,IAAIrM,KAAK,GAAG6Q,QAAQ,CAAClV,OAAO,CAACmN,KAAK,CAAC;MACnC+H,QAAQ,CAACoN,MAAM,CAACje,KAAK,EAAE,CAAC,CAAC;MACzBpb,2BAA2B,CAACyc,SAAS,CAAC6c,cAAc,CAClD7B,cAAc,CAAC7d,UAAU,EACzB,EAAE,EACF,EAAE,EACF,EAAE,EACF,EAAE,EACF,CAACwB,KAAK,CACR,CAAC;IACH;IACA,SAASmf,wBAAwBA,CAAC9C,cAAc,EAAEvT,KAAK,EAAE;MACvDqT,2BAA2B,CAACrT,KAAK,CAAC;MAClClkB,2BAA2B,CAACyc,SAAS,CAAC6c,cAAc,CAClD7B,cAAc,EACd,EAAE,EACF,EAAE,EACF,EAAE,EACF,EAAE,EACF,CAAC,CAAC,CACJ,CAAC;IACH;IACA,SAAS+C,gBAAgBA,CAAC/vB,QAAQ,EAAE,CAEpC;IACA,SAASgwB,YAAYA,CAAChwB,QAAQ,EAAE;MAC9B,IAAI8c,UAAU,GAAG9c,QAAQ,CAAC8c,UAAU;MACpC,IAAI9B,aAAa,GAAGwB,MAAM,CACxB;QACEI,KAAK,EAAE;UACLqT,OAAO,EAAE;QACX;MACF,CAAC,EACDnT,UAAU,CAAC7B,eACb,CAAC;MACD1lB,2BAA2B,CAACyc,SAAS,CAACkM,UAAU,CAC9Cle,QAAQ,CAACmP,UAAU,EACnB2N,UAAU,CAACqB,eAAe,EAC1BnD,aACF,CAAC;IACH;IACA,SAASkV,gBAAgBA,CAAClB,YAAY,EAAE;MACtC,MAAM,IAAI55B,KAAK,CAAC,sBAAsB,CAAC;IACzC;IACA,SAAS+6B,cAAcA,CAACnwB,QAAQ,EAAEkJ,KAAK,EAAE;MACvC,IAAI4T,UAAU,GAAG9c,QAAQ,CAAC8c,UAAU;MACpC,IAAI9B,aAAa,GAAGK,IAAI,CACtBte,MAAM,CAAC,CAAC,CAAC,EAAEmM,KAAK,EAAE;QAChB0T,KAAK,EAAE,CACL1T,KAAK,CAAC0T,KAAK,EACX;UACEqT,OAAO,EAAE;QACX,CAAC;MAEL,CAAC,CAAC,EACF/mB,KAAK,EACL4T,UAAU,CAAC7B,eACb,CAAC;MACD1lB,2BAA2B,CAACyc,SAAS,CAACkM,UAAU,CAC9Cle,QAAQ,CAACmP,UAAU,EACnB2N,UAAU,CAACqB,eAAe,EAC1BnD,aACF,CAAC;IACH;IACA,SAASoV,kBAAkBA,CAACpB,YAAY,EAAExB,IAAI,EAAE;MAC9C,MAAM,IAAIp4B,KAAK,CAAC,sBAAsB,CAAC;IACzC;IACA,SAASi7B,eAAeA,CAACp0B,IAAI,EAAEiN,KAAK,EAAE;MAEpC,OAAO,IAAI;IACb;IACA,SAASonB,sBAAsBA,CAAA,EAAG;MAChC,OAAO,IAAI;IACb;IAEA,SAASC,6BAA6BA,CAAC14B,IAAI,EAAE24B,OAAO,EAAE;MACpD;QACE,IAAIC,SAAS,GAAG,IAAI;QAEpB,IAAID,OAAO,EAAE;UACXC,SAAS,GAAGD,OAAO,CAACzb,WAAW,IAAIyb,OAAO,CAAC34B,IAAI,IAAI,IAAI;QACzD;QAEA,OAAO64B,sBAAsB,CAAC74B,IAAI,EAAE44B,SAAS,CAAC;MAChD;IACF;IAEA;MACE,IAAIE,iBAAiB,GAAG,OAAOC,OAAO,KAAK,UAAU,GAAGA,OAAO,GAAGliB,GAAG;MACrE,IAAIiiB,iBAAiB,CAAC,CAAC;IACzB;IAEA,SAASD,sBAAsBA,CAAC74B,IAAI,EAAE44B,SAAS,EAAE;MAC/C,IAAII,UAAU,GAAG,EAAE;MAEnB,IAAIJ,SAAS,EAAE;QACbI,UAAU,GAAG,eAAe,GAAGJ,SAAS,GAAG,GAAG;MAChD;MAEA,OAAO,WAAW,IAAI54B,IAAI,IAAI,SAAS,CAAC,GAAGg5B,UAAU;IACvD;IAEA,SAASC,2BAA2BA,CAACC,IAAI,EAAEP,OAAO,EAAE;MAClD;QACE,OAAOQ,8BAA8B,CAACD,IAAI,EAAEP,OAAO,CAAC;MACtD;IACF;IACA,SAASQ,8BAA8BA,CAACnoB,EAAE,EAAE2nB,OAAO,EAAE;MACnD;QACE,IAAI,CAAC3nB,EAAE,EAAE;UACP,OAAO,EAAE;QACX;QAEA,IAAIhR,IAAI,GAAGgR,EAAE,CAACkM,WAAW,IAAIlM,EAAE,CAAChR,IAAI,IAAI,IAAI;QAC5C,IAAI44B,SAAS,GAAG,IAAI;QAEpB,IAAID,OAAO,EAAE;UACXC,SAAS,GAAGD,OAAO,CAACzb,WAAW,IAAIyb,OAAO,CAAC34B,IAAI,IAAI,IAAI;QACzD;QAEA,OAAO64B,sBAAsB,CAAC74B,IAAI,EAAE44B,SAAS,CAAC;MAChD;IACF;IAEA,SAASQ,oCAAoCA,CAACh1B,IAAI,EAAEu0B,OAAO,EAAE;MAC3D,IAAIv0B,IAAI,IAAI,IAAI,EAAE;QAChB,OAAO,EAAE;MACX;MAEA,IAAI,OAAOA,IAAI,KAAK,UAAU,EAAE;QAC9B;UACE,OAAO+0B,8BAA8B,CAAC/0B,IAAI,EAAEu0B,OAAO,CAAC;QACtD;MACF;MAEA,IAAI,OAAOv0B,IAAI,KAAK,QAAQ,EAAE;QAC5B,OAAOs0B,6BAA6B,CAACt0B,IAAI,EAAEu0B,OAAO,CAAC;MACrD;MAEA,QAAQv0B,IAAI;QACV,KAAK0X,mBAAmB;UACtB,OAAO4c,6BAA6B,CAAC,UAAU,EAAEC,OAAO,CAAC;QAE3D,KAAK5c,wBAAwB;UAC3B,OAAO2c,6BAA6B,CAAC,cAAc,EAAEC,OAAO,CAAC;MACjE;MAEA,IAAI,OAAOv0B,IAAI,KAAK,QAAQ,EAAE;QAC5B,QAAQA,IAAI,CAACmZ,QAAQ;UACnB,KAAK1B,sBAAsB;YACzB,OAAOsd,8BAA8B,CAAC/0B,IAAI,CAACsZ,MAAM,EAAEib,OAAO,CAAC;UAE7D,KAAK3c,eAAe;YAElB,OAAOod,oCAAoC,CAACh1B,IAAI,CAACA,IAAI,EAAEu0B,OAAO,CAAC;UAEjE,KAAK1c,eAAe;YAAE;cACpB,IAAI2B,aAAa,GAAGxZ,IAAI;cACxB,IAAIyZ,OAAO,GAAGD,aAAa,CAACE,QAAQ;cACpC,IAAIC,IAAI,GAAGH,aAAa,CAACI,KAAK;cAE9B,IAAI;gBAEF,OAAOob,oCAAoC,CACzCrb,IAAI,CAACF,OAAO,CAAC,EACb8a,OACF,CAAC;cACH,CAAC,CAAC,OAAO1a,CAAC,EAAE,CAAC;YACf;QACF;MACF;MAEA,OAAO,EAAE;IACX;IAGA,IAAIld,cAAc,GAAGN,MAAM,CAACpB,SAAS,CAAC0B,cAAc;IAEpD,IAAIs4B,kBAAkB,GAAG,CAAC,CAAC;IAC3B,IAAIC,wBAAwB,GAAG17B,oBAAoB,CAACe,sBAAsB;IAE1E,SAAS46B,6BAA6BA,CAACC,OAAO,EAAE;MAC9C;QACE,IAAIA,OAAO,EAAE;UACX,IAAIpY,KAAK,GAAGoY,OAAO,CAACC,MAAM;UAC1B,IAAI76B,KAAK,GAAGw6B,oCAAoC,CAC9CI,OAAO,CAACp1B,IAAI,EACZgd,KAAK,GAAGA,KAAK,CAAChd,IAAI,GAAG,IACvB,CAAC;UACDk1B,wBAAwB,CAACI,kBAAkB,CAAC96B,KAAK,CAAC;QACpD,CAAC,MAAM;UACL06B,wBAAwB,CAACI,kBAAkB,CAAC,IAAI,CAAC;QACnD;MACF;IACF;IAEA,SAASC,cAAcA,CACrBC,SAAS,EACTC,MAAM,EACNC,QAAQ,EACRC,aAAa,EACbP,OAAO,EACP;MACA;QAEE,IAAI/F,GAAG,GAAGr0B,QAAQ,CAACG,IAAI,CAACy6B,IAAI,CAACj5B,cAAc,CAAC;QAE5C,KAAK,IAAIk5B,YAAY,IAAIL,SAAS,EAAE;UAClC,IAAInG,GAAG,CAACmG,SAAS,EAAEK,YAAY,CAAC,EAAE;YAChC,IAAIC,OAAO,GAAG,KAAK,CAAC;YAIpB,IAAI;cAGF,IAAI,OAAON,SAAS,CAACK,YAAY,CAAC,KAAK,UAAU,EAAE;gBAEjD,IAAI1Q,GAAG,GAAGhsB,KAAK,CACb,CAACw8B,aAAa,IAAI,aAAa,IAC7B,IAAI,GACJD,QAAQ,GACR,SAAS,GACTG,YAAY,GACZ,gBAAgB,GAChB,8EAA8E,GAC9E,OAAOL,SAAS,CAACK,YAAY,CAAC,GAC9B,IAAI,GACJ,+FACJ,CAAC;gBACD1Q,GAAG,CAACvpB,IAAI,GAAG,qBAAqB;gBAChC,MAAMupB,GAAG;cACX;cAEA2Q,OAAO,GAAGN,SAAS,CAACK,YAAY,CAAC,CAC/BJ,MAAM,EACNI,YAAY,EACZF,aAAa,EACbD,QAAQ,EACR,IAAI,EACJ,8CACF,CAAC;YACH,CAAC,CAAC,OAAOK,EAAE,EAAE;cACXD,OAAO,GAAGC,EAAE;YACd;YAEA,IAAID,OAAO,IAAI,EAAEA,OAAO,YAAY38B,KAAK,CAAC,EAAE;cAC1Cg8B,6BAA6B,CAACC,OAAO,CAAC;cAEtCj7B,KAAK,CACH,8BAA8B,GAC5B,qCAAqC,GACrC,+DAA+D,GAC/D,iEAAiE,GACjE,gEAAgE,GAChE,iCAAiC,EACnCw7B,aAAa,IAAI,aAAa,EAC9BD,QAAQ,EACRG,YAAY,EACZ,OAAOC,OACT,CAAC;cAEDX,6BAA6B,CAAC,IAAI,CAAC;YACrC;YAEA,IACEW,OAAO,YAAY38B,KAAK,IACxB,EAAE28B,OAAO,CAACE,OAAO,IAAIf,kBAAkB,CAAC,EACxC;cAGAA,kBAAkB,CAACa,OAAO,CAACE,OAAO,CAAC,GAAG,IAAI;cAC1Cb,6BAA6B,CAACC,OAAO,CAAC;cAEtCj7B,KAAK,CAAC,oBAAoB,EAAEu7B,QAAQ,EAAEI,OAAO,CAACE,OAAO,CAAC;cAEtDb,6BAA6B,CAAC,IAAI,CAAC;YACrC;UACF;QACF;MACF;IACF;IAEA,IAAIc,UAAU,GAAG,EAAE;IACnB,IAAIC,UAAU;IAEd;MACEA,UAAU,GAAG,EAAE;IACjB;IAEA,IAAIxhB,KAAK,GAAG,CAAC,CAAC;IAEd,SAASyhB,YAAYA,CAACC,YAAY,EAAE;MAClC,OAAO;QACLnuB,OAAO,EAAEmuB;MACX,CAAC;IACH;IAEA,SAASpyB,GAAGA,CAACqyB,MAAM,EAAEpc,KAAK,EAAE;MAC1B,IAAIvF,KAAK,GAAG,CAAC,EAAE;QACb;UACEva,KAAK,CAAC,iBAAiB,CAAC;QAC1B;QAEA;MACF;MAEA;QACE,IAAI8f,KAAK,KAAKic,UAAU,CAACxhB,KAAK,CAAC,EAAE;UAC/Bva,KAAK,CAAC,0BAA0B,CAAC;QACnC;MACF;MAEAk8B,MAAM,CAACpuB,OAAO,GAAGguB,UAAU,CAACvhB,KAAK,CAAC;MAClCuhB,UAAU,CAACvhB,KAAK,CAAC,GAAG,IAAI;MAExB;QACEwhB,UAAU,CAACxhB,KAAK,CAAC,GAAG,IAAI;MAC1B;MAEAA,KAAK,EAAE;IACT;IAEA,SAASxQ,IAAIA,CAACmyB,MAAM,EAAE/f,KAAK,EAAE2D,KAAK,EAAE;MAClCvF,KAAK,EAAE;MACPuhB,UAAU,CAACvhB,KAAK,CAAC,GAAG2hB,MAAM,CAACpuB,OAAO;MAElC;QACEiuB,UAAU,CAACxhB,KAAK,CAAC,GAAGuF,KAAK;MAC3B;MAEAoc,MAAM,CAACpuB,OAAO,GAAGqO,KAAK;IACxB;IAEA,IAAIggB,iCAAiC;IAErC;MACEA,iCAAiC,GAAG,CAAC,CAAC;IACxC;IAEA,IAAIC,kBAAkB,GAAG,CAAC,CAAC;IAE3B;MACEl6B,MAAM,CAACm6B,MAAM,CAACD,kBAAkB,CAAC;IACnC;IAEA,IAAIE,oBAAoB,GAAGN,YAAY,CAACI,kBAAkB,CAAC;IAE3D,IAAIG,yBAAyB,GAAGP,YAAY,CAAC,KAAK,CAAC;IAInD,IAAIQ,eAAe,GAAGJ,kBAAkB;IAExC,SAASK,kBAAkBA,CACzBC,cAAc,EACdC,SAAS,EACTC,2BAA2B,EAC3B;MACA;QACE,IAAIA,2BAA2B,IAAIC,iBAAiB,CAACF,SAAS,CAAC,EAAE;UAK/D,OAAOH,eAAe;QACxB;QAEA,OAAOF,oBAAoB,CAACxuB,OAAO;MACrC;IACF;IAEA,SAASgvB,YAAYA,CAACJ,cAAc,EAAEK,eAAe,EAAEC,aAAa,EAAE;MACpE;QACE,IAAIpzB,QAAQ,GAAG8yB,cAAc,CAAC7pB,SAAS;QACvCjJ,QAAQ,CAACqzB,2CAA2C,GAAGF,eAAe;QACtEnzB,QAAQ,CAACszB,yCAAyC,GAAGF,aAAa;MACpE;IACF;IAEA,SAASG,gBAAgBA,CAACT,cAAc,EAAEK,eAAe,EAAE;MACzD;QACE,IAAIl3B,IAAI,GAAG62B,cAAc,CAAC72B,IAAI;QAC9B,IAAIu3B,YAAY,GAAGv3B,IAAI,CAACu3B,YAAY;QAEpC,IAAI,CAACA,YAAY,EAAE;UACjB,OAAOhB,kBAAkB;QAC3B;QAIA,IAAIxyB,QAAQ,GAAG8yB,cAAc,CAAC7pB,SAAS;QAEvC,IACEjJ,QAAQ,IACRA,QAAQ,CAACqzB,2CAA2C,KAClDF,eAAe,EACjB;UACA,OAAOnzB,QAAQ,CAACszB,yCAAyC;QAC3D;QAEA,IAAIv7B,OAAO,GAAG,CAAC,CAAC;QAEhB,KAAK,IAAIsa,GAAG,IAAImhB,YAAY,EAAE;UAC5Bz7B,OAAO,CAACsa,GAAG,CAAC,GAAG8gB,eAAe,CAAC9gB,GAAG,CAAC;QACrC;QAEA;UACE,IAAIxa,IAAI,GAAGoe,yBAAyB,CAAC6c,cAAc,CAAC,IAAI,SAAS;UACjEtB,cAAc,CAACgC,YAAY,EAAEz7B,OAAO,EAAE,SAAS,EAAEF,IAAI,CAAC;QACxD;QAGA,IAAImI,QAAQ,EAAE;UACZkzB,YAAY,CAACJ,cAAc,EAAEK,eAAe,EAAEp7B,OAAO,CAAC;QACxD;QAEA,OAAOA,OAAO;MAChB;IACF;IAEA,SAAS07B,iBAAiBA,CAAA,EAAG;MAC3B;QACE,OAAOd,yBAAyB,CAACzuB,OAAO;MAC1C;IACF;IAEA,SAAS+uB,iBAAiBA,CAACh3B,IAAI,EAAE;MAC/B;QACE,IAAIy3B,iBAAiB,GAAGz3B,IAAI,CAACy3B,iBAAiB;QAC9C,OAAOA,iBAAiB,KAAK,IAAI,IAAIA,iBAAiB,KAAKv3B,SAAS;MACtE;IACF;IAEA,SAASw3B,UAAUA,CAACzd,KAAK,EAAE;MACzB;QACEjW,GAAG,CAAC0yB,yBAAyB,EAAEzc,KAAK,CAAC;QACrCjW,GAAG,CAACyyB,oBAAoB,EAAExc,KAAK,CAAC;MAClC;IACF;IAEA,SAAS0d,wBAAwBA,CAAC1d,KAAK,EAAE;MACvC;QACEjW,GAAG,CAAC0yB,yBAAyB,EAAEzc,KAAK,CAAC;QACrCjW,GAAG,CAACyyB,oBAAoB,EAAExc,KAAK,CAAC;MAClC;IACF;IAEA,SAAS2d,yBAAyBA,CAAC3d,KAAK,EAAEne,OAAO,EAAE+7B,SAAS,EAAE;MAC5D;QACE,IAAIpB,oBAAoB,CAACxuB,OAAO,KAAKsuB,kBAAkB,EAAE;UACvD,MAAM,IAAIp9B,KAAK,CACb,qCAAqC,GACnC,sEACJ,CAAC;QACH;QAEA+K,IAAI,CAACuyB,oBAAoB,EAAE36B,OAAO,EAAEme,KAAK,CAAC;QAC1C/V,IAAI,CAACwyB,yBAAyB,EAAEmB,SAAS,EAAE5d,KAAK,CAAC;MACnD;IACF;IAEA,SAAS6d,mBAAmBA,CAAC7d,KAAK,EAAEja,IAAI,EAAE+3B,aAAa,EAAE;MACvD;QACE,IAAIh0B,QAAQ,GAAGkW,KAAK,CAACjN,SAAS;QAC9B,IAAIyqB,iBAAiB,GAAGz3B,IAAI,CAACy3B,iBAAiB;QAG9C,IAAI,OAAO1zB,QAAQ,CAACi0B,eAAe,KAAK,UAAU,EAAE;UAClD;YACE,IAAIrC,aAAa,GAAG3b,yBAAyB,CAACC,KAAK,CAAC,IAAI,SAAS;YAEjE,IAAI,CAACqc,iCAAiC,CAACX,aAAa,CAAC,EAAE;cACrDW,iCAAiC,CAACX,aAAa,CAAC,GAAG,IAAI;cAEvDx7B,KAAK,CACH,6EAA6E,GAC3E,2EAA2E,GAC3E,4BAA4B,EAC9Bw7B,aAAa,EACbA,aACF,CAAC;YACH;UACF;UAEA,OAAOoC,aAAa;QACtB;QAEA,IAAIE,YAAY,GAAGl0B,QAAQ,CAACi0B,eAAe,CAAC,CAAC;QAE7C,KAAK,IAAIE,UAAU,IAAID,YAAY,EAAE;UACnC,IAAI,EAAEC,UAAU,IAAIT,iBAAiB,CAAC,EAAE;YACtC,MAAM,IAAIt+B,KAAK,CACb,CAAC6gB,yBAAyB,CAACC,KAAK,CAAC,IAAI,SAAS,IAC5C,2BAA2B,GAC3Bie,UAAU,GACV,wCACJ,CAAC;UACH;QACF;QAEA;UACE,IAAIt8B,IAAI,GAAGoe,yBAAyB,CAACC,KAAK,CAAC,IAAI,SAAS;UACxDsb,cAAc,CACZkC,iBAAiB,EACjBQ,YAAY,EACZ,eAAe,EACfr8B,IACF,CAAC;QACH;QAEA,OAAOkF,MAAM,CAAC,CAAC,CAAC,EAAEi3B,aAAa,EAAEE,YAAY,CAAC;MAChD;IACF;IAEA,SAASE,mBAAmBA,CAACtB,cAAc,EAAE;MAC3C;QACE,IAAI9yB,QAAQ,GAAG8yB,cAAc,CAAC7pB,SAAS;QAIvC,IAAIorB,0BAA0B,GAC3Br0B,QAAQ,IAAIA,QAAQ,CAACs0B,yCAAyC,IAC/D9B,kBAAkB;QAGpBI,eAAe,GAAGF,oBAAoB,CAACxuB,OAAO;QAC9C/D,IAAI,CAACuyB,oBAAoB,EAAE2B,0BAA0B,EAAEvB,cAAc,CAAC;QACtE3yB,IAAI,CACFwyB,yBAAyB,EACzBA,yBAAyB,CAACzuB,OAAO,EACjC4uB,cACF,CAAC;QACD,OAAO,IAAI;MACb;IACF;IAEA,SAASyB,yBAAyBA,CAACzB,cAAc,EAAE72B,IAAI,EAAE63B,SAAS,EAAE;MAClE;QACE,IAAI9zB,QAAQ,GAAG8yB,cAAc,CAAC7pB,SAAS;QAEvC,IAAI,CAACjJ,QAAQ,EAAE;UACb,MAAM,IAAI5K,KAAK,CACb,8CAA8C,GAC5C,sEACJ,CAAC;QACH;QAEA,IAAI0+B,SAAS,EAAE;UAIb,IAAIU,aAAa,GAAGT,mBAAmB,CACrCjB,cAAc,EACd72B,IAAI,EACJ22B,eACF,CAAC;UACD5yB,QAAQ,CAACs0B,yCAAyC,GAAGE,aAAa;UAGlEv0B,GAAG,CAAC0yB,yBAAyB,EAAEG,cAAc,CAAC;UAC9C7yB,GAAG,CAACyyB,oBAAoB,EAAEI,cAAc,CAAC;UAEzC3yB,IAAI,CAACuyB,oBAAoB,EAAE8B,aAAa,EAAE1B,cAAc,CAAC;UACzD3yB,IAAI,CAACwyB,yBAAyB,EAAEmB,SAAS,EAAEhB,cAAc,CAAC;QAC5D,CAAC,MAAM;UACL7yB,GAAG,CAAC0yB,yBAAyB,EAAEG,cAAc,CAAC;UAC9C3yB,IAAI,CAACwyB,yBAAyB,EAAEmB,SAAS,EAAEhB,cAAc,CAAC;QAC5D;MACF;IACF;IAEA,SAAS2B,0BAA0BA,CAACve,KAAK,EAAE;MACzC;QAGE,IAAI,CAAC4C,cAAc,CAAC5C,KAAK,CAAC,IAAIA,KAAK,CAACjO,GAAG,KAAKvD,cAAc,EAAE;UAC1D,MAAM,IAAItP,KAAK,CACb,2DAA2D,GACzD,sEACJ,CAAC;QACH;QAEA,IAAIsjB,IAAI,GAAGxC,KAAK;QAEhB,GAAG;UACD,QAAQwC,IAAI,CAACzQ,GAAG;YACd,KAAKrD,QAAQ;cACX,OAAO8T,IAAI,CAACzP,SAAS,CAAClR,OAAO;YAE/B,KAAK2M,cAAc;cAAE;gBACnB,IAAIquB,SAAS,GAAGra,IAAI,CAACzc,IAAI;gBAEzB,IAAIg3B,iBAAiB,CAACF,SAAS,CAAC,EAAE;kBAChC,OAAOra,IAAI,CAACzP,SAAS,CAACqrB,yCAAyC;gBACjE;gBAEA;cACF;UACF;UAEA5b,IAAI,GAAGA,IAAI,CAAC1Q,MAAM;QACpB,CAAC,QAAQ0Q,IAAI,KAAK,IAAI;QAEtB,MAAM,IAAItjB,KAAK,CACb,4CAA4C,GAC1C,sEACJ,CAAC;MACH;IACF;IAEA,IAAIs/B,UAAU,GAAG,CAAC;IAClB,IAAIC,cAAc,GAAG,CAAC;IAItB,IAAIC,gBAAgB,GAElB,CAAC;IACH,IAAIC,iBAAiB,GAEnB,CAAC;IACH,IAAIC,gCAAgC,GAElC,CAAC;IACH,SAASC,iBAAiBA,CAACC,cAAc,EAAE;MACzC,OACEA,cAAc,CAACC,aAAa,KAAK,IAAI,IACrCD,cAAc,CAACC,aAAa,CAACC,IAAI,KAAK,QAAQ;IAElD;IAMA,SAASC,EAAEA,CAACrf,CAAC,EAAEsf,CAAC,EAAE;MAChB,OACGtf,CAAC,KAAKsf,CAAC,KAAKtf,CAAC,KAAK,CAAC,IAAI,CAAC,GAAGA,CAAC,KAAK,CAAC,GAAGsf,CAAC,CAAC,IAAMtf,CAAC,KAAKA,CAAC,IAAIsf,CAAC,KAAKA,CAAE;IAErE;IAEA,IAAIC,QAAQ,GAAG,OAAO/8B,MAAM,CAAC68B,EAAE,KAAK,UAAU,GAAG78B,MAAM,CAAC68B,EAAE,GAAGA,EAAE;IAK/D,SAASG,gBAAgBA,CAAC/T,IAAI,EAAE;MAC9B,IAAIgU,YAAY,GAAGhU,IAAI,CAACrd,OAAO,CAACsxB,aAAa;MAC7C,OAAOD,YAAY,CAACE,YAAY;IAClC;IAEA,IAAIC,kBAAkB,GAAGtD,YAAY,CAAC,IAAI,CAAC;IAC3C,IAAIuD,uBAAuB,GAAGvD,YAAY,CAAC,IAAI,CAAC;IAChD,IAAIwD,uBAAuB,GAAGxD,YAAY,CAAC,IAAI,CAAC;IAEhD,SAASyD,eAAeA,CAACz7B,CAAC,EAAE;MAC1B;QACE,IAAIA,CAAC,KAAK,IAAI,EAAE;UACdhE,KAAK,CACH,uEAAuE,GACrE,iCACJ,CAAC;QACH;MACF;MAEA,OAAOgE,CAAC;IACV;IAEA,SAAS07B,oBAAoBA,CAAA,EAAG;MAC9B,IAAIC,YAAY,GAAGF,eAAe,CAACD,uBAAuB,CAAC1xB,OAAO,CAAC;MACnE,OAAO6xB,YAAY;IACrB;IAEA,SAASC,iBAAiBA,CAAC9f,KAAK,EAAE+f,gBAAgB,EAAE;MAGlD91B,IAAI,CAACy1B,uBAAuB,EAAEK,gBAAgB,EAAE/f,KAAK,CAAC;MAGtD/V,IAAI,CAACw1B,uBAAuB,EAAEzf,KAAK,EAAEA,KAAK,CAAC;MAM3C/V,IAAI,CAACu1B,kBAAkB,EAAE,IAAI,EAAExf,KAAK,CAAC;MACrC,IAAIggB,eAAe,GAAGrI,kBAAkB,CAAC,CAAC;MAE1C5tB,GAAG,CAACy1B,kBAAkB,EAAExf,KAAK,CAAC;MAC9B/V,IAAI,CAACu1B,kBAAkB,EAAEQ,eAAe,EAAEhgB,KAAK,CAAC;IAClD;IAEA,SAASigB,gBAAgBA,CAACjgB,KAAK,EAAE;MAC/BjW,GAAG,CAACy1B,kBAAkB,EAAExf,KAAK,CAAC;MAC9BjW,GAAG,CAAC01B,uBAAuB,EAAEzf,KAAK,CAAC;MACnCjW,GAAG,CAAC21B,uBAAuB,EAAE1f,KAAK,CAAC;IACrC;IAEA,SAASkgB,cAAcA,CAAA,EAAG;MACxB,IAAIr+B,OAAO,GAAG89B,eAAe,CAACH,kBAAkB,CAACxxB,OAAO,CAAC;MACzD,OAAOnM,OAAO;IAChB;IAEA,SAASs+B,eAAeA,CAACngB,KAAK,EAAE;MAC9B,IAAIne,OAAO,GAAG89B,eAAe,CAACH,kBAAkB,CAACxxB,OAAO,CAAC;MACzD,IAAIoyB,WAAW,GAAGxI,mBAAmB,CAAC/1B,OAAO,EAAEme,KAAK,CAACja,IAAI,CAAC;MAE1D,IAAIlE,OAAO,KAAKu+B,WAAW,EAAE;QAG3Bn2B,IAAI,CAACw1B,uBAAuB,EAAEzf,KAAK,EAAEA,KAAK,CAAC;QAC3C/V,IAAI,CAACu1B,kBAAkB,EAAEY,WAAW,EAAEpgB,KAAK,CAAC;MAC9C;IACF;IAEA,SAASqgB,cAAcA,CAACrgB,KAAK,EAAE;MAC7B,IAAIyf,uBAAuB,CAACzxB,OAAO,KAAKgS,KAAK,EAAE;QAG7CjW,GAAG,CAACy1B,kBAAkB,EAAExf,KAAK,CAAC;QAC9BjW,GAAG,CAAC01B,uBAAuB,EAAEzf,KAAK,CAAC;MACrC;IACF;IAEA,IAAIsgB,WAAW,GAAG,KAAK;IAGvB,IAAIC,oBAAoB,GAAG,KAAK;IAEhC,IAAIC,eAAe,GAAG,IAAI;IAC1B,SAASC,kCAAkCA,CAAA,EAAG;MAC5C;QACE,OAAOF,oBAAoB;MAC7B;IACF;IAEA,SAASG,4BAA4BA,CAAC1gB,KAAK,EAAEiX,WAAW,EAAE;MACxD;QACE,MAAM,IAAI/3B,KAAK,CACb,8DAA8D,GAC5D,sEACJ,CAAC;MACH;IACF;IAEA,SAASyhC,gCAAgCA,CAAC3gB,KAAK,EAAE;MAC/C;QACE,MAAM,IAAI9gB,KAAK,CACb,kEAAkE,GAChE,sEACJ,CAAC;MACH;IACF;IAEA,SAAS0hC,oCAAoCA,CAAC5gB,KAAK,EAAE;MACnD;QACE,MAAM,IAAI9gB,KAAK,CACb,sEAAsE,GACpE,sEACJ,CAAC;MACH;IACF;IAEA,SAAS2hC,iBAAiBA,CAAC7gB,KAAK,EAAE;MAChC;QACE,OAAO,KAAK;MACd;IACF;IAEA,SAAS8gB,mCAAmCA,CAAA,EAAG;MAC7C,IAAIN,eAAe,KAAK,IAAI,EAAE;QAI5BO,sBAAsB,CAACP,eAAe,CAAC;QACvCA,eAAe,GAAG,IAAI;MACxB;IACF;IAEA,SAASQ,cAAcA,CAAA,EAAG;MACxB,OAAOV,WAAW;IACpB;IAEA,SAASW,mBAAmBA,CAAC/gC,KAAK,EAAE;MAClC,IAAIsgC,eAAe,KAAK,IAAI,EAAE;QAC5BA,eAAe,GAAG,CAACtgC,KAAK,CAAC;MAC3B,CAAC,MAAM;QACLsgC,eAAe,CAACv2B,IAAI,CAAC/J,KAAK,CAAC;MAC7B;IACF;IAMA,IAAIghC,gBAAgB,GAAG,EAAE;IACzB,IAAIC,qBAAqB,GAAG,CAAC;IAC7B,IAAIC,wBAAwB,GAAG/T,OAAO;IACtC,SAASgU,+BAA+BA,CAAA,EAAG;MACzC,IAAIC,QAAQ,GAAGH,qBAAqB;MACpCA,qBAAqB,GAAG,CAAC;MACzBC,wBAAwB,GAAG/T,OAAO;MAClC,IAAIlnB,CAAC,GAAG,CAAC;MAET,OAAOA,CAAC,GAAGm7B,QAAQ,EAAE;QACnB,IAAIthB,KAAK,GAAGkhB,gBAAgB,CAAC/6B,CAAC,CAAC;QAC/B+6B,gBAAgB,CAAC/6B,CAAC,EAAE,CAAC,GAAG,IAAI;QAC5B,IAAIo7B,KAAK,GAAGL,gBAAgB,CAAC/6B,CAAC,CAAC;QAC/B+6B,gBAAgB,CAAC/6B,CAAC,EAAE,CAAC,GAAG,IAAI;QAC5B,IAAIkuB,MAAM,GAAG6M,gBAAgB,CAAC/6B,CAAC,CAAC;QAChC+6B,gBAAgB,CAAC/6B,CAAC,EAAE,CAAC,GAAG,IAAI;QAC5B,IAAImrB,IAAI,GAAG4P,gBAAgB,CAAC/6B,CAAC,CAAC;QAC9B+6B,gBAAgB,CAAC/6B,CAAC,EAAE,CAAC,GAAG,IAAI;QAE5B,IAAIo7B,KAAK,KAAK,IAAI,IAAIlN,MAAM,KAAK,IAAI,EAAE;UACrC,IAAImN,OAAO,GAAGD,KAAK,CAACC,OAAO;UAE3B,IAAIA,OAAO,KAAK,IAAI,EAAE;YAEpBnN,MAAM,CAACpmB,IAAI,GAAGomB,MAAM;UACtB,CAAC,MAAM;YACLA,MAAM,CAACpmB,IAAI,GAAGuzB,OAAO,CAACvzB,IAAI;YAC1BuzB,OAAO,CAACvzB,IAAI,GAAGomB,MAAM;UACvB;UAEAkN,KAAK,CAACC,OAAO,GAAGnN,MAAM;QACxB;QAEA,IAAI/C,IAAI,KAAKhE,MAAM,EAAE;UACnBmU,6BAA6B,CAACzhB,KAAK,EAAEqU,MAAM,EAAE/C,IAAI,CAAC;QACpD;MACF;IACF;IACA,SAASoQ,2BAA2BA,CAAA,EAAG;MACrC,OAAON,wBAAwB;IACjC;IAEA,SAASO,eAAeA,CAAC3hB,KAAK,EAAEuhB,KAAK,EAAElN,MAAM,EAAE/C,IAAI,EAAE;MAGnD4P,gBAAgB,CAACC,qBAAqB,EAAE,CAAC,GAAGnhB,KAAK;MACjDkhB,gBAAgB,CAACC,qBAAqB,EAAE,CAAC,GAAGI,KAAK;MACjDL,gBAAgB,CAACC,qBAAqB,EAAE,CAAC,GAAG9M,MAAM;MAClD6M,gBAAgB,CAACC,qBAAqB,EAAE,CAAC,GAAG7P,IAAI;MAChD8P,wBAAwB,GAAGlO,UAAU,CAACkO,wBAAwB,EAAE9P,IAAI,CAAC;MAIrEtR,KAAK,CAACiQ,KAAK,GAAGiD,UAAU,CAAClT,KAAK,CAACiQ,KAAK,EAAEqB,IAAI,CAAC;MAC3C,IAAI9e,SAAS,GAAGwN,KAAK,CAACxN,SAAS;MAE/B,IAAIA,SAAS,KAAK,IAAI,EAAE;QACtBA,SAAS,CAACyd,KAAK,GAAGiD,UAAU,CAAC1gB,SAAS,CAACyd,KAAK,EAAEqB,IAAI,CAAC;MACrD;IACF;IAEA,SAASsQ,2BAA2BA,CAAC5hB,KAAK,EAAEuhB,KAAK,EAAElN,MAAM,EAAE/C,IAAI,EAAE;MAC/D,IAAIuQ,eAAe,GAAGN,KAAK;MAC3B,IAAIO,gBAAgB,GAAGzN,MAAM;MAC7BsN,eAAe,CAAC3hB,KAAK,EAAE6hB,eAAe,EAAEC,gBAAgB,EAAExQ,IAAI,CAAC;MAC/D,OAAOyQ,sBAAsB,CAAC/hB,KAAK,CAAC;IACtC;IACA,SAASgiB,4CAA4CA,CACnDhiB,KAAK,EACLuhB,KAAK,EACLlN,MAAM,EACN;MAIA,IAAI/C,IAAI,GAAGhE,MAAM;MACjB,IAAIuU,eAAe,GAAGN,KAAK;MAC3B,IAAIO,gBAAgB,GAAGzN,MAAM;MAC7BsN,eAAe,CAAC3hB,KAAK,EAAE6hB,eAAe,EAAEC,gBAAgB,EAAExQ,IAAI,CAAC;MAQ/D,IAAI2Q,uBAAuB,GAAGC,qBAAqB,CAAC,CAAC,KAAK,IAAI;MAE9D,IAAI,CAACD,uBAAuB,EAAE;QAC5BZ,+BAA+B,CAAC,CAAC;MACnC;IACF;IACA,SAASc,4BAA4BA,CAACniB,KAAK,EAAEuhB,KAAK,EAAElN,MAAM,EAAE/C,IAAI,EAAE;MAChE,IAAIuQ,eAAe,GAAGN,KAAK;MAC3B,IAAIO,gBAAgB,GAAGzN,MAAM;MAC7BsN,eAAe,CAAC3hB,KAAK,EAAE6hB,eAAe,EAAEC,gBAAgB,EAAExQ,IAAI,CAAC;MAC/D,OAAOyQ,sBAAsB,CAAC/hB,KAAK,CAAC;IACtC;IACA,SAASoiB,8BAA8BA,CAACpiB,KAAK,EAAEsR,IAAI,EAAE;MACnDqQ,eAAe,CAAC3hB,KAAK,EAAE,IAAI,EAAE,IAAI,EAAEsR,IAAI,CAAC;MACxC,OAAOyQ,sBAAsB,CAAC/hB,KAAK,CAAC;IACtC;IAGA,SAASqiB,oCAAoCA,CAACC,WAAW,EAAEhR,IAAI,EAAE;MAM/D,IAAIjG,IAAI,GAAG0W,sBAAsB,CAACO,WAAW,CAAC;MAC9Cb,6BAA6B,CAACa,WAAW,EAAE,IAAI,EAAEhR,IAAI,CAAC;MACtD,OAAOjG,IAAI;IACb;IAEA,SAASoW,6BAA6BA,CAACa,WAAW,EAAEjO,MAAM,EAAE/C,IAAI,EAAE;MAEhEgR,WAAW,CAACrS,KAAK,GAAGiD,UAAU,CAACoP,WAAW,CAACrS,KAAK,EAAEqB,IAAI,CAAC;MACvD,IAAI9e,SAAS,GAAG8vB,WAAW,CAAC9vB,SAAS;MAErC,IAAIA,SAAS,KAAK,IAAI,EAAE;QACtBA,SAAS,CAACyd,KAAK,GAAGiD,UAAU,CAAC1gB,SAAS,CAACyd,KAAK,EAAEqB,IAAI,CAAC;MACrD;MAEA,IAAIiR,QAAQ,GAAG,KAAK;MACpB,IAAI3e,MAAM,GAAG0e,WAAW,CAACxwB,MAAM;MAC/B,IAAI0Q,IAAI,GAAG8f,WAAW;MAEtB,OAAO1e,MAAM,KAAK,IAAI,EAAE;QACtBA,MAAM,CAAC4e,UAAU,GAAGtP,UAAU,CAACtP,MAAM,CAAC4e,UAAU,EAAElR,IAAI,CAAC;QACvD9e,SAAS,GAAGoR,MAAM,CAACpR,SAAS;QAE5B,IAAIA,SAAS,KAAK,IAAI,EAAE;UACtBA,SAAS,CAACgwB,UAAU,GAAGtP,UAAU,CAAC1gB,SAAS,CAACgwB,UAAU,EAAElR,IAAI,CAAC;QAC/D;QAEA,IAAI1N,MAAM,CAAC7R,GAAG,KAAKnC,kBAAkB,EAAE;UAkBrC,IAAI6yB,iBAAiB,GAAG7e,MAAM,CAAC7Q,SAAS;UAExC,IACE0vB,iBAAiB,KAAK,IAAI,IAC1B,EAAEA,iBAAiB,CAACC,WAAW,GAAGhE,gBAAgB,CAAC,EACnD;YACA6D,QAAQ,GAAG,IAAI;UACjB;QACF;QAEA/f,IAAI,GAAGoB,MAAM;QACbA,MAAM,GAAGA,MAAM,CAAC9R,MAAM;MACxB;MAEA,IAAIywB,QAAQ,IAAIlO,MAAM,KAAK,IAAI,IAAI7R,IAAI,CAACzQ,GAAG,KAAKrD,QAAQ,EAAE;QACxD,IAAI2c,IAAI,GAAG7I,IAAI,CAACzP,SAAS;QACzB2hB,gBAAgB,CAACrJ,IAAI,EAAEgJ,MAAM,EAAE/C,IAAI,CAAC;MACtC;IACF;IAEA,SAASyQ,sBAAsBA,CAACO,WAAW,EAAE;MAM3CK,iCAAiC,CAAC,CAAC;MAQnCC,4BAA4B,CAACN,WAAW,EAAEA,WAAW,CAAC;MACtD,IAAI9f,IAAI,GAAG8f,WAAW;MACtB,IAAI1e,MAAM,GAAGpB,IAAI,CAAC1Q,MAAM;MAExB,OAAO8R,MAAM,KAAK,IAAI,EAAE;QACtBgf,4BAA4B,CAACN,WAAW,EAAE9f,IAAI,CAAC;QAC/CA,IAAI,GAAGoB,MAAM;QACbA,MAAM,GAAGpB,IAAI,CAAC1Q,MAAM;MACtB;MAEA,OAAO0Q,IAAI,CAACzQ,GAAG,KAAKrD,QAAQ,GAAG8T,IAAI,CAACzP,SAAS,GAAG,IAAI;IACtD;IAEA,SAAS6vB,4BAA4BA,CAACN,WAAW,EAAE1e,MAAM,EAAE;MACzD;QACE,IAAIpR,SAAS,GAAGoR,MAAM,CAACpR,SAAS;QAEhC,IACEA,SAAS,KAAK,IAAI,IAClB,CAACoR,MAAM,CAACjB,KAAK,IAAIxC,SAAS,GAAGE,SAAS,CAAC,MAAMJ,SAAS,EACtD;UACA4iB,wCAAwC,CAACP,WAAW,CAAC;QACvD;MACF;IACF;IAEA,IAAIQ,sBAAsB,GAAGvjC,oBAAoB,CAACwjC,oBAAoB;IAItE,IAAIC,kBAAkB,GAAG,IAAI;IAC7B,IAAIC,iBAAiB,GAAG,IAAI;IAE5B,IAAIC,oBAAoB,GAAG,KAAK;IAIhC,IAAIC,wBAAwB,GAAG,KAAK;IAEpC,IAAIC,wBAAwB,GAAG,KAAK;IACpC,IAAIC,cAAc,GAAG,KAAK;IAC1B,IAAIC,0BAA0B,GAAGhW,MAAM;IACvC,SAASiW,qBAAqBA,CAAClY,IAAI,EAAE;MAQnC,IAAIA,IAAI,KAAK4X,iBAAiB,IAAI5X,IAAI,CAACpd,IAAI,KAAK,IAAI,EAAC,CAAC,KACjD;QACH,IAAIg1B,iBAAiB,KAAK,IAAI,EAAE;UAC9BD,kBAAkB,GAAGC,iBAAiB,GAAG5X,IAAI;QAC/C,CAAC,MAAM;UACL4X,iBAAiB,CAACh1B,IAAI,GAAGod,IAAI;UAC7B4X,iBAAiB,GAAG5X,IAAI;QAC1B;MACF;MAIA+X,wBAAwB,GAAG,IAAI;MAG/B,IAAIN,sBAAsB,CAAC90B,OAAO,KAAK,IAAI,EAAE;QAE3C,IAAI,CAACm1B,wBAAwB,EAAE;UAC7BA,wBAAwB,GAAG,IAAI;UAC/BK,qBAAqB,CAACC,8BAA8B,CAAC;QACvD;MACF,CAAC,MAAM;QACL,IAAI,CAACP,oBAAoB,EAAE;UACzBA,oBAAoB,GAAG,IAAI;UAC3BM,qBAAqB,CAACC,8BAA8B,CAAC;QACvD;MACF;MAEA;QAKEC,kCAAkC,CAACrY,IAAI,EAAE3C,KAAK,CAAC,CAAC,CAAC;MACnD;MAEA,IAAIoa,sBAAsB,CAACa,gBAAgB,IAAItY,IAAI,CAACtZ,GAAG,KAAKysB,UAAU,EAAE;QAEtEsE,sBAAsB,CAACc,uBAAuB,GAAG,IAAI;MACvD;IACF;IACA,SAASC,uBAAuBA,CAAA,EAAG;MAGjCC,6BAA6B,CAAC,KAAK,CAAC;IACtC;IACA,SAASC,8BAA8BA,CAAA,EAAG;MAGxCD,6BAA6B,CAAC,IAAI,CAAC;IACrC;IAEA,SAASA,6BAA6BA,CAACE,UAAU,EAAE;MACjD,IAAIX,cAAc,EAAE;QAIlB;MACF;MAEA,IAAI,CAACD,wBAAwB,EAAE;QAE7B;MACF;MAEA,IAAIa,kBAAkB;MACtB,IAAIC,MAAM,GAAG,IAAI;MACjBb,cAAc,GAAG,IAAI;MAErB,GAAG;QACDY,kBAAkB,GAAG,KAAK;QAC1B,IAAI5Y,IAAI,GAAG2X,kBAAkB;QAE7B,OAAO3X,IAAI,KAAK,IAAI,EAAE;UACpB,IAAI2Y,UAAU,IAAI3Y,IAAI,CAACtZ,GAAG,KAAKysB,UAAU,EAAC,CAAC,KACtC;YACH,IAAI2F,kBAAkB,GAAGjC,qBAAqB,CAAC,CAAC;YAChD,IAAIkC,6BAA6B,GAC/BC,gCAAgC,CAAC,CAAC;YACpC,IAAI9T,SAAS,GAAGH,YAAY,CAC1B/E,IAAI,EACJA,IAAI,KAAK8Y,kBAAkB,GACvBC,6BAA6B,GAC7B/W,OACN,CAAC;YAED,IAAI4E,gBAAgB,CAAC1B,SAAS,CAAC,EAAE;cAE/B,IAAI;gBACF0T,kBAAkB,GAAG,IAAI;gBACzBK,qBAAqB,CAACjZ,IAAI,EAAEkF,SAAS,CAAC;cACxC,CAAC,CAAC,OAAOrwB,KAAK,EAAE;gBAEd,IAAIgkC,MAAM,KAAK,IAAI,EAAE;kBACnBA,MAAM,GAAG,CAAChkC,KAAK,CAAC;gBAClB,CAAC,MAAM;kBACLgkC,MAAM,CAACj6B,IAAI,CAAC/J,KAAK,CAAC;gBACpB;cACF;YACF;UACF;UAEAmrB,IAAI,GAAGA,IAAI,CAACpd,IAAI;QAClB;MACF,CAAC,QAAQg2B,kBAAkB;MAE3BZ,cAAc,GAAG,KAAK;MAItB,IAAIa,MAAM,KAAK,IAAI,EAAE;QACnB,IAAIA,MAAM,CAACrkC,MAAM,GAAG,CAAC,EAAE;UACrB,IAAI,OAAO0kC,cAAc,KAAK,UAAU,EAAE;YAExC,MAAM,IAAIA,cAAc,CAACL,MAAM,CAAC;UAClC,CAAC,MAAM;YACL,KAAK,IAAI/9B,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAG+9B,MAAM,CAACrkC,MAAM,EAAEsG,CAAC,EAAE,EAAE;cACtCq9B,qBAAqB,CAACgB,UAAU,CAAC7I,IAAI,CAAC,IAAI,EAAEuI,MAAM,CAAC/9B,CAAC,CAAC,CAAC,CAAC;YACzD;YAEA,IAAIs+B,UAAU,GAAGP,MAAM,CAAC,CAAC,CAAC;YAC1B,MAAMO,UAAU;UAClB;QACF,CAAC,MAAM;UACL,IAAIvkC,KAAK,GAAGgkC,MAAM,CAAC,CAAC,CAAC;UACrB,MAAMhkC,KAAK;QACb;MACF;IACF;IAEA,SAASskC,UAAUA,CAACtkC,KAAK,EAAE;MACzB,MAAMA,KAAK;IACb;IAEA,SAASujC,8BAA8BA,CAAA,EAAG;MAGxCP,oBAAoB,GAAG,KAAK;MAE5B;QACEC,wBAAwB,GAAG,KAAK;MAClC;MAEAC,wBAAwB,GAAG,KAAK;MAChC,IAAI5R,WAAW,GAAG9I,KAAK,CAAC,CAAC;MACzB,IAAIgc,IAAI,GAAG,IAAI;MACf,IAAIrZ,IAAI,GAAG2X,kBAAkB;MAE7B,OAAO3X,IAAI,KAAK,IAAI,EAAE;QACpB,IAAIpd,IAAI,GAAGod,IAAI,CAACpd,IAAI;QAEpB,IACEq1B,0BAA0B,KAAKhW,MAAM,IACrCiL,4BAA4B,CAAC,CAAC,EAC9B;UAIA9D,wBAAwB,CAACpJ,IAAI,EAAEiY,0BAA0B,CAAC;QAC5D;QAEA,IAAI/S,SAAS,GAAGmT,kCAAkC,CAACrY,IAAI,EAAEmG,WAAW,CAAC;QAErE,IAAIjB,SAAS,KAAKjD,MAAM,EAAE;UAMxBjC,IAAI,CAACpd,IAAI,GAAG,IAAI;UAEhB,IAAIy2B,IAAI,KAAK,IAAI,EAAE;YAEjB1B,kBAAkB,GAAG/0B,IAAI;UAC3B,CAAC,MAAM;YACLy2B,IAAI,CAACz2B,IAAI,GAAGA,IAAI;UAClB;UAEA,IAAIA,IAAI,KAAK,IAAI,EAAE;YAEjBg1B,iBAAiB,GAAGyB,IAAI;UAC1B;QACF,CAAC,MAAM;UAELA,IAAI,GAAGrZ,IAAI;UAEX,IAAI4G,gBAAgB,CAAC1B,SAAS,CAAC,EAAE;YAC/B6S,wBAAwB,GAAG,IAAI;UACjC;QACF;QAEA/X,IAAI,GAAGpd,IAAI;MACb;MAEAq1B,0BAA0B,GAAGhW,MAAM;MAGnCuW,uBAAuB,CAAC,CAAC;IAC3B;IAEA,SAASH,kCAAkCA,CAACrY,IAAI,EAAEmG,WAAW,EAAE;MAY7DC,yBAAyB,CAACpG,IAAI,EAAEmG,WAAW,CAAC;MAE5C,IAAI2S,kBAAkB,GAAGjC,qBAAqB,CAAC,CAAC;MAChD,IAAIkC,6BAA6B,GAAGC,gCAAgC,CAAC,CAAC;MACtE,IAAI9T,SAAS,GAAGH,YAAY,CAC1B/E,IAAI,EACJA,IAAI,KAAK8Y,kBAAkB,GAAGC,6BAA6B,GAAG/W,OAChE,CAAC;MACD,IAAIsX,oBAAoB,GAAGtZ,IAAI,CAACuZ,YAAY;MAE5C,IAEErU,SAAS,KAAKlD,OAAO,IAKpBhC,IAAI,KAAK8Y,kBAAkB,IAAIU,yBAAyB,CAAC,CAAE,IAC5DxZ,IAAI,CAACyZ,mBAAmB,KAAK,IAAI,EACjC;QAEA,IAAIH,oBAAoB,KAAK,IAAI,EAAE;UACjCI,cAAc,CAACJ,oBAAoB,CAAC;QACtC;QAEAtZ,IAAI,CAACuZ,YAAY,GAAG,IAAI;QACxBvZ,IAAI,CAAC2Z,gBAAgB,GAAG1X,MAAM;QAC9B,OAAOA,MAAM;MACf;MAEA,IAAI2E,gBAAgB,CAAC1B,SAAS,CAAC,EAAE;QAG/B,IAAIoU,oBAAoB,KAAK,IAAI,EAAE;UACjCI,cAAc,CAACJ,oBAAoB,CAAC;QACtC;QAEAtZ,IAAI,CAAC2Z,gBAAgB,GAAGxX,QAAQ;QAChCnC,IAAI,CAACuZ,YAAY,GAAG,IAAI;QACxB,OAAOpX,QAAQ;MACjB,CAAC,MAAM;QAEL,IAAIyX,wBAAwB,GAAG5Z,IAAI,CAAC2Z,gBAAgB;QACpD,IAAIE,mBAAmB,GAAG/U,sBAAsB,CAACI,SAAS,CAAC;QAE3D,IACE2U,mBAAmB,KAAKD,wBAAwB,IAGhD,EACEnC,sBAAsB,CAAC90B,OAAO,KAAK,IAAI,IACvC22B,oBAAoB,KAAKQ,qBAAqB,CAC/C,EACD;UAEA,OAAOD,mBAAmB;QAC5B,CAAC,MAAM;UAELH,cAAc,CAACJ,oBAAoB,CAAC;QACtC;QAEA,IAAIS,sBAAsB;QAE1B,QAAQtP,oBAAoB,CAACvF,SAAS,CAAC;UACrC,KAAK3E,qBAAqB;YACxBwZ,sBAAsB,GAAGxc,iBAAiB;YAC1C;UAEF,KAAKiD,uBAAuB;YAC1BuZ,sBAAsB,GAAGtc,oBAAoB;YAC7C;UAEF,KAAKgD,oBAAoB;YACvBsZ,sBAAsB,GAAGpc,cAAc;YACvC;UAEF,KAAK+C,iBAAiB;YACpBqZ,sBAAsB,GAAGlc,YAAY;YACrC;UAEF;YACEkc,sBAAsB,GAAGpc,cAAc;YACvC;QACJ;QAEA,IAAIqc,eAAe,GAAGC,kBAAkB,CACtCF,sBAAsB,EACtBG,2BAA2B,CAAC5J,IAAI,CAAC,IAAI,EAAEtQ,IAAI,CAC7C,CAAC;QACDA,IAAI,CAAC2Z,gBAAgB,GAAGE,mBAAmB;QAC3C7Z,IAAI,CAACuZ,YAAY,GAAGS,eAAe;QACnC,OAAOH,mBAAmB;MAC5B;IACF;IAEA,SAASM,sBAAsBA,CAACna,IAAI,EAAEoa,oBAAoB,EAAE;MAS1D/B,kCAAkC,CAACrY,IAAI,EAAE3C,KAAK,CAAC,CAAC,CAAC;MAEjD,IAAI2C,IAAI,CAACuZ,YAAY,KAAKa,oBAAoB,EAAE;QAG9C,OAAOF,2BAA2B,CAAC5J,IAAI,CAAC,IAAI,EAAEtQ,IAAI,CAAC;MACrD;MAEA,OAAO,IAAI;IACb;IACA,IAAI8Z,qBAAqB,GAAG,CAAC,CAAC;IAE9B,SAASG,kBAAkBA,CAACI,aAAa,EAAEl4B,QAAQ,EAAE;MACnD,IAAIs1B,sBAAsB,CAAC90B,OAAO,KAAK,IAAI,EAAE;QAI3C80B,sBAAsB,CAAC90B,OAAO,CAAC/D,IAAI,CAACuD,QAAQ,CAAC;QAC7C,OAAO23B,qBAAqB;MAC9B,CAAC,MAAM;QACL,OAAOjd,kBAAkB,CAACwd,aAAa,EAAEl4B,QAAQ,CAAC;MACpD;IACF;IAEA,SAASu3B,cAAcA,CAACH,YAAY,EAAE;MACpC,IAAIA,YAAY,KAAKO,qBAAqB,EAAC,CAAC,KACvC,IAAIP,YAAY,KAAK,IAAI,EAAE;QAC9Bxc,gBAAgB,CAACwc,YAAY,CAAC;MAChC;IACF;IAEA,SAASpB,qBAAqBA,CAACn1B,EAAE,EAAE;MACjC,IAAIy0B,sBAAsB,CAAC90B,OAAO,KAAK,IAAI,EAAE;QAM3C80B,sBAAsB,CAAC90B,OAAO,CAAC/D,IAAI,CAAC,YAAY;UAC9CoE,EAAE,CAAC,CAAC;UACJ,OAAO,IAAI;QACb,CAAC,CAAC;MACJ;MAGA;QAEE6Z,kBAAkB,CAACU,iBAAiB,EAAEva,EAAE,CAAC;MAC3C;IACF;IAEA,SAASs3B,qBAAqBA,CAG5BC,UAAU,EACV;MAQA,IAAItC,0BAA0B,KAAKhW,MAAM,EAAE;QAEzCgW,0BAA0B,GAAG3Q,uBAAuB,CAAC,CAAC;MACxD;MAEA,OAAO2Q,0BAA0B;IACnC;IAEA,IAAIuC,oBAAoB,GAAGvY,MAAM;IAIjC,IAAIwY,8BAA8B,GAAG,IAAI;IAEzC,SAASC,kBAAkBA,CAACC,QAAQ,EAAEx8B,MAAM,EAAE;MAO5C,IAAIy8B,SAAS,GAAG,EAAE;MAClB,IAAIC,oBAAoB,GAAG;QACzBC,MAAM,EAAE,SAAS;QACjB9pB,KAAK,EAAE,IAAI;QACX+pB,MAAM,EAAE,IAAI;QACZC,IAAI,EAAE,SAAAA,CAAUC,OAAO,EAAE;UACvBL,SAAS,CAACh8B,IAAI,CAACq8B,OAAO,CAAC;QACzB;MACF,CAAC;MACDN,QAAQ,CAACK,IAAI,CACX,UAAUhqB,KAAK,EAAE;QACf,IAAIkqB,iBAAiB,GAAGL,oBAAoB;QAC5CK,iBAAiB,CAACJ,MAAM,GAAG,WAAW;QACtCI,iBAAiB,CAAClqB,KAAK,GAAG7S,MAAM;QAEhC,KAAK,IAAIrD,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAG8/B,SAAS,CAACpmC,MAAM,EAAEsG,CAAC,EAAE,EAAE;UACzC,IAAIN,QAAQ,GAAGogC,SAAS,CAAC9/B,CAAC,CAAC;UAC3BN,QAAQ,CAAC2D,MAAM,CAAC;QAClB;MACF,CAAC,EACD,UAAUtJ,KAAK,EAAE;QACf,IAAIsmC,gBAAgB,GAAGN,oBAAoB;QAC3CM,gBAAgB,CAACL,MAAM,GAAG,UAAU;QACpCK,gBAAgB,CAACJ,MAAM,GAAGlmC,KAAK;QAE/B,KAAK,IAAIiG,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAG8/B,SAAS,CAACpmC,MAAM,EAAEsG,CAAC,EAAE,EAAE;UACzC,IAAIN,QAAQ,GAAGogC,SAAS,CAAC9/B,CAAC,CAAC;UAM3BN,QAAQ,CAACI,SAAS,CAAC;QACrB;MACF,CACF,CAAC;MACD,OAAOigC,oBAAoB;IAC7B;IACA,SAASO,uBAAuBA,CAAA,EAAG;MACjC,OAAOZ,oBAAoB;IAC7B;IACA,SAASa,2BAA2BA,CAAA,EAAG;MACrC,OAAOZ,8BAA8B;IACvC;IAEA,IAAIa,WAAW,GAAG,CAAC;IACnB,IAAIC,YAAY,GAAG,CAAC;IACpB,IAAIC,WAAW,GAAG,CAAC;IACnB,IAAIC,aAAa,GAAG,CAAC;IAIrB,IAAIC,cAAc,GAAG,KAAK;IAC1B,IAAIC,yBAAyB;IAC7B,IAAIC,wBAAwB;IAE5B;MACED,yBAAyB,GAAG,KAAK;MACjCC,wBAAwB,GAAG,IAAI;IACjC;IAEA,SAASC,qBAAqBA,CAAClnB,KAAK,EAAE;MACpC,IAAIuhB,KAAK,GAAG;QACV4F,SAAS,EAAEnnB,KAAK,CAACsf,aAAa;QAC9B8H,eAAe,EAAE,IAAI;QACrBC,cAAc,EAAE,IAAI;QACpBC,MAAM,EAAE;UACN9F,OAAO,EAAE,IAAI;UACbvR,KAAK,EAAE5C,OAAO;UACdka,eAAe,EAAE;QACnB,CAAC;QACDC,SAAS,EAAE;MACb,CAAC;MACDxnB,KAAK,CAACynB,WAAW,GAAGlG,KAAK;IAC3B;IACA,SAASmG,gBAAgBA,CAAC15B,OAAO,EAAE4uB,cAAc,EAAE;MAEjD,IAAI2E,KAAK,GAAG3E,cAAc,CAAC6K,WAAW;MACtC,IAAIE,YAAY,GAAG35B,OAAO,CAACy5B,WAAW;MAEtC,IAAIlG,KAAK,KAAKoG,YAAY,EAAE;QAC1B,IAAIC,KAAK,GAAG;UACVT,SAAS,EAAEQ,YAAY,CAACR,SAAS;UACjCC,eAAe,EAAEO,YAAY,CAACP,eAAe;UAC7CC,cAAc,EAAEM,YAAY,CAACN,cAAc;UAC3CC,MAAM,EAAEK,YAAY,CAACL,MAAM;UAC3BE,SAAS,EAAE;QACb,CAAC;QACD5K,cAAc,CAAC6K,WAAW,GAAGG,KAAK;MACpC;IACF;IACA,SAASC,YAAYA,CAACvW,IAAI,EAAE;MAC1B,IAAI+C,MAAM,GAAG;QACX/C,IAAI,EAAEA,IAAI;QACVvf,GAAG,EAAE40B,WAAW;QAChBnnB,OAAO,EAAE,IAAI;QACbhS,QAAQ,EAAE,IAAI;QACdS,IAAI,EAAE;MACR,CAAC;MACD,OAAOomB,MAAM;IACf;IACA,SAASyT,aAAaA,CAAC9nB,KAAK,EAAEqU,MAAM,EAAE/C,IAAI,EAAE;MAC1C,IAAImW,WAAW,GAAGznB,KAAK,CAACynB,WAAW;MAEnC,IAAIA,WAAW,KAAK,IAAI,EAAE;QAExB,OAAO,IAAI;MACb;MAEA,IAAIM,WAAW,GAAGN,WAAW,CAACH,MAAM;MAEpC;QACE,IACEL,wBAAwB,KAAKc,WAAW,IACxC,CAACf,yBAAyB,EAC1B;UACA,IAAItL,aAAa,GAAG3b,yBAAyB,CAACC,KAAK,CAAC;UAEpD9f,KAAK,CACH,mEAAmE,GACjE,mEAAmE,GACnE,iEAAiE,GACjE,wDAAwD,EAC1Dw7B,aACF,CAAC;UAEDsL,yBAAyB,GAAG,IAAI;QAClC;MACF;MAEA,IAAIgB,8BAA8B,CAAC,CAAC,EAAE;QAGpC,IAAIxG,OAAO,GAAGuG,WAAW,CAACvG,OAAO;QAEjC,IAAIA,OAAO,KAAK,IAAI,EAAE;UAEpBnN,MAAM,CAACpmB,IAAI,GAAGomB,MAAM;QACtB,CAAC,MAAM;UACLA,MAAM,CAACpmB,IAAI,GAAGuzB,OAAO,CAACvzB,IAAI;UAC1BuzB,OAAO,CAACvzB,IAAI,GAAGomB,MAAM;QACvB;QAEA0T,WAAW,CAACvG,OAAO,GAAGnN,MAAM;QAK5B,OAAOgO,oCAAoC,CAACriB,KAAK,EAAEsR,IAAI,CAAC;MAC1D,CAAC,MAAM;QACL,OAAO6Q,4BAA4B,CAACniB,KAAK,EAAE+nB,WAAW,EAAE1T,MAAM,EAAE/C,IAAI,CAAC;MACvE;IACF;IACA,SAAS2W,mBAAmBA,CAAC5c,IAAI,EAAErL,KAAK,EAAEsR,IAAI,EAAE;MAC9C,IAAImW,WAAW,GAAGznB,KAAK,CAACynB,WAAW;MAEnC,IAAIA,WAAW,KAAK,IAAI,EAAE;QAExB;MACF;MAEA,IAAIM,WAAW,GAAGN,WAAW,CAACH,MAAM;MAEpC,IAAI5U,gBAAgB,CAACpB,IAAI,CAAC,EAAE;QAC1B,IAAI4W,UAAU,GAAGH,WAAW,CAAC9X,KAAK;QAMlCiY,UAAU,GAAG9U,cAAc,CAAC8U,UAAU,EAAE7c,IAAI,CAACiF,YAAY,CAAC;QAE1D,IAAI6X,aAAa,GAAGjV,UAAU,CAACgV,UAAU,EAAE5W,IAAI,CAAC;QAChDyW,WAAW,CAAC9X,KAAK,GAAGkY,aAAa;QAIjC5T,iBAAiB,CAAClJ,IAAI,EAAE8c,aAAa,CAAC;MACxC;IACF;IACA,SAASC,qBAAqBA,CAACxL,cAAc,EAAEyL,cAAc,EAAE;MAI7D,IAAI9G,KAAK,GAAG3E,cAAc,CAAC6K,WAAW;MAEtC,IAAIz5B,OAAO,GAAG4uB,cAAc,CAACpqB,SAAS;MAEtC,IAAIxE,OAAO,KAAK,IAAI,EAAE;QACpB,IAAI25B,YAAY,GAAG35B,OAAO,CAACy5B,WAAW;QAEtC,IAAIlG,KAAK,KAAKoG,YAAY,EAAE;UAO1B,IAAIW,QAAQ,GAAG,IAAI;UACnB,IAAIC,OAAO,GAAG,IAAI;UAClB,IAAInB,eAAe,GAAG7F,KAAK,CAAC6F,eAAe;UAE3C,IAAIA,eAAe,KAAK,IAAI,EAAE;YAE5B,IAAI/S,MAAM,GAAG+S,eAAe;YAE5B,GAAG;cACD,IAAIQ,KAAK,GAAG;gBACVtW,IAAI,EAAE+C,MAAM,CAAC/C,IAAI;gBACjBvf,GAAG,EAAEsiB,MAAM,CAACtiB,GAAG;gBACfyN,OAAO,EAAE6U,MAAM,CAAC7U,OAAO;gBAGvBhS,QAAQ,EAAE,IAAI;gBACdS,IAAI,EAAE;cACR,CAAC;cAED,IAAIs6B,OAAO,KAAK,IAAI,EAAE;gBACpBD,QAAQ,GAAGC,OAAO,GAAGX,KAAK;cAC5B,CAAC,MAAM;gBACLW,OAAO,CAACt6B,IAAI,GAAG25B,KAAK;gBACpBW,OAAO,GAAGX,KAAK;cACjB;cAEAvT,MAAM,GAAGA,MAAM,CAACpmB,IAAI;YACtB,CAAC,QAAQomB,MAAM,KAAK,IAAI;YAExB,IAAIkU,OAAO,KAAK,IAAI,EAAE;cACpBD,QAAQ,GAAGC,OAAO,GAAGF,cAAc;YACrC,CAAC,MAAM;cACLE,OAAO,CAACt6B,IAAI,GAAGo6B,cAAc;cAC7BE,OAAO,GAAGF,cAAc;YAC1B;UACF,CAAC,MAAM;YAELC,QAAQ,GAAGC,OAAO,GAAGF,cAAc;UACrC;UAEA9G,KAAK,GAAG;YACN4F,SAAS,EAAEQ,YAAY,CAACR,SAAS;YACjCC,eAAe,EAAEkB,QAAQ;YACzBjB,cAAc,EAAEkB,OAAO;YACvBjB,MAAM,EAAEK,YAAY,CAACL,MAAM;YAC3BE,SAAS,EAAEG,YAAY,CAACH;UAC1B,CAAC;UACD5K,cAAc,CAAC6K,WAAW,GAAGlG,KAAK;UAClC;QACF;MACF;MAEA,IAAI8F,cAAc,GAAG9F,KAAK,CAAC8F,cAAc;MAEzC,IAAIA,cAAc,KAAK,IAAI,EAAE;QAC3B9F,KAAK,CAAC6F,eAAe,GAAGiB,cAAc;MACxC,CAAC,MAAM;QACLhB,cAAc,CAACp5B,IAAI,GAAGo6B,cAAc;MACtC;MAEA9G,KAAK,CAAC8F,cAAc,GAAGgB,cAAc;IACvC;IAEA,SAASG,kBAAkBA,CACzB5L,cAAc,EACd2E,KAAK,EACLlN,MAAM,EACNoU,SAAS,EACTviB,SAAS,EACTpc,QAAQ,EACR;MACA,QAAQuqB,MAAM,CAACtiB,GAAG;QAChB,KAAK60B,YAAY;UAAE;YACjB,IAAIpnB,OAAO,GAAG6U,MAAM,CAAC7U,OAAO;YAE5B,IAAI,OAAOA,OAAO,KAAK,UAAU,EAAE;cAEjC;gBACEkpB,+BAA+B,CAAC,CAAC;cACnC;cAEA,IAAIC,SAAS,GAAGnpB,OAAO,CAACte,IAAI,CAAC4I,QAAQ,EAAE2+B,SAAS,EAAEviB,SAAS,CAAC;cAE5D;gBACE,IAAI0W,cAAc,CAACoC,IAAI,GAAGpS,gBAAgB,EAAE;kBAC1CR,0BAA0B,CAAC,IAAI,CAAC;kBAEhC,IAAI;oBACF5M,OAAO,CAACte,IAAI,CAAC4I,QAAQ,EAAE2+B,SAAS,EAAEviB,SAAS,CAAC;kBAC9C,CAAC,SAAS;oBACRkG,0BAA0B,CAAC,KAAK,CAAC;kBACnC;gBACF;gBAEAwc,8BAA8B,CAAC,CAAC;cAClC;cAEA,OAAOD,SAAS;YAClB;YAEA,OAAOnpB,OAAO;UAChB;QAEA,KAAKsnB,aAAa;UAAE;YAClBlK,cAAc,CAACja,KAAK,GACjBia,cAAc,CAACja,KAAK,GAAG,CAACrB,aAAa,GAAIlB,UAAU;UACxD;QAGA,KAAKumB,WAAW;UAAE;YAChB,IAAIlnB,QAAQ,GAAG4U,MAAM,CAAC7U,OAAO;YAC7B,IAAIqpB,YAAY;YAEhB,IAAI,OAAOppB,QAAQ,KAAK,UAAU,EAAE;cAElC;gBACEipB,+BAA+B,CAAC,CAAC;cACnC;cAEAG,YAAY,GAAGppB,QAAQ,CAACve,IAAI,CAAC4I,QAAQ,EAAE2+B,SAAS,EAAEviB,SAAS,CAAC;cAE5D;gBACE,IAAI0W,cAAc,CAACoC,IAAI,GAAGpS,gBAAgB,EAAE;kBAC1CR,0BAA0B,CAAC,IAAI,CAAC;kBAEhC,IAAI;oBACF3M,QAAQ,CAACve,IAAI,CAAC4I,QAAQ,EAAE2+B,SAAS,EAAEviB,SAAS,CAAC;kBAC/C,CAAC,SAAS;oBACRkG,0BAA0B,CAAC,KAAK,CAAC;kBACnC;gBACF;gBAEAwc,8BAA8B,CAAC,CAAC;cAClC;YACF,CAAC,MAAM;cAELC,YAAY,GAAGppB,QAAQ;YACzB;YAEA,IAAIopB,YAAY,KAAK,IAAI,IAAIA,YAAY,KAAK5iC,SAAS,EAAE;cAEvD,OAAOwiC,SAAS;YAClB;YAEA,OAAO5hC,MAAM,CAAC,CAAC,CAAC,EAAE4hC,SAAS,EAAEI,YAAY,CAAC;UAC5C;QAEA,KAAKhC,WAAW;UAAE;YAChBE,cAAc,GAAG,IAAI;YACrB,OAAO0B,SAAS;UAClB;MACF;MAEA,OAAOA,SAAS;IAClB;IAEA,IAAIK,+BAA+B,GAAG,KAAK;IAK3C,SAASC,2CAA2CA,CAAA,EAAG;MAOrD,IAAID,+BAA+B,EAAE;QACnC,IAAIE,uBAAuB,GAAGtC,2BAA2B,CAAC,CAAC;QAE3D,IAAIsC,uBAAuB,KAAK,IAAI,EAAE;UAIpC,MAAMA,uBAAuB;QAC/B;MACF;IACF;IACA,SAASC,kBAAkBA,CAACrM,cAAc,EAAE5pB,KAAK,EAAElJ,QAAQ,EAAEmnB,WAAW,EAAE;MACxE6X,+BAA+B,GAAG,KAAK;MAEvC,IAAIvH,KAAK,GAAG3E,cAAc,CAAC6K,WAAW;MACtCV,cAAc,GAAG,KAAK;MAEtB;QACEE,wBAAwB,GAAG1F,KAAK,CAAC+F,MAAM;MACzC;MAEA,IAAIF,eAAe,GAAG7F,KAAK,CAAC6F,eAAe;MAC3C,IAAIC,cAAc,GAAG9F,KAAK,CAAC8F,cAAc;MAEzC,IAAI6B,YAAY,GAAG3H,KAAK,CAAC+F,MAAM,CAAC9F,OAAO;MAEvC,IAAI0H,YAAY,KAAK,IAAI,EAAE;QACzB3H,KAAK,CAAC+F,MAAM,CAAC9F,OAAO,GAAG,IAAI;QAG3B,IAAI2H,iBAAiB,GAAGD,YAAY;QACpC,IAAIE,kBAAkB,GAAGD,iBAAiB,CAACl7B,IAAI;QAC/Ck7B,iBAAiB,CAACl7B,IAAI,GAAG,IAAI;QAE7B,IAAIo5B,cAAc,KAAK,IAAI,EAAE;UAC3BD,eAAe,GAAGgC,kBAAkB;QACtC,CAAC,MAAM;UACL/B,cAAc,CAACp5B,IAAI,GAAGm7B,kBAAkB;QAC1C;QAEA/B,cAAc,GAAG8B,iBAAiB;QAMlC,IAAIn7B,OAAO,GAAG4uB,cAAc,CAACpqB,SAAS;QAEtC,IAAIxE,OAAO,KAAK,IAAI,EAAE;UAEpB,IAAI25B,YAAY,GAAG35B,OAAO,CAACy5B,WAAW;UACtC,IAAI4B,qBAAqB,GAAG1B,YAAY,CAACN,cAAc;UAEvD,IAAIgC,qBAAqB,KAAKhC,cAAc,EAAE;YAC5C,IAAIgC,qBAAqB,KAAK,IAAI,EAAE;cAClC1B,YAAY,CAACP,eAAe,GAAGgC,kBAAkB;YACnD,CAAC,MAAM;cACLC,qBAAqB,CAACp7B,IAAI,GAAGm7B,kBAAkB;YACjD;YAEAzB,YAAY,CAACN,cAAc,GAAG8B,iBAAiB;UACjD;QACF;MACF;MAEA,IAAI/B,eAAe,KAAK,IAAI,EAAE;QAE5B,IAAIkC,QAAQ,GAAG/H,KAAK,CAAC4F,SAAS;QAG9B,IAAIoC,QAAQ,GAAGlc,OAAO;QACtB,IAAImc,YAAY,GAAG,IAAI;QACvB,IAAIC,kBAAkB,GAAG,IAAI;QAC7B,IAAIC,iBAAiB,GAAG,IAAI;QAC5B,IAAIrV,MAAM,GAAG+S,eAAe;QAE5B,GAAG;UAID,IAAI1T,UAAU,GAAGP,WAAW,CAACkB,MAAM,CAAC/C,IAAI,EAAE5B,aAAa,CAAC;UACxD,IAAIia,cAAc,GAAGjW,UAAU,KAAKW,MAAM,CAAC/C,IAAI;UAI/C,IAAIsY,gBAAgB,GAAGD,cAAc,GACjC,CAAC3W,eAAe,CAACqR,gCAAgC,CAAC,CAAC,EAAE3Q,UAAU,CAAC,GAChE,CAACV,eAAe,CAAC/B,WAAW,EAAEyC,UAAU,CAAC;UAE7C,IAAIkW,gBAAgB,EAAE;YAIpB,IAAIhC,KAAK,GAAG;cACVtW,IAAI,EAAEoC,UAAU;cAChB3hB,GAAG,EAAEsiB,MAAM,CAACtiB,GAAG;cACfyN,OAAO,EAAE6U,MAAM,CAAC7U,OAAO;cACvBhS,QAAQ,EAAE6mB,MAAM,CAAC7mB,QAAQ;cACzBS,IAAI,EAAE;YACR,CAAC;YAED,IAAIy7B,iBAAiB,KAAK,IAAI,EAAE;cAC9BD,kBAAkB,GAAGC,iBAAiB,GAAG9B,KAAK;cAC9C4B,YAAY,GAAGF,QAAQ;YACzB,CAAC,MAAM;cACLI,iBAAiB,GAAGA,iBAAiB,CAACz7B,IAAI,GAAG25B,KAAK;YACpD;YAEA2B,QAAQ,GAAGrW,UAAU,CAACqW,QAAQ,EAAE7V,UAAU,CAAC;UAC7C,CAAC,MAAM;YAKL,IACEA,UAAU,KAAKpG,MAAM,IACrBoG,UAAU,KAAK+S,uBAAuB,CAAC,CAAC,EACxC;cACAqC,+BAA+B,GAAG,IAAI;YACxC;YAEA,IAAIY,iBAAiB,KAAK,IAAI,EAAE;cAC9B,IAAIG,MAAM,GAAG;gBAIXvY,IAAI,EAAEhE,MAAM;gBACZvb,GAAG,EAAEsiB,MAAM,CAACtiB,GAAG;gBACfyN,OAAO,EAAE6U,MAAM,CAAC7U,OAAO;gBAGvBhS,QAAQ,EAAE,IAAI;gBACdS,IAAI,EAAE;cACR,CAAC;cACDy7B,iBAAiB,GAAGA,iBAAiB,CAACz7B,IAAI,GAAG47B,MAAM;YACrD;YAEAP,QAAQ,GAAGd,kBAAkB,CAC3B5L,cAAc,EACd2E,KAAK,EACLlN,MAAM,EACNiV,QAAQ,EACRt2B,KAAK,EACLlJ,QACF,CAAC;YACD,IAAI0D,QAAQ,GAAG6mB,MAAM,CAAC7mB,QAAQ;YAE9B,IAAIA,QAAQ,KAAK,IAAI,EAAE;cACrBovB,cAAc,CAACja,KAAK,IAAIlC,QAAQ;cAEhC,IAAIkpB,cAAc,EAAE;gBAClB/M,cAAc,CAACja,KAAK,IAAI7B,UAAU;cACpC;cAEA,IAAI0mB,SAAS,GAAGjG,KAAK,CAACiG,SAAS;cAE/B,IAAIA,SAAS,KAAK,IAAI,EAAE;gBACtBjG,KAAK,CAACiG,SAAS,GAAG,CAACh6B,QAAQ,CAAC;cAC9B,CAAC,MAAM;gBACLg6B,SAAS,CAACv9B,IAAI,CAACuD,QAAQ,CAAC;cAC1B;YACF;UACF;UAEA6mB,MAAM,GAAGA,MAAM,CAACpmB,IAAI;UAEpB,IAAIomB,MAAM,KAAK,IAAI,EAAE;YACnB6U,YAAY,GAAG3H,KAAK,CAAC+F,MAAM,CAAC9F,OAAO;YAEnC,IAAI0H,YAAY,KAAK,IAAI,EAAE;cACzB;YACF,CAAC,MAAM;cAGL,IAAIY,kBAAkB,GAAGZ,YAAY;cAGrC,IAAIa,mBAAmB,GAAGD,kBAAkB,CAAC77B,IAAI;cACjD67B,kBAAkB,CAAC77B,IAAI,GAAG,IAAI;cAC9BomB,MAAM,GAAG0V,mBAAmB;cAC5BxI,KAAK,CAAC8F,cAAc,GAAGyC,kBAAkB;cACzCvI,KAAK,CAAC+F,MAAM,CAAC9F,OAAO,GAAG,IAAI;YAC7B;UACF;QACF,CAAC,QAAQ,IAAI;QAEb,IAAIkI,iBAAiB,KAAK,IAAI,EAAE;UAC9BF,YAAY,GAAGF,QAAQ;QACzB;QAEA/H,KAAK,CAAC4F,SAAS,GAAGqC,YAAY;QAC9BjI,KAAK,CAAC6F,eAAe,GAAGqC,kBAAkB;QAC1ClI,KAAK,CAAC8F,cAAc,GAAGqC,iBAAiB;QAExC,IAAItC,eAAe,KAAK,IAAI,EAAE;UAG5B7F,KAAK,CAAC+F,MAAM,CAACrX,KAAK,GAAG5C,OAAO;QAC9B;QAQA2c,sBAAsB,CAACT,QAAQ,CAAC;QAChC3M,cAAc,CAAC3M,KAAK,GAAGsZ,QAAQ;QAC/B3M,cAAc,CAAC0C,aAAa,GAAGgK,QAAQ;MACzC;MAEA;QACErC,wBAAwB,GAAG,IAAI;MACjC;IACF;IAEA,SAASxkC,YAAYA,CAAC+K,QAAQ,EAAE3L,OAAO,EAAE;MACvC,IAAI,OAAO2L,QAAQ,KAAK,UAAU,EAAE;QAClC,MAAM,IAAItO,KAAK,CACb,oEAAoE,IACjE,YAAY,GAAGsO,QAAQ,CAC5B,CAAC;MACH;MAEAA,QAAQ,CAACtM,IAAI,CAACW,OAAO,CAAC;IACxB;IAEA,SAASooC,mCAAmCA,CAAA,EAAG;MAC7ClD,cAAc,GAAG,KAAK;IACxB;IACA,SAASmD,kCAAkCA,CAAA,EAAG;MAC5C,OAAOnD,cAAc;IACvB;IACA,SAASoD,oBAAoBA,CAAC1C,WAAW,EAAE;MAIzC,IAAI2C,kBAAkB,GAAG3C,WAAW,CAACD,SAAS;MAE9C,IAAI4C,kBAAkB,KAAK,IAAI,EAAE;QAC/B,IAAIC,uBAAuB,GAAG5C,WAAW,CAACH,MAAM,CAACC,eAAe;QAEhE,IAAI8C,uBAAuB,KAAK,IAAI,EAAE;UACpC5C,WAAW,CAACH,MAAM,CAACC,eAAe,GAAG6C,kBAAkB;QACzD,CAAC,MAAM;UACL3C,WAAW,CAACH,MAAM,CAACC,eAAe,GAChC8C,uBAAuB,CAAC5pC,MAAM,CAAC2pC,kBAAkB,CAAC;QACtD;MACF;IACF;IACA,SAASE,qBAAqBA,CAAC7C,WAAW,EAAE5lC,OAAO,EAAE;MAGnD,IAAI0lC,eAAe,GAAGE,WAAW,CAACH,MAAM,CAACC,eAAe;MAExD,IAAIA,eAAe,KAAK,IAAI,EAAE;QAC5BE,WAAW,CAACH,MAAM,CAACC,eAAe,GAAG,IAAI;QAEzC,KAAK,IAAIphC,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGohC,eAAe,CAAC1nC,MAAM,EAAEsG,CAAC,EAAE,EAAE;UAC/C,IAAIqH,QAAQ,GAAG+5B,eAAe,CAACphC,CAAC,CAAC;UACjC1D,YAAY,CAAC+K,QAAQ,EAAE3L,OAAO,CAAC;QACjC;MACF;IACF;IACA,SAAS0oC,eAAeA,CAAC9C,WAAW,EAAE5lC,OAAO,EAAE;MAC7C,IAAI2lC,SAAS,GAAGC,WAAW,CAACD,SAAS;MAErC,IAAIA,SAAS,KAAK,IAAI,EAAE;QACtBC,WAAW,CAACD,SAAS,GAAG,IAAI;QAE5B,KAAK,IAAIrhC,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGqhC,SAAS,CAAC3nC,MAAM,EAAEsG,CAAC,EAAE,EAAE;UACzC,IAAIqH,QAAQ,GAAGg6B,SAAS,CAACrhC,CAAC,CAAC;UAC3B1D,YAAY,CAAC+K,QAAQ,EAAE3L,OAAO,CAAC;QACjC;MACF;IACF;IAQA,SAAS2oC,YAAYA,CAACC,IAAI,EAAEC,IAAI,EAAE;MAChC,IAAIvL,QAAQ,CAACsL,IAAI,EAAEC,IAAI,CAAC,EAAE;QACxB,OAAO,IAAI;MACb;MAEA,IACE,OAAOD,IAAI,KAAK,QAAQ,IACxBA,IAAI,KAAK,IAAI,IACb,OAAOC,IAAI,KAAK,QAAQ,IACxBA,IAAI,KAAK,IAAI,EACb;QACA,OAAO,KAAK;MACd;MAEA,IAAIC,KAAK,GAAGvoC,MAAM,CAACwoC,IAAI,CAACH,IAAI,CAAC;MAC7B,IAAII,KAAK,GAAGzoC,MAAM,CAACwoC,IAAI,CAACF,IAAI,CAAC;MAE7B,IAAIC,KAAK,CAAC9qC,MAAM,KAAKgrC,KAAK,CAAChrC,MAAM,EAAE;QACjC,OAAO,KAAK;MACd;MAEA,KAAK,IAAIsG,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGwkC,KAAK,CAAC9qC,MAAM,EAAEsG,CAAC,EAAE,EAAE;QACrC,IAAI2kC,UAAU,GAAGH,KAAK,CAACxkC,CAAC,CAAC;QAEzB,IACE,CAACzD,cAAc,CAACxB,IAAI,CAACwpC,IAAI,EAAEI,UAAU,CAAC,IACtC,CAAC3L,QAAQ,CAACsL,IAAI,CAACK,UAAU,CAAC,EAAEJ,IAAI,CAACI,UAAU,CAAC,CAAC,EAC7C;UACA,OAAO,KAAK;QACd;MACF;MAEA,OAAO,IAAI;IACb;IAEA,SAASC,aAAaA,CAAC/qB,KAAK,EAAE;MAC5B,IAAI+C,KAAK,GAAG/C,KAAK,CAACgrB,WAAW,GAAGhrB,KAAK,CAACgrB,WAAW,CAACjlC,IAAI,GAAG,IAAI;MAE7D,QAAQia,KAAK,CAACjO,GAAG;QACf,KAAK/B,aAAa;QAClB,KAAKC,aAAa;QAClB,KAAKrB,aAAa;UAChB,OAAOyrB,6BAA6B,CAACra,KAAK,CAACja,IAAI,EAAEgd,KAAK,CAAC;QAEzD,KAAKxT,aAAa;UAChB,OAAO8qB,6BAA6B,CAAC,MAAM,EAAEtX,KAAK,CAAC;QAErD,KAAK3T,iBAAiB;UACpB,OAAOirB,6BAA6B,CAAC,UAAU,EAAEtX,KAAK,CAAC;QAEzD,KAAKrT,qBAAqB;UACxB,OAAO2qB,6BAA6B,CAAC,cAAc,EAAEtX,KAAK,CAAC;QAE7D,KAAKxU,iBAAiB;QACtB,KAAKE,sBAAsB;QAC3B,KAAKa,mBAAmB;UACtB,OAAOwrB,8BAA8B,CAAC9a,KAAK,CAACja,IAAI,EAAEgd,KAAK,CAAC;QAE1D,KAAK7T,UAAU;UACb,OAAO4rB,8BAA8B,CAAC9a,KAAK,CAACja,IAAI,CAACsZ,MAAM,EAAE0D,KAAK,CAAC;QAEjE,KAAKvU,cAAc;UACjB,OAAOosB,2BAA2B,CAAC5a,KAAK,CAACja,IAAI,EAAEgd,KAAK,CAAC;QAEvD;UACE,OAAO,EAAE;MACb;IACF;IAEA,SAASkoB,2BAA2BA,CAACrO,cAAc,EAAE;MACnD,IAAI;QACF,IAAI5S,IAAI,GAAG,EAAE;QACb,IAAIxH,IAAI,GAAGoa,cAAc;QAEzB,GAAG;UACD5S,IAAI,IAAI+gB,aAAa,CAACvoB,IAAI,CAAC;UAE3BA,IAAI,GAAGA,IAAI,CAAC1Q,MAAM;QACpB,CAAC,QAAQ0Q,IAAI;QAEb,OAAOwH,IAAI;MACb,CAAC,CAAC,OAAOpK,CAAC,EAAE;QACV,OAAO,4BAA4B,GAAGA,CAAC,CAACmc,OAAO,GAAG,IAAI,GAAGnc,CAAC,CAACrf,KAAK;MAClE;IACF;IAEA,IAAID,sBAAsB,GAAGf,oBAAoB,CAACe,sBAAsB;IACxE,IAAI0N,OAAO,GAAG,IAAI;IAClB,IAAIk9B,WAAW,GAAG,KAAK;IACvB,SAASC,mCAAmCA,CAAA,EAAG;MAC7C;QACE,IAAIn9B,OAAO,KAAK,IAAI,EAAE;UACpB,OAAO,IAAI;QACb;QAEA,IAAI+U,KAAK,GAAG/U,OAAO,CAACg9B,WAAW;QAE/B,IAAIjoB,KAAK,KAAK,IAAI,IAAI,OAAOA,KAAK,KAAK,WAAW,EAAE;UAClD,OAAOhD,yBAAyB,CAACgD,KAAK,CAAC;QACzC;MACF;MAEA,OAAO,IAAI;IACb;IAEA,SAASqoB,yBAAyBA,CAAA,EAAG;MACnC;QACE,IAAIp9B,OAAO,KAAK,IAAI,EAAE;UACpB,OAAO,EAAE;QACX;QAGA,OAAOi9B,2BAA2B,CAACj9B,OAAO,CAAC;MAC7C;IACF;IAEA,SAASq9B,iBAAiBA,CAAA,EAAG;MAC3B;QACE/qC,sBAAsB,CAACgrC,eAAe,GAAG,IAAI;QAC7Ct9B,OAAO,GAAG,IAAI;QACdk9B,WAAW,GAAG,KAAK;MACrB;IACF;IACA,SAASK,eAAeA,CAACvrB,KAAK,EAAE;MAC9B;QACE1f,sBAAsB,CAACgrC,eAAe,GACpCtrB,KAAK,KAAK,IAAI,GAAG,IAAI,GAAGorB,yBAAyB;QACnDp9B,OAAO,GAAGgS,KAAK;QACfkrB,WAAW,GAAG,KAAK;MACrB;IACF;IACA,SAASM,eAAeA,CAAA,EAAG;MACzB;QACE,OAAOx9B,OAAO;MAChB;IACF;IACA,SAASy9B,cAAcA,CAACC,SAAS,EAAE;MACjC;QACER,WAAW,GAAGQ,SAAS;MACzB;IACF;IAEA,IAAIC,uBAAuB,GAAG;MAC5BC,6BAA6B,EAAE,SAAAA,CAAU5rB,KAAK,EAAElW,QAAQ,EAAE,CAAC,CAAC;MAC5D+hC,mCAAmC,EAAE,SAAAA,CAAA,EAAY,CAAC,CAAC;MACnDC,0BAA0B,EAAE,SAAAA,CAAU9rB,KAAK,EAAElW,QAAQ,EAAE,CAAC,CAAC;MACzDiiC,yBAAyB,EAAE,SAAAA,CAAA,EAAY,CAAC,CAAC;MACzCC,sBAAsB,EAAE,SAAAA,CAAA,EAAY,CAAC;IACvC,CAAC;IAED;MACE,IAAIC,cAAc,GAAG,SAAAA,CAAUjsB,KAAK,EAAE;QACpC,IAAIksB,eAAe,GAAG,IAAI;QAC1B,IAAI1pB,IAAI,GAAGxC,KAAK;QAEhB,OAAOwC,IAAI,KAAK,IAAI,EAAE;UACpB,IAAIA,IAAI,CAACwc,IAAI,GAAGpS,gBAAgB,EAAE;YAChCsf,eAAe,GAAG1pB,IAAI;UACxB;UAEAA,IAAI,GAAGA,IAAI,CAAC1Q,MAAM;QACpB;QAEA,OAAOo6B,eAAe;MACxB,CAAC;MAED,IAAIC,iBAAiB,GAAG,SAAAA,CAAUhjC,GAAG,EAAE;QACrC,IAAIijC,KAAK,GAAG,EAAE;QACdjjC,GAAG,CAACwE,OAAO,CAAC,UAAU0O,KAAK,EAAE;UAC3B+vB,KAAK,CAACniC,IAAI,CAACoS,KAAK,CAAC;QACnB,CAAC,CAAC;QACF,OAAO+vB,KAAK,CAACC,IAAI,CAAC,CAAC,CAACC,IAAI,CAAC,IAAI,CAAC;MAChC,CAAC;MAED,IAAIC,iCAAiC,GAAG,EAAE;MAC1C,IAAIC,wCAAwC,GAAG,EAAE;MACjD,IAAIC,wCAAwC,GAAG,EAAE;MACjD,IAAIC,+CAA+C,GAAG,EAAE;MACxD,IAAIC,kCAAkC,GAAG,EAAE;MAC3C,IAAIC,yCAAyC,GAAG,EAAE;MAElD,IAAIC,4BAA4B,GAAG,IAAIC,GAAG,CAAC,CAAC;MAE5CnB,uBAAuB,CAACC,6BAA6B,GAAG,UACtD5rB,KAAK,EACLlW,QAAQ,EACR;QAEA,IAAI+iC,4BAA4B,CAACzX,GAAG,CAACpV,KAAK,CAACja,IAAI,CAAC,EAAE;UAChD;QACF;QAEA,IACE,OAAO+D,QAAQ,CAACijC,kBAAkB,KAAK,UAAU,IACjDjjC,QAAQ,CAACijC,kBAAkB,CAACC,4BAA4B,KAAK,IAAI,EACjE;UACAT,iCAAiC,CAACtiC,IAAI,CAAC+V,KAAK,CAAC;QAC/C;QAEA,IACEA,KAAK,CAACgf,IAAI,GAAGpS,gBAAgB,IAC7B,OAAO9iB,QAAQ,CAACmjC,yBAAyB,KAAK,UAAU,EACxD;UACAT,wCAAwC,CAACviC,IAAI,CAAC+V,KAAK,CAAC;QACtD;QAEA,IACE,OAAOlW,QAAQ,CAACojC,yBAAyB,KAAK,UAAU,IACxDpjC,QAAQ,CAACojC,yBAAyB,CAACF,4BAA4B,KAC7D,IAAI,EACN;UACAP,wCAAwC,CAACxiC,IAAI,CAAC+V,KAAK,CAAC;QACtD;QAEA,IACEA,KAAK,CAACgf,IAAI,GAAGpS,gBAAgB,IAC7B,OAAO9iB,QAAQ,CAACqjC,gCAAgC,KAAK,UAAU,EAC/D;UACAT,+CAA+C,CAACziC,IAAI,CAAC+V,KAAK,CAAC;QAC7D;QAEA,IACE,OAAOlW,QAAQ,CAACsjC,mBAAmB,KAAK,UAAU,IAClDtjC,QAAQ,CAACsjC,mBAAmB,CAACJ,4BAA4B,KAAK,IAAI,EAClE;UACAL,kCAAkC,CAAC1iC,IAAI,CAAC+V,KAAK,CAAC;QAChD;QAEA,IACEA,KAAK,CAACgf,IAAI,GAAGpS,gBAAgB,IAC7B,OAAO9iB,QAAQ,CAACujC,0BAA0B,KAAK,UAAU,EACzD;UACAT,yCAAyC,CAAC3iC,IAAI,CAAC+V,KAAK,CAAC;QACvD;MACF,CAAC;MAED2rB,uBAAuB,CAACE,mCAAmC,GACzD,YAAY;QAEV,IAAIyB,6BAA6B,GAAG,IAAIR,GAAG,CAAC,CAAC;QAE7C,IAAIP,iCAAiC,CAAC1sC,MAAM,GAAG,CAAC,EAAE;UAChD0sC,iCAAiC,CAAC5+B,OAAO,CAAC,UAAUqS,KAAK,EAAE;YACzDstB,6BAA6B,CAACtY,GAAG,CAC/BjV,yBAAyB,CAACC,KAAK,CAAC,IAAI,WACtC,CAAC;YACD6sB,4BAA4B,CAAC7X,GAAG,CAAChV,KAAK,CAACja,IAAI,CAAC;UAC9C,CAAC,CAAC;UACFwmC,iCAAiC,GAAG,EAAE;QACxC;QAEA,IAAIgB,oCAAoC,GAAG,IAAIT,GAAG,CAAC,CAAC;QAEpD,IAAIN,wCAAwC,CAAC3sC,MAAM,GAAG,CAAC,EAAE;UACvD2sC,wCAAwC,CAAC7+B,OAAO,CAAC,UAAUqS,KAAK,EAAE;YAChEutB,oCAAoC,CAACvY,GAAG,CACtCjV,yBAAyB,CAACC,KAAK,CAAC,IAAI,WACtC,CAAC;YACD6sB,4BAA4B,CAAC7X,GAAG,CAAChV,KAAK,CAACja,IAAI,CAAC;UAC9C,CAAC,CAAC;UACFymC,wCAAwC,GAAG,EAAE;QAC/C;QAEA,IAAIgB,oCAAoC,GAAG,IAAIV,GAAG,CAAC,CAAC;QAEpD,IAAIL,wCAAwC,CAAC5sC,MAAM,GAAG,CAAC,EAAE;UACvD4sC,wCAAwC,CAAC9+B,OAAO,CAAC,UAAUqS,KAAK,EAAE;YAChEwtB,oCAAoC,CAACxY,GAAG,CACtCjV,yBAAyB,CAACC,KAAK,CAAC,IAAI,WACtC,CAAC;YACD6sB,4BAA4B,CAAC7X,GAAG,CAAChV,KAAK,CAACja,IAAI,CAAC;UAC9C,CAAC,CAAC;UACF0mC,wCAAwC,GAAG,EAAE;QAC/C;QAEA,IAAIgB,2CAA2C,GAAG,IAAIX,GAAG,CAAC,CAAC;QAE3D,IAAIJ,+CAA+C,CAAC7sC,MAAM,GAAG,CAAC,EAAE;UAC9D6sC,+CAA+C,CAAC/+B,OAAO,CACrD,UAAUqS,KAAK,EAAE;YACfytB,2CAA2C,CAACzY,GAAG,CAC7CjV,yBAAyB,CAACC,KAAK,CAAC,IAAI,WACtC,CAAC;YACD6sB,4BAA4B,CAAC7X,GAAG,CAAChV,KAAK,CAACja,IAAI,CAAC;UAC9C,CACF,CAAC;UACD2mC,+CAA+C,GAAG,EAAE;QACtD;QAEA,IAAIgB,8BAA8B,GAAG,IAAIZ,GAAG,CAAC,CAAC;QAE9C,IAAIH,kCAAkC,CAAC9sC,MAAM,GAAG,CAAC,EAAE;UACjD8sC,kCAAkC,CAACh/B,OAAO,CAAC,UAAUqS,KAAK,EAAE;YAC1D0tB,8BAA8B,CAAC1Y,GAAG,CAChCjV,yBAAyB,CAACC,KAAK,CAAC,IAAI,WACtC,CAAC;YACD6sB,4BAA4B,CAAC7X,GAAG,CAAChV,KAAK,CAACja,IAAI,CAAC;UAC9C,CAAC,CAAC;UACF4mC,kCAAkC,GAAG,EAAE;QACzC;QAEA,IAAIgB,qCAAqC,GAAG,IAAIb,GAAG,CAAC,CAAC;QAErD,IAAIF,yCAAyC,CAAC/sC,MAAM,GAAG,CAAC,EAAE;UACxD+sC,yCAAyC,CAACj/B,OAAO,CAAC,UAAUqS,KAAK,EAAE;YACjE2tB,qCAAqC,CAAC3Y,GAAG,CACvCjV,yBAAyB,CAACC,KAAK,CAAC,IAAI,WACtC,CAAC;YACD6sB,4BAA4B,CAAC7X,GAAG,CAAChV,KAAK,CAACja,IAAI,CAAC;UAC9C,CAAC,CAAC;UACF6mC,yCAAyC,GAAG,EAAE;QAChD;QAGA,IAAIW,oCAAoC,CAACpY,IAAI,GAAG,CAAC,EAAE;UACjD,IAAIyY,WAAW,GAAGzB,iBAAiB,CACjCoB,oCACF,CAAC;UAEDrtC,KAAK,CACH,wGAAwG,GACtG,2EAA2E,GAC3E,iGAAiG,GACjG,8CAA8C,EAChD0tC,WACF,CAAC;QACH;QAEA,IAAIH,2CAA2C,CAACtY,IAAI,GAAG,CAAC,EAAE;UACxD,IAAI0Y,YAAY,GAAG1B,iBAAiB,CAClCsB,2CACF,CAAC;UAEDvtC,KAAK,CACH,2EAA2E,GACzE,sCAAsC,GACtC,2EAA2E,GAC3E,oEAAoE,GACpE,oDAAoD,GACpD,iEAAiE,GACjE,0FAA0F,GAC1F,8CAA8C,EAChD2tC,YACF,CAAC;QACH;QAEA,IAAIF,qCAAqC,CAACxY,IAAI,GAAG,CAAC,EAAE;UAClD,IAAI2Y,aAAa,GAAG3B,iBAAiB,CACnCwB,qCACF,CAAC;UAEDztC,KAAK,CACH,qEAAqE,GACnE,sCAAsC,GACtC,2EAA2E,GAC3E,oEAAoE,GACpE,8CAA8C,EAChD4tC,aACF,CAAC;QACH;QAEA,IAAIR,6BAA6B,CAACnY,IAAI,GAAG,CAAC,EAAE;UAC1C,IAAI4Y,aAAa,GAAG5B,iBAAiB,CACnCmB,6BACF,CAAC;UAED7tC,IAAI,CACF,uEAAuE,GACrE,2EAA2E,GAC3E,iGAAiG,GACjG,uEAAuE,GACvE,mFAAmF,GACnF,sEAAsE,GACtE,+EAA+E,GAC/E,8CAA8C,EAChDsuC,aACF,CAAC;QACH;QAEA,IAAIP,oCAAoC,CAACrY,IAAI,GAAG,CAAC,EAAE;UACjD,IAAI6Y,aAAa,GAAG7B,iBAAiB,CACnCqB,oCACF,CAAC;UAED/tC,IAAI,CACF,8EAA8E,GAC5E,2EAA2E,GAC3E,oEAAoE,GACpE,kEAAkE,GAClE,mDAAmD,GACnD,0FAA0F,GAC1F,qFAAqF,GACrF,mFAAmF,GACnF,sEAAsE,GACtE,+EAA+E,GAC/E,8CAA8C,EAChDuuC,aACF,CAAC;QACH;QAEA,IAAIN,8BAA8B,CAACvY,IAAI,GAAG,CAAC,EAAE;UAC3C,IAAI8Y,aAAa,GAAG9B,iBAAiB,CACnCuB,8BACF,CAAC;UAEDjuC,IAAI,CACF,wEAAwE,GACtE,2EAA2E,GAC3E,oEAAoE,GACpE,yEAAyE,GACzE,mFAAmF,GACnF,sEAAsE,GACtE,+EAA+E,GAC/E,8CAA8C,EAChDwuC,aACF,CAAC;QACH;MACF,CAAC;MAEH,IAAIC,2BAA2B,GAAG,IAAI11B,GAAG,CAAC,CAAC;MAE3C,IAAI21B,yBAAyB,GAAG,IAAIrB,GAAG,CAAC,CAAC;MAEzCnB,uBAAuB,CAACG,0BAA0B,GAAG,UACnD9rB,KAAK,EACLlW,QAAQ,EACR;QACA,IAAIskC,UAAU,GAAGnC,cAAc,CAACjsB,KAAK,CAAC;QAEtC,IAAIouB,UAAU,KAAK,IAAI,EAAE;UACvBluC,KAAK,CACH,iEAAiE,GAC/D,sEACJ,CAAC;UAED;QACF;QAEA,IAAIiuC,yBAAyB,CAAC/Y,GAAG,CAACpV,KAAK,CAACja,IAAI,CAAC,EAAE;UAC7C;QACF;QAEA,IAAIsoC,eAAe,GAAGH,2BAA2B,CAAC3kC,GAAG,CAAC6kC,UAAU,CAAC;QAEjE,IACEpuB,KAAK,CAACja,IAAI,CAACu3B,YAAY,IAAI,IAAI,IAC/Btd,KAAK,CAACja,IAAI,CAACy3B,iBAAiB,IAAI,IAAI,IACnC1zB,QAAQ,KAAK,IAAI,IAAI,OAAOA,QAAQ,CAACi0B,eAAe,KAAK,UAAW,EACrE;UACA,IAAIsQ,eAAe,KAAKpoC,SAAS,EAAE;YACjCooC,eAAe,GAAG,EAAE;YACpBH,2BAA2B,CAAC/kC,GAAG,CAACilC,UAAU,EAAEC,eAAe,CAAC;UAC9D;UAEAA,eAAe,CAACpkC,IAAI,CAAC+V,KAAK,CAAC;QAC7B;MACF,CAAC;MAED2rB,uBAAuB,CAACI,yBAAyB,GAAG,YAAY;QAC9DmC,2BAA2B,CAACvgC,OAAO,CAAC,UAAU2gC,UAAU,EAAEF,UAAU,EAAE;UACpE,IAAIE,UAAU,CAACzuC,MAAM,KAAK,CAAC,EAAE;YAC3B;UACF;UAEA,IAAI0uC,UAAU,GAAGD,UAAU,CAAC,CAAC,CAAC;UAC9B,IAAIE,WAAW,GAAG,IAAI1B,GAAG,CAAC,CAAC;UAC3BwB,UAAU,CAAC3gC,OAAO,CAAC,UAAUqS,KAAK,EAAE;YAClCwuB,WAAW,CAACxZ,GAAG,CAACjV,yBAAyB,CAACC,KAAK,CAAC,IAAI,WAAW,CAAC;YAChEmuB,yBAAyB,CAACnZ,GAAG,CAAChV,KAAK,CAACja,IAAI,CAAC;UAC3C,CAAC,CAAC;UACF,IAAI6nC,WAAW,GAAGzB,iBAAiB,CAACqC,WAAW,CAAC;UAEhD,IAAI;YACFjD,eAAe,CAACgD,UAAU,CAAC;YAE3BruC,KAAK,CACH,iEAAiE,GAC/D,2EAA2E,GAC3E,6CAA6C,GAC7C,gDAAgD,GAChD,iFAAiF,EACnF0tC,WACF,CAAC;UACH,CAAC,SAAS;YACRvC,iBAAiB,CAAC,CAAC;UACrB;QACF,CAAC,CAAC;MACJ,CAAC;MAEDM,uBAAuB,CAACK,sBAAsB,GAAG,YAAY;QAC3DO,iCAAiC,GAAG,EAAE;QACtCC,wCAAwC,GAAG,EAAE;QAC7CC,wCAAwC,GAAG,EAAE;QAC7CC,+CAA+C,GAAG,EAAE;QACpDC,kCAAkC,GAAG,EAAE;QACvCC,yCAAyC,GAAG,EAAE;QAC9CsB,2BAA2B,GAAG,IAAI11B,GAAG,CAAC,CAAC;MACzC,CAAC;IACH;IAYA,SAASi2B,QAAQA,CAACpyB,KAAK,EAAE;MACvB;QAEE,IAAIqyB,cAAc,GAAG,OAAO1xB,MAAM,KAAK,UAAU,IAAIA,MAAM,CAAC2xB,WAAW;QACvE,IAAI5oC,IAAI,GACL2oC,cAAc,IAAIryB,KAAK,CAACW,MAAM,CAAC2xB,WAAW,CAAC,IAC5CtyB,KAAK,CAACjU,WAAW,CAACzG,IAAI,IACtB,QAAQ;QAEV,OAAOoE,IAAI;MACb;IACF;IAEA,SAAS6oC,iBAAiBA,CAACvyB,KAAK,EAAE;MAChC;QACE,IAAI;UACFwyB,kBAAkB,CAACxyB,KAAK,CAAC;UACzB,OAAO,KAAK;QACd,CAAC,CAAC,OAAOjY,CAAC,EAAE;UACV,OAAO,IAAI;QACb;MACF;IACF;IAEA,SAASyqC,kBAAkBA,CAACxyB,KAAK,EAAE;MAwBjC,OAAO,EAAE,GAAGA,KAAK;IACnB;IACA,SAASyyB,sBAAsBA,CAACzyB,KAAK,EAAE;MACrC;QACE,IAAIuyB,iBAAiB,CAACvyB,KAAK,CAAC,EAAE;UAC5Bnc,KAAK,CACH,6CAA6C,GAC3C,+DAA+D,EACjEuuC,QAAQ,CAACpyB,KAAK,CAChB,CAAC;UAED,OAAOwyB,kBAAkB,CAACxyB,KAAK,CAAC;QAClC;MACF;IACF;IACA,SAAS0yB,uBAAuBA,CAAC1yB,KAAK,EAAEhU,QAAQ,EAAE;MAChD;QACE,IAAIumC,iBAAiB,CAACvyB,KAAK,CAAC,EAAE;UAC5Bnc,KAAK,CACH,mDAAmD,GACjD,+DAA+D,EACjEmI,QAAQ,EACRomC,QAAQ,CAACpyB,KAAK,CAChB,CAAC;UAED,OAAOwyB,kBAAkB,CAACxyB,KAAK,CAAC;QAClC;MACF;IACF;IAEA,IAAI2yB,sBAAsB,GAAGzvC,oBAAoB,CAACwjC,oBAAoB;IAEtE,SAASkM,qBAAqBA,CAACC,KAAK,EAAE;MACpC;QACE,IAAIC,QAAQ,GAAGD,KAAK;QACpB,OAAOC,QAAQ,CAACC,SAAS;MAC3B;IACF;IAGA,IAAIC,iBAAiB,GAAG,IAAInwC,KAAK,CAC/B,uEAAuE,GACrE,mEAAmE,GACnE,gEAAgE,GAChE,+DAA+D,GAC/D,0BAA0B,GAC1B,uEAAuE,GACvE,iEACJ,CAAC;IACD,IAAIowC,wBAAwB,GAAG,IAAIpwC,KAAK,CACtC,yEAAyE,GACvE,+DACJ,CAAC;IAKD,IAAIqwC,2BAA2B,GAAG;MAChClJ,IAAI,EAAE,SAAAA,CAAA,EAAY;QAChB;UACEnmC,KAAK,CACH,kEAAkE,GAChE,gEACJ,CAAC;QACH;MACF;IACF,CAAC;IACD,SAASsvC,mBAAmBA,CAAA,EAAG;MAG7B;QACE,OAAO;UACLC,2BAA2B,EAAE,KAAK;UAClCL,SAAS,EAAE;QACb,CAAC;MACH;IACF;IACA,SAASM,kBAAkBA,CAAC1J,QAAQ,EAAE;MACpC,IAAIG,MAAM,GAAGH,QAAQ,CAACG,MAAM;MAC5B,OAAOA,MAAM,KAAK,WAAW,IAAIA,MAAM,KAAK,UAAU;IACxD;IAEA,SAASwJ,IAAIA,CAAA,EAAG,CAAC;IAEjB,SAASC,iBAAiBA,CAACC,aAAa,EAAE7J,QAAQ,EAAEvrB,KAAK,EAAE;MACzD,IAAIu0B,sBAAsB,CAAChhC,OAAO,KAAK,IAAI,EAAE;QAC3CghC,sBAAsB,CAACc,aAAa,GAAG,IAAI;MAC7C;MAEA,IAAIC,gBAAgB,GAAGd,qBAAqB,CAACY,aAAa,CAAC;MAC3D,IAAIG,QAAQ,GAAGD,gBAAgB,CAACt1B,KAAK,CAAC;MAEtC,IAAIu1B,QAAQ,KAAK/pC,SAAS,EAAE;QAC1B8pC,gBAAgB,CAAC9lC,IAAI,CAAC+7B,QAAQ,CAAC;MACjC,CAAC,MAAM;QACL,IAAIgK,QAAQ,KAAKhK,QAAQ,EAAE;UAGzB;YACE,IAAIiK,gBAAgB,GAAGJ,aAAa;YAEpC,IAAI,CAACI,gBAAgB,CAACR,2BAA2B,EAAE;cAgBjDQ,gBAAgB,CAACR,2BAA2B,GAAG,IAAI;cAEnDvvC,KAAK,CACH,6DAA6D,GAC3D,wDAAwD,GACxD,mEACJ,CAAC;YACH;UACF;UAGA8lC,QAAQ,CAACK,IAAI,CAACsJ,IAAI,EAAEA,IAAI,CAAC;UACzB3J,QAAQ,GAAGgK,QAAQ;QACrB;MACF;MAOA,QAAQhK,QAAQ,CAACG,MAAM;QACrB,KAAK,WAAW;UAAE;YAChB,IAAI+J,cAAc,GAAGlK,QAAQ,CAAC3pB,KAAK;YACnC,OAAO6zB,cAAc;UACvB;QAEA,KAAK,UAAU;UAAE;YACf,IAAIC,aAAa,GAAGnK,QAAQ,CAACI,MAAM;YACnCgK,6BAA6B,CAACD,aAAa,CAAC;YAC5C,MAAMA,aAAa;UACrB;QAEA;UAAS;YACP,IAAI,OAAOnK,QAAQ,CAACG,MAAM,KAAK,QAAQ,EAAE;cAMvCH,QAAQ,CAACK,IAAI,CAACsJ,IAAI,EAAEA,IAAI,CAAC;YAC3B,CAAC,MAAM;cAGL,IAAItkB,IAAI,GAAG6W,qBAAqB,CAAC,CAAC;cAElC,IAAI7W,IAAI,KAAK,IAAI,IAAIA,IAAI,CAAC6I,mBAAmB,GAAG,GAAG,EAAE;gBAcnD,MAAM,IAAIh1B,KAAK,CACb,8DAA8D,GAC5D,gEAAgE,GAChE,gEAAgE,GAChE,iBACJ,CAAC;cACH;cAEA,IAAImxC,eAAe,GAAGrK,QAAQ;cAC9BqK,eAAe,CAAClK,MAAM,GAAG,SAAS;cAClCkK,eAAe,CAAChK,IAAI,CAClB,UAAU6J,cAAc,EAAE;gBACxB,IAAIlK,QAAQ,CAACG,MAAM,KAAK,SAAS,EAAE;kBACjC,IAAII,iBAAiB,GAAGP,QAAQ;kBAChCO,iBAAiB,CAACJ,MAAM,GAAG,WAAW;kBACtCI,iBAAiB,CAAClqB,KAAK,GAAG6zB,cAAc;gBAC1C;cACF,CAAC,EACD,UAAUhwC,KAAK,EAAE;gBACf,IAAI8lC,QAAQ,CAACG,MAAM,KAAK,SAAS,EAAE;kBACjC,IAAIK,gBAAgB,GAAGR,QAAQ;kBAC/BQ,gBAAgB,CAACL,MAAM,GAAG,UAAU;kBACpCK,gBAAgB,CAACJ,MAAM,GAAGlmC,KAAK;gBACjC;cACF,CACF,CAAC;cAED,QAAQ8lC,QAAQ,CAACG,MAAM;gBACrB,KAAK,WAAW;kBAAE;oBAChB,IAAII,iBAAiB,GAAGP,QAAQ;oBAChC,OAAOO,iBAAiB,CAAClqB,KAAK;kBAChC;gBAEA,KAAK,UAAU;kBAAE;oBACf,IAAImqB,gBAAgB,GAAGR,QAAQ;oBAC/B,IAAIsK,cAAc,GAAG9J,gBAAgB,CAACJ,MAAM;oBAC5CgK,6BAA6B,CAACE,cAAc,CAAC;oBAC7C,MAAMA,cAAc;kBACtB;cACF;YACF;YAQAC,iBAAiB,GAAGvK,QAAQ;YAE5B;cACEwK,gCAAgC,GAAG,IAAI;YACzC;YAEA,MAAMnB,iBAAiB;UACzB;MACF;IACF;IAIA,IAAIkB,iBAAiB,GAAG,IAAI;IAC5B,IAAIC,gCAAgC,GAAG,KAAK;IAC5C,SAASC,oBAAoBA,CAAA,EAAG;MAK9B,IAAIF,iBAAiB,KAAK,IAAI,EAAE;QAC9B,MAAM,IAAIrxC,KAAK,CACb,qEAAqE,GACnE,WACJ,CAAC;MACH;MAEA,IAAI8mC,QAAQ,GAAGuK,iBAAiB;MAChCA,iBAAiB,GAAG,IAAI;MAExB;QACEC,gCAAgC,GAAG,KAAK;MAC1C;MAEA,OAAOxK,QAAQ;IACjB;IACA,SAAS0K,2BAA2BA,CAAA,EAAG;MACrC;QAIE,IAAIF,gCAAgC,EAAE;UACpCA,gCAAgC,GAAG,KAAK;UACxC,OAAO,IAAI;QACb;MACF;MAEA,OAAO,KAAK;IACd;IACA,SAASJ,6BAA6BA,CAACO,cAAc,EAAE;MAQrD,IAAIA,cAAc,KAAKtB,iBAAiB,EAAE;QACxC,MAAM,IAAInwC,KAAK,CACb,0DAA0D,GACxD,8DAA8D,GAC9D,yDACJ,CAAC;MACH;IACF;IAEA,IAAI0xC,eAAe,GAAG,IAAI;IAC1B,IAAIC,sBAAsB,GAAG,CAAC;IAC9B,IAAIC,gBAAgB;IACpB,IAAIC,sBAAsB;IAC1B,IAAIC,sBAAsB;IAC1B,IAAIC,qBAAqB;IACzB,IAAIC,2BAA2B;IAE/B,IAAIC,iBAAiB,GAAG,SAAAA,CAAU5tB,KAAK,EAAE6tB,WAAW,EAAE,CAAC,CAAC;IAExD;MACEN,gBAAgB,GAAG,KAAK;MACxBC,sBAAsB,GAAG,KAAK;MAC9BC,sBAAsB,GAAG,CAAC,CAAC;MAO3BC,qBAAqB,GAAG,CAAC,CAAC;MAC1BC,2BAA2B,GAAG,CAAC,CAAC;MAEhCC,iBAAiB,GAAG,SAAAA,CAAU5tB,KAAK,EAAE6tB,WAAW,EAAE;QAChD,IAAI7tB,KAAK,KAAK,IAAI,IAAI,OAAOA,KAAK,KAAK,QAAQ,EAAE;UAC/C;QACF;QAEA,IAAI,CAACA,KAAK,CAAC8tB,MAAM,IAAI9tB,KAAK,CAAC8tB,MAAM,CAACC,SAAS,IAAI/tB,KAAK,CAACpH,GAAG,IAAI,IAAI,EAAE;UAChE;QACF;QAEA,IAAI,OAAOoH,KAAK,CAAC8tB,MAAM,KAAK,QAAQ,EAAE;UACpC,MAAM,IAAInyC,KAAK,CACb,6DAA6D,GAC3D,sEACJ,CAAC;QACH;QAEAqkB,KAAK,CAAC8tB,MAAM,CAACC,SAAS,GAAG,IAAI;QAC7B,IAAI5V,aAAa,GACf3b,yBAAyB,CAACqxB,WAAW,CAAC,IAAI,WAAW;QAEvD,IAAIH,qBAAqB,CAACvV,aAAa,CAAC,EAAE;UACxC;QACF;QAEAuV,qBAAqB,CAACvV,aAAa,CAAC,GAAG,IAAI;QAE3Cx7B,KAAK,CACH,4CAA4C,GAC1C,4DAA4D,GAC5D,mBACJ,CAAC;MACH,CAAC;IACH;IAEA,SAASqxC,YAAYA,CAACxrC,IAAI,EAAE;MAC1B,OAAOA,IAAI,CAAC/E,SAAS,IAAI+E,IAAI,CAAC/E,SAAS,CAACwwC,gBAAgB;IAC1D;IAEA,SAASC,cAAcA,CAACzL,QAAQ,EAAE;MAChC,IAAIvrB,KAAK,GAAGo2B,sBAAsB;MAClCA,sBAAsB,IAAI,CAAC;MAE3B,IAAID,eAAe,KAAK,IAAI,EAAE;QAC5BA,eAAe,GAAGpB,mBAAmB,CAAC,CAAC;MACzC;MAEA,OAAOI,iBAAiB,CAACgB,eAAe,EAAE5K,QAAQ,EAAEvrB,KAAK,CAAC;IAC5D;IAEA,SAASi3B,SAASA,CAACN,WAAW,EAAEpjC,OAAO,EAAEmtB,OAAO,EAAE;MAChD,IAAIwW,QAAQ,GAAGxW,OAAO,CAACyW,GAAG;MAE1B,IACED,QAAQ,KAAK,IAAI,IACjB,OAAOA,QAAQ,KAAK,UAAU,IAC9B,OAAOA,QAAQ,KAAK,QAAQ,EAC5B;QACA;UACE,IAEE,EAAExW,OAAO,CAACC,MAAM,IAAID,OAAO,CAACC,MAAM,CAACrpB,GAAG,KAAKvD,cAAc,CAAC,IAC1D,EACE,OAAO2sB,OAAO,CAACp1B,IAAI,KAAK,UAAU,IAAI,CAACwrC,YAAY,CAACpW,OAAO,CAACp1B,IAAI,CAAC,CAClE,IACDo1B,OAAO,CAACC,MAAM,EACd;YACA,IAAIM,aAAa,GACf3b,yBAAyB,CAACqxB,WAAW,CAAC,IAAI,WAAW;YAEvD,IAAI,CAACJ,sBAAsB,CAACtV,aAAa,CAAC,EAAE;cAC1Cx7B,KAAK,CACH,uEAAuE,GACrE,gEAAgE,GAChE,mCAAmC,GACnC,2CAA2C,GAC3C,iDAAiD,EACnDw7B,aAAa,EACbiW,QACF,CAAC;cAEDX,sBAAsB,CAACtV,aAAa,CAAC,GAAG,IAAI;YAC9C;UACF;QACF;QAEA,IAAIP,OAAO,CAACC,MAAM,EAAE;UAClB,IAAIrY,KAAK,GAAGoY,OAAO,CAACC,MAAM;UAC1B,IAAIt1B,IAAI;UAER,IAAIid,KAAK,EAAE;YACT,IAAIC,UAAU,GAAGD,KAAK;YAEtB,IAAIC,UAAU,CAACjR,GAAG,KAAKvD,cAAc,EAAE;cACrC,MAAM,IAAItP,KAAK,CACb,+CAA+C,GAC7C,uCAAuC,GACvC,2CAA2C,GAC3C,iDACJ,CAAC;YACH;YAEA4G,IAAI,GAAGkd,UAAU,CAACjQ,SAAS;UAC7B;UAEA,IAAI,CAACjN,IAAI,EAAE;YACT,MAAM,IAAI5G,KAAK,CACb,+BAA+B,GAC7ByyC,QAAQ,GACR,qCAAqC,GACrC,qCACJ,CAAC;UACH;UAEA,IAAIE,YAAY,GAAG/rC,IAAI;UAEvB;YACEipC,uBAAuB,CAAC4C,QAAQ,EAAE,KAAK,CAAC;UAC1C;UAEA,IAAIG,SAAS,GAAG,EAAE,GAAGH,QAAQ;UAE7B,IACE3jC,OAAO,KAAK,IAAI,IAChBA,OAAO,CAAC4jC,GAAG,KAAK,IAAI,IACpB,OAAO5jC,OAAO,CAAC4jC,GAAG,KAAK,UAAU,IACjC5jC,OAAO,CAAC4jC,GAAG,CAACG,UAAU,KAAKD,SAAS,EACpC;YACA,OAAO9jC,OAAO,CAAC4jC,GAAG;UACpB;UAEA,IAAIA,GAAG,GAAG,SAAAA,CAAUv1B,KAAK,EAAE;YACzB,IAAI21B,IAAI,GAAGH,YAAY,CAACG,IAAI;YAE5B,IAAI31B,KAAK,KAAK,IAAI,EAAE;cAClB,OAAO21B,IAAI,CAACF,SAAS,CAAC;YACxB,CAAC,MAAM;cACLE,IAAI,CAACF,SAAS,CAAC,GAAGz1B,KAAK;YACzB;UACF,CAAC;UAEDu1B,GAAG,CAACG,UAAU,GAAGD,SAAS;UAC1B,OAAOF,GAAG;QACZ,CAAC,MAAM;UACL,IAAI,OAAOD,QAAQ,KAAK,QAAQ,EAAE;YAChC,MAAM,IAAIzyC,KAAK,CACb,4FACF,CAAC;UACH;UAEA,IAAI,CAACi8B,OAAO,CAACC,MAAM,EAAE;YACnB,MAAM,IAAIl8B,KAAK,CACb,yCAAyC,GACvCyyC,QAAQ,GACR,sDAAsD,GACtD,2BAA2B,GAC3B,sDAAsD,GACtD,qGAAqG,GACrG,+CAA+C,GAC/C,yEACJ,CAAC;UACH;QACF;MACF;MAEA,OAAOA,QAAQ;IACjB;IAEA,SAASM,wBAAwBA,CAACb,WAAW,EAAEc,QAAQ,EAAE;MAEvD,IAAIC,WAAW,GAAG/vC,MAAM,CAACpB,SAAS,CAACoxC,QAAQ,CAAClxC,IAAI,CAACgxC,QAAQ,CAAC;MAC1D,MAAM,IAAIhzC,KAAK,CACb,iDAAiD,IAC9CizC,WAAW,KAAK,iBAAiB,GAC9B,oBAAoB,GAAG/vC,MAAM,CAACwoC,IAAI,CAACsH,QAAQ,CAAC,CAAC5F,IAAI,CAAC,IAAI,CAAC,GAAG,GAAG,GAC7D6F,WAAW,CAAC,GAChB,KAAK,GACL,gEAAgE,GAChE,UACJ,CAAC;IACH;IAEA,SAASE,kBAAkBA,CAACjB,WAAW,EAAE;MACvC;QACE,IAAI1V,aAAa,GACf3b,yBAAyB,CAACqxB,WAAW,CAAC,IAAI,WAAW;QAEvD,IAAIF,2BAA2B,CAACxV,aAAa,CAAC,EAAE;UAC9C;QACF;QAEAwV,2BAA2B,CAACxV,aAAa,CAAC,GAAG,IAAI;QAEjDx7B,KAAK,CACH,+DAA+D,GAC7D,+DAA+D,GAC/D,iEACJ,CAAC;MACH;IACF;IAEA,SAASoyC,WAAWA,CAACC,QAAQ,EAAE;MAC7B,IAAI/yB,OAAO,GAAG+yB,QAAQ,CAAC9yB,QAAQ;MAC/B,IAAIC,IAAI,GAAG6yB,QAAQ,CAAC5yB,KAAK;MACzB,OAAOD,IAAI,CAACF,OAAO,CAAC;IACtB;IAKA,SAASgzB,qBAAqBA,CAACC,sBAAsB,EAAE;MACrD,SAASC,WAAWA,CAACtB,WAAW,EAAEuB,aAAa,EAAE;QAC/C,IAAI,CAACF,sBAAsB,EAAE;UAE3B;QACF;QAEA,IAAIG,SAAS,GAAGxB,WAAW,CAACwB,SAAS;QAErC,IAAIA,SAAS,KAAK,IAAI,EAAE;UACtBxB,WAAW,CAACwB,SAAS,GAAG,CAACD,aAAa,CAAC;UACvCvB,WAAW,CAACzuB,KAAK,IAAIpC,aAAa;QACpC,CAAC,MAAM;UACLqyB,SAAS,CAAC3oC,IAAI,CAAC0oC,aAAa,CAAC;QAC/B;MACF;MAEA,SAASE,uBAAuBA,CAACzB,WAAW,EAAE0B,iBAAiB,EAAE;QAC/D,IAAI,CAACL,sBAAsB,EAAE;UAE3B,OAAO,IAAI;QACb;QAGA,IAAIE,aAAa,GAAGG,iBAAiB;QAErC,OAAOH,aAAa,KAAK,IAAI,EAAE;UAC7BD,WAAW,CAACtB,WAAW,EAAEuB,aAAa,CAAC;UACvCA,aAAa,GAAGA,aAAa,CAACnvB,OAAO;QACvC;QAEA,OAAO,IAAI;MACb;MAEA,SAASuvB,oBAAoBA,CAAC3B,WAAW,EAAE0B,iBAAiB,EAAE;QAI5D,IAAIE,gBAAgB,GAAG,IAAIx6B,GAAG,CAAC,CAAC;QAChC,IAAIy6B,aAAa,GAAGH,iBAAiB;QAErC,OAAOG,aAAa,KAAK,IAAI,EAAE;UAC7B,IAAIA,aAAa,CAAC92B,GAAG,KAAK,IAAI,EAAE;YAC9B62B,gBAAgB,CAAC7pC,GAAG,CAAC8pC,aAAa,CAAC92B,GAAG,EAAE82B,aAAa,CAAC;UACxD,CAAC,MAAM;YACLD,gBAAgB,CAAC7pC,GAAG,CAAC8pC,aAAa,CAACx4B,KAAK,EAAEw4B,aAAa,CAAC;UAC1D;UAEAA,aAAa,GAAGA,aAAa,CAACzvB,OAAO;QACvC;QAEA,OAAOwvB,gBAAgB;MACzB;MAEA,SAASE,QAAQA,CAAClzB,KAAK,EAAEmzB,YAAY,EAAE;QAGrC,IAAIvL,KAAK,GAAGwL,oBAAoB,CAACpzB,KAAK,EAAEmzB,YAAY,CAAC;QACrDvL,KAAK,CAACntB,KAAK,GAAG,CAAC;QACfmtB,KAAK,CAACpkB,OAAO,GAAG,IAAI;QACpB,OAAOokB,KAAK;MACd;MAEA,SAASyL,UAAUA,CAACC,QAAQ,EAAEC,eAAe,EAAEC,QAAQ,EAAE;QACvDF,QAAQ,CAAC74B,KAAK,GAAG+4B,QAAQ;QAEzB,IAAI,CAACf,sBAAsB,EAAE;UAG3Ba,QAAQ,CAAC3wB,KAAK,IAAInB,MAAM;UACxB,OAAO+xB,eAAe;QACxB;QAEA,IAAIvlC,OAAO,GAAGslC,QAAQ,CAAC9gC,SAAS;QAEhC,IAAIxE,OAAO,KAAK,IAAI,EAAE;UACpB,IAAIylC,QAAQ,GAAGzlC,OAAO,CAACyM,KAAK;UAE5B,IAAIg5B,QAAQ,GAAGF,eAAe,EAAE;YAE9BD,QAAQ,CAAC3wB,KAAK,IAAIxC,SAAS,GAAG0B,YAAY;YAC1C,OAAO0xB,eAAe;UACxB,CAAC,MAAM;YAEL,OAAOE,QAAQ;UACjB;QACF,CAAC,MAAM;UAELH,QAAQ,CAAC3wB,KAAK,IAAIxC,SAAS,GAAG0B,YAAY;UAC1C,OAAO0xB,eAAe;QACxB;MACF;MAEA,SAASG,gBAAgBA,CAACJ,QAAQ,EAAE;QAGlC,IAAIb,sBAAsB,IAAIa,QAAQ,CAAC9gC,SAAS,KAAK,IAAI,EAAE;UACzD8gC,QAAQ,CAAC3wB,KAAK,IAAIxC,SAAS,GAAG0B,YAAY;QAC5C;QAEA,OAAOyxB,QAAQ;MACjB;MAEA,SAASK,cAAcA,CAACvC,WAAW,EAAEpjC,OAAO,EAAE4lC,WAAW,EAAE3jB,KAAK,EAAE;QAChE,IAAIjiB,OAAO,KAAK,IAAI,IAAIA,OAAO,CAAC+D,GAAG,KAAKlD,QAAQ,EAAE;UAEhD,IAAIglC,OAAO,GAAGC,mBAAmB,CAC/BF,WAAW,EACXxC,WAAW,CAACpS,IAAI,EAChB/O,KACF,CAAC;UACD4jB,OAAO,CAAC/hC,MAAM,GAAGs/B,WAAW;UAC5B,OAAOyC,OAAO;QAChB,CAAC,MAAM;UAEL,IAAIE,QAAQ,GAAGb,QAAQ,CAACllC,OAAO,EAAE4lC,WAAW,CAAC;UAC7CG,QAAQ,CAACjiC,MAAM,GAAGs/B,WAAW;UAC7B,OAAO2C,QAAQ;QACjB;MACF;MAEA,SAASC,aAAaA,CAAC5C,WAAW,EAAEpjC,OAAO,EAAEmtB,OAAO,EAAElL,KAAK,EAAE;QAC3D,IAAIgkB,WAAW,GAAG9Y,OAAO,CAACp1B,IAAI;QAE9B,IAAIkuC,WAAW,KAAK92B,mBAAmB,EAAE;UACvC,OAAO+2B,cAAc,CACnB9C,WAAW,EACXpjC,OAAO,EACPmtB,OAAO,CAACnoB,KAAK,CAACsY,QAAQ,EACtB2E,KAAK,EACLkL,OAAO,CAAChf,GACV,CAAC;QACH;QAEA,IAAInO,OAAO,KAAK,IAAI,EAAE;UACpB,IACEA,OAAO,CAACimC,WAAW,KAAKA,WAAW,IACnCE,iCAAiC,CAACnmC,OAAO,EAAEmtB,OAAO,CAAC,IAIlD,OAAO8Y,WAAW,KAAK,QAAQ,IAC9BA,WAAW,KAAK,IAAI,IACpBA,WAAW,CAAC/0B,QAAQ,KAAKtB,eAAe,IACxC00B,WAAW,CAAC2B,WAAW,CAAC,KAAKjmC,OAAO,CAACjI,IAAK,EAC5C;YAEA,IAAIguC,QAAQ,GAAGb,QAAQ,CAACllC,OAAO,EAAEmtB,OAAO,CAACnoB,KAAK,CAAC;YAC/C+gC,QAAQ,CAACnC,GAAG,GAAGF,SAAS,CAACN,WAAW,EAAEpjC,OAAO,EAAEmtB,OAAO,CAAC;YACvD4Y,QAAQ,CAACjiC,MAAM,GAAGs/B,WAAW;YAE7B;cACE2C,QAAQ,CAAC/I,WAAW,GAAG7P,OAAO,CAACC,MAAM;YACvC;YAEA,OAAO2Y,QAAQ;UACjB;QACF;QAEA,IAAIF,OAAO,GAAGO,sBAAsB,CAACjZ,OAAO,EAAEiW,WAAW,CAACpS,IAAI,EAAE/O,KAAK,CAAC;QACtE4jB,OAAO,CAACjC,GAAG,GAAGF,SAAS,CAACN,WAAW,EAAEpjC,OAAO,EAAEmtB,OAAO,CAAC;QACtD0Y,OAAO,CAAC/hC,MAAM,GAAGs/B,WAAW;QAC5B,OAAOyC,OAAO;MAChB;MAEA,SAASQ,YAAYA,CAACjD,WAAW,EAAEpjC,OAAO,EAAEsmC,MAAM,EAAErkB,KAAK,EAAE;QACzD,IACEjiB,OAAO,KAAK,IAAI,IAChBA,OAAO,CAAC+D,GAAG,KAAKpD,UAAU,IAC1BX,OAAO,CAAC+E,SAAS,CAACwhC,aAAa,KAAKD,MAAM,CAACC,aAAa,IACxDvmC,OAAO,CAAC+E,SAAS,CAACyhC,cAAc,KAAKF,MAAM,CAACE,cAAc,EAC1D;UAEA,IAAIX,OAAO,GAAGY,qBAAqB,CAACH,MAAM,EAAElD,WAAW,CAACpS,IAAI,EAAE/O,KAAK,CAAC;UACpE4jB,OAAO,CAAC/hC,MAAM,GAAGs/B,WAAW;UAC5B,OAAOyC,OAAO;QAChB,CAAC,MAAM;UAEL,IAAIE,QAAQ,GAAGb,QAAQ,CAACllC,OAAO,EAAEsmC,MAAM,CAAChpB,QAAQ,IAAI,EAAE,CAAC;UACvDyoB,QAAQ,CAACjiC,MAAM,GAAGs/B,WAAW;UAC7B,OAAO2C,QAAQ;QACjB;MACF;MAEA,SAASG,cAAcA,CAAC9C,WAAW,EAAEpjC,OAAO,EAAE0mC,QAAQ,EAAEzkB,KAAK,EAAE9T,GAAG,EAAE;QAClE,IAAInO,OAAO,KAAK,IAAI,IAAIA,OAAO,CAAC+D,GAAG,KAAKjD,QAAQ,EAAE;UAEhD,IAAI+kC,OAAO,GAAGc,uBAAuB,CACnCD,QAAQ,EACRtD,WAAW,CAACpS,IAAI,EAChB/O,KAAK,EACL9T,GACF,CAAC;UACD03B,OAAO,CAAC/hC,MAAM,GAAGs/B,WAAW;UAC5B,OAAOyC,OAAO;QAChB,CAAC,MAAM;UAEL,IAAIE,QAAQ,GAAGb,QAAQ,CAACllC,OAAO,EAAE0mC,QAAQ,CAAC;UAC1CX,QAAQ,CAACjiC,MAAM,GAAGs/B,WAAW;UAC7B,OAAO2C,QAAQ;QACjB;MACF;MAEA,SAASa,WAAWA,CAACxD,WAAW,EAAEc,QAAQ,EAAEjiB,KAAK,EAAE;QACjD,IACG,OAAOiiB,QAAQ,KAAK,QAAQ,IAAIA,QAAQ,KAAK,EAAE,IAChD,OAAOA,QAAQ,KAAK,QAAQ,EAC5B;UAIA,IAAI2B,OAAO,GAAGC,mBAAmB,CAC/B,EAAE,GAAG5B,QAAQ,EACbd,WAAW,CAACpS,IAAI,EAChB/O,KACF,CAAC;UACD4jB,OAAO,CAAC/hC,MAAM,GAAGs/B,WAAW;UAC5B,OAAOyC,OAAO;QAChB;QAEA,IAAI,OAAO3B,QAAQ,KAAK,QAAQ,IAAIA,QAAQ,KAAK,IAAI,EAAE;UACrD,QAAQA,QAAQ,CAAChzB,QAAQ;YACvB,KAAKnC,kBAAkB;cAAE;gBACvB,IAAI83B,QAAQ,GAAGT,sBAAsB,CACnClC,QAAQ,EACRd,WAAW,CAACpS,IAAI,EAChB/O,KACF,CAAC;gBAED4kB,QAAQ,CAACjD,GAAG,GAAGF,SAAS,CAACN,WAAW,EAAE,IAAI,EAAEc,QAAQ,CAAC;gBACrD2C,QAAQ,CAAC/iC,MAAM,GAAGs/B,WAAW;gBAC7B,OAAOyD,QAAQ;cACjB;YAEA,KAAK33B,iBAAiB;cAAE;gBACtB,IAAI43B,SAAS,GAAGL,qBAAqB,CACnCvC,QAAQ,EACRd,WAAW,CAACpS,IAAI,EAChB/O,KACF,CAAC;gBAED6kB,SAAS,CAAChjC,MAAM,GAAGs/B,WAAW;gBAC9B,OAAO0D,SAAS;cAClB;YAEA,KAAKl3B,eAAe;cAAE;gBACpB,IAAI4B,OAAO,GAAG0yB,QAAQ,CAACzyB,QAAQ;gBAC/B,IAAIC,IAAI,GAAGwyB,QAAQ,CAACvyB,KAAK;gBACzB,OAAOi1B,WAAW,CAACxD,WAAW,EAAE1xB,IAAI,CAACF,OAAO,CAAC,EAAEyQ,KAAK,CAAC;cACvD;UACF;UAEA,IAAItrB,OAAO,CAACutC,QAAQ,CAAC,IAAI5zB,aAAa,CAAC4zB,QAAQ,CAAC,EAAE;YAChD,IAAI6C,SAAS,GAAGJ,uBAAuB,CACrCzC,QAAQ,EACRd,WAAW,CAACpS,IAAI,EAChB/O,KAAK,EACL,IACF,CAAC;YAED8kB,SAAS,CAACjjC,MAAM,GAAGs/B,WAAW;YAC9B,OAAO2D,SAAS;UAClB;UAIA,IAAI,OAAO7C,QAAQ,CAAC7L,IAAI,KAAK,UAAU,EAAE;YACvC,IAAIL,QAAQ,GAAGkM,QAAQ;YACvB,OAAO0C,WAAW,CAACxD,WAAW,EAAEK,cAAc,CAACzL,QAAQ,CAAC,EAAE/V,KAAK,CAAC;UAClE;UAEA,IAAIiiB,QAAQ,CAAChzB,QAAQ,KAAK3B,kBAAkB,EAAE;YAC5C,IAAI1b,OAAO,GAAGqwC,QAAQ;YACtB,OAAO0C,WAAW,CAChBxD,WAAW,EACX4D,8BAA8B,CAAC5D,WAAW,EAAEvvC,OAAO,EAAEouB,KAAK,CAAC,EAC3DA,KACF,CAAC;UACH;UAEAgiB,wBAAwB,CAACb,WAAW,EAAEc,QAAQ,CAAC;QACjD;QAEA;UACE,IAAI,OAAOA,QAAQ,KAAK,UAAU,EAAE;YAClCG,kBAAkB,CAACjB,WAAW,CAAC;UACjC;QACF;QAEA,OAAO,IAAI;MACb;MAEA,SAAS6D,UAAUA,CAAC7D,WAAW,EAAE8D,QAAQ,EAAEhD,QAAQ,EAAEjiB,KAAK,EAAE;QAE1D,IAAI9T,GAAG,GAAG+4B,QAAQ,KAAK,IAAI,GAAGA,QAAQ,CAAC/4B,GAAG,GAAG,IAAI;QAEjD,IACG,OAAO+1B,QAAQ,KAAK,QAAQ,IAAIA,QAAQ,KAAK,EAAE,IAChD,OAAOA,QAAQ,KAAK,QAAQ,EAC5B;UAIA,IAAI/1B,GAAG,KAAK,IAAI,EAAE;YAChB,OAAO,IAAI;UACb;UAEA,OAAOw3B,cAAc,CAACvC,WAAW,EAAE8D,QAAQ,EAAE,EAAE,GAAGhD,QAAQ,EAAEjiB,KAAK,CAAC;QACpE;QAEA,IAAI,OAAOiiB,QAAQ,KAAK,QAAQ,IAAIA,QAAQ,KAAK,IAAI,EAAE;UACrD,QAAQA,QAAQ,CAAChzB,QAAQ;YACvB,KAAKnC,kBAAkB;cAAE;gBACvB,IAAIm1B,QAAQ,CAAC/1B,GAAG,KAAKA,GAAG,EAAE;kBACxB,OAAO63B,aAAa,CAAC5C,WAAW,EAAE8D,QAAQ,EAAEhD,QAAQ,EAAEjiB,KAAK,CAAC;gBAC9D,CAAC,MAAM;kBACL,OAAO,IAAI;gBACb;cACF;YAEA,KAAK/S,iBAAiB;cAAE;gBACtB,IAAIg1B,QAAQ,CAAC/1B,GAAG,KAAKA,GAAG,EAAE;kBACxB,OAAOk4B,YAAY,CAACjD,WAAW,EAAE8D,QAAQ,EAAEhD,QAAQ,EAAEjiB,KAAK,CAAC;gBAC7D,CAAC,MAAM;kBACL,OAAO,IAAI;gBACb;cACF;YAEA,KAAKrS,eAAe;cAAE;gBACpB,IAAI4B,OAAO,GAAG0yB,QAAQ,CAACzyB,QAAQ;gBAC/B,IAAIC,IAAI,GAAGwyB,QAAQ,CAACvyB,KAAK;gBACzB,OAAOs1B,UAAU,CAAC7D,WAAW,EAAE8D,QAAQ,EAAEx1B,IAAI,CAACF,OAAO,CAAC,EAAEyQ,KAAK,CAAC;cAChE;UACF;UAEA,IAAItrB,OAAO,CAACutC,QAAQ,CAAC,IAAI5zB,aAAa,CAAC4zB,QAAQ,CAAC,EAAE;YAChD,IAAI/1B,GAAG,KAAK,IAAI,EAAE;cAChB,OAAO,IAAI;YACb;YAEA,OAAO+3B,cAAc,CAAC9C,WAAW,EAAE8D,QAAQ,EAAEhD,QAAQ,EAAEjiB,KAAK,EAAE,IAAI,CAAC;UACrE;UAIA,IAAI,OAAOiiB,QAAQ,CAAC7L,IAAI,KAAK,UAAU,EAAE;YACvC,IAAIL,QAAQ,GAAGkM,QAAQ;YACvB,OAAO+C,UAAU,CACf7D,WAAW,EACX8D,QAAQ,EACRzD,cAAc,CAACzL,QAAQ,CAAC,EACxB/V,KACF,CAAC;UACH;UAEA,IAAIiiB,QAAQ,CAAChzB,QAAQ,KAAK3B,kBAAkB,EAAE;YAC5C,IAAI1b,OAAO,GAAGqwC,QAAQ;YACtB,OAAO+C,UAAU,CACf7D,WAAW,EACX8D,QAAQ,EACRF,8BAA8B,CAAC5D,WAAW,EAAEvvC,OAAO,EAAEouB,KAAK,CAAC,EAC3DA,KACF,CAAC;UACH;UAEAgiB,wBAAwB,CAACb,WAAW,EAAEc,QAAQ,CAAC;QACjD;QAEA;UACE,IAAI,OAAOA,QAAQ,KAAK,UAAU,EAAE;YAClCG,kBAAkB,CAACjB,WAAW,CAAC;UACjC;QACF;QAEA,OAAO,IAAI;MACb;MAEA,SAAS+D,aAAaA,CACpBnC,gBAAgB,EAChB5B,WAAW,EACXgE,MAAM,EACNlD,QAAQ,EACRjiB,KAAK,EACL;QACA,IACG,OAAOiiB,QAAQ,KAAK,QAAQ,IAAIA,QAAQ,KAAK,EAAE,IAChD,OAAOA,QAAQ,KAAK,QAAQ,EAC5B;UAGA,IAAImD,YAAY,GAAGrC,gBAAgB,CAACzpC,GAAG,CAAC6rC,MAAM,CAAC,IAAI,IAAI;UACvD,OAAOzB,cAAc,CACnBvC,WAAW,EACXiE,YAAY,EACZ,EAAE,GAAGnD,QAAQ,EACbjiB,KACF,CAAC;QACH;QAEA,IAAI,OAAOiiB,QAAQ,KAAK,QAAQ,IAAIA,QAAQ,KAAK,IAAI,EAAE;UACrD,QAAQA,QAAQ,CAAChzB,QAAQ;YACvB,KAAKnC,kBAAkB;cAAE;gBACvB,IAAIu4B,aAAa,GACftC,gBAAgB,CAACzpC,GAAG,CAClB2oC,QAAQ,CAAC/1B,GAAG,KAAK,IAAI,GAAGi5B,MAAM,GAAGlD,QAAQ,CAAC/1B,GAC5C,CAAC,IAAI,IAAI;gBAEX,OAAO63B,aAAa,CAAC5C,WAAW,EAAEkE,aAAa,EAAEpD,QAAQ,EAAEjiB,KAAK,CAAC;cACnE;YAEA,KAAK/S,iBAAiB;cAAE;gBACtB,IAAIq4B,cAAc,GAChBvC,gBAAgB,CAACzpC,GAAG,CAClB2oC,QAAQ,CAAC/1B,GAAG,KAAK,IAAI,GAAGi5B,MAAM,GAAGlD,QAAQ,CAAC/1B,GAC5C,CAAC,IAAI,IAAI;gBAEX,OAAOk4B,YAAY,CAACjD,WAAW,EAAEmE,cAAc,EAAErD,QAAQ,EAAEjiB,KAAK,CAAC;cACnE;YAEA,KAAKrS,eAAe;cAClB,IAAI4B,OAAO,GAAG0yB,QAAQ,CAACzyB,QAAQ;cAC/B,IAAIC,IAAI,GAAGwyB,QAAQ,CAACvyB,KAAK;cACzB,OAAOw1B,aAAa,CAClBnC,gBAAgB,EAChB5B,WAAW,EACXgE,MAAM,EACN11B,IAAI,CAACF,OAAO,CAAC,EACbyQ,KACF,CAAC;UACL;UAEA,IAAItrB,OAAO,CAACutC,QAAQ,CAAC,IAAI5zB,aAAa,CAAC4zB,QAAQ,CAAC,EAAE;YAChD,IAAIsD,cAAc,GAAGxC,gBAAgB,CAACzpC,GAAG,CAAC6rC,MAAM,CAAC,IAAI,IAAI;YAEzD,OAAOlB,cAAc,CACnB9C,WAAW,EACXoE,cAAc,EACdtD,QAAQ,EACRjiB,KAAK,EACL,IACF,CAAC;UACH;UAIA,IAAI,OAAOiiB,QAAQ,CAAC7L,IAAI,KAAK,UAAU,EAAE;YACvC,IAAIL,QAAQ,GAAGkM,QAAQ;YACvB,OAAOiD,aAAa,CAClBnC,gBAAgB,EAChB5B,WAAW,EACXgE,MAAM,EACN3D,cAAc,CAACzL,QAAQ,CAAC,EACxB/V,KACF,CAAC;UACH;UAEA,IAAIiiB,QAAQ,CAAChzB,QAAQ,KAAK3B,kBAAkB,EAAE;YAC5C,IAAI1b,OAAO,GAAGqwC,QAAQ;YACtB,OAAOiD,aAAa,CAClBnC,gBAAgB,EAChB5B,WAAW,EACXgE,MAAM,EACNJ,8BAA8B,CAAC5D,WAAW,EAAEvvC,OAAO,EAAEouB,KAAK,CAAC,EAC3DA,KACF,CAAC;UACH;UAEAgiB,wBAAwB,CAACb,WAAW,EAAEc,QAAQ,CAAC;QACjD;QAEA;UACE,IAAI,OAAOA,QAAQ,KAAK,UAAU,EAAE;YAClCG,kBAAkB,CAACjB,WAAW,CAAC;UACjC;QACF;QAEA,OAAO,IAAI;MACb;MAKA,SAASqE,gBAAgBA,CAAClyB,KAAK,EAAEmyB,SAAS,EAAEtE,WAAW,EAAE;QACvD;UACE,IAAI,OAAO7tB,KAAK,KAAK,QAAQ,IAAIA,KAAK,KAAK,IAAI,EAAE;YAC/C,OAAOmyB,SAAS;UAClB;UAEA,QAAQnyB,KAAK,CAACrE,QAAQ;YACpB,KAAKnC,kBAAkB;YACvB,KAAKG,iBAAiB;cACpBi0B,iBAAiB,CAAC5tB,KAAK,EAAE6tB,WAAW,CAAC;cACrC,IAAIj1B,GAAG,GAAGoH,KAAK,CAACpH,GAAG;cAEnB,IAAI,OAAOA,GAAG,KAAK,QAAQ,EAAE;gBAC3B;cACF;cAEA,IAAIu5B,SAAS,KAAK,IAAI,EAAE;gBACtBA,SAAS,GAAG,IAAI5I,GAAG,CAAC,CAAC;gBACrB4I,SAAS,CAAC1gB,GAAG,CAAC7Y,GAAG,CAAC;gBAClB;cACF;cAEA,IAAI,CAACu5B,SAAS,CAACtgB,GAAG,CAACjZ,GAAG,CAAC,EAAE;gBACvBu5B,SAAS,CAAC1gB,GAAG,CAAC7Y,GAAG,CAAC;gBAClB;cACF;cAEAjc,KAAK,CACH,oDAAoD,GAClD,mEAAmE,GACnE,2DAA2D,GAC3D,8DAA8D,GAC9D,mCAAmC,EACrCic,GACF,CAAC;cAED;YAEF,KAAKyB,eAAe;cAClB,IAAI4B,OAAO,GAAG+D,KAAK,CAAC9D,QAAQ;cAC5B,IAAIC,IAAI,GAAG6D,KAAK,CAAC5D,KAAK;cACtB81B,gBAAgB,CAAC/1B,IAAI,CAACF,OAAO,CAAC,EAAEk2B,SAAS,EAAEtE,WAAW,CAAC;cACvD;UACJ;QACF;QAEA,OAAOsE,SAAS;MAClB;MAEA,SAASC,sBAAsBA,CAC7BvE,WAAW,EACX0B,iBAAiB,EACjB8C,WAAW,EACX3lB,KAAK,EACL;QAgBA;UAEE,IAAIylB,SAAS,GAAG,IAAI;UAEpB,KAAK,IAAIvvC,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGyvC,WAAW,CAAC/1C,MAAM,EAAEsG,CAAC,EAAE,EAAE;YAC3C,IAAIod,KAAK,GAAGqyB,WAAW,CAACzvC,CAAC,CAAC;YAC1BuvC,SAAS,GAAGD,gBAAgB,CAAClyB,KAAK,EAAEmyB,SAAS,EAAEtE,WAAW,CAAC;UAC7D;QACF;QAEA,IAAIyE,mBAAmB,GAAG,IAAI;QAC9B,IAAIC,gBAAgB,GAAG,IAAI;QAC3B,IAAIZ,QAAQ,GAAGpC,iBAAiB;QAChC,IAAIS,eAAe,GAAG,CAAC;QACvB,IAAI6B,MAAM,GAAG,CAAC;QACd,IAAIW,YAAY,GAAG,IAAI;QAEvB,OAAOb,QAAQ,KAAK,IAAI,IAAIE,MAAM,GAAGQ,WAAW,CAAC/1C,MAAM,EAAEu1C,MAAM,EAAE,EAAE;UACjE,IAAIF,QAAQ,CAACz6B,KAAK,GAAG26B,MAAM,EAAE;YAC3BW,YAAY,GAAGb,QAAQ;YACvBA,QAAQ,GAAG,IAAI;UACjB,CAAC,MAAM;YACLa,YAAY,GAAGb,QAAQ,CAAC1xB,OAAO;UACjC;UAEA,IAAI8vB,QAAQ,GAAG2B,UAAU,CACvB7D,WAAW,EACX8D,QAAQ,EACRU,WAAW,CAACR,MAAM,CAAC,EACnBnlB,KACF,CAAC;UAED,IAAIqjB,QAAQ,KAAK,IAAI,EAAE;YAKrB,IAAI4B,QAAQ,KAAK,IAAI,EAAE;cACrBA,QAAQ,GAAGa,YAAY;YACzB;YAEA;UACF;UAEA,IAAItD,sBAAsB,EAAE;YAC1B,IAAIyC,QAAQ,IAAI5B,QAAQ,CAAC9gC,SAAS,KAAK,IAAI,EAAE;cAG3CkgC,WAAW,CAACtB,WAAW,EAAE8D,QAAQ,CAAC;YACpC;UACF;UAEA3B,eAAe,GAAGF,UAAU,CAACC,QAAQ,EAAEC,eAAe,EAAE6B,MAAM,CAAC;UAE/D,IAAIU,gBAAgB,KAAK,IAAI,EAAE;YAE7BD,mBAAmB,GAAGvC,QAAQ;UAChC,CAAC,MAAM;YAKLwC,gBAAgB,CAACtyB,OAAO,GAAG8vB,QAAQ;UACrC;UAEAwC,gBAAgB,GAAGxC,QAAQ;UAC3B4B,QAAQ,GAAGa,YAAY;QACzB;QAEA,IAAIX,MAAM,KAAKQ,WAAW,CAAC/1C,MAAM,EAAE;UAEjCgzC,uBAAuB,CAACzB,WAAW,EAAE8D,QAAQ,CAAC;UAE9C,OAAOW,mBAAmB;QAC5B;QAEA,IAAIX,QAAQ,KAAK,IAAI,EAAE;UAGrB,OAAOE,MAAM,GAAGQ,WAAW,CAAC/1C,MAAM,EAAEu1C,MAAM,EAAE,EAAE;YAC5C,IAAIY,SAAS,GAAGpB,WAAW,CACzBxD,WAAW,EACXwE,WAAW,CAACR,MAAM,CAAC,EACnBnlB,KACF,CAAC;YAED,IAAI+lB,SAAS,KAAK,IAAI,EAAE;cACtB;YACF;YAEAzC,eAAe,GAAGF,UAAU,CAAC2C,SAAS,EAAEzC,eAAe,EAAE6B,MAAM,CAAC;YAEhE,IAAIU,gBAAgB,KAAK,IAAI,EAAE;cAE7BD,mBAAmB,GAAGG,SAAS;YACjC,CAAC,MAAM;cACLF,gBAAgB,CAACtyB,OAAO,GAAGwyB,SAAS;YACtC;YAEAF,gBAAgB,GAAGE,SAAS;UAC9B;UAEA,OAAOH,mBAAmB;QAC5B;QAEA,IAAI7C,gBAAgB,GAAGD,oBAAoB,CAAC3B,WAAW,EAAE8D,QAAQ,CAAC;QAElE,OAAOE,MAAM,GAAGQ,WAAW,CAAC/1C,MAAM,EAAEu1C,MAAM,EAAE,EAAE;UAC5C,IAAIa,UAAU,GAAGd,aAAa,CAC5BnC,gBAAgB,EAChB5B,WAAW,EACXgE,MAAM,EACNQ,WAAW,CAACR,MAAM,CAAC,EACnBnlB,KACF,CAAC;UAED,IAAIgmB,UAAU,KAAK,IAAI,EAAE;YACvB,IAAIxD,sBAAsB,EAAE;cAC1B,IAAIwD,UAAU,CAACzjC,SAAS,KAAK,IAAI,EAAE;gBAKjCwgC,gBAAgB,CAACn6B,MAAM,CACrBo9B,UAAU,CAAC95B,GAAG,KAAK,IAAI,GAAGi5B,MAAM,GAAGa,UAAU,CAAC95B,GAChD,CAAC;cACH;YACF;YAEAo3B,eAAe,GAAGF,UAAU,CAAC4C,UAAU,EAAE1C,eAAe,EAAE6B,MAAM,CAAC;YAEjE,IAAIU,gBAAgB,KAAK,IAAI,EAAE;cAC7BD,mBAAmB,GAAGI,UAAU;YAClC,CAAC,MAAM;cACLH,gBAAgB,CAACtyB,OAAO,GAAGyyB,UAAU;YACvC;YAEAH,gBAAgB,GAAGG,UAAU;UAC/B;QACF;QAEA,IAAIxD,sBAAsB,EAAE;UAG1BO,gBAAgB,CAACrlC,OAAO,CAAC,UAAU4V,KAAK,EAAE;YACxC,OAAOmvB,WAAW,CAACtB,WAAW,EAAE7tB,KAAK,CAAC;UACxC,CAAC,CAAC;QACJ;QAEA,OAAOsyB,mBAAmB;MAC5B;MAEA,SAASK,yBAAyBA,CAChC9E,WAAW,EACX0B,iBAAiB,EACjBqD,mBAAmB,EACnBlmB,KAAK,EACL;QAGA,IAAImmB,UAAU,GAAG93B,aAAa,CAAC63B,mBAAmB,CAAC;QAEnD,IAAI,OAAOC,UAAU,KAAK,UAAU,EAAE;UACpC,MAAM,IAAIl3C,KAAK,CACb,wEAAwE,GACtE,8BACJ,CAAC;QACH;QAEA;UAGE,IACE,OAAO8d,MAAM,KAAK,UAAU,IAC5Bm5B,mBAAmB,CAACn5B,MAAM,CAAC2xB,WAAW,CAAC,KAAK,WAAW,EACvD;YACA,IAAI,CAACoC,sBAAsB,EAAE;cAC3B7wC,KAAK,CACH,oEAAoE,GAClE,iEAAiE,GACjE,4DAA4D,GAC5D,wDAAwD,GACxD,+DACJ,CAAC;YACH;YAEA6wC,sBAAsB,GAAG,IAAI;UAC/B;UAEA,IAAIoF,mBAAmB,CAACE,OAAO,KAAKD,UAAU,EAAE;YAC9C,IAAI,CAACtF,gBAAgB,EAAE;cACrB5wC,KAAK,CACH,2CAA2C,GACzC,8CACJ,CAAC;YACH;YAEA4wC,gBAAgB,GAAG,IAAI;UACzB;UAGA,IAAIwF,YAAY,GAAGF,UAAU,CAACl1C,IAAI,CAACi1C,mBAAmB,CAAC;UAEvD,IAAIG,YAAY,EAAE;YAChB,IAAIZ,SAAS,GAAG,IAAI;YAEpB,IAAIa,KAAK,GAAGD,YAAY,CAACroC,IAAI,CAAC,CAAC;YAE/B,OAAO,CAACsoC,KAAK,CAACC,IAAI,EAAED,KAAK,GAAGD,YAAY,CAACroC,IAAI,CAAC,CAAC,EAAE;cAC/C,IAAIsV,KAAK,GAAGgzB,KAAK,CAACl6B,KAAK;cACvBq5B,SAAS,GAAGD,gBAAgB,CAAClyB,KAAK,EAAEmyB,SAAS,EAAEtE,WAAW,CAAC;YAC7D;UACF;QACF;QAEA,IAAIwE,WAAW,GAAGQ,UAAU,CAACl1C,IAAI,CAACi1C,mBAAmB,CAAC;QAEtD,IAAIP,WAAW,IAAI,IAAI,EAAE;UACvB,MAAM,IAAI12C,KAAK,CAAC,0CAA0C,CAAC;QAC7D;QAEA,IAAI22C,mBAAmB,GAAG,IAAI;QAC9B,IAAIC,gBAAgB,GAAG,IAAI;QAC3B,IAAIZ,QAAQ,GAAGpC,iBAAiB;QAChC,IAAIS,eAAe,GAAG,CAAC;QACvB,IAAI6B,MAAM,GAAG,CAAC;QACd,IAAIW,YAAY,GAAG,IAAI;QACvB,IAAIU,IAAI,GAAGb,WAAW,CAAC3nC,IAAI,CAAC,CAAC;QAE7B,OAEEinC,QAAQ,KAAK,IAAI,IAAI,CAACuB,IAAI,CAACD,IAAI,EAC/BpB,MAAM,EAAE,EAAEqB,IAAI,GAAGb,WAAW,CAAC3nC,IAAI,CAAC,CAAC,EACnC;UACA,IAAIinC,QAAQ,CAACz6B,KAAK,GAAG26B,MAAM,EAAE;YAC3BW,YAAY,GAAGb,QAAQ;YACvBA,QAAQ,GAAG,IAAI;UACjB,CAAC,MAAM;YACLa,YAAY,GAAGb,QAAQ,CAAC1xB,OAAO;UACjC;UAEA,IAAI8vB,QAAQ,GAAG2B,UAAU,CAAC7D,WAAW,EAAE8D,QAAQ,EAAEuB,IAAI,CAACp6B,KAAK,EAAE4T,KAAK,CAAC;UAEnE,IAAIqjB,QAAQ,KAAK,IAAI,EAAE;YAKrB,IAAI4B,QAAQ,KAAK,IAAI,EAAE;cACrBA,QAAQ,GAAGa,YAAY;YACzB;YAEA;UACF;UAEA,IAAItD,sBAAsB,EAAE;YAC1B,IAAIyC,QAAQ,IAAI5B,QAAQ,CAAC9gC,SAAS,KAAK,IAAI,EAAE;cAG3CkgC,WAAW,CAACtB,WAAW,EAAE8D,QAAQ,CAAC;YACpC;UACF;UAEA3B,eAAe,GAAGF,UAAU,CAACC,QAAQ,EAAEC,eAAe,EAAE6B,MAAM,CAAC;UAE/D,IAAIU,gBAAgB,KAAK,IAAI,EAAE;YAE7BD,mBAAmB,GAAGvC,QAAQ;UAChC,CAAC,MAAM;YAKLwC,gBAAgB,CAACtyB,OAAO,GAAG8vB,QAAQ;UACrC;UAEAwC,gBAAgB,GAAGxC,QAAQ;UAC3B4B,QAAQ,GAAGa,YAAY;QACzB;QAEA,IAAIU,IAAI,CAACD,IAAI,EAAE;UAEb3D,uBAAuB,CAACzB,WAAW,EAAE8D,QAAQ,CAAC;UAE9C,OAAOW,mBAAmB;QAC5B;QAEA,IAAIX,QAAQ,KAAK,IAAI,EAAE;UAGrB,OAAO,CAACuB,IAAI,CAACD,IAAI,EAAEpB,MAAM,EAAE,EAAEqB,IAAI,GAAGb,WAAW,CAAC3nC,IAAI,CAAC,CAAC,EAAE;YACtD,IAAIyoC,UAAU,GAAG9B,WAAW,CAACxD,WAAW,EAAEqF,IAAI,CAACp6B,KAAK,EAAE4T,KAAK,CAAC;YAE5D,IAAIymB,UAAU,KAAK,IAAI,EAAE;cACvB;YACF;YAEAnD,eAAe,GAAGF,UAAU,CAACqD,UAAU,EAAEnD,eAAe,EAAE6B,MAAM,CAAC;YAEjE,IAAIU,gBAAgB,KAAK,IAAI,EAAE;cAE7BD,mBAAmB,GAAGa,UAAU;YAClC,CAAC,MAAM;cACLZ,gBAAgB,CAACtyB,OAAO,GAAGkzB,UAAU;YACvC;YAEAZ,gBAAgB,GAAGY,UAAU;UAC/B;UAEA,OAAOb,mBAAmB;QAC5B;QAEA,IAAI7C,gBAAgB,GAAGD,oBAAoB,CAAC3B,WAAW,EAAE8D,QAAQ,CAAC;QAElE,OAAO,CAACuB,IAAI,CAACD,IAAI,EAAEpB,MAAM,EAAE,EAAEqB,IAAI,GAAGb,WAAW,CAAC3nC,IAAI,CAAC,CAAC,EAAE;UACtD,IAAI0oC,UAAU,GAAGxB,aAAa,CAC5BnC,gBAAgB,EAChB5B,WAAW,EACXgE,MAAM,EACNqB,IAAI,CAACp6B,KAAK,EACV4T,KACF,CAAC;UAED,IAAI0mB,UAAU,KAAK,IAAI,EAAE;YACvB,IAAIlE,sBAAsB,EAAE;cAC1B,IAAIkE,UAAU,CAACnkC,SAAS,KAAK,IAAI,EAAE;gBAKjCwgC,gBAAgB,CAACn6B,MAAM,CACrB89B,UAAU,CAACx6B,GAAG,KAAK,IAAI,GAAGi5B,MAAM,GAAGuB,UAAU,CAACx6B,GAChD,CAAC;cACH;YACF;YAEAo3B,eAAe,GAAGF,UAAU,CAACsD,UAAU,EAAEpD,eAAe,EAAE6B,MAAM,CAAC;YAEjE,IAAIU,gBAAgB,KAAK,IAAI,EAAE;cAC7BD,mBAAmB,GAAGc,UAAU;YAClC,CAAC,MAAM;cACLb,gBAAgB,CAACtyB,OAAO,GAAGmzB,UAAU;YACvC;YAEAb,gBAAgB,GAAGa,UAAU;UAC/B;QACF;QAEA,IAAIlE,sBAAsB,EAAE;UAG1BO,gBAAgB,CAACrlC,OAAO,CAAC,UAAU4V,KAAK,EAAE;YACxC,OAAOmvB,WAAW,CAACtB,WAAW,EAAE7tB,KAAK,CAAC;UACxC,CAAC,CAAC;QACJ;QAEA,OAAOsyB,mBAAmB;MAC5B;MAEA,SAASe,uBAAuBA,CAC9BxF,WAAW,EACX0B,iBAAiB,EACjBc,WAAW,EACX3jB,KAAK,EACL;QAGA,IAAI6iB,iBAAiB,KAAK,IAAI,IAAIA,iBAAiB,CAAC/gC,GAAG,KAAKlD,QAAQ,EAAE;UAGpEgkC,uBAAuB,CAACzB,WAAW,EAAE0B,iBAAiB,CAACtvB,OAAO,CAAC;UAC/D,IAAIuwB,QAAQ,GAAGb,QAAQ,CAACJ,iBAAiB,EAAEc,WAAW,CAAC;UACvDG,QAAQ,CAACjiC,MAAM,GAAGs/B,WAAW;UAC7B,OAAO2C,QAAQ;QACjB;QAGAlB,uBAAuB,CAACzB,WAAW,EAAE0B,iBAAiB,CAAC;QACvD,IAAIe,OAAO,GAAGC,mBAAmB,CAACF,WAAW,EAAExC,WAAW,CAACpS,IAAI,EAAE/O,KAAK,CAAC;QACvE4jB,OAAO,CAAC/hC,MAAM,GAAGs/B,WAAW;QAC5B,OAAOyC,OAAO;MAChB;MAEA,SAASgD,sBAAsBA,CAC7BzF,WAAW,EACX0B,iBAAiB,EACjB3X,OAAO,EACPlL,KAAK,EACL;QACA,IAAI9T,GAAG,GAAGgf,OAAO,CAAChf,GAAG;QACrB,IAAIoH,KAAK,GAAGuvB,iBAAiB;QAE7B,OAAOvvB,KAAK,KAAK,IAAI,EAAE;UAGrB,IAAIA,KAAK,CAACpH,GAAG,KAAKA,GAAG,EAAE;YACrB,IAAI83B,WAAW,GAAG9Y,OAAO,CAACp1B,IAAI;YAE9B,IAAIkuC,WAAW,KAAK92B,mBAAmB,EAAE;cACvC,IAAIoG,KAAK,CAACxR,GAAG,KAAKjD,QAAQ,EAAE;gBAC1B+jC,uBAAuB,CAACzB,WAAW,EAAE7tB,KAAK,CAACC,OAAO,CAAC;gBACnD,IAAIuwB,QAAQ,GAAGb,QAAQ,CAAC3vB,KAAK,EAAE4X,OAAO,CAACnoB,KAAK,CAACsY,QAAQ,CAAC;gBACtDyoB,QAAQ,CAACjiC,MAAM,GAAGs/B,WAAW;gBAE7B;kBACE2C,QAAQ,CAAC/I,WAAW,GAAG7P,OAAO,CAACC,MAAM;gBACvC;gBAEA,OAAO2Y,QAAQ;cACjB;YACF,CAAC,MAAM;cACL,IACExwB,KAAK,CAAC0wB,WAAW,KAAKA,WAAW,IACjCE,iCAAiC,CAAC5wB,KAAK,EAAE4X,OAAO,CAAC,IAIhD,OAAO8Y,WAAW,KAAK,QAAQ,IAC9BA,WAAW,KAAK,IAAI,IACpBA,WAAW,CAAC/0B,QAAQ,KAAKtB,eAAe,IACxC00B,WAAW,CAAC2B,WAAW,CAAC,KAAK1wB,KAAK,CAACxd,IAAK,EAC1C;gBACA8sC,uBAAuB,CAACzB,WAAW,EAAE7tB,KAAK,CAACC,OAAO,CAAC;gBAEnD,IAAIszB,SAAS,GAAG5D,QAAQ,CAAC3vB,KAAK,EAAE4X,OAAO,CAACnoB,KAAK,CAAC;gBAE9C8jC,SAAS,CAAClF,GAAG,GAAGF,SAAS,CAACN,WAAW,EAAE7tB,KAAK,EAAE4X,OAAO,CAAC;gBACtD2b,SAAS,CAAChlC,MAAM,GAAGs/B,WAAW;gBAE9B;kBACE0F,SAAS,CAAC9L,WAAW,GAAG7P,OAAO,CAACC,MAAM;gBACxC;gBAEA,OAAO0b,SAAS;cAClB;YACF;YAEAjE,uBAAuB,CAACzB,WAAW,EAAE7tB,KAAK,CAAC;YAC3C;UACF,CAAC,MAAM;YACLmvB,WAAW,CAACtB,WAAW,EAAE7tB,KAAK,CAAC;UACjC;UAEAA,KAAK,GAAGA,KAAK,CAACC,OAAO;QACvB;QAEA,IAAI2X,OAAO,CAACp1B,IAAI,KAAKoX,mBAAmB,EAAE;UACxC,IAAI02B,OAAO,GAAGc,uBAAuB,CACnCxZ,OAAO,CAACnoB,KAAK,CAACsY,QAAQ,EACtB8lB,WAAW,CAACpS,IAAI,EAChB/O,KAAK,EACLkL,OAAO,CAAChf,GACV,CAAC;UACD03B,OAAO,CAAC/hC,MAAM,GAAGs/B,WAAW;UAC5B,OAAOyC,OAAO;QAChB,CAAC,MAAM;UACL,IAAIkD,SAAS,GAAG3C,sBAAsB,CACpCjZ,OAAO,EACPiW,WAAW,CAACpS,IAAI,EAChB/O,KACF,CAAC;UAED8mB,SAAS,CAACnF,GAAG,GAAGF,SAAS,CAACN,WAAW,EAAE0B,iBAAiB,EAAE3X,OAAO,CAAC;UAClE4b,SAAS,CAACjlC,MAAM,GAAGs/B,WAAW;UAC9B,OAAO2F,SAAS;QAClB;MACF;MAEA,SAASC,qBAAqBA,CAC5B5F,WAAW,EACX0B,iBAAiB,EACjBwB,MAAM,EACNrkB,KAAK,EACL;QACA,IAAI9T,GAAG,GAAGm4B,MAAM,CAACn4B,GAAG;QACpB,IAAIoH,KAAK,GAAGuvB,iBAAiB;QAE7B,OAAOvvB,KAAK,KAAK,IAAI,EAAE;UAGrB,IAAIA,KAAK,CAACpH,GAAG,KAAKA,GAAG,EAAE;YACrB,IACEoH,KAAK,CAACxR,GAAG,KAAKpD,UAAU,IACxB4U,KAAK,CAACxQ,SAAS,CAACwhC,aAAa,KAAKD,MAAM,CAACC,aAAa,IACtDhxB,KAAK,CAACxQ,SAAS,CAACyhC,cAAc,KAAKF,MAAM,CAACE,cAAc,EACxD;cACA3B,uBAAuB,CAACzB,WAAW,EAAE7tB,KAAK,CAACC,OAAO,CAAC;cACnD,IAAIuwB,QAAQ,GAAGb,QAAQ,CAAC3vB,KAAK,EAAE+wB,MAAM,CAAChpB,QAAQ,IAAI,EAAE,CAAC;cACrDyoB,QAAQ,CAACjiC,MAAM,GAAGs/B,WAAW;cAC7B,OAAO2C,QAAQ;YACjB,CAAC,MAAM;cACLlB,uBAAuB,CAACzB,WAAW,EAAE7tB,KAAK,CAAC;cAC3C;YACF;UACF,CAAC,MAAM;YACLmvB,WAAW,CAACtB,WAAW,EAAE7tB,KAAK,CAAC;UACjC;UAEAA,KAAK,GAAGA,KAAK,CAACC,OAAO;QACvB;QAEA,IAAIqwB,OAAO,GAAGY,qBAAqB,CAACH,MAAM,EAAElD,WAAW,CAACpS,IAAI,EAAE/O,KAAK,CAAC;QACpE4jB,OAAO,CAAC/hC,MAAM,GAAGs/B,WAAW;QAC5B,OAAOyC,OAAO;MAChB;MAIA,SAASoD,wBAAwBA,CAC/B7F,WAAW,EACX0B,iBAAiB,EACjBZ,QAAQ,EACRjiB,KAAK,EACL;QASA,IAAIinB,yBAAyB,GAC3B,OAAOhF,QAAQ,KAAK,QAAQ,IAC5BA,QAAQ,KAAK,IAAI,IACjBA,QAAQ,CAACnsC,IAAI,KAAKoX,mBAAmB,IACrC+0B,QAAQ,CAAC/1B,GAAG,KAAK,IAAI;QAEvB,IAAI+6B,yBAAyB,EAAE;UAC7BhF,QAAQ,GAAGA,QAAQ,CAACl/B,KAAK,CAACsY,QAAQ;QACpC;QAEA,IAAI,OAAO4mB,QAAQ,KAAK,QAAQ,IAAIA,QAAQ,KAAK,IAAI,EAAE;UACrD,QAAQA,QAAQ,CAAChzB,QAAQ;YACvB,KAAKnC,kBAAkB;cACrB,OAAO22B,gBAAgB,CACrBmD,sBAAsB,CACpBzF,WAAW,EACX0B,iBAAiB,EACjBZ,QAAQ,EACRjiB,KACF,CACF,CAAC;YAEH,KAAK/S,iBAAiB;cACpB,OAAOw2B,gBAAgB,CACrBsD,qBAAqB,CACnB5F,WAAW,EACX0B,iBAAiB,EACjBZ,QAAQ,EACRjiB,KACF,CACF,CAAC;YAEH,KAAKrS,eAAe;cAClB,IAAI4B,OAAO,GAAG0yB,QAAQ,CAACzyB,QAAQ;cAC/B,IAAIC,IAAI,GAAGwyB,QAAQ,CAACvyB,KAAK;cAEzB,OAAOw3B,oBAAoB,CACzB/F,WAAW,EACX0B,iBAAiB,EACjBpzB,IAAI,CAACF,OAAO,CAAC,EACbyQ,KACF,CAAC;UACL;UAEA,IAAItrB,OAAO,CAACutC,QAAQ,CAAC,EAAE;YACrB,OAAOyD,sBAAsB,CAC3BvE,WAAW,EACX0B,iBAAiB,EACjBZ,QAAQ,EACRjiB,KACF,CAAC;UACH;UAEA,IAAI3R,aAAa,CAAC4zB,QAAQ,CAAC,EAAE;YAC3B,OAAOgE,yBAAyB,CAC9B9E,WAAW,EACX0B,iBAAiB,EACjBZ,QAAQ,EACRjiB,KACF,CAAC;UACH;UAiBA,IAAI,OAAOiiB,QAAQ,CAAC7L,IAAI,KAAK,UAAU,EAAE;YACvC,IAAIL,QAAQ,GAAGkM,QAAQ;YACvB,OAAO+E,wBAAwB,CAC7B7F,WAAW,EACX0B,iBAAiB,EACjBrB,cAAc,CAACzL,QAAQ,CAAC,EACxB/V,KACF,CAAC;UACH;UAEA,IAAIiiB,QAAQ,CAAChzB,QAAQ,KAAK3B,kBAAkB,EAAE;YAC5C,IAAI1b,OAAO,GAAGqwC,QAAQ;YACtB,OAAO+E,wBAAwB,CAC7B7F,WAAW,EACX0B,iBAAiB,EACjBkC,8BAA8B,CAAC5D,WAAW,EAAEvvC,OAAO,EAAEouB,KAAK,CAAC,EAC3DA,KACF,CAAC;UACH;UAEAgiB,wBAAwB,CAACb,WAAW,EAAEc,QAAQ,CAAC;QACjD;QAEA,IACG,OAAOA,QAAQ,KAAK,QAAQ,IAAIA,QAAQ,KAAK,EAAE,IAChD,OAAOA,QAAQ,KAAK,QAAQ,EAC5B;UACA,OAAOwB,gBAAgB,CACrBkD,uBAAuB,CACrBxF,WAAW,EACX0B,iBAAiB,EACjB,EAAE,GAAGZ,QAAQ,EACbjiB,KACF,CACF,CAAC;QACH;QAEA;UACE,IAAI,OAAOiiB,QAAQ,KAAK,UAAU,EAAE;YAClCG,kBAAkB,CAACjB,WAAW,CAAC;UACjC;QACF;QAEA,OAAOyB,uBAAuB,CAACzB,WAAW,EAAE0B,iBAAiB,CAAC;MAChE;MAEA,SAASqE,oBAAoBA,CAC3B/F,WAAW,EACX0B,iBAAiB,EACjBZ,QAAQ,EACRjiB,KAAK,EACL;QAGA4gB,sBAAsB,GAAG,CAAC;QAC1B,IAAIuG,eAAe,GAAGH,wBAAwB,CAC5C7F,WAAW,EACX0B,iBAAiB,EACjBZ,QAAQ,EACRjiB,KACF,CAAC;QACD2gB,eAAe,GAAG,IAAI;QAGtB,OAAOwG,eAAe;MACxB;MAEA,OAAOD,oBAAoB;IAC7B;IAEA,IAAIA,oBAAoB,GAAG3E,qBAAqB,CAAC,IAAI,CAAC;IACtD,IAAI6E,gBAAgB,GAAG7E,qBAAqB,CAAC,KAAK,CAAC;IACnD,SAAS8E,4BAA4BA,CAAA,EAAG;MAEtC1G,eAAe,GAAG,IAAI;MACtBC,sBAAsB,GAAG,CAAC;IAC5B;IACA,SAAS0G,gBAAgBA,CAACvpC,OAAO,EAAE4uB,cAAc,EAAE;MACjD,IAAI5uB,OAAO,KAAK,IAAI,IAAI4uB,cAAc,CAACrZ,KAAK,KAAKvV,OAAO,CAACuV,KAAK,EAAE;QAC9D,MAAM,IAAIrkB,KAAK,CAAC,oCAAoC,CAAC;MACvD;MAEA,IAAI09B,cAAc,CAACrZ,KAAK,KAAK,IAAI,EAAE;QACjC;MACF;MAEA,IAAIi0B,YAAY,GAAG5a,cAAc,CAACrZ,KAAK;MACvC,IAAI2uB,QAAQ,GAAGkB,oBAAoB,CACjCoE,YAAY,EACZA,YAAY,CAACrE,YACf,CAAC;MACDvW,cAAc,CAACrZ,KAAK,GAAG2uB,QAAQ;MAC/BA,QAAQ,CAACpgC,MAAM,GAAG8qB,cAAc;MAEhC,OAAO4a,YAAY,CAACh0B,OAAO,KAAK,IAAI,EAAE;QACpCg0B,YAAY,GAAGA,YAAY,CAACh0B,OAAO;QACnC0uB,QAAQ,GAAGA,QAAQ,CAAC1uB,OAAO,GAAG4vB,oBAAoB,CAChDoE,YAAY,EACZA,YAAY,CAACrE,YACf,CAAC;QACDjB,QAAQ,CAACpgC,MAAM,GAAG8qB,cAAc;MAClC;MAEAsV,QAAQ,CAAC1uB,OAAO,GAAG,IAAI;IACzB;IAEA,SAASi0B,gBAAgBA,CAAC7a,cAAc,EAAE3M,KAAK,EAAE;MAC/C,IAAI1M,KAAK,GAAGqZ,cAAc,CAACrZ,KAAK;MAEhC,OAAOA,KAAK,KAAK,IAAI,EAAE;QACrBm0B,mBAAmB,CAACn0B,KAAK,EAAE0M,KAAK,CAAC;QACjC1M,KAAK,GAAGA,KAAK,CAACC,OAAO;MACvB;IACF;IAKA,IAAIm0B,4BAA4B,GAAGzb,YAAY,CAAC,IAAI,CAAC;IACrD,IAAI0b,8BAA8B,GAAG1b,YAAY,CAAC7O,OAAO,CAAC;IAC1D,SAASwqB,iBAAiBA,CAAC73B,KAAK,EAAEne,OAAO,EAAE;MACzC,IAAIi2C,wBAAwB,GAAGC,uBAAuB,CAAC,CAAC;MACxD9tC,IAAI,CAAC2tC,8BAA8B,EAAEE,wBAAwB,EAAE93B,KAAK,CAAC;MACrE/V,IAAI,CAAC0tC,4BAA4B,EAAE91C,OAAO,EAAEme,KAAK,CAAC;MAKlDg4B,uBAAuB,CACrB9kB,UAAU,CAAC4kB,wBAAwB,EAAEj2C,OAAO,CAACo2C,SAAS,CACxD,CAAC;IACH;IACA,SAASC,yBAAyBA,CAACl4B,KAAK,EAAE;MAIxC/V,IAAI,CAAC2tC,8BAA8B,EAAEG,uBAAuB,CAAC,CAAC,EAAE/3B,KAAK,CAAC;MACtE/V,IAAI,CACF0tC,4BAA4B,EAC5BA,4BAA4B,CAAC3pC,OAAO,EACpCgS,KACF,CAAC;IACH;IACA,SAASm4B,gBAAgBA,CAACn4B,KAAK,EAAE;MAE/Bg4B,uBAAuB,CAACJ,8BAA8B,CAAC5pC,OAAO,CAAC;MAC/DjE,GAAG,CAAC4tC,4BAA4B,EAAE33B,KAAK,CAAC;MACxCjW,GAAG,CAAC6tC,8BAA8B,EAAE53B,KAAK,CAAC;IAC5C;IACA,SAASo4B,mBAAmBA,CAAA,EAAG;MAC7B,OAAOT,4BAA4B,CAAC3pC,OAAO,KAAK,IAAI;IACtD;IAIA,IAAIqqC,0BAA0B,GAAGnc,YAAY,CAAC,IAAI,CAAC;IAanD,IAAIoc,aAAa,GAAG,IAAI;IACxB,SAASC,gBAAgBA,CAAA,EAAG;MAC1B,OAAOD,aAAa;IACtB;IACA,SAASE,8BAA8BA,CAACC,OAAO,EAAE;MAE/C,IAAIzqC,OAAO,GAAGyqC,OAAO,CAACjmC,SAAS;MAI/BkmC,uBAAuB,CACrBD,OAAO,EACPE,oCAAoC,CAACC,mBAAmB,CAAC5qC,OAAO,CAClE,CAAC;MAID/D,IAAI,CAACouC,0BAA0B,EAAEI,OAAO,EAAEA,OAAO,CAAC;MAElD,IAAIH,aAAa,KAAK,IAAI,EAAE;QAC1B,IAAItqC,OAAO,KAAK,IAAI,IAAIoqC,mBAAmB,CAAC,CAAC,EAAE;UAE7CE,aAAa,GAAGG,OAAO;QACzB,CAAC,MAAM;UACL,IAAIhQ,SAAS,GAAGz6B,OAAO,CAACsxB,aAAa;UAErC,IAAImJ,SAAS,KAAK,IAAI,EAAE;YAEtB6P,aAAa,GAAGG,OAAO;UACzB;QACF;MACF;IACF;IACA,SAASI,+BAA+BA,CAAC74B,KAAK,EAAE;MAI9C84B,2BAA2B,CAAC94B,KAAK,CAAC;IACpC;IACA,SAAS+4B,4BAA4BA,CAAC/4B,KAAK,EAAE;MAC3C,IAAIA,KAAK,CAACjO,GAAG,KAAKnC,kBAAkB,EAAE;QAKpC8oC,uBAAuB,CAAC14B,KAAK,EAAE44B,mBAAmB,CAAC5qC,OAAO,CAAC;QAC3D/D,IAAI,CAACouC,0BAA0B,EAAEr4B,KAAK,EAAEA,KAAK,CAAC;QAE9C,IAAIs4B,aAAa,KAAK,IAAI,EAAC,CAAC,KACvB;UACH,IAAItqC,OAAO,GAAGgS,KAAK,CAACxN,SAAS;UAE7B,IAAIxE,OAAO,KAAK,IAAI,EAAE;YACpB,IAAIy6B,SAAS,GAAGz6B,OAAO,CAACsxB,aAAa;YAErC,IAAImJ,SAAS,KAAK,IAAI,EAAE;cAGtB6P,aAAa,GAAGt4B,KAAK;YACvB;UACF;QACF;MACF,CAAC,MAAM;QAEL84B,2BAA2B,CAAC94B,KAAK,CAAC;MACpC;IACF;IACA,SAAS84B,2BAA2BA,CAAC94B,KAAK,EAAE;MAC1C04B,uBAAuB,CAAC14B,KAAK,EAAE44B,mBAAmB,CAAC5qC,OAAO,CAAC;MAC3D/D,IAAI,CAACouC,0BAA0B,EAAEW,kBAAkB,CAAC,CAAC,EAAEh5B,KAAK,CAAC;IAC/D;IACA,SAASg5B,kBAAkBA,CAAA,EAAG;MAC5B,OAAOX,0BAA0B,CAACrqC,OAAO;IAC3C;IACA,SAASirC,kBAAkBA,CAACj5B,KAAK,EAAE;MACjCjW,GAAG,CAACsuC,0BAA0B,EAAEr4B,KAAK,CAAC;MAEtC,IAAIs4B,aAAa,KAAKt4B,KAAK,EAAE;QAE3Bs4B,aAAa,GAAG,IAAI;MACtB;MAEAY,sBAAsB,CAACl5B,KAAK,CAAC;IAC/B;IAIA,IAAIm5B,sBAAsB,GAAG,CAAC;IAC9B,IAAIC,0BAA0B,GAAG,CAAC;IAGlC,IAAIC,qBAAqB,GAAG,CAAC;IAC7B,IAAIT,mBAAmB,GAAG1c,YAAY,CAACid,sBAAsB,CAAC;IAC9D,SAASG,sBAAsBA,CAACxb,aAAa,EAAEyb,IAAI,EAAE;MACnD,OAAO,CAACzb,aAAa,GAAGyb,IAAI,MAAM,CAAC;IACrC;IACA,SAASZ,oCAAoCA,CAAC7a,aAAa,EAAE;MAC3D,OAAOA,aAAa,GAAGsb,0BAA0B;IACnD;IACA,SAASI,6BAA6BA,CAAC1b,aAAa,EAAE2b,cAAc,EAAE;MACpE,OAAQ3b,aAAa,GAAGsb,0BAA0B,GAAIK,cAAc;IACtE;IACA,SAASf,uBAAuBA,CAAC14B,KAAK,EAAE05B,UAAU,EAAE;MAClDzvC,IAAI,CAAC2uC,mBAAmB,EAAEc,UAAU,EAAE15B,KAAK,CAAC;IAC9C;IACA,SAASk5B,sBAAsBA,CAACl5B,KAAK,EAAE;MACrCjW,GAAG,CAAC6uC,mBAAmB,EAAE54B,KAAK,CAAC;IACjC;IASA,SAAS25B,kBAAkBA,CAACC,GAAG,EAAE;MAC/B,IAAIp3B,IAAI,GAAGo3B,GAAG;MAEd,OAAOp3B,IAAI,KAAK,IAAI,EAAE;QACpB,IAAIA,IAAI,CAACzQ,GAAG,KAAK3C,iBAAiB,EAAE;UAClC,IAAI8/B,KAAK,GAAG1sB,IAAI,CAAC8c,aAAa;UAE9B,IAAI4P,KAAK,KAAK,IAAI,EAAE;YAClB,IAAI2K,UAAU,GAAG3K,KAAK,CAAC2K,UAAU;YAEjC,IACEA,UAAU,KAAK,IAAI,IACnB7jB,yBAAyB,CAAC,CAAC,IAC3BC,0BAA0B,CAAC,CAAC,EAC5B;cACA,OAAOzT,IAAI;YACb;UACF;QACF,CAAC,MAAM,IACLA,IAAI,CAACzQ,GAAG,KAAKrC,qBAAqB,IAElC8S,IAAI,CAACuc,aAAa,CAAC+a,WAAW,KAAK7zC,SAAS,EAC5C;UACA,IAAI8zC,UAAU,GAAG,CAACv3B,IAAI,CAACG,KAAK,GAAGvC,UAAU,MAAMH,SAAS;UAExD,IAAI85B,UAAU,EAAE;YACd,OAAOv3B,IAAI;UACb;QACF,CAAC,MAAM,IAAIA,IAAI,CAACe,KAAK,KAAK,IAAI,EAAE;UAC9Bf,IAAI,CAACe,KAAK,CAACzR,MAAM,GAAG0Q,IAAI;UACxBA,IAAI,GAAGA,IAAI,CAACe,KAAK;UACjB;QACF;QAEA,IAAIf,IAAI,KAAKo3B,GAAG,EAAE;UAChB,OAAO,IAAI;QACb;QAEA,OAAOp3B,IAAI,CAACgB,OAAO,KAAK,IAAI,EAAE;UAC5B,IAAIhB,IAAI,CAAC1Q,MAAM,KAAK,IAAI,IAAI0Q,IAAI,CAAC1Q,MAAM,KAAK8nC,GAAG,EAAE;YAC/C,OAAO,IAAI;UACb;UAEAp3B,IAAI,GAAGA,IAAI,CAAC1Q,MAAM;QACpB;QAEA0Q,IAAI,CAACgB,OAAO,CAAC1R,MAAM,GAAG0Q,IAAI,CAAC1Q,MAAM;QACjC0Q,IAAI,GAAGA,IAAI,CAACgB,OAAO;MACrB;MAEA,OAAO,IAAI;IACb;IAEA,IAAIw2B,OAAO,GAET,CAAC;IAEH,IAAIC,SAAS,GAEX,CAAC;IAEH,IAAIC,SAAS,GAEX,CAAC;IACH,IAAIC,MAAM,GAER,CAAC;IACH,IAAIC,OAAO,GAET,CAAC;IAEH,IAAIC,wBAAwB,GAAG96C,oBAAoB,CAAC+6C,sBAAsB;MACxEC,yBAAyB,GAAGh7C,oBAAoB,CAACi7C,uBAAuB;IAC1E,IAAIC,uCAAuC;IAC3C,IAAIC,0BAA0B;IAC9B,IAAIC,gCAAgC;IACpC,IAAIC,gCAAgC;IAEpC;MACEH,uCAAuC,GAAG,IAAI3N,GAAG,CAAC,CAAC;MACnD6N,gCAAgC,GAAG,IAAI7N,GAAG,CAAC,CAAC;MAC5C8N,gCAAgC,GAAG,IAAI9N,GAAG,CAAC,CAAC;IAC9C;IAgBA,IAAI7b,WAAW,GAAG5D,OAAO;IAGzB,IAAIwtB,yBAAyB,GAAG,IAAI;IAKpC,IAAIC,WAAW,GAAG,IAAI;IACtB,IAAIC,kBAAkB,GAAG,IAAI;IAK7B,IAAIC,4BAA4B,GAAG,KAAK;IAKxC,IAAIC,0CAA0C,GAAG,KAAK;IACtD,IAAIC,mCAAmC,GAAG,KAAK;IAE/C,IAAIC,oBAAoB,GAAG,CAAC;IAC5B,IAAItL,aAAa,GAAG,IAAI;IAIxB,IAAIuL,qBAAqB,GAAG,CAAC;IAC7B,IAAIC,eAAe,GAAG,EAAE;IAExB,IAAIC,oBAAoB,GAAG,IAAI;IAI/B,IAAIC,YAAY,GAAG,IAAI;IACvB,IAAIC,uBAAuB,GAAG,CAAC,CAAC;IAIhC,IAAIC,0BAA0B,GAAG,KAAK;IAEtC,SAASC,iBAAiBA,CAAA,EAAG;MAC3B;QACE,IAAIC,QAAQ,GAAGL,oBAAoB;QAEnC,IAAIC,YAAY,KAAK,IAAI,EAAE;UACzBA,YAAY,GAAG,CAACI,QAAQ,CAAC;QAC3B,CAAC,MAAM;UACLJ,YAAY,CAACtxC,IAAI,CAAC0xC,QAAQ,CAAC;QAC7B;MACF;IACF;IAEA,SAASC,kBAAkBA,CAAA,EAAG;MAC5B;QACE,IAAID,QAAQ,GAAGL,oBAAoB;QAEnC,IAAIC,YAAY,KAAK,IAAI,EAAE;UACzBC,uBAAuB,EAAE;UAEzB,IAAID,YAAY,CAACC,uBAAuB,CAAC,KAAKG,QAAQ,EAAE;YACtDE,uBAAuB,CAACF,QAAQ,CAAC;UACnC;QACF;MACF;IACF;IAEA,SAASG,oBAAoBA,CAACC,IAAI,EAAE;MAClC;QACE,IAAIA,IAAI,KAAK91C,SAAS,IAAI81C,IAAI,KAAK,IAAI,IAAI,CAACp3C,OAAO,CAACo3C,IAAI,CAAC,EAAE;UAGzD77C,KAAK,CACH,mFAAmF,GACjF,iDAAiD,EACnDo7C,oBAAoB,EACpB,OAAOS,IACT,CAAC;QACH;MACF;IACF;IAEA,SAASF,uBAAuBA,CAACG,eAAe,EAAE;MAChD;QACE,IAAItgB,aAAa,GAAG3b,yBAAyB,CAC3C86B,yBACF,CAAC;QAED,IAAI,CAACJ,uCAAuC,CAACrlB,GAAG,CAACsG,aAAa,CAAC,EAAE;UAC/D+e,uCAAuC,CAACzlB,GAAG,CAAC0G,aAAa,CAAC;UAE1D,IAAI6f,YAAY,KAAK,IAAI,EAAE;YACzB,IAAIU,KAAK,GAAG,EAAE;YACd,IAAIC,iBAAiB,GAAG,EAAE;YAE1B,KAAK,IAAI/1C,CAAC,GAAG,CAAC,EAAEA,CAAC,IAAIq1C,uBAAuB,EAAEr1C,CAAC,EAAE,EAAE;cACjD,IAAIg2C,WAAW,GAAGZ,YAAY,CAACp1C,CAAC,CAAC;cACjC,IAAIi2C,WAAW,GACbj2C,CAAC,KAAKq1C,uBAAuB,GAAGQ,eAAe,GAAGG,WAAW;cAC/D,IAAIvC,GAAG,GAAGzzC,CAAC,GAAG,CAAC,GAAG,IAAI,GAAGg2C,WAAW;cAGpC,OAAOvC,GAAG,CAAC/5C,MAAM,GAAGq8C,iBAAiB,EAAE;gBACrCtC,GAAG,IAAI,GAAG;cACZ;cAEAA,GAAG,IAAIwC,WAAW,GAAG,IAAI;cACzBH,KAAK,IAAIrC,GAAG;YACd;YAEA15C,KAAK,CACH,kEAAkE,GAChE,kDAAkD,GAClD,4FAA4F,GAC5F,6CAA6C,GAC7C,6DAA6D,GAC7D,IAAI,GACJ,6DAA6D,EAC/Dw7B,aAAa,EACbugB,KACF,CAAC;UACH;QACF;MACF;IACF;IAEA,SAASI,0BAA0BA,CAACxf,SAAS,EAAE;MAC7C;QAME,IAAIyf,eAAe,GACjBl6C,MAAM,CAACpB,SAAS,CAACoxC,QAAQ,CAAClxC,IAAI,CAAC27B,SAAS,CAAC,KACzC,wBAAwB;QAE1B,IAAIyf,eAAe,EAAE;UAEnB,IAAI5gB,aAAa,GAAG3b,yBAAyB,CAC3C86B,yBACF,CAAC;UAED,IAAI,CAACD,gCAAgC,CAACxlB,GAAG,CAACsG,aAAa,CAAC,EAAE;YACxDkf,gCAAgC,CAAC5lB,GAAG,CAAC0G,aAAa,CAAC;YAEnDx7B,KAAK,CACH,8DAA8D,GAC5D,gEAAgE,GAChE,gEAAgE,GAChE,iBACJ,CAAC;UACH;QACF;MACF;IACF;IAEA,SAASq8C,qBAAqBA,CAAA,EAAG;MAC/B,MAAM,IAAIr9C,KAAK,CACb,+GAA+G,GAC7G,kCAAkC,GAClC,wFAAwF,GACxF,+CAA+C,GAC/C,iEAAiE,GACjE,kGACJ,CAAC;IACH;IAEA,SAASs9C,kBAAkBA,CAACC,QAAQ,EAAEC,QAAQ,EAAE;MAC9C;QACE,IAAIjB,0BAA0B,EAAE;UAE9B,OAAO,KAAK;QACd;MACF;MAEA,IAAIiB,QAAQ,KAAK,IAAI,EAAE;QACrB;UACEx8C,KAAK,CACH,kEAAkE,GAChE,mEAAmE,GACnE,yCAAyC,EAC3Co7C,oBACF,CAAC;QACH;QAEA,OAAO,KAAK;MACd;MAEA;QAGE,IAAImB,QAAQ,CAAC58C,MAAM,KAAK68C,QAAQ,CAAC78C,MAAM,EAAE;UACvCK,KAAK,CACH,oEAAoE,GAClE,wDAAwD,GACxD,gBAAgB,GAChB,cAAc,EAChBo7C,oBAAoB,EACpB,GAAG,GAAGoB,QAAQ,CAACpQ,IAAI,CAAC,IAAI,CAAC,GAAG,GAAG,EAC/B,GAAG,GAAGmQ,QAAQ,CAACnQ,IAAI,CAAC,IAAI,CAAC,GAAG,GAC9B,CAAC;QACH;MACF;MAEA,KAAK,IAAInmC,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGu2C,QAAQ,CAAC78C,MAAM,IAAIsG,CAAC,GAAGs2C,QAAQ,CAAC58C,MAAM,EAAEsG,CAAC,EAAE,EAAE;QAE/D,IAAIg5B,QAAQ,CAACsd,QAAQ,CAACt2C,CAAC,CAAC,EAAEu2C,QAAQ,CAACv2C,CAAC,CAAC,CAAC,EAAE;UACtC;QACF;QAEA,OAAO,KAAK;MACd;MAEA,OAAO,IAAI;IACb;IAEA,SAASw2C,eAAeA,CACtB3uC,OAAO,EACP4uB,cAAc,EACdC,SAAS,EACT7pB,KAAK,EACL4pC,SAAS,EACTC,eAAe,EACf;MACA5rB,WAAW,GAAG4rB,eAAe;MAC7BhC,yBAAyB,GAAGje,cAAc;MAE1C;QACE2e,YAAY,GAAGvtC,OAAO,KAAK,IAAI,GAAGA,OAAO,CAAC8uC,eAAe,GAAG,IAAI;QAChEtB,uBAAuB,GAAG,CAAC,CAAC;QAE5BC,0BAA0B,GACxBztC,OAAO,KAAK,IAAI,IAAIA,OAAO,CAACjI,IAAI,KAAK62B,cAAc,CAAC72B,IAAI;QAC1Ds2C,0BAA0B,CAACxf,SAAS,CAAC;MACvC;MAEAD,cAAc,CAAC0C,aAAa,GAAG,IAAI;MACnC1C,cAAc,CAAC6K,WAAW,GAAG,IAAI;MACjC7K,cAAc,CAAC3M,KAAK,GAAG5C,OAAO;MAc9B;QACE,IAAIrf,OAAO,KAAK,IAAI,IAAIA,OAAO,CAACsxB,aAAa,KAAK,IAAI,EAAE;UACtD+a,wBAAwB,CAACrsC,OAAO,GAAG+uC,4BAA4B;QACjE,CAAC,MAAM,IAAIxB,YAAY,KAAK,IAAI,EAAE;UAMhClB,wBAAwB,CAACrsC,OAAO,GAC9BgvC,wCAAwC;QAC5C,CAAC,MAAM;UACL3C,wBAAwB,CAACrsC,OAAO,GAAGivC,2BAA2B;QAChE;MACF;MA2BA,IAAIC,qBAAqB,GACvB,CAACtgB,cAAc,CAACoC,IAAI,GAAGpS,gBAAgB,MAAMH,MAAM;MACrDyuB,mCAAmC,GAAGgC,qBAAqB;MAC3D,IAAI5xB,QAAQ,GAAGuR,SAAS,CAAC7pB,KAAK,EAAE4pC,SAAS,CAAC;MAC1C1B,mCAAmC,GAAG,KAAK;MAE3C,IAAID,0CAA0C,EAAE;QAG9C3vB,QAAQ,GAAG6xB,oBAAoB,CAC7BvgB,cAAc,EACdC,SAAS,EACT7pB,KAAK,EACL4pC,SACF,CAAC;MACH;MAEA,IAAIM,qBAAqB,EAAE;QAEzB9wB,0BAA0B,CAAC,IAAI,CAAC;QAEhC,IAAI;UACFd,QAAQ,GAAG6xB,oBAAoB,CAC7BvgB,cAAc,EACdC,SAAS,EACT7pB,KAAK,EACL4pC,SACF,CAAC;QACH,CAAC,SAAS;UACRxwB,0BAA0B,CAAC,KAAK,CAAC;QACnC;MACF;MAEAgxB,oBAAoB,CAACpvC,OAAO,EAAE4uB,cAAc,CAAC;MAC7C,OAAOtR,QAAQ;IACjB;IAEA,SAAS8xB,oBAAoBA,CAACpvC,OAAO,EAAE4uB,cAAc,EAAEC,SAAS,EAAE;MAChE;QACED,cAAc,CAACkgB,eAAe,GAAGvB,YAAY;MAC/C;MAGAlB,wBAAwB,CAACrsC,OAAO,GAAGqvC,qBAAqB;MAGxD,IAAIC,oBAAoB,GACtBxC,WAAW,KAAK,IAAI,IAAIA,WAAW,CAAC7sC,IAAI,KAAK,IAAI;MACnDgjB,WAAW,GAAG5D,OAAO;MACrBwtB,yBAAyB,GAAG,IAAI;MAChCC,WAAW,GAAG,IAAI;MAClBC,kBAAkB,GAAG,IAAI;MAEzB;QACEO,oBAAoB,GAAG,IAAI;QAC3BC,YAAY,GAAG,IAAI;QACnBC,uBAAuB,GAAG,CAAC,CAAC;QAK5B,IACExtC,OAAO,KAAK,IAAI,IAChB,CAACA,OAAO,CAAC2U,KAAK,GAAGP,UAAU,OACxBwa,cAAc,CAACja,KAAK,GAAGP,UAAU,CAAC,IAKrC,CAACpU,OAAO,CAACgxB,IAAI,GAAGtS,cAAc,MAAMD,MAAM,EAC1C;UACAvsB,KAAK,CACH,iEAAiE,GAC/D,wBACJ,CAAC;QACH;MACF;MAEA86C,4BAA4B,GAAG,KAAK;MAGpCG,oBAAoB,GAAG,CAAC;MACxBtL,aAAa,GAAG,IAAI;MAEpB,IAAIyN,oBAAoB,EAAE;QACxB,MAAM,IAAIp+C,KAAK,CACb,0EAA0E,GACxE,yBACJ,CAAC;MACH;MAEA;QACE,IAAIwxC,2BAA2B,CAAC,CAAC,EAAE;UACjC,IAAIhV,aAAa,GACf3b,yBAAyB,CAAC6c,cAAc,CAAC,IAAI,SAAS;UAExD,IACE,CAAC+d,gCAAgC,CAACvlB,GAAG,CAACsG,aAAa,CAAC,IAGpD,CAACkf,gCAAgC,CAACxlB,GAAG,CAACsG,aAAa,CAAC,EACpD;YACAif,gCAAgC,CAAC3lB,GAAG,CAAC0G,aAAa,CAAC;YAEnDx7B,KAAK,CACH,sEAAsE,GACpE,kEAAkE,GAClE,oDACJ,CAAC;UACH;QACF;MACF;IACF;IAEA,SAASq9C,iCAAiCA,CACxCvvC,OAAO,EACP4uB,cAAc,EACdC,SAAS,EACT7pB,KAAK,EACL4pC,SAAS,EACT;MAQA;QACEpB,uBAAuB,GAAG,CAAC,CAAC;QAE5BC,0BAA0B,GACxBztC,OAAO,KAAK,IAAI,IAAIA,OAAO,CAACjI,IAAI,KAAK62B,cAAc,CAAC72B,IAAI;MAC5D;MAEA,IAAIulB,QAAQ,GAAG6xB,oBAAoB,CACjCvgB,cAAc,EACdC,SAAS,EACT7pB,KAAK,EACL4pC,SACF,CAAC;MACDQ,oBAAoB,CAACpvC,OAAO,EAAE4uB,cAAc,CAAC;MAC7C,OAAOtR,QAAQ;IACjB;IAEA,SAAS6xB,oBAAoBA,CAACvgB,cAAc,EAAEC,SAAS,EAAE7pB,KAAK,EAAE4pC,SAAS,EAAE;MAWzE/B,yBAAyB,GAAGje,cAAc;MAC1C,IAAI4gB,iBAAiB,GAAG,CAAC;MACzB,IAAIlyB,QAAQ;MAEZ,GAAG;QACD,IAAI2vB,0CAA0C,EAAE;UAG9CpL,aAAa,GAAG,IAAI;QACtB;QAEAsL,oBAAoB,GAAG,CAAC;QACxBF,0CAA0C,GAAG,KAAK;QAElD,IAAIuC,iBAAiB,IAAInC,eAAe,EAAE;UACxC,MAAM,IAAIn8C,KAAK,CACb,qEAAqE,GACnE,mBACJ,CAAC;QACH;QAEAs+C,iBAAiB,IAAI,CAAC;QAEtB;UAGE/B,0BAA0B,GAAG,KAAK;QACpC;QAEAX,WAAW,GAAG,IAAI;QAClBC,kBAAkB,GAAG,IAAI;QACzBne,cAAc,CAAC6K,WAAW,GAAG,IAAI;QAEjC;UAEE+T,uBAAuB,GAAG,CAAC,CAAC;QAC9B;QAEAnB,wBAAwB,CAACrsC,OAAO,GAAGyvC,8BAA8B;QACjEnyB,QAAQ,GAAGuR,SAAS,CAAC7pB,KAAK,EAAE4pC,SAAS,CAAC;MACxC,CAAC,QAAQ3B,0CAA0C;MAEnD,OAAO3vB,QAAQ;IACjB;IACA,SAASoyB,YAAYA,CAAC1vC,OAAO,EAAE4uB,cAAc,EAAE3M,KAAK,EAAE;MACpD2M,cAAc,CAAC6K,WAAW,GAAGz5B,OAAO,CAACy5B,WAAW;MAGhD,IAAI,CAAC7K,cAAc,CAACoC,IAAI,GAAGnS,iBAAiB,MAAMJ,MAAM,EAAE;QACxDmQ,cAAc,CAACja,KAAK,IAAI,EACtBZ,eAAe,GACfD,cAAc,GACdjB,SAAS,GACTP,MAAM,CACP;MACH,CAAC,MAAM;QACLsc,cAAc,CAACja,KAAK,IAAI,EAAE9B,SAAS,GAAGP,MAAM,CAAC;MAC/C;MAEAtS,OAAO,CAACiiB,KAAK,GAAGkD,WAAW,CAACnlB,OAAO,CAACiiB,KAAK,EAAEA,KAAK,CAAC;IACnD;IACA,SAAS0tB,oBAAoBA,CAAA,EAAG;MAO9B9C,yBAAyB,GAAG,IAAI;MAGhCR,wBAAwB,CAACrsC,OAAO,GAAGqvC,qBAAqB;IAC1D;IACA,SAASO,kBAAkBA,CAAChhB,cAAc,EAAE;MAC1C,IAAIoe,4BAA4B,EAAE;QAShC,IAAIlwB,IAAI,GAAG8R,cAAc,CAAC0C,aAAa;QAEvC,OAAOxU,IAAI,KAAK,IAAI,EAAE;UACpB,IAAIyW,KAAK,GAAGzW,IAAI,CAACyW,KAAK;UAEtB,IAAIA,KAAK,KAAK,IAAI,EAAE;YAClBA,KAAK,CAACC,OAAO,GAAG,IAAI;UACtB;UAEA1W,IAAI,GAAGA,IAAI,CAAC7c,IAAI;QAClB;QAEA+sC,4BAA4B,GAAG,KAAK;MACtC;MAEA/pB,WAAW,GAAG5D,OAAO;MACrBwtB,yBAAyB,GAAG,IAAI;MAChCC,WAAW,GAAG,IAAI;MAClBC,kBAAkB,GAAG,IAAI;MAEzB;QACEQ,YAAY,GAAG,IAAI;QACnBC,uBAAuB,GAAG,CAAC,CAAC;QAC5BF,oBAAoB,GAAG,IAAI;MAC7B;MAEAL,0CAA0C,GAAG,KAAK;MAClDE,oBAAoB,GAAG,CAAC;MACxBtL,aAAa,GAAG,IAAI;IACtB;IAEA,SAASgO,uBAAuBA,CAAA,EAAG;MACjC,IAAI/yB,IAAI,GAAG;QACTwU,aAAa,EAAE,IAAI;QACnB6H,SAAS,EAAE,IAAI;QACf2W,SAAS,EAAE,IAAI;QACfvc,KAAK,EAAE,IAAI;QACXtzB,IAAI,EAAE;MACR,CAAC;MAED,IAAI8sC,kBAAkB,KAAK,IAAI,EAAE;QAE/BF,yBAAyB,CAACvb,aAAa,GAAGyb,kBAAkB,GAAGjwB,IAAI;MACrE,CAAC,MAAM;QAELiwB,kBAAkB,GAAGA,kBAAkB,CAAC9sC,IAAI,GAAG6c,IAAI;MACrD;MAEA,OAAOiwB,kBAAkB;IAC3B;IAEA,SAASgD,wBAAwBA,CAAA,EAAG;MAKlC,IAAIC,eAAe;MAEnB,IAAIlD,WAAW,KAAK,IAAI,EAAE;QACxB,IAAI9sC,OAAO,GAAG6sC,yBAAyB,CAACroC,SAAS;QAEjD,IAAIxE,OAAO,KAAK,IAAI,EAAE;UACpBgwC,eAAe,GAAGhwC,OAAO,CAACsxB,aAAa;QACzC,CAAC,MAAM;UACL0e,eAAe,GAAG,IAAI;QACxB;MACF,CAAC,MAAM;QACLA,eAAe,GAAGlD,WAAW,CAAC7sC,IAAI;MACpC;MAEA,IAAIgwC,sBAAsB;MAE1B,IAAIlD,kBAAkB,KAAK,IAAI,EAAE;QAC/BkD,sBAAsB,GAAGpD,yBAAyB,CAACvb,aAAa;MAClE,CAAC,MAAM;QACL2e,sBAAsB,GAAGlD,kBAAkB,CAAC9sC,IAAI;MAClD;MAEA,IAAIgwC,sBAAsB,KAAK,IAAI,EAAE;QAEnClD,kBAAkB,GAAGkD,sBAAsB;QAC3CA,sBAAsB,GAAGlD,kBAAkB,CAAC9sC,IAAI;QAChD6sC,WAAW,GAAGkD,eAAe;MAC/B,CAAC,MAAM;QAEL,IAAIA,eAAe,KAAK,IAAI,EAAE;UAC5B,IAAIE,YAAY,GAAGrD,yBAAyB,CAACroC,SAAS;UAEtD,IAAI0rC,YAAY,KAAK,IAAI,EAAE;YAIzB,MAAM,IAAIh/C,KAAK,CACb,4FACF,CAAC;UACH,CAAC,MAAM;YAEL,MAAM,IAAIA,KAAK,CACb,sDACF,CAAC;UACH;QACF;QAEA47C,WAAW,GAAGkD,eAAe;QAC7B,IAAIG,OAAO,GAAG;UACZ7e,aAAa,EAAEwb,WAAW,CAACxb,aAAa;UACxC6H,SAAS,EAAE2T,WAAW,CAAC3T,SAAS;UAChC2W,SAAS,EAAEhD,WAAW,CAACgD,SAAS;UAChCvc,KAAK,EAAEuZ,WAAW,CAACvZ,KAAK;UACxBtzB,IAAI,EAAE;QACR,CAAC;QAED,IAAI8sC,kBAAkB,KAAK,IAAI,EAAE;UAE/BF,yBAAyB,CAACvb,aAAa,GAAGyb,kBAAkB,GAC1DoD,OAAO;QACX,CAAC,MAAM;UAELpD,kBAAkB,GAAGA,kBAAkB,CAAC9sC,IAAI,GAAGkwC,OAAO;QACxD;MACF;MAEA,OAAOpD,kBAAkB;IAC3B;IAGA,IAAIqD,kCAAkC;IAEtC;MACEA,kCAAkC,GAAG,SAAAA,CAAA,EAAY;QAC/C,OAAO;UACLC,UAAU,EAAE,IAAI;UAChB5qC,MAAM,EAAE,IAAI;UACZ6qC,MAAM,EAAE;QACV,CAAC;MACH,CAAC;IACH;IAEA,SAASC,WAAWA,CAACvY,QAAQ,EAAE;MAE7B,IAAIvrB,KAAK,GAAG0gC,oBAAoB;MAChCA,oBAAoB,IAAI,CAAC;MAEzB,IAAItL,aAAa,KAAK,IAAI,EAAE;QAC1BA,aAAa,GAAGL,mBAAmB,CAAC,CAAC;MACvC;MAEA,IAAIhmC,MAAM,GAAGomC,iBAAiB,CAACC,aAAa,EAAE7J,QAAQ,EAAEvrB,KAAK,CAAC;MAE9D,IACEogC,yBAAyB,CAACroC,SAAS,KAAK,IAAI,KAC3CuoC,kBAAkB,KAAK,IAAI,GACxBF,yBAAyB,CAACvb,aAAa,KAAK,IAAI,GAChDyb,kBAAkB,CAAC9sC,IAAI,KAAK,IAAI,CAAC,EACrC;QAKA;UACEosC,wBAAwB,CAACrsC,OAAO,GAAGivC,2BAA2B;QAChE;MACF;MAEA,OAAOzzC,MAAM;IACf;IAEA,SAASg1C,GAAGA,CAACC,MAAM,EAAE;MACnB,IAAIA,MAAM,KAAK,IAAI,IAAI,OAAOA,MAAM,KAAK,QAAQ,EAAE;QAEjD,IAAI,OAAOA,MAAM,CAACpY,IAAI,KAAK,UAAU,EAAE;UAErC,IAAIL,QAAQ,GAAGyY,MAAM;UACrB,OAAOF,WAAW,CAACvY,QAAQ,CAAC;QAC9B,CAAC,MAAM,IAAIyY,MAAM,CAACv/B,QAAQ,KAAK3B,kBAAkB,EAAE;UACjD,IAAI1b,OAAO,GAAG48C,MAAM;UACpB,OAAOC,WAAW,CAAC78C,OAAO,CAAC;QAC7B;MACF;MAEA,MAAM,IAAI3C,KAAK,CACb,2CAA2C,GAAG2B,MAAM,CAAC49C,MAAM,CAC7D,CAAC;IACH;IAEA,SAASE,iBAAiBA,CAACzP,KAAK,EAAE7lC,MAAM,EAAE;MAExC,OAAO,OAAOA,MAAM,KAAK,UAAU,GAAGA,MAAM,CAAC6lC,KAAK,CAAC,GAAG7lC,MAAM;IAC9D;IAEA,SAASu1C,YAAYA,CAACC,OAAO,EAAEC,UAAU,EAAEp/B,IAAI,EAAE;MAC/C,IAAIoL,IAAI,GAAG+yB,uBAAuB,CAAC,CAAC;MACpC,IAAIkB,YAAY;MAEhB,IAAIr/B,IAAI,KAAKzZ,SAAS,EAAE;QACtB84C,YAAY,GAAGr/B,IAAI,CAACo/B,UAAU,CAAC;QAE/B,IAAI5D,mCAAmC,EAAE;UACvC9uB,0BAA0B,CAAC,IAAI,CAAC;UAChC1M,IAAI,CAACo/B,UAAU,CAAC;UAChB1yB,0BAA0B,CAAC,KAAK,CAAC;QACnC;MACF,CAAC,MAAM;QACL2yB,YAAY,GAAGD,UAAU;MAC3B;MAEAh0B,IAAI,CAACwU,aAAa,GAAGxU,IAAI,CAACqc,SAAS,GAAG4X,YAAY;MAClD,IAAIxd,KAAK,GAAG;QACVC,OAAO,EAAE,IAAI;QACbvR,KAAK,EAAE5C,OAAO;QACd2xB,QAAQ,EAAE,IAAI;QACdC,mBAAmB,EAAEJ,OAAO;QAC5BK,iBAAiB,EAAEH;MACrB,CAAC;MACDj0B,IAAI,CAACyW,KAAK,GAAGA,KAAK;MAClB,IAAIyd,QAAQ,GAAIzd,KAAK,CAACyd,QAAQ,GAAGG,qBAAqB,CAACxjB,IAAI,CACzD,IAAI,EACJkf,yBAAyB,EACzBtZ,KACF,CAAE;MACF,OAAO,CAACzW,IAAI,CAACwU,aAAa,EAAE0f,QAAQ,CAAC;IACvC;IAEA,SAASI,aAAaA,CAACP,OAAO,EAAEC,UAAU,EAAEp/B,IAAI,EAAE;MAChD,IAAIoL,IAAI,GAAGizB,wBAAwB,CAAC,CAAC;MACrC,OAAOsB,iBAAiB,CAACv0B,IAAI,EAAEgwB,WAAW,EAAE+D,OAAO,CAAC;IACtD;IAEA,SAASQ,iBAAiBA,CAACv0B,IAAI,EAAE9c,OAAO,EAAE6wC,OAAO,EAAE;MACjD,IAAItd,KAAK,GAAGzW,IAAI,CAACyW,KAAK;MAEtB,IAAIA,KAAK,KAAK,IAAI,EAAE;QAClB,MAAM,IAAIriC,KAAK,CACb,2EACF,CAAC;MACH;MAEAqiC,KAAK,CAAC0d,mBAAmB,GAAGJ,OAAO;MAEnC,IAAIf,SAAS,GAAGhzB,IAAI,CAACgzB,SAAS;MAE9B,IAAI5U,YAAY,GAAG3H,KAAK,CAACC,OAAO;MAEhC,IAAI0H,YAAY,KAAK,IAAI,EAAE;QAGzB,IAAI4U,SAAS,KAAK,IAAI,EAAE;UAEtB,IAAIwB,SAAS,GAAGxB,SAAS,CAAC7vC,IAAI;UAC9B,IAAIsxC,YAAY,GAAGrW,YAAY,CAACj7B,IAAI;UACpC6vC,SAAS,CAAC7vC,IAAI,GAAGsxC,YAAY;UAC7BrW,YAAY,CAACj7B,IAAI,GAAGqxC,SAAS;QAC/B;QAEA;UACE,IAAItxC,OAAO,CAAC8vC,SAAS,KAAKA,SAAS,EAAE;YAGnC59C,KAAK,CACH,iEAAiE,GAC/D,yBACJ,CAAC;UACH;QACF;QAEA8N,OAAO,CAAC8vC,SAAS,GAAGA,SAAS,GAAG5U,YAAY;QAC5C3H,KAAK,CAACC,OAAO,GAAG,IAAI;MACtB;MAEA,IAAI2F,SAAS,GAAGrc,IAAI,CAACqc,SAAS;MAE9B,IAAI2W,SAAS,KAAK,IAAI,EAAE;QAKtBhzB,IAAI,CAACwU,aAAa,GAAG6H,SAAS;MAEhC,CAAC,MAAM;QAEL,IAAIqY,KAAK,GAAG1B,SAAS,CAAC7vC,IAAI;QAC1B,IAAIq7B,QAAQ,GAAGnC,SAAS;QACxB,IAAIqC,YAAY,GAAG,IAAI;QACvB,IAAIiW,iBAAiB,GAAG,IAAI;QAC5B,IAAIC,gBAAgB,GAAG,IAAI;QAC3B,IAAIrrB,MAAM,GAAGmrB,KAAK;QAClB,IAAI1W,+BAA+B,GAAG,KAAK;QAE3C,GAAG;UAID,IAAIpV,UAAU,GAAGP,WAAW,CAACkB,MAAM,CAAC/C,IAAI,EAAE5B,aAAa,CAAC;UACxD,IAAIia,cAAc,GAAGjW,UAAU,KAAKW,MAAM,CAAC/C,IAAI;UAI/C,IAAIsY,gBAAgB,GAAGD,cAAc,GACjC,CAAC3W,eAAe,CAACqR,gCAAgC,CAAC,CAAC,EAAE3Q,UAAU,CAAC,GAChE,CAACV,eAAe,CAAC/B,WAAW,EAAEyC,UAAU,CAAC;UAE7C,IAAIkW,gBAAgB,EAAE;YAIpB,IAAIhC,KAAK,GAAG;cACVtW,IAAI,EAAEoC,UAAU;cAChBisB,UAAU,EAAEtrB,MAAM,CAACsrB,UAAU;cAC7Bt2C,MAAM,EAAEgrB,MAAM,CAAChrB,MAAM;cACrBu2C,aAAa,EAAEvrB,MAAM,CAACurB,aAAa;cACnCC,UAAU,EAAExrB,MAAM,CAACwrB,UAAU;cAC7B5xC,IAAI,EAAE;YACR,CAAC;YAED,IAAIyxC,gBAAgB,KAAK,IAAI,EAAE;cAC7BD,iBAAiB,GAAGC,gBAAgB,GAAG9X,KAAK;cAC5C4B,YAAY,GAAGF,QAAQ;YACzB,CAAC,MAAM;cACLoW,gBAAgB,GAAGA,gBAAgB,CAACzxC,IAAI,GAAG25B,KAAK;YAClD;YAIAiT,yBAAyB,CAAC5qB,KAAK,GAAGiD,UAAU,CAC1C2nB,yBAAyB,CAAC5qB,KAAK,EAC/ByD,UACF,CAAC;YACDsW,sBAAsB,CAACtW,UAAU,CAAC;UACpC,CAAC,MAAM;YACL;cAIE,IAAIgsB,gBAAgB,KAAK,IAAI,EAAE;gBAC7B,IAAI7V,MAAM,GAAG;kBAIXvY,IAAI,EAAEhE,MAAM;kBACZqyB,UAAU,EAAEryB,MAAM;kBAClBjkB,MAAM,EAAEgrB,MAAM,CAAChrB,MAAM;kBACrBu2C,aAAa,EAAEvrB,MAAM,CAACurB,aAAa;kBACnCC,UAAU,EAAExrB,MAAM,CAACwrB,UAAU;kBAC7B5xC,IAAI,EAAE;gBACR,CAAC;gBACDyxC,gBAAgB,GAAGA,gBAAgB,CAACzxC,IAAI,GAAG47B,MAAM;cACnD;cAIA,IAAInW,UAAU,KAAK+S,uBAAuB,CAAC,CAAC,EAAE;gBAC5CqC,+BAA+B,GAAG,IAAI;cACxC;YACF;YAEA,IAAIz/B,MAAM,GAAGgrB,MAAM,CAAChrB,MAAM;YAE1B,IAAI6xC,mCAAmC,EAAE;cACvC2D,OAAO,CAACvV,QAAQ,EAAEjgC,MAAM,CAAC;YAC3B;YAEA,IAAIgrB,MAAM,CAACurB,aAAa,EAAE;cAGxBtW,QAAQ,GAAGjV,MAAM,CAACwrB,UAAU;YAC9B,CAAC,MAAM;cACLvW,QAAQ,GAAGuV,OAAO,CAACvV,QAAQ,EAAEjgC,MAAM,CAAC;YACtC;UACF;UAEAgrB,MAAM,GAAGA,MAAM,CAACpmB,IAAI;QACtB,CAAC,QAAQomB,MAAM,KAAK,IAAI,IAAIA,MAAM,KAAKmrB,KAAK;QAE5C,IAAIE,gBAAgB,KAAK,IAAI,EAAE;UAC7BlW,YAAY,GAAGF,QAAQ;QACzB,CAAC,MAAM;UACLoW,gBAAgB,CAACzxC,IAAI,GAAGwxC,iBAAiB;QAC3C;QAGA,IAAI,CAACtgB,QAAQ,CAACmK,QAAQ,EAAExe,IAAI,CAACwU,aAAa,CAAC,EAAE;UAC3CwgB,gCAAgC,CAAC,CAAC;UAOlC,IAAIhX,+BAA+B,EAAE;YACnC,IAAIE,uBAAuB,GAAGtC,2BAA2B,CAAC,CAAC;YAE3D,IAAIsC,uBAAuB,KAAK,IAAI,EAAE;cAIpC,MAAMA,uBAAuB;YAC/B;UACF;QACF;QAEAle,IAAI,CAACwU,aAAa,GAAGgK,QAAQ;QAC7Bxe,IAAI,CAACqc,SAAS,GAAGqC,YAAY;QAC7B1e,IAAI,CAACgzB,SAAS,GAAG4B,gBAAgB;QACjCne,KAAK,CAAC2d,iBAAiB,GAAG5V,QAAQ;MACpC;MAEA,IAAIwU,SAAS,KAAK,IAAI,EAAE;QAGtBvc,KAAK,CAACtR,KAAK,GAAG5C,OAAO;MACvB;MAEA,IAAI2xB,QAAQ,GAAGzd,KAAK,CAACyd,QAAQ;MAC7B,OAAO,CAACl0B,IAAI,CAACwU,aAAa,EAAE0f,QAAQ,CAAC;IACvC;IAEA,SAASe,eAAeA,CAAClB,OAAO,EAAEC,UAAU,EAAEp/B,IAAI,EAAE;MAClD,IAAIoL,IAAI,GAAGizB,wBAAwB,CAAC,CAAC;MACrC,IAAIxc,KAAK,GAAGzW,IAAI,CAACyW,KAAK;MAEtB,IAAIA,KAAK,KAAK,IAAI,EAAE;QAClB,MAAM,IAAIriC,KAAK,CACb,2EACF,CAAC;MACH;MAEAqiC,KAAK,CAAC0d,mBAAmB,GAAGJ,OAAO;MAGnC,IAAIG,QAAQ,GAAGzd,KAAK,CAACyd,QAAQ;MAC7B,IAAIgB,qBAAqB,GAAGze,KAAK,CAACC,OAAO;MACzC,IAAI8H,QAAQ,GAAGxe,IAAI,CAACwU,aAAa;MAEjC,IAAI0gB,qBAAqB,KAAK,IAAI,EAAE;QAElCze,KAAK,CAACC,OAAO,GAAG,IAAI;QACpB,IAAIye,sBAAsB,GAAGD,qBAAqB,CAAC/xC,IAAI;QACvD,IAAIomB,MAAM,GAAG4rB,sBAAsB;QAEnC,GAAG;UAID,IAAI52C,MAAM,GAAGgrB,MAAM,CAAChrB,MAAM;UAC1BigC,QAAQ,GAAGuV,OAAO,CAACvV,QAAQ,EAAEjgC,MAAM,CAAC;UACpCgrB,MAAM,GAAGA,MAAM,CAACpmB,IAAI;QACtB,CAAC,QAAQomB,MAAM,KAAK4rB,sBAAsB;QAG1C,IAAI,CAAC9gB,QAAQ,CAACmK,QAAQ,EAAExe,IAAI,CAACwU,aAAa,CAAC,EAAE;UAC3CwgB,gCAAgC,CAAC,CAAC;QACpC;QAEAh1B,IAAI,CAACwU,aAAa,GAAGgK,QAAQ;QAK7B,IAAIxe,IAAI,CAACgzB,SAAS,KAAK,IAAI,EAAE;UAC3BhzB,IAAI,CAACqc,SAAS,GAAGmC,QAAQ;QAC3B;QAEA/H,KAAK,CAAC2d,iBAAiB,GAAG5V,QAAQ;MACpC;MAEA,OAAO,CAACA,QAAQ,EAAE0V,QAAQ,CAAC;IAC7B;IAEA,SAASkB,sBAAsBA,CAACC,SAAS,EAAEC,WAAW,EAAEC,iBAAiB,EAAE;MACzE,IAAIrgC,KAAK,GAAG66B,yBAAyB;MACrC,IAAI/vB,IAAI,GAAG+yB,uBAAuB,CAAC,CAAC;MACpC,IAAIyC,YAAY;MAEhB;QACEA,YAAY,GAAGF,WAAW,CAAC,CAAC;QAE5B;UACE,IAAI,CAAC1F,0BAA0B,EAAE;YAC/B,IAAI6F,cAAc,GAAGH,WAAW,CAAC,CAAC;YAElC,IAAI,CAACjhB,QAAQ,CAACmhB,YAAY,EAAEC,cAAc,CAAC,EAAE;cAC3CrgD,KAAK,CACH,sEACF,CAAC;cAEDw6C,0BAA0B,GAAG,IAAI;YACnC;UACF;QACF;QAQA,IAAIrvB,IAAI,GAAG6W,qBAAqB,CAAC,CAAC;QAElC,IAAI7W,IAAI,KAAK,IAAI,EAAE;UACjB,MAAM,IAAInsB,KAAK,CACb,iFACF,CAAC;QACH;QAEA,IAAIshD,eAAe,GAAGnc,gCAAgC,CAAC,CAAC;QAExD,IAAI,CAAC9R,oBAAoB,CAAClH,IAAI,EAAEm1B,eAAe,CAAC,EAAE;UAChDC,yBAAyB,CAACzgC,KAAK,EAAEogC,WAAW,EAAEE,YAAY,CAAC;QAC7D;MACF;MAIAx1B,IAAI,CAACwU,aAAa,GAAGghB,YAAY;MACjC,IAAIx6C,IAAI,GAAG;QACTuW,KAAK,EAAEikC,YAAY;QACnBF,WAAW,EAAEA;MACf,CAAC;MACDt1B,IAAI,CAACyW,KAAK,GAAGz7B,IAAI;MAEjB46C,WAAW,CAACC,gBAAgB,CAAChlB,IAAI,CAAC,IAAI,EAAE3b,KAAK,EAAEla,IAAI,EAAEq6C,SAAS,CAAC,EAAE,CAC/DA,SAAS,CACV,CAAC;MAMFngC,KAAK,CAAC2C,KAAK,IAAI9B,SAAS;MACxB+/B,UAAU,CACR3G,SAAS,GAAGG,OAAO,EACnByG,mBAAmB,CAACllB,IAAI,CAAC,IAAI,EAAE3b,KAAK,EAAEla,IAAI,EAAEw6C,YAAY,EAAEF,WAAW,CAAC,EACtEU,oBAAoB,CAAC,CAAC,EACtB,IACF,CAAC;MACD,OAAOR,YAAY;IACrB;IAEA,SAASS,uBAAuBA,CAC9BZ,SAAS,EACTC,WAAW,EACXC,iBAAiB,EACjB;MACA,IAAIrgC,KAAK,GAAG66B,yBAAyB;MACrC,IAAI/vB,IAAI,GAAGizB,wBAAwB,CAAC,CAAC;MAIrC,IAAIuC,YAAY;MAEhB;QACEA,YAAY,GAAGF,WAAW,CAAC,CAAC;QAE5B;UACE,IAAI,CAAC1F,0BAA0B,EAAE;YAC/B,IAAI6F,cAAc,GAAGH,WAAW,CAAC,CAAC;YAElC,IAAI,CAACjhB,QAAQ,CAACmhB,YAAY,EAAEC,cAAc,CAAC,EAAE;cAC3CrgD,KAAK,CACH,sEACF,CAAC;cAEDw6C,0BAA0B,GAAG,IAAI;YACnC;UACF;QACF;MACF;MAEA,IAAIsG,YAAY,GAAG,CAAClG,WAAW,IAAIhwB,IAAI,EAAEwU,aAAa;MACtD,IAAI2hB,eAAe,GAAG,CAAC9hB,QAAQ,CAAC6hB,YAAY,EAAEV,YAAY,CAAC;MAE3D,IAAIW,eAAe,EAAE;QACnBn2B,IAAI,CAACwU,aAAa,GAAGghB,YAAY;QACjCR,gCAAgC,CAAC,CAAC;MACpC;MAEA,IAAIh6C,IAAI,GAAGglB,IAAI,CAACyW,KAAK;MACrB2f,YAAY,CAACP,gBAAgB,CAAChlB,IAAI,CAAC,IAAI,EAAE3b,KAAK,EAAEla,IAAI,EAAEq6C,SAAS,CAAC,EAAE,CAChEA,SAAS,CACV,CAAC;MAKF,IACEr6C,IAAI,CAACs6C,WAAW,KAAKA,WAAW,IAChCa,eAAe,IAEdlG,kBAAkB,KAAK,IAAI,IAC1BA,kBAAkB,CAACzb,aAAa,CAACvtB,GAAG,GAAGkoC,SAAU,EACnD;QACAj6B,KAAK,CAAC2C,KAAK,IAAI9B,SAAS;QACxB+/B,UAAU,CACR3G,SAAS,GAAGG,OAAO,EACnByG,mBAAmB,CAACllB,IAAI,CACtB,IAAI,EACJ3b,KAAK,EACLla,IAAI,EACJw6C,YAAY,EACZF,WACF,CAAC,EACDU,oBAAoB,CAAC,CAAC,EACtB,IACF,CAAC;QAID,IAAIz1B,IAAI,GAAG6W,qBAAqB,CAAC,CAAC;QAElC,IAAI7W,IAAI,KAAK,IAAI,EAAE;UACjB,MAAM,IAAInsB,KAAK,CACb,iFACF,CAAC;QACH;QAEA,IAAI,CAACqzB,oBAAoB,CAAClH,IAAI,EAAE4F,WAAW,CAAC,EAAE;UAC5CwvB,yBAAyB,CAACzgC,KAAK,EAAEogC,WAAW,EAAEE,YAAY,CAAC;QAC7D;MACF;MAEA,OAAOA,YAAY;IACrB;IAEA,SAASG,yBAAyBA,CAACzgC,KAAK,EAAEogC,WAAW,EAAEe,gBAAgB,EAAE;MACvEnhC,KAAK,CAAC2C,KAAK,IAAI5B,gBAAgB;MAC/B,IAAIqgC,KAAK,GAAG;QACVhB,WAAW,EAAEA,WAAW;QACxB/jC,KAAK,EAAE8kC;MACT,CAAC;MACD,IAAIE,oBAAoB,GAAGxG,yBAAyB,CAACpT,WAAW;MAEhE,IAAI4Z,oBAAoB,KAAK,IAAI,EAAE;QACjCA,oBAAoB,GAAGjD,kCAAkC,CAAC,CAAC;QAC3DvD,yBAAyB,CAACpT,WAAW,GAAG4Z,oBAAoB;QAC5DA,oBAAoB,CAAC/C,MAAM,GAAG,CAAC8C,KAAK,CAAC;MACvC,CAAC,MAAM;QACL,IAAI9C,MAAM,GAAG+C,oBAAoB,CAAC/C,MAAM;QAExC,IAAIA,MAAM,KAAK,IAAI,EAAE;UACnB+C,oBAAoB,CAAC/C,MAAM,GAAG,CAAC8C,KAAK,CAAC;QACvC,CAAC,MAAM;UACL9C,MAAM,CAACr0C,IAAI,CAACm3C,KAAK,CAAC;QACpB;MACF;IACF;IAEA,SAASP,mBAAmBA,CAAC7gC,KAAK,EAAEla,IAAI,EAAEw6C,YAAY,EAAEF,WAAW,EAAE;MAEnEt6C,IAAI,CAACuW,KAAK,GAAGikC,YAAY;MACzBx6C,IAAI,CAACs6C,WAAW,GAAGA,WAAW;MAK9B,IAAIkB,sBAAsB,CAACx7C,IAAI,CAAC,EAAE;QAEhCy7C,kBAAkB,CAACvhC,KAAK,CAAC;MAC3B;IACF;IAEA,SAAS2gC,gBAAgBA,CAAC3gC,KAAK,EAAEla,IAAI,EAAEq6C,SAAS,EAAE;MAChD,IAAIqB,iBAAiB,GAAG,SAAAA,CAAA,EAAY;QAGlC,IAAIF,sBAAsB,CAACx7C,IAAI,CAAC,EAAE;UAEhCy7C,kBAAkB,CAACvhC,KAAK,CAAC;QAC3B;MACF,CAAC;MAED,OAAOmgC,SAAS,CAACqB,iBAAiB,CAAC;IACrC;IAEA,SAASF,sBAAsBA,CAACx7C,IAAI,EAAE;MACpC,IAAI27C,iBAAiB,GAAG37C,IAAI,CAACs6C,WAAW;MACxC,IAAIsB,SAAS,GAAG57C,IAAI,CAACuW,KAAK;MAE1B,IAAI;QACF,IAAIgJ,SAAS,GAAGo8B,iBAAiB,CAAC,CAAC;QACnC,OAAO,CAACtiB,QAAQ,CAACuiB,SAAS,EAAEr8B,SAAS,CAAC;MACxC,CAAC,CAAC,OAAOnlB,KAAK,EAAE;QACd,OAAO,IAAI;MACb;IACF;IAEA,SAASqhD,kBAAkBA,CAACvhC,KAAK,EAAE;MACjC,IAAIqL,IAAI,GAAG+W,8BAA8B,CAACpiB,KAAK,EAAEwN,QAAQ,CAAC;MAE1D,IAAInC,IAAI,KAAK,IAAI,EAAE;QACjBs2B,qBAAqB,CAACt2B,IAAI,EAAErL,KAAK,EAAEwN,QAAQ,CAAC;MAC9C;IACF;IAEA,SAASo0B,cAAcA,CAAC7C,YAAY,EAAE;MACpC,IAAIj0B,IAAI,GAAG+yB,uBAAuB,CAAC,CAAC;MAEpC,IAAI,OAAOkB,YAAY,KAAK,UAAU,EAAE;QACtC,IAAI8C,uBAAuB,GAAG9C,YAAY;QAE1CA,YAAY,GAAG8C,uBAAuB,CAAC,CAAC;QAExC,IAAI3G,mCAAmC,EAAE;UACvC9uB,0BAA0B,CAAC,IAAI,CAAC;UAEhCy1B,uBAAuB,CAAC,CAAC;UACzBz1B,0BAA0B,CAAC,KAAK,CAAC;QACnC;MACF;MAEAtB,IAAI,CAACwU,aAAa,GAAGxU,IAAI,CAACqc,SAAS,GAAG4X,YAAY;MAClD,IAAIxd,KAAK,GAAG;QACVC,OAAO,EAAE,IAAI;QACbvR,KAAK,EAAE5C,OAAO;QACd2xB,QAAQ,EAAE,IAAI;QACdC,mBAAmB,EAAEN,iBAAiB;QACtCO,iBAAiB,EAAEH;MACrB,CAAC;MACDj0B,IAAI,CAACyW,KAAK,GAAGA,KAAK;MAClB,OAAOzW,IAAI;IACb;IAEA,SAASg3B,UAAUA,CAAC/C,YAAY,EAAE;MAChC,IAAIj0B,IAAI,GAAG82B,cAAc,CAAC7C,YAAY,CAAC;MACvC,IAAIxd,KAAK,GAAGzW,IAAI,CAACyW,KAAK;MACtB,IAAIyd,QAAQ,GAAG+C,gBAAgB,CAACpmB,IAAI,CAClC,IAAI,EACJkf,yBAAyB,EACzBtZ,KACF,CAAC;MACDA,KAAK,CAACyd,QAAQ,GAAGA,QAAQ;MACzB,OAAO,CAACl0B,IAAI,CAACwU,aAAa,EAAE0f,QAAQ,CAAC;IACvC;IAEA,SAASgD,WAAWA,CAACjD,YAAY,EAAE;MACjC,OAAOK,aAAa,CAACT,iBAAiB,CAAC;IACzC;IAEA,SAASsD,aAAaA,CAAClD,YAAY,EAAE;MACnC,OAAOgB,eAAe,CAACpB,iBAAiB,CAAC;IAC3C;IAEA,SAASiC,UAAUA,CAAC7uC,GAAG,EAAEuU,MAAM,EAAExgB,IAAI,EAAEi2C,IAAI,EAAE;MAC3C,IAAImG,MAAM,GAAG;QACXnwC,GAAG,EAAEA,GAAG;QACRuU,MAAM,EAAEA,MAAM;QACdxgB,IAAI,EAAEA,IAAI;QACVi2C,IAAI,EAAEA,IAAI;QAEV9tC,IAAI,EAAE;MACR,CAAC;MACD,IAAIozC,oBAAoB,GAAGxG,yBAAyB,CAACpT,WAAW;MAEhE,IAAI4Z,oBAAoB,KAAK,IAAI,EAAE;QACjCA,oBAAoB,GAAGjD,kCAAkC,CAAC,CAAC;QAC3DvD,yBAAyB,CAACpT,WAAW,GAAG4Z,oBAAoB;QAC5DA,oBAAoB,CAAChD,UAAU,GAAG6D,MAAM,CAACj0C,IAAI,GAAGi0C,MAAM;MACxD,CAAC,MAAM;QACL,IAAI7D,UAAU,GAAGgD,oBAAoB,CAAChD,UAAU;QAEhD,IAAIA,UAAU,KAAK,IAAI,EAAE;UACvBgD,oBAAoB,CAAChD,UAAU,GAAG6D,MAAM,CAACj0C,IAAI,GAAGi0C,MAAM;QACxD,CAAC,MAAM;UACL,IAAIC,WAAW,GAAG9D,UAAU,CAACpwC,IAAI;UACjCowC,UAAU,CAACpwC,IAAI,GAAGi0C,MAAM;UACxBA,MAAM,CAACj0C,IAAI,GAAGk0C,WAAW;UACzBd,oBAAoB,CAAChD,UAAU,GAAG6D,MAAM;QAC1C;MACF;MAEA,OAAOA,MAAM;IACf;IAEA,SAASpB,oBAAoBA,CAAA,EAAG;MAC9B,OAAO;QACLsB,OAAO,EAAEn8C;MACX,CAAC;IACH;IAEA,SAASo8C,QAAQA,CAACC,YAAY,EAAE;MAC9B,IAAIx3B,IAAI,GAAG+yB,uBAAuB,CAAC,CAAC;MAEpC;QACE,IAAI0E,KAAK,GAAG;UACVv0C,OAAO,EAAEs0C;QACX,CAAC;QACDx3B,IAAI,CAACwU,aAAa,GAAGijB,KAAK;QAC1B,OAAOA,KAAK;MACd;IACF;IAEA,SAASC,SAASA,CAACF,YAAY,EAAE;MAC/B,IAAIx3B,IAAI,GAAGizB,wBAAwB,CAAC,CAAC;MACrC,OAAOjzB,IAAI,CAACwU,aAAa;IAC3B;IAEA,SAASmjB,eAAeA,CAACC,UAAU,EAAEC,SAAS,EAAEr8B,MAAM,EAAEy1B,IAAI,EAAE;MAC5D,IAAIjxB,IAAI,GAAG+yB,uBAAuB,CAAC,CAAC;MACpC,IAAIpB,QAAQ,GAAGV,IAAI,KAAK91C,SAAS,GAAG,IAAI,GAAG81C,IAAI;MAC/ClB,yBAAyB,CAACl4B,KAAK,IAAI+/B,UAAU;MAC7C53B,IAAI,CAACwU,aAAa,GAAGshB,UAAU,CAC7B3G,SAAS,GAAG0I,SAAS,EACrBr8B,MAAM,EACNw6B,oBAAoB,CAAC,CAAC,EACtBrE,QACF,CAAC;IACH;IAEA,SAASmG,gBAAgBA,CAACF,UAAU,EAAEC,SAAS,EAAEr8B,MAAM,EAAEy1B,IAAI,EAAE;MAC7D,IAAIjxB,IAAI,GAAGizB,wBAAwB,CAAC,CAAC;MACrC,IAAItB,QAAQ,GAAGV,IAAI,KAAK91C,SAAS,GAAG,IAAI,GAAG81C,IAAI;MAC/C,IAAImG,MAAM,GAAGp3B,IAAI,CAACwU,aAAa;MAC/B,IAAIx5B,IAAI,GAAGo8C,MAAM,CAACp8C,IAAI;MAGtB,IAAIg1C,WAAW,KAAK,IAAI,EAAE;QACxB,IAAI2B,QAAQ,KAAK,IAAI,EAAE;UACrB,IAAIoG,UAAU,GAAG/H,WAAW,CAACxb,aAAa;UAC1C,IAAIod,QAAQ,GAAGmG,UAAU,CAAC9G,IAAI;UAE9B,IAAIS,kBAAkB,CAACC,QAAQ,EAAEC,QAAQ,CAAC,EAAE;YAC1C5xB,IAAI,CAACwU,aAAa,GAAGshB,UAAU,CAAC+B,SAAS,EAAEr8B,MAAM,EAAExgB,IAAI,EAAE22C,QAAQ,CAAC;YAClE;UACF;QACF;MACF;MAEA5B,yBAAyB,CAACl4B,KAAK,IAAI+/B,UAAU;MAC7C53B,IAAI,CAACwU,aAAa,GAAGshB,UAAU,CAC7B3G,SAAS,GAAG0I,SAAS,EACrBr8B,MAAM,EACNxgB,IAAI,EACJ22C,QACF,CAAC;IACH;IAEA,SAASiE,WAAWA,CAACp6B,MAAM,EAAEy1B,IAAI,EAAE;MACjC,IACE,CAAClB,yBAAyB,CAAC7b,IAAI,GAAGnS,iBAAiB,MAAMJ,MAAM,IAC/D,CAACouB,yBAAyB,CAAC7b,IAAI,GAAGlS,0BAA0B,MAAML,MAAM,EACxE;QACAg2B,eAAe,CACb1gC,eAAe,GAAGlB,SAAS,GAAGc,aAAa,EAC3Cy4B,OAAO,EACP9zB,MAAM,EACNy1B,IACF,CAAC;MACH,CAAC,MAAM;QACL0G,eAAe,CAAC5hC,SAAS,GAAGc,aAAa,EAAEy4B,OAAO,EAAE9zB,MAAM,EAAEy1B,IAAI,CAAC;MACnE;IACF;IAEA,SAASmF,YAAYA,CAAC56B,MAAM,EAAEy1B,IAAI,EAAE;MAClC6G,gBAAgB,CAAC/hC,SAAS,EAAEu5B,OAAO,EAAE9zB,MAAM,EAAEy1B,IAAI,CAAC;IACpD;IAEA,SAAS+G,oBAAoBA,CAACx8B,MAAM,EAAEy1B,IAAI,EAAE;MAC1C0G,eAAe,CAACniC,MAAM,EAAE45B,SAAS,EAAE5zB,MAAM,EAAEy1B,IAAI,CAAC;IAClD;IAEA,SAASgH,qBAAqBA,CAACz8B,MAAM,EAAEy1B,IAAI,EAAE;MAC3C,OAAO6G,gBAAgB,CAACtiC,MAAM,EAAE45B,SAAS,EAAE5zB,MAAM,EAAEy1B,IAAI,CAAC;IAC1D;IAEA,SAASiH,iBAAiBA,CAAC18B,MAAM,EAAEy1B,IAAI,EAAE;MACvC,IAAI2G,UAAU,GAAGpiC,MAAM,GAAGoB,YAAY;MAEtC,IAAI,CAACm5B,yBAAyB,CAAC7b,IAAI,GAAGnS,iBAAiB,MAAMJ,MAAM,EAAE;QACnEi2B,UAAU,IAAI5gC,cAAc;MAC9B;MAEA,OAAO2gC,eAAe,CAACC,UAAU,EAAEvI,MAAM,EAAE7zB,MAAM,EAAEy1B,IAAI,CAAC;IAC1D;IAEA,SAASkH,kBAAkBA,CAAC38B,MAAM,EAAEy1B,IAAI,EAAE;MACxC,OAAO6G,gBAAgB,CAACtiC,MAAM,EAAE65B,MAAM,EAAE7zB,MAAM,EAAEy1B,IAAI,CAAC;IACvD;IAEA,SAASmH,sBAAsBA,CAAC58B,MAAM,EAAEsrB,GAAG,EAAE;MAC3C,IAAI,OAAOA,GAAG,KAAK,UAAU,EAAE;QAC7B,IAAIuR,WAAW,GAAGvR,GAAG;QACrB,IAAI9rC,IAAI,GAAGwgB,MAAM,CAAC,CAAC;QACnB68B,WAAW,CAACr9C,IAAI,CAAC;QACjB,OAAO,YAAY;UACjBq9C,WAAW,CAAC,IAAI,CAAC;QACnB,CAAC;MACH,CAAC,MAAM,IAAIvR,GAAG,KAAK,IAAI,IAAIA,GAAG,KAAK3rC,SAAS,EAAE;QAC5C,IAAIm9C,SAAS,GAAGxR,GAAG;QAEnB;UACE,IAAI,CAACwR,SAAS,CAAC1gD,cAAc,CAAC,SAAS,CAAC,EAAE;YACxCxC,KAAK,CACH,+DAA+D,GAC7D,iEAAiE,EACnE,uBAAuB,GAAGkC,MAAM,CAACwoC,IAAI,CAACwY,SAAS,CAAC,CAAC9W,IAAI,CAAC,IAAI,CAAC,GAAG,GAChE,CAAC;UACH;QACF;QAEA,IAAI+W,KAAK,GAAG/8B,MAAM,CAAC,CAAC;QAEpB88B,SAAS,CAACp1C,OAAO,GAAGq1C,KAAK;QACzB,OAAO,YAAY;UACjBD,SAAS,CAACp1C,OAAO,GAAG,IAAI;QAC1B,CAAC;MACH;IACF;IAEA,SAASs1C,qBAAqBA,CAAC1R,GAAG,EAAEtrB,MAAM,EAAEy1B,IAAI,EAAE;MAChD;QACE,IAAI,OAAOz1B,MAAM,KAAK,UAAU,EAAE;UAChCpmB,KAAK,CACH,kEAAkE,GAChE,8CAA8C,EAChDomB,MAAM,KAAK,IAAI,GAAG,OAAOA,MAAM,GAAG,MACpC,CAAC;QACH;MACF;MAEA,IAAIi9B,UAAU,GACZxH,IAAI,KAAK,IAAI,IAAIA,IAAI,KAAK91C,SAAS,GAAG81C,IAAI,CAACt7C,MAAM,CAAC,CAACmxC,GAAG,CAAC,CAAC,GAAG,IAAI;MACjE,IAAI8Q,UAAU,GAAGpiC,MAAM,GAAGoB,YAAY;MAEtC,IAAI,CAACm5B,yBAAyB,CAAC7b,IAAI,GAAGnS,iBAAiB,MAAMJ,MAAM,EAAE;QACnEi2B,UAAU,IAAI5gC,cAAc;MAC9B;MAEA2gC,eAAe,CACbC,UAAU,EACVvI,MAAM,EACN+I,sBAAsB,CAACvnB,IAAI,CAAC,IAAI,EAAErV,MAAM,EAAEsrB,GAAG,CAAC,EAC9C2R,UACF,CAAC;IACH;IAEA,SAASC,sBAAsBA,CAAC5R,GAAG,EAAEtrB,MAAM,EAAEy1B,IAAI,EAAE;MACjD;QACE,IAAI,OAAOz1B,MAAM,KAAK,UAAU,EAAE;UAChCpmB,KAAK,CACH,kEAAkE,GAChE,8CAA8C,EAChDomB,MAAM,KAAK,IAAI,GAAG,OAAOA,MAAM,GAAG,MACpC,CAAC;QACH;MACF;MAEA,IAAIi9B,UAAU,GACZxH,IAAI,KAAK,IAAI,IAAIA,IAAI,KAAK91C,SAAS,GAAG81C,IAAI,CAACt7C,MAAM,CAAC,CAACmxC,GAAG,CAAC,CAAC,GAAG,IAAI;MACjEgR,gBAAgB,CACdtiC,MAAM,EACN65B,MAAM,EACN+I,sBAAsB,CAACvnB,IAAI,CAAC,IAAI,EAAErV,MAAM,EAAEsrB,GAAG,CAAC,EAC9C2R,UACF,CAAC;IACH;IAEA,SAASE,eAAeA,CAACpnC,KAAK,EAAEqnC,WAAW,EAAE,CAI7C;IAEA,IAAIC,gBAAgB,GAAGF,eAAe;IAEtC,SAASG,aAAaA,CAACp2C,QAAQ,EAAEuuC,IAAI,EAAE;MACrC,IAAIjxB,IAAI,GAAG+yB,uBAAuB,CAAC,CAAC;MACpC,IAAIpB,QAAQ,GAAGV,IAAI,KAAK91C,SAAS,GAAG,IAAI,GAAG81C,IAAI;MAC/CjxB,IAAI,CAACwU,aAAa,GAAG,CAAC9xB,QAAQ,EAAEivC,QAAQ,CAAC;MACzC,OAAOjvC,QAAQ;IACjB;IAEA,SAASq2C,cAAcA,CAACr2C,QAAQ,EAAEuuC,IAAI,EAAE;MACtC,IAAIjxB,IAAI,GAAGizB,wBAAwB,CAAC,CAAC;MACrC,IAAItB,QAAQ,GAAGV,IAAI,KAAK91C,SAAS,GAAG,IAAI,GAAG81C,IAAI;MAC/C,IAAItT,SAAS,GAAG3d,IAAI,CAACwU,aAAa;MAElC,IAAImd,QAAQ,KAAK,IAAI,EAAE;QACrB,IAAIC,QAAQ,GAAGjU,SAAS,CAAC,CAAC,CAAC;QAE3B,IAAI+T,kBAAkB,CAACC,QAAQ,EAAEC,QAAQ,CAAC,EAAE;UAC1C,OAAOjU,SAAS,CAAC,CAAC,CAAC;QACrB;MACF;MAEA3d,IAAI,CAACwU,aAAa,GAAG,CAAC9xB,QAAQ,EAAEivC,QAAQ,CAAC;MACzC,OAAOjvC,QAAQ;IACjB;IAEA,SAASs2C,SAASA,CAACC,UAAU,EAAEhI,IAAI,EAAE;MACnC,IAAIjxB,IAAI,GAAG+yB,uBAAuB,CAAC,CAAC;MACpC,IAAIpB,QAAQ,GAAGV,IAAI,KAAK91C,SAAS,GAAG,IAAI,GAAG81C,IAAI;MAC/C,IAAI12B,SAAS,GAAG0+B,UAAU,CAAC,CAAC;MAE5B,IAAI7I,mCAAmC,EAAE;QACvC9uB,0BAA0B,CAAC,IAAI,CAAC;QAChC23B,UAAU,CAAC,CAAC;QACZ33B,0BAA0B,CAAC,KAAK,CAAC;MACnC;MAEAtB,IAAI,CAACwU,aAAa,GAAG,CAACja,SAAS,EAAEo3B,QAAQ,CAAC;MAC1C,OAAOp3B,SAAS;IAClB;IAEA,SAAS2+B,UAAUA,CAACD,UAAU,EAAEhI,IAAI,EAAE;MACpC,IAAIjxB,IAAI,GAAGizB,wBAAwB,CAAC,CAAC;MACrC,IAAItB,QAAQ,GAAGV,IAAI,KAAK91C,SAAS,GAAG,IAAI,GAAG81C,IAAI;MAC/C,IAAItT,SAAS,GAAG3d,IAAI,CAACwU,aAAa;MAElC,IAAImd,QAAQ,KAAK,IAAI,EAAE;QACrB,IAAIC,QAAQ,GAAGjU,SAAS,CAAC,CAAC,CAAC;QAE3B,IAAI+T,kBAAkB,CAACC,QAAQ,EAAEC,QAAQ,CAAC,EAAE;UAC1C,OAAOjU,SAAS,CAAC,CAAC,CAAC;QACrB;MACF;MAEA,IAAIpjB,SAAS,GAAG0+B,UAAU,CAAC,CAAC;MAE5B,IAAI7I,mCAAmC,EAAE;QACvC9uB,0BAA0B,CAAC,IAAI,CAAC;QAChC23B,UAAU,CAAC,CAAC;QACZ33B,0BAA0B,CAAC,KAAK,CAAC;MACnC;MAEAtB,IAAI,CAACwU,aAAa,GAAG,CAACja,SAAS,EAAEo3B,QAAQ,CAAC;MAC1C,OAAOp3B,SAAS;IAClB;IAEA,SAAS4+B,kBAAkBA,CAAC5nC,KAAK,EAAEimC,YAAY,EAAE;MAC/C,IAAIx3B,IAAI,GAAG+yB,uBAAuB,CAAC,CAAC;MACpC,OAAOqG,sBAAsB,CAACp5B,IAAI,EAAEzO,KAAK,EAAEimC,YAAY,CAAC;IAC1D;IAEA,SAAS6B,mBAAmBA,CAAC9nC,KAAK,EAAEimC,YAAY,EAAE;MAChD,IAAIx3B,IAAI,GAAGizB,wBAAwB,CAAC,CAAC;MACrC,IAAIqG,mBAAmB,GAAGtJ,WAAW;MACrC,IAAI4G,SAAS,GAAG0C,mBAAmB,CAAC9kB,aAAa;MACjD,OAAO+kB,uBAAuB,CAACv5B,IAAI,EAAE42B,SAAS,EAAErlC,KAAK,EAAEimC,YAAY,CAAC;IACtE;IAEA,SAASgC,qBAAqBA,CAACjoC,KAAK,EAAEimC,YAAY,EAAE;MAClD,IAAIx3B,IAAI,GAAGizB,wBAAwB,CAAC,CAAC;MAErC,IAAIjD,WAAW,KAAK,IAAI,EAAE;QAExB,OAAOoJ,sBAAsB,CAACp5B,IAAI,EAAEzO,KAAK,EAAEimC,YAAY,CAAC;MAC1D,CAAC,MAAM;QAEL,IAAIZ,SAAS,GAAG5G,WAAW,CAACxb,aAAa;QACzC,OAAO+kB,uBAAuB,CAACv5B,IAAI,EAAE42B,SAAS,EAAErlC,KAAK,EAAEimC,YAAY,CAAC;MACtE;IACF;IAEA,SAAS4B,sBAAsBA,CAACp5B,IAAI,EAAEzO,KAAK,EAAEimC,YAAY,EAAE;MACzD,IAGEA,YAAY,KAAKr8C,SAAS,IAG1B,CAAC8sB,gBAAgB,CAAC9B,WAAW,EAAEtB,YAAY,CAAC,EAC5C;QAEA7E,IAAI,CAACwU,aAAa,GAAGgjB,YAAY;QAEjC,IAAIiC,YAAY,GAAGC,mBAAmB,CAAC,CAAC;QACxC3J,yBAAyB,CAAC5qB,KAAK,GAAGiD,UAAU,CAC1C2nB,yBAAyB,CAAC5qB,KAAK,EAC/Bs0B,YACF,CAAC;QACDva,sBAAsB,CAACua,YAAY,CAAC;QACpC,OAAOjC,YAAY;MACrB,CAAC,MAAM;QACLx3B,IAAI,CAACwU,aAAa,GAAGjjB,KAAK;QAC1B,OAAOA,KAAK;MACd;IACF;IAEA,SAASgoC,uBAAuBA,CAACv5B,IAAI,EAAE42B,SAAS,EAAErlC,KAAK,EAAEimC,YAAY,EAAE;MACrE,IAAInjB,QAAQ,CAAC9iB,KAAK,EAAEqlC,SAAS,CAAC,EAAE;QAG9B,OAAOrlC,KAAK;MACd,CAAC,MAAM;QAGL,IAAI+7B,mBAAmB,CAAC,CAAC,EAAE;UAGzB,IAAIqM,WAAW,GAAGP,sBAAsB,CAACp5B,IAAI,EAAEzO,KAAK,EAAEimC,YAAY,CAAC;UAGnE,IAAI,CAACnjB,QAAQ,CAACslB,WAAW,EAAE/C,SAAS,CAAC,EAAE;YACrC5B,gCAAgC,CAAC,CAAC;UACpC;UAEA,OAAO2E,WAAW;QACpB;QAEA,IAAIC,gBAAgB,GAAG,CAACtyB,0BAA0B,CAACnB,WAAW,CAAC;QAE/D,IAAIyzB,gBAAgB,EAAE;UAIpB,IAAIH,YAAY,GAAGC,mBAAmB,CAAC,CAAC;UACxC3J,yBAAyB,CAAC5qB,KAAK,GAAGiD,UAAU,CAC1C2nB,yBAAyB,CAAC5qB,KAAK,EAC/Bs0B,YACF,CAAC;UACDva,sBAAsB,CAACua,YAAY,CAAC;UAGpC,OAAO7C,SAAS;QAClB,CAAC,MAAM;UAIL5B,gCAAgC,CAAC,CAAC;UAClCh1B,IAAI,CAACwU,aAAa,GAAGjjB,KAAK;UAC1B,OAAOA,KAAK;QACd;MACF;IACF;IAEA,SAASsoC,eAAeA,CACtB3kC,KAAK,EACLuhB,KAAK,EACLqjB,YAAY,EACZC,aAAa,EACbr3C,QAAQ,EACRs3C,OAAO,EACP;MACA,IAAIC,gBAAgB,GAAGvvB,wBAAwB,CAAC,CAAC;MACjDC,wBAAwB,CACtBE,mBAAmB,CAACovB,gBAAgB,EAAEl5B,uBAAuB,CAC/D,CAAC;MACD,IAAIm5B,cAAc,GAAGzK,yBAAyB,CAAC3U,UAAU;MACzD,IAAIqf,iBAAiB,GAAG;QACtBC,UAAU,EAAE,IAAIpY,GAAG,CAAC;MACtB,CAAC;MAED;QACEyN,yBAAyB,CAAC3U,UAAU,GAAG,IAAI;QAC3Cmc,gBAAgB,CAAC/hC,KAAK,EAAEuhB,KAAK,EAAEqjB,YAAY,CAAC;QAC5CrK,yBAAyB,CAAC3U,UAAU,GAAGqf,iBAAiB;MAC1D;MAEA;QACE1K,yBAAyB,CAAC3U,UAAU,CAACuf,cAAc,GAAG,IAAIrY,GAAG,CAAC,CAAC;MACjE;MAEA,IAAI;QACF,IAAIvkC,WAAW,EAAEy9B,QAAQ,EAAEof,wBAAwB;QACnD,IAAItoC,kBAAkB,EAAC,CAAC,KACnB;UAEHilC,gBAAgB,CAAC/hC,KAAK,EAAEuhB,KAAK,EAAEsjB,aAAa,CAAC;UAC7Cr3C,QAAQ,CAAC,CAAC;QACZ;MACF,CAAC,CAAC,OAAOtN,KAAK,EAAE;QACd;UAGE,MAAMA,KAAK;QACb;MACF,CAAC,SAAS;QACRu1B,wBAAwB,CAACsvB,gBAAgB,CAAC;QAC1CxK,yBAAyB,CAAC3U,UAAU,GAAGof,cAAc;QAErD;UACE,IAAIA,cAAc,KAAK,IAAI,IAAIC,iBAAiB,CAACE,cAAc,EAAE;YAC/D,IAAIE,kBAAkB,GAAGJ,iBAAiB,CAACE,cAAc,CAAChwB,IAAI;YAE9D8vB,iBAAiB,CAACE,cAAc,CAAC9vB,KAAK,CAAC,CAAC;YAExC,IAAIgwB,kBAAkB,GAAG,EAAE,EAAE;cAC3B5lD,IAAI,CACF,6DAA6D,GAC3D,mFAAmF,GACnF,yDACJ,CAAC;YACH;UACF;QACF;MACF;IACF;IAEA,SAAS6lD,eAAeA,CAAA,EAAG;MACzB,IAAIC,SAAS,GAAG3D,cAAc,CAAC,KAAK,CAAC;MAErC,IAAI4D,KAAK,GAAGb,eAAe,CAAChpB,IAAI,CAC9B,IAAI,EACJkf,yBAAyB,EACzB0K,SAAS,CAAChkB,KAAK,EACf,IAAI,EACJ,KACF,CAAC;MACD,IAAIzW,IAAI,GAAG+yB,uBAAuB,CAAC,CAAC;MACpC/yB,IAAI,CAACwU,aAAa,GAAGkmB,KAAK;MAC1B,OAAO,CAAC,KAAK,EAAEA,KAAK,CAAC;IACvB;IAEA,SAASC,gBAAgBA,CAAA,EAAG;MAC1B,IAAIC,YAAY,GAAG1D,WAAW,CAAC,CAAC;QAC9B2D,iBAAiB,GAAGD,YAAY,CAAC,CAAC,CAAC;MAErC,IAAI56B,IAAI,GAAGizB,wBAAwB,CAAC,CAAC;MACrC,IAAIyH,KAAK,GAAG16B,IAAI,CAACwU,aAAa;MAC9B,IAAIsmB,SAAS,GACX,OAAOD,iBAAiB,KAAK,SAAS,GAClCA,iBAAiB,GACjBpH,WAAW,CAACoH,iBAAiB,CAAC;MACpC,OAAO,CAACC,SAAS,EAAEJ,KAAK,CAAC;IAC3B;IAEA,SAASK,kBAAkBA,CAAA,EAAG;MAC5B,IAAIC,cAAc,GAAG7D,aAAa,CAAC,CAAC;QAClC0D,iBAAiB,GAAGG,cAAc,CAAC,CAAC,CAAC;MAEvC,IAAIh7B,IAAI,GAAGizB,wBAAwB,CAAC,CAAC;MACrC,IAAIyH,KAAK,GAAG16B,IAAI,CAACwU,aAAa;MAC9B,IAAIsmB,SAAS,GACX,OAAOD,iBAAiB,KAAK,SAAS,GAClCA,iBAAiB,GACjBpH,WAAW,CAACoH,iBAAiB,CAAC;MACpC,OAAO,CAACC,SAAS,EAAEJ,KAAK,CAAC;IAC3B;IAEA,SAASO,OAAOA,CAAA,EAAG;MACjB,IAAIj7B,IAAI,GAAG+yB,uBAAuB,CAAC,CAAC;MACpC,IAAIxyB,IAAI,GAAG6W,qBAAqB,CAAC,CAAC;MAMlC,IAAI8jB,gBAAgB,GAAG36B,IAAI,CAAC26B,gBAAgB;MAC5C,IAAIC,EAAE;MAEN;QAEE,IAAIC,cAAc,GAAG9K,qBAAqB,EAAE;QAC5C6K,EAAE,GAAG,GAAG,GAAGD,gBAAgB,GAAG,GAAG,GAAGE,cAAc,CAAC9T,QAAQ,CAAC,EAAE,CAAC,GAAG,GAAG;MACvE;MAEAtnB,IAAI,CAACwU,aAAa,GAAG2mB,EAAE;MACvB,OAAOA,EAAE;IACX;IAEA,SAASE,QAAQA,CAAA,EAAG;MAClB,IAAIr7B,IAAI,GAAGizB,wBAAwB,CAAC,CAAC;MACrC,IAAIkI,EAAE,GAAGn7B,IAAI,CAACwU,aAAa;MAC3B,OAAO2mB,EAAE;IACX;IAEA,SAAS9G,qBAAqBA,CAACn/B,KAAK,EAAEuhB,KAAK,EAAEl4B,MAAM,EAAE;MACnD;QACE,IAAI,OAAOzJ,SAAS,CAAC,CAAC,CAAC,KAAK,UAAU,EAAE;UACtCM,KAAK,CACH,6EAA6E,GAC3E,2DAA2D,GAC3D,+DACJ,CAAC;QACH;MACF;MAEA,IAAIoxB,IAAI,GAAG80B,iBAAiB,CAACpmC,KAAK,CAAC;MACnC,IAAIqU,MAAM,GAAG;QACX/C,IAAI,EAAEA,IAAI;QACVquB,UAAU,EAAEryB,MAAM;QAClBjkB,MAAM,EAAEA,MAAM;QACdu2C,aAAa,EAAE,KAAK;QACpBC,UAAU,EAAE,IAAI;QAChB5xC,IAAI,EAAE;MACR,CAAC;MAED,IAAIo4C,mBAAmB,CAACrmC,KAAK,CAAC,EAAE;QAC9BsmC,wBAAwB,CAAC/kB,KAAK,EAAElN,MAAM,CAAC;MACzC,CAAC,MAAM;QACL,IAAIhJ,IAAI,GAAGuW,2BAA2B,CAAC5hB,KAAK,EAAEuhB,KAAK,EAAElN,MAAM,EAAE/C,IAAI,CAAC;QAElE,IAAIjG,IAAI,KAAK,IAAI,EAAE;UACjBs2B,qBAAqB,CAACt2B,IAAI,EAAErL,KAAK,EAAEsR,IAAI,CAAC;UACxCi1B,wBAAwB,CAACl7B,IAAI,EAAEkW,KAAK,EAAEjQ,IAAI,CAAC;QAC7C;MACF;IACF;IAEA,SAASywB,gBAAgBA,CAAC/hC,KAAK,EAAEuhB,KAAK,EAAEl4B,MAAM,EAAE;MAC9C;QACE,IAAI,OAAOzJ,SAAS,CAAC,CAAC,CAAC,KAAK,UAAU,EAAE;UACtCM,KAAK,CACH,6EAA6E,GAC3E,2DAA2D,GAC3D,+DACJ,CAAC;QACH;MACF;MAEA,IAAIoxB,IAAI,GAAG80B,iBAAiB,CAACpmC,KAAK,CAAC;MACnC,IAAIqU,MAAM,GAAG;QACX/C,IAAI,EAAEA,IAAI;QACVquB,UAAU,EAAEryB,MAAM;QAClBjkB,MAAM,EAAEA,MAAM;QACdu2C,aAAa,EAAE,KAAK;QACpBC,UAAU,EAAE,IAAI;QAChB5xC,IAAI,EAAE;MACR,CAAC;MAED,IAAIo4C,mBAAmB,CAACrmC,KAAK,CAAC,EAAE;QAC9BsmC,wBAAwB,CAAC/kB,KAAK,EAAElN,MAAM,CAAC;MACzC,CAAC,MAAM;QACL,IAAI7hB,SAAS,GAAGwN,KAAK,CAACxN,SAAS;QAE/B,IACEwN,KAAK,CAACiQ,KAAK,KAAK5C,OAAO,KACtB7a,SAAS,KAAK,IAAI,IAAIA,SAAS,CAACyd,KAAK,KAAK5C,OAAO,CAAC,EACnD;UAIA,IAAI4xB,mBAAmB,GAAG1d,KAAK,CAAC0d,mBAAmB;UAEnD,IAAIA,mBAAmB,KAAK,IAAI,EAAE;YAChC,IAAIuH,cAAc;YAElB;cACEA,cAAc,GAAGnM,wBAAwB,CAACrsC,OAAO;cACjDqsC,wBAAwB,CAACrsC,OAAO,GAC9By4C,yCAAyC;YAC7C;YAEA,IAAI;cACF,IAAIpnB,YAAY,GAAGkC,KAAK,CAAC2d,iBAAiB;cAC1C,IAAIW,UAAU,GAAGZ,mBAAmB,CAAC5f,YAAY,EAAEh2B,MAAM,CAAC;cAK1DgrB,MAAM,CAACurB,aAAa,GAAG,IAAI;cAC3BvrB,MAAM,CAACwrB,UAAU,GAAGA,UAAU;cAE9B,IAAI1gB,QAAQ,CAAC0gB,UAAU,EAAExgB,YAAY,CAAC,EAAE;gBAMtC2C,4CAA4C,CAC1ChiB,KAAK,EACLuhB,KAAK,EACLlN,MACF,CAAC;gBACD;cACF;YACF,CAAC,CAAC,OAAOn0B,KAAK,EAAE,CAEhB,CAAC,SAAS;cACR;gBACEm6C,wBAAwB,CAACrsC,OAAO,GAAGw4C,cAAc;cACnD;YACF;UACF;QACF;QAEA,IAAIn7B,IAAI,GAAGuW,2BAA2B,CAAC5hB,KAAK,EAAEuhB,KAAK,EAAElN,MAAM,EAAE/C,IAAI,CAAC;QAElE,IAAIjG,IAAI,KAAK,IAAI,EAAE;UACjBs2B,qBAAqB,CAACt2B,IAAI,EAAErL,KAAK,EAAEsR,IAAI,CAAC;UACxCi1B,wBAAwB,CAACl7B,IAAI,EAAEkW,KAAK,EAAEjQ,IAAI,CAAC;QAC7C;MACF;IACF;IAEA,SAAS+0B,mBAAmBA,CAACrmC,KAAK,EAAE;MAClC,IAAIxN,SAAS,GAAGwN,KAAK,CAACxN,SAAS;MAC/B,OACEwN,KAAK,KAAK66B,yBAAyB,IAClCroC,SAAS,KAAK,IAAI,IAAIA,SAAS,KAAKqoC,yBAA0B;IAEnE;IAEA,SAASyL,wBAAwBA,CAAC/kB,KAAK,EAAElN,MAAM,EAAE;MAI/C4mB,0CAA0C,GACxCD,4BAA4B,GAAG,IAAI;MACrC,IAAIxZ,OAAO,GAAGD,KAAK,CAACC,OAAO;MAE3B,IAAIA,OAAO,KAAK,IAAI,EAAE;QAEpBnN,MAAM,CAACpmB,IAAI,GAAGomB,MAAM;MACtB,CAAC,MAAM;QACLA,MAAM,CAACpmB,IAAI,GAAGuzB,OAAO,CAACvzB,IAAI;QAC1BuzB,OAAO,CAACvzB,IAAI,GAAGomB,MAAM;MACvB;MAEAkN,KAAK,CAACC,OAAO,GAAGnN,MAAM;IACxB;IAEA,SAASkyB,wBAAwBA,CAACl7B,IAAI,EAAEkW,KAAK,EAAEjQ,IAAI,EAAE;MACnD,IAAIoB,gBAAgB,CAACpB,IAAI,CAAC,EAAE;QAC1B,IAAI4W,UAAU,GAAG3G,KAAK,CAACtR,KAAK;QAM5BiY,UAAU,GAAG9U,cAAc,CAAC8U,UAAU,EAAE7c,IAAI,CAACiF,YAAY,CAAC;QAE1D,IAAI6X,aAAa,GAAGjV,UAAU,CAACgV,UAAU,EAAE5W,IAAI,CAAC;QAChDiQ,KAAK,CAACtR,KAAK,GAAGkY,aAAa;QAI3B5T,iBAAiB,CAAClJ,IAAI,EAAE8c,aAAa,CAAC;MACxC;IACF;IAEA,IAAIkV,qBAAqB,GAAG;MAC1BqB,WAAW,EAAEA,WAAW;MACxBF,GAAG,EAAEA,GAAG;MACRkI,WAAW,EAAEnK,qBAAqB;MAClCoK,UAAU,EAAEpK,qBAAqB;MACjCqK,SAAS,EAAErK,qBAAqB;MAChCsK,mBAAmB,EAAEtK,qBAAqB;MAC1CuK,kBAAkB,EAAEvK,qBAAqB;MACzCwK,eAAe,EAAExK,qBAAqB;MACtCyK,OAAO,EAAEzK,qBAAqB;MAC9B0K,UAAU,EAAE1K,qBAAqB;MACjC2K,MAAM,EAAE3K,qBAAqB;MAC7B4K,QAAQ,EAAE5K,qBAAqB;MAC/B6K,aAAa,EAAE7K,qBAAqB;MACpC8K,gBAAgB,EAAE9K,qBAAqB;MACvC+K,aAAa,EAAE/K,qBAAqB;MACpCgL,oBAAoB,EAAEhL,qBAAqB;MAC3CiL,KAAK,EAAEjL;IACT,CAAC;IAED,IAAIU,2BAA2B,GAAG,IAAI;IACtC,IAAID,wCAAwC,GAAG,IAAI;IACnD,IAAID,4BAA4B,GAAG,IAAI;IACvC,IAAIU,8BAA8B,GAAG,IAAI;IACzC,IAAIgK,wCAAwC,GAAG,IAAI;IACnD,IAAIhB,yCAAyC,GAAG,IAAI;IACpD,IAAIiB,2CAA2C,GAAG,IAAI;IAEtD;MACE,IAAIC,wBAAwB,GAAG,SAAAA,CAAA,EAAY;QACzCznD,KAAK,CACH,qDAAqD,GACnD,gFAAgF,GAChF,iFAAiF,GACjF,8CACJ,CAAC;MACH,CAAC;MAED,IAAI0nD,qBAAqB,GAAG,SAAAA,CAAA,EAAY;QACtC1nD,KAAK,CACH,kFAAkF,GAChF,mEAAmE,GACnE,4BAA4B,GAC5B,yCACJ,CAAC;MACH,CAAC;MAED+8C,2BAA2B,GAAG;QAC5ByB,WAAW,EAAE,SAAAA,CAAU78C,OAAO,EAAE;UAC9B,OAAO68C,WAAW,CAAC78C,OAAO,CAAC;QAC7B,CAAC;QACD28C,GAAG,EAAEA,GAAG;QACRkI,WAAW,EAAE,SAAAA,CAAUl5C,QAAQ,EAAEuuC,IAAI,EAAE;UACrCT,oBAAoB,GAAG,aAAa;UACpCI,iBAAiB,CAAC,CAAC;UACnBI,oBAAoB,CAACC,IAAI,CAAC;UAC1B,OAAO6H,aAAa,CAACp2C,QAAQ,EAAEuuC,IAAI,CAAC;QACtC,CAAC;QACD4K,UAAU,EAAE,SAAAA,CAAU9kD,OAAO,EAAE;UAC7By5C,oBAAoB,GAAG,YAAY;UACnCI,iBAAiB,CAAC,CAAC;UACnB,OAAOgD,WAAW,CAAC78C,OAAO,CAAC;QAC7B,CAAC;QACD+kD,SAAS,EAAE,SAAAA,CAAUtgC,MAAM,EAAEy1B,IAAI,EAAE;UACjCT,oBAAoB,GAAG,WAAW;UAClCI,iBAAiB,CAAC,CAAC;UACnBI,oBAAoB,CAACC,IAAI,CAAC;UAC1B,OAAO2E,WAAW,CAACp6B,MAAM,EAAEy1B,IAAI,CAAC;QAClC,CAAC;QACD8K,mBAAmB,EAAE,SAAAA,CAAUjV,GAAG,EAAEtrB,MAAM,EAAEy1B,IAAI,EAAE;UAChDT,oBAAoB,GAAG,qBAAqB;UAC5CI,iBAAiB,CAAC,CAAC;UACnBI,oBAAoB,CAACC,IAAI,CAAC;UAC1B,OAAOuH,qBAAqB,CAAC1R,GAAG,EAAEtrB,MAAM,EAAEy1B,IAAI,CAAC;QACjD,CAAC;QACD+K,kBAAkB,EAAE,SAAAA,CAAUxgC,MAAM,EAAEy1B,IAAI,EAAE;UAC1CT,oBAAoB,GAAG,oBAAoB;UAC3CI,iBAAiB,CAAC,CAAC;UACnBI,oBAAoB,CAACC,IAAI,CAAC;UAC1B,OAAO+G,oBAAoB,CAACx8B,MAAM,EAAEy1B,IAAI,CAAC;QAC3C,CAAC;QACDgL,eAAe,EAAE,SAAAA,CAAUzgC,MAAM,EAAEy1B,IAAI,EAAE;UACvCT,oBAAoB,GAAG,iBAAiB;UACxCI,iBAAiB,CAAC,CAAC;UACnBI,oBAAoB,CAACC,IAAI,CAAC;UAC1B,OAAOiH,iBAAiB,CAAC18B,MAAM,EAAEy1B,IAAI,CAAC;QACxC,CAAC;QACDiL,OAAO,EAAE,SAAAA,CAAU1gC,MAAM,EAAEy1B,IAAI,EAAE;UAC/BT,oBAAoB,GAAG,SAAS;UAChCI,iBAAiB,CAAC,CAAC;UACnBI,oBAAoB,CAACC,IAAI,CAAC;UAC1B,IAAIyK,cAAc,GAAGnM,wBAAwB,CAACrsC,OAAO;UACrDqsC,wBAAwB,CAACrsC,OAAO,GAC9By5C,wCAAwC;UAE1C,IAAI;YACF,OAAO3D,SAAS,CAACx9B,MAAM,EAAEy1B,IAAI,CAAC;UAChC,CAAC,SAAS;YACR1B,wBAAwB,CAACrsC,OAAO,GAAGw4C,cAAc;UACnD;QACF,CAAC;QACDS,UAAU,EAAE,SAAAA,CAAUpI,OAAO,EAAEC,UAAU,EAAEp/B,IAAI,EAAE;UAC/C47B,oBAAoB,GAAG,YAAY;UACnCI,iBAAiB,CAAC,CAAC;UACnB,IAAI8K,cAAc,GAAGnM,wBAAwB,CAACrsC,OAAO;UACrDqsC,wBAAwB,CAACrsC,OAAO,GAC9By5C,wCAAwC;UAE1C,IAAI;YACF,OAAO7I,YAAY,CAACC,OAAO,EAAEC,UAAU,EAAEp/B,IAAI,CAAC;UAChD,CAAC,SAAS;YACR26B,wBAAwB,CAACrsC,OAAO,GAAGw4C,cAAc;UACnD;QACF,CAAC;QACDU,MAAM,EAAE,SAAAA,CAAU5E,YAAY,EAAE;UAC9BhH,oBAAoB,GAAG,QAAQ;UAC/BI,iBAAiB,CAAC,CAAC;UACnB,OAAO2G,QAAQ,CAACC,YAAY,CAAC;QAC/B,CAAC;QACD6E,QAAQ,EAAE,SAAAA,CAAUpI,YAAY,EAAE;UAChCzD,oBAAoB,GAAG,UAAU;UACjCI,iBAAiB,CAAC,CAAC;UACnB,IAAI8K,cAAc,GAAGnM,wBAAwB,CAACrsC,OAAO;UACrDqsC,wBAAwB,CAACrsC,OAAO,GAC9By5C,wCAAwC;UAE1C,IAAI;YACF,OAAO3F,UAAU,CAAC/C,YAAY,CAAC;UACjC,CAAC,SAAS;YACR1E,wBAAwB,CAACrsC,OAAO,GAAGw4C,cAAc;UACnD;QACF,CAAC;QACDY,aAAa,EAAE,SAAAA,CAAU/qC,KAAK,EAAEqnC,WAAW,EAAE;UAC3CpI,oBAAoB,GAAG,eAAe;UACtCI,iBAAiB,CAAC,CAAC;UACnB,OAAO+H,eAAe,CAAC,CAAC;QAC1B,CAAC;QACD4D,gBAAgB,EAAE,SAAAA,CAAUhrC,KAAK,EAAEimC,YAAY,EAAE;UAC/ChH,oBAAoB,GAAG,kBAAkB;UACzCI,iBAAiB,CAAC,CAAC;UACnB,OAAOuI,kBAAkB,CAAC5nC,KAAK,EAAEimC,YAAY,CAAC;QAChD,CAAC;QACDgF,aAAa,EAAE,SAAAA,CAAA,EAAY;UACzBhM,oBAAoB,GAAG,eAAe;UACtCI,iBAAiB,CAAC,CAAC;UACnB,OAAO4J,eAAe,CAAC,CAAC;QAC1B,CAAC;QACDiC,oBAAoB,EAAE,SAAAA,CACpBpH,SAAS,EACTC,WAAW,EACXC,iBAAiB,EACjB;UACA/E,oBAAoB,GAAG,sBAAsB;UAC7CI,iBAAiB,CAAC,CAAC;UACnB,OAAOwE,sBAAsB,CAACC,SAAS,EAAEC,WAAW,CAAC;QACvD,CAAC;QACDoH,KAAK,EAAE,SAAAA,CAAA,EAAY;UACjBlM,oBAAoB,GAAG,OAAO;UAC9BI,iBAAiB,CAAC,CAAC;UACnB,OAAOqK,OAAO,CAAC,CAAC;QAClB;MACF,CAAC;MAED/I,wCAAwC,GAAG;QACzC0B,WAAW,EAAE,SAAAA,CAAU78C,OAAO,EAAE;UAC9B,OAAO68C,WAAW,CAAC78C,OAAO,CAAC;QAC7B,CAAC;QACD28C,GAAG,EAAEA,GAAG;QACRkI,WAAW,EAAE,SAAAA,CAAUl5C,QAAQ,EAAEuuC,IAAI,EAAE;UACrCT,oBAAoB,GAAG,aAAa;UACpCM,kBAAkB,CAAC,CAAC;UACpB,OAAOgI,aAAa,CAACp2C,QAAQ,EAAEuuC,IAAI,CAAC;QACtC,CAAC;QACD4K,UAAU,EAAE,SAAAA,CAAU9kD,OAAO,EAAE;UAC7By5C,oBAAoB,GAAG,YAAY;UACnCM,kBAAkB,CAAC,CAAC;UACpB,OAAO8C,WAAW,CAAC78C,OAAO,CAAC;QAC7B,CAAC;QACD+kD,SAAS,EAAE,SAAAA,CAAUtgC,MAAM,EAAEy1B,IAAI,EAAE;UACjCT,oBAAoB,GAAG,WAAW;UAClCM,kBAAkB,CAAC,CAAC;UACpB,OAAO8E,WAAW,CAACp6B,MAAM,EAAEy1B,IAAI,CAAC;QAClC,CAAC;QACD8K,mBAAmB,EAAE,SAAAA,CAAUjV,GAAG,EAAEtrB,MAAM,EAAEy1B,IAAI,EAAE;UAChDT,oBAAoB,GAAG,qBAAqB;UAC5CM,kBAAkB,CAAC,CAAC;UACpB,OAAO0H,qBAAqB,CAAC1R,GAAG,EAAEtrB,MAAM,EAAEy1B,IAAI,CAAC;QACjD,CAAC;QACD+K,kBAAkB,EAAE,SAAAA,CAAUxgC,MAAM,EAAEy1B,IAAI,EAAE;UAC1CT,oBAAoB,GAAG,oBAAoB;UAC3CM,kBAAkB,CAAC,CAAC;UACpB,OAAOkH,oBAAoB,CAACx8B,MAAM,EAAEy1B,IAAI,CAAC;QAC3C,CAAC;QACDgL,eAAe,EAAE,SAAAA,CAAUzgC,MAAM,EAAEy1B,IAAI,EAAE;UACvCT,oBAAoB,GAAG,iBAAiB;UACxCM,kBAAkB,CAAC,CAAC;UACpB,OAAOoH,iBAAiB,CAAC18B,MAAM,EAAEy1B,IAAI,CAAC;QACxC,CAAC;QACDiL,OAAO,EAAE,SAAAA,CAAU1gC,MAAM,EAAEy1B,IAAI,EAAE;UAC/BT,oBAAoB,GAAG,SAAS;UAChCM,kBAAkB,CAAC,CAAC;UACpB,IAAI4K,cAAc,GAAGnM,wBAAwB,CAACrsC,OAAO;UACrDqsC,wBAAwB,CAACrsC,OAAO,GAC9By5C,wCAAwC;UAE1C,IAAI;YACF,OAAO3D,SAAS,CAACx9B,MAAM,EAAEy1B,IAAI,CAAC;UAChC,CAAC,SAAS;YACR1B,wBAAwB,CAACrsC,OAAO,GAAGw4C,cAAc;UACnD;QACF,CAAC;QACDS,UAAU,EAAE,SAAAA,CAAUpI,OAAO,EAAEC,UAAU,EAAEp/B,IAAI,EAAE;UAC/C47B,oBAAoB,GAAG,YAAY;UACnCM,kBAAkB,CAAC,CAAC;UACpB,IAAI4K,cAAc,GAAGnM,wBAAwB,CAACrsC,OAAO;UACrDqsC,wBAAwB,CAACrsC,OAAO,GAC9By5C,wCAAwC;UAE1C,IAAI;YACF,OAAO7I,YAAY,CAACC,OAAO,EAAEC,UAAU,EAAEp/B,IAAI,CAAC;UAChD,CAAC,SAAS;YACR26B,wBAAwB,CAACrsC,OAAO,GAAGw4C,cAAc;UACnD;QACF,CAAC;QACDU,MAAM,EAAE,SAAAA,CAAU5E,YAAY,EAAE;UAC9BhH,oBAAoB,GAAG,QAAQ;UAC/BM,kBAAkB,CAAC,CAAC;UACpB,OAAOyG,QAAQ,CAACC,YAAY,CAAC;QAC/B,CAAC;QACD6E,QAAQ,EAAE,SAAAA,CAAUpI,YAAY,EAAE;UAChCzD,oBAAoB,GAAG,UAAU;UACjCM,kBAAkB,CAAC,CAAC;UACpB,IAAI4K,cAAc,GAAGnM,wBAAwB,CAACrsC,OAAO;UACrDqsC,wBAAwB,CAACrsC,OAAO,GAC9By5C,wCAAwC;UAE1C,IAAI;YACF,OAAO3F,UAAU,CAAC/C,YAAY,CAAC;UACjC,CAAC,SAAS;YACR1E,wBAAwB,CAACrsC,OAAO,GAAGw4C,cAAc;UACnD;QACF,CAAC;QACDY,aAAa,EAAE,SAAAA,CAAU/qC,KAAK,EAAEqnC,WAAW,EAAE;UAC3CpI,oBAAoB,GAAG,eAAe;UACtCM,kBAAkB,CAAC,CAAC;UACpB,OAAO6H,eAAe,CAAC,CAAC;QAC1B,CAAC;QACD4D,gBAAgB,EAAE,SAAAA,CAAUhrC,KAAK,EAAEimC,YAAY,EAAE;UAC/ChH,oBAAoB,GAAG,kBAAkB;UACzCM,kBAAkB,CAAC,CAAC;UACpB,OAAOqI,kBAAkB,CAAC5nC,KAAK,EAAEimC,YAAY,CAAC;QAChD,CAAC;QACDgF,aAAa,EAAE,SAAAA,CAAA,EAAY;UACzBhM,oBAAoB,GAAG,eAAe;UACtCM,kBAAkB,CAAC,CAAC;UACpB,OAAO0J,eAAe,CAAC,CAAC;QAC1B,CAAC;QACDiC,oBAAoB,EAAE,SAAAA,CACpBpH,SAAS,EACTC,WAAW,EACXC,iBAAiB,EACjB;UACA/E,oBAAoB,GAAG,sBAAsB;UAC7CM,kBAAkB,CAAC,CAAC;UACpB,OAAOsE,sBAAsB,CAACC,SAAS,EAAEC,WAAW,CAAC;QACvD,CAAC;QACDoH,KAAK,EAAE,SAAAA,CAAA,EAAY;UACjBlM,oBAAoB,GAAG,OAAO;UAC9BM,kBAAkB,CAAC,CAAC;UACpB,OAAOmK,OAAO,CAAC,CAAC;QAClB;MACF,CAAC;MAEDhJ,4BAA4B,GAAG;QAC7B2B,WAAW,EAAE,SAAAA,CAAU78C,OAAO,EAAE;UAC9B,OAAO68C,WAAW,CAAC78C,OAAO,CAAC;QAC7B,CAAC;QACD28C,GAAG,EAAEA,GAAG;QACRkI,WAAW,EAAE,SAAAA,CAAUl5C,QAAQ,EAAEuuC,IAAI,EAAE;UACrCT,oBAAoB,GAAG,aAAa;UACpCM,kBAAkB,CAAC,CAAC;UACpB,OAAOiI,cAAc,CAACr2C,QAAQ,EAAEuuC,IAAI,CAAC;QACvC,CAAC;QACD4K,UAAU,EAAE,SAAAA,CAAU9kD,OAAO,EAAE;UAC7By5C,oBAAoB,GAAG,YAAY;UACnCM,kBAAkB,CAAC,CAAC;UACpB,OAAO8C,WAAW,CAAC78C,OAAO,CAAC;QAC7B,CAAC;QACD+kD,SAAS,EAAE,SAAAA,CAAUtgC,MAAM,EAAEy1B,IAAI,EAAE;UACjCT,oBAAoB,GAAG,WAAW;UAClCM,kBAAkB,CAAC,CAAC;UACpB,OAAOsF,YAAY,CAAC56B,MAAM,EAAEy1B,IAAI,CAAC;QACnC,CAAC;QACD8K,mBAAmB,EAAE,SAAAA,CAAUjV,GAAG,EAAEtrB,MAAM,EAAEy1B,IAAI,EAAE;UAChDT,oBAAoB,GAAG,qBAAqB;UAC5CM,kBAAkB,CAAC,CAAC;UACpB,OAAO4H,sBAAsB,CAAC5R,GAAG,EAAEtrB,MAAM,EAAEy1B,IAAI,CAAC;QAClD,CAAC;QACD+K,kBAAkB,EAAE,SAAAA,CAAUxgC,MAAM,EAAEy1B,IAAI,EAAE;UAC1CT,oBAAoB,GAAG,oBAAoB;UAC3CM,kBAAkB,CAAC,CAAC;UACpB,OAAOmH,qBAAqB,CAACz8B,MAAM,EAAEy1B,IAAI,CAAC;QAC5C,CAAC;QACDgL,eAAe,EAAE,SAAAA,CAAUzgC,MAAM,EAAEy1B,IAAI,EAAE;UACvCT,oBAAoB,GAAG,iBAAiB;UACxCM,kBAAkB,CAAC,CAAC;UACpB,OAAOqH,kBAAkB,CAAC38B,MAAM,EAAEy1B,IAAI,CAAC;QACzC,CAAC;QACDiL,OAAO,EAAE,SAAAA,CAAU1gC,MAAM,EAAEy1B,IAAI,EAAE;UAC/BT,oBAAoB,GAAG,SAAS;UAChCM,kBAAkB,CAAC,CAAC;UACpB,IAAI4K,cAAc,GAAGnM,wBAAwB,CAACrsC,OAAO;UACrDqsC,wBAAwB,CAACrsC,OAAO,GAC9By4C,yCAAyC;UAE3C,IAAI;YACF,OAAOzC,UAAU,CAAC19B,MAAM,EAAEy1B,IAAI,CAAC;UACjC,CAAC,SAAS;YACR1B,wBAAwB,CAACrsC,OAAO,GAAGw4C,cAAc;UACnD;QACF,CAAC;QACDS,UAAU,EAAE,SAAAA,CAAUpI,OAAO,EAAEC,UAAU,EAAEp/B,IAAI,EAAE;UAC/C47B,oBAAoB,GAAG,YAAY;UACnCM,kBAAkB,CAAC,CAAC;UACpB,IAAI4K,cAAc,GAAGnM,wBAAwB,CAACrsC,OAAO;UACrDqsC,wBAAwB,CAACrsC,OAAO,GAC9By4C,yCAAyC;UAE3C,IAAI;YACF,OAAOrH,aAAa,CAACP,OAAO,EAAEC,UAAU,EAAEp/B,IAAI,CAAC;UACjD,CAAC,SAAS;YACR26B,wBAAwB,CAACrsC,OAAO,GAAGw4C,cAAc;UACnD;QACF,CAAC;QACDU,MAAM,EAAE,SAAAA,CAAU5E,YAAY,EAAE;UAC9BhH,oBAAoB,GAAG,QAAQ;UAC/BM,kBAAkB,CAAC,CAAC;UACpB,OAAO4G,SAAS,CAAC,CAAC;QACpB,CAAC;QACD2E,QAAQ,EAAE,SAAAA,CAAUpI,YAAY,EAAE;UAChCzD,oBAAoB,GAAG,UAAU;UACjCM,kBAAkB,CAAC,CAAC;UACpB,IAAI4K,cAAc,GAAGnM,wBAAwB,CAACrsC,OAAO;UACrDqsC,wBAAwB,CAACrsC,OAAO,GAC9By4C,yCAAyC;UAE3C,IAAI;YACF,OAAOzE,WAAW,CAACjD,YAAY,CAAC;UAClC,CAAC,SAAS;YACR1E,wBAAwB,CAACrsC,OAAO,GAAGw4C,cAAc;UACnD;QACF,CAAC;QACDY,aAAa,EAAE,SAAAA,CAAU/qC,KAAK,EAAEqnC,WAAW,EAAE;UAC3CpI,oBAAoB,GAAG,eAAe;UACtCM,kBAAkB,CAAC,CAAC;UACpB,OAAO+H,gBAAgB,CAAC,CAAC;QAC3B,CAAC;QACD0D,gBAAgB,EAAE,SAAAA,CAAUhrC,KAAK,EAAEimC,YAAY,EAAE;UAC/ChH,oBAAoB,GAAG,kBAAkB;UACzCM,kBAAkB,CAAC,CAAC;UACpB,OAAOuI,mBAAmB,CAAC9nC,KAAK,EAAEimC,YAAY,CAAC;QACjD,CAAC;QACDgF,aAAa,EAAE,SAAAA,CAAA,EAAY;UACzBhM,oBAAoB,GAAG,eAAe;UACtCM,kBAAkB,CAAC,CAAC;UACpB,OAAO6J,gBAAgB,CAAC,CAAC;QAC3B,CAAC;QACD8B,oBAAoB,EAAE,SAAAA,CACpBpH,SAAS,EACTC,WAAW,EACXC,iBAAiB,EACjB;UACA/E,oBAAoB,GAAG,sBAAsB;UAC7CM,kBAAkB,CAAC,CAAC;UACpB,OAAOmF,uBAAuB,CAACZ,SAAS,EAAEC,WAAW,CAAC;QACxD,CAAC;QACDoH,KAAK,EAAE,SAAAA,CAAA,EAAY;UACjBlM,oBAAoB,GAAG,OAAO;UAC9BM,kBAAkB,CAAC,CAAC;UACpB,OAAOuK,QAAQ,CAAC,CAAC;QACnB;MACF,CAAC;MAED1I,8BAA8B,GAAG;QAC/BiB,WAAW,EAAE,SAAAA,CAAU78C,OAAO,EAAE;UAC9B,OAAO68C,WAAW,CAAC78C,OAAO,CAAC;QAC7B,CAAC;QACD28C,GAAG,EAAEA,GAAG;QACRkI,WAAW,EAAE,SAAAA,CAAUl5C,QAAQ,EAAEuuC,IAAI,EAAE;UACrCT,oBAAoB,GAAG,aAAa;UACpCM,kBAAkB,CAAC,CAAC;UACpB,OAAOiI,cAAc,CAACr2C,QAAQ,EAAEuuC,IAAI,CAAC;QACvC,CAAC;QACD4K,UAAU,EAAE,SAAAA,CAAU9kD,OAAO,EAAE;UAC7By5C,oBAAoB,GAAG,YAAY;UACnCM,kBAAkB,CAAC,CAAC;UACpB,OAAO8C,WAAW,CAAC78C,OAAO,CAAC;QAC7B,CAAC;QACD+kD,SAAS,EAAE,SAAAA,CAAUtgC,MAAM,EAAEy1B,IAAI,EAAE;UACjCT,oBAAoB,GAAG,WAAW;UAClCM,kBAAkB,CAAC,CAAC;UACpB,OAAOsF,YAAY,CAAC56B,MAAM,EAAEy1B,IAAI,CAAC;QACnC,CAAC;QACD8K,mBAAmB,EAAE,SAAAA,CAAUjV,GAAG,EAAEtrB,MAAM,EAAEy1B,IAAI,EAAE;UAChDT,oBAAoB,GAAG,qBAAqB;UAC5CM,kBAAkB,CAAC,CAAC;UACpB,OAAO4H,sBAAsB,CAAC5R,GAAG,EAAEtrB,MAAM,EAAEy1B,IAAI,CAAC;QAClD,CAAC;QACD+K,kBAAkB,EAAE,SAAAA,CAAUxgC,MAAM,EAAEy1B,IAAI,EAAE;UAC1CT,oBAAoB,GAAG,oBAAoB;UAC3CM,kBAAkB,CAAC,CAAC;UACpB,OAAOmH,qBAAqB,CAACz8B,MAAM,EAAEy1B,IAAI,CAAC;QAC5C,CAAC;QACDgL,eAAe,EAAE,SAAAA,CAAUzgC,MAAM,EAAEy1B,IAAI,EAAE;UACvCT,oBAAoB,GAAG,iBAAiB;UACxCM,kBAAkB,CAAC,CAAC;UACpB,OAAOqH,kBAAkB,CAAC38B,MAAM,EAAEy1B,IAAI,CAAC;QACzC,CAAC;QACDiL,OAAO,EAAE,SAAAA,CAAU1gC,MAAM,EAAEy1B,IAAI,EAAE;UAC/BT,oBAAoB,GAAG,SAAS;UAChCM,kBAAkB,CAAC,CAAC;UACpB,IAAI4K,cAAc,GAAGnM,wBAAwB,CAACrsC,OAAO;UACrDqsC,wBAAwB,CAACrsC,OAAO,GAC9B05C,2CAA2C;UAE7C,IAAI;YACF,OAAO1D,UAAU,CAAC19B,MAAM,EAAEy1B,IAAI,CAAC;UACjC,CAAC,SAAS;YACR1B,wBAAwB,CAACrsC,OAAO,GAAGw4C,cAAc;UACnD;QACF,CAAC;QACDS,UAAU,EAAE,SAAAA,CAAUpI,OAAO,EAAEC,UAAU,EAAEp/B,IAAI,EAAE;UAC/C47B,oBAAoB,GAAG,YAAY;UACnCM,kBAAkB,CAAC,CAAC;UACpB,IAAI4K,cAAc,GAAGnM,wBAAwB,CAACrsC,OAAO;UACrDqsC,wBAAwB,CAACrsC,OAAO,GAC9B05C,2CAA2C;UAE7C,IAAI;YACF,OAAO3H,eAAe,CAAClB,OAAO,EAAEC,UAAU,EAAEp/B,IAAI,CAAC;UACnD,CAAC,SAAS;YACR26B,wBAAwB,CAACrsC,OAAO,GAAGw4C,cAAc;UACnD;QACF,CAAC;QACDU,MAAM,EAAE,SAAAA,CAAU5E,YAAY,EAAE;UAC9BhH,oBAAoB,GAAG,QAAQ;UAC/BM,kBAAkB,CAAC,CAAC;UACpB,OAAO4G,SAAS,CAAC,CAAC;QACpB,CAAC;QACD2E,QAAQ,EAAE,SAAAA,CAAUpI,YAAY,EAAE;UAChCzD,oBAAoB,GAAG,UAAU;UACjCM,kBAAkB,CAAC,CAAC;UACpB,IAAI4K,cAAc,GAAGnM,wBAAwB,CAACrsC,OAAO;UACrDqsC,wBAAwB,CAACrsC,OAAO,GAC9B05C,2CAA2C;UAE7C,IAAI;YACF,OAAOzF,aAAa,CAAClD,YAAY,CAAC;UACpC,CAAC,SAAS;YACR1E,wBAAwB,CAACrsC,OAAO,GAAGw4C,cAAc;UACnD;QACF,CAAC;QACDY,aAAa,EAAE,SAAAA,CAAU/qC,KAAK,EAAEqnC,WAAW,EAAE;UAC3CpI,oBAAoB,GAAG,eAAe;UACtCM,kBAAkB,CAAC,CAAC;UACpB,OAAO+H,gBAAgB,CAAC,CAAC;QAC3B,CAAC;QACD0D,gBAAgB,EAAE,SAAAA,CAAUhrC,KAAK,EAAEimC,YAAY,EAAE;UAC/ChH,oBAAoB,GAAG,kBAAkB;UACzCM,kBAAkB,CAAC,CAAC;UACpB,OAAO0I,qBAAqB,CAACjoC,KAAK,EAAEimC,YAAY,CAAC;QACnD,CAAC;QACDgF,aAAa,EAAE,SAAAA,CAAA,EAAY;UACzBhM,oBAAoB,GAAG,eAAe;UACtCM,kBAAkB,CAAC,CAAC;UACpB,OAAOiK,kBAAkB,CAAC,CAAC;QAC7B,CAAC;QACD0B,oBAAoB,EAAE,SAAAA,CACpBpH,SAAS,EACTC,WAAW,EACXC,iBAAiB,EACjB;UACA/E,oBAAoB,GAAG,sBAAsB;UAC7CM,kBAAkB,CAAC,CAAC;UACpB,OAAOmF,uBAAuB,CAACZ,SAAS,EAAEC,WAAW,CAAC;QACxD,CAAC;QACDoH,KAAK,EAAE,SAAAA,CAAA,EAAY;UACjBlM,oBAAoB,GAAG,OAAO;UAC9BM,kBAAkB,CAAC,CAAC;UACpB,OAAOuK,QAAQ,CAAC,CAAC;QACnB;MACF,CAAC;MAEDsB,wCAAwC,GAAG;QACzC/I,WAAW,EAAE,SAAAA,CAAU78C,OAAO,EAAE;UAC9B8lD,wBAAwB,CAAC,CAAC;UAC1B,OAAOjJ,WAAW,CAAC78C,OAAO,CAAC;QAC7B,CAAC;QACD28C,GAAG,EAAE,SAAAA,CAAUC,MAAM,EAAE;UACrBmJ,qBAAqB,CAAC,CAAC;UACvB,OAAOpJ,GAAG,CAACC,MAAM,CAAC;QACpB,CAAC;QACDiI,WAAW,EAAE,SAAAA,CAAUl5C,QAAQ,EAAEuuC,IAAI,EAAE;UACrCT,oBAAoB,GAAG,aAAa;UACpCsM,qBAAqB,CAAC,CAAC;UACvBlM,iBAAiB,CAAC,CAAC;UACnB,OAAOkI,aAAa,CAACp2C,QAAQ,EAAEuuC,IAAI,CAAC;QACtC,CAAC;QACD4K,UAAU,EAAE,SAAAA,CAAU9kD,OAAO,EAAE;UAC7By5C,oBAAoB,GAAG,YAAY;UACnCsM,qBAAqB,CAAC,CAAC;UACvBlM,iBAAiB,CAAC,CAAC;UACnB,OAAOgD,WAAW,CAAC78C,OAAO,CAAC;QAC7B,CAAC;QACD+kD,SAAS,EAAE,SAAAA,CAAUtgC,MAAM,EAAEy1B,IAAI,EAAE;UACjCT,oBAAoB,GAAG,WAAW;UAClCsM,qBAAqB,CAAC,CAAC;UACvBlM,iBAAiB,CAAC,CAAC;UACnB,OAAOgF,WAAW,CAACp6B,MAAM,EAAEy1B,IAAI,CAAC;QAClC,CAAC;QACD8K,mBAAmB,EAAE,SAAAA,CAAUjV,GAAG,EAAEtrB,MAAM,EAAEy1B,IAAI,EAAE;UAChDT,oBAAoB,GAAG,qBAAqB;UAC5CsM,qBAAqB,CAAC,CAAC;UACvBlM,iBAAiB,CAAC,CAAC;UACnB,OAAO4H,qBAAqB,CAAC1R,GAAG,EAAEtrB,MAAM,EAAEy1B,IAAI,CAAC;QACjD,CAAC;QACD+K,kBAAkB,EAAE,SAAAA,CAAUxgC,MAAM,EAAEy1B,IAAI,EAAE;UAC1CT,oBAAoB,GAAG,oBAAoB;UAC3CsM,qBAAqB,CAAC,CAAC;UACvBlM,iBAAiB,CAAC,CAAC;UACnB,OAAOoH,oBAAoB,CAACx8B,MAAM,EAAEy1B,IAAI,CAAC;QAC3C,CAAC;QACDgL,eAAe,EAAE,SAAAA,CAAUzgC,MAAM,EAAEy1B,IAAI,EAAE;UACvCT,oBAAoB,GAAG,iBAAiB;UACxCsM,qBAAqB,CAAC,CAAC;UACvBlM,iBAAiB,CAAC,CAAC;UACnB,OAAOsH,iBAAiB,CAAC18B,MAAM,EAAEy1B,IAAI,CAAC;QACxC,CAAC;QACDiL,OAAO,EAAE,SAAAA,CAAU1gC,MAAM,EAAEy1B,IAAI,EAAE;UAC/BT,oBAAoB,GAAG,SAAS;UAChCsM,qBAAqB,CAAC,CAAC;UACvBlM,iBAAiB,CAAC,CAAC;UACnB,IAAI8K,cAAc,GAAGnM,wBAAwB,CAACrsC,OAAO;UACrDqsC,wBAAwB,CAACrsC,OAAO,GAC9By5C,wCAAwC;UAE1C,IAAI;YACF,OAAO3D,SAAS,CAACx9B,MAAM,EAAEy1B,IAAI,CAAC;UAChC,CAAC,SAAS;YACR1B,wBAAwB,CAACrsC,OAAO,GAAGw4C,cAAc;UACnD;QACF,CAAC;QACDS,UAAU,EAAE,SAAAA,CAAUpI,OAAO,EAAEC,UAAU,EAAEp/B,IAAI,EAAE;UAC/C47B,oBAAoB,GAAG,YAAY;UACnCsM,qBAAqB,CAAC,CAAC;UACvBlM,iBAAiB,CAAC,CAAC;UACnB,IAAI8K,cAAc,GAAGnM,wBAAwB,CAACrsC,OAAO;UACrDqsC,wBAAwB,CAACrsC,OAAO,GAC9By5C,wCAAwC;UAE1C,IAAI;YACF,OAAO7I,YAAY,CAACC,OAAO,EAAEC,UAAU,EAAEp/B,IAAI,CAAC;UAChD,CAAC,SAAS;YACR26B,wBAAwB,CAACrsC,OAAO,GAAGw4C,cAAc;UACnD;QACF,CAAC;QACDU,MAAM,EAAE,SAAAA,CAAU5E,YAAY,EAAE;UAC9BhH,oBAAoB,GAAG,QAAQ;UAC/BsM,qBAAqB,CAAC,CAAC;UACvBlM,iBAAiB,CAAC,CAAC;UACnB,OAAO2G,QAAQ,CAACC,YAAY,CAAC;QAC/B,CAAC;QACD6E,QAAQ,EAAE,SAAAA,CAAUpI,YAAY,EAAE;UAChCzD,oBAAoB,GAAG,UAAU;UACjCsM,qBAAqB,CAAC,CAAC;UACvBlM,iBAAiB,CAAC,CAAC;UACnB,IAAI8K,cAAc,GAAGnM,wBAAwB,CAACrsC,OAAO;UACrDqsC,wBAAwB,CAACrsC,OAAO,GAC9By5C,wCAAwC;UAE1C,IAAI;YACF,OAAO3F,UAAU,CAAC/C,YAAY,CAAC;UACjC,CAAC,SAAS;YACR1E,wBAAwB,CAACrsC,OAAO,GAAGw4C,cAAc;UACnD;QACF,CAAC;QACDY,aAAa,EAAE,SAAAA,CAAU/qC,KAAK,EAAEqnC,WAAW,EAAE;UAC3CpI,oBAAoB,GAAG,eAAe;UACtCsM,qBAAqB,CAAC,CAAC;UACvBlM,iBAAiB,CAAC,CAAC;UACnB,OAAO+H,eAAe,CAAC,CAAC;QAC1B,CAAC;QACD4D,gBAAgB,EAAE,SAAAA,CAAUhrC,KAAK,EAAEimC,YAAY,EAAE;UAC/ChH,oBAAoB,GAAG,kBAAkB;UACzCsM,qBAAqB,CAAC,CAAC;UACvBlM,iBAAiB,CAAC,CAAC;UACnB,OAAOuI,kBAAkB,CAAC5nC,KAAK,EAAEimC,YAAY,CAAC;QAChD,CAAC;QACDgF,aAAa,EAAE,SAAAA,CAAA,EAAY;UACzBhM,oBAAoB,GAAG,eAAe;UACtCsM,qBAAqB,CAAC,CAAC;UACvBlM,iBAAiB,CAAC,CAAC;UACnB,OAAO4J,eAAe,CAAC,CAAC;QAC1B,CAAC;QACDiC,oBAAoB,EAAE,SAAAA,CACpBpH,SAAS,EACTC,WAAW,EACXC,iBAAiB,EACjB;UACA/E,oBAAoB,GAAG,sBAAsB;UAC7CsM,qBAAqB,CAAC,CAAC;UACvBlM,iBAAiB,CAAC,CAAC;UACnB,OAAOwE,sBAAsB,CAACC,SAAS,EAAEC,WAAW,CAAC;QACvD,CAAC;QACDoH,KAAK,EAAE,SAAAA,CAAA,EAAY;UACjBlM,oBAAoB,GAAG,OAAO;UAC9BsM,qBAAqB,CAAC,CAAC;UACvBlM,iBAAiB,CAAC,CAAC;UACnB,OAAOqK,OAAO,CAAC,CAAC;QAClB;MACF,CAAC;MAEDU,yCAAyC,GAAG;QAC1C/H,WAAW,EAAE,SAAAA,CAAU78C,OAAO,EAAE;UAC9B8lD,wBAAwB,CAAC,CAAC;UAC1B,OAAOjJ,WAAW,CAAC78C,OAAO,CAAC;QAC7B,CAAC;QACD28C,GAAG,EAAE,SAAAA,CAAUC,MAAM,EAAE;UACrBmJ,qBAAqB,CAAC,CAAC;UACvB,OAAOpJ,GAAG,CAACC,MAAM,CAAC;QACpB,CAAC;QACDiI,WAAW,EAAE,SAAAA,CAAUl5C,QAAQ,EAAEuuC,IAAI,EAAE;UACrCT,oBAAoB,GAAG,aAAa;UACpCsM,qBAAqB,CAAC,CAAC;UACvBhM,kBAAkB,CAAC,CAAC;UACpB,OAAOiI,cAAc,CAACr2C,QAAQ,EAAEuuC,IAAI,CAAC;QACvC,CAAC;QACD4K,UAAU,EAAE,SAAAA,CAAU9kD,OAAO,EAAE;UAC7By5C,oBAAoB,GAAG,YAAY;UACnCsM,qBAAqB,CAAC,CAAC;UACvBhM,kBAAkB,CAAC,CAAC;UACpB,OAAO8C,WAAW,CAAC78C,OAAO,CAAC;QAC7B,CAAC;QACD+kD,SAAS,EAAE,SAAAA,CAAUtgC,MAAM,EAAEy1B,IAAI,EAAE;UACjCT,oBAAoB,GAAG,WAAW;UAClCsM,qBAAqB,CAAC,CAAC;UACvBhM,kBAAkB,CAAC,CAAC;UACpB,OAAOsF,YAAY,CAAC56B,MAAM,EAAEy1B,IAAI,CAAC;QACnC,CAAC;QACD8K,mBAAmB,EAAE,SAAAA,CAAUjV,GAAG,EAAEtrB,MAAM,EAAEy1B,IAAI,EAAE;UAChDT,oBAAoB,GAAG,qBAAqB;UAC5CsM,qBAAqB,CAAC,CAAC;UACvBhM,kBAAkB,CAAC,CAAC;UACpB,OAAO4H,sBAAsB,CAAC5R,GAAG,EAAEtrB,MAAM,EAAEy1B,IAAI,CAAC;QAClD,CAAC;QACD+K,kBAAkB,EAAE,SAAAA,CAAUxgC,MAAM,EAAEy1B,IAAI,EAAE;UAC1CT,oBAAoB,GAAG,oBAAoB;UAC3CsM,qBAAqB,CAAC,CAAC;UACvBhM,kBAAkB,CAAC,CAAC;UACpB,OAAOmH,qBAAqB,CAACz8B,MAAM,EAAEy1B,IAAI,CAAC;QAC5C,CAAC;QACDgL,eAAe,EAAE,SAAAA,CAAUzgC,MAAM,EAAEy1B,IAAI,EAAE;UACvCT,oBAAoB,GAAG,iBAAiB;UACxCsM,qBAAqB,CAAC,CAAC;UACvBhM,kBAAkB,CAAC,CAAC;UACpB,OAAOqH,kBAAkB,CAAC38B,MAAM,EAAEy1B,IAAI,CAAC;QACzC,CAAC;QACDiL,OAAO,EAAE,SAAAA,CAAU1gC,MAAM,EAAEy1B,IAAI,EAAE;UAC/BT,oBAAoB,GAAG,SAAS;UAChCsM,qBAAqB,CAAC,CAAC;UACvBhM,kBAAkB,CAAC,CAAC;UACpB,IAAI4K,cAAc,GAAGnM,wBAAwB,CAACrsC,OAAO;UACrDqsC,wBAAwB,CAACrsC,OAAO,GAC9By4C,yCAAyC;UAE3C,IAAI;YACF,OAAOzC,UAAU,CAAC19B,MAAM,EAAEy1B,IAAI,CAAC;UACjC,CAAC,SAAS;YACR1B,wBAAwB,CAACrsC,OAAO,GAAGw4C,cAAc;UACnD;QACF,CAAC;QACDS,UAAU,EAAE,SAAAA,CAAUpI,OAAO,EAAEC,UAAU,EAAEp/B,IAAI,EAAE;UAC/C47B,oBAAoB,GAAG,YAAY;UACnCsM,qBAAqB,CAAC,CAAC;UACvBhM,kBAAkB,CAAC,CAAC;UACpB,IAAI4K,cAAc,GAAGnM,wBAAwB,CAACrsC,OAAO;UACrDqsC,wBAAwB,CAACrsC,OAAO,GAC9By4C,yCAAyC;UAE3C,IAAI;YACF,OAAOrH,aAAa,CAACP,OAAO,EAAEC,UAAU,EAAEp/B,IAAI,CAAC;UACjD,CAAC,SAAS;YACR26B,wBAAwB,CAACrsC,OAAO,GAAGw4C,cAAc;UACnD;QACF,CAAC;QACDU,MAAM,EAAE,SAAAA,CAAU5E,YAAY,EAAE;UAC9BhH,oBAAoB,GAAG,QAAQ;UAC/BsM,qBAAqB,CAAC,CAAC;UACvBhM,kBAAkB,CAAC,CAAC;UACpB,OAAO4G,SAAS,CAAC,CAAC;QACpB,CAAC;QACD2E,QAAQ,EAAE,SAAAA,CAAUpI,YAAY,EAAE;UAChCzD,oBAAoB,GAAG,UAAU;UACjCsM,qBAAqB,CAAC,CAAC;UACvBhM,kBAAkB,CAAC,CAAC;UACpB,IAAI4K,cAAc,GAAGnM,wBAAwB,CAACrsC,OAAO;UACrDqsC,wBAAwB,CAACrsC,OAAO,GAC9By4C,yCAAyC;UAE3C,IAAI;YACF,OAAOzE,WAAW,CAACjD,YAAY,CAAC;UAClC,CAAC,SAAS;YACR1E,wBAAwB,CAACrsC,OAAO,GAAGw4C,cAAc;UACnD;QACF,CAAC;QACDY,aAAa,EAAE,SAAAA,CAAU/qC,KAAK,EAAEqnC,WAAW,EAAE;UAC3CpI,oBAAoB,GAAG,eAAe;UACtCsM,qBAAqB,CAAC,CAAC;UACvBhM,kBAAkB,CAAC,CAAC;UACpB,OAAO+H,gBAAgB,CAAC,CAAC;QAC3B,CAAC;QACD0D,gBAAgB,EAAE,SAAAA,CAAUhrC,KAAK,EAAEimC,YAAY,EAAE;UAC/ChH,oBAAoB,GAAG,kBAAkB;UACzCsM,qBAAqB,CAAC,CAAC;UACvBhM,kBAAkB,CAAC,CAAC;UACpB,OAAOuI,mBAAmB,CAAC9nC,KAAK,EAAEimC,YAAY,CAAC;QACjD,CAAC;QACDgF,aAAa,EAAE,SAAAA,CAAA,EAAY;UACzBhM,oBAAoB,GAAG,eAAe;UACtCsM,qBAAqB,CAAC,CAAC;UACvBhM,kBAAkB,CAAC,CAAC;UACpB,OAAO6J,gBAAgB,CAAC,CAAC;QAC3B,CAAC;QACD8B,oBAAoB,EAAE,SAAAA,CACpBpH,SAAS,EACTC,WAAW,EACXC,iBAAiB,EACjB;UACA/E,oBAAoB,GAAG,sBAAsB;UAC7CsM,qBAAqB,CAAC,CAAC;UACvBhM,kBAAkB,CAAC,CAAC;UACpB,OAAOmF,uBAAuB,CAACZ,SAAS,EAAEC,WAAW,CAAC;QACxD,CAAC;QACDoH,KAAK,EAAE,SAAAA,CAAA,EAAY;UACjBlM,oBAAoB,GAAG,OAAO;UAC9BsM,qBAAqB,CAAC,CAAC;UACvBhM,kBAAkB,CAAC,CAAC;UACpB,OAAOuK,QAAQ,CAAC,CAAC;QACnB;MACF,CAAC;MAEDuB,2CAA2C,GAAG;QAC5ChJ,WAAW,EAAE,SAAAA,CAAU78C,OAAO,EAAE;UAC9B8lD,wBAAwB,CAAC,CAAC;UAC1B,OAAOjJ,WAAW,CAAC78C,OAAO,CAAC;QAC7B,CAAC;QACD28C,GAAG,EAAE,SAAAA,CAAUC,MAAM,EAAE;UACrBmJ,qBAAqB,CAAC,CAAC;UACvB,OAAOpJ,GAAG,CAACC,MAAM,CAAC;QACpB,CAAC;QACDiI,WAAW,EAAE,SAAAA,CAAUl5C,QAAQ,EAAEuuC,IAAI,EAAE;UACrCT,oBAAoB,GAAG,aAAa;UACpCsM,qBAAqB,CAAC,CAAC;UACvBhM,kBAAkB,CAAC,CAAC;UACpB,OAAOiI,cAAc,CAACr2C,QAAQ,EAAEuuC,IAAI,CAAC;QACvC,CAAC;QACD4K,UAAU,EAAE,SAAAA,CAAU9kD,OAAO,EAAE;UAC7By5C,oBAAoB,GAAG,YAAY;UACnCsM,qBAAqB,CAAC,CAAC;UACvBhM,kBAAkB,CAAC,CAAC;UACpB,OAAO8C,WAAW,CAAC78C,OAAO,CAAC;QAC7B,CAAC;QACD+kD,SAAS,EAAE,SAAAA,CAAUtgC,MAAM,EAAEy1B,IAAI,EAAE;UACjCT,oBAAoB,GAAG,WAAW;UAClCsM,qBAAqB,CAAC,CAAC;UACvBhM,kBAAkB,CAAC,CAAC;UACpB,OAAOsF,YAAY,CAAC56B,MAAM,EAAEy1B,IAAI,CAAC;QACnC,CAAC;QACD8K,mBAAmB,EAAE,SAAAA,CAAUjV,GAAG,EAAEtrB,MAAM,EAAEy1B,IAAI,EAAE;UAChDT,oBAAoB,GAAG,qBAAqB;UAC5CsM,qBAAqB,CAAC,CAAC;UACvBhM,kBAAkB,CAAC,CAAC;UACpB,OAAO4H,sBAAsB,CAAC5R,GAAG,EAAEtrB,MAAM,EAAEy1B,IAAI,CAAC;QAClD,CAAC;QACD+K,kBAAkB,EAAE,SAAAA,CAAUxgC,MAAM,EAAEy1B,IAAI,EAAE;UAC1CT,oBAAoB,GAAG,oBAAoB;UAC3CsM,qBAAqB,CAAC,CAAC;UACvBhM,kBAAkB,CAAC,CAAC;UACpB,OAAOmH,qBAAqB,CAACz8B,MAAM,EAAEy1B,IAAI,CAAC;QAC5C,CAAC;QACDgL,eAAe,EAAE,SAAAA,CAAUzgC,MAAM,EAAEy1B,IAAI,EAAE;UACvCT,oBAAoB,GAAG,iBAAiB;UACxCsM,qBAAqB,CAAC,CAAC;UACvBhM,kBAAkB,CAAC,CAAC;UACpB,OAAOqH,kBAAkB,CAAC38B,MAAM,EAAEy1B,IAAI,CAAC;QACzC,CAAC;QACDiL,OAAO,EAAE,SAAAA,CAAU1gC,MAAM,EAAEy1B,IAAI,EAAE;UAC/BT,oBAAoB,GAAG,SAAS;UAChCsM,qBAAqB,CAAC,CAAC;UACvBhM,kBAAkB,CAAC,CAAC;UACpB,IAAI4K,cAAc,GAAGnM,wBAAwB,CAACrsC,OAAO;UACrDqsC,wBAAwB,CAACrsC,OAAO,GAC9By4C,yCAAyC;UAE3C,IAAI;YACF,OAAOzC,UAAU,CAAC19B,MAAM,EAAEy1B,IAAI,CAAC;UACjC,CAAC,SAAS;YACR1B,wBAAwB,CAACrsC,OAAO,GAAGw4C,cAAc;UACnD;QACF,CAAC;QACDS,UAAU,EAAE,SAAAA,CAAUpI,OAAO,EAAEC,UAAU,EAAEp/B,IAAI,EAAE;UAC/C47B,oBAAoB,GAAG,YAAY;UACnCsM,qBAAqB,CAAC,CAAC;UACvBhM,kBAAkB,CAAC,CAAC;UACpB,IAAI4K,cAAc,GAAGnM,wBAAwB,CAACrsC,OAAO;UACrDqsC,wBAAwB,CAACrsC,OAAO,GAC9By4C,yCAAyC;UAE3C,IAAI;YACF,OAAO1G,eAAe,CAAClB,OAAO,EAAEC,UAAU,EAAEp/B,IAAI,CAAC;UACnD,CAAC,SAAS;YACR26B,wBAAwB,CAACrsC,OAAO,GAAGw4C,cAAc;UACnD;QACF,CAAC;QACDU,MAAM,EAAE,SAAAA,CAAU5E,YAAY,EAAE;UAC9BhH,oBAAoB,GAAG,QAAQ;UAC/BsM,qBAAqB,CAAC,CAAC;UACvBhM,kBAAkB,CAAC,CAAC;UACpB,OAAO4G,SAAS,CAAC,CAAC;QACpB,CAAC;QACD2E,QAAQ,EAAE,SAAAA,CAAUpI,YAAY,EAAE;UAChCzD,oBAAoB,GAAG,UAAU;UACjCsM,qBAAqB,CAAC,CAAC;UACvBhM,kBAAkB,CAAC,CAAC;UACpB,IAAI4K,cAAc,GAAGnM,wBAAwB,CAACrsC,OAAO;UACrDqsC,wBAAwB,CAACrsC,OAAO,GAC9By4C,yCAAyC;UAE3C,IAAI;YACF,OAAOxE,aAAa,CAAClD,YAAY,CAAC;UACpC,CAAC,SAAS;YACR1E,wBAAwB,CAACrsC,OAAO,GAAGw4C,cAAc;UACnD;QACF,CAAC;QACDY,aAAa,EAAE,SAAAA,CAAU/qC,KAAK,EAAEqnC,WAAW,EAAE;UAC3CpI,oBAAoB,GAAG,eAAe;UACtCsM,qBAAqB,CAAC,CAAC;UACvBhM,kBAAkB,CAAC,CAAC;UACpB,OAAO+H,gBAAgB,CAAC,CAAC;QAC3B,CAAC;QACD0D,gBAAgB,EAAE,SAAAA,CAAUhrC,KAAK,EAAEimC,YAAY,EAAE;UAC/ChH,oBAAoB,GAAG,kBAAkB;UACzCsM,qBAAqB,CAAC,CAAC;UACvBhM,kBAAkB,CAAC,CAAC;UACpB,OAAO0I,qBAAqB,CAACjoC,KAAK,EAAEimC,YAAY,CAAC;QACnD,CAAC;QACDgF,aAAa,EAAE,SAAAA,CAAA,EAAY;UACzBhM,oBAAoB,GAAG,eAAe;UACtCsM,qBAAqB,CAAC,CAAC;UACvBhM,kBAAkB,CAAC,CAAC;UACpB,OAAOiK,kBAAkB,CAAC,CAAC;QAC7B,CAAC;QACD0B,oBAAoB,EAAE,SAAAA,CACpBpH,SAAS,EACTC,WAAW,EACXC,iBAAiB,EACjB;UACA/E,oBAAoB,GAAG,sBAAsB;UAC7CsM,qBAAqB,CAAC,CAAC;UACvBhM,kBAAkB,CAAC,CAAC;UACpB,OAAOmF,uBAAuB,CAACZ,SAAS,EAAEC,WAAW,CAAC;QACxD,CAAC;QACDoH,KAAK,EAAE,SAAAA,CAAA,EAAY;UACjBlM,oBAAoB,GAAG,OAAO;UAC9BsM,qBAAqB,CAAC,CAAC;UACvBhM,kBAAkB,CAAC,CAAC;UACpB,OAAOuK,QAAQ,CAAC,CAAC;QACnB;MACF,CAAC;IACH;IAEA,IAAI7+C,GAAG,GAAGhI,SAAS,CAACqpB,YAAY;IAChC,IAAIk/B,UAAU,GAAG,CAAC;IAClB,IAAIC,qBAAqB,GAAG,CAAC,CAAC;IAC9B,IAAIC,iBAAiB,GAAG,CAAC,CAAC;IAC1B,IAAIC,sBAAsB,GAAG,CAAC,CAAC;IAkB/B,IAAIC,qBAAqB,GAAG,KAAK;IACjC,IAAIC,qBAAqB,GAAG,KAAK;IAEjC,SAASC,qBAAqBA,CAAA,EAAG;MAC/B,OAAOF,qBAAqB;IAC9B;IAEA,SAASG,yBAAyBA,CAAA,EAAG;MACnC;QACEF,qBAAqB,GAAG,IAAI;MAC9B;IACF;IAEA,SAASG,qBAAqBA,CAAA,EAAG;MAC/B;QACEJ,qBAAqB,GAAG,KAAK;QAC7BC,qBAAqB,GAAG,KAAK;MAC/B;IACF;IAEA,SAASI,oBAAoBA,CAAA,EAAG;MAC9B;QACEL,qBAAqB,GAAGC,qBAAqB;QAC7CA,qBAAqB,GAAG,KAAK;MAC/B;IACF;IAEA,SAASK,aAAaA,CAAA,EAAG;MACvB,OAAOV,UAAU;IACnB;IAEA,SAASW,gBAAgBA,CAAA,EAAG;MAC1BX,UAAU,GAAGvgD,GAAG,CAAC,CAAC;IACpB;IAEA,SAASmhD,kBAAkBA,CAACzoC,KAAK,EAAE;MACjC+nC,iBAAiB,GAAGzgD,GAAG,CAAC,CAAC;MAEzB,IAAI0Y,KAAK,CAAC0oC,eAAe,GAAG,CAAC,EAAE;QAC7B1oC,KAAK,CAAC0oC,eAAe,GAAGphD,GAAG,CAAC,CAAC;MAC/B;IACF;IAEA,SAASqhD,0BAA0BA,CAAC3oC,KAAK,EAAE;MACzC+nC,iBAAiB,GAAG,CAAC,CAAC;IACxB;IAEA,SAASa,wCAAwCA,CAAC5oC,KAAK,EAAE6oC,gBAAgB,EAAE;MACzE,IAAId,iBAAiB,IAAI,CAAC,EAAE;QAC1B,IAAIe,WAAW,GAAGxhD,GAAG,CAAC,CAAC,GAAGygD,iBAAiB;QAC3C/nC,KAAK,CAAC+oC,cAAc,IAAID,WAAW;QAEnC,IAAID,gBAAgB,EAAE;UACpB7oC,KAAK,CAACgpC,gBAAgB,GAAGF,WAAW;QACtC;QAEAf,iBAAiB,GAAG,CAAC,CAAC;MACxB;IACF;IAEA,SAASkB,0BAA0BA,CAACjpC,KAAK,EAAE;MACzC,IAAI8nC,qBAAqB,IAAI,CAAC,EAAE;QAC9B,IAAIgB,WAAW,GAAGxhD,GAAG,CAAC,CAAC,GAAGwgD,qBAAqB;QAC/CA,qBAAqB,GAAG,CAAC,CAAC;QAG1B,IAAI7jC,WAAW,GAAGjE,KAAK,CAAClO,MAAM;QAE9B,OAAOmS,WAAW,KAAK,IAAI,EAAE;UAC3B,QAAQA,WAAW,CAAClS,GAAG;YACrB,KAAKrD,QAAQ;cACX,IAAI2c,IAAI,GAAGpH,WAAW,CAAClR,SAAS;cAChCsY,IAAI,CAAC69B,cAAc,IAAIJ,WAAW;cAClC;YAEF,KAAK35C,QAAQ;cACX,IAAIg6C,eAAe,GAAGllC,WAAW,CAAClR,SAAS;cAC3Co2C,eAAe,CAACD,cAAc,IAAIJ,WAAW;cAC7C;UACJ;UAEA7kC,WAAW,GAAGA,WAAW,CAACnS,MAAM;QAClC;MACF;IACF;IAEA,SAASs3C,2BAA2BA,CAACppC,KAAK,EAAE;MAC1C,IAAIgoC,sBAAsB,IAAI,CAAC,EAAE;QAC/B,IAAIc,WAAW,GAAGxhD,GAAG,CAAC,CAAC,GAAG0gD,sBAAsB;QAChDA,sBAAsB,GAAG,CAAC,CAAC;QAG3B,IAAI/jC,WAAW,GAAGjE,KAAK,CAAClO,MAAM;QAE9B,OAAOmS,WAAW,KAAK,IAAI,EAAE;UAC3B,QAAQA,WAAW,CAAClS,GAAG;YACrB,KAAKrD,QAAQ;cACX,IAAI2c,IAAI,GAAGpH,WAAW,CAAClR,SAAS;cAEhC,IAAIsY,IAAI,KAAK,IAAI,EAAE;gBACjBA,IAAI,CAACg+B,qBAAqB,IAAIP,WAAW;cAC3C;cAEA;YAEF,KAAK35C,QAAQ;cACX,IAAIg6C,eAAe,GAAGllC,WAAW,CAAClR,SAAS;cAE3C,IAAIo2C,eAAe,KAAK,IAAI,EAAE;gBAI5BA,eAAe,CAACE,qBAAqB,IAAIP,WAAW;cACtD;cAEA;UACJ;UAEA7kC,WAAW,GAAGA,WAAW,CAACnS,MAAM;QAClC;MACF;IACF;IAEA,SAASw3C,sBAAsBA,CAAA,EAAG;MAChCxB,qBAAqB,GAAGxgD,GAAG,CAAC,CAAC;IAC/B;IAEA,SAASiiD,uBAAuBA,CAAA,EAAG;MACjCvB,sBAAsB,GAAG1gD,GAAG,CAAC,CAAC;IAChC;IAEA,SAASkiD,sBAAsBA,CAACxpC,KAAK,EAAE;MAIrC,IAAIuD,KAAK,GAAGvD,KAAK,CAACuD,KAAK;MAEvB,OAAOA,KAAK,EAAE;QAEZvD,KAAK,CAAC+oC,cAAc,IAAIxlC,KAAK,CAACwlC,cAAc;QAC5CxlC,KAAK,GAAGA,KAAK,CAACC,OAAO;MACvB;IACF;IAEA,SAASimC,mBAAmBA,CAAC5sB,SAAS,EAAE6sB,SAAS,EAAE;MACjD,IAAI7sB,SAAS,IAAIA,SAAS,CAAC8sB,YAAY,EAAE;QAEvC,IAAI32C,KAAK,GAAGnM,MAAM,CAAC,CAAC,CAAC,EAAE6iD,SAAS,CAAC;QACjC,IAAIC,YAAY,GAAG9sB,SAAS,CAAC8sB,YAAY;QAEzC,KAAK,IAAIthD,QAAQ,IAAIshD,YAAY,EAAE;UACjC,IAAI32C,KAAK,CAAC3K,QAAQ,CAAC,KAAKpC,SAAS,EAAE;YACjC+M,KAAK,CAAC3K,QAAQ,CAAC,GAAGshD,YAAY,CAACthD,QAAQ,CAAC;UAC1C;QACF;QAEA,OAAO2K,KAAK;MACd;MAEA,OAAO02C,SAAS;IAClB;IAEA,IAAIE,oBAAoB,GAAG,CAAC,CAAC;IAC7B,IAAIC,uCAAuC;IAC3C,IAAIC,8BAA8B;IAClC,IAAIC,mDAAmD;IACvD,IAAIC,2CAA2C;IAC/C,IAAIC,iCAAiC;IACrC,IAAIC,yCAAyC;IAC7C,IAAIC,sCAAsC;IAC1C,IAAIC,iCAAiC;IACrC,IAAIC,wBAAwB;IAE5B;MACER,uCAAuC,GAAG,IAAI/c,GAAG,CAAC,CAAC;MACnDgd,8BAA8B,GAAG,IAAIhd,GAAG,CAAC,CAAC;MAC1Cid,mDAAmD,GAAG,IAAIjd,GAAG,CAAC,CAAC;MAC/Dkd,2CAA2C,GAAG,IAAIld,GAAG,CAAC,CAAC;MACvDod,yCAAyC,GAAG,IAAIpd,GAAG,CAAC,CAAC;MACrDmd,iCAAiC,GAAG,IAAInd,GAAG,CAAC,CAAC;MAC7Cqd,sCAAsC,GAAG,IAAIrd,GAAG,CAAC,CAAC;MAClDsd,iCAAiC,GAAG,IAAItd,GAAG,CAAC,CAAC;MAC7Cud,wBAAwB,GAAG,IAAIvd,GAAG,CAAC,CAAC;MAMpC1qC,MAAM,CAACmB,cAAc,CAACqmD,oBAAoB,EAAE,sBAAsB,EAAE;QAClEx/B,UAAU,EAAE,KAAK;QACjB/N,KAAK,EAAE,SAAAA,CAAA,EAAY;UACjB,MAAM,IAAInd,KAAK,CACb,kEAAkE,GAChE,qEAAqE,GACrE,+CAA+C,GAC/C,kEAAkE,GAClE,oEAAoE,GACpE,4BACJ,CAAC;QACH;MACF,CAAC,CAAC;MACFkD,MAAM,CAACm6B,MAAM,CAACqtB,oBAAoB,CAAC;IACrC;IAEA,SAASU,qBAAqBA,CAAC98C,QAAQ,EAAE+8C,UAAU,EAAE;MACnD;QACE,IAAI/8C,QAAQ,KAAK,IAAI,IAAI,OAAOA,QAAQ,KAAK,UAAU,EAAE;UACvD;QACF;QAEA,IAAI2O,GAAG,GAAGouC,UAAU,GAAG,GAAG,GAAG/8C,QAAQ;QAErC,IAAI,CAAC68C,wBAAwB,CAACj1B,GAAG,CAACjZ,GAAG,CAAC,EAAE;UACtCkuC,wBAAwB,CAACr1B,GAAG,CAAC7Y,GAAG,CAAC;UAEjCjc,KAAK,CACH,kEAAkE,GAChE,iCAAiC,EACnCqqD,UAAU,EACV/8C,QACF,CAAC;QACH;MACF;IACF;IAEA,SAASg9C,2BAA2BA,CAACzkD,IAAI,EAAE8iC,YAAY,EAAE;MACvD;QACE,IAAIA,YAAY,KAAK5iC,SAAS,EAAE;UAC9B,IAAIy1B,aAAa,GAAGzc,wBAAwB,CAAClZ,IAAI,CAAC,IAAI,WAAW;UAEjE,IAAI,CAACkkD,iCAAiC,CAAC70B,GAAG,CAACsG,aAAa,CAAC,EAAE;YACzDuuB,iCAAiC,CAACj1B,GAAG,CAAC0G,aAAa,CAAC;YAEpDx7B,KAAK,CACH,kFAAkF,GAChF,8BAA8B,EAChCw7B,aACF,CAAC;UACH;QACF;MACF;IACF;IAEA,SAAS+uB,0BAA0BA,CACjC7tB,cAAc,EACd/B,IAAI,EACJ6vB,wBAAwB,EACxBxkC,SAAS,EACT;MACA,IAAIuiB,SAAS,GAAG7L,cAAc,CAAC0C,aAAa;MAC5C,IAAIuJ,YAAY,GAAG6hB,wBAAwB,CAACxkC,SAAS,EAAEuiB,SAAS,CAAC;MAEjE;QACE,IAAI7L,cAAc,CAACoC,IAAI,GAAGpS,gBAAgB,EAAE;UAC1CR,0BAA0B,CAAC,IAAI,CAAC;UAEhC,IAAI;YAEFyc,YAAY,GAAG6hB,wBAAwB,CAACxkC,SAAS,EAAEuiB,SAAS,CAAC;UAC/D,CAAC,SAAS;YACRrc,0BAA0B,CAAC,KAAK,CAAC;UACnC;QACF;QAEAo+B,2BAA2B,CAAC3vB,IAAI,EAAEgO,YAAY,CAAC;MACjD;MAEA,IAAIvJ,aAAa,GACfuJ,YAAY,KAAK,IAAI,IAAIA,YAAY,KAAK5iC,SAAS,GAC/CwiC,SAAS,GACT5hC,MAAM,CAAC,CAAC,CAAC,EAAE4hC,SAAS,EAAEI,YAAY,CAAC;MACzCjM,cAAc,CAAC0C,aAAa,GAAGA,aAAa;MAG5C,IAAI1C,cAAc,CAAC3M,KAAK,KAAK5C,OAAO,EAAE;QAEpC,IAAIoa,WAAW,GAAG7K,cAAc,CAAC6K,WAAW;QAC5CA,WAAW,CAACN,SAAS,GAAG7H,aAAa;MACvC;IACF;IAEA,IAAIqrB,qBAAqB,GAAG;MAC1B9nC,SAAS,EAAEA,SAAS;MAEpB+nC,eAAe,EAAE,SAAAA,CAAU9kD,IAAI,EAAE0Z,OAAO,EAAEhS,QAAQ,EAAE;QAClD,IAAIwS,KAAK,GAAGzW,GAAG,CAACzD,IAAI,CAAC;QACrB,IAAIwrB,IAAI,GAAG80B,iBAAiB,CAACpmC,KAAK,CAAC;QACnC,IAAIqU,MAAM,GAAGwT,YAAY,CAACvW,IAAI,CAAC;QAC/B+C,MAAM,CAAC7U,OAAO,GAAGA,OAAO;QAExB,IAAIhS,QAAQ,KAAKvH,SAAS,IAAIuH,QAAQ,KAAK,IAAI,EAAE;UAC/C;YACE88C,qBAAqB,CAAC98C,QAAQ,EAAE,UAAU,CAAC;UAC7C;UAEA6mB,MAAM,CAAC7mB,QAAQ,GAAGA,QAAQ;QAC5B;QAEA,IAAI6d,IAAI,GAAGyc,aAAa,CAAC9nB,KAAK,EAAEqU,MAAM,EAAE/C,IAAI,CAAC;QAE7C,IAAIjG,IAAI,KAAK,IAAI,EAAE;UACjBs2B,qBAAqB,CAACt2B,IAAI,EAAErL,KAAK,EAAEsR,IAAI,CAAC;UACxC2W,mBAAmB,CAAC5c,IAAI,EAAErL,KAAK,EAAEsR,IAAI,CAAC;QACxC;MACF,CAAC;MACDu5B,mBAAmB,EAAE,SAAAA,CAAU/kD,IAAI,EAAE0Z,OAAO,EAAEhS,QAAQ,EAAE;QACtD,IAAIwS,KAAK,GAAGzW,GAAG,CAACzD,IAAI,CAAC;QACrB,IAAIwrB,IAAI,GAAG80B,iBAAiB,CAACpmC,KAAK,CAAC;QACnC,IAAIqU,MAAM,GAAGwT,YAAY,CAACvW,IAAI,CAAC;QAC/B+C,MAAM,CAACtiB,GAAG,GAAG60B,YAAY;QACzBvS,MAAM,CAAC7U,OAAO,GAAGA,OAAO;QAExB,IAAIhS,QAAQ,KAAKvH,SAAS,IAAIuH,QAAQ,KAAK,IAAI,EAAE;UAC/C;YACE88C,qBAAqB,CAAC98C,QAAQ,EAAE,cAAc,CAAC;UACjD;UAEA6mB,MAAM,CAAC7mB,QAAQ,GAAGA,QAAQ;QAC5B;QAEA,IAAI6d,IAAI,GAAGyc,aAAa,CAAC9nB,KAAK,EAAEqU,MAAM,EAAE/C,IAAI,CAAC;QAE7C,IAAIjG,IAAI,KAAK,IAAI,EAAE;UACjBs2B,qBAAqB,CAACt2B,IAAI,EAAErL,KAAK,EAAEsR,IAAI,CAAC;UACxC2W,mBAAmB,CAAC5c,IAAI,EAAErL,KAAK,EAAEsR,IAAI,CAAC;QACxC;MACF,CAAC;MAEDw5B,kBAAkB,EAAE,SAAAA,CAAUhlD,IAAI,EAAE0H,QAAQ,EAAE;QAC5C,IAAIwS,KAAK,GAAGzW,GAAG,CAACzD,IAAI,CAAC;QACrB,IAAIwrB,IAAI,GAAG80B,iBAAiB,CAACpmC,KAAK,CAAC;QACnC,IAAIqU,MAAM,GAAGwT,YAAY,CAACvW,IAAI,CAAC;QAC/B+C,MAAM,CAACtiB,GAAG,GAAG80B,WAAW;QAExB,IAAIr5B,QAAQ,KAAKvH,SAAS,IAAIuH,QAAQ,KAAK,IAAI,EAAE;UAC/C;YACE88C,qBAAqB,CAAC98C,QAAQ,EAAE,aAAa,CAAC;UAChD;UAEA6mB,MAAM,CAAC7mB,QAAQ,GAAGA,QAAQ;QAC5B;QAEA,IAAI6d,IAAI,GAAGyc,aAAa,CAAC9nB,KAAK,EAAEqU,MAAM,EAAE/C,IAAI,CAAC;QAE7C,IAAIjG,IAAI,KAAK,IAAI,EAAE;UACjBs2B,qBAAqB,CAACt2B,IAAI,EAAErL,KAAK,EAAEsR,IAAI,CAAC;UACxC2W,mBAAmB,CAAC5c,IAAI,EAAErL,KAAK,EAAEsR,IAAI,CAAC;QACxC;MACF;IACF,CAAC;IAED,SAASy5B,0BAA0BA,CACjCnuB,cAAc,EACd/B,IAAI,EACJxB,QAAQ,EACRH,QAAQ,EACR8xB,QAAQ,EACR1hB,QAAQ,EACRlJ,WAAW,EACX;MACA,IAAIt2B,QAAQ,GAAG8yB,cAAc,CAAC7pB,SAAS;MAEvC,IAAI,OAAOjJ,QAAQ,CAACmhD,qBAAqB,KAAK,UAAU,EAAE;QACxD,IAAI9kC,YAAY,GAAGrc,QAAQ,CAACmhD,qBAAqB,CAC/C/xB,QAAQ,EACRoQ,QAAQ,EACRlJ,WACF,CAAC;QAED;UACE,IAAIxD,cAAc,CAACoC,IAAI,GAAGpS,gBAAgB,EAAE;YAC1CR,0BAA0B,CAAC,IAAI,CAAC;YAEhC,IAAI;cAEFjG,YAAY,GAAGrc,QAAQ,CAACmhD,qBAAqB,CAC3C/xB,QAAQ,EACRoQ,QAAQ,EACRlJ,WACF,CAAC;YACH,CAAC,SAAS;cACRhU,0BAA0B,CAAC,KAAK,CAAC;YACnC;UACF;UAEA,IAAIjG,YAAY,KAAKlgB,SAAS,EAAE;YAC9B/F,KAAK,CACH,8DAA8D,GAC5D,mDAAmD,EACrD+e,wBAAwB,CAAC4b,IAAI,CAAC,IAAI,WACpC,CAAC;UACH;QACF;QAEA,OAAO1U,YAAY;MACrB;MAEA,IAAI0U,IAAI,CAAC75B,SAAS,IAAI65B,IAAI,CAAC75B,SAAS,CAACkqD,oBAAoB,EAAE;QACzD,OACE,CAAC1gB,YAAY,CAACnR,QAAQ,EAAEH,QAAQ,CAAC,IAAI,CAACsR,YAAY,CAACwgB,QAAQ,EAAE1hB,QAAQ,CAAC;MAE1E;MAEA,OAAO,IAAI;IACb;IAEA,SAAS6hB,kBAAkBA,CAACvuB,cAAc,EAAE/B,IAAI,EAAE3B,QAAQ,EAAE;MAC1D,IAAIpvB,QAAQ,GAAG8yB,cAAc,CAAC7pB,SAAS;MAEvC;QACE,IAAIpR,IAAI,GAAGsd,wBAAwB,CAAC4b,IAAI,CAAC,IAAI,WAAW;QACxD,IAAIuwB,aAAa,GAAGthD,QAAQ,CAACuV,MAAM;QAEnC,IAAI,CAAC+rC,aAAa,EAAE;UAClB,IAAIvwB,IAAI,CAAC75B,SAAS,IAAI,OAAO65B,IAAI,CAAC75B,SAAS,CAACqe,MAAM,KAAK,UAAU,EAAE;YACjEnf,KAAK,CACH,8DAA8D,GAC5D,uEAAuE,EACzEyB,IACF,CAAC;UACH,CAAC,MAAM;YACLzB,KAAK,CACH,8DAA8D,GAC5D,sDAAsD,EACxDyB,IACF,CAAC;UACH;QACF;QAEA,IACEmI,QAAQ,CAACuhD,eAAe,IACxB,CAACvhD,QAAQ,CAACuhD,eAAe,CAACC,oBAAoB,IAC9C,CAACxhD,QAAQ,CAAColC,KAAK,EACf;UACAhvC,KAAK,CACH,+DAA+D,GAC7D,sEAAsE,GACtE,kDAAkD,EACpDyB,IACF,CAAC;QACH;QAEA,IACEmI,QAAQ,CAACyhD,eAAe,IACxB,CAACzhD,QAAQ,CAACyhD,eAAe,CAACD,oBAAoB,EAC9C;UACAprD,KAAK,CACH,+DAA+D,GAC7D,sEAAsE,GACtE,uDAAuD,EACzDyB,IACF,CAAC;QACH;QAEA,IAAImI,QAAQ,CAAC0hD,SAAS,EAAE;UACtBtrD,KAAK,CACH,oEAAoE,GAClE,uCAAuC,EACzCyB,IACF,CAAC;QACH;QAEA,IAAImI,QAAQ,CAAC2hD,WAAW,EAAE;UACxBvrD,KAAK,CACH,sEAAsE,GACpE,yCAAyC,EAC3CyB,IACF,CAAC;QACH;QAEA;UACE,IAAImI,QAAQ,CAACwzB,YAAY,EAAE;YACzBp9B,KAAK,CACH,uEAAuE,GACrE,0CAA0C,EAC5CyB,IACF,CAAC;UACH;UAEA,IACEk5B,IAAI,CAAC4wB,WAAW,IAChB5wB,IAAI,CAACyC,YAAY,IACjB,CAAC6sB,sCAAsC,CAAC/0B,GAAG,CAACyF,IAAI,CAAC,EACjD;YACAsvB,sCAAsC,CAACn1B,GAAG,CAAC6F,IAAI,CAAC;YAEhD36B,KAAK,CACH,mEAAmE,GACjE,mDAAmD,EACrDyB,IACF,CAAC;UACH;QACF;QAEA,IAAI,OAAOmI,QAAQ,CAAC4hD,qBAAqB,KAAK,UAAU,EAAE;UACxDxrD,KAAK,CACH,yBAAyB,GACvB,iEAAiE,GACjE,4DAA4D,GAC5D,6BAA6B,EAC/ByB,IACF,CAAC;QACH;QAEA,IACEk5B,IAAI,CAAC75B,SAAS,IACd65B,IAAI,CAAC75B,SAAS,CAACkqD,oBAAoB,IACnC,OAAOphD,QAAQ,CAACmhD,qBAAqB,KAAK,WAAW,EACrD;UACA/qD,KAAK,CACH,kDAAkD,GAChD,+EAA+E,GAC/E,iEAAiE,EACnE+e,wBAAwB,CAAC4b,IAAI,CAAC,IAAI,kBACpC,CAAC;QACH;QAEA,IAAI,OAAO/wB,QAAQ,CAAC6hD,mBAAmB,KAAK,UAAU,EAAE;UACtDzrD,KAAK,CACH,yBAAyB,GACvB,gEAAgE,GAChE,sCAAsC,EACxCyB,IACF,CAAC;QACH;QAEA,IAAI,OAAOmI,QAAQ,CAAC8hD,wBAAwB,KAAK,UAAU,EAAE;UAC3D1rD,KAAK,CACH,yBAAyB,GACvB,qEAAqE,GACrE,kEAAkE,GAClE,iEAAiE,GACjE,yFAAyF,EAC3FyB,IACF,CAAC;QACH;QAEA,IAAI,OAAOmI,QAAQ,CAAC+hD,yBAAyB,KAAK,UAAU,EAAE;UAC5D3rD,KAAK,CACH,yBAAyB,GACvB,wEAAwE,EAC1EyB,IACF,CAAC;QACH;QAEA,IAAI,OAAOmI,QAAQ,CAACgiD,gCAAgC,KAAK,UAAU,EAAE;UACnE5rD,KAAK,CACH,yBAAyB,GACvB,sFAAsF,EACxFyB,IACF,CAAC;QACH;QAEA,IAAIoqD,eAAe,GAAGjiD,QAAQ,CAACkJ,KAAK,KAAKkmB,QAAQ;QAEjD,IAAIpvB,QAAQ,CAACkJ,KAAK,KAAK/M,SAAS,IAAI8lD,eAAe,EAAE;UACnD7rD,KAAK,CACH,2DAA2D,GACzD,iEAAiE,EACnEyB,IAAI,EACJA,IACF,CAAC;QACH;QAEA,IAAImI,QAAQ,CAAC6/C,YAAY,EAAE;UACzBzpD,KAAK,CACH,0FAA0F,GACxF,2DAA2D,EAC7DyB,IAAI,EACJA,IACF,CAAC;QACH;QAEA,IACE,OAAOmI,QAAQ,CAACkiD,uBAAuB,KAAK,UAAU,IACtD,OAAOliD,QAAQ,CAACmiD,kBAAkB,KAAK,UAAU,IACjD,CAAClC,mDAAmD,CAAC30B,GAAG,CAACyF,IAAI,CAAC,EAC9D;UACAkvB,mDAAmD,CAAC/0B,GAAG,CAAC6F,IAAI,CAAC;UAE7D36B,KAAK,CACH,0EAA0E,GACxE,wDAAwD,EAC1D+e,wBAAwB,CAAC4b,IAAI,CAC/B,CAAC;QACH;QAEA,IAAI,OAAO/wB,QAAQ,CAAC4gD,wBAAwB,KAAK,UAAU,EAAE;UAC3DxqD,KAAK,CACH,kEAAkE,GAChE,8DAA8D,EAChEyB,IACF,CAAC;QACH;QAEA,IAAI,OAAOmI,QAAQ,CAACoiD,wBAAwB,KAAK,UAAU,EAAE;UAC3DhsD,KAAK,CACH,kEAAkE,GAChE,8DAA8D,EAChEyB,IACF,CAAC;QACH;QAEA,IAAI,OAAOk5B,IAAI,CAACmxB,uBAAuB,KAAK,UAAU,EAAE;UACtD9rD,KAAK,CACH,8DAA8D,GAC5D,iEAAiE,EACnEyB,IACF,CAAC;QACH;QAEA,IAAIutC,KAAK,GAAGplC,QAAQ,CAAColC,KAAK;QAE1B,IAAIA,KAAK,KAAK,OAAOA,KAAK,KAAK,QAAQ,IAAIvqC,OAAO,CAACuqC,KAAK,CAAC,CAAC,EAAE;UAC1DhvC,KAAK,CAAC,4CAA4C,EAAEyB,IAAI,CAAC;QAC3D;QAEA,IACE,OAAOmI,QAAQ,CAACi0B,eAAe,KAAK,UAAU,IAC9C,OAAOlD,IAAI,CAAC2C,iBAAiB,KAAK,QAAQ,EAC1C;UACAt9B,KAAK,CACH,sEAAsE,GACpE,wBAAwB,EAC1ByB,IACF,CAAC;QACH;MACF;IACF;IAEA,SAASwqD,kBAAkBA,CAACvvB,cAAc,EAAE9yB,QAAQ,EAAE;MACpDA,QAAQ,CAACsiD,OAAO,GAAGzB,qBAAqB;MACxC/tB,cAAc,CAAC7pB,SAAS,GAAGjJ,QAAQ;MAEnCX,GAAG,CAACW,QAAQ,EAAE8yB,cAAc,CAAC;MAE7B;QACE9yB,QAAQ,CAACuiD,sBAAsB,GAAGzC,oBAAoB;MACxD;IACF;IAEA,SAAS0C,sBAAsBA,CAAC1vB,cAAc,EAAE/B,IAAI,EAAE7nB,KAAK,EAAE;MAC3D,IAAIu5C,uBAAuB,GAAG,KAAK;MACnC,IAAItvB,eAAe,GAAGX,kBAAkB;MACxC,IAAIz6B,OAAO,GAAGy6B,kBAAkB;MAChC,IAAImvB,WAAW,GAAG5wB,IAAI,CAAC4wB,WAAW;MAElC;QACE,IAAI,aAAa,IAAI5wB,IAAI,EAAE;UACzB,IAAI2xB,OAAO,GACTf,WAAW,KAAK,IAAI,IACnBA,WAAW,KAAKxlD,SAAS,IACxBwlD,WAAW,CAACvsC,QAAQ,KAAK3B,kBAAkB,IAC3CkuC,WAAW,CAACrsC,QAAQ,KAAKnZ,SAAU;UAEvC,IAAI,CAACumD,OAAO,IAAI,CAACpC,iCAAiC,CAACh1B,GAAG,CAACyF,IAAI,CAAC,EAAE;YAC5DuvB,iCAAiC,CAACp1B,GAAG,CAAC6F,IAAI,CAAC;YAC3C,IAAI4xB,QAAQ,GAAG,EAAE;YAEjB,IAAIhB,WAAW,KAAKxlD,SAAS,EAAE;cAC7BwmD,QAAQ,GACN,oCAAoC,GACpC,0EAA0E,GAC1E,wDAAwD,GACxD,yDAAyD;YAC7D,CAAC,MAAM,IAAI,OAAOhB,WAAW,KAAK,QAAQ,EAAE;cAC1CgB,QAAQ,GAAG,2BAA2B,GAAG,OAAOhB,WAAW,GAAG,GAAG;YACnE,CAAC,MAAM,IAAIA,WAAW,CAACvsC,QAAQ,KAAK5B,mBAAmB,EAAE;cACvDmvC,QAAQ,GACN,0DAA0D;YAC9D,CAAC,MAAM,IAAIhB,WAAW,CAACrsC,QAAQ,KAAKnZ,SAAS,EAAE;cAE7CwmD,QAAQ,GACN,0DAA0D;YAC9D,CAAC,MAAM;cACLA,QAAQ,GACN,8CAA8C,GAC9CrqD,MAAM,CAACwoC,IAAI,CAAC6gB,WAAW,CAAC,CAACnf,IAAI,CAAC,IAAI,CAAC,GACnC,IAAI;YACR;YAEApsC,KAAK,CACH,qCAAqC,GACnC,qFAAqF,EACvF+e,wBAAwB,CAAC4b,IAAI,CAAC,IAAI,WAAW,EAC7C4xB,QACF,CAAC;UACH;QACF;MACF;MAEA,IAAI,OAAOhB,WAAW,KAAK,QAAQ,IAAIA,WAAW,KAAK,IAAI,EAAE;QAC3D5pD,OAAO,GAAG68C,WAAW,CAAC+M,WAAW,CAAC;MACpC,CAAC,MAAM;QACLxuB,eAAe,GAAGN,kBAAkB,CAACC,cAAc,EAAE/B,IAAI,EAAE,IAAI,CAAC;QAChE,IAAIyC,YAAY,GAAGzC,IAAI,CAACyC,YAAY;QACpCivB,uBAAuB,GACrBjvB,YAAY,KAAK,IAAI,IAAIA,YAAY,KAAKr3B,SAAS;QACrDpE,OAAO,GAAG0qD,uBAAuB,GAC7BlvB,gBAAgB,CAACT,cAAc,EAAEK,eAAe,CAAC,GACjDX,kBAAkB;MACxB;MAEA,IAAIxyB,QAAQ,GAAG,IAAI+wB,IAAI,CAAC7nB,KAAK,EAAEnR,OAAO,CAAC;MAEvC;QACE,IAAI+6B,cAAc,CAACoC,IAAI,GAAGpS,gBAAgB,EAAE;UAC1CR,0BAA0B,CAAC,IAAI,CAAC;UAEhC,IAAI;YACFtiB,QAAQ,GAAG,IAAI+wB,IAAI,CAAC7nB,KAAK,EAAEnR,OAAO,CAAC;UACrC,CAAC,SAAS;YACRuqB,0BAA0B,CAAC,KAAK,CAAC;UACnC;QACF;MACF;MAEA,IAAI8iB,KAAK,GAAItS,cAAc,CAAC0C,aAAa,GACvCx1B,QAAQ,CAAColC,KAAK,KAAK,IAAI,IAAIplC,QAAQ,CAAColC,KAAK,KAAKjpC,SAAS,GACnD6D,QAAQ,CAAColC,KAAK,GACd,IAAK;MACXid,kBAAkB,CAACvvB,cAAc,EAAE9yB,QAAQ,CAAC;MAE5C;QACE,IACE,OAAO+wB,IAAI,CAAC6vB,wBAAwB,KAAK,UAAU,IACnDxb,KAAK,KAAK,IAAI,EACd;UACA,IAAIxT,aAAa,GAAGzc,wBAAwB,CAAC4b,IAAI,CAAC,IAAI,WAAW;UAEjE,IAAI,CAACivB,8BAA8B,CAAC10B,GAAG,CAACsG,aAAa,CAAC,EAAE;YACtDouB,8BAA8B,CAAC90B,GAAG,CAAC0G,aAAa,CAAC;YAEjDx7B,KAAK,CACH,gEAAgE,GAC9D,oEAAoE,GACpE,kEAAkE,GAClE,iFAAiF,EACnFw7B,aAAa,EACb5xB,QAAQ,CAAColC,KAAK,KAAK,IAAI,GAAG,MAAM,GAAG,WAAW,EAC9CxT,aACF,CAAC;UACH;QACF;QAIA,IACE,OAAOb,IAAI,CAAC6vB,wBAAwB,KAAK,UAAU,IACnD,OAAO5gD,QAAQ,CAACkiD,uBAAuB,KAAK,UAAU,EACtD;UACA,IAAIU,kBAAkB,GAAG,IAAI;UAC7B,IAAIC,yBAAyB,GAAG,IAAI;UACpC,IAAIC,mBAAmB,GAAG,IAAI;UAE9B,IACE,OAAO9iD,QAAQ,CAACijC,kBAAkB,KAAK,UAAU,IACjDjjC,QAAQ,CAACijC,kBAAkB,CAACC,4BAA4B,KAAK,IAAI,EACjE;YACA0f,kBAAkB,GAAG,oBAAoB;UAC3C,CAAC,MAAM,IAAI,OAAO5iD,QAAQ,CAACmjC,yBAAyB,KAAK,UAAU,EAAE;YACnEyf,kBAAkB,GAAG,2BAA2B;UAClD;UAEA,IACE,OAAO5iD,QAAQ,CAACojC,yBAAyB,KAAK,UAAU,IACxDpjC,QAAQ,CAACojC,yBAAyB,CAACF,4BAA4B,KAC7D,IAAI,EACN;YACA2f,yBAAyB,GAAG,2BAA2B;UACzD,CAAC,MAAM,IACL,OAAO7iD,QAAQ,CAACqjC,gCAAgC,KAAK,UAAU,EAC/D;YACAwf,yBAAyB,GAAG,kCAAkC;UAChE;UAEA,IACE,OAAO7iD,QAAQ,CAACsjC,mBAAmB,KAAK,UAAU,IAClDtjC,QAAQ,CAACsjC,mBAAmB,CAACJ,4BAA4B,KAAK,IAAI,EAClE;YACA4f,mBAAmB,GAAG,qBAAqB;UAC7C,CAAC,MAAM,IACL,OAAO9iD,QAAQ,CAACujC,0BAA0B,KAAK,UAAU,EACzD;YACAuf,mBAAmB,GAAG,4BAA4B;UACpD;UAEA,IACEF,kBAAkB,KAAK,IAAI,IAC3BC,yBAAyB,KAAK,IAAI,IAClCC,mBAAmB,KAAK,IAAI,EAC5B;YACA,IAAIC,cAAc,GAAG5tC,wBAAwB,CAAC4b,IAAI,CAAC,IAAI,WAAW;YAElE,IAAIiyB,UAAU,GACZ,OAAOjyB,IAAI,CAAC6vB,wBAAwB,KAAK,UAAU,GAC/C,4BAA4B,GAC5B,2BAA2B;YAEjC,IACE,CAACV,2CAA2C,CAAC50B,GAAG,CAACy3B,cAAc,CAAC,EAChE;cACA7C,2CAA2C,CAACh1B,GAAG,CAAC63B,cAAc,CAAC;cAE/D3sD,KAAK,CACH,0FAA0F,GACxF,yEAAyE,GACzE,+EAA+E,GAC/E,sDAAsD,EACxD2sD,cAAc,EACdC,UAAU,EACVJ,kBAAkB,KAAK,IAAI,GAAG,MAAM,GAAGA,kBAAkB,GAAG,EAAE,EAC9DC,yBAAyB,KAAK,IAAI,GAC9B,MAAM,GAAGA,yBAAyB,GAClC,EAAE,EACNC,mBAAmB,KAAK,IAAI,GAAG,MAAM,GAAGA,mBAAmB,GAAG,EAChE,CAAC;YACH;UACF;QACF;MACF;MAGA,IAAIL,uBAAuB,EAAE;QAC3BvvB,YAAY,CAACJ,cAAc,EAAEK,eAAe,EAAEp7B,OAAO,CAAC;MACxD;MAEA,OAAOiI,QAAQ;IACjB;IAEA,SAASijD,sBAAsBA,CAACnwB,cAAc,EAAE9yB,QAAQ,EAAE;MACxD,IAAIkhD,QAAQ,GAAGlhD,QAAQ,CAAColC,KAAK;MAE7B,IAAI,OAAOplC,QAAQ,CAACijC,kBAAkB,KAAK,UAAU,EAAE;QACrDjjC,QAAQ,CAACijC,kBAAkB,CAAC,CAAC;MAC/B;MAEA,IAAI,OAAOjjC,QAAQ,CAACmjC,yBAAyB,KAAK,UAAU,EAAE;QAC5DnjC,QAAQ,CAACmjC,yBAAyB,CAAC,CAAC;MACtC;MAEA,IAAI+d,QAAQ,KAAKlhD,QAAQ,CAAColC,KAAK,EAAE;QAC/B;UACEhvC,KAAK,CACH,+DAA+D,GAC7D,0CAA0C,GAC1C,qCAAqC,EACvC6f,yBAAyB,CAAC6c,cAAc,CAAC,IAAI,WAC/C,CAAC;QACH;QAEA+tB,qBAAqB,CAACE,mBAAmB,CACvC/gD,QAAQ,EACRA,QAAQ,CAAColC,KAAK,EACd,IACF,CAAC;MACH;IACF;IAEA,SAAS8d,6BAA6BA,CACpCpwB,cAAc,EACd9yB,QAAQ,EACRovB,QAAQ,EACRkH,WAAW,EACX;MACA,IAAI4qB,QAAQ,GAAGlhD,QAAQ,CAAColC,KAAK;MAE7B,IAAI,OAAOplC,QAAQ,CAACojC,yBAAyB,KAAK,UAAU,EAAE;QAC5DpjC,QAAQ,CAACojC,yBAAyB,CAAChU,QAAQ,EAAEkH,WAAW,CAAC;MAC3D;MAEA,IAAI,OAAOt2B,QAAQ,CAACqjC,gCAAgC,KAAK,UAAU,EAAE;QACnErjC,QAAQ,CAACqjC,gCAAgC,CAACjU,QAAQ,EAAEkH,WAAW,CAAC;MAClE;MAEA,IAAIt2B,QAAQ,CAAColC,KAAK,KAAK8b,QAAQ,EAAE;QAC/B;UACE,IAAItvB,aAAa,GACf3b,yBAAyB,CAAC6c,cAAc,CAAC,IAAI,WAAW;UAE1D,IAAI,CAACitB,uCAAuC,CAACz0B,GAAG,CAACsG,aAAa,CAAC,EAAE;YAC/DmuB,uCAAuC,CAAC70B,GAAG,CAAC0G,aAAa,CAAC;YAE1Dx7B,KAAK,CACH,wDAAwD,GACtD,wDAAwD,GACxD,qCAAqC,EACvCw7B,aACF,CAAC;UACH;QACF;QAEAivB,qBAAqB,CAACE,mBAAmB,CACvC/gD,QAAQ,EACRA,QAAQ,CAAColC,KAAK,EACd,IACF,CAAC;MACH;IACF;IAEA,SAAS+d,kBAAkBA,CAACrwB,cAAc,EAAE/B,IAAI,EAAE3B,QAAQ,EAAEjI,WAAW,EAAE;MACvE;QACEk6B,kBAAkB,CAACvuB,cAAc,EAAE/B,IAAI,EAAE3B,QAAQ,CAAC;MACpD;MAEA,IAAIpvB,QAAQ,GAAG8yB,cAAc,CAAC7pB,SAAS;MACvCjJ,QAAQ,CAACkJ,KAAK,GAAGkmB,QAAQ;MACzBpvB,QAAQ,CAAColC,KAAK,GAAGtS,cAAc,CAAC0C,aAAa;MAC7Cx1B,QAAQ,CAACkoC,IAAI,GAAG,CAAC,CAAC;MAClB9K,qBAAqB,CAACtK,cAAc,CAAC;MACrC,IAAI6uB,WAAW,GAAG5wB,IAAI,CAAC4wB,WAAW;MAElC,IAAI,OAAOA,WAAW,KAAK,QAAQ,IAAIA,WAAW,KAAK,IAAI,EAAE;QAC3D3hD,QAAQ,CAACjI,OAAO,GAAG68C,WAAW,CAAC+M,WAAW,CAAC;MAC7C,CAAC,MAAM;QACL,IAAIxuB,eAAe,GAAGN,kBAAkB,CAACC,cAAc,EAAE/B,IAAI,EAAE,IAAI,CAAC;QACpE/wB,QAAQ,CAACjI,OAAO,GAAGw7B,gBAAgB,CAACT,cAAc,EAAEK,eAAe,CAAC;MACtE;MAEA;QACE,IAAInzB,QAAQ,CAAColC,KAAK,KAAKhW,QAAQ,EAAE;UAC/B,IAAIwC,aAAa,GAAGzc,wBAAwB,CAAC4b,IAAI,CAAC,IAAI,WAAW;UAEjE,IAAI,CAACqvB,yCAAyC,CAAC90B,GAAG,CAACsG,aAAa,CAAC,EAAE;YACjEwuB,yCAAyC,CAACl1B,GAAG,CAAC0G,aAAa,CAAC;YAE5Dx7B,KAAK,CACH,8DAA8D,GAC5D,wDAAwD,GACxD,oDAAoD,EACtDw7B,aACF,CAAC;UACH;QACF;QAEA,IAAIkB,cAAc,CAACoC,IAAI,GAAGpS,gBAAgB,EAAE;UAC1C+e,uBAAuB,CAACG,0BAA0B,CAChDlP,cAAc,EACd9yB,QACF,CAAC;QACH;QAEA6hC,uBAAuB,CAACC,6BAA6B,CACnDhP,cAAc,EACd9yB,QACF,CAAC;MACH;MAEAA,QAAQ,CAAColC,KAAK,GAAGtS,cAAc,CAAC0C,aAAa;MAC7C,IAAIorB,wBAAwB,GAAG7vB,IAAI,CAAC6vB,wBAAwB;MAE5D,IAAI,OAAOA,wBAAwB,KAAK,UAAU,EAAE;QAClDD,0BAA0B,CACxB7tB,cAAc,EACd/B,IAAI,EACJ6vB,wBAAwB,EACxBxxB,QACF,CAAC;QACDpvB,QAAQ,CAAColC,KAAK,GAAGtS,cAAc,CAAC0C,aAAa;MAC/C;MAGA,IACE,OAAOzE,IAAI,CAAC6vB,wBAAwB,KAAK,UAAU,IACnD,OAAO5gD,QAAQ,CAACkiD,uBAAuB,KAAK,UAAU,KACrD,OAAOliD,QAAQ,CAACmjC,yBAAyB,KAAK,UAAU,IACvD,OAAOnjC,QAAQ,CAACijC,kBAAkB,KAAK,UAAU,CAAC,EACpD;QACAggB,sBAAsB,CAACnwB,cAAc,EAAE9yB,QAAQ,CAAC;QAGhDm/B,kBAAkB,CAACrM,cAAc,EAAE1D,QAAQ,EAAEpvB,QAAQ,EAAEmnB,WAAW,CAAC;QACnE8X,2CAA2C,CAAC,CAAC;QAC7Cj/B,QAAQ,CAAColC,KAAK,GAAGtS,cAAc,CAAC0C,aAAa;MAC/C;MAEA,IAAI,OAAOx1B,QAAQ,CAACojD,iBAAiB,KAAK,UAAU,EAAE;QACpDtwB,cAAc,CAACja,KAAK,IAAIrC,MAAM,GAAGoB,YAAY;MAC/C;MAEA,IAAI,CAACkb,cAAc,CAACoC,IAAI,GAAGnS,iBAAiB,MAAMJ,MAAM,EAAE;QACxDmQ,cAAc,CAACja,KAAK,IAAIb,cAAc;MACxC;IACF;IAEA,SAASqrC,wBAAwBA,CAC/BvwB,cAAc,EACd/B,IAAI,EACJ3B,QAAQ,EACRjI,WAAW,EACX;MACA,IAAInnB,QAAQ,GAAG8yB,cAAc,CAAC7pB,SAAS;MACvC,IAAIsmB,QAAQ,GAAGuD,cAAc,CAACmC,aAAa;MAC3Cj1B,QAAQ,CAACkJ,KAAK,GAAGqmB,QAAQ;MACzB,IAAI+zB,UAAU,GAAGtjD,QAAQ,CAACjI,OAAO;MACjC,IAAI4pD,WAAW,GAAG5wB,IAAI,CAAC4wB,WAAW;MAClC,IAAIrrB,WAAW,GAAG9D,kBAAkB;MAEpC,IAAI,OAAOmvB,WAAW,KAAK,QAAQ,IAAIA,WAAW,KAAK,IAAI,EAAE;QAC3DrrB,WAAW,GAAGse,WAAW,CAAC+M,WAAW,CAAC;MACxC,CAAC,MAAM;QACL,IAAI4B,yBAAyB,GAAG1wB,kBAAkB,CAChDC,cAAc,EACd/B,IAAI,EACJ,IACF,CAAC;QACDuF,WAAW,GAAG/C,gBAAgB,CAC5BT,cAAc,EACdywB,yBACF,CAAC;MACH;MAEA,IAAI3C,wBAAwB,GAAG7vB,IAAI,CAAC6vB,wBAAwB;MAC5D,IAAI4C,gBAAgB,GAClB,OAAO5C,wBAAwB,KAAK,UAAU,IAC9C,OAAO5gD,QAAQ,CAACkiD,uBAAuB,KAAK,UAAU;MAMxD,IACE,CAACsB,gBAAgB,KAChB,OAAOxjD,QAAQ,CAACqjC,gCAAgC,KAAK,UAAU,IAC9D,OAAOrjC,QAAQ,CAACojC,yBAAyB,KAAK,UAAU,CAAC,EAC3D;QACA,IAAI7T,QAAQ,KAAKH,QAAQ,IAAIk0B,UAAU,KAAKhtB,WAAW,EAAE;UACvD4sB,6BAA6B,CAC3BpwB,cAAc,EACd9yB,QAAQ,EACRovB,QAAQ,EACRkH,WACF,CAAC;QACH;MACF;MAEA6J,mCAAmC,CAAC,CAAC;MACrC,IAAI+gB,QAAQ,GAAGpuB,cAAc,CAAC0C,aAAa;MAC3C,IAAIgK,QAAQ,GAAIx/B,QAAQ,CAAColC,KAAK,GAAG8b,QAAS;MAC1C/hB,kBAAkB,CAACrM,cAAc,EAAE1D,QAAQ,EAAEpvB,QAAQ,EAAEmnB,WAAW,CAAC;MACnE8X,2CAA2C,CAAC,CAAC;MAC7CO,QAAQ,GAAG1M,cAAc,CAAC0C,aAAa;MAEvC,IACEjG,QAAQ,KAAKH,QAAQ,IACrB8xB,QAAQ,KAAK1hB,QAAQ,IACrB,CAAC/L,iBAAiB,CAAC,CAAC,IACpB,CAAC2M,kCAAkC,CAAC,CAAC,EACrC;QAGA,IAAI,OAAOpgC,QAAQ,CAACojD,iBAAiB,KAAK,UAAU,EAAE;UACpDtwB,cAAc,CAACja,KAAK,IAAIrC,MAAM,GAAGoB,YAAY;QAC/C;QAEA,IAAI,CAACkb,cAAc,CAACoC,IAAI,GAAGnS,iBAAiB,MAAMJ,MAAM,EAAE;UACxDmQ,cAAc,CAACja,KAAK,IAAIb,cAAc;QACxC;QAEA,OAAO,KAAK;MACd;MAEA,IAAI,OAAO4oC,wBAAwB,KAAK,UAAU,EAAE;QAClDD,0BAA0B,CACxB7tB,cAAc,EACd/B,IAAI,EACJ6vB,wBAAwB,EACxBxxB,QACF,CAAC;QACDoQ,QAAQ,GAAG1M,cAAc,CAAC0C,aAAa;MACzC;MAEA,IAAInZ,YAAY,GACd+jB,kCAAkC,CAAC,CAAC,IACpC6gB,0BAA0B,CACxBnuB,cAAc,EACd/B,IAAI,EACJxB,QAAQ,EACRH,QAAQ,EACR8xB,QAAQ,EACR1hB,QAAQ,EACRlJ,WACF,CAAC;MAEH,IAAIja,YAAY,EAAE;QAGhB,IACE,CAACmnC,gBAAgB,KAChB,OAAOxjD,QAAQ,CAACmjC,yBAAyB,KAAK,UAAU,IACvD,OAAOnjC,QAAQ,CAACijC,kBAAkB,KAAK,UAAU,CAAC,EACpD;UACA,IAAI,OAAOjjC,QAAQ,CAACijC,kBAAkB,KAAK,UAAU,EAAE;YACrDjjC,QAAQ,CAACijC,kBAAkB,CAAC,CAAC;UAC/B;UAEA,IAAI,OAAOjjC,QAAQ,CAACmjC,yBAAyB,KAAK,UAAU,EAAE;YAC5DnjC,QAAQ,CAACmjC,yBAAyB,CAAC,CAAC;UACtC;QACF;QAEA,IAAI,OAAOnjC,QAAQ,CAACojD,iBAAiB,KAAK,UAAU,EAAE;UACpDtwB,cAAc,CAACja,KAAK,IAAIrC,MAAM,GAAGoB,YAAY;QAC/C;QAEA,IAAI,CAACkb,cAAc,CAACoC,IAAI,GAAGnS,iBAAiB,MAAMJ,MAAM,EAAE;UACxDmQ,cAAc,CAACja,KAAK,IAAIb,cAAc;QACxC;MACF,CAAC,MAAM;QAGL,IAAI,OAAOhY,QAAQ,CAACojD,iBAAiB,KAAK,UAAU,EAAE;UACpDtwB,cAAc,CAACja,KAAK,IAAIrC,MAAM,GAAGoB,YAAY;QAC/C;QAEA,IAAI,CAACkb,cAAc,CAACoC,IAAI,GAAGnS,iBAAiB,MAAMJ,MAAM,EAAE;UACxDmQ,cAAc,CAACja,KAAK,IAAIb,cAAc;QACxC;QAGA8a,cAAc,CAACmC,aAAa,GAAG7F,QAAQ;QACvC0D,cAAc,CAAC0C,aAAa,GAAGgK,QAAQ;MACzC;MAGAx/B,QAAQ,CAACkJ,KAAK,GAAGkmB,QAAQ;MACzBpvB,QAAQ,CAAColC,KAAK,GAAG5F,QAAQ;MACzBx/B,QAAQ,CAACjI,OAAO,GAAGu+B,WAAW;MAC9B,OAAOja,YAAY;IACrB;IAEA,SAASonC,mBAAmBA,CAC1Bv/C,OAAO,EACP4uB,cAAc,EACd/B,IAAI,EACJ3B,QAAQ,EACRjI,WAAW,EACX;MACA,IAAInnB,QAAQ,GAAG8yB,cAAc,CAAC7pB,SAAS;MACvC20B,gBAAgB,CAAC15B,OAAO,EAAE4uB,cAAc,CAAC;MACzC,IAAI4wB,kBAAkB,GAAG5wB,cAAc,CAACmC,aAAa;MACrD,IAAI1F,QAAQ,GACVuD,cAAc,CAAC72B,IAAI,KAAK62B,cAAc,CAACqX,WAAW,GAC9CuZ,kBAAkB,GAClB/D,mBAAmB,CAAC7sB,cAAc,CAAC72B,IAAI,EAAEynD,kBAAkB,CAAC;MAClE1jD,QAAQ,CAACkJ,KAAK,GAAGqmB,QAAQ;MACzB,IAAIo0B,kBAAkB,GAAG7wB,cAAc,CAACuW,YAAY;MACpD,IAAIia,UAAU,GAAGtjD,QAAQ,CAACjI,OAAO;MACjC,IAAI4pD,WAAW,GAAG5wB,IAAI,CAAC4wB,WAAW;MAClC,IAAIrrB,WAAW,GAAG9D,kBAAkB;MAEpC,IAAI,OAAOmvB,WAAW,KAAK,QAAQ,IAAIA,WAAW,KAAK,IAAI,EAAE;QAC3DrrB,WAAW,GAAGse,WAAW,CAAC+M,WAAW,CAAC;MACxC,CAAC,MAAM;QACL,IAAIiC,mBAAmB,GAAG/wB,kBAAkB,CAC1CC,cAAc,EACd/B,IAAI,EACJ,IACF,CAAC;QACDuF,WAAW,GAAG/C,gBAAgB,CAACT,cAAc,EAAE8wB,mBAAmB,CAAC;MACrE;MAEA,IAAIhD,wBAAwB,GAAG7vB,IAAI,CAAC6vB,wBAAwB;MAC5D,IAAI4C,gBAAgB,GAClB,OAAO5C,wBAAwB,KAAK,UAAU,IAC9C,OAAO5gD,QAAQ,CAACkiD,uBAAuB,KAAK,UAAU;MAMxD,IACE,CAACsB,gBAAgB,KAChB,OAAOxjD,QAAQ,CAACqjC,gCAAgC,KAAK,UAAU,IAC9D,OAAOrjC,QAAQ,CAACojC,yBAAyB,KAAK,UAAU,CAAC,EAC3D;QACA,IACEsgB,kBAAkB,KAAKC,kBAAkB,IACzCL,UAAU,KAAKhtB,WAAW,EAC1B;UACA4sB,6BAA6B,CAC3BpwB,cAAc,EACd9yB,QAAQ,EACRovB,QAAQ,EACRkH,WACF,CAAC;QACH;MACF;MAEA6J,mCAAmC,CAAC,CAAC;MACrC,IAAI+gB,QAAQ,GAAGpuB,cAAc,CAAC0C,aAAa;MAC3C,IAAIgK,QAAQ,GAAIx/B,QAAQ,CAAColC,KAAK,GAAG8b,QAAS;MAC1C/hB,kBAAkB,CAACrM,cAAc,EAAE1D,QAAQ,EAAEpvB,QAAQ,EAAEmnB,WAAW,CAAC;MACnE8X,2CAA2C,CAAC,CAAC;MAC7CO,QAAQ,GAAG1M,cAAc,CAAC0C,aAAa;MAEvC,IACEkuB,kBAAkB,KAAKC,kBAAkB,IACzCzC,QAAQ,KAAK1hB,QAAQ,IACrB,CAAC/L,iBAAiB,CAAC,CAAC,IACpB,CAAC2M,kCAAkC,CAAC,CAAC,IACrC,CAACttB,4BAA4B,EAC7B;QAGA,IAAI,OAAO9S,QAAQ,CAACmiD,kBAAkB,KAAK,UAAU,EAAE;UACrD,IACEuB,kBAAkB,KAAKx/C,OAAO,CAAC+wB,aAAa,IAC5CisB,QAAQ,KAAKh9C,OAAO,CAACsxB,aAAa,EAClC;YACA1C,cAAc,CAACja,KAAK,IAAIrC,MAAM;UAChC;QACF;QAEA,IAAI,OAAOxW,QAAQ,CAACkiD,uBAAuB,KAAK,UAAU,EAAE;UAC1D,IACEwB,kBAAkB,KAAKx/C,OAAO,CAAC+wB,aAAa,IAC5CisB,QAAQ,KAAKh9C,OAAO,CAACsxB,aAAa,EAClC;YACA1C,cAAc,CAACja,KAAK,IAAI/B,QAAQ;UAClC;QACF;QAEA,OAAO,KAAK;MACd;MAEA,IAAI,OAAO8pC,wBAAwB,KAAK,UAAU,EAAE;QAClDD,0BAA0B,CACxB7tB,cAAc,EACd/B,IAAI,EACJ6vB,wBAAwB,EACxBxxB,QACF,CAAC;QACDoQ,QAAQ,GAAG1M,cAAc,CAAC0C,aAAa;MACzC;MAEA,IAAInZ,YAAY,GACd+jB,kCAAkC,CAAC,CAAC,IACpC6gB,0BAA0B,CACxBnuB,cAAc,EACd/B,IAAI,EACJxB,QAAQ,EACRH,QAAQ,EACR8xB,QAAQ,EACR1hB,QAAQ,EACRlJ,WACF,CAAC,IAIDxjB,4BAA4B;MAE9B,IAAIuJ,YAAY,EAAE;QAGhB,IACE,CAACmnC,gBAAgB,KAChB,OAAOxjD,QAAQ,CAACujC,0BAA0B,KAAK,UAAU,IACxD,OAAOvjC,QAAQ,CAACsjC,mBAAmB,KAAK,UAAU,CAAC,EACrD;UACA,IAAI,OAAOtjC,QAAQ,CAACsjC,mBAAmB,KAAK,UAAU,EAAE;YACtDtjC,QAAQ,CAACsjC,mBAAmB,CAAClU,QAAQ,EAAEoQ,QAAQ,EAAElJ,WAAW,CAAC;UAC/D;UAEA,IAAI,OAAOt2B,QAAQ,CAACujC,0BAA0B,KAAK,UAAU,EAAE;YAC7DvjC,QAAQ,CAACujC,0BAA0B,CACjCnU,QAAQ,EACRoQ,QAAQ,EACRlJ,WACF,CAAC;UACH;QACF;QAEA,IAAI,OAAOt2B,QAAQ,CAACmiD,kBAAkB,KAAK,UAAU,EAAE;UACrDrvB,cAAc,CAACja,KAAK,IAAIrC,MAAM;QAChC;QAEA,IAAI,OAAOxW,QAAQ,CAACkiD,uBAAuB,KAAK,UAAU,EAAE;UAC1DpvB,cAAc,CAACja,KAAK,IAAI/B,QAAQ;QAClC;MACF,CAAC,MAAM;QAGL,IAAI,OAAO9W,QAAQ,CAACmiD,kBAAkB,KAAK,UAAU,EAAE;UACrD,IACEuB,kBAAkB,KAAKx/C,OAAO,CAAC+wB,aAAa,IAC5CisB,QAAQ,KAAKh9C,OAAO,CAACsxB,aAAa,EAClC;YACA1C,cAAc,CAACja,KAAK,IAAIrC,MAAM;UAChC;QACF;QAEA,IAAI,OAAOxW,QAAQ,CAACkiD,uBAAuB,KAAK,UAAU,EAAE;UAC1D,IACEwB,kBAAkB,KAAKx/C,OAAO,CAAC+wB,aAAa,IAC5CisB,QAAQ,KAAKh9C,OAAO,CAACsxB,aAAa,EAClC;YACA1C,cAAc,CAACja,KAAK,IAAI/B,QAAQ;UAClC;QACF;QAGAgc,cAAc,CAACmC,aAAa,GAAG7F,QAAQ;QACvC0D,cAAc,CAAC0C,aAAa,GAAGgK,QAAQ;MACzC;MAGAx/B,QAAQ,CAACkJ,KAAK,GAAGkmB,QAAQ;MACzBpvB,QAAQ,CAAColC,KAAK,GAAG5F,QAAQ;MACzBx/B,QAAQ,CAACjI,OAAO,GAAGu+B,WAAW;MAC9B,OAAOja,YAAY;IACrB;IAEA,SAASwnC,0BAA0BA,CAACtxC,KAAK,EAAEuxC,MAAM,EAAE;MAGjD,OAAO;QACLvxC,KAAK,EAAEA,KAAK;QACZuxC,MAAM,EAAEA,MAAM;QACdrtD,KAAK,EAAE0qC,2BAA2B,CAAC2iB,MAAM,CAAC;QAC1CC,MAAM,EAAE;MACV,CAAC;IACH;IACA,SAASC,mBAAmBA,CAACzxC,KAAK,EAAEwxC,MAAM,EAAEttD,KAAK,EAAE;MACjD,OAAO;QACL8b,KAAK,EAAEA,KAAK;QACZuxC,MAAM,EAAE,IAAI;QACZrtD,KAAK,EAAEA,KAAK,IAAI,IAAI,GAAGA,KAAK,GAAG,IAAI;QACnCstD,MAAM,EAAEA,MAAM,IAAI,IAAI,GAAGA,MAAM,GAAG;MACpC,CAAC;IACH;IAEA,IACE,OAAOxuD,2BAA2B,CAAC0uD,qBAAqB,CACrDC,eAAe,KAAK,UAAU,EACjC;MACA,MAAM,IAAI9uD,KAAK,CACb,kEACF,CAAC;IACH;IAEA,SAAS8uD,eAAeA,CAACC,QAAQ,EAAEC,SAAS,EAAE;MAC5C,IAAIC,aAAa,GAAG;QAClBC,cAAc,EAAEF,SAAS,CAAC3tD,KAAK,KAAK,IAAI,GAAG2tD,SAAS,CAAC3tD,KAAK,GAAG,EAAE;QAC/DL,KAAK,EAAEguD,SAAS,CAAC7xC,KAAK;QACtBgyC,aAAa,EACXJ,QAAQ,KAAK,IAAI,IAAIA,QAAQ,CAACl8C,GAAG,KAAKvD,cAAc,GAChDy/C,QAAQ,CAACl7C,SAAS,GAClB;MACR,CAAC;MACD,OAAO1T,2BAA2B,CAAC0uD,qBAAqB,CAACC,eAAe,CACtEG,aACF,CAAC;IACH;IAEA,SAASG,gBAAgBA,CAACL,QAAQ,EAAEC,SAAS,EAAE;MAC7C,IAAI;QACF,IAAIK,QAAQ,GAAGP,eAAe,CAACC,QAAQ,EAAEC,SAAS,CAAC;QAGnD,IAAIK,QAAQ,KAAK,KAAK,EAAE;UACtB;QACF;QAEA,IAAIruD,KAAK,GAAGguD,SAAS,CAAC7xC,KAAK;QAE3B,IAAI,IAAI,EAAE;UACR,IAAIuxC,MAAM,GAAGM,SAAS,CAACN,MAAM;UAC7B,IAAIrtD,KAAK,GAAG2tD,SAAS,CAAC3tD,KAAK;UAC3B,IAAI6tD,cAAc,GAAG7tD,KAAK,KAAK,IAAI,GAAGA,KAAK,GAAG,EAAE;UAIhD,IAAIL,KAAK,IAAI,IAAI,IAAIA,KAAK,CAACiD,gBAAgB,EAAE;YAC3C,IAAI8qD,QAAQ,CAACl8C,GAAG,KAAKvD,cAAc,EAAE;cAInC;YACF;YAKArN,OAAO,CAAC,OAAO,CAAC,CAACjB,KAAK,CAAC;UAGzB;UAEA,IAAIw7B,aAAa,GAAGkyB,MAAM,GAAG7tC,yBAAyB,CAAC6tC,MAAM,CAAC,GAAG,IAAI;UACrE,IAAIY,oBAAoB,GAAG9yB,aAAa,GACpC,mCAAmC,GACnCA,aAAa,GACb,cAAc,GACd,2DAA2D;UAC/D,IAAI+yB,oBAAoB;UAExB,IAAIR,QAAQ,CAACl8C,GAAG,KAAKrD,QAAQ,EAAE;YAC7B+/C,oBAAoB,GAClB,wFAAwF,GACxF,uFAAuF;UAC3F,CAAC,MAAM;YACL,IAAIC,iBAAiB,GACnB3uC,yBAAyB,CAACkuC,QAAQ,CAAC,IAAI,WAAW;YACpDQ,oBAAoB,GAClB,8DAA8D,IAC7D,yCAAyC,GACxCC,iBAAiB,GACjB,GAAG,CAAC;UACV;UAEA,IAAIC,eAAe,GACjBH,oBAAoB,GACpB,IAAI,GACJJ,cAAc,GACd,MAAM,IACL,EAAE,GAAGK,oBAAoB,CAAC;UAK7BttD,OAAO,CAAC,OAAO,CAAC,CAACwtD,eAAe,CAAC;QACnC;MACF,CAAC,CAAC,OAAOvqD,CAAC,EAAE;QAKV6zB,UAAU,CAAC,YAAY;UACrB,MAAM7zB,CAAC;QACT,CAAC,CAAC;MACJ;IACF;IAEA,SAASwqD,qBAAqBA,CAAC5uC,KAAK,EAAEkuC,SAAS,EAAE58B,IAAI,EAAE;MACrD,IAAI+C,MAAM,GAAGwT,YAAY,CAACvW,IAAI,CAAC;MAE/B+C,MAAM,CAACtiB,GAAG,GAAG+0B,aAAa;MAG1BzS,MAAM,CAAC7U,OAAO,GAAG;QACf2b,OAAO,EAAE;MACX,CAAC;MACD,IAAIj7B,KAAK,GAAGguD,SAAS,CAAC7xC,KAAK;MAE3BgY,MAAM,CAAC7mB,QAAQ,GAAG,YAAY;QAC5BqhD,eAAe,CAAC3uD,KAAK,CAAC;QACtBouD,gBAAgB,CAACtuC,KAAK,EAAEkuC,SAAS,CAAC;MACpC,CAAC;MAED,OAAO75B,MAAM;IACf;IAEA,SAASy6B,sBAAsBA,CAAC9uC,KAAK,EAAEkuC,SAAS,EAAE58B,IAAI,EAAE;MACtD,IAAI+C,MAAM,GAAGwT,YAAY,CAACvW,IAAI,CAAC;MAC/B+C,MAAM,CAACtiB,GAAG,GAAG+0B,aAAa;MAC1B,IAAIolB,wBAAwB,GAAGlsC,KAAK,CAACja,IAAI,CAACmmD,wBAAwB;MAElE,IAAI,OAAOA,wBAAwB,KAAK,UAAU,EAAE;QAClD,IAAIrwB,OAAO,GAAGqyB,SAAS,CAAC7xC,KAAK;QAE7BgY,MAAM,CAAC7U,OAAO,GAAG,YAAY;UAC3B,OAAO0sC,wBAAwB,CAACrwB,OAAO,CAAC;QAC1C,CAAC;QAEDxH,MAAM,CAAC7mB,QAAQ,GAAG,YAAY;UAC5B;YACEuhD,sCAAsC,CAAC/uC,KAAK,CAAC;UAC/C;UAEAsuC,gBAAgB,CAACtuC,KAAK,EAAEkuC,SAAS,CAAC;QACpC,CAAC;MACH;MAEA,IAAIpoD,IAAI,GAAGka,KAAK,CAACjN,SAAS;MAE1B,IAAIjN,IAAI,KAAK,IAAI,IAAI,OAAOA,IAAI,CAACkpD,iBAAiB,KAAK,UAAU,EAAE;QAEjE36B,MAAM,CAAC7mB,QAAQ,GAAG,SAASA,QAAQA,CAAA,EAAG;UACpC;YACEuhD,sCAAsC,CAAC/uC,KAAK,CAAC;UAC/C;UAEAsuC,gBAAgB,CAACtuC,KAAK,EAAEkuC,SAAS,CAAC;UAElC,IAAI,OAAOhC,wBAAwB,KAAK,UAAU,EAAE;YAMlD+C,+BAA+B,CAAC,IAAI,CAAC;UACvC;UAEA,IAAIpzB,OAAO,GAAGqyB,SAAS,CAAC7xC,KAAK;UAC7B,IAAI9b,KAAK,GAAG2tD,SAAS,CAAC3tD,KAAK;UAC3B,IAAI,CAACyuD,iBAAiB,CAACnzB,OAAO,EAAE;YAC9BuyB,cAAc,EAAE7tD,KAAK,KAAK,IAAI,GAAGA,KAAK,GAAG;UAC3C,CAAC,CAAC;UAEF;YACE,IAAI,OAAO2rD,wBAAwB,KAAK,UAAU,EAAE;cAIlD,IAAI,CAACn5B,gBAAgB,CAAC/S,KAAK,CAACiQ,KAAK,EAAEzC,QAAQ,CAAC,EAAE;gBAC5CttB,KAAK,CACH,oEAAoE,GAClE,mFAAmF,EACrF6f,yBAAyB,CAACC,KAAK,CAAC,IAAI,SACtC,CAAC;cACH;YACF;UACF;QACF,CAAC;MACH;MAEA,OAAOqU,MAAM;IACf;IAEA,SAAS66B,uBAAuBA,CAAC5sB,WAAW,EAAEke,eAAe,EAAE;MAG7D,IAAIzuC,GAAG,GAAGuwB,WAAW,CAACvwB,GAAG;MAEzB,IACE,CAACuwB,WAAW,CAACtD,IAAI,GAAGtS,cAAc,MAAMD,MAAM,KAC7C1a,GAAG,KAAKxD,iBAAiB,IACxBwD,GAAG,KAAK7C,UAAU,IAClB6C,GAAG,KAAKzC,mBAAmB,CAAC,EAC9B;QACA,IAAI6/C,aAAa,GAAG7sB,WAAW,CAAC9vB,SAAS;QAEzC,IAAI28C,aAAa,EAAE;UACjB7sB,WAAW,CAACmF,WAAW,GAAG0nB,aAAa,CAAC1nB,WAAW;UACnDnF,WAAW,CAAChD,aAAa,GAAG6vB,aAAa,CAAC7vB,aAAa;UACvDgD,WAAW,CAACrS,KAAK,GAAGk/B,aAAa,CAACl/B,KAAK;QACzC,CAAC,MAAM;UACLqS,WAAW,CAACmF,WAAW,GAAG,IAAI;UAC9BnF,WAAW,CAAChD,aAAa,GAAG,IAAI;QAClC;MACF;IACF;IAEA,SAAS8vB,iCAAiCA,CACxCC,gBAAgB,EAChBje,WAAW,EACX9O,WAAW,EACXjX,IAAI,EACJm1B,eAAe,EACf;MAGA,IAAI,CAAC6O,gBAAgB,CAACrwB,IAAI,GAAGtS,cAAc,MAAMD,MAAM,EAAE;QAOvD,IAAI4iC,gBAAgB,KAAKje,WAAW,EAAE;UAgBpCie,gBAAgB,CAAC1sC,KAAK,IAAIrB,aAAa;QACzC,CAAC,MAAM;UACL+tC,gBAAgB,CAAC1sC,KAAK,IAAIvC,UAAU;UACpCkiB,WAAW,CAAC3f,KAAK,IAAIpB,4BAA4B;UAIjD+gB,WAAW,CAAC3f,KAAK,IAAI,EAAExB,mBAAmB,GAAGE,UAAU,CAAC;UAExD,IAAIihB,WAAW,CAACvwB,GAAG,KAAKvD,cAAc,EAAE;YACtC,IAAI8gD,kBAAkB,GAAGhtB,WAAW,CAAC9vB,SAAS;YAE9C,IAAI88C,kBAAkB,KAAK,IAAI,EAAE;cAI/BhtB,WAAW,CAACvwB,GAAG,GAAGvC,wBAAwB;YAC5C,CAAC,MAAM;cAIL,IAAI6kB,MAAM,GAAGwT,YAAY,CAACra,QAAQ,CAAC;cACnC6G,MAAM,CAACtiB,GAAG,GAAG80B,WAAW;cACxBiB,aAAa,CAACxF,WAAW,EAAEjO,MAAM,EAAE7G,QAAQ,CAAC;YAC9C;UACF;UAGA8U,WAAW,CAACrS,KAAK,GAAGiD,UAAU,CAACoP,WAAW,CAACrS,KAAK,EAAEzC,QAAQ,CAAC;QAC7D;QAEA,OAAO6hC,gBAAgB;MACzB;MAyCAA,gBAAgB,CAAC1sC,KAAK,IAAIrB,aAAa;MAGvC+tC,gBAAgB,CAACp/B,KAAK,GAAGuwB,eAAe;MACxC,OAAO6O,gBAAgB;IACzB;IAEA,SAASE,cAAcA,CACrBlkC,IAAI,EACJ+lB,WAAW,EACX9O,WAAW,EACXjmB,KAAK,EACLmkC,eAAe,EACf;MAEAle,WAAW,CAAC3f,KAAK,IAAItB,UAAU;MAE/B;QACE,IAAIsJ,iBAAiB,EAAE;UAErB6kC,sBAAsB,CAACnkC,IAAI,EAAEm1B,eAAe,CAAC;QAC/C;MACF;MAEA,IAAInkC,KAAK,KAAK,IAAI,IAAI,OAAOA,KAAK,KAAK,QAAQ,EAAE;QAC/C,IAAI,OAAOA,KAAK,CAACgqB,IAAI,KAAK,UAAU,EAAE;UAEpC,IAAIopB,QAAQ,GAAGpzC,KAAK;UACpB6yC,uBAAuB,CAAC5sB,WAAW,CAAC;UAEpC,IAAI+sB,gBAAgB,GAAGrW,kBAAkB,CAAC,CAAC;UAE3C,IAAIqW,gBAAgB,KAAK,IAAI,EAAE;YAC7B,QAAQA,gBAAgB,CAACt9C,GAAG;cAC1B,KAAK3C,iBAAiB;gBAAE;kBAWtB,IAAIkzB,WAAW,CAACtD,IAAI,GAAGtS,cAAc,EAAE;oBACrC,IAAI6rB,gBAAgB,CAAC,CAAC,KAAK,IAAI,EAAE;sBAG/BmX,+BAA+B,CAAC,CAAC;oBACnC,CAAC,MAAM;sBAaL,IAAI1hD,OAAO,GAAGqhD,gBAAgB,CAAC78C,SAAS;sBAExC,IAAIxE,OAAO,KAAK,IAAI,EAAE;wBACpB2hD,gBAAgB,CAAC,CAAC;sBACpB;oBACF;kBACF;kBAEAN,gBAAgB,CAAC1sC,KAAK,IAAI,CAACjC,iBAAiB;kBAC5C0uC,iCAAiC,CAC/BC,gBAAgB,EAChBje,WAAW,EACX9O,WAAW,EACXjX,IAAI,EACJm1B,eACF,CAAC;kBAmBD,IAAIoP,mBAAmB,GACrBH,QAAQ,KAAKlgB,2BAA2B;kBAE1C,IAAIqgB,mBAAmB,EAAE;oBACvBP,gBAAgB,CAAC1sC,KAAK,IAAI3B,aAAa;kBACzC,CAAC,MAAM;oBACL,IAAI6uC,UAAU,GAAGR,gBAAgB,CAAC5nB,WAAW;oBAE7C,IAAIooB,UAAU,KAAK,IAAI,EAAE;sBACvBR,gBAAgB,CAAC5nB,WAAW,GAAG,IAAIqF,GAAG,CAAC,CAAC2iB,QAAQ,CAAC,CAAC;oBACpD,CAAC,MAAM;sBACLI,UAAU,CAAC76B,GAAG,CAACy6B,QAAQ,CAAC;oBAC1B;oBAIA,IAAIJ,gBAAgB,CAACrwB,IAAI,GAAGtS,cAAc,EAAE;sBAC1CojC,kBAAkB,CAACzkC,IAAI,EAAEokC,QAAQ,EAAEjP,eAAe,CAAC;oBACrD;kBACF;kBAEA,OAAO,KAAK;gBACd;cAEA,KAAK5wC,kBAAkB;gBAAE;kBACvB,IAAIy/C,gBAAgB,CAACrwB,IAAI,GAAGtS,cAAc,EAAE;oBAC1C2iC,gBAAgB,CAAC1sC,KAAK,IAAIrB,aAAa;oBAEvC,IAAIyuC,oBAAoB,GACtBN,QAAQ,KAAKlgB,2BAA2B;oBAE1C,IAAIwgB,oBAAoB,EAAE;sBACxBV,gBAAgB,CAAC1sC,KAAK,IAAI3B,aAAa;oBACzC,CAAC,MAAM;sBACL,IAAIgvC,cAAc,GAAGX,gBAAgB,CAAC5nB,WAAW;sBAEjD,IAAIuoB,cAAc,KAAK,IAAI,EAAE;wBAC3B,IAAIC,iBAAiB,GAAG;0BACtBC,WAAW,EAAE,IAAI;0BACjBC,eAAe,EAAE,IAAI;0BACrBN,UAAU,EAAE,IAAI/iB,GAAG,CAAC,CAAC2iB,QAAQ,CAAC;wBAChC,CAAC;wBACDJ,gBAAgB,CAAC5nB,WAAW,GAAGwoB,iBAAiB;sBAClD,CAAC,MAAM;wBACL,IAAIG,WAAW,GAAGJ,cAAc,CAACH,UAAU;wBAE3C,IAAIO,WAAW,KAAK,IAAI,EAAE;0BACxBJ,cAAc,CAACH,UAAU,GAAG,IAAI/iB,GAAG,CAAC,CAAC2iB,QAAQ,CAAC,CAAC;wBACjD,CAAC,MAAM;0BACLW,WAAW,CAACp7B,GAAG,CAACy6B,QAAQ,CAAC;wBAC3B;sBACF;sBAEAK,kBAAkB,CAACzkC,IAAI,EAAEokC,QAAQ,EAAEjP,eAAe,CAAC;oBACrD;oBAEA,OAAO,KAAK;kBACd;gBACF;YACF;YAEA,MAAM,IAAIthD,KAAK,CACb,mCAAmC,GACjCmwD,gBAAgB,CAACt9C,GAAG,GACpB,UAAU,GACV,oBACJ,CAAC;UACH,CAAC,MAAM;YAGL,IAAIsZ,IAAI,CAACtZ,GAAG,KAAK0sB,cAAc,EAAE;cAO/BqxB,kBAAkB,CAACzkC,IAAI,EAAEokC,QAAQ,EAAEjP,eAAe,CAAC;cACnDkP,+BAA+B,CAAC,CAAC;cACjC,OAAO,KAAK;YACd,CAAC,MAAM;cAEL,IAAIW,qBAAqB,GAAG,IAAInxD,KAAK,CACnC,oEAAoE,GAClE,gEAAgE,GAChE,8CAA8C,GAC9C,uBACJ,CAAC;cACDmd,KAAK,GAAGg0C,qBAAqB;YAC/B;UACF;QACF;MACF;MAEAh0C,KAAK,GAAGsxC,0BAA0B,CAACtxC,KAAK,EAAEimB,WAAW,CAAC;MACtDguB,cAAc,CAACj0C,KAAK,CAAC;MAIrB,IAAI+0B,WAAW,KAAK,IAAI,EAAE;QAGxB,OAAO,IAAI;MACb;MAEA,IAAIxU,cAAc,GAAGwU,WAAW;MAEhC,GAAG;QACD,QAAQxU,cAAc,CAAC7qB,GAAG;UACxB,KAAKrD,QAAQ;YAAE;cACb,IAAI6hD,UAAU,GAAGl0C,KAAK;cACtBugB,cAAc,CAACja,KAAK,IAAIrB,aAAa;cACrC,IAAIgQ,IAAI,GAAGuB,iBAAiB,CAAC2tB,eAAe,CAAC;cAC7C5jB,cAAc,CAAC3M,KAAK,GAAGiD,UAAU,CAAC0J,cAAc,CAAC3M,KAAK,EAAEqB,IAAI,CAAC;cAC7D,IAAI+C,MAAM,GAAGu6B,qBAAqB,CAChChyB,cAAc,EACd2zB,UAAU,EACVj/B,IACF,CAAC;cACD8W,qBAAqB,CAACxL,cAAc,EAAEvI,MAAM,CAAC;cAC7C,OAAO,KAAK;YACd;UAEA,KAAK7lB,cAAc;YAEjB,IAAI0/C,SAAS,GAAG7xC,KAAK;YACrB,IAAIwe,IAAI,GAAG+B,cAAc,CAAC72B,IAAI;YAC9B,IAAI+D,QAAQ,GAAG8yB,cAAc,CAAC7pB,SAAS;YAEvC,IACE,CAAC6pB,cAAc,CAACja,KAAK,GAAGvC,UAAU,MAAMH,SAAS,KAChD,OAAO4a,IAAI,CAACqxB,wBAAwB,KAAK,UAAU,IACjDpiD,QAAQ,KAAK,IAAI,IAChB,OAAOA,QAAQ,CAACklD,iBAAiB,KAAK,UAAU,IAChD,CAACwB,kCAAkC,CAAC1mD,QAAQ,CAAE,CAAC,EACnD;cACA8yB,cAAc,CAACja,KAAK,IAAIrB,aAAa;cAErC,IAAImvC,KAAK,GAAG59B,iBAAiB,CAAC2tB,eAAe,CAAC;cAE9C5jB,cAAc,CAAC3M,KAAK,GAAGiD,UAAU,CAAC0J,cAAc,CAAC3M,KAAK,EAAEwgC,KAAK,CAAC;cAE9D,IAAIC,OAAO,GAAG5B,sBAAsB,CAClClyB,cAAc,EACdsxB,SAAS,EACTuC,KACF,CAAC;cAEDroB,qBAAqB,CAACxL,cAAc,EAAE8zB,OAAO,CAAC;cAC9C,OAAO,KAAK;YACd;YAEA;QACJ;QAEA9zB,cAAc,GAAGA,cAAc,CAAC9qB,MAAM;MACxC,CAAC,QAAQ8qB,cAAc,KAAK,IAAI;MAEhC,OAAO,KAAK;IACd;IAEA,IAAI+zB,mBAAmB,GAAGpxD,oBAAoB,CAAC+iB,iBAAiB;IAGhE,IAAIsuC,2BAA2B,GAAG,IAAI1xD,KAAK,CACzC,qEAAqE,GACnE,2EAA2E,GAC3E,8BACJ,CAAC;IACD,IAAI2xD,gBAAgB,GAAG,KAAK;IAC5B,IAAIC,oBAAoB;IACxB,IAAIC,kCAAkC;IACtC,IAAIC,0CAA0C;IAC9C,IAAIC,8CAA8C;IAClD,IAAIC,wBAAwB;IAC5B,IAAIC,4BAA4B;IAChC,IAAIC,uBAAuB;IAC3B,IAAIC,uBAAuB;IAC3B,IAAIC,2CAA2C;IAE/C;MACER,oBAAoB,GAAG,CAAC,CAAC;MACzBC,kCAAkC,GAAG,CAAC,CAAC;MACvCC,0CAA0C,GAAG,CAAC,CAAC;MAC/CC,8CAA8C,GAAG,CAAC,CAAC;MACnDC,wBAAwB,GAAG,CAAC,CAAC;MAC7BC,4BAA4B,GAAG,KAAK;MACpCC,uBAAuB,GAAG,CAAC,CAAC;MAC5BC,uBAAuB,GAAG,CAAC,CAAC;MAC5BC,2CAA2C,GAAG,CAAC,CAAC;IAClD;IAEA,SAASC,iBAAiBA,CACxBvjD,OAAO,EACP4uB,cAAc,EACd40B,YAAY,EACZvgC,WAAW,EACX;MACA,IAAIjjB,OAAO,KAAK,IAAI,EAAE;QAKpB4uB,cAAc,CAACrZ,KAAK,GAAG8zB,gBAAgB,CACrCza,cAAc,EACd,IAAI,EACJ40B,YAAY,EACZvgC,WACF,CAAC;MACH,CAAC,MAAM;QAML2L,cAAc,CAACrZ,KAAK,GAAG4zB,oBAAoB,CACzCva,cAAc,EACd5uB,OAAO,CAACuV,KAAK,EACbiuC,YAAY,EACZvgC,WACF,CAAC;MACH;IACF;IAEA,SAASwgC,+BAA+BA,CACtCzjD,OAAO,EACP4uB,cAAc,EACd40B,YAAY,EACZvgC,WAAW,EACX;MASA2L,cAAc,CAACrZ,KAAK,GAAG4zB,oBAAoB,CACzCva,cAAc,EACd5uB,OAAO,CAACuV,KAAK,EACb,IAAI,EACJ0N,WACF,CAAC;MAKD2L,cAAc,CAACrZ,KAAK,GAAG4zB,oBAAoB,CACzCva,cAAc,EACd,IAAI,EACJ40B,YAAY,EACZvgC,WACF,CAAC;IACH;IAEA,SAASygC,gBAAgBA,CACvB1jD,OAAO,EACP4uB,cAAc,EACdC,SAAS,EACT3W,SAAS,EACT+K,WAAW,EACX;MAIA;QACE,IAAI2L,cAAc,CAAC72B,IAAI,KAAK62B,cAAc,CAACqX,WAAW,EAAE;UAGtD,IAAI0d,cAAc,GAAG90B,SAAS,CAAC2uB,SAAS;UAExC,IAAImG,cAAc,EAAE;YAClBr2B,cAAc,CACZq2B,cAAc,EACdzrC,SAAS,EACT,MAAM,EACNjH,wBAAwB,CAAC4d,SAAS,CACpC,CAAC;UACH;QACF;MACF;MAEA,IAAIxd,MAAM,GAAGwd,SAAS,CAACxd,MAAM;MAC7B,IAAIuyB,GAAG,GAAGhV,cAAc,CAACgV,GAAG;MAE5B,IAAI4f,YAAY;MAChBI,oBAAoB,CAACh1B,cAAc,EAAE3L,WAAW,CAAC;MAEjD;QACE0/B,mBAAmB,CAAC3iD,OAAO,GAAG4uB,cAAc;QAC5C6O,cAAc,CAAC,IAAI,CAAC;QACpB+lB,YAAY,GAAG7U,eAAe,CAC5B3uC,OAAO,EACP4uB,cAAc,EACdvd,MAAM,EACN6G,SAAS,EACT0rB,GAAG,EACH3gB,WACF,CAAC;QACDwa,cAAc,CAAC,KAAK,CAAC;MACvB;MAEA,IAAIz9B,OAAO,KAAK,IAAI,IAAI,CAAC6iD,gBAAgB,EAAE;QACzCnT,YAAY,CAAC1vC,OAAO,EAAE4uB,cAAc,EAAE3L,WAAW,CAAC;QAClD,OAAO4gC,4BAA4B,CACjC7jD,OAAO,EACP4uB,cAAc,EACd3L,WACF,CAAC;MACH;MAEA2L,cAAc,CAACja,KAAK,IAAIzC,aAAa;MACrCqxC,iBAAiB,CAACvjD,OAAO,EAAE4uB,cAAc,EAAE40B,YAAY,EAAEvgC,WAAW,CAAC;MACrE,OAAO2L,cAAc,CAACrZ,KAAK;IAC7B;IAEA,SAASuuC,mBAAmBA,CAC1B9jD,OAAO,EACP4uB,cAAc,EACdC,SAAS,EACT3W,SAAS,EACT+K,WAAW,EACX;MACA,IAAIjjB,OAAO,KAAK,IAAI,EAAE;QACpB,IAAIjI,IAAI,GAAG82B,SAAS,CAAC92B,IAAI;QAEzB,IACEgsD,yBAAyB,CAAChsD,IAAI,CAAC,IAC/B82B,SAAS,CAACm1B,OAAO,KAAK,IAAI,IAC1Bn1B,SAAS,CAAC8sB,YAAY,KAAK1jD,SAAS,EACpC;UACA,IAAIgsD,YAAY,GAAGlsD,IAAI;UAEvB;YACEksD,YAAY,GAAGC,8BAA8B,CAACnsD,IAAI,CAAC;UACrD;UAIA62B,cAAc,CAAC7qB,GAAG,GAAGzC,mBAAmB;UACxCstB,cAAc,CAAC72B,IAAI,GAAGksD,YAAY;UAElC;YACEE,8BAA8B,CAACv1B,cAAc,EAAE72B,IAAI,CAAC;UACtD;UAEA,OAAOqsD,yBAAyB,CAC9BpkD,OAAO,EACP4uB,cAAc,EACdq1B,YAAY,EACZ/rC,SAAS,EACT+K,WACF,CAAC;QACH;QAEA;UACE,IAAI0gC,cAAc,GAAG5rD,IAAI,CAACylD,SAAS;UAEnC,IAAImG,cAAc,EAAE;YAGlBr2B,cAAc,CACZq2B,cAAc,EACdzrC,SAAS,EACT,MAAM,EACNjH,wBAAwB,CAAClZ,IAAI,CAC/B,CAAC;UACH;UAEA,IAAI82B,SAAS,CAAC8sB,YAAY,KAAK1jD,SAAS,EAAE;YACxC,IAAIy1B,aAAa,GAAGzc,wBAAwB,CAAClZ,IAAI,CAAC,IAAI,SAAS;YAE/D,IAAI,CAACurD,2CAA2C,CAAC51B,aAAa,CAAC,EAAE;cAC/Dx7B,KAAK,CACH,oEAAoE,GAClE,uEAAuE,EACzEw7B,aACF,CAAC;cAED41B,2CAA2C,CAAC51B,aAAa,CAAC,GAAG,IAAI;YACnE;UACF;QACF;QAEA,IAAInY,KAAK,GAAG8uC,2BAA2B,CACrCx1B,SAAS,CAAC92B,IAAI,EACd,IAAI,EACJmgB,SAAS,EACT0W,cAAc,EACdA,cAAc,CAACoC,IAAI,EACnB/N,WACF,CAAC;QACD1N,KAAK,CAACquB,GAAG,GAAGhV,cAAc,CAACgV,GAAG;QAC9BruB,KAAK,CAACzR,MAAM,GAAG8qB,cAAc;QAC7BA,cAAc,CAACrZ,KAAK,GAAGA,KAAK;QAC5B,OAAOA,KAAK;MACd;MAEA;QACE,IAAI+uC,KAAK,GAAGz1B,SAAS,CAAC92B,IAAI;QAC1B,IAAIwsD,eAAe,GAAGD,KAAK,CAAC9G,SAAS;QAErC,IAAI+G,eAAe,EAAE;UAGnBj3B,cAAc,CACZi3B,eAAe,EACfrsC,SAAS,EACT,MAAM,EACNjH,wBAAwB,CAACqzC,KAAK,CAChC,CAAC;QACH;MACF;MAEA,IAAI9a,YAAY,GAAGxpC,OAAO,CAACuV,KAAK;MAEhC,IAAIivC,2BAA2B,GAAGC,6BAA6B,CAC7DzkD,OAAO,EACPijB,WACF,CAAC;MAED,IAAI,CAACuhC,2BAA2B,EAAE;QAGhC,IAAIvsC,SAAS,GAAGuxB,YAAY,CAACzY,aAAa;QAE1C,IAAIizB,OAAO,GAAGn1B,SAAS,CAACm1B,OAAO;QAC/BA,OAAO,GAAGA,OAAO,KAAK,IAAI,GAAGA,OAAO,GAAGxnB,YAAY;QAEnD,IACEwnB,OAAO,CAAC/rC,SAAS,EAAEC,SAAS,CAAC,IAC7BlY,OAAO,CAAC4jC,GAAG,KAAKhV,cAAc,CAACgV,GAAG,EAClC;UACA,OAAOigB,4BAA4B,CACjC7jD,OAAO,EACP4uB,cAAc,EACd3L,WACF,CAAC;QACH;MACF;MAEA2L,cAAc,CAACja,KAAK,IAAIzC,aAAa;MACrC,IAAIgyB,QAAQ,GAAGkB,oBAAoB,CAACoE,YAAY,EAAEtxB,SAAS,CAAC;MAC5DgsB,QAAQ,CAACN,GAAG,GAAGhV,cAAc,CAACgV,GAAG;MACjCM,QAAQ,CAACpgC,MAAM,GAAG8qB,cAAc;MAChCA,cAAc,CAACrZ,KAAK,GAAG2uB,QAAQ;MAC/B,OAAOA,QAAQ;IACjB;IAEA,SAASkgB,yBAAyBA,CAChCpkD,OAAO,EACP4uB,cAAc,EACdC,SAAS,EACT3W,SAAS,EACT+K,WAAW,EACX;MAIA;QACE,IAAI2L,cAAc,CAAC72B,IAAI,KAAK62B,cAAc,CAACqX,WAAW,EAAE;UAGtD,IAAIye,aAAa,GAAG91B,cAAc,CAACqX,WAAW;UAE9C,IAAIye,aAAa,CAACxzC,QAAQ,KAAKtB,eAAe,EAAE;YAI9C,IAAI2B,aAAa,GAAGmzC,aAAa;YACjC,IAAIlzC,OAAO,GAAGD,aAAa,CAACE,QAAQ;YACpC,IAAIC,IAAI,GAAGH,aAAa,CAACI,KAAK;YAE9B,IAAI;cACF+yC,aAAa,GAAGhzC,IAAI,CAACF,OAAO,CAAC;YAC/B,CAAC,CAAC,OAAOI,CAAC,EAAE;cACV8yC,aAAa,GAAG,IAAI;YACtB;YAEA,IAAIC,cAAc,GAAGD,aAAa,IAAIA,aAAa,CAAClH,SAAS;YAE7D,IAAImH,cAAc,EAAE;cAClBr3B,cAAc,CACZq3B,cAAc,EACdzsC,SAAS,EACT,MAAM,EACNjH,wBAAwB,CAACyzC,aAAa,CACxC,CAAC;YACH;UACF;QACF;MACF;MAEA,IAAI1kD,OAAO,KAAK,IAAI,EAAE;QACpB,IAAIiY,SAAS,GAAGjY,OAAO,CAAC+wB,aAAa;QAErC,IACEyL,YAAY,CAACvkB,SAAS,EAAEC,SAAS,CAAC,IAClClY,OAAO,CAAC4jC,GAAG,KAAKhV,cAAc,CAACgV,GAAG,IAClChV,cAAc,CAAC72B,IAAI,KAAKiI,OAAO,CAACjI,IAAI,EACpC;UACA8qD,gBAAgB,GAAG,KAAK;UAgBxBj0B,cAAc,CAACuW,YAAY,GAAGjtB,SAAS,GAAGD,SAAS;UAEnD,IAAI,CAACwsC,6BAA6B,CAACzkD,OAAO,EAAEijB,WAAW,CAAC,EAAE;YAcxD2L,cAAc,CAAC3M,KAAK,GAAGjiB,OAAO,CAACiiB,KAAK;YACpC,OAAO4hC,4BAA4B,CACjC7jD,OAAO,EACP4uB,cAAc,EACd3L,WACF,CAAC;UACH,CAAC,MAAM,IACL,CAACjjB,OAAO,CAAC2U,KAAK,GAAGpB,4BAA4B,MAC7CtB,SAAS,EACT;YAGA4wC,gBAAgB,GAAG,IAAI;UACzB;QACF;MACF;MAEA,OAAO+B,uBAAuB,CAC5B5kD,OAAO,EACP4uB,cAAc,EACdC,SAAS,EACT3W,SAAS,EACT+K,WACF,CAAC;IACH;IAEA,SAAS4hC,wBAAwBA,CAAC7kD,OAAO,EAAE4uB,cAAc,EAAE3L,WAAW,EAAE;MACtE,IAAI/K,SAAS,GAAG0W,cAAc,CAACuW,YAAY;MAC3C,IAAIqe,YAAY,GAAGtrC,SAAS,CAACoF,QAAQ;MACrC,IAAIwnC,cAAc,GAChB,CAACl2B,cAAc,CAAC7pB,SAAS,CAACggD,kBAAkB,GAAGp0B,iBAAiB,MAAM,CAAC;MACzE,IAAI8J,SAAS,GAAGz6B,OAAO,KAAK,IAAI,GAAGA,OAAO,CAACsxB,aAAa,GAAG,IAAI;MAC/D0zB,SAAS,CAAChlD,OAAO,EAAE4uB,cAAc,CAAC;MAElC,IAAI1W,SAAS,CAAC8Y,IAAI,KAAK,QAAQ,IAAIniB,kBAAkB,IAAIi2C,cAAc,EAAE;QAEvE,IAAI/Y,UAAU,GAAG,CAACnd,cAAc,CAACja,KAAK,GAAGvC,UAAU,MAAMH,SAAS;QAElE,IAAI85B,UAAU,EAAE;UAGd,IAAIkZ,aAAa,GACfxqB,SAAS,KAAK,IAAI,GACdvV,UAAU,CAACuV,SAAS,CAACwP,SAAS,EAAEhnB,WAAW,CAAC,GAC5CA,WAAW;UAEjB,IAAIjjB,OAAO,KAAK,IAAI,EAAE;YAEpB,IAAIwpC,YAAY,GAAI5a,cAAc,CAACrZ,KAAK,GAAGvV,OAAO,CAACuV,KAAM;YAKzD,IAAI2vC,iBAAiB,GAAG7lC,OAAO;YAE/B,OAAOmqB,YAAY,KAAK,IAAI,EAAE;cAC5B0b,iBAAiB,GAAGhgC,UAAU,CAC5BA,UAAU,CAACggC,iBAAiB,EAAE1b,YAAY,CAACvnB,KAAK,CAAC,EACjDunB,YAAY,CAAChV,UACf,CAAC;cACDgV,YAAY,GAAGA,YAAY,CAACh0B,OAAO;YACrC;YAEA,IAAI2vC,oBAAoB,GAAGF,aAAa;YACxC,IAAIG,mBAAmB,GAAGjgC,WAAW,CACnC+/B,iBAAiB,EACjBC,oBACF,CAAC;YACDv2B,cAAc,CAAC4F,UAAU,GAAG4wB,mBAAmB;UACjD,CAAC,MAAM;YACLx2B,cAAc,CAAC4F,UAAU,GAAGnV,OAAO;YACnCuP,cAAc,CAACrZ,KAAK,GAAG,IAAI;UAC7B;UAEA,OAAO8vC,6BAA6B,CAClCrlD,OAAO,EACP4uB,cAAc,EACdq2B,aACF,CAAC;QACH;QAEA,IAAI,CAACr2B,cAAc,CAACoC,IAAI,GAAGtS,cAAc,MAAMD,MAAM,EAAE;UAGrD,IAAIkc,SAAS,GAAG;YACdsP,SAAS,EAAE5qB,OAAO;YAClBimC,SAAS,EAAE;UACb,CAAC;UACD12B,cAAc,CAAC0C,aAAa,GAAGqJ,SAAS;UAExCuP,yBAAyB,CAACtb,cAAc,CAAC;UACzCmc,4BAA4B,CAACnc,cAAc,CAAC;QAC9C,CAAC,MAAM,IAAI,CAAC7J,gBAAgB,CAAC9B,WAAW,EAAEvB,aAAa,CAAC,EAAE;UAIxDkN,cAAc,CAAC3M,KAAK,GAAG2M,cAAc,CAAC4F,UAAU,GAC9CnP,WAAW,CAAC3D,aAAa,CAAC;UAE5B,IAAI6jC,cAAc,GAChB9qB,SAAS,KAAK,IAAI,GACdvV,UAAU,CAACuV,SAAS,CAACwP,SAAS,EAAEhnB,WAAW,CAAC,GAC5CA,WAAW;UAEjB,OAAOoiC,6BAA6B,CAClCrlD,OAAO,EACP4uB,cAAc,EACd22B,cACF,CAAC;QACH,CAAC,MAAM;UAIL,IAAIC,UAAU,GAAG;YACfvb,SAAS,EAAE5qB,OAAO;YAClBimC,SAAS,EAAE;UACb,CAAC;UACD12B,cAAc,CAAC0C,aAAa,GAAGk0B,UAAU;UAEzC,IAAI/qB,SAAS,KAAK,IAAI,EAAE;YACtBoP,iBAAiB,CAACjb,cAAc,EAAE6L,SAAS,CAAC;UAC9C,CAAC,MAAM;YACLyP,yBAAyB,CAACtb,cAAc,CAAC;UAC3C;UAEAmc,4BAA4B,CAACnc,cAAc,CAAC;QAC9C;MACF,CAAC,MAAM;QAEL,IAAI6L,SAAS,KAAK,IAAI,EAAE;UACtBoP,iBAAiB,CAACjb,cAAc,EAAE6L,SAAS,CAAC;UAC5CqQ,2BAA2B,CAAClc,cAAc,CAAC;UAE3CA,cAAc,CAAC0C,aAAa,GAAG,IAAI;QACrC,CAAC,MAAM;UAGL4Y,yBAAyB,CAACtb,cAAc,CAAC;UACzCkc,2BAA2B,CAAClc,cAAc,CAAC;QAC7C;MACF;MAEA20B,iBAAiB,CAACvjD,OAAO,EAAE4uB,cAAc,EAAE40B,YAAY,EAAEvgC,WAAW,CAAC;MACrE,OAAO2L,cAAc,CAACrZ,KAAK;IAC7B;IAEA,SAAS8vC,6BAA6BA,CACpCrlD,OAAO,EACP4uB,cAAc,EACdq2B,aAAa,EACbhiC,WAAW,EACX;MACA,IAAI0X,SAAS,GAAG;QACdsP,SAAS,EAAEgb,aAAa;QAExBK,SAAS,EAAE;MACb,CAAC;MACD12B,cAAc,CAAC0C,aAAa,GAAGqJ,SAAS;MAGxCuP,yBAAyB,CAACtb,cAAc,CAAC;MACzCmc,4BAA4B,CAACnc,cAAc,CAAC;MAE5C,OAAO,IAAI;IACb;IAEA,SAASsX,cAAcA,CAAClmC,OAAO,EAAE4uB,cAAc,EAAE3L,WAAW,EAAE;MAC5D,IAAIugC,YAAY,GAAG50B,cAAc,CAACuW,YAAY;MAC9Coe,iBAAiB,CAACvjD,OAAO,EAAE4uB,cAAc,EAAE40B,YAAY,EAAEvgC,WAAW,CAAC;MACrE,OAAO2L,cAAc,CAACrZ,KAAK;IAC7B;IAEA,SAASkwC,UAAUA,CAACzlD,OAAO,EAAE4uB,cAAc,EAAE3L,WAAW,EAAE;MACxD,IAAIugC,YAAY,GAAG50B,cAAc,CAACuW,YAAY,CAAC7nB,QAAQ;MACvDimC,iBAAiB,CAACvjD,OAAO,EAAE4uB,cAAc,EAAE40B,YAAY,EAAEvgC,WAAW,CAAC;MACrE,OAAO2L,cAAc,CAACrZ,KAAK;IAC7B;IAEA,SAASmwC,cAAcA,CAAC1lD,OAAO,EAAE4uB,cAAc,EAAE3L,WAAW,EAAE;MAC5D;QACE2L,cAAc,CAACja,KAAK,IAAIrC,MAAM;QAE9B;UAGE,IAAIvN,SAAS,GAAG6pB,cAAc,CAAC7pB,SAAS;UACxCA,SAAS,CAACm2C,cAAc,GAAG,CAAC;UAC5Bn2C,SAAS,CAACs2C,qBAAqB,GAAG,CAAC;QACrC;MACF;MAEA,IAAInjC,SAAS,GAAG0W,cAAc,CAACuW,YAAY;MAC3C,IAAIqe,YAAY,GAAGtrC,SAAS,CAACoF,QAAQ;MACrCimC,iBAAiB,CAACvjD,OAAO,EAAE4uB,cAAc,EAAE40B,YAAY,EAAEvgC,WAAW,CAAC;MACrE,OAAO2L,cAAc,CAACrZ,KAAK;IAC7B;IAEA,SAASyvC,SAASA,CAAChlD,OAAO,EAAE4uB,cAAc,EAAE;MAC1C,IAAIgV,GAAG,GAAGhV,cAAc,CAACgV,GAAG;MAE5B,IACG5jC,OAAO,KAAK,IAAI,IAAI4jC,GAAG,KAAK,IAAI,IAChC5jC,OAAO,KAAK,IAAI,IAAIA,OAAO,CAAC4jC,GAAG,KAAKA,GAAI,EACzC;QAEAhV,cAAc,CAACja,KAAK,IAAIhC,GAAG;QAC3Bic,cAAc,CAACja,KAAK,IAAIlB,SAAS;MACnC;IACF;IAEA,SAASmxC,uBAAuBA,CAC9B5kD,OAAO,EACP4uB,cAAc,EACdC,SAAS,EACT3W,SAAS,EACT+K,WAAW,EACX;MACA;QACE,IAAI2L,cAAc,CAAC72B,IAAI,KAAK62B,cAAc,CAACqX,WAAW,EAAE;UAGtD,IAAI0d,cAAc,GAAG90B,SAAS,CAAC2uB,SAAS;UAExC,IAAImG,cAAc,EAAE;YAClBr2B,cAAc,CACZq2B,cAAc,EACdzrC,SAAS,EACT,MAAM,EACNjH,wBAAwB,CAAC4d,SAAS,CACpC,CAAC;UACH;QACF;MACF;MAEA,IAAIh7B,OAAO;MAEX;QACE,IAAIo7B,eAAe,GAAGN,kBAAkB,CACtCC,cAAc,EACdC,SAAS,EACT,IACF,CAAC;QACDh7B,OAAO,GAAGw7B,gBAAgB,CAACT,cAAc,EAAEK,eAAe,CAAC;MAC7D;MAEA,IAAIu0B,YAAY;MAChBI,oBAAoB,CAACh1B,cAAc,EAAE3L,WAAW,CAAC;MAEjD;QACE0/B,mBAAmB,CAAC3iD,OAAO,GAAG4uB,cAAc;QAC5C6O,cAAc,CAAC,IAAI,CAAC;QACpB+lB,YAAY,GAAG7U,eAAe,CAC5B3uC,OAAO,EACP4uB,cAAc,EACdC,SAAS,EACT3W,SAAS,EACTrkB,OAAO,EACPovB,WACF,CAAC;QACDwa,cAAc,CAAC,KAAK,CAAC;MACvB;MAEA,IAAIz9B,OAAO,KAAK,IAAI,IAAI,CAAC6iD,gBAAgB,EAAE;QACzCnT,YAAY,CAAC1vC,OAAO,EAAE4uB,cAAc,EAAE3L,WAAW,CAAC;QAClD,OAAO4gC,4BAA4B,CACjC7jD,OAAO,EACP4uB,cAAc,EACd3L,WACF,CAAC;MACH;MAEA2L,cAAc,CAACja,KAAK,IAAIzC,aAAa;MACrCqxC,iBAAiB,CAACvjD,OAAO,EAAE4uB,cAAc,EAAE40B,YAAY,EAAEvgC,WAAW,CAAC;MACrE,OAAO2L,cAAc,CAACrZ,KAAK;IAC7B;IAEA,SAASowC,uBAAuBA,CAC9B3lD,OAAO,EACP4uB,cAAc,EACd1W,SAAS,EACT2W,SAAS,EACT+f,SAAS,EACT3rB,WAAW,EACX;MAIA2gC,oBAAoB,CAACh1B,cAAc,EAAE3L,WAAW,CAAC;MAEjD,IAAIugC,YAAY,GAAGjU,iCAAiC,CAClDvvC,OAAO,EACP4uB,cAAc,EACdC,SAAS,EACT3W,SAAS,EACT02B,SACF,CAAC;MAED,IAAI5uC,OAAO,KAAK,IAAI,IAAI,CAAC6iD,gBAAgB,EAAE;QACzCnT,YAAY,CAAC1vC,OAAO,EAAE4uB,cAAc,EAAE3L,WAAW,CAAC;QAClD,OAAO4gC,4BAA4B,CACjC7jD,OAAO,EACP4uB,cAAc,EACd3L,WACF,CAAC;MACH;MAEA2L,cAAc,CAACja,KAAK,IAAIzC,aAAa;MACrCqxC,iBAAiB,CAACvjD,OAAO,EAAE4uB,cAAc,EAAE40B,YAAY,EAAEvgC,WAAW,CAAC;MACrE,OAAO2L,cAAc,CAACrZ,KAAK;IAC7B;IAEA,SAASqwC,oBAAoBA,CAC3B5lD,OAAO,EACP4uB,cAAc,EACdC,SAAS,EACT3W,SAAS,EACT+K,WAAW,EACX;MACA;QAEE,QAAQ4iC,WAAW,CAACj3B,cAAc,CAAC;UACjC,KAAK,KAAK;YAAE;cACV,IAAIk3B,SAAS,GAAGl3B,cAAc,CAAC7pB,SAAS;cACxC,IAAI8nB,IAAI,GAAG+B,cAAc,CAAC72B,IAAI;cAG9B,IAAIguD,YAAY,GAAG,IAAIl5B,IAAI,CACzB+B,cAAc,CAACmC,aAAa,EAC5B+0B,SAAS,CAACjyD,OACZ,CAAC;cACD,IAAIqtC,KAAK,GAAG6kB,YAAY,CAAC7kB,KAAK;cAE9B4kB,SAAS,CAAC1H,OAAO,CAACxB,eAAe,CAACkJ,SAAS,EAAE5kB,KAAK,EAAE,IAAI,CAAC;cAEzD;YACF;UAEA,KAAK,IAAI;YAAE;cACTtS,cAAc,CAACja,KAAK,IAAIvC,UAAU;cAClCwc,cAAc,CAACja,KAAK,IAAIrB,aAAa;cAErC,IAAIua,OAAO,GAAG,IAAI38B,KAAK,CAAC,sCAAsC,CAAC;cAC/D,IAAIoyB,IAAI,GAAGuB,iBAAiB,CAAC5B,WAAW,CAAC;cACzC2L,cAAc,CAAC3M,KAAK,GAAGiD,UAAU,CAAC0J,cAAc,CAAC3M,KAAK,EAAEqB,IAAI,CAAC;cAE7D,IAAI+C,MAAM,GAAGy6B,sBAAsB,CACjClyB,cAAc,EACd+wB,0BAA0B,CAAC9xB,OAAO,EAAEe,cAAc,CAAC,EACnDtL,IACF,CAAC;cACD8W,qBAAqB,CAACxL,cAAc,EAAEvI,MAAM,CAAC;cAC7C;YACF;QACF;QAEA,IAAIuI,cAAc,CAAC72B,IAAI,KAAK62B,cAAc,CAACqX,WAAW,EAAE;UAGtD,IAAI0d,cAAc,GAAG90B,SAAS,CAAC2uB,SAAS;UAExC,IAAImG,cAAc,EAAE;YAClBr2B,cAAc,CACZq2B,cAAc,EACdzrC,SAAS,EACT,MAAM,EACNjH,wBAAwB,CAAC4d,SAAS,CACpC,CAAC;UACH;QACF;MACF;MAIA,IAAIm3B,UAAU;MAEd,IAAIj3B,iBAAiB,CAACF,SAAS,CAAC,EAAE;QAChCm3B,UAAU,GAAG,IAAI;QACjB91B,mBAAmB,CAACtB,cAAc,CAAC;MACrC,CAAC,MAAM;QACLo3B,UAAU,GAAG,KAAK;MACpB;MAEApC,oBAAoB,CAACh1B,cAAc,EAAE3L,WAAW,CAAC;MACjD,IAAInnB,QAAQ,GAAG8yB,cAAc,CAAC7pB,SAAS;MACvC,IAAIoT,YAAY;MAEhB,IAAIrc,QAAQ,KAAK,IAAI,EAAE;QACrBmqD,wCAAwC,CAACjmD,OAAO,EAAE4uB,cAAc,CAAC;QAEjE0vB,sBAAsB,CAAC1vB,cAAc,EAAEC,SAAS,EAAE3W,SAAS,CAAC;QAC5D+mC,kBAAkB,CAACrwB,cAAc,EAAEC,SAAS,EAAE3W,SAAS,EAAE+K,WAAW,CAAC;QACrE9K,YAAY,GAAG,IAAI;MACrB,CAAC,MAAM,IAAInY,OAAO,KAAK,IAAI,EAAE;QAE3BmY,YAAY,GAAGgnC,wBAAwB,CACrCvwB,cAAc,EACdC,SAAS,EACT3W,SAAS,EACT+K,WACF,CAAC;MACH,CAAC,MAAM;QACL9K,YAAY,GAAGonC,mBAAmB,CAChCv/C,OAAO,EACP4uB,cAAc,EACdC,SAAS,EACT3W,SAAS,EACT+K,WACF,CAAC;MACH;MAEA,IAAIijC,cAAc,GAAGC,oBAAoB,CACvCnmD,OAAO,EACP4uB,cAAc,EACdC,SAAS,EACT1W,YAAY,EACZ6tC,UAAU,EACV/iC,WACF,CAAC;MAED;QACE,IAAInrB,IAAI,GAAG82B,cAAc,CAAC7pB,SAAS;QAEnC,IAAIoT,YAAY,IAAIrgB,IAAI,CAACkN,KAAK,KAAKkT,SAAS,EAAE;UAC5C,IAAI,CAACirC,4BAA4B,EAAE;YACjCjxD,KAAK,CACH,wEAAwE,GACtE,uDAAuD,EACzD6f,yBAAyB,CAAC6c,cAAc,CAAC,IAAI,aAC/C,CAAC;UACH;UAEAu0B,4BAA4B,GAAG,IAAI;QACrC;MACF;MAEA,OAAO+C,cAAc;IACvB;IAEA,SAASC,oBAAoBA,CAC3BnmD,OAAO,EACP4uB,cAAc,EACdC,SAAS,EACT1W,YAAY,EACZ6tC,UAAU,EACV/iC,WAAW,EACX;MAEA+hC,SAAS,CAAChlD,OAAO,EAAE4uB,cAAc,CAAC;MAClC,IAAIw3B,eAAe,GAAG,CAACx3B,cAAc,CAACja,KAAK,GAAGvC,UAAU,MAAMH,SAAS;MAEvE,IAAI,CAACkG,YAAY,IAAI,CAACiuC,eAAe,EAAE;QAErC,IAAIJ,UAAU,EAAE;UACd31B,yBAAyB,CAACzB,cAAc,EAAEC,SAAS,EAAE,KAAK,CAAC;QAC7D;QAEA,OAAOg1B,4BAA4B,CACjC7jD,OAAO,EACP4uB,cAAc,EACd3L,WACF,CAAC;MACH;MAEA,IAAInnB,QAAQ,GAAG8yB,cAAc,CAAC7pB,SAAS;MAEvC49C,mBAAmB,CAAC3iD,OAAO,GAAG4uB,cAAc;MAC5C,IAAI40B,YAAY;MAEhB,IACE4C,eAAe,IACf,OAAOv3B,SAAS,CAACqvB,wBAAwB,KAAK,UAAU,EACxD;QAMAsF,YAAY,GAAG,IAAI;QAEnB;UACE7I,0BAA0B,CAAC,CAAC;QAC9B;MACF,CAAC,MAAM;QACL;UACEld,cAAc,CAAC,IAAI,CAAC;UACpB+lB,YAAY,GAAG1nD,QAAQ,CAACuV,MAAM,CAAC,CAAC;UAEhC,IAAIud,cAAc,CAACoC,IAAI,GAAGpS,gBAAgB,EAAE;YAC1CR,0BAA0B,CAAC,IAAI,CAAC;YAEhC,IAAI;cACFtiB,QAAQ,CAACuV,MAAM,CAAC,CAAC;YACnB,CAAC,SAAS;cACR+M,0BAA0B,CAAC,KAAK,CAAC;YACnC;UACF;UAEAqf,cAAc,CAAC,KAAK,CAAC;QACvB;MACF;MAEA7O,cAAc,CAACja,KAAK,IAAIzC,aAAa;MAErC,IAAIlS,OAAO,KAAK,IAAI,IAAIomD,eAAe,EAAE;QAKvC3C,+BAA+B,CAC7BzjD,OAAO,EACP4uB,cAAc,EACd40B,YAAY,EACZvgC,WACF,CAAC;MACH,CAAC,MAAM;QACLsgC,iBAAiB,CAACvjD,OAAO,EAAE4uB,cAAc,EAAE40B,YAAY,EAAEvgC,WAAW,CAAC;MACvE;MAGA2L,cAAc,CAAC0C,aAAa,GAAGx1B,QAAQ,CAAColC,KAAK;MAE7C,IAAI8kB,UAAU,EAAE;QACd31B,yBAAyB,CAACzB,cAAc,EAAEC,SAAS,EAAE,IAAI,CAAC;MAC5D;MAEA,OAAOD,cAAc,CAACrZ,KAAK;IAC7B;IAEA,SAAS8wC,mBAAmBA,CAACz3B,cAAc,EAAE;MAC3C,IAAIvR,IAAI,GAAGuR,cAAc,CAAC7pB,SAAS;MAEnC,IAAIsY,IAAI,CAACipC,cAAc,EAAE;QACvB32B,yBAAyB,CACvBf,cAAc,EACdvR,IAAI,CAACipC,cAAc,EACnBjpC,IAAI,CAACipC,cAAc,KAAKjpC,IAAI,CAACxpB,OAC/B,CAAC;MACH,CAAC,MAAM,IAAIwpB,IAAI,CAACxpB,OAAO,EAAE;QAEvB87B,yBAAyB,CAACf,cAAc,EAAEvR,IAAI,CAACxpB,OAAO,EAAE,KAAK,CAAC;MAChE;MAEAi+B,iBAAiB,CAAClD,cAAc,EAAEvR,IAAI,CAACkpB,aAAa,CAAC;IACvD;IAEA,SAASggB,cAAcA,CAACvmD,OAAO,EAAE4uB,cAAc,EAAE3L,WAAW,EAAE;MAC5DojC,mBAAmB,CAACz3B,cAAc,CAAC;MAEnC,IAAI5uB,OAAO,KAAK,IAAI,EAAE;QACpB,MAAM,IAAI9O,KAAK,CAAC,sDAAsD,CAAC;MACzE;MAEA,IAAIgnB,SAAS,GAAG0W,cAAc,CAACuW,YAAY;MAC3C,IAAI1K,SAAS,GAAG7L,cAAc,CAAC0C,aAAa;MAC5C,IAAIk1B,YAAY,GAAG/rB,SAAS,CAACtN,OAAO;MACpCuM,gBAAgB,CAAC15B,OAAO,EAAE4uB,cAAc,CAAC;MACzCqM,kBAAkB,CAACrM,cAAc,EAAE1W,SAAS,EAAE,IAAI,EAAE+K,WAAW,CAAC;MAChE,IAAI0X,SAAS,GAAG/L,cAAc,CAAC0C,aAAa;MAI5CyJ,2CAA2C,CAAC,CAAC;MAG7C,IAAIyoB,YAAY,GAAG7oB,SAAS,CAACxN,OAAO;MAEpC;QACE,IAAIq2B,YAAY,KAAKgD,YAAY,EAAE;UACjC,OAAO3C,4BAA4B,CACjC7jD,OAAO,EACP4uB,cAAc,EACd3L,WACF,CAAC;QACH;QAEAsgC,iBAAiB,CAACvjD,OAAO,EAAE4uB,cAAc,EAAE40B,YAAY,EAAEvgC,WAAW,CAAC;MACvE;MAEA,OAAO2L,cAAc,CAACrZ,KAAK;IAC7B;IAEA,SAASkxC,qBAAqBA,CAACzmD,OAAO,EAAE4uB,cAAc,EAAE3L,WAAW,EAAE;MACnEkP,eAAe,CAACvD,cAAc,CAAC;MAC/B,IAAI1W,SAAS,GAAG0W,cAAc,CAACuW,YAAY;MAC3C,IAAIltB,SAAS,GAAGjY,OAAO,KAAK,IAAI,GAAGA,OAAO,CAAC+wB,aAAa,GAAG,IAAI;MAC/D,IAAIyyB,YAAY,GAAGtrC,SAAS,CAACoF,QAAQ;MAErC,IAAIrF,SAAS,KAAK,IAAI,IAAIoS,oBAAoB,CAAC,CAAC,EAAE;QAGhDuE,cAAc,CAACja,KAAK,IAAInC,YAAY;MACtC;MAEAwyC,SAAS,CAAChlD,OAAO,EAAE4uB,cAAc,CAAC;MAClC20B,iBAAiB,CAACvjD,OAAO,EAAE4uB,cAAc,EAAE40B,YAAY,EAAEvgC,WAAW,CAAC;MACrE,OAAO2L,cAAc,CAACrZ,KAAK;IAC7B;IAEA,SAASmxC,gBAAgBA,CAAC1mD,OAAO,EAAE4uB,cAAc,EAAE;MAGjD,OAAO,IAAI;IACb;IAEA,SAAS+3B,kBAAkBA,CACzBC,QAAQ,EACRh4B,cAAc,EACdqX,WAAW,EACXhjB,WAAW,EACX;MACAgjC,wCAAwC,CAACW,QAAQ,EAAEh4B,cAAc,CAAC;MAClE,IAAI5pB,KAAK,GAAG4pB,cAAc,CAACuW,YAAY;MACvC,IAAI5zB,aAAa,GAAG00B,WAAW;MAC/B,IAAIz0B,OAAO,GAAGD,aAAa,CAACE,QAAQ;MACpC,IAAIC,IAAI,GAAGH,aAAa,CAACI,KAAK;MAC9B,IAAIkd,SAAS,GAAGnd,IAAI,CAACF,OAAO,CAAC;MAE7Bod,cAAc,CAAC72B,IAAI,GAAG82B,SAAS;MAC/B,IAAIg4B,WAAW,GAAIj4B,cAAc,CAAC7qB,GAAG,GACnC+iD,uBAAuB,CAACj4B,SAAS,CAAE;MACrC,IAAIk4B,aAAa,GAAGtL,mBAAmB,CAAC5sB,SAAS,EAAE7pB,KAAK,CAAC;MACzD,IAAIuQ,KAAK;MAET,QAAQsxC,WAAW;QACjB,KAAKtmD,iBAAiB;UAAE;YACtB;cACE4jD,8BAA8B,CAACv1B,cAAc,EAAEC,SAAS,CAAC;cACzDD,cAAc,CAAC72B,IAAI,GAAG82B,SAAS,GAC7Bq1B,8BAA8B,CAACr1B,SAAS,CAAC;YAC7C;YAEAtZ,KAAK,GAAGqvC,uBAAuB,CAC7B,IAAI,EACJh2B,cAAc,EACdC,SAAS,EACTk4B,aAAa,EACb9jC,WACF,CAAC;YACD,OAAO1N,KAAK;UACd;QAEA,KAAK/U,cAAc;UAAE;YACnB;cACEouB,cAAc,CAAC72B,IAAI,GAAG82B,SAAS,GAC7Bm4B,2BAA2B,CAACn4B,SAAS,CAAC;YAC1C;YAEAtZ,KAAK,GAAGqwC,oBAAoB,CAC1B,IAAI,EACJh3B,cAAc,EACdC,SAAS,EACTk4B,aAAa,EACb9jC,WACF,CAAC;YACD,OAAO1N,KAAK;UACd;QAEA,KAAKrU,UAAU;UAAE;YACf;cACE0tB,cAAc,CAAC72B,IAAI,GAAG82B,SAAS,GAC7Bo4B,gCAAgC,CAACp4B,SAAS,CAAC;YAC/C;YAEAtZ,KAAK,GAAGmuC,gBAAgB,CACtB,IAAI,EACJ90B,cAAc,EACdC,SAAS,EACTk4B,aAAa,EACb9jC,WACF,CAAC;YACD,OAAO1N,KAAK;UACd;QAEA,KAAKlU,aAAa;UAAE;YAClB;cACE,IAAIutB,cAAc,CAAC72B,IAAI,KAAK62B,cAAc,CAACqX,WAAW,EAAE;gBACtD,IAAI0e,cAAc,GAAG91B,SAAS,CAAC2uB,SAAS;gBAExC,IAAImH,cAAc,EAAE;kBAClBr3B,cAAc,CACZq3B,cAAc,EACdoC,aAAa,EACb,MAAM,EACN91C,wBAAwB,CAAC4d,SAAS,CACpC,CAAC;gBACH;cACF;YACF;YAEAtZ,KAAK,GAAGuuC,mBAAmB,CACzB,IAAI,EACJl1B,cAAc,EACdC,SAAS,EACT4sB,mBAAmB,CAAC5sB,SAAS,CAAC92B,IAAI,EAAEgvD,aAAa,CAAC,EAClD9jC,WACF,CAAC;YACD,OAAO1N,KAAK;UACd;MACF;MAEA,IAAI2xC,IAAI,GAAG,EAAE;MAEb;QACE,IACEr4B,SAAS,KAAK,IAAI,IAClB,OAAOA,SAAS,KAAK,QAAQ,IAC7BA,SAAS,CAAC3d,QAAQ,KAAKtB,eAAe,EACtC;UACAs3C,IAAI,GAAG,2DAA2D;QACpE;MACF;MAIA,MAAM,IAAIh2D,KAAK,CACb,gEAAgE,GAC9D29B,SAAS,GACT,IAAI,IACH,wDAAwD,GAAGq4B,IAAI,CACpE,CAAC;IACH;IAEA,SAASC,6BAA6BA,CACpCP,QAAQ,EACRh4B,cAAc,EACdC,SAAS,EACT3W,SAAS,EACT+K,WAAW,EACX;MACAgjC,wCAAwC,CAACW,QAAQ,EAAEh4B,cAAc,CAAC;MAElEA,cAAc,CAAC7qB,GAAG,GAAGvD,cAAc;MAKnC,IAAIwlD,UAAU;MAEd,IAAIj3B,iBAAiB,CAACF,SAAS,CAAC,EAAE;QAChCm3B,UAAU,GAAG,IAAI;QACjB91B,mBAAmB,CAACtB,cAAc,CAAC;MACrC,CAAC,MAAM;QACLo3B,UAAU,GAAG,KAAK;MACpB;MAEApC,oBAAoB,CAACh1B,cAAc,EAAE3L,WAAW,CAAC;MACjDq7B,sBAAsB,CAAC1vB,cAAc,EAAEC,SAAS,EAAE3W,SAAS,CAAC;MAC5D+mC,kBAAkB,CAACrwB,cAAc,EAAEC,SAAS,EAAE3W,SAAS,EAAE+K,WAAW,CAAC;MACrE,OAAOkjC,oBAAoB,CACzB,IAAI,EACJv3B,cAAc,EACdC,SAAS,EACT,IAAI,EACJm3B,UAAU,EACV/iC,WACF,CAAC;IACH;IAEA,SAASmkC,2BAA2BA,CAClCR,QAAQ,EACRh4B,cAAc,EACdC,SAAS,EACT5L,WAAW,EACX;MACAgjC,wCAAwC,CAACW,QAAQ,EAAEh4B,cAAc,CAAC;MAClE,IAAI5pB,KAAK,GAAG4pB,cAAc,CAACuW,YAAY;MACvC,IAAItxC,OAAO;MAEX;QACE,IAAIo7B,eAAe,GAAGN,kBAAkB,CACtCC,cAAc,EACdC,SAAS,EACT,KACF,CAAC;QACDh7B,OAAO,GAAGw7B,gBAAgB,CAACT,cAAc,EAAEK,eAAe,CAAC;MAC7D;MAEA20B,oBAAoB,CAACh1B,cAAc,EAAE3L,WAAW,CAAC;MACjD,IAAI5U,KAAK;MAET;QACE,IACEwgB,SAAS,CAAC77B,SAAS,IACnB,OAAO67B,SAAS,CAAC77B,SAAS,CAACqe,MAAM,KAAK,UAAU,EAChD;UACA,IAAIqc,aAAa,GAAGzc,wBAAwB,CAAC4d,SAAS,CAAC,IAAI,SAAS;UAEpE,IAAI,CAACi0B,oBAAoB,CAACp1B,aAAa,CAAC,EAAE;YACxCx7B,KAAK,CACH,4FAA4F,GAC1F,8EAA8E,EAChFw7B,aAAa,EACbA,aACF,CAAC;YAEDo1B,oBAAoB,CAACp1B,aAAa,CAAC,GAAG,IAAI;UAC5C;QACF;QAEA,IAAIkB,cAAc,CAACoC,IAAI,GAAGpS,gBAAgB,EAAE;UAC1C+e,uBAAuB,CAACG,0BAA0B,CAChDlP,cAAc,EACd,IACF,CAAC;QACH;QAEA6O,cAAc,CAAC,IAAI,CAAC;QACpBklB,mBAAmB,CAAC3iD,OAAO,GAAG4uB,cAAc;QAC5CvgB,KAAK,GAAGsgC,eAAe,CACrB,IAAI,EACJ/f,cAAc,EACdC,SAAS,EACT7pB,KAAK,EACLnR,OAAO,EACPovB,WACF,CAAC;QACDwa,cAAc,CAAC,KAAK,CAAC;MACvB;MAEA7O,cAAc,CAACja,KAAK,IAAIzC,aAAa;MAErC;QAGE,IACE,OAAO7D,KAAK,KAAK,QAAQ,IACzBA,KAAK,KAAK,IAAI,IACd,OAAOA,KAAK,CAACgD,MAAM,KAAK,UAAU,IAClChD,KAAK,CAAC6C,QAAQ,KAAKjZ,SAAS,EAC5B;UACA,IAAI4mD,cAAc,GAAG5tC,wBAAwB,CAAC4d,SAAS,CAAC,IAAI,SAAS;UAErE,IAAI,CAACk0B,kCAAkC,CAAClE,cAAc,CAAC,EAAE;YACvD3sD,KAAK,CACH,yFAAyF,GACvF,6DAA6D,GAC7D,wFAAwF,GACxF,mFAAmF,GACnF,uCAAuC,EACzC2sD,cAAc,EACdA,cAAc,EACdA,cACF,CAAC;YAEDkE,kCAAkC,CAAClE,cAAc,CAAC,GAAG,IAAI;UAC3D;QACF;MACF;MAEA,IAGE,OAAOxwC,KAAK,KAAK,QAAQ,IACzBA,KAAK,KAAK,IAAI,IACd,OAAOA,KAAK,CAACgD,MAAM,KAAK,UAAU,IAClChD,KAAK,CAAC6C,QAAQ,KAAKjZ,SAAS,EAC5B;QACA;UACE,IAAIovD,eAAe,GACjBp2C,wBAAwB,CAAC4d,SAAS,CAAC,IAAI,SAAS;UAElD,IAAI,CAACk0B,kCAAkC,CAACsE,eAAe,CAAC,EAAE;YACxDn1D,KAAK,CACH,yFAAyF,GACvF,6DAA6D,GAC7D,wFAAwF,GACxF,mFAAmF,GACnF,uCAAuC,EACzCm1D,eAAe,EACfA,eAAe,EACfA,eACF,CAAC;YAEDtE,kCAAkC,CAACsE,eAAe,CAAC,GAAG,IAAI;UAC5D;QACF;QAEAz4B,cAAc,CAAC7qB,GAAG,GAAGvD,cAAc;QAEnCouB,cAAc,CAAC0C,aAAa,GAAG,IAAI;QACnC1C,cAAc,CAAC6K,WAAW,GAAG,IAAI;QAIjC,IAAIusB,UAAU,GAAG,KAAK;QAEtB,IAAIj3B,iBAAiB,CAACF,SAAS,CAAC,EAAE;UAChCm3B,UAAU,GAAG,IAAI;UACjB91B,mBAAmB,CAACtB,cAAc,CAAC;QACrC,CAAC,MAAM;UACLo3B,UAAU,GAAG,KAAK;QACpB;QAEAp3B,cAAc,CAAC0C,aAAa,GAC1BjjB,KAAK,CAAC6yB,KAAK,KAAK,IAAI,IAAI7yB,KAAK,CAAC6yB,KAAK,KAAKjpC,SAAS,GAC7CoW,KAAK,CAAC6yB,KAAK,GACX,IAAI;QACVhI,qBAAqB,CAACtK,cAAc,CAAC;QACrCuvB,kBAAkB,CAACvvB,cAAc,EAAEvgB,KAAK,CAAC;QACzC4wC,kBAAkB,CAACrwB,cAAc,EAAEC,SAAS,EAAE7pB,KAAK,EAAEie,WAAW,CAAC;QACjE,OAAOkjC,oBAAoB,CACzB,IAAI,EACJv3B,cAAc,EACdC,SAAS,EACT,IAAI,EACJm3B,UAAU,EACV/iC,WACF,CAAC;MACH,CAAC,MAAM;QAEL2L,cAAc,CAAC7qB,GAAG,GAAGxD,iBAAiB;QAEtCgjD,iBAAiB,CAAC,IAAI,EAAE30B,cAAc,EAAEvgB,KAAK,EAAE4U,WAAW,CAAC;QAE3D;UACEkhC,8BAA8B,CAACv1B,cAAc,EAAEC,SAAS,CAAC;QAC3D;QAEA,OAAOD,cAAc,CAACrZ,KAAK;MAC7B;IACF;IAEA,SAAS4uC,8BAA8BA,CAACv1B,cAAc,EAAEC,SAAS,EAAE;MACjE;QACE,IAAIA,SAAS,EAAE;UACb,IAAIA,SAAS,CAACW,iBAAiB,EAAE;YAC/Bt9B,KAAK,CACH,uEAAuE,EACvE28B,SAAS,CAAChe,WAAW,IAAIge,SAAS,CAACl7B,IAAI,IAAI,WAC7C,CAAC;UACH;QACF;QAEA,IAAIi7B,cAAc,CAACgV,GAAG,KAAK,IAAI,EAAE;UAC/B,IAAI5nB,IAAI,GAAG,EAAE;UACb,IAAI0R,aAAa,GAAGzc,wBAAwB,CAAC4d,SAAS,CAAC,IAAI,SAAS;UACpE,IAAItC,SAAS,GAAG4Q,mCAAmC,CAAC,CAAC;UAErD,IAAI5Q,SAAS,EAAE;YACbvQ,IAAI,IAAI,kCAAkC,GAAGuQ,SAAS,GAAG,IAAI;UAC/D;UAEA,IAAI+6B,UAAU,GAAG55B,aAAa,GAAG,GAAG,IAAInB,SAAS,IAAI,EAAE,CAAC;UAExD,IAAI,CAAC22B,wBAAwB,CAACoE,UAAU,CAAC,EAAE;YACzCpE,wBAAwB,CAACoE,UAAU,CAAC,GAAG,IAAI;YAE3Cp1D,KAAK,CACH,4CAA4C,GAC1C,yCAAyC,GACzC,2CAA2C,EAC7C8pB,IACF,CAAC;UACH;QACF;QAEA,IAAI6S,SAAS,CAAC8sB,YAAY,KAAK1jD,SAAS,EAAE;UACxC,IAAIsvD,eAAe,GACjBt2C,wBAAwB,CAAC4d,SAAS,CAAC,IAAI,SAAS;UAElD,IAAI,CAACy0B,2CAA2C,CAACiE,eAAe,CAAC,EAAE;YACjEr1D,KAAK,CACH,wEAAwE,GACtE,uEAAuE,EACzEq1D,eACF,CAAC;YAEDjE,2CAA2C,CAACiE,eAAe,CAAC,GAAG,IAAI;UACrE;QACF;QAEA,IAAI,OAAO14B,SAAS,CAAC6tB,wBAAwB,KAAK,UAAU,EAAE;UAC5D,IAAI8K,eAAe,GACjBv2C,wBAAwB,CAAC4d,SAAS,CAAC,IAAI,SAAS;UAElD,IACE,CAACo0B,8CAA8C,CAACuE,eAAe,CAAC,EAChE;YACAt1D,KAAK,CACH,kEAAkE,EAClEs1D,eACF,CAAC;YAEDvE,8CAA8C,CAACuE,eAAe,CAAC,GAC7D,IAAI;UACR;QACF;QAEA,IACE,OAAO34B,SAAS,CAAC4uB,WAAW,KAAK,QAAQ,IACzC5uB,SAAS,CAAC4uB,WAAW,KAAK,IAAI,EAC9B;UACA,IAAIgK,eAAe,GACjBx2C,wBAAwB,CAAC4d,SAAS,CAAC,IAAI,SAAS;UAElD,IAAI,CAACm0B,0CAA0C,CAACyE,eAAe,CAAC,EAAE;YAChEv1D,KAAK,CACH,qDAAqD,EACrDu1D,eACF,CAAC;YAEDzE,0CAA0C,CAACyE,eAAe,CAAC,GAAG,IAAI;UACpE;QACF;MACF;IACF;IAEA,IAAIC,gBAAgB,GAAG;MACrB7b,UAAU,EAAE,IAAI;MAChB8b,WAAW,EAAE,IAAI;MACjBC,SAAS,EAAEtoC;IACb,CAAC;IAED,SAASuoC,2BAA2BA,CAAC5kC,WAAW,EAAE;MAChD,OAAO;QACLgnB,SAAS,EAAEhnB,WAAW;QACtBqiC,SAAS,EAAEwC,iBAAiB,CAAC;MAC/B,CAAC;IACH;IAEA,SAASC,4BAA4BA,CAACC,kBAAkB,EAAE/kC,WAAW,EAAE;MACrE,IAAIqiC,SAAS,GAAG,IAAI;MAEpB,OAAO;QACLrb,SAAS,EAAE/kB,UAAU,CAAC8iC,kBAAkB,CAAC/d,SAAS,EAAEhnB,WAAW,CAAC;QAChEqiC,SAAS,EAAEA;MACb,CAAC;IACH;IAEA,SAAS2C,sBAAsBA,CAACjoD,OAAO,EAAE4uB,cAAc,EAAE3L,WAAW,EAAE;MAMpE,IAAIjjB,OAAO,KAAK,IAAI,EAAE;QACpB,IAAIkoD,aAAa,GAAGloD,OAAO,CAACsxB,aAAa;QAEzC,IAAI42B,aAAa,KAAK,IAAI,EAAE;UAK1B,OAAO,KAAK;QACd;MACF;MAEA,IAAIC,eAAe,GAAGvd,mBAAmB,CAAC5qC,OAAO;MACjD,OAAOsrC,sBAAsB,CAAC6c,eAAe,EAAE9c,qBAAqB,CAAC;IACvE;IAEA,SAAS+c,6BAA6BA,CACpCpoD,OAAO,EACPqoD,mBAAmB,EACnBplC,WAAW,EACX;MACA,IAAI+C,cAAc,GAChBhmB,OAAO,KAAK,IAAI,GACZmlB,WAAW,CAACnlB,OAAO,CAACw0B,UAAU,EAAEvR,WAAW,CAAC,GAC5C5D,OAAO;MAEb,IAAIgpC,mBAAmB,EAAE;QAMvBriC,cAAc,GAAGd,UAAU,CAACc,cAAc,EAAEsiC,gBAAgB,CAAC,CAAC,CAAC;MACjE;MAEA,OAAOtiC,cAAc;IACvB;IAEA,SAASuiC,uBAAuBA,CAACvoD,OAAO,EAAE4uB,cAAc,EAAE3L,WAAW,EAAE;MACrE,IAAI/K,SAAS,GAAG0W,cAAc,CAACuW,YAAY;MAE3C;QACE,IAAIqjB,aAAa,CAAC55B,cAAc,CAAC,EAAE;UACjCA,cAAc,CAACja,KAAK,IAAIvC,UAAU;QACpC;MACF;MAEA,IAAIq2C,YAAY,GAAG,KAAK;MACxB,IAAI1c,UAAU,GAAG,CAACnd,cAAc,CAACja,KAAK,GAAGvC,UAAU,MAAMH,SAAS;MAElE,IAAI85B,UAAU,IAAIkc,sBAAsB,CAACjoD,OAAO,CAAC,EAAE;QAGjDyoD,YAAY,GAAG,IAAI;QACnB75B,cAAc,CAACja,KAAK,IAAI,CAACvC,UAAU;MACrC;MAGA,IAAIs2C,uBAAuB,GACzB,CAAC95B,cAAc,CAACja,KAAK,GAAGzB,QAAQ,MAAMjB,SAAS;MACjD2c,cAAc,CAACja,KAAK,IAAI,CAACzB,QAAQ;MAuBjC,IAAIlT,OAAO,KAAK,IAAI,EAAE;QACpB,IAAI2oD,mBAAmB,GAAGzwC,SAAS,CAACoF,QAAQ;QAC5C,IAAIsrC,oBAAoB,GAAG1wC,SAAS,CAAC2wC,QAAQ;QAE7C,IAAIJ,YAAY,EAAE;UAChB5d,+BAA+B,CAACjc,cAAc,CAAC;UAC/C,IAAIk6B,gBAAgB,GAAGC,6BAA6B,CAClDn6B,cAAc,EACd+5B,mBAAmB,EACnBC,oBAAoB,EACpB3lC,WACF,CAAC;UACD,IAAI+lC,oBAAoB,GAAGp6B,cAAc,CAACrZ,KAAK;UAC/CyzC,oBAAoB,CAAC13B,aAAa,GAChCu2B,2BAA2B,CAAC5kC,WAAW,CAAC;UAC1C+lC,oBAAoB,CAACx0B,UAAU,GAAG4zB,6BAA6B,CAC7DpoD,OAAO,EACP0oD,uBAAuB,EACvBzlC,WACF,CAAC;UACD2L,cAAc,CAAC0C,aAAa,GAAGo2B,gBAAgB;UAE/C,OAAOoB,gBAAgB;QACzB,CAAC,MAAM;UACLte,8BAA8B,CAAC5b,cAAc,CAAC;UAC9C,OAAOq6B,4BAA4B,CACjCr6B,cAAc,EACd+5B,mBACF,CAAC;QACH;MACF,CAAC,MAAM;QAGL,IAAIluB,SAAS,GAAGz6B,OAAO,CAACsxB,aAAa;QAErC,IAAImJ,SAAS,KAAK,IAAI,EAAE;UACtB,IAAIyuB,WAAW,GAAGzuB,SAAS,CAACoR,UAAU;UAEtC,IAAIqd,WAAW,KAAK,IAAI,EAAE;YACxB,OAAOC,iCAAiC,CACtCnpD,OAAO,EACP4uB,cAAc,EACdmd,UAAU,EACV2c,uBAAuB,EACvBxwC,SAAS,EACTgxC,WAAW,EACXzuB,SAAS,EACTxX,WACF,CAAC;UACH;QACF;QAEA,IAAIwlC,YAAY,EAAE;UAChB5d,+BAA+B,CAACjc,cAAc,CAAC;UAC/C,IAAIw6B,qBAAqB,GAAGlxC,SAAS,CAAC2wC,QAAQ;UAC9C,IAAIQ,oBAAoB,GAAGnxC,SAAS,CAACoF,QAAQ;UAC7C,IAAIgsC,qBAAqB,GAAGC,8BAA8B,CACxDvpD,OAAO,EACP4uB,cAAc,EACdy6B,oBAAoB,EACpBD,qBAAqB,EACrBnmC,WACF,CAAC;UACD,IAAIumC,sBAAsB,GAAG56B,cAAc,CAACrZ,KAAK;UACjD,IAAIyyC,kBAAkB,GAAGhoD,OAAO,CAACuV,KAAK,CAAC+b,aAAa;UACpDk4B,sBAAsB,CAACl4B,aAAa,GAClC02B,kBAAkB,KAAK,IAAI,GACvBH,2BAA2B,CAAC5kC,WAAW,CAAC,GACxC8kC,4BAA4B,CAACC,kBAAkB,EAAE/kC,WAAW,CAAC;UAEnEumC,sBAAsB,CAACh1B,UAAU,GAAG4zB,6BAA6B,CAC/DpoD,OAAO,EACP0oD,uBAAuB,EACvBzlC,WACF,CAAC;UACD2L,cAAc,CAAC0C,aAAa,GAAGo2B,gBAAgB;UAC/C,OAAO4B,qBAAqB;QAC9B,CAAC,MAAM;UACL9e,8BAA8B,CAAC5b,cAAc,CAAC;UAC9C,IAAI66B,qBAAqB,GAAGvxC,SAAS,CAACoF,QAAQ;UAE9C,IAAIosC,sBAAsB,GAAGC,6BAA6B,CACxD3pD,OAAO,EACP4uB,cAAc,EACd66B,qBAAqB,EACrBxmC,WACF,CAAC;UAED2L,cAAc,CAAC0C,aAAa,GAAG,IAAI;UACnC,OAAOo4B,sBAAsB;QAC/B;MACF;IACF;IAEA,SAAST,4BAA4BA,CACnCr6B,cAAc,EACdg7B,eAAe,EACf3mC,WAAW,EACX;MACA,IAAI+N,IAAI,GAAGpC,cAAc,CAACoC,IAAI;MAC9B,IAAI64B,iBAAiB,GAAG;QACtB74B,IAAI,EAAE,SAAS;QACf1T,QAAQ,EAAEssC;MACZ,CAAC;MACD,IAAIZ,oBAAoB,GAAGc,iCAAiC,CAC1DD,iBAAiB,EACjB74B,IACF,CAAC;MACDg4B,oBAAoB,CAACllD,MAAM,GAAG8qB,cAAc;MAC5CA,cAAc,CAACrZ,KAAK,GAAGyzC,oBAAoB;MAC3C,OAAOA,oBAAoB;IAC7B;IAEA,SAASD,6BAA6BA,CACpCn6B,cAAc,EACdg7B,eAAe,EACfG,gBAAgB,EAChB9mC,WAAW,EACX;MACA,IAAI+N,IAAI,GAAGpC,cAAc,CAACoC,IAAI;MAC9B,IAAIg5B,yBAAyB,GAAGp7B,cAAc,CAACrZ,KAAK;MACpD,IAAIs0C,iBAAiB,GAAG;QACtB74B,IAAI,EAAE,QAAQ;QACd1T,QAAQ,EAAEssC;MACZ,CAAC;MACD,IAAIZ,oBAAoB;MACxB,IAAIM,qBAAqB;MAEzB,IACE,CAACt4B,IAAI,GAAGtS,cAAc,MAAMD,MAAM,IAClCurC,yBAAyB,KAAK,IAAI,EAClC;QAGAhB,oBAAoB,GAAGgB,yBAAyB;QAChDhB,oBAAoB,CAACx0B,UAAU,GAAGnV,OAAO;QACzC2pC,oBAAoB,CAAC7jB,YAAY,GAAG0kB,iBAAiB;QAErD,IAAIj7B,cAAc,CAACoC,IAAI,GAAGrS,WAAW,EAAE;UAKrCqqC,oBAAoB,CAACjO,cAAc,GAAG,CAAC;UACvCiO,oBAAoB,CAACtO,eAAe,GAAG,CAAC,CAAC;UACzCsO,oBAAoB,CAAChO,gBAAgB,GAAG,CAAC;UACzCgO,oBAAoB,CAACiB,gBAAgB,GAAG,CAAC;QAC3C;QAEAX,qBAAqB,GAAG3iB,uBAAuB,CAC7CojB,gBAAgB,EAChB/4B,IAAI,EACJ/N,WAAW,EACX,IACF,CAAC;MACH,CAAC,MAAM;QACL+lC,oBAAoB,GAAGc,iCAAiC,CACtDD,iBAAiB,EACjB74B,IACF,CAAC;QACDs4B,qBAAqB,GAAG3iB,uBAAuB,CAC7CojB,gBAAgB,EAChB/4B,IAAI,EACJ/N,WAAW,EACX,IACF,CAAC;MACH;MAEA+lC,oBAAoB,CAACllD,MAAM,GAAG8qB,cAAc;MAC5C06B,qBAAqB,CAACxlD,MAAM,GAAG8qB,cAAc;MAC7Co6B,oBAAoB,CAACxzC,OAAO,GAAG8zC,qBAAqB;MACpD16B,cAAc,CAACrZ,KAAK,GAAGyzC,oBAAoB;MAC3C,OAAOM,qBAAqB;IAC9B;IAEA,SAASQ,iCAAiCA,CACxCI,cAAc,EACdl5B,IAAI,EACJ/N,WAAW,EACX;MAGA,OAAOknC,wBAAwB,CAACD,cAAc,EAAEl5B,IAAI,EAAE3R,OAAO,EAAE,IAAI,CAAC;IACtE;IAEA,SAAS+qC,kCAAkCA,CAACpqD,OAAO,EAAEkqD,cAAc,EAAE;MAGnE,OAAO9kB,oBAAoB,CAACplC,OAAO,EAAEkqD,cAAc,CAAC;IACtD;IAEA,SAASP,6BAA6BA,CACpC3pD,OAAO,EACP4uB,cAAc,EACdg7B,eAAe,EACf3mC,WAAW,EACX;MACA,IAAIonC,2BAA2B,GAAGrqD,OAAO,CAACuV,KAAK;MAC/C,IAAI+0C,4BAA4B,GAAGD,2BAA2B,CAAC70C,OAAO;MACtE,IAAIwzC,oBAAoB,GAAGoB,kCAAkC,CAC3DC,2BAA2B,EAC3B;QACEr5B,IAAI,EAAE,SAAS;QACf1T,QAAQ,EAAEssC;MACZ,CACF,CAAC;MAED,IAAI,CAACh7B,cAAc,CAACoC,IAAI,GAAGtS,cAAc,MAAMD,MAAM,EAAE;QACrDuqC,oBAAoB,CAAC/mC,KAAK,GAAGgB,WAAW;MAC1C;MAEA+lC,oBAAoB,CAACllD,MAAM,GAAG8qB,cAAc;MAC5Co6B,oBAAoB,CAACxzC,OAAO,GAAG,IAAI;MAEnC,IAAI80C,4BAA4B,KAAK,IAAI,EAAE;QAEzC,IAAI1lB,SAAS,GAAGhW,cAAc,CAACgW,SAAS;QAExC,IAAIA,SAAS,KAAK,IAAI,EAAE;UACtBhW,cAAc,CAACgW,SAAS,GAAG,CAAC0lB,4BAA4B,CAAC;UACzD17B,cAAc,CAACja,KAAK,IAAIpC,aAAa;QACvC,CAAC,MAAM;UACLqyB,SAAS,CAAC3oC,IAAI,CAACquD,4BAA4B,CAAC;QAC9C;MACF;MAEA17B,cAAc,CAACrZ,KAAK,GAAGyzC,oBAAoB;MAC3C,OAAOA,oBAAoB;IAC7B;IAEA,SAASO,8BAA8BA,CACrCvpD,OAAO,EACP4uB,cAAc,EACdg7B,eAAe,EACfG,gBAAgB,EAChB9mC,WAAW,EACX;MACA,IAAI+N,IAAI,GAAGpC,cAAc,CAACoC,IAAI;MAC9B,IAAIq5B,2BAA2B,GAAGrqD,OAAO,CAACuV,KAAK;MAC/C,IAAI+0C,4BAA4B,GAAGD,2BAA2B,CAAC70C,OAAO;MACtE,IAAIq0C,iBAAiB,GAAG;QACtB74B,IAAI,EAAE,QAAQ;QACd1T,QAAQ,EAAEssC;MACZ,CAAC;MACD,IAAIZ,oBAAoB;MAExB,IAGE,CAACh4B,IAAI,GAAGtS,cAAc,MAAMD,MAAM,IAMlCmQ,cAAc,CAACrZ,KAAK,KAAK80C,2BAA2B,EACpD;QACA,IAAIL,yBAAyB,GAAGp7B,cAAc,CAACrZ,KAAK;QACpDyzC,oBAAoB,GAAGgB,yBAAyB;QAChDhB,oBAAoB,CAACx0B,UAAU,GAAGnV,OAAO;QACzC2pC,oBAAoB,CAAC7jB,YAAY,GAAG0kB,iBAAiB;QAErD,IAAIj7B,cAAc,CAACoC,IAAI,GAAGrS,WAAW,EAAE;UAKrCqqC,oBAAoB,CAACjO,cAAc,GAAG,CAAC;UACvCiO,oBAAoB,CAACtO,eAAe,GAAG,CAAC,CAAC;UACzCsO,oBAAoB,CAAChO,gBAAgB,GACnCqP,2BAA2B,CAACrP,gBAAgB;UAC9CgO,oBAAoB,CAACiB,gBAAgB,GACnCI,2BAA2B,CAACJ,gBAAgB;QAChD;QAIAr7B,cAAc,CAACgW,SAAS,GAAG,IAAI;MACjC,CAAC,MAAM;QACLokB,oBAAoB,GAAGoB,kCAAkC,CACvDC,2BAA2B,EAC3BR,iBACF,CAAC;QAIDb,oBAAoB,CAACuB,YAAY,GAC/BF,2BAA2B,CAACE,YAAY,GAAGn2C,UAAU;MACzD;MAEA,IAAIk1C,qBAAqB;MAEzB,IAAIgB,4BAA4B,KAAK,IAAI,EAAE;QACzChB,qBAAqB,GAAGlkB,oBAAoB,CAC1CklB,4BAA4B,EAC5BP,gBACF,CAAC;MACH,CAAC,MAAM;QACLT,qBAAqB,GAAG3iB,uBAAuB,CAC7CojB,gBAAgB,EAChB/4B,IAAI,EACJ/N,WAAW,EACX,IACF,CAAC;QAGDqmC,qBAAqB,CAAC30C,KAAK,IAAIxC,SAAS;MAC1C;MAEAm3C,qBAAqB,CAACxlD,MAAM,GAAG8qB,cAAc;MAC7Co6B,oBAAoB,CAACllD,MAAM,GAAG8qB,cAAc;MAC5Co6B,oBAAoB,CAACxzC,OAAO,GAAG8zC,qBAAqB;MACpD16B,cAAc,CAACrZ,KAAK,GAAGyzC,oBAAoB;MAC3C,OAAOM,qBAAqB;IAC9B;IAEA,SAASkB,sCAAsCA,CAC7CxqD,OAAO,EACP4uB,cAAc,EACd3L,WAAW,EACXwnC,gBAAgB,EAChB;MAQA,IAAIA,gBAAgB,KAAK,IAAI,EAAE;QAC7Bx3B,mBAAmB,CAACw3B,gBAAgB,CAAC;MACvC;MAEAthB,oBAAoB,CAACva,cAAc,EAAE5uB,OAAO,CAACuV,KAAK,EAAE,IAAI,EAAE0N,WAAW,CAAC;MAEtE,IAAI/K,SAAS,GAAG0W,cAAc,CAACuW,YAAY;MAC3C,IAAIykB,eAAe,GAAG1xC,SAAS,CAACoF,QAAQ;MACxC,IAAI0rC,oBAAoB,GAAGC,4BAA4B,CACrDr6B,cAAc,EACdg7B,eACF,CAAC;MAGDZ,oBAAoB,CAACr0C,KAAK,IAAIxC,SAAS;MACvCyc,cAAc,CAAC0C,aAAa,GAAG,IAAI;MACnC,OAAO03B,oBAAoB;IAC7B;IAEA,SAAS0B,+CAA+CA,CACtD1qD,OAAO,EACP4uB,cAAc,EACdg7B,eAAe,EACfG,gBAAgB,EAChB9mC,WAAW,EACX;MACA,IAAI0nC,SAAS,GAAG/7B,cAAc,CAACoC,IAAI;MACnC,IAAI64B,iBAAiB,GAAG;QACtB74B,IAAI,EAAE,SAAS;QACf1T,QAAQ,EAAEssC;MACZ,CAAC;MACD,IAAIZ,oBAAoB,GAAGc,iCAAiC,CAC1DD,iBAAiB,EACjBc,SACF,CAAC;MACD,IAAIrB,qBAAqB,GAAG3iB,uBAAuB,CACjDojB,gBAAgB,EAChBY,SAAS,EACT1nC,WAAW,EACX,IACF,CAAC;MAGDqmC,qBAAqB,CAAC30C,KAAK,IAAIxC,SAAS;MACxC62C,oBAAoB,CAACllD,MAAM,GAAG8qB,cAAc;MAC5C06B,qBAAqB,CAACxlD,MAAM,GAAG8qB,cAAc;MAC7Co6B,oBAAoB,CAACxzC,OAAO,GAAG8zC,qBAAqB;MACpD16B,cAAc,CAACrZ,KAAK,GAAGyzC,oBAAoB;MAE3C,IAAI,CAACp6B,cAAc,CAACoC,IAAI,GAAGtS,cAAc,MAAMD,MAAM,EAAE;QAGrD0qB,oBAAoB,CAACva,cAAc,EAAE5uB,OAAO,CAACuV,KAAK,EAAE,IAAI,EAAE0N,WAAW,CAAC;MACxE;MAEA,OAAOqmC,qBAAqB;IAC9B;IAEA,SAASH,iCAAiCA,CACxCnpD,OAAO,EACP4uB,cAAc,EACdmd,UAAU,EACV2c,uBAAuB,EACvBxwC,SAAS,EACT0yC,gBAAgB,EAChB1C,aAAa,EACbjlC,WAAW,EACX;MACA,IAAI,CAAC8oB,UAAU,EAAE;QAEfvB,8BAA8B,CAAC5b,cAAc,CAAC;QAE9C,IAAI,CAACA,cAAc,CAACoC,IAAI,GAAGtS,cAAc,MAAMD,MAAM,EAAE;UACrD,OAAO+rC,sCAAsC,CAC3CxqD,OAAO,EACP4uB,cAAc,EACd3L,WAAW,EACX,IACF,CAAC;QACH;QAEA,IAAIgF,0BAA0B,CAAC,CAAC,EAAE;UAIhC,IAAI43B,MAAM;UACV,IAAI9xB,OAAO,EAAEx7B,KAAK;UAElB;YACE,IAAIs4D,qBAAqB,GACvB3iC,uCAAuC,CAAC,CAAC;YAE3C23B,MAAM,GAAGgL,qBAAqB,CAAChL,MAAM;YACrC9xB,OAAO,GAAG88B,qBAAqB,CAAC98B,OAAO;YACvCx7B,KAAK,GAAGs4D,qBAAqB,CAACt4D,KAAK;UACrC;UAEA,IAAIu4D,aAAa,GAAG,IAAI;UAExB;YACE,IAAI54D,KAAK;YAET,IAAI67B,OAAO,EAAE;cAEX77B,KAAK,GAAG,IAAIhB,KAAK,CAAC68B,OAAO,CAAC;YAC5B,CAAC,MAAM;cACL77B,KAAK,GAAG,IAAIhB,KAAK,CACf,6DAA6D,GAC3D,uDAAuD,GACvD,mBACJ,CAAC;YACH;YAEAgB,KAAK,CAAC2tD,MAAM,GAAGA,MAAM;YACrBiL,aAAa,GAAGhL,mBAAmB,CAAC5tD,KAAK,EAAE2tD,MAAM,EAAEttD,KAAK,CAAC;UAC3D;UAEA,OAAOi4D,sCAAsC,CAC3CxqD,OAAO,EACP4uB,cAAc,EACd3L,WAAW,EACX6nC,aACF,CAAC;QACH;QAGA,IAAIv7B,iBAAiB,GAAGxK,gBAAgB,CACtC9B,WAAW,EACXjjB,OAAO,CAACw0B,UACV,CAAC;QAED,IAAIquB,gBAAgB,IAAItzB,iBAAiB,EAAE;UAGzC,IAAIlS,IAAI,GAAG6W,qBAAqB,CAAC,CAAC;UAElC,IAAI7W,IAAI,KAAK,IAAI,EAAE;YACjB,IAAI0tC,sBAAsB,GAAGpkC,yBAAyB,CACpDtJ,IAAI,EACJ4F,WACF,CAAC;YAED,IACE8nC,sBAAsB,KAAKzrC,MAAM,IACjCyrC,sBAAsB,KAAK7C,aAAa,CAACN,SAAS,EAClD;cAIAM,aAAa,CAACN,SAAS,GAAGmD,sBAAsB;cAChD32B,8BAA8B,CAACp0B,OAAO,EAAE+qD,sBAAsB,CAAC;cAC/DpX,qBAAqB,CAACt2B,IAAI,EAAErd,OAAO,EAAE+qD,sBAAsB,CAAC;cAS5D,MAAMnI,2BAA2B;YACnC;UACF;UAWA,IAAI56B,yBAAyB,CAAC,CAAC,EAAC,CAAC,KAC5B;YACH05B,+BAA+B,CAAC,CAAC;UACnC;UAEA,OAAO8I,sCAAsC,CAC3CxqD,OAAO,EACP4uB,cAAc,EACd3L,WAAW,EACX,IACF,CAAC;QACH,CAAC,MAAM,IAAI+E,yBAAyB,CAAC,CAAC,EAAE;UAUtC4G,cAAc,CAACja,KAAK,IAAIvC,UAAU;UAElCwc,cAAc,CAACrZ,KAAK,GAAGvV,OAAO,CAACuV,KAAK;UAEpCy1C,+BAA+B,CAACr9B,IAAI,CAAC,IAAI,EAAE3tB,OAAO,CAAC;UACnDmoB,6BAA6B,CAAC,CAAC;UAC/B,OAAO,IAAI;QACb,CAAC,MAAM;UACL,IAAIyhC,eAAe,GAAG1xC,SAAS,CAACoF,QAAQ;UACxC,IAAI0rC,oBAAoB,GAAGC,4BAA4B,CACrDr6B,cAAc,EACdg7B,eACF,CAAC;UAODZ,oBAAoB,CAACr0C,KAAK,IAAItC,SAAS;UACvC,OAAO22C,oBAAoB;QAC7B;MACF,CAAC,MAAM;QAGL,IAAIp6B,cAAc,CAACja,KAAK,GAAGjC,iBAAiB,EAAE;UAE5C83B,8BAA8B,CAAC5b,cAAc,CAAC;UAC9CA,cAAc,CAACja,KAAK,IAAI,CAACjC,iBAAiB;UAE1C,IAAIu4C,cAAc,GAAGnL,mBAAmB,CACtC,IAAI5uD,KAAK,CACP,6DAA6D,GAC3D,+BACJ,CACF,CAAC;UAED,OAAOs5D,sCAAsC,CAC3CxqD,OAAO,EACP4uB,cAAc,EACd3L,WAAW,EACXgoC,cACF,CAAC;QACH,CAAC,MAAM,IAAIr8B,cAAc,CAAC0C,aAAa,KAAK,IAAI,EAAE;UAIhDuZ,+BAA+B,CAACjc,cAAc,CAAC;UAC/CA,cAAc,CAACrZ,KAAK,GAAGvV,OAAO,CAACuV,KAAK;UAGpCqZ,cAAc,CAACja,KAAK,IAAIvC,UAAU;UAClC,OAAO,IAAI;QACb,CAAC,MAAM;UAGLy4B,+BAA+B,CAACjc,cAAc,CAAC;UAC/C,IAAI+5B,mBAAmB,GAAGzwC,SAAS,CAACoF,QAAQ;UAC5C,IAAIsrC,oBAAoB,GAAG1wC,SAAS,CAAC2wC,QAAQ;UAC7C,IAAIS,qBAAqB,GACvBoB,+CAA+C,CAC7C1qD,OAAO,EACP4uB,cAAc,EACd+5B,mBAAmB,EACnBC,oBAAoB,EACpB3lC,WACF,CAAC;UACH,IAAIioC,sBAAsB,GAAGt8B,cAAc,CAACrZ,KAAK;UACjD21C,sBAAsB,CAAC55B,aAAa,GAClCu2B,2BAA2B,CAAC5kC,WAAW,CAAC;UAC1CioC,sBAAsB,CAAC12B,UAAU,GAAG4zB,6BAA6B,CAC/DpoD,OAAO,EACP0oD,uBAAuB,EACvBzlC,WACF,CAAC;UACD2L,cAAc,CAAC0C,aAAa,GAAGo2B,gBAAgB;UAC/C,OAAO4B,qBAAqB;QAC9B;MACF;IACF;IAEA,SAAS6B,2BAA2BA,CAACn5C,KAAK,EAAEiR,WAAW,EAAEmoC,eAAe,EAAE;MACxEp5C,KAAK,CAACiQ,KAAK,GAAGiD,UAAU,CAAClT,KAAK,CAACiQ,KAAK,EAAEgB,WAAW,CAAC;MAClD,IAAIze,SAAS,GAAGwN,KAAK,CAACxN,SAAS;MAE/B,IAAIA,SAAS,KAAK,IAAI,EAAE;QACtBA,SAAS,CAACyd,KAAK,GAAGiD,UAAU,CAAC1gB,SAAS,CAACyd,KAAK,EAAEgB,WAAW,CAAC;MAC5D;MAEAooC,+BAA+B,CAC7Br5C,KAAK,CAAClO,MAAM,EACZmf,WAAW,EACXmoC,eACF,CAAC;IACH;IAEA,SAASE,8BAA8BA,CACrC18B,cAAc,EACd28B,UAAU,EACVtoC,WAAW,EACX;MAIA,IAAIzO,IAAI,GAAG+2C,UAAU;MAErB,OAAO/2C,IAAI,KAAK,IAAI,EAAE;QACpB,IAAIA,IAAI,CAACzQ,GAAG,KAAK3C,iBAAiB,EAAE;UAClC,IAAI8/B,KAAK,GAAG1sB,IAAI,CAAC8c,aAAa;UAE9B,IAAI4P,KAAK,KAAK,IAAI,EAAE;YAClBiqB,2BAA2B,CAAC32C,IAAI,EAAEyO,WAAW,EAAE2L,cAAc,CAAC;UAChE;QACF,CAAC,MAAM,IAAIpa,IAAI,CAACzQ,GAAG,KAAKrC,qBAAqB,EAAE;UAM7CypD,2BAA2B,CAAC32C,IAAI,EAAEyO,WAAW,EAAE2L,cAAc,CAAC;QAChE,CAAC,MAAM,IAAIpa,IAAI,CAACe,KAAK,KAAK,IAAI,EAAE;UAC9Bf,IAAI,CAACe,KAAK,CAACzR,MAAM,GAAG0Q,IAAI;UACxBA,IAAI,GAAGA,IAAI,CAACe,KAAK;UACjB;QACF;QAEA,IAAIf,IAAI,KAAKoa,cAAc,EAAE;UAC3B;QACF;QAEA,OAAOpa,IAAI,CAACgB,OAAO,KAAK,IAAI,EAAE;UAE5B,IAAIhB,IAAI,CAAC1Q,MAAM,KAAK,IAAI,IAAI0Q,IAAI,CAAC1Q,MAAM,KAAK8qB,cAAc,EAAE;YAC1D;UACF;UAEApa,IAAI,GAAGA,IAAI,CAAC1Q,MAAM;QACpB;QAEA0Q,IAAI,CAACgB,OAAO,CAAC1R,MAAM,GAAG0Q,IAAI,CAAC1Q,MAAM;QACjC0Q,IAAI,GAAGA,IAAI,CAACgB,OAAO;MACrB;IACF;IAEA,SAASg2C,kBAAkBA,CAACD,UAAU,EAAE;MAQtC,IAAI3f,GAAG,GAAG2f,UAAU;MACpB,IAAIE,cAAc,GAAG,IAAI;MAEzB,OAAO7f,GAAG,KAAK,IAAI,EAAE;QACnB,IAAI8f,UAAU,GAAG9f,GAAG,CAACpnC,SAAS;QAE9B,IAAIknD,UAAU,KAAK,IAAI,IAAI/f,kBAAkB,CAAC+f,UAAU,CAAC,KAAK,IAAI,EAAE;UAClED,cAAc,GAAG7f,GAAG;QACtB;QAEAA,GAAG,GAAGA,GAAG,CAACp2B,OAAO;MACnB;MAEA,OAAOi2C,cAAc;IACvB;IAEA,SAASE,mBAAmBA,CAAC7f,WAAW,EAAE;MACxC;QACE,IACEA,WAAW,KAAK7zC,SAAS,IACzB6zC,WAAW,KAAK,UAAU,IAC1BA,WAAW,KAAK,WAAW,IAC3BA,WAAW,KAAK,UAAU,IAC1B,CAACsX,uBAAuB,CAACtX,WAAW,CAAC,EACrC;UACAsX,uBAAuB,CAACtX,WAAW,CAAC,GAAG,IAAI;UAE3C,IAAI,OAAOA,WAAW,KAAK,QAAQ,EAAE;YACnC,QAAQA,WAAW,CAAChjC,WAAW,CAAC,CAAC;cAC/B,KAAK,UAAU;cACf,KAAK,UAAU;cACf,KAAK,WAAW;gBAAE;kBAChB5W,KAAK,CACH,iEAAiE,GAC/D,6BAA6B,EAC/B45C,WAAW,EACXA,WAAW,CAAChjC,WAAW,CAAC,CAC1B,CAAC;kBAED;gBACF;cAEA,KAAK,SAAS;cACd,KAAK,UAAU;gBAAE;kBACf5W,KAAK,CACH,iEAAiE,GAC/D,8DAA8D,EAChE45C,WAAW,EACXA,WAAW,CAAChjC,WAAW,CAAC,CAC1B,CAAC;kBAED;gBACF;cAEA;gBACE5W,KAAK,CACH,2DAA2D,GACzD,qDAAqD,EACvD45C,WACF,CAAC;gBAED;YACJ;UACF,CAAC,MAAM;YACL55C,KAAK,CACH,mEAAmE,GACjE,qDAAqD,EACvD45C,WACF,CAAC;UACH;QACF;MACF;IACF;IAEA,SAAS8f,mBAAmBA,CAACC,QAAQ,EAAE/f,WAAW,EAAE;MAClD;QACE,IAAI+f,QAAQ,KAAK5zD,SAAS,IAAI,CAACorD,uBAAuB,CAACwI,QAAQ,CAAC,EAAE;UAChE,IAAIA,QAAQ,KAAK,WAAW,IAAIA,QAAQ,KAAK,QAAQ,EAAE;YACrDxI,uBAAuB,CAACwI,QAAQ,CAAC,GAAG,IAAI;YAExC35D,KAAK,CACH,8DAA8D,GAC5D,uCAAuC,EACzC25D,QACF,CAAC;UACH,CAAC,MAAM,IACL/f,WAAW,KAAK,UAAU,IAC1BA,WAAW,KAAK,WAAW,EAC3B;YACAuX,uBAAuB,CAACwI,QAAQ,CAAC,GAAG,IAAI;YAExC35D,KAAK,CACH,6DAA6D,GAC3D,6BAA6B,GAC7B,iDAAiD,EACnD25D,QACF,CAAC;UACH;QACF;MACF;IACF;IAEA,SAASC,+BAA+BA,CAACC,SAAS,EAAEt/C,KAAK,EAAE;MACzD;QACE,IAAIu/C,SAAS,GAAGr1D,OAAO,CAACo1D,SAAS,CAAC;QAClC,IAAIE,UAAU,GACZ,CAACD,SAAS,IAAI,OAAO17C,aAAa,CAACy7C,SAAS,CAAC,KAAK,UAAU;QAE9D,IAAIC,SAAS,IAAIC,UAAU,EAAE;UAC3B,IAAIl0D,IAAI,GAAGi0D,SAAS,GAAG,OAAO,GAAG,UAAU;UAE3C95D,KAAK,CACH,oEAAoE,GAClE,2DAA2D,GAC3D,qCAAqC,GACrC,wDAAwD,GACxD,iBAAiB,EACnB6F,IAAI,EACJ0U,KAAK,EACL1U,IACF,CAAC;UAED,OAAO,KAAK;QACd;MACF;MAEA,OAAO,IAAI;IACb;IAEA,SAASm0D,4BAA4BA,CAAC5uC,QAAQ,EAAEwuB,WAAW,EAAE;MAC3D;QACE,IACE,CAACA,WAAW,KAAK,UAAU,IAAIA,WAAW,KAAK,WAAW,KAC1DxuB,QAAQ,KAAKrlB,SAAS,IACtBqlB,QAAQ,KAAK,IAAI,IACjBA,QAAQ,KAAK,KAAK,EAClB;UACA,IAAI3mB,OAAO,CAAC2mB,QAAQ,CAAC,EAAE;YACrB,KAAK,IAAInlB,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGmlB,QAAQ,CAACzrB,MAAM,EAAEsG,CAAC,EAAE,EAAE;cACxC,IAAI,CAAC2zD,+BAA+B,CAACxuC,QAAQ,CAACnlB,CAAC,CAAC,EAAEA,CAAC,CAAC,EAAE;gBACpD;cACF;YACF;UACF,CAAC,MAAM;YACL,IAAIiwC,UAAU,GAAG93B,aAAa,CAACgN,QAAQ,CAAC;YAExC,IAAI,OAAO8qB,UAAU,KAAK,UAAU,EAAE;cACpC,IAAI+jB,gBAAgB,GAAG/jB,UAAU,CAACl1C,IAAI,CAACoqB,QAAQ,CAAC;cAEhD,IAAI6uC,gBAAgB,EAAE;gBACpB,IAAI1jB,IAAI,GAAG0jB,gBAAgB,CAAClsD,IAAI,CAAC,CAAC;gBAClC,IAAImsD,EAAE,GAAG,CAAC;gBAEV,OAAO,CAAC3jB,IAAI,CAACD,IAAI,EAAEC,IAAI,GAAG0jB,gBAAgB,CAAClsD,IAAI,CAAC,CAAC,EAAE;kBACjD,IAAI,CAAC6rD,+BAA+B,CAACrjB,IAAI,CAACp6B,KAAK,EAAE+9C,EAAE,CAAC,EAAE;oBACpD;kBACF;kBAEAA,EAAE,EAAE;gBACN;cACF;YACF,CAAC,MAAM;cACLl6D,KAAK,CACH,kEAAkE,GAChE,mDAAmD,GACnD,qDAAqD,EACvD45C,WACF,CAAC;YACH;UACF;QACF;MACF;IACF;IAEA,SAASugB,2BAA2BA,CAClCz9B,cAAc,EACd09B,WAAW,EACXC,IAAI,EACJd,cAAc,EACdI,QAAQ,EACR;MACA,IAAIW,WAAW,GAAG59B,cAAc,CAAC0C,aAAa;MAE9C,IAAIk7B,WAAW,KAAK,IAAI,EAAE;QACxB59B,cAAc,CAAC0C,aAAa,GAAG;UAC7Bg7B,WAAW,EAAEA,WAAW;UACxB5uB,SAAS,EAAE,IAAI;UACf+uB,kBAAkB,EAAE,CAAC;UACrBC,IAAI,EAAEjB,cAAc;UACpBc,IAAI,EAAEA,IAAI;UACVV,QAAQ,EAAEA;QACZ,CAAC;MACH,CAAC,MAAM;QAELW,WAAW,CAACF,WAAW,GAAGA,WAAW;QACrCE,WAAW,CAAC9uB,SAAS,GAAG,IAAI;QAC5B8uB,WAAW,CAACC,kBAAkB,GAAG,CAAC;QAClCD,WAAW,CAACE,IAAI,GAAGjB,cAAc;QACjCe,WAAW,CAACD,IAAI,GAAGA,IAAI;QACvBC,WAAW,CAACX,QAAQ,GAAGA,QAAQ;MACjC;IACF;IAQA,SAASc,2BAA2BA,CAAC3sD,OAAO,EAAE4uB,cAAc,EAAE3L,WAAW,EAAE;MACzE,IAAI/K,SAAS,GAAG0W,cAAc,CAACuW,YAAY;MAC3C,IAAI2G,WAAW,GAAG5zB,SAAS,CAAC4zB,WAAW;MACvC,IAAI+f,QAAQ,GAAG3zC,SAAS,CAACq0C,IAAI;MAC7B,IAAI3kB,WAAW,GAAG1vB,SAAS,CAACoF,QAAQ;MACpCquC,mBAAmB,CAAC7f,WAAW,CAAC;MAChC8f,mBAAmB,CAACC,QAAQ,EAAE/f,WAAW,CAAC;MAC1CogB,4BAA4B,CAACtkB,WAAW,EAAEkE,WAAW,CAAC;MACtDyX,iBAAiB,CAACvjD,OAAO,EAAE4uB,cAAc,EAAEgZ,WAAW,EAAE3kB,WAAW,CAAC;MACpE,IAAIklC,eAAe,GAAGvd,mBAAmB,CAAC5qC,OAAO;MACjD,IAAI4sD,mBAAmB,GAAGthB,sBAAsB,CAC9C6c,eAAe,EACf9c,qBACF,CAAC;MAED,IAAIuhB,mBAAmB,EAAE;QACvBzE,eAAe,GAAG3c,6BAA6B,CAC7C2c,eAAe,EACf9c,qBACF,CAAC;QACDzc,cAAc,CAACja,KAAK,IAAIvC,UAAU;MACpC,CAAC,MAAM;QACL,IAAIy6C,gBAAgB,GAClB7sD,OAAO,KAAK,IAAI,IAAI,CAACA,OAAO,CAAC2U,KAAK,GAAGvC,UAAU,MAAMH,SAAS;QAEhE,IAAI46C,gBAAgB,EAAE;UAIpBvB,8BAA8B,CAC5B18B,cAAc,EACdA,cAAc,CAACrZ,KAAK,EACpB0N,WACF,CAAC;QACH;QAEAklC,eAAe,GAAGxd,oCAAoC,CAACwd,eAAe,CAAC;MACzE;MAEAzd,uBAAuB,CAAC9b,cAAc,EAAEu5B,eAAe,CAAC;MAExD,IAAI,CAACv5B,cAAc,CAACoC,IAAI,GAAGtS,cAAc,MAAMD,MAAM,EAAE;QAGrDmQ,cAAc,CAAC0C,aAAa,GAAG,IAAI;MACrC,CAAC,MAAM;QACL,QAAQwa,WAAW;UACjB,KAAK,UAAU;YAAE;cACf,IAAI2f,cAAc,GAAGD,kBAAkB,CAAC58B,cAAc,CAACrZ,KAAK,CAAC;cAC7D,IAAIg3C,IAAI;cAER,IAAId,cAAc,KAAK,IAAI,EAAE;gBAG3Bc,IAAI,GAAG39B,cAAc,CAACrZ,KAAK;gBAC3BqZ,cAAc,CAACrZ,KAAK,GAAG,IAAI;cAC7B,CAAC,MAAM;gBAGLg3C,IAAI,GAAGd,cAAc,CAACj2C,OAAO;gBAC7Bi2C,cAAc,CAACj2C,OAAO,GAAG,IAAI;cAC/B;cAEA62C,2BAA2B,CACzBz9B,cAAc,EACd,KAAK,EACL29B,IAAI,EACJd,cAAc,EACdI,QACF,CAAC;cACD;YACF;UAEA,KAAK,WAAW;YAAE;cAKhB,IAAIiB,KAAK,GAAG,IAAI;cAChB,IAAIlhB,GAAG,GAAGhd,cAAc,CAACrZ,KAAK;cAC9BqZ,cAAc,CAACrZ,KAAK,GAAG,IAAI;cAE3B,OAAOq2B,GAAG,KAAK,IAAI,EAAE;gBACnB,IAAI8f,UAAU,GAAG9f,GAAG,CAACpnC,SAAS;gBAE9B,IACEknD,UAAU,KAAK,IAAI,IACnB/f,kBAAkB,CAAC+f,UAAU,CAAC,KAAK,IAAI,EACvC;kBAEA98B,cAAc,CAACrZ,KAAK,GAAGq2B,GAAG;kBAC1B;gBACF;gBAEA,IAAImhB,OAAO,GAAGnhB,GAAG,CAACp2B,OAAO;gBACzBo2B,GAAG,CAACp2B,OAAO,GAAGs3C,KAAK;gBACnBA,KAAK,GAAGlhB,GAAG;gBACXA,GAAG,GAAGmhB,OAAO;cACf;cAEAV,2BAA2B,CACzBz9B,cAAc,EACd,IAAI,EACJk+B,KAAK,EACL,IAAI,EACJjB,QACF,CAAC;cACD;YACF;UAEA,KAAK,UAAU;YAAE;cACfQ,2BAA2B,CACzBz9B,cAAc,EACd,KAAK,EACL,IAAI,EACJ,IAAI,EACJ32B,SACF,CAAC;cACD;YACF;UAEA;YAAS;cAGP22B,cAAc,CAAC0C,aAAa,GAAG,IAAI;YACrC;QACF;MACF;MAEA,OAAO1C,cAAc,CAACrZ,KAAK;IAC7B;IAEA,SAASy3C,qBAAqBA,CAAChtD,OAAO,EAAE4uB,cAAc,EAAE3L,WAAW,EAAE;MACnE6O,iBAAiB,CAAClD,cAAc,EAAEA,cAAc,CAAC7pB,SAAS,CAACwhC,aAAa,CAAC;MACzE,IAAIid,YAAY,GAAG50B,cAAc,CAACuW,YAAY;MAE9C,IAAInlC,OAAO,KAAK,IAAI,EAAE;QAMpB4uB,cAAc,CAACrZ,KAAK,GAAG4zB,oBAAoB,CACzCva,cAAc,EACd,IAAI,EACJ40B,YAAY,EACZvgC,WACF,CAAC;MACH,CAAC,MAAM;QACLsgC,iBAAiB,CAACvjD,OAAO,EAAE4uB,cAAc,EAAE40B,YAAY,EAAEvgC,WAAW,CAAC;MACvE;MAEA,OAAO2L,cAAc,CAACrZ,KAAK;IAC7B;IAEA,IAAI03C,+CAA+C,GAAG,KAAK;IAE3D,SAASC,qBAAqBA,CAACltD,OAAO,EAAE4uB,cAAc,EAAE3L,WAAW,EAAE;MACnE,IAAIkqC,YAAY,GAAGv+B,cAAc,CAAC72B,IAAI;MACtC,IAAIlE,OAAO,GAAGs5D,YAAY,CAAC/7C,QAAQ;MACnC,IAAI8Z,QAAQ,GAAG0D,cAAc,CAACuW,YAAY;MAC1C,IAAI9Z,QAAQ,GAAGuD,cAAc,CAACmC,aAAa;MAC3C,IAAIq8B,QAAQ,GAAGliC,QAAQ,CAAC7c,KAAK;MAE7B;QACE,IAAI,EAAE,OAAO,IAAI6c,QAAQ,CAAC,EAAE;UAC1B,IAAI,CAAC+hC,+CAA+C,EAAE;YACpDA,+CAA+C,GAAG,IAAI;YAEtD/6D,KAAK,CACH,sGACF,CAAC;UACH;QACF;QAEA,IAAIm7D,iBAAiB,GAAGz+B,cAAc,CAAC72B,IAAI,CAACylD,SAAS;QAErD,IAAI6P,iBAAiB,EAAE;UACrB//B,cAAc,CACZ+/B,iBAAiB,EACjBniC,QAAQ,EACR,MAAM,EACN,kBACF,CAAC;QACH;MACF;MAEAoiC,YAAY,CAAC1+B,cAAc,EAAE/6B,OAAO,EAAEu5D,QAAQ,CAAC;MAE/C;QACE,IAAI/hC,QAAQ,KAAK,IAAI,EAAE;UACrB,IAAIkiC,QAAQ,GAAGliC,QAAQ,CAAChd,KAAK;UAE7B,IAAI8iB,QAAQ,CAACo8B,QAAQ,EAAEH,QAAQ,CAAC,EAAE;YAEhC,IACE/hC,QAAQ,CAAC/N,QAAQ,KAAK4N,QAAQ,CAAC5N,QAAQ,IACvC,CAACiS,iBAAiB,CAAC,CAAC,EACpB;cACA,OAAOs0B,4BAA4B,CACjC7jD,OAAO,EACP4uB,cAAc,EACd3L,WACF,CAAC;YACH;UACF,CAAC,MAAM;YAGLuqC,sBAAsB,CAAC5+B,cAAc,EAAE/6B,OAAO,EAAEovB,WAAW,CAAC;UAC9D;QACF;MACF;MAEA,IAAI2kB,WAAW,GAAG1c,QAAQ,CAAC5N,QAAQ;MACnCimC,iBAAiB,CAACvjD,OAAO,EAAE4uB,cAAc,EAAEgZ,WAAW,EAAE3kB,WAAW,CAAC;MACpE,OAAO2L,cAAc,CAACrZ,KAAK;IAC7B;IAEA,IAAIk4C,oCAAoC,GAAG,KAAK;IAEhD,SAASC,qBAAqBA,CAAC1tD,OAAO,EAAE4uB,cAAc,EAAE3L,WAAW,EAAE;MACnE,IAAIpvB,OAAO,GAAG+6B,cAAc,CAAC72B,IAAI;MAQjC;QACE,IAAIlE,OAAO,CAACud,QAAQ,KAAKnZ,SAAS,EAAE;UAIlC,IAAIpE,OAAO,KAAKA,OAAO,CAAC85D,QAAQ,EAAE;YAChC,IAAI,CAACF,oCAAoC,EAAE;cACzCA,oCAAoC,GAAG,IAAI;cAE3Cv7D,KAAK,CACH,uEAAuE,GACrE,4EACJ,CAAC;YACH;UACF;QACF,CAAC,MAAM;UACL2B,OAAO,GAAGA,OAAO,CAACud,QAAQ;QAC5B;MACF;MAEA,IAAI8Z,QAAQ,GAAG0D,cAAc,CAACuW,YAAY;MAC1C,IAAI9zB,MAAM,GAAG6Z,QAAQ,CAAC5N,QAAQ;MAE9B;QACE,IAAI,OAAOjM,MAAM,KAAK,UAAU,EAAE;UAChCnf,KAAK,CACH,qEAAqE,GACnE,mEAAmE,GACnE,kEAAkE,GAClE,iDACJ,CAAC;QACH;MACF;MAEA0xD,oBAAoB,CAACh1B,cAAc,EAAE3L,WAAW,CAAC;MACjD,IAAImqC,QAAQ,GAAG1c,WAAW,CAAC78C,OAAO,CAAC;MAEnC,IAAI+zC,WAAW;MAEf;QACE+a,mBAAmB,CAAC3iD,OAAO,GAAG4uB,cAAc;QAC5C6O,cAAc,CAAC,IAAI,CAAC;QACpBmK,WAAW,GAAGv2B,MAAM,CAAC+7C,QAAQ,CAAC;QAC9B3vB,cAAc,CAAC,KAAK,CAAC;MACvB;MAEA7O,cAAc,CAACja,KAAK,IAAIzC,aAAa;MACrCqxC,iBAAiB,CAACvjD,OAAO,EAAE4uB,cAAc,EAAEgZ,WAAW,EAAE3kB,WAAW,CAAC;MACpE,OAAO2L,cAAc,CAACrZ,KAAK;IAC7B;IAEA,SAASu8B,gCAAgCA,CAAA,EAAG;MAC1C+Q,gBAAgB,GAAG,IAAI;IACzB;IAEA,SAASoD,wCAAwCA,CAACjmD,OAAO,EAAE4uB,cAAc,EAAE;MACzE,IAAI,CAACA,cAAc,CAACoC,IAAI,GAAGtS,cAAc,MAAMD,MAAM,EAAE;QACrD,IAAIze,OAAO,KAAK,IAAI,EAAE;UAKpBA,OAAO,CAACwE,SAAS,GAAG,IAAI;UACxBoqB,cAAc,CAACpqB,SAAS,GAAG,IAAI;UAE/BoqB,cAAc,CAACja,KAAK,IAAIxC,SAAS;QACnC;MACF;IACF;IAEA,SAAS0xC,4BAA4BA,CACnC7jD,OAAO,EACP4uB,cAAc,EACd3L,WAAW,EACX;MACA,IAAIjjB,OAAO,KAAK,IAAI,EAAE;QAEpB4uB,cAAc,CAAC5rB,YAAY,GAAGhD,OAAO,CAACgD,YAAY;MACpD;MAEA;QAEE23C,0BAA0B,CAAC,CAAC;MAC9B;MAEA3e,sBAAsB,CAACpN,cAAc,CAAC3M,KAAK,CAAC;MAE5C,IAAI,CAAC8C,gBAAgB,CAAC9B,WAAW,EAAE2L,cAAc,CAAC4F,UAAU,CAAC,EAAE;QAI7D;UACE,OAAO,IAAI;QACb;MACF;MAGA+U,gBAAgB,CAACvpC,OAAO,EAAE4uB,cAAc,CAAC;MACzC,OAAOA,cAAc,CAACrZ,KAAK;IAC7B;IAEA,SAASq4C,YAAYA,CAAC5tD,OAAO,EAAE6tD,iBAAiB,EAAEC,iBAAiB,EAAE;MACnE;QACE,IAAI1qB,WAAW,GAAGyqB,iBAAiB,CAAC/pD,MAAM;QAE1C,IAAIs/B,WAAW,KAAK,IAAI,EAAE;UAExB,MAAM,IAAIlyC,KAAK,CAAC,6BAA6B,CAAC;QAChD;QAGA8O,OAAO,CAACwE,SAAS,GAAG,IAAI;QACxBqpD,iBAAiB,CAACrpD,SAAS,GAAG,IAAI;QAElCspD,iBAAiB,CAACrhD,KAAK,GAAGohD,iBAAiB,CAACphD,KAAK;QACjDqhD,iBAAiB,CAACt4C,OAAO,GAAGq4C,iBAAiB,CAACr4C,OAAO;QACrDs4C,iBAAiB,CAAChqD,MAAM,GAAG+pD,iBAAiB,CAAC/pD,MAAM;QACnDgqD,iBAAiB,CAAClqB,GAAG,GAAGiqB,iBAAiB,CAACjqB,GAAG;QAE7C,IAAIiqB,iBAAiB,KAAKzqB,WAAW,CAAC7tB,KAAK,EAAE;UAC3C6tB,WAAW,CAAC7tB,KAAK,GAAGu4C,iBAAiB;QACvC,CAAC,MAAM;UACL,IAAIC,WAAW,GAAG3qB,WAAW,CAAC7tB,KAAK;UAEnC,IAAIw4C,WAAW,KAAK,IAAI,EAAE;YAExB,MAAM,IAAI78D,KAAK,CAAC,kCAAkC,CAAC;UACrD;UAEA,OAAO68D,WAAW,CAACv4C,OAAO,KAAKq4C,iBAAiB,EAAE;YAEhDE,WAAW,GAAGA,WAAW,CAACv4C,OAAO;YAEjC,IAAIu4C,WAAW,KAAK,IAAI,EAAE;cAExB,MAAM,IAAI78D,KAAK,CAAC,wCAAwC,CAAC;YAC3D;UACF;UAEA68D,WAAW,CAACv4C,OAAO,GAAGs4C,iBAAiB;QACzC;QAGA,IAAIlpB,SAAS,GAAGxB,WAAW,CAACwB,SAAS;QAErC,IAAIA,SAAS,KAAK,IAAI,EAAE;UACtBxB,WAAW,CAACwB,SAAS,GAAG,CAAC5kC,OAAO,CAAC;UACjCojC,WAAW,CAACzuB,KAAK,IAAIpC,aAAa;QACpC,CAAC,MAAM;UACLqyB,SAAS,CAAC3oC,IAAI,CAAC+D,OAAO,CAAC;QACzB;QAEA8tD,iBAAiB,CAACn5C,KAAK,IAAIxC,SAAS;QAEpC,OAAO27C,iBAAiB;MAC1B;IACF;IAEA,SAASrJ,6BAA6BA,CAACzkD,OAAO,EAAEijB,WAAW,EAAE;MAG3D,IAAI+qC,WAAW,GAAGhuD,OAAO,CAACiiB,KAAK;MAE/B,IAAI8C,gBAAgB,CAACipC,WAAW,EAAE/qC,WAAW,CAAC,EAAE;QAC9C,OAAO,IAAI;MACb;MAEA,OAAO,KAAK;IACd;IAEA,SAASgrC,sCAAsCA,CAC7CjuD,OAAO,EACP4uB,cAAc,EACd3L,WAAW,EACX;MAIA,QAAQ2L,cAAc,CAAC7qB,GAAG;QACxB,KAAKrD,QAAQ;UACX2lD,mBAAmB,CAACz3B,cAAc,CAAC;UACnC;QAEF,KAAK3sB,aAAa;QAClB,KAAKrB,aAAa;UAChBuxB,eAAe,CAACvD,cAAc,CAAC;UAC/B;QAEF,KAAKpuB,cAAc;UAAE;YACnB,IAAIquB,SAAS,GAAGD,cAAc,CAAC72B,IAAI;YAEnC,IAAIg3B,iBAAiB,CAACF,SAAS,CAAC,EAAE;cAChCqB,mBAAmB,CAACtB,cAAc,CAAC;YACrC;YAEA;UACF;QAEA,KAAKjuB,UAAU;UACbmxB,iBAAiB,CACflD,cAAc,EACdA,cAAc,CAAC7pB,SAAS,CAACwhC,aAC3B,CAAC;UACD;QAEF,KAAKtlC,eAAe;UAAE;YACpB,IAAImsD,QAAQ,GAAGx+B,cAAc,CAACmC,aAAa,CAAC1iB,KAAK;YACjD,IAAIxa,OAAO,GAAG+6B,cAAc,CAAC72B,IAAI,CAACqZ,QAAQ;YAC1Ck8C,YAAY,CAAC1+B,cAAc,EAAE/6B,OAAO,EAAEu5D,QAAQ,CAAC;YAC/C;UACF;QAEA,KAAKjsD,QAAQ;UACX;YAEE,IAAI+sD,YAAY,GAAGnpC,gBAAgB,CACjC9B,WAAW,EACX2L,cAAc,CAAC4F,UACjB,CAAC;YAED,IAAI05B,YAAY,EAAE;cAChBt/B,cAAc,CAACja,KAAK,IAAIrC,MAAM;YAChC;YAEA;cAGE,IAAIvN,SAAS,GAAG6pB,cAAc,CAAC7pB,SAAS;cACxCA,SAAS,CAACm2C,cAAc,GAAG,CAAC;cAC5Bn2C,SAAS,CAACs2C,qBAAqB,GAAG,CAAC;YACrC;UACF;UAEA;QAEF,KAAKj6C,iBAAiB;UAAE;YACtB,IAAI8/B,KAAK,GAAGtS,cAAc,CAAC0C,aAAa;YAExC,IAAI4P,KAAK,KAAK,IAAI,EAAE;cAClB,IAAIA,KAAK,CAAC2K,UAAU,KAAK,IAAI,EAAE;gBAG7BrB,8BAA8B,CAAC5b,cAAc,CAAC;gBAI9CA,cAAc,CAACja,KAAK,IAAIvC,UAAU;gBAGlC,OAAO,IAAI;cACb;cAKA,IAAI42C,oBAAoB,GAAGp6B,cAAc,CAACrZ,KAAK;cAC/C,IAAI44C,iBAAiB,GAAGnF,oBAAoB,CAACx0B,UAAU;cAEvD,IAAIzP,gBAAgB,CAAC9B,WAAW,EAAEkrC,iBAAiB,CAAC,EAAE;gBAGpD,OAAO5F,uBAAuB,CAC5BvoD,OAAO,EACP4uB,cAAc,EACd3L,WACF,CAAC;cACH,CAAC,MAAM;gBAGLunB,8BAA8B,CAAC5b,cAAc,CAAC;gBAG9C,IAAIrZ,KAAK,GAAGsuC,4BAA4B,CACtC7jD,OAAO,EACP4uB,cAAc,EACd3L,WACF,CAAC;gBAED,IAAI1N,KAAK,KAAK,IAAI,EAAE;kBAGlB,OAAOA,KAAK,CAACC,OAAO;gBACtB,CAAC,MAAM;kBAIL,OAAO,IAAI;gBACb;cACF;YACF,CAAC,MAAM;cACLg1B,8BAA8B,CAAC5b,cAAc,CAAC;YAChD;YAEA;UACF;QAEA,KAAKltB,qBAAqB;UAAE;YAC1B,IAAImrD,gBAAgB,GAAG,CAAC7sD,OAAO,CAAC2U,KAAK,GAAGvC,UAAU,MAAMH,SAAS;YAEjE,IAAIm8C,aAAa,GAAGrpC,gBAAgB,CAClC9B,WAAW,EACX2L,cAAc,CAAC4F,UACjB,CAAC;YAED,IAAIq4B,gBAAgB,EAAE;cACpB,IAAIuB,aAAa,EAAE;gBAMjB,OAAOzB,2BAA2B,CAChC3sD,OAAO,EACP4uB,cAAc,EACd3L,WACF,CAAC;cACH;cAIA2L,cAAc,CAACja,KAAK,IAAIvC,UAAU;YACpC;YAIA,IAAIo6C,WAAW,GAAG59B,cAAc,CAAC0C,aAAa;YAE9C,IAAIk7B,WAAW,KAAK,IAAI,EAAE;cAGxBA,WAAW,CAAC9uB,SAAS,GAAG,IAAI;cAC5B8uB,WAAW,CAACD,IAAI,GAAG,IAAI;cACvBC,WAAW,CAACnc,UAAU,GAAG,IAAI;YAC/B;YAEA3F,uBAAuB,CAAC9b,cAAc,EAAEgc,mBAAmB,CAAC5qC,OAAO,CAAC;YAEpE,IAAIouD,aAAa,EAAE;cACjB;YACF,CAAC,MAAM;cAIL,OAAO,IAAI;YACb;UACF;QAEA,KAAKxsD,kBAAkB;QACvB,KAAKC,qBAAqB;UAAE;YAS1B+sB,cAAc,CAAC3M,KAAK,GAAG5C,OAAO;YAC9B,OAAOwlC,wBAAwB,CAAC7kD,OAAO,EAAE4uB,cAAc,EAAE3L,WAAW,CAAC;UACvE;MACF;MAEA,OAAO4gC,4BAA4B,CAAC7jD,OAAO,EAAE4uB,cAAc,EAAE3L,WAAW,CAAC;IAC3E;IAEA,SAASorC,WAAWA,CAACruD,OAAO,EAAE4uB,cAAc,EAAE3L,WAAW,EAAE;MACzD;QACE,IAAI2L,cAAc,CAAC0/B,kBAAkB,IAAItuD,OAAO,KAAK,IAAI,EAAE;UAEzD,OAAO4tD,YAAY,CACjB5tD,OAAO,EACP4uB,cAAc,EACdy1B,2BAA2B,CACzBz1B,cAAc,CAAC72B,IAAI,EACnB62B,cAAc,CAACzgB,GAAG,EAClBygB,cAAc,CAACuW,YAAY,EAC3BvW,cAAc,CAACoO,WAAW,IAAI,IAAI,EAClCpO,cAAc,CAACoC,IAAI,EACnBpC,cAAc,CAAC3M,KACjB,CACF,CAAC;QACH;MACF;MAEA,IAAIjiB,OAAO,KAAK,IAAI,EAAE;QACpB,IAAIqrB,QAAQ,GAAGrrB,OAAO,CAAC+wB,aAAa;QACpC,IAAI7F,QAAQ,GAAG0D,cAAc,CAACuW,YAAY;QAE1C,IACE9Z,QAAQ,KAAKH,QAAQ,IACrBqE,iBAAiB,CAAC,CAAC,IACnBX,cAAc,CAAC72B,IAAI,KAAKiI,OAAO,CAACjI,IAAI,EACpC;UAGA8qD,gBAAgB,GAAG,IAAI;QACzB,CAAC,MAAM;UAGL,IAAI2B,2BAA2B,GAAGC,6BAA6B,CAC7DzkD,OAAO,EACPijB,WACF,CAAC;UAED,IACE,CAACuhC,2BAA2B,IAE5B,CAAC51B,cAAc,CAACja,KAAK,GAAGvC,UAAU,MAAMH,SAAS,EACjD;YAEA4wC,gBAAgB,GAAG,KAAK;YACxB,OAAOoL,sCAAsC,CAC3CjuD,OAAO,EACP4uB,cAAc,EACd3L,WACF,CAAC;UACH;UAEA,IAAI,CAACjjB,OAAO,CAAC2U,KAAK,GAAGpB,4BAA4B,MAAMtB,SAAS,EAAE;YAGhE4wC,gBAAgB,GAAG,IAAI;UACzB,CAAC,MAAM;YAKLA,gBAAgB,GAAG,KAAK;UAC1B;QACF;MACF,CAAC,MAAM;QACLA,gBAAgB,GAAG,KAAK;MAC1B;MAMAj0B,cAAc,CAAC3M,KAAK,GAAG5C,OAAO;MAE9B,QAAQuP,cAAc,CAAC7qB,GAAG;QACxB,KAAKtD,sBAAsB;UAAE;YAC3B,OAAO2mD,2BAA2B,CAChCpnD,OAAO,EACP4uB,cAAc,EACdA,cAAc,CAAC72B,IAAI,EACnBkrB,WACF,CAAC;UACH;QAEA,KAAK1hB,aAAa;UAAE;YAClB,IAAI0kC,WAAW,GAAGrX,cAAc,CAACqX,WAAW;YAC5C,OAAO0gB,kBAAkB,CACvB3mD,OAAO,EACP4uB,cAAc,EACdqX,WAAW,EACXhjB,WACF,CAAC;UACH;QAEA,KAAK1iB,iBAAiB;UAAE;YACtB,IAAIsuB,SAAS,GAAGD,cAAc,CAAC72B,IAAI;YACnC,IAAIw2D,eAAe,GAAG3/B,cAAc,CAACuW,YAAY;YACjD,IAAI4hB,aAAa,GACfn4B,cAAc,CAACqX,WAAW,KAAKpX,SAAS,GACpC0/B,eAAe,GACf9S,mBAAmB,CAAC5sB,SAAS,EAAE0/B,eAAe,CAAC;YACrD,OAAO3J,uBAAuB,CAC5B5kD,OAAO,EACP4uB,cAAc,EACdC,SAAS,EACTk4B,aAAa,EACb9jC,WACF,CAAC;UACH;QAEA,KAAKziB,cAAc;UAAE;YACnB,IAAIguD,UAAU,GAAG5/B,cAAc,CAAC72B,IAAI;YACpC,IAAI02D,gBAAgB,GAAG7/B,cAAc,CAACuW,YAAY;YAElD,IAAIupB,cAAc,GAChB9/B,cAAc,CAACqX,WAAW,KAAKuoB,UAAU,GACrCC,gBAAgB,GAChBhT,mBAAmB,CAAC+S,UAAU,EAAEC,gBAAgB,CAAC;YAEvD,OAAO7I,oBAAoB,CACzB5lD,OAAO,EACP4uB,cAAc,EACd4/B,UAAU,EACVE,cAAc,EACdzrC,WACF,CAAC;UACH;QAEA,KAAKviB,QAAQ;UACX,OAAO6lD,cAAc,CAACvmD,OAAO,EAAE4uB,cAAc,EAAE3L,WAAW,CAAC;QAE7D,KAAKjhB,aAAa;QAIlB,KAAKC,aAAa;QAIlB,KAAKrB,aAAa;UAChB,OAAO6lD,qBAAqB,CAACzmD,OAAO,EAAE4uB,cAAc,EAAE3L,WAAW,CAAC;QAEpE,KAAKpiB,QAAQ;UACX,OAAO6lD,gBAAgB,CAAC,CAAC;QAE3B,KAAKtlD,iBAAiB;UACpB,OAAOmnD,uBAAuB,CAACvoD,OAAO,EAAE4uB,cAAc,EAAE3L,WAAW,CAAC;QAEtE,KAAKtiB,UAAU;UACb,OAAOqsD,qBAAqB,CAAChtD,OAAO,EAAE4uB,cAAc,EAAE3L,WAAW,CAAC;QAEpE,KAAK/hB,UAAU;UAAE;YACf,IAAInJ,IAAI,GAAG62B,cAAc,CAAC72B,IAAI;YAC9B,IAAI42D,iBAAiB,GAAG//B,cAAc,CAACuW,YAAY;YAEnD,IAAIypB,eAAe,GACjBhgC,cAAc,CAACqX,WAAW,KAAKluC,IAAI,GAC/B42D,iBAAiB,GACjBlT,mBAAmB,CAAC1jD,IAAI,EAAE42D,iBAAiB,CAAC;YAElD,OAAOjL,gBAAgB,CACrB1jD,OAAO,EACP4uB,cAAc,EACd72B,IAAI,EACJ62D,eAAe,EACf3rC,WACF,CAAC;UACH;QAEA,KAAKniB,QAAQ;UACX,OAAOolC,cAAc,CAAClmC,OAAO,EAAE4uB,cAAc,EAAE3L,WAAW,CAAC;QAE7D,KAAKliB,IAAI;UACP,OAAO0kD,UAAU,CAACzlD,OAAO,EAAE4uB,cAAc,EAAE3L,WAAW,CAAC;QAEzD,KAAK9hB,QAAQ;UACX,OAAOukD,cAAc,CAAC1lD,OAAO,EAAE4uB,cAAc,EAAE3L,WAAW,CAAC;QAE7D,KAAKhiB,eAAe;UAClB,OAAOisD,qBAAqB,CAACltD,OAAO,EAAE4uB,cAAc,EAAE3L,WAAW,CAAC;QAEpE,KAAKjiB,eAAe;UAClB,OAAO0sD,qBAAqB,CAAC1tD,OAAO,EAAE4uB,cAAc,EAAE3L,WAAW,CAAC;QAEpE,KAAK5hB,aAAa;UAAE;YAClB,IAAIwtD,MAAM,GAAGjgC,cAAc,CAAC72B,IAAI;YAChC,IAAI+2D,iBAAiB,GAAGlgC,cAAc,CAACuW,YAAY;YAEnD,IAAI4pB,eAAe,GAAGtT,mBAAmB,CAACoT,MAAM,EAAEC,iBAAiB,CAAC;YAEpE;cACE,IAAIlgC,cAAc,CAAC72B,IAAI,KAAK62B,cAAc,CAACqX,WAAW,EAAE;gBACtD,IAAI0e,cAAc,GAAGkK,MAAM,CAACrR,SAAS;gBAErC,IAAImH,cAAc,EAAE;kBAClBr3B,cAAc,CACZq3B,cAAc,EACdoK,eAAe,EACf,MAAM,EACN99C,wBAAwB,CAAC49C,MAAM,CACjC,CAAC;gBACH;cACF;YACF;YAEAE,eAAe,GAAGtT,mBAAmB,CAACoT,MAAM,CAAC92D,IAAI,EAAEg3D,eAAe,CAAC;YACnE,OAAOjL,mBAAmB,CACxB9jD,OAAO,EACP4uB,cAAc,EACdigC,MAAM,EACNE,eAAe,EACf9rC,WACF,CAAC;UACH;QAEA,KAAK3hB,mBAAmB;UAAE;YACxB,OAAO8iD,yBAAyB,CAC9BpkD,OAAO,EACP4uB,cAAc,EACdA,cAAc,CAAC72B,IAAI,EACnB62B,cAAc,CAACuW,YAAY,EAC3BliB,WACF,CAAC;UACH;QAEA,KAAKzhB,wBAAwB;UAAE;YAC7B,IAAIwtD,WAAW,GAAGpgC,cAAc,CAAC72B,IAAI;YACrC,IAAIk3D,iBAAiB,GAAGrgC,cAAc,CAACuW,YAAY;YAEnD,IAAI+pB,eAAe,GACjBtgC,cAAc,CAACqX,WAAW,KAAK+oB,WAAW,GACtCC,iBAAiB,GACjBxT,mBAAmB,CAACuT,WAAW,EAAEC,iBAAiB,CAAC;YAEzD,OAAO9H,6BAA6B,CAClCnnD,OAAO,EACP4uB,cAAc,EACdogC,WAAW,EACXE,eAAe,EACfjsC,WACF,CAAC;UACH;QAEA,KAAKvhB,qBAAqB;UAAE;YAC1B,OAAOirD,2BAA2B,CAChC3sD,OAAO,EACP4uB,cAAc,EACd3L,WACF,CAAC;UACH;QAEA,KAAKthB,cAAc;UAAE;YACnB;UACF;QAEA,KAAKC,kBAAkB;UAAE;YACvB,OAAOijD,wBAAwB,CAAC7kD,OAAO,EAAE4uB,cAAc,EAAE3L,WAAW,CAAC;UACvE;MACF;MAEA,MAAM,IAAI/xB,KAAK,CACb,4BAA4B,GAC1B09B,cAAc,CAAC7qB,GAAG,GAClB,6CAA6C,GAC7C,8BACJ,CAAC;IACH;IAEA,IAAIorD,WAAW,GAAGjhC,YAAY,CAAC,IAAI,CAAC;IACpC,IAAIkhC,iBAAiB;IAErB;MACEA,iBAAiB,GAAGlhC,YAAY,CAAC,IAAI,CAAC;IACxC;IAEA,IAAImhC,aAAa;IAEjB;MAEEA,aAAa,GAAG,CAAC,CAAC;IACpB;IAEA,IAAIC,uBAAuB,GAAG,IAAI;IAClC,IAAIC,qBAAqB,GAAG,IAAI;IAChC,IAAIC,wBAAwB,GAAG,IAAI;IACnC,IAAIC,4BAA4B,GAAG,KAAK;IACxC,SAASC,wBAAwBA,CAAA,EAAG;MAGlCJ,uBAAuB,GAAG,IAAI;MAC9BC,qBAAqB,GAAG,IAAI;MAC5BC,wBAAwB,GAAG,IAAI;MAE/B;QACEC,4BAA4B,GAAG,KAAK;MACtC;IACF;IACA,SAAS/0B,+BAA+BA,CAAA,EAAG;MACzC;QACE+0B,4BAA4B,GAAG,IAAI;MACrC;IACF;IACA,SAAS70B,8BAA8BA,CAAA,EAAG;MACxC;QACE60B,4BAA4B,GAAG,KAAK;MACtC;IACF;IACA,SAASnC,YAAYA,CAACqC,aAAa,EAAE97D,OAAO,EAAEwjB,SAAS,EAAE;MACvD;QACEpb,IAAI,CAACkzD,WAAW,EAAEt7D,OAAO,CAAC+7D,aAAa,EAAED,aAAa,CAAC;QACvD97D,OAAO,CAAC+7D,aAAa,GAAGv4C,SAAS;QAEjC;UACEpb,IAAI,CAACmzD,iBAAiB,EAAEv7D,OAAO,CAACg8D,gBAAgB,EAAEF,aAAa,CAAC;UAEhE,IACE97D,OAAO,CAACg8D,gBAAgB,KAAK53D,SAAS,IACtCpE,OAAO,CAACg8D,gBAAgB,KAAK,IAAI,IACjCh8D,OAAO,CAACg8D,gBAAgB,KAAKR,aAAa,EAC1C;YACAn9D,KAAK,CACH,yDAAyD,GACvD,uDACJ,CAAC;UACH;UAEA2B,OAAO,CAACg8D,gBAAgB,GAAGR,aAAa;QAC1C;MACF;IACF;IACA,SAASS,WAAWA,CAACj8D,OAAO,EAAE87D,aAAa,EAAE;MAC3C,IAAII,YAAY,GAAGZ,WAAW,CAACnvD,OAAO;MAEtC;QACEnM,OAAO,CAAC+7D,aAAa,GAAGG,YAAY;QAEpC;UACE,IAAIC,eAAe,GAAGZ,iBAAiB,CAACpvD,OAAO;UAC/CjE,GAAG,CAACqzD,iBAAiB,EAAEO,aAAa,CAAC;UACrC97D,OAAO,CAACg8D,gBAAgB,GAAGG,eAAe;QAC5C;MACF;MAEAj0D,GAAG,CAACozD,WAAW,EAAEQ,aAAa,CAAC;IACjC;IACA,SAAStE,+BAA+BA,CACtCz1C,MAAM,EACNqN,WAAW,EACXmoC,eAAe,EACf;MAEA,IAAI52C,IAAI,GAAGoB,MAAM;MAEjB,OAAOpB,IAAI,KAAK,IAAI,EAAE;QACpB,IAAIhQ,SAAS,GAAGgQ,IAAI,CAAChQ,SAAS;QAE9B,IAAI,CAACwgB,eAAe,CAACxQ,IAAI,CAACggB,UAAU,EAAEvR,WAAW,CAAC,EAAE;UAClDzO,IAAI,CAACggB,UAAU,GAAGtP,UAAU,CAAC1Q,IAAI,CAACggB,UAAU,EAAEvR,WAAW,CAAC;UAE1D,IAAIze,SAAS,KAAK,IAAI,EAAE;YACtBA,SAAS,CAACgwB,UAAU,GAAGtP,UAAU,CAC/B1gB,SAAS,CAACgwB,UAAU,EACpBvR,WACF,CAAC;UACH;QACF,CAAC,MAAM,IACLze,SAAS,KAAK,IAAI,IAClB,CAACwgB,eAAe,CAACxgB,SAAS,CAACgwB,UAAU,EAAEvR,WAAW,CAAC,EACnD;UACAze,SAAS,CAACgwB,UAAU,GAAGtP,UAAU,CAAC1gB,SAAS,CAACgwB,UAAU,EAAEvR,WAAW,CAAC;QACtE,CAAC,MAAK;QAEN,IAAIzO,IAAI,KAAK42C,eAAe,EAAE;UAC5B;QACF;QAEA52C,IAAI,GAAGA,IAAI,CAAC1Q,MAAM;MACpB;MAEA;QACE,IAAI0Q,IAAI,KAAK42C,eAAe,EAAE;UAC5Bl5D,KAAK,CACH,sEAAsE,GACpE,sEACJ,CAAC;QACH;MACF;IACF;IACA,SAASs7D,sBAAsBA,CAAC5+B,cAAc,EAAE/6B,OAAO,EAAEovB,WAAW,EAAE;MACpE;QACEgtC,4BAA4B,CAACrhC,cAAc,EAAE/6B,OAAO,EAAEovB,WAAW,CAAC;MACpE;IACF;IAEA,SAASgtC,4BAA4BA,CACnCrhC,cAAc,EACd/6B,OAAO,EACPovB,WAAW,EACX;MACA,IAAIjR,KAAK,GAAG4c,cAAc,CAACrZ,KAAK;MAEhC,IAAIvD,KAAK,KAAK,IAAI,EAAE;QAElBA,KAAK,CAAClO,MAAM,GAAG8qB,cAAc;MAC/B;MAEA,OAAO5c,KAAK,KAAK,IAAI,EAAE;QACrB,IAAIk+C,SAAS,GAAG,KAAK,CAAC;QAEtB,IAAIC,IAAI,GAAGn+C,KAAK,CAAChP,YAAY;QAE7B,IAAImtD,IAAI,KAAK,IAAI,EAAE;UACjBD,SAAS,GAAGl+C,KAAK,CAACuD,KAAK;UACvB,IAAI66C,UAAU,GAAGD,IAAI,CAACE,YAAY;UAElC,OAAOD,UAAU,KAAK,IAAI,EAAE;YAE1B,IAAIA,UAAU,CAACv8D,OAAO,KAAKA,OAAO,EAAE;cAElC,IAAIme,KAAK,CAACjO,GAAG,KAAKvD,cAAc,EAAE;gBAEhC,IAAI8iB,IAAI,GAAGuB,iBAAiB,CAAC5B,WAAW,CAAC;gBACzC,IAAIoD,MAAM,GAAGwT,YAAY,CAACvW,IAAI,CAAC;gBAC/B+C,MAAM,CAACtiB,GAAG,GAAG80B,WAAW;gBAMxB,IAAIY,WAAW,GAAGznB,KAAK,CAACynB,WAAW;gBAEnC,IAAIA,WAAW,KAAK,IAAI,EAAC,CAAC,KACrB;kBACH,IAAIM,WAAW,GAAGN,WAAW,CAACH,MAAM;kBACpC,IAAI9F,OAAO,GAAGuG,WAAW,CAACvG,OAAO;kBAEjC,IAAIA,OAAO,KAAK,IAAI,EAAE;oBAEpBnN,MAAM,CAACpmB,IAAI,GAAGomB,MAAM;kBACtB,CAAC,MAAM;oBACLA,MAAM,CAACpmB,IAAI,GAAGuzB,OAAO,CAACvzB,IAAI;oBAC1BuzB,OAAO,CAACvzB,IAAI,GAAGomB,MAAM;kBACvB;kBAEA0T,WAAW,CAACvG,OAAO,GAAGnN,MAAM;gBAC9B;cACF;cAEArU,KAAK,CAACiQ,KAAK,GAAGiD,UAAU,CAAClT,KAAK,CAACiQ,KAAK,EAAEgB,WAAW,CAAC;cAClD,IAAIze,SAAS,GAAGwN,KAAK,CAACxN,SAAS;cAE/B,IAAIA,SAAS,KAAK,IAAI,EAAE;gBACtBA,SAAS,CAACyd,KAAK,GAAGiD,UAAU,CAAC1gB,SAAS,CAACyd,KAAK,EAAEgB,WAAW,CAAC;cAC5D;cAEAooC,+BAA+B,CAC7Br5C,KAAK,CAAClO,MAAM,EACZmf,WAAW,EACX2L,cACF,CAAC;cAEDuhC,IAAI,CAACluC,KAAK,GAAGiD,UAAU,CAACirC,IAAI,CAACluC,KAAK,EAAEgB,WAAW,CAAC;cAGhD;YACF;YAEAmtC,UAAU,GAAGA,UAAU,CAACnwD,IAAI;UAC9B;QACF,CAAC,MAAM,IAAI+R,KAAK,CAACjO,GAAG,KAAK9C,eAAe,EAAE;UAExCivD,SAAS,GAAGl+C,KAAK,CAACja,IAAI,KAAK62B,cAAc,CAAC72B,IAAI,GAAG,IAAI,GAAGia,KAAK,CAACuD,KAAK;QACrE,CAAC,MAAM,IAAIvD,KAAK,CAACjO,GAAG,KAAKtC,kBAAkB,EAAE;UAI3C,IAAI6uD,cAAc,GAAGt+C,KAAK,CAAClO,MAAM;UAEjC,IAAIwsD,cAAc,KAAK,IAAI,EAAE;YAC3B,MAAM,IAAIp/D,KAAK,CACb,kFACF,CAAC;UACH;UAEAo/D,cAAc,CAACruC,KAAK,GAAGiD,UAAU,CAACorC,cAAc,CAACruC,KAAK,EAAEgB,WAAW,CAAC;UACpE,IAAIstC,UAAU,GAAGD,cAAc,CAAC9rD,SAAS;UAEzC,IAAI+rD,UAAU,KAAK,IAAI,EAAE;YACvBA,UAAU,CAACtuC,KAAK,GAAGiD,UAAU,CAACqrC,UAAU,CAACtuC,KAAK,EAAEgB,WAAW,CAAC;UAC9D;UAKAooC,+BAA+B,CAC7BiF,cAAc,EACdrtC,WAAW,EACX2L,cACF,CAAC;UACDshC,SAAS,GAAGl+C,KAAK,CAACwD,OAAO;QAC3B,CAAC,MAAM;UAEL06C,SAAS,GAAGl+C,KAAK,CAACuD,KAAK;QACzB;QAEA,IAAI26C,SAAS,KAAK,IAAI,EAAE;UAEtBA,SAAS,CAACpsD,MAAM,GAAGkO,KAAK;QAC1B,CAAC,MAAM;UAELk+C,SAAS,GAAGl+C,KAAK;UAEjB,OAAOk+C,SAAS,KAAK,IAAI,EAAE;YACzB,IAAIA,SAAS,KAAKthC,cAAc,EAAE;cAEhCshC,SAAS,GAAG,IAAI;cAChB;YACF;YAEA,IAAI16C,OAAO,GAAG06C,SAAS,CAAC16C,OAAO;YAE/B,IAAIA,OAAO,KAAK,IAAI,EAAE;cAEpBA,OAAO,CAAC1R,MAAM,GAAGosD,SAAS,CAACpsD,MAAM;cACjCosD,SAAS,GAAG16C,OAAO;cACnB;YACF;YAEA06C,SAAS,GAAGA,SAAS,CAACpsD,MAAM;UAC9B;QACF;QAEAkO,KAAK,GAAGk+C,SAAS;MACnB;IACF;IACA,SAAStM,oBAAoBA,CAACh1B,cAAc,EAAE3L,WAAW,EAAE;MACzDqsC,uBAAuB,GAAG1gC,cAAc;MACxC2gC,qBAAqB,GAAG,IAAI;MAC5BC,wBAAwB,GAAG,IAAI;MAC/B,IAAIxsD,YAAY,GAAG4rB,cAAc,CAAC5rB,YAAY;MAE9C,IAAIA,YAAY,KAAK,IAAI,EAAE;QACzB;UACE,IAAIqtD,YAAY,GAAGrtD,YAAY,CAACqtD,YAAY;UAE5C,IAAIA,YAAY,KAAK,IAAI,EAAE;YACzB,IAAItrC,gBAAgB,CAAC/hB,YAAY,CAACif,KAAK,EAAEgB,WAAW,CAAC,EAAE;cAErD6uB,gCAAgC,CAAC,CAAC;YACpC;YAEA9uC,YAAY,CAACqtD,YAAY,GAAG,IAAI;UAClC;QACF;MACF;IACF;IACA,SAAS3f,WAAWA,CAAC78C,OAAO,EAAE;MAC5B;QAGE,IAAI47D,4BAA4B,EAAE;UAChCv9D,KAAK,CACH,qDAAqD,GACnD,gFAAgF,GAChF,iFAAiF,GACjF,8CACJ,CAAC;QACH;MACF;MAEA,OAAOs+D,sBAAsB,CAAClB,uBAAuB,EAAEz7D,OAAO,CAAC;IACjE;IACA,SAASmzC,8BAA8BA,CAACypB,QAAQ,EAAE58D,OAAO,EAAEovB,WAAW,EAAE;MACtE,IAAIqsC,uBAAuB,KAAK,IAAI,EAAE;QACpC1L,oBAAoB,CAAC6M,QAAQ,EAAExtC,WAAW,CAAC;MAC7C;MAEA,OAAOutC,sBAAsB,CAACC,QAAQ,EAAE58D,OAAO,CAAC;IAClD;IAEA,SAAS28D,sBAAsBA,CAACC,QAAQ,EAAE58D,OAAO,EAAE;MACjD,IAAIwa,KAAK,GAAGxa,OAAO,CAAC+7D,aAAa;MAEjC,IAAIJ,wBAAwB,KAAK37D,OAAO,EAAC,CAAC,KACrC;QACH,IAAI68D,WAAW,GAAG;UAChB78D,OAAO,EAAEA,OAAO;UAChB88D,aAAa,EAAEtiD,KAAK;UACpBpO,IAAI,EAAE;QACR,CAAC;QAED,IAAIsvD,qBAAqB,KAAK,IAAI,EAAE;UAClC,IAAIkB,QAAQ,KAAK,IAAI,EAAE;YACrB,MAAM,IAAIv/D,KAAK,CACb,qDAAqD,GACnD,gFAAgF,GAChF,iFAAiF,GACjF,8CACJ,CAAC;UACH;UAEAq+D,qBAAqB,GAAGmB,WAAW;UACnCD,QAAQ,CAACztD,YAAY,GAAG;YACtBif,KAAK,EAAE5C,OAAO;YACdgxC,YAAY,EAAEK;UAChB,CAAC;QACH,CAAC,MAAM;UAELnB,qBAAqB,GAAGA,qBAAqB,CAACtvD,IAAI,GAAGywD,WAAW;QAClE;MACF;MAEA,OAAOriD,KAAK;IACd;IAEA,IAAIuiD,yBAAyB,GAC3Br/D,oBAAoB,CAACi7C,uBAAuB;IAC9C,SAASqkB,wBAAwBA,CAAA,EAAG;MAClC,IAAIj5B,UAAU,GAAGg5B,yBAAyB,CAACh5B,UAAU;MAErD,IAAIA,UAAU,KAAK,IAAI,EAAE;QAGvBA,UAAU,CAACsf,UAAU,CAAClwB,GAAG,CAAC8pC,iBAAiB,CAAC;MAC9C;MAEA,OAAOl5B,UAAU;IACnB;IAEA,SAASk5B,iBAAiBA,CAACl5B,UAAU,EAAEI,QAAQ,EAAE,CAAC;IAElD,SAAS+4B,yBAAyBA,CAACn5B,UAAU,EAAEr9B,WAAW,EAAE;MAC1D,IAAIi/B,SAAS,GAAG5B,UAAU,CAACsf,UAAU;MACrC1d,SAAS,CAAC75B,OAAO,CAAC,UAAUH,QAAQ,EAAE;QACpC,OAAOA,QAAQ,CAACo4B,UAAU,EAAEr9B,WAAW,CAAC;MAC1C,CAAC,CAAC;IACJ;IACA,SAASutD,iBAAiBA,CAAA,EAAG;MAC3B;QACE,OAAO,IAAI;MACb;IACF;IAOA,SAASkJ,UAAUA,CAACpiC,cAAc,EAAE;MAClCA,cAAc,CAACja,KAAK,IAAIrC,MAAM;IAChC;IAEA,SAAS2+C,OAAOA,CAACriC,cAAc,EAAE;MAC/BA,cAAc,CAACja,KAAK,IAAIhC,GAAG,GAAGc,SAAS;IACzC;IAEA,SAASy9C,iBAAiBA,CACxBt7C,MAAM,EACNgZ,cAAc,EACduiC,qBAAqB,EACrB58B,QAAQ,EACR;MACA;QAGE,IAAI/f,IAAI,GAAGoa,cAAc,CAACrZ,KAAK;QAE/B,OAAOf,IAAI,KAAK,IAAI,EAAE;UACpB,IAAIA,IAAI,CAACzQ,GAAG,KAAKnD,aAAa,IAAI4T,IAAI,CAACzQ,GAAG,KAAKlD,QAAQ,EAAE;YACvDgoB,kBAAkB,CAACjT,MAAM,EAAEpB,IAAI,CAACzP,SAAS,CAAC;UAC5C,CAAC,MAAM,IAAIyP,IAAI,CAACzQ,GAAG,KAAKpD,UAAU,IAAI,KAAK,EAAC,CAAC,KACxC,IAAI6T,IAAI,CAACe,KAAK,KAAK,IAAI,EAAE;YAC5Bf,IAAI,CAACe,KAAK,CAACzR,MAAM,GAAG0Q,IAAI;YACxBA,IAAI,GAAGA,IAAI,CAACe,KAAK;YACjB;UACF;UAEA,IAAIf,IAAI,KAAKoa,cAAc,EAAE;YAC3B;UACF;UAEA,OAAOpa,IAAI,CAACgB,OAAO,KAAK,IAAI,EAAE;YAE5B,IAAIhB,IAAI,CAAC1Q,MAAM,KAAK,IAAI,IAAI0Q,IAAI,CAAC1Q,MAAM,KAAK8qB,cAAc,EAAE;cAC1D;YACF;YAEApa,IAAI,GAAGA,IAAI,CAAC1Q,MAAM;UACpB;UAEA0Q,IAAI,CAACgB,OAAO,CAAC1R,MAAM,GAAG0Q,IAAI,CAAC1Q,MAAM;UACjC0Q,IAAI,GAAGA,IAAI,CAACgB,OAAO;QACrB;MACF;IACF;IAEA,SAAS47C,mBAAmBA,CAC1BpxD,OAAO,EACP4uB,cAAc,EACd72B,IAAI,EACJmzB,QAAQ,EACRjI,WAAW,EACX;MACA;QAGE,IAAIoI,QAAQ,GAAGrrB,OAAO,CAAC+wB,aAAa;QAEpC,IAAI1F,QAAQ,KAAKH,QAAQ,EAAE;UAGzB;QACF;QAEA8lC,UAAU,CAACpiC,cAAc,CAAC;MAC5B;IACF;IASA,SAASyiC,iCAAiCA,CACxCziC,cAAc,EACd72B,IAAI,EACJiN,KAAK,EACLie,WAAW,EACX;MACA;QAOE2L,cAAc,CAACja,KAAK,IAAI,CAACf,gBAAgB;QACzC;MACF;IACF;IAEA,SAAS09C,mBAAmBA,CAAC1iC,cAAc,EAAEizB,UAAU,EAAE;MACvD,IAAI0P,SAAS,GAAG1P,UAAU;MAE1B,IAAI0P,SAAS,KAAK,IAAI,EAAE;QAGtB3iC,cAAc,CAACja,KAAK,IAAIrC,MAAM;MAChC,CAAC,MAAM;QASL,IAAIsc,cAAc,CAACja,KAAK,GAAG3B,aAAa,EAAE;UACxC,IAAI40C,SAAS,GAGXh5B,cAAc,CAAC7qB,GAAG,KAAKnC,kBAAkB,GACrCgjB,kBAAkB,CAAC,CAAC,GACpBlD,aAAa;UACnBkN,cAAc,CAAC3M,KAAK,GAAGiD,UAAU,CAAC0J,cAAc,CAAC3M,KAAK,EAAE2lC,SAAS,CAAC;QACpE;MACF;IACF;IAEA,SAAS4J,cAAcA,CAACxxD,OAAO,EAAE4uB,cAAc,EAAE7D,OAAO,EAAEC,OAAO,EAAE;MACjE;QAEE,IAAID,OAAO,KAAKC,OAAO,EAAE;UACvBgmC,UAAU,CAACpiC,cAAc,CAAC;QAC5B;MACF;IACF;IAEA,SAAS6iC,kBAAkBA,CAACjF,WAAW,EAAEkF,wBAAwB,EAAE;MACjE,QAAQlF,WAAW,CAACX,QAAQ;QAC1B,KAAK,QAAQ;UAAE;YAMb,IAAI8F,QAAQ,GAAGnF,WAAW,CAACD,IAAI;YAC/B,IAAIqF,YAAY,GAAG,IAAI;YAEvB,OAAOD,QAAQ,KAAK,IAAI,EAAE;cACxB,IAAIA,QAAQ,CAACntD,SAAS,KAAK,IAAI,EAAE;gBAC/BotD,YAAY,GAAGD,QAAQ;cACzB;cAEAA,QAAQ,GAAGA,QAAQ,CAACn8C,OAAO;YAC7B;YAGA,IAAIo8C,YAAY,KAAK,IAAI,EAAE;cAEzBpF,WAAW,CAACD,IAAI,GAAG,IAAI;YACzB,CAAC,MAAM;cAGLqF,YAAY,CAACp8C,OAAO,GAAG,IAAI;YAC7B;YAEA;UACF;QAEA,KAAK,WAAW;UAAE;YAMhB,IAAIq8C,SAAS,GAAGrF,WAAW,CAACD,IAAI;YAChC,IAAIuF,aAAa,GAAG,IAAI;YAExB,OAAOD,SAAS,KAAK,IAAI,EAAE;cACzB,IAAIA,SAAS,CAACrtD,SAAS,KAAK,IAAI,EAAE;gBAChCstD,aAAa,GAAGD,SAAS;cAC3B;cAEAA,SAAS,GAAGA,SAAS,CAACr8C,OAAO;YAC/B;YAGA,IAAIs8C,aAAa,KAAK,IAAI,EAAE;cAE1B,IAAI,CAACJ,wBAAwB,IAAIlF,WAAW,CAACD,IAAI,KAAK,IAAI,EAAE;gBAG1DC,WAAW,CAACD,IAAI,CAAC/2C,OAAO,GAAG,IAAI;cACjC,CAAC,MAAM;gBACLg3C,WAAW,CAACD,IAAI,GAAG,IAAI;cACzB;YACF,CAAC,MAAM;cAGLuF,aAAa,CAACt8C,OAAO,GAAG,IAAI;YAC9B;YAEA;UACF;MACF;IACF;IAEA,SAASu8C,gBAAgBA,CAACC,aAAa,EAAE;MACvC,IAAIC,UAAU,GACZD,aAAa,CAACxtD,SAAS,KAAK,IAAI,IAChCwtD,aAAa,CAACxtD,SAAS,CAAC+Q,KAAK,KAAKy8C,aAAa,CAACz8C,KAAK;MACvD,IAAI28C,aAAa,GAAG7yC,OAAO;MAC3B,IAAIkrC,YAAY,GAAGt4C,SAAS;MAE5B,IAAI,CAACggD,UAAU,EAAE;QAEf,IAAI,CAACD,aAAa,CAAChhC,IAAI,GAAGrS,WAAW,MAAMF,MAAM,EAAE;UAGjD,IAAIs8B,cAAc,GAAGiX,aAAa,CAACjX,cAAc;UACjD,IAAIkP,gBAAgB,GAAG+H,aAAa,CAAChX,gBAAgB;UACrD,IAAIzlC,KAAK,GAAGy8C,aAAa,CAACz8C,KAAK;UAE/B,OAAOA,KAAK,KAAK,IAAI,EAAE;YACrB28C,aAAa,GAAGhtC,UAAU,CACxBgtC,aAAa,EACbhtC,UAAU,CAAC3P,KAAK,CAAC0M,KAAK,EAAE1M,KAAK,CAACif,UAAU,CAC1C,CAAC;YACD+1B,YAAY,IAAIh1C,KAAK,CAACg1C,YAAY;YAClCA,YAAY,IAAIh1C,KAAK,CAACZ,KAAK;YAS3BomC,cAAc,IAAIxlC,KAAK,CAACwlC,cAAc;YAEtCkP,gBAAgB,IAAI10C,KAAK,CAAC00C,gBAAgB;YAC1C10C,KAAK,GAAGA,KAAK,CAACC,OAAO;UACvB;UAEAw8C,aAAa,CAACjX,cAAc,GAAGA,cAAc;UAC7CiX,aAAa,CAAC/H,gBAAgB,GAAGA,gBAAgB;QACnD,CAAC,MAAM;UACL,IAAIv0C,MAAM,GAAGs8C,aAAa,CAACz8C,KAAK;UAEhC,OAAOG,MAAM,KAAK,IAAI,EAAE;YACtBw8C,aAAa,GAAGhtC,UAAU,CACxBgtC,aAAa,EACbhtC,UAAU,CAACxP,MAAM,CAACuM,KAAK,EAAEvM,MAAM,CAAC8e,UAAU,CAC5C,CAAC;YACD+1B,YAAY,IAAI70C,MAAM,CAAC60C,YAAY;YACnCA,YAAY,IAAI70C,MAAM,CAACf,KAAK;YAI5Be,MAAM,CAAC5R,MAAM,GAAGkuD,aAAa;YAC7Bt8C,MAAM,GAAGA,MAAM,CAACF,OAAO;UACzB;QACF;QAEAw8C,aAAa,CAACzH,YAAY,IAAIA,YAAY;MAC5C,CAAC,MAAM;QAEL,IAAI,CAACyH,aAAa,CAAChhC,IAAI,GAAGrS,WAAW,MAAMF,MAAM,EAAE;UAGjD,IAAI0zC,iBAAiB,GAAGH,aAAa,CAAChX,gBAAgB;UACtD,IAAIoX,OAAO,GAAGJ,aAAa,CAACz8C,KAAK;UAEjC,OAAO68C,OAAO,KAAK,IAAI,EAAE;YACvBF,aAAa,GAAGhtC,UAAU,CACxBgtC,aAAa,EACbhtC,UAAU,CAACktC,OAAO,CAACnwC,KAAK,EAAEmwC,OAAO,CAAC59B,UAAU,CAC9C,CAAC;YAKD+1B,YAAY,IAAI6H,OAAO,CAAC7H,YAAY,GAAGn2C,UAAU;YACjDm2C,YAAY,IAAI6H,OAAO,CAACz9C,KAAK,GAAGP,UAAU;YAE1C+9C,iBAAiB,IAAIC,OAAO,CAACnI,gBAAgB;YAC7CmI,OAAO,GAAGA,OAAO,CAAC58C,OAAO;UAC3B;UAEAw8C,aAAa,CAAC/H,gBAAgB,GAAGkI,iBAAiB;QACpD,CAAC,MAAM;UACL,IAAIE,OAAO,GAAGL,aAAa,CAACz8C,KAAK;UAEjC,OAAO88C,OAAO,KAAK,IAAI,EAAE;YACvBH,aAAa,GAAGhtC,UAAU,CACxBgtC,aAAa,EACbhtC,UAAU,CAACmtC,OAAO,CAACpwC,KAAK,EAAEowC,OAAO,CAAC79B,UAAU,CAC9C,CAAC;YAKD+1B,YAAY,IAAI8H,OAAO,CAAC9H,YAAY,GAAGn2C,UAAU;YACjDm2C,YAAY,IAAI8H,OAAO,CAAC19C,KAAK,GAAGP,UAAU;YAI1Ci+C,OAAO,CAACvuD,MAAM,GAAGkuD,aAAa;YAC9BK,OAAO,GAAGA,OAAO,CAAC78C,OAAO;UAC3B;QACF;QAEAw8C,aAAa,CAACzH,YAAY,IAAIA,YAAY;MAC5C;MAEAyH,aAAa,CAACx9B,UAAU,GAAG09B,aAAa;MACxC,OAAOD,UAAU;IACnB;IAEA,SAASK,kCAAkCA,CACzCtyD,OAAO,EACP4uB,cAAc,EACd+L,SAAS,EACT;MACA,IAAI43B,WAAW,GAAG1/B,iBAAiB,CAAC,CAAC;MAErC,IAAI8H,SAAS,KAAK,IAAI,IAAIA,SAAS,CAACkR,UAAU,KAAK,IAAI,EAAE;QAGvD,IAAI7rC,OAAO,KAAK,IAAI,EAAE;UACpB,IAAI,CAACuyD,WAAW,EAAE;YAChB,MAAM,IAAIrhE,KAAK,CACb,yEAAyE,GACvE,kCACJ,CAAC;UACH;UAEA0hC,oCAAoC,CAAC,CAAC;UACtCm/B,gBAAgB,CAACnjC,cAAc,CAAC;UAEhC;YACE,IAAI,CAACA,cAAc,CAACoC,IAAI,GAAGrS,WAAW,MAAMF,MAAM,EAAE;cAClD,IAAI+zC,kBAAkB,GAAG73B,SAAS,KAAK,IAAI;cAE3C,IAAI63B,kBAAkB,EAAE;gBAEtB,IAAIxJ,oBAAoB,GAAGp6B,cAAc,CAACrZ,KAAK;gBAE/C,IAAIyzC,oBAAoB,KAAK,IAAI,EAAE;kBAEjCp6B,cAAc,CAACq7B,gBAAgB,IAC7BjB,oBAAoB,CAACiB,gBAAgB;gBACzC;cACF;YACF;UACF;UAEA,OAAO,KAAK;QACd,CAAC,MAAM;UACL,IAAI,CAACr7B,cAAc,CAACja,KAAK,GAAGvC,UAAU,MAAMH,SAAS,EAAE;YAErD2c,cAAc,CAAC0C,aAAa,GAAG,IAAI;UACrC;UAMA1C,cAAc,CAACja,KAAK,IAAIrC,MAAM;UAC9By/C,gBAAgB,CAACnjC,cAAc,CAAC;UAEhC;YACE,IAAI,CAACA,cAAc,CAACoC,IAAI,GAAGrS,WAAW,MAAMF,MAAM,EAAE;cAClD,IAAIg0C,mBAAmB,GAAG93B,SAAS,KAAK,IAAI;cAE5C,IAAI83B,mBAAmB,EAAE;gBAEvB,IAAIC,qBAAqB,GAAG9jC,cAAc,CAACrZ,KAAK;gBAEhD,IAAIm9C,qBAAqB,KAAK,IAAI,EAAE;kBAElC9jC,cAAc,CAACq7B,gBAAgB,IAC7ByI,qBAAqB,CAACzI,gBAAgB;gBAC1C;cACF;YACF;UACF;UAEA,OAAO,KAAK;QACd;MACF,CAAC,MAAM;QAKLn3B,mCAAmC,CAAC,CAAC;QAErC,OAAO,IAAI;MACb;IACF;IAEA,SAAS6/B,YAAYA,CAAC3yD,OAAO,EAAE4uB,cAAc,EAAE3L,WAAW,EAAE;MAC1D,IAAIiI,QAAQ,GAAG0D,cAAc,CAACuW,YAAY;MAE1C,QAAQvW,cAAc,CAAC7qB,GAAG;QACxB,KAAKtD,sBAAsB;QAC3B,KAAKc,aAAa;QAClB,KAAKD,mBAAmB;QACxB,KAAKf,iBAAiB;QACtB,KAAKW,UAAU;QACf,KAAKJ,QAAQ;QACb,KAAKC,IAAI;QACT,KAAKI,QAAQ;QACb,KAAKH,eAAe;QACpB,KAAKK,aAAa;UAChB0wD,gBAAgB,CAACnjC,cAAc,CAAC;UAChC,OAAO,IAAI;QAEb,KAAKpuB,cAAc;UAAE;YACnB,IAAIquB,SAAS,GAAGD,cAAc,CAAC72B,IAAI;YAEnC,IAAIg3B,iBAAiB,CAACF,SAAS,CAAC,EAAE;cAChCY,UAAU,CAACb,cAAc,CAAC;YAC5B;YAEAmjC,gBAAgB,CAACnjC,cAAc,CAAC;YAChC,OAAO,IAAI;UACb;QAEA,KAAKluB,QAAQ;UAAE;YACb,IAAIkyD,SAAS,GAAGhkC,cAAc,CAAC7pB,SAAS;YACxCktB,gBAAgB,CAACrD,cAAc,CAAC;YAChCc,wBAAwB,CAACd,cAAc,CAAC;YAExC,IAAIgkC,SAAS,CAACtM,cAAc,EAAE;cAC5BsM,SAAS,CAAC/+D,OAAO,GAAG++D,SAAS,CAACtM,cAAc;cAC5CsM,SAAS,CAACtM,cAAc,GAAG,IAAI;YACjC;YAEA,IAAItmD,OAAO,KAAK,IAAI,IAAIA,OAAO,CAACuV,KAAK,KAAK,IAAI,EAAE;cAG9C,IAAIg9C,WAAW,GAAG1/B,iBAAiB,CAAC,CAAC;cAErC,IAAI0/B,WAAW,EAAE;gBAGfvB,UAAU,CAACpiC,cAAc,CAAC;cAC5B,CAAC,MAAM;gBACL,IAAI5uB,OAAO,KAAK,IAAI,EAAE;kBACpB,IAAIy6B,SAAS,GAAGz6B,OAAO,CAACsxB,aAAa;kBAErC,IAEE,CAACmJ,SAAS,CAAClJ,YAAY,IACvB,CAAC3C,cAAc,CAACja,KAAK,GAAGjC,iBAAiB,MAAMT,SAAS,EACxD;oBAOA2c,cAAc,CAACja,KAAK,IAAI/B,QAAQ;oBAIhCkgB,mCAAmC,CAAC,CAAC;kBACvC;gBACF;cACF;YACF;YACAi/B,gBAAgB,CAACnjC,cAAc,CAAC;YAEhC,OAAO,IAAI;UACb;QAEA,KAAK5sB,aAAa;QAElB,KAAKC,aAAa;QAElB,KAAKrB,aAAa;UAAE;YAClByxB,cAAc,CAACzD,cAAc,CAAC;YAC9B,IAAIigC,MAAM,GAAGjgC,cAAc,CAAC72B,IAAI;YAEhC,IAAIiI,OAAO,KAAK,IAAI,IAAI4uB,cAAc,CAAC7pB,SAAS,IAAI,IAAI,EAAE;cACxDqsD,mBAAmB,CAACpxD,OAAO,EAAE4uB,cAAc,EAAEigC,MAAM,EAAE3jC,QAAQ,CAAC;cAE9D,IAAIlrB,OAAO,CAAC4jC,GAAG,KAAKhV,cAAc,CAACgV,GAAG,EAAE;gBACtCqtB,OAAO,CAACriC,cAAc,CAAC;cACzB;YACF,CAAC,MAAM;cACL,IAAI,CAAC1D,QAAQ,EAAE;gBACb,IAAI0D,cAAc,CAAC7pB,SAAS,KAAK,IAAI,EAAE;kBACrC,MAAM,IAAI7T,KAAK,CACb,8DAA8D,GAC5D,iDACJ,CAAC;gBACH;gBAEA6gE,gBAAgB,CAACnjC,cAAc,CAAC;gBAChC,OAAO,IAAI;cACb;cAEA,IAAIikC,mBAAmB,GAAG3gC,cAAc,CAAC,CAAC;cAK1C,IAAI4gC,aAAa,GAAGjgC,iBAAiB,CAAC,CAAC;cAEvC,IAAIigC,aAAa,EAAE;gBAGjBpgC,4BAA4B,CAAC,CAAC;cAChC,CAAC,MAAM;gBACL,IAAIqgC,sBAAsB,GAAGnhC,oBAAoB,CAAC,CAAC;gBAEnD,IAAIohC,UAAU,GAAGjqC,cAAc,CAC7B8lC,MAAM,EACN3jC,QAAQ,EACR6nC,sBAAsB,EACtBF,mBAAmB,EACnBjkC,cACF,CAAC;gBAGDsiC,iBAAiB,CAAC8B,UAAU,EAAEpkC,cAAc,CAAC;gBAC7CA,cAAc,CAAC7pB,SAAS,GAAGiuD,UAAU;gBAIrC,IAAIxpC,uBAAuB,CAACwpC,UAAU,CAAC,EAAE;kBACvChC,UAAU,CAACpiC,cAAc,CAAC;gBAC5B;cACF;cAEA,IAAIA,cAAc,CAACgV,GAAG,KAAK,IAAI,EAAE;gBAE/BqtB,OAAO,CAACriC,cAAc,CAAC;cACzB;YACF;YAEAmjC,gBAAgB,CAACnjC,cAAc,CAAC;YAKhCyiC,iCAAiC,CAACziC,cAAc,CAAC;YACjD,OAAO,IAAI;UACb;QAEA,KAAK/tB,QAAQ;UAAE;YACb,IAAImqB,OAAO,GAAGE,QAAQ;YAEtB,IAAIlrB,OAAO,IAAI4uB,cAAc,CAAC7pB,SAAS,IAAI,IAAI,EAAE;cAC/C,IAAIgmB,OAAO,GAAG/qB,OAAO,CAAC+wB,aAAa;cAGnCygC,cAAc,CAACxxD,OAAO,EAAE4uB,cAAc,EAAE7D,OAAO,EAAEC,OAAO,CAAC;YAC3D,CAAC,MAAM;cACL,IAAI,OAAOA,OAAO,KAAK,QAAQ,EAAE;gBAC/B,IAAI4D,cAAc,CAAC7pB,SAAS,KAAK,IAAI,EAAE;kBACrC,MAAM,IAAI7T,KAAK,CACb,8DAA8D,GAC5D,iDACJ,CAAC;gBACH;cACF;cAEA,IAAI+hE,uBAAuB,GAAGrhC,oBAAoB,CAAC,CAAC;cAEpD,IAAIshC,oBAAoB,GAAGhhC,cAAc,CAAC,CAAC;cAE3C,IAAIihC,aAAa,GAAGtgC,iBAAiB,CAAC,CAAC;cAEvC,IAAIsgC,aAAa,EAAE;gBACjB,IAAIxgC,gCAAgC,CAAC,CAAC,EAAE;kBACtCq+B,UAAU,CAACpiC,cAAc,CAAC;gBAC5B;cACF,CAAC,MAAM;gBACLA,cAAc,CAAC7pB,SAAS,GAAGskB,kBAAkB,CAC3C2B,OAAO,EACPioC,uBAAuB,EACvBC,oBAAoB,EACpBtkC,cACF,CAAC;cACH;YACF;YAEAmjC,gBAAgB,CAACnjC,cAAc,CAAC;YAChC,OAAO,IAAI;UACb;QAEA,KAAKxtB,iBAAiB;UAAE;YACtB6pC,kBAAkB,CAACrc,cAAc,CAAC;YAClC,IAAI+L,SAAS,GAAG/L,cAAc,CAAC0C,aAAa;YAM5C,IACEtxB,OAAO,KAAK,IAAI,IACfA,OAAO,CAACsxB,aAAa,KAAK,IAAI,IAC7BtxB,OAAO,CAACsxB,aAAa,CAACua,UAAU,KAAK,IAAK,EAC5C;cACA,IAAIunB,+BAA+B,GACjCd,kCAAkC,CAChCtyD,OAAO,EACP4uB,cAAc,EACd+L,SACF,CAAC;cAEH,IAAI,CAACy4B,+BAA+B,EAAE;gBACpC,IAAIxkC,cAAc,CAACja,KAAK,GAAGjC,iBAAiB,EAAE;kBAG5C,OAAOkc,cAAc;gBACvB,CAAC,MAAM;kBAGL,OAAO,IAAI;gBACb;cACF;YACF;YAEA,IAAI,CAACA,cAAc,CAACja,KAAK,GAAGvC,UAAU,MAAMH,SAAS,EAAE;cAErD2c,cAAc,CAAC3M,KAAK,GAAGgB,WAAW;cAElC,IAAI,CAAC2L,cAAc,CAACoC,IAAI,GAAGrS,WAAW,MAAMF,MAAM,EAAE;gBAClD+8B,sBAAsB,CAAC5sB,cAAc,CAAC;cACxC;cAEA,OAAOA,cAAc;YACvB;YAEA,IAAIykC,cAAc,GAAG14B,SAAS,KAAK,IAAI;YACvC,IAAI24B,cAAc,GAChBtzD,OAAO,KAAK,IAAI,IAAIA,OAAO,CAACsxB,aAAa,KAAK,IAAI;YAGpD,IAAI+hC,cAAc,KAAKC,cAAc,EAAE;cAYrC,IAAID,cAAc,EAAE;gBAClB,IAAIE,gBAAgB,GAAG3kC,cAAc,CAACrZ,KAAK;gBAC3Cg+C,gBAAgB,CAAC5+C,KAAK,IAAI7B,UAAU;cACtC;YACF;YAEA,IAAI+uC,UAAU,GAAGjzB,cAAc,CAAC6K,WAAW;YAC3C63B,mBAAmB,CAAC1iC,cAAc,EAAEizB,UAAU,CAAC;YAE/CkQ,gBAAgB,CAACnjC,cAAc,CAAC;YAEhC;cACE,IAAI,CAACA,cAAc,CAACoC,IAAI,GAAGrS,WAAW,MAAMF,MAAM,EAAE;gBAClD,IAAI40C,cAAc,EAAE;kBAElB,IAAIrK,oBAAoB,GAAGp6B,cAAc,CAACrZ,KAAK;kBAE/C,IAAIyzC,oBAAoB,KAAK,IAAI,EAAE;oBAEjCp6B,cAAc,CAACq7B,gBAAgB,IAC7BjB,oBAAoB,CAACiB,gBAAgB;kBACzC;gBACF;cACF;YACF;YAEA,OAAO,IAAI;UACb;QAEA,KAAKtpD,UAAU;UACbsxB,gBAAgB,CAACrD,cAAc,CAAC;UAEhCmjC,gBAAgB,CAACnjC,cAAc,CAAC;UAChC,OAAO,IAAI;QAEb,KAAK3tB,eAAe;UAElB,IAAIpN,OAAO,GAAG+6B,cAAc,CAAC72B,IAAI,CAACqZ,QAAQ;UAC1C0+C,WAAW,CAACj8D,OAAO,EAAE+6B,cAAc,CAAC;UACpCmjC,gBAAgB,CAACnjC,cAAc,CAAC;UAChC,OAAO,IAAI;QAEb,KAAKptB,wBAAwB;UAAE;YAG7B,IAAIgtD,UAAU,GAAG5/B,cAAc,CAAC72B,IAAI;YAEpC,IAAIg3B,iBAAiB,CAACy/B,UAAU,CAAC,EAAE;cACjC/+B,UAAU,CAACb,cAAc,CAAC;YAC5B;YAEAmjC,gBAAgB,CAACnjC,cAAc,CAAC;YAChC,OAAO,IAAI;UACb;QAEA,KAAKltB,qBAAqB;UAAE;YAC1BwpC,sBAAsB,CAACtc,cAAc,CAAC;YACtC,IAAI49B,WAAW,GAAG59B,cAAc,CAAC0C,aAAa;YAE9C,IAAIk7B,WAAW,KAAK,IAAI,EAAE;cAGxBuF,gBAAgB,CAACnjC,cAAc,CAAC;cAChC,OAAO,IAAI;YACb;YAEA,IAAI4kC,iBAAiB,GACnB,CAAC5kC,cAAc,CAACja,KAAK,GAAGvC,UAAU,MAAMH,SAAS;YACnD,IAAIwhD,YAAY,GAAGjH,WAAW,CAAC9uB,SAAS;YAExC,IAAI+1B,YAAY,KAAK,IAAI,EAAE;cAEzB,IAAI,CAACD,iBAAiB,EAAE;gBAUtB,IAAIE,iBAAiB,GACnBC,wBAAwB,CAAC,CAAC,KACzB3zD,OAAO,KAAK,IAAI,IACf,CAACA,OAAO,CAAC2U,KAAK,GAAGvC,UAAU,MAAMH,SAAS,CAAC;gBAE/C,IAAI,CAACyhD,iBAAiB,EAAE;kBACtB,IAAI9nB,GAAG,GAAGhd,cAAc,CAACrZ,KAAK;kBAE9B,OAAOq2B,GAAG,KAAK,IAAI,EAAE;oBACnB,IAAIgoB,SAAS,GAAGjoB,kBAAkB,CAACC,GAAG,CAAC;oBAEvC,IAAIgoB,SAAS,KAAK,IAAI,EAAE;sBACtBJ,iBAAiB,GAAG,IAAI;sBACxB5kC,cAAc,CAACja,KAAK,IAAIvC,UAAU;sBAClCq/C,kBAAkB,CAACjF,WAAW,EAAE,KAAK,CAAC;sBAatC,IAAIpK,WAAW,GAAGwR,SAAS,CAACn6B,WAAW;sBACvC7K,cAAc,CAAC6K,WAAW,GAAG2oB,WAAW;sBACxCkP,mBAAmB,CAAC1iC,cAAc,EAAEwzB,WAAW,CAAC;sBAKhDxzB,cAAc,CAAC27B,YAAY,GAAGt4C,SAAS;sBACvCw3B,gBAAgB,CAAC7a,cAAc,EAAE3L,WAAW,CAAC;sBAG7CynB,uBAAuB,CACrB9b,cAAc,EACd4c,6BAA6B,CAC3BZ,mBAAmB,CAAC5qC,OAAO,EAC3BqrC,qBACF,CACF,CAAC;sBAED,OAAOzc,cAAc,CAACrZ,KAAK;oBAC7B;oBAEAq2B,GAAG,GAAGA,GAAG,CAACp2B,OAAO;kBACnB;gBACF;gBAEA,IACEg3C,WAAW,CAACD,IAAI,KAAK,IAAI,IACzB7xC,KAAK,CAAC,CAAC,GAAGm5C,mBAAmB,CAAC,CAAC,EAC/B;kBAIAjlC,cAAc,CAACja,KAAK,IAAIvC,UAAU;kBAClCohD,iBAAiB,GAAG,IAAI;kBACxB/B,kBAAkB,CAACjF,WAAW,EAAE,KAAK,CAAC;kBAStC59B,cAAc,CAAC3M,KAAK,GAAGZ,aAAa;gBACtC;cACF,CAAC,MAAM;gBACLowC,kBAAkB,CAACjF,WAAW,EAAE,KAAK,CAAC;cACxC;YACF,CAAC,MAAM;cAEL,IAAI,CAACgH,iBAAiB,EAAE;gBACtB,IAAIM,UAAU,GAAGnoB,kBAAkB,CAAC8nB,YAAY,CAAC;gBAEjD,IAAIK,UAAU,KAAK,IAAI,EAAE;kBACvBllC,cAAc,CAACja,KAAK,IAAIvC,UAAU;kBAClCohD,iBAAiB,GAAG,IAAI;kBAGxB,IAAIO,YAAY,GAAGD,UAAU,CAACr6B,WAAW;kBACzC7K,cAAc,CAAC6K,WAAW,GAAGs6B,YAAY;kBACzCzC,mBAAmB,CAAC1iC,cAAc,EAAEmlC,YAAY,CAAC;kBACjDtC,kBAAkB,CAACjF,WAAW,EAAE,IAAI,CAAC;kBAErC,IACEA,WAAW,CAACD,IAAI,KAAK,IAAI,IACzBC,WAAW,CAACX,QAAQ,KAAK,QAAQ,IACjC,CAAC4H,YAAY,CAACjvD,SAAS,IACvB,CAACwuB,cAAc,CAAC,CAAC,EACjB;oBAEA++B,gBAAgB,CAACnjC,cAAc,CAAC;oBAChC,OAAO,IAAI;kBACb;gBACF,CAAC,MAAM,IAILlU,KAAK,CAAC,CAAC,GAAG,CAAC,GAAG8xC,WAAW,CAACC,kBAAkB,GAC1CoH,mBAAmB,CAAC,CAAC,IACvB5wC,WAAW,KAAKvB,aAAa,EAC7B;kBAIAkN,cAAc,CAACja,KAAK,IAAIvC,UAAU;kBAClCohD,iBAAiB,GAAG,IAAI;kBACxB/B,kBAAkB,CAACjF,WAAW,EAAE,KAAK,CAAC;kBAStC59B,cAAc,CAAC3M,KAAK,GAAGZ,aAAa;gBACtC;cACF;cAEA,IAAImrC,WAAW,CAACF,WAAW,EAAE;gBAM3BmH,YAAY,CAACj+C,OAAO,GAAGoZ,cAAc,CAACrZ,KAAK;gBAC3CqZ,cAAc,CAACrZ,KAAK,GAAGk+C,YAAY;cACrC,CAAC,MAAM;gBACL,IAAIO,eAAe,GAAGxH,WAAW,CAACE,IAAI;gBAEtC,IAAIsH,eAAe,KAAK,IAAI,EAAE;kBAC5BA,eAAe,CAACx+C,OAAO,GAAGi+C,YAAY;gBACxC,CAAC,MAAM;kBACL7kC,cAAc,CAACrZ,KAAK,GAAGk+C,YAAY;gBACrC;gBAEAjH,WAAW,CAACE,IAAI,GAAG+G,YAAY;cACjC;YACF;YAEA,IAAIjH,WAAW,CAACD,IAAI,KAAK,IAAI,EAAE;cAG7B,IAAItsD,IAAI,GAAGusD,WAAW,CAACD,IAAI;cAC3BC,WAAW,CAAC9uB,SAAS,GAAGz9B,IAAI;cAC5BusD,WAAW,CAACD,IAAI,GAAGtsD,IAAI,CAACuV,OAAO;cAC/Bg3C,WAAW,CAACC,kBAAkB,GAAG/xC,KAAK,CAAC,CAAC;cACxCza,IAAI,CAACuV,OAAO,GAAG,IAAI;cAInB,IAAI2yC,eAAe,GAAGvd,mBAAmB,CAAC5qC,OAAO;cAEjD,IAAIwzD,iBAAiB,EAAE;gBACrBrL,eAAe,GAAG3c,6BAA6B,CAC7C2c,eAAe,EACf9c,qBACF,CAAC;cACH,CAAC,MAAM;gBACL8c,eAAe,GACbxd,oCAAoC,CAACwd,eAAe,CAAC;cACzD;cAEAzd,uBAAuB,CAAC9b,cAAc,EAAEu5B,eAAe,CAAC;cAGxD,OAAOloD,IAAI;YACb;YAEA8xD,gBAAgB,CAACnjC,cAAc,CAAC;YAChC,OAAO,IAAI;UACb;QAEA,KAAKjtB,cAAc;UAAE;YACnB;UACF;QAEA,KAAKC,kBAAkB;QACvB,KAAKC,qBAAqB;UAAE;YAC1BopC,kBAAkB,CAACrc,cAAc,CAAC;YAClCub,gBAAgB,CAACvb,cAAc,CAAC;YAChC,IAAI42B,UAAU,GAAG52B,cAAc,CAAC0C,aAAa;YAC7C,IAAI2iC,YAAY,GAAGzO,UAAU,KAAK,IAAI;YAEtC;cACE,IAAIxlD,OAAO,KAAK,IAAI,EAAE;gBACpB,IAAIk0D,UAAU,GAAGl0D,OAAO,CAACsxB,aAAa;gBACtC,IAAI6iC,YAAY,GAAGD,UAAU,KAAK,IAAI;gBAEtC,IAAIC,YAAY,KAAKF,YAAY,EAAE;kBACjCrlC,cAAc,CAACja,KAAK,IAAI7B,UAAU;gBACpC;cACF,CAAC,MAAM;gBAGL,IAAImhD,YAAY,EAAE;kBAChBrlC,cAAc,CAACja,KAAK,IAAI7B,UAAU;gBACpC;cACF;YACF;YAEA,IACE,CAACmhD,YAAY,IACb,CAACrlC,cAAc,CAACoC,IAAI,GAAGtS,cAAc,MAAMD,MAAM,EACjD;cACAszC,gBAAgB,CAACnjC,cAAc,CAAC;YAClC,CAAC,MAAM;cAGL,IACE7J,gBAAgB,CAAC9B,WAAW,EAAEvB,aAAa,CAAC,IAC5C,CAACkN,cAAc,CAACja,KAAK,GAAGvC,UAAU,MAAMiN,OAAO,EAC/C;gBACA0yC,gBAAgB,CAACnjC,cAAc,CAAC;gBAIhC,IAAIA,cAAc,CAAC27B,YAAY,IAAIp4C,SAAS,GAAGG,MAAM,CAAC,EAAE;kBACtDsc,cAAc,CAACja,KAAK,IAAI7B,UAAU;gBACpC;cACF;YACF;YAEA,IAAIkvC,cAAc,GAAGpzB,cAAc,CAAC6K,WAAW;YAE/C,IAAIuoB,cAAc,KAAK,IAAI,EAAE;cAC3B,IAAIoS,YAAY,GAAGpS,cAAc,CAACH,UAAU;cAC5CyP,mBAAmB,CAAC1iC,cAAc,EAAEwlC,YAAY,CAAC;YACnD;YACA,OAAO,IAAI;UACb;QAEA,KAAKtyD,cAAc;UAAE;YACnB,OAAO,IAAI;UACb;QAEA,KAAKC,sBAAsB;UAAE;YAC3B,OAAO,IAAI;UACb;MACF;MAEA,MAAM,IAAI7Q,KAAK,CACb,4BAA4B,GAC1B09B,cAAc,CAAC7qB,GAAG,GAClB,6CAA6C,GAC7C,8BACJ,CAAC;IACH;IAEA,SAASswD,UAAUA,CAACr0D,OAAO,EAAE4uB,cAAc,EAAE3L,WAAW,EAAE;MACxD,QAAQ2L,cAAc,CAAC7qB,GAAG;QACxB,KAAKvD,cAAc;UAAE;YACnB,IAAIquB,SAAS,GAAGD,cAAc,CAAC72B,IAAI;YAEnC,IAAIg3B,iBAAiB,CAACF,SAAS,CAAC,EAAE;cAChCY,UAAU,CAACb,cAAc,CAAC;YAC5B;YAEA,IAAIja,KAAK,GAAGia,cAAc,CAACja,KAAK;YAEhC,IAAIA,KAAK,GAAGrB,aAAa,EAAE;cACzBsb,cAAc,CAACja,KAAK,GAAIA,KAAK,GAAG,CAACrB,aAAa,GAAIlB,UAAU;cAE5D,IAAI,CAACwc,cAAc,CAACoC,IAAI,GAAGrS,WAAW,MAAMF,MAAM,EAAE;gBAClD+8B,sBAAsB,CAAC5sB,cAAc,CAAC;cACxC;cAEA,OAAOA,cAAc;YACvB;YAEA,OAAO,IAAI;UACb;QAEA,KAAKluB,QAAQ;UAAE;YACbuxB,gBAAgB,CAACrD,cAAc,CAAC;YAChCc,wBAAwB,CAACd,cAAc,CAAC;YACxC,IAAI0lC,MAAM,GAAG1lC,cAAc,CAACja,KAAK;YAEjC,IACE,CAAC2/C,MAAM,GAAGhhD,aAAa,MAAMrB,SAAS,IACtC,CAACqiD,MAAM,GAAGliD,UAAU,MAAMH,SAAS,EACnC;cAGA2c,cAAc,CAACja,KAAK,GAAI2/C,MAAM,GAAG,CAAChhD,aAAa,GAAIlB,UAAU;cAC7D,OAAOwc,cAAc;YACvB;YAEA,OAAO,IAAI;UACb;QAEA,KAAK5sB,aAAa;QAClB,KAAKC,aAAa;QAClB,KAAKrB,aAAa;UAAE;YAElByxB,cAAc,CAACzD,cAAc,CAAC;YAC9B,OAAO,IAAI;UACb;QAEA,KAAKxtB,iBAAiB;UAAE;YACtB6pC,kBAAkB,CAACrc,cAAc,CAAC;YAClC,IAAIs5B,aAAa,GAAGt5B,cAAc,CAAC0C,aAAa;YAEhD,IAAI42B,aAAa,KAAK,IAAI,IAAIA,aAAa,CAACrc,UAAU,KAAK,IAAI,EAAE;cAC/D,IAAIjd,cAAc,CAACpqB,SAAS,KAAK,IAAI,EAAE;gBACrC,MAAM,IAAItT,KAAK,CACb,uEAAuE,GACrE,8BACJ,CAAC;cACH;YACF;YAEA,IAAIqjE,OAAO,GAAG3lC,cAAc,CAACja,KAAK;YAElC,IAAI4/C,OAAO,GAAGjhD,aAAa,EAAE;cAC3Bsb,cAAc,CAACja,KAAK,GAAI4/C,OAAO,GAAG,CAACjhD,aAAa,GAAIlB,UAAU;cAE9D,IAAI,CAACwc,cAAc,CAACoC,IAAI,GAAGrS,WAAW,MAAMF,MAAM,EAAE;gBAClD+8B,sBAAsB,CAAC5sB,cAAc,CAAC;cACxC;cAEA,OAAOA,cAAc;YACvB;YAEA,OAAO,IAAI;UACb;QAEA,KAAKltB,qBAAqB;UAAE;YAC1BwpC,sBAAsB,CAACtc,cAAc,CAAC;YAGtC,OAAO,IAAI;UACb;QAEA,KAAKjuB,UAAU;UACbsxB,gBAAgB,CAACrD,cAAc,CAAC;UAChC,OAAO,IAAI;QAEb,KAAK3tB,eAAe;UAClB,IAAIpN,OAAO,GAAG+6B,cAAc,CAAC72B,IAAI,CAACqZ,QAAQ;UAC1C0+C,WAAW,CAACj8D,OAAO,EAAE+6B,cAAc,CAAC;UACpC,OAAO,IAAI;QAEb,KAAKhtB,kBAAkB;QACvB,KAAKC,qBAAqB;UAAE;YAC1BopC,kBAAkB,CAACrc,cAAc,CAAC;YAClCub,gBAAgB,CAACvb,cAAc,CAAC;YAChC,IAAI4lC,OAAO,GAAG5lC,cAAc,CAACja,KAAK;YAElC,IAAI6/C,OAAO,GAAGlhD,aAAa,EAAE;cAC3Bsb,cAAc,CAACja,KAAK,GAAI6/C,OAAO,GAAG,CAAClhD,aAAa,GAAIlB,UAAU;cAE9D,IAAI,CAACwc,cAAc,CAACoC,IAAI,GAAGrS,WAAW,MAAMF,MAAM,EAAE;gBAClD+8B,sBAAsB,CAAC5sB,cAAc,CAAC;cACxC;cAEA,OAAOA,cAAc;YACvB;YAEA,OAAO,IAAI;UACb;QAEA,KAAK9sB,cAAc;UACjB,OAAO,IAAI;QAEb,KAAKC,sBAAsB;UACzB,OAAO,IAAI;QAEb;UACE,OAAO,IAAI;MACf;IACF;IAEA,SAAS0yD,qBAAqBA,CAACz0D,OAAO,EAAE00D,eAAe,EAAEzxC,WAAW,EAAE;MACpE,QAAQyxC,eAAe,CAAC3wD,GAAG;QACzB,KAAKvD,cAAc;UAAE;YACnB,IAAIgvB,iBAAiB,GAAGklC,eAAe,CAAC38D,IAAI,CAACy3B,iBAAiB;YAE9D,IAAIA,iBAAiB,KAAK,IAAI,IAAIA,iBAAiB,KAAKv3B,SAAS,EAAE;cACjEw3B,UAAU,CAACilC,eAAe,CAAC;YAC7B;YAEA;UACF;QAEA,KAAKh0D,QAAQ;UAAE;YACbuxB,gBAAgB,CAACyiC,eAAe,CAAC;YACjChlC,wBAAwB,CAACglC,eAAe,CAAC;YACzC;UACF;QAEA,KAAK1yD,aAAa;QAClB,KAAKC,aAAa;QAClB,KAAKrB,aAAa;UAAE;YAClByxB,cAAc,CAACqiC,eAAe,CAAC;YAC/B;UACF;QAEA,KAAK/zD,UAAU;UACbsxB,gBAAgB,CAACyiC,eAAe,CAAC;UACjC;QAEF,KAAKtzD,iBAAiB;UACpB6pC,kBAAkB,CAACypB,eAAe,CAAC;UACnC;QAEF,KAAKhzD,qBAAqB;UACxBwpC,sBAAsB,CAACwpB,eAAe,CAAC;UACvC;QAEF,KAAKzzD,eAAe;UAClB,IAAIpN,OAAO,GAAG6gE,eAAe,CAAC38D,IAAI,CAACqZ,QAAQ;UAC3C0+C,WAAW,CAACj8D,OAAO,EAAE6gE,eAAe,CAAC;UACrC;QAEF,KAAK9yD,kBAAkB;QACvB,KAAKC,qBAAqB;UACxBopC,kBAAkB,CAACypB,eAAe,CAAC;UACnCvqB,gBAAgB,CAACuqB,eAAe,CAAC;UACjC;MACJ;IACF;IAEA,IAAIC,yCAAyC,GAAG,IAAI;IAEpD;MACEA,yCAAyC,GAAG,IAAI71B,GAAG,CAAC,CAAC;IACvD;IAGA,IAAI81B,wBAAwB,GAAG,KAAK;IACpC,IAAIC,yBAAyB,GAAG,KAAK;IACrC,IAAIC,eAAe,GAAG,OAAOC,OAAO,KAAK,UAAU,GAAGA,OAAO,GAAGj2B,GAAG;IACnE,IAAIk2B,UAAU,GAAG,IAAI;IAErB,IAAIC,eAAe,GAAG,IAAI;IAC1B,IAAIC,cAAc,GAAG,IAAI;IAEzB,SAASC,aAAaA,CAACn1D,OAAO,EAAE;MAC9B,OACE,CAACA,OAAO,CAACgxB,IAAI,GAAGrS,WAAW,MAAMF,MAAM,IACvC,CAAC22C,mBAAmB,CAAC,CAAC,GAAGC,aAAa,MAAMC,SAAS;IAEzD;IAEA,SAASC,wBAAwBA,CAACrjE,KAAK,EAAE;MAMvC;QACE6D,qBAAqB,CAAC,IAAI,EAAE,YAAY;UACtC,MAAM7D,KAAK;QACb,CAAC,CAAC;QACFqE,gBAAgB,CAAC,CAAC;MACpB;IACF;IAEA,SAASi/D,iCAAiCA,CAACx1D,OAAO,EAAElE,QAAQ,EAAE;MAC5DA,QAAQ,CAACkJ,KAAK,GAAGhF,OAAO,CAAC+wB,aAAa;MACtCj1B,QAAQ,CAAColC,KAAK,GAAGlhC,OAAO,CAACsxB,aAAa;MAEtC,IAAI6jC,aAAa,CAACn1D,OAAO,CAAC,EAAE;QAC1B,IAAI;UACFs7C,sBAAsB,CAAC,CAAC;UACxBx/C,QAAQ,CAAC25D,oBAAoB,CAAC,CAAC;QACjC,CAAC,SAAS;UACRxa,0BAA0B,CAACj7C,OAAO,CAAC;QACrC;MACF,CAAC,MAAM;QACLlE,QAAQ,CAAC25D,oBAAoB,CAAC,CAAC;MACjC;IACF;IAEA,SAASC,8BAA8BA,CACrC11D,OAAO,EACP21D,sBAAsB,EACtB75D,QAAQ,EACR;MACA,IAAI;QACF05D,iCAAiC,CAACx1D,OAAO,EAAElE,QAAQ,CAAC;MACtD,CAAC,CAAC,OAAO5J,KAAK,EAAE;QACd0jE,uBAAuB,CAAC51D,OAAO,EAAE21D,sBAAsB,EAAEzjE,KAAK,CAAC;MACjE;IACF;IAEA,SAAS2jE,eAAeA,CAAC71D,OAAO,EAAE21D,sBAAsB,EAAE;MACxD,IAAI;QACFG,eAAe,CAAC91D,OAAO,CAAC;MAC1B,CAAC,CAAC,OAAO9N,KAAK,EAAE;QACd0jE,uBAAuB,CAAC51D,OAAO,EAAE21D,sBAAsB,EAAEzjE,KAAK,CAAC;MACjE;IACF;IAEA,SAAS6jE,eAAeA,CAAC/1D,OAAO,EAAE21D,sBAAsB,EAAE;MACxD,IAAI/xB,GAAG,GAAG5jC,OAAO,CAAC4jC,GAAG;MACrB,IAAIoyB,UAAU,GAAGh2D,OAAO,CAACg2D,UAAU;MAEnC,IAAIpyB,GAAG,KAAK,IAAI,EAAE;QAChB,IAAI,OAAOoyB,UAAU,KAAK,UAAU,EAAE;UACpC,IAAI;YACF,IAAIb,aAAa,CAACn1D,OAAO,CAAC,EAAE;cAC1B,IAAI;gBACFs7C,sBAAsB,CAAC,CAAC;gBACxB0a,UAAU,CAAC,CAAC;cACd,CAAC,SAAS;gBACR/a,0BAA0B,CAACj7C,OAAO,CAAC;cACrC;YACF,CAAC,MAAM;cACLg2D,UAAU,CAAC,CAAC;YACd;UACF,CAAC,CAAC,OAAO9jE,KAAK,EAAE;YACd0jE,uBAAuB,CAAC51D,OAAO,EAAE21D,sBAAsB,EAAEzjE,KAAK,CAAC;UACjE,CAAC,SAAS;YAER8N,OAAO,CAACg2D,UAAU,GAAG,IAAI;YACzB,IAAIC,YAAY,GAAGj2D,OAAO,CAACwE,SAAS;YAEpC,IAAIyxD,YAAY,IAAI,IAAI,EAAE;cACxBA,YAAY,CAACD,UAAU,GAAG,IAAI;YAChC;UACF;QACF,CAAC,MAAM,IAAI,OAAOpyB,GAAG,KAAK,UAAU,EAAE;UACpC,IAAIsyB,MAAM;UAEV,IAAI;YACF,IAAIf,aAAa,CAACn1D,OAAO,CAAC,EAAE;cAC1B,IAAI;gBACFs7C,sBAAsB,CAAC,CAAC;gBACxB4a,MAAM,GAAGtyB,GAAG,CAAC,IAAI,CAAC;cACpB,CAAC,SAAS;gBACRqX,0BAA0B,CAACj7C,OAAO,CAAC;cACrC;YACF,CAAC,MAAM;cACLk2D,MAAM,GAAGtyB,GAAG,CAAC,IAAI,CAAC;YACpB;UACF,CAAC,CAAC,OAAO1xC,KAAK,EAAE;YACd0jE,uBAAuB,CAAC51D,OAAO,EAAE21D,sBAAsB,EAAEzjE,KAAK,CAAC;UACjE;UAEA;YACE,IAAI,OAAOgkE,MAAM,KAAK,UAAU,EAAE;cAChChkE,KAAK,CACH,qDAAqD,GACnD,8CAA8C,EAChD6f,yBAAyB,CAAC/R,OAAO,CACnC,CAAC;YACH;UACF;QACF,CAAC,MAAM;UAEL4jC,GAAG,CAAC5jC,OAAO,GAAG,IAAI;QACpB;MACF;IACF;IAEA,SAASm2D,iBAAiBA,CAACn2D,OAAO,EAAE21D,sBAAsB,EAAEvhB,OAAO,EAAE;MACnE,IAAI;QACFA,OAAO,CAAC,CAAC;MACX,CAAC,CAAC,OAAOliD,KAAK,EAAE;QACd0jE,uBAAuB,CAAC51D,OAAO,EAAE21D,sBAAsB,EAAEzjE,KAAK,CAAC;MACjE;IACF;IACA,IAAIkkE,iCAAiC,GAAG,KAAK;IAC7C,SAASC,2BAA2BA,CAACh5C,IAAI,EAAEkuC,UAAU,EAAE;MACrDyJ,UAAU,GAAGzJ,UAAU;MACvB+K,iCAAiC,CAAC,CAAC;MAEnC,IAAIC,UAAU,GAAGH,iCAAiC;MAClDA,iCAAiC,GAAG,KAAK;MACzC,OAAOG,UAAU;IACnB;IAEA,SAASD,iCAAiCA,CAAA,EAAG;MAC3C,OAAOtB,UAAU,KAAK,IAAI,EAAE;QAC1B,IAAIhjD,KAAK,GAAGgjD,UAAU;QAEtB,IAAIz/C,KAAK,GAAGvD,KAAK,CAACuD,KAAK;QAEvB,IACE,CAACvD,KAAK,CAACu4C,YAAY,GAAGv2C,kBAAkB,MAAM/B,SAAS,IACvDsD,KAAK,KAAK,IAAI,EACd;UACAA,KAAK,CAACzR,MAAM,GAAGkO,KAAK;UACpBgjD,UAAU,GAAGz/C,KAAK;QACpB,CAAC,MAAM;UACLihD,oCAAoC,CAAC,CAAC;QACxC;MACF;IACF;IAEA,SAASA,oCAAoCA,CAAA,EAAG;MAC9C,OAAOxB,UAAU,KAAK,IAAI,EAAE;QAC1B,IAAIhjD,KAAK,GAAGgjD,UAAU;QACtBz3B,eAAe,CAACvrB,KAAK,CAAC;QAEtB,IAAI;UACFykD,kCAAkC,CAACzkD,KAAK,CAAC;QAC3C,CAAC,CAAC,OAAO9f,KAAK,EAAE;UACd0jE,uBAAuB,CAAC5jD,KAAK,EAAEA,KAAK,CAAClO,MAAM,EAAE5R,KAAK,CAAC;QACrD;QAEAmrC,iBAAiB,CAAC,CAAC;QACnB,IAAI7nB,OAAO,GAAGxD,KAAK,CAACwD,OAAO;QAE3B,IAAIA,OAAO,KAAK,IAAI,EAAE;UACpBA,OAAO,CAAC1R,MAAM,GAAGkO,KAAK,CAAClO,MAAM;UAC7BkxD,UAAU,GAAGx/C,OAAO;UACpB;QACF;QAEAw/C,UAAU,GAAGhjD,KAAK,CAAClO,MAAM;MAC3B;IACF;IAEA,SAAS2yD,kCAAkCA,CAACR,YAAY,EAAE;MACxD,IAAIj2D,OAAO,GAAGi2D,YAAY,CAACzxD,SAAS;MACpC,IAAImQ,KAAK,GAAGshD,YAAY,CAACthD,KAAK;MAE9B,IAAI,CAACA,KAAK,GAAG/B,QAAQ,MAAMX,SAAS,EAAE;QACpCsrB,eAAe,CAAC04B,YAAY,CAAC;MAC/B;MAEA,QAAQA,YAAY,CAAClyD,GAAG;QACtB,KAAKxD,iBAAiB;UAAE;YACtB;UACF;QAEA,KAAKW,UAAU;QACf,KAAKI,mBAAmB;UAAE;YACxB;UACF;QAEA,KAAKd,cAAc;UAAE;YACnB,IAAI,CAACmU,KAAK,GAAG/B,QAAQ,MAAMX,SAAS,EAAE;cACpC,IAAIjS,OAAO,KAAK,IAAI,EAAE;gBACpB,IAAIiY,SAAS,GAAGjY,OAAO,CAAC+wB,aAAa;gBACrC,IAAI0J,SAAS,GAAGz6B,OAAO,CAACsxB,aAAa;gBACrC,IAAIx1B,QAAQ,GAAGm6D,YAAY,CAAClxD,SAAS;gBAIrC;kBACE,IACEkxD,YAAY,CAACl+D,IAAI,KAAKk+D,YAAY,CAAChwB,WAAW,IAC9C,CAACkd,4BAA4B,EAC7B;oBACA,IAAIrnD,QAAQ,CAACkJ,KAAK,KAAKixD,YAAY,CAACllC,aAAa,EAAE;sBACjD7+B,KAAK,CACH,mDAAmD,GACjD,2BAA2B,GAC3B,6DAA6D,GAC7D,8CAA8C,GAC9C,uBAAuB,EACzB6f,yBAAyB,CAACkkD,YAAY,CAAC,IAAI,UAC7C,CAAC;oBACH;oBAEA,IAAIn6D,QAAQ,CAAColC,KAAK,KAAK+0B,YAAY,CAAC3kC,aAAa,EAAE;sBACjDp/B,KAAK,CACH,mDAAmD,GACjD,2BAA2B,GAC3B,6DAA6D,GAC7D,8CAA8C,GAC9C,uBAAuB,EACzB6f,yBAAyB,CAACkkD,YAAY,CAAC,IAAI,UAC7C,CAAC;oBACH;kBACF;gBACF;gBAEA,IAAIS,QAAQ,GAAG56D,QAAQ,CAACkiD,uBAAuB,CAC7CiY,YAAY,CAAChwB,WAAW,KAAKgwB,YAAY,CAACl+D,IAAI,GAC1CkgB,SAAS,GACTwjC,mBAAmB,CAACwa,YAAY,CAACl+D,IAAI,EAAEkgB,SAAS,CAAC,EACrDwiB,SACF,CAAC;gBAED;kBACE,IAAIk8B,UAAU,GAAGhC,yCAAyC;kBAE1D,IACE+B,QAAQ,KAAKz+D,SAAS,IACtB,CAAC0+D,UAAU,CAACvvC,GAAG,CAAC6uC,YAAY,CAACl+D,IAAI,CAAC,EAClC;oBACA4+D,UAAU,CAAC3vC,GAAG,CAACivC,YAAY,CAACl+D,IAAI,CAAC;oBAEjC7F,KAAK,CACH,2DAA2D,GACzD,gDAAgD,EAClD6f,yBAAyB,CAACkkD,YAAY,CACxC,CAAC;kBACH;gBACF;gBAEAn6D,QAAQ,CAAC86D,mCAAmC,GAAGF,QAAQ;cACzD;YACF;YAEA;UACF;QAEA,KAAKh2D,QAAQ;UAAE;YACb;UACF;QAEA,KAAKE,aAAa;QAClB,KAAKoB,aAAa;QAClB,KAAKC,aAAa;QAClB,KAAKpB,QAAQ;QACb,KAAKF,UAAU;QACf,KAAKa,wBAAwB;UAE3B;QAEF;UAAS;YACP,IAAI,CAACmT,KAAK,GAAG/B,QAAQ,MAAMX,SAAS,EAAE;cACpC,MAAM,IAAI/gB,KAAK,CACb,oEAAoE,GAClE,wDACJ,CAAC;YACH;UACF;MACF;MAEA,IAAI,CAACyjB,KAAK,GAAG/B,QAAQ,MAAMX,SAAS,EAAE;QACpCorB,iBAAiB,CAAC,CAAC;MACrB;IACF;IAEA,SAASw5B,2BAA2BA,CAClCliD,KAAK,EACLshD,YAAY,EACZN,sBAAsB,EACtB;MACA,IAAIl8B,WAAW,GAAGw8B,YAAY,CAACx8B,WAAW;MAC1C,IAAI4W,UAAU,GAAG5W,WAAW,KAAK,IAAI,GAAGA,WAAW,CAAC4W,UAAU,GAAG,IAAI;MAErE,IAAIA,UAAU,KAAK,IAAI,EAAE;QACvB,IAAI8D,WAAW,GAAG9D,UAAU,CAACpwC,IAAI;QACjC,IAAIi0C,MAAM,GAAGC,WAAW;QAExB,GAAG;UACD,IAAI,CAACD,MAAM,CAACnwC,GAAG,GAAG4Q,KAAK,MAAMA,KAAK,EAAE;YAElC,IAAI7c,IAAI,GAAGo8C,MAAM,CAACp8C,IAAI;YACtB,IAAIs8C,OAAO,GAAGt8C,IAAI,CAACs8C,OAAO;YAE1B,IAAIA,OAAO,KAAKn8C,SAAS,EAAE;cACzBH,IAAI,CAACs8C,OAAO,GAAGn8C,SAAS;cAExB;gBACE,IAAI,CAAC0c,KAAK,GAAGu3B,SAAS,MAAMF,OAAO,EAAE;kBACnC8qB,2BAA2B,CAAC,IAAI,CAAC;gBACnC;cACF;cAEAX,iBAAiB,CAACF,YAAY,EAAEN,sBAAsB,EAAEvhB,OAAO,CAAC;cAEhE;gBACE,IAAI,CAACz/B,KAAK,GAAGu3B,SAAS,MAAMF,OAAO,EAAE;kBACnC8qB,2BAA2B,CAAC,KAAK,CAAC;gBACpC;cACF;YACF;UACF;UAEA5iB,MAAM,GAAGA,MAAM,CAACj0C,IAAI;QACtB,CAAC,QAAQi0C,MAAM,KAAKC,WAAW;MACjC;IACF;IAEA,SAAS4iB,yBAAyBA,CAACpiD,KAAK,EAAEshD,YAAY,EAAE;MACtD,IAAIx8B,WAAW,GAAGw8B,YAAY,CAACx8B,WAAW;MAC1C,IAAI4W,UAAU,GAAG5W,WAAW,KAAK,IAAI,GAAGA,WAAW,CAAC4W,UAAU,GAAG,IAAI;MAErE,IAAIA,UAAU,KAAK,IAAI,EAAE;QACvB,IAAI8D,WAAW,GAAG9D,UAAU,CAACpwC,IAAI;QACjC,IAAIi0C,MAAM,GAAGC,WAAW;QAExB,GAAG;UACD,IAAI,CAACD,MAAM,CAACnwC,GAAG,GAAG4Q,KAAK,MAAMA,KAAK,EAAE;YAClC,IAAI2D,MAAM,GAAG47B,MAAM,CAAC57B,MAAM;YAE1B;cACE,IAAI,CAAC3D,KAAK,GAAGu3B,SAAS,MAAMF,OAAO,EAAE;gBACnC8qB,2BAA2B,CAAC,IAAI,CAAC;cACnC;YACF;YAEA,IAAIh/D,IAAI,GAAGo8C,MAAM,CAACp8C,IAAI;YACtB,IAAIs8C,OAAO,GAAG97B,MAAM,CAAC,CAAC;YACtBxgB,IAAI,CAACs8C,OAAO,GAAGA,OAAO;YAEtB;cACE,IAAI,CAACz/B,KAAK,GAAGu3B,SAAS,MAAMF,OAAO,EAAE;gBACnC8qB,2BAA2B,CAAC,KAAK,CAAC;cACpC;YACF;YAEA;cACE,IAAI1iB,OAAO,KAAKn8C,SAAS,IAAI,OAAOm8C,OAAO,KAAK,UAAU,EAAE;gBAC1D,IAAIzG,QAAQ,GAAG,KAAK,CAAC;gBAErB,IAAI,CAACuG,MAAM,CAACnwC,GAAG,GAAGooC,MAAM,MAAMl6B,SAAS,EAAE;kBACvC07B,QAAQ,GAAG,iBAAiB;gBAC9B,CAAC,MAAM,IAAI,CAACuG,MAAM,CAACnwC,GAAG,GAAGmoC,SAAS,MAAMj6B,SAAS,EAAE;kBACjD07B,QAAQ,GAAG,oBAAoB;gBACjC,CAAC,MAAM;kBACLA,QAAQ,GAAG,WAAW;gBACxB;gBAEA,IAAI8Q,QAAQ,GAAG,KAAK,CAAC;gBAErB,IAAIrK,OAAO,KAAK,IAAI,EAAE;kBACpBqK,QAAQ,GACN,4DAA4D,GAC5D,oCAAoC;gBACxC,CAAC,MAAM,IAAI,OAAOrK,OAAO,CAAC/b,IAAI,KAAK,UAAU,EAAE;kBAC7ComB,QAAQ,GACN,8BAA8B,GAC9B9Q,QAAQ,GACR,2CAA2C,GAC3C,uDAAuD,GACvD,8BAA8B,GAC9BA,QAAQ,GACR,YAAY,GACZ,kCAAkC,GAClC,6BAA6B,GAC7B,qDAAqD,GACrD,cAAc,GACd,OAAO,GACP,kBAAkB,GAClB,kEAAkE,GAClE,yFAAyF;gBAC7F,CAAC,MAAM;kBACL8Q,QAAQ,GAAG,iBAAiB,GAAGrK,OAAO;gBACxC;gBAEAliD,KAAK,CACH,kDAAkD,GAChD,+BAA+B,EACjCy7C,QAAQ,EACR8Q,QACF,CAAC;cACH;YACF;UACF;UAEAvK,MAAM,GAAGA,MAAM,CAACj0C,IAAI;QACtB,CAAC,QAAQi0C,MAAM,KAAKC,WAAW;MACjC;IACF;IAEA,SAAS6iB,4BAA4BA,CAACC,YAAY,EAAEhB,YAAY,EAAE;MAChE,IAAIb,mBAAmB,CAAC,CAAC,GAAGC,aAAa,EAAE;QAEzC,IAAI,CAACY,YAAY,CAACthD,KAAK,GAAGrC,MAAM,MAAML,SAAS,EAAE;UAC/C,QAAQgkD,YAAY,CAAClyD,GAAG;YACtB,KAAK5C,QAAQ;cAAE;gBACb,IAAIk6C,qBAAqB,GACvB4a,YAAY,CAAClxD,SAAS,CAACs2C,qBAAqB;gBAC9C,IAAI6b,qBAAqB,GAAGjB,YAAY,CAACllC,aAAa;kBACpDknB,EAAE,GAAGif,qBAAqB,CAACjf,EAAE;kBAC7Bkf,YAAY,GAAGD,qBAAqB,CAACC,YAAY;gBAGnD,IAAItd,UAAU,GAAGU,aAAa,CAAC,CAAC;gBAChC,IAAIn1C,KAAK,GAAG6wD,YAAY,CAACzxD,SAAS,KAAK,IAAI,GAAG,OAAO,GAAG,QAAQ;gBAEhE;kBACE,IAAI21C,qBAAqB,CAAC,CAAC,EAAE;oBAC3B/0C,KAAK,GAAG,eAAe;kBACzB;gBACF;gBAEA,IAAI,OAAO+xD,YAAY,KAAK,UAAU,EAAE;kBACtCA,YAAY,CAAClf,EAAE,EAAE7yC,KAAK,EAAEi2C,qBAAqB,EAAExB,UAAU,CAAC;gBAC5D;gBAGA,IAAI5jC,WAAW,GAAGggD,YAAY,CAACnyD,MAAM;gBAErCszD,KAAK,EAAE,OAAOnhD,WAAW,KAAK,IAAI,EAAE;kBAClC,QAAQA,WAAW,CAAClS,GAAG;oBACrB,KAAKrD,QAAQ;sBACX,IAAI2c,IAAI,GAAGpH,WAAW,CAAClR,SAAS;sBAChCsY,IAAI,CAACg+B,qBAAqB,IAAIA,qBAAqB;sBACnD,MAAM+b,KAAK;oBAEb,KAAKj2D,QAAQ;sBACX,IAAIg6C,eAAe,GAAGllC,WAAW,CAAClR,SAAS;sBAC3Co2C,eAAe,CAACE,qBAAqB,IACnCA,qBAAqB;sBACvB,MAAM+b,KAAK;kBACf;kBAEAnhD,WAAW,GAAGA,WAAW,CAACnS,MAAM;gBAClC;gBAEA;cACF;UACF;QACF;MACF;IACF;IAEA,SAASuzD,uBAAuBA,CAACpB,YAAY,EAAEthB,SAAS,EAAE;MAKxD,IAAIwgB,aAAa,CAACc,YAAY,CAAC,EAAE;QAC/B,IAAI;UACF3a,sBAAsB,CAAC,CAAC;UACxByb,yBAAyB,CAACpiB,SAAS,EAAEshB,YAAY,CAAC;QACpD,CAAC,CAAC,OAAO/jE,KAAK,EAAE;UACd0jE,uBAAuB,CAACK,YAAY,EAAEA,YAAY,CAACnyD,MAAM,EAAE5R,KAAK,CAAC;QACnE;QAEA+oD,0BAA0B,CAACgb,YAAY,CAAC;MAC1C,CAAC,MAAM;QACL,IAAI;UACFc,yBAAyB,CAACpiB,SAAS,EAAEshB,YAAY,CAAC;QACpD,CAAC,CAAC,OAAO/jE,KAAK,EAAE;UACd0jE,uBAAuB,CAACK,YAAY,EAAEA,YAAY,CAACnyD,MAAM,EAAE5R,KAAK,CAAC;QACnE;MACF;IACF;IAEA,SAASolE,2BAA2BA,CAACrB,YAAY,EAAEj2D,OAAO,EAAE;MAC1D,IAAIlE,QAAQ,GAAGm6D,YAAY,CAAClxD,SAAS;MAErC,IAAI/E,OAAO,KAAK,IAAI,EAAE;QAIpB;UACE,IACEi2D,YAAY,CAACl+D,IAAI,KAAKk+D,YAAY,CAAChwB,WAAW,IAC9C,CAACkd,4BAA4B,EAC7B;YACA,IAAIrnD,QAAQ,CAACkJ,KAAK,KAAKixD,YAAY,CAACllC,aAAa,EAAE;cACjD7+B,KAAK,CACH,mDAAmD,GACjD,qBAAqB,GACrB,6DAA6D,GAC7D,8CAA8C,GAC9C,uBAAuB,EACzB6f,yBAAyB,CAACkkD,YAAY,CAAC,IAAI,UAC7C,CAAC;YACH;YAEA,IAAIn6D,QAAQ,CAAColC,KAAK,KAAK+0B,YAAY,CAAC3kC,aAAa,EAAE;cACjDp/B,KAAK,CACH,mDAAmD,GACjD,qBAAqB,GACrB,6DAA6D,GAC7D,8CAA8C,GAC9C,uBAAuB,EACzB6f,yBAAyB,CAACkkD,YAAY,CAAC,IAAI,UAC7C,CAAC;YACH;UACF;QACF;QAEA,IAAId,aAAa,CAACc,YAAY,CAAC,EAAE;UAC/B,IAAI;YACF3a,sBAAsB,CAAC,CAAC;YACxBx/C,QAAQ,CAACojD,iBAAiB,CAAC,CAAC;UAC9B,CAAC,CAAC,OAAOhtD,KAAK,EAAE;YACd0jE,uBAAuB,CAACK,YAAY,EAAEA,YAAY,CAACnyD,MAAM,EAAE5R,KAAK,CAAC;UACnE;UAEA+oD,0BAA0B,CAACgb,YAAY,CAAC;QAC1C,CAAC,MAAM;UACL,IAAI;YACFn6D,QAAQ,CAACojD,iBAAiB,CAAC,CAAC;UAC9B,CAAC,CAAC,OAAOhtD,KAAK,EAAE;YACd0jE,uBAAuB,CAACK,YAAY,EAAEA,YAAY,CAACnyD,MAAM,EAAE5R,KAAK,CAAC;UACnE;QACF;MACF,CAAC,MAAM;QACL,IAAI+lB,SAAS,GACXg+C,YAAY,CAAChwB,WAAW,KAAKgwB,YAAY,CAACl+D,IAAI,GAC1CiI,OAAO,CAAC+wB,aAAa,GACrB0qB,mBAAmB,CAACwa,YAAY,CAACl+D,IAAI,EAAEiI,OAAO,CAAC+wB,aAAa,CAAC;QACnE,IAAI0J,SAAS,GAAGz6B,OAAO,CAACsxB,aAAa;QAIrC;UACE,IACE2kC,YAAY,CAACl+D,IAAI,KAAKk+D,YAAY,CAAChwB,WAAW,IAC9C,CAACkd,4BAA4B,EAC7B;YACA,IAAIrnD,QAAQ,CAACkJ,KAAK,KAAKixD,YAAY,CAACllC,aAAa,EAAE;cACjD7+B,KAAK,CACH,mDAAmD,GACjD,sBAAsB,GACtB,6DAA6D,GAC7D,8CAA8C,GAC9C,uBAAuB,EACzB6f,yBAAyB,CAACkkD,YAAY,CAAC,IAAI,UAC7C,CAAC;YACH;YAEA,IAAIn6D,QAAQ,CAAColC,KAAK,KAAK+0B,YAAY,CAAC3kC,aAAa,EAAE;cACjDp/B,KAAK,CACH,mDAAmD,GACjD,sBAAsB,GACtB,6DAA6D,GAC7D,8CAA8C,GAC9C,uBAAuB,EACzB6f,yBAAyB,CAACkkD,YAAY,CAAC,IAAI,UAC7C,CAAC;YACH;UACF;QACF;QAEA,IAAId,aAAa,CAACc,YAAY,CAAC,EAAE;UAC/B,IAAI;YACF3a,sBAAsB,CAAC,CAAC;YACxBx/C,QAAQ,CAACmiD,kBAAkB,CACzBhmC,SAAS,EACTwiB,SAAS,EACT3+B,QAAQ,CAAC86D,mCACX,CAAC;UACH,CAAC,CAAC,OAAO1kE,KAAK,EAAE;YACd0jE,uBAAuB,CAACK,YAAY,EAAEA,YAAY,CAACnyD,MAAM,EAAE5R,KAAK,CAAC;UACnE;UAEA+oD,0BAA0B,CAACgb,YAAY,CAAC;QAC1C,CAAC,MAAM;UACL,IAAI;YACFn6D,QAAQ,CAACmiD,kBAAkB,CACzBhmC,SAAS,EACTwiB,SAAS,EACT3+B,QAAQ,CAAC86D,mCACX,CAAC;UACH,CAAC,CAAC,OAAO1kE,KAAK,EAAE;YACd0jE,uBAAuB,CAACK,YAAY,EAAEA,YAAY,CAACnyD,MAAM,EAAE5R,KAAK,CAAC;UACnE;QACF;MACF;IACF;IAEA,SAASqlE,oBAAoBA,CAACtB,YAAY,EAAE;MAG1C,IAAIx8B,WAAW,GAAGw8B,YAAY,CAACx8B,WAAW;MAE1C,IAAIA,WAAW,KAAK,IAAI,EAAE;QACxB,IAAI39B,QAAQ,GAAGm6D,YAAY,CAAClxD,SAAS;QAErC;UACE,IACEkxD,YAAY,CAACl+D,IAAI,KAAKk+D,YAAY,CAAChwB,WAAW,IAC9C,CAACkd,4BAA4B,EAC7B;YACA,IAAIrnD,QAAQ,CAACkJ,KAAK,KAAKixD,YAAY,CAACllC,aAAa,EAAE;cACjD7+B,KAAK,CACH,mDAAmD,GACjD,+BAA+B,GAC/B,6DAA6D,GAC7D,8CAA8C,GAC9C,uBAAuB,EACzB6f,yBAAyB,CAACkkD,YAAY,CAAC,IAAI,UAC7C,CAAC;YACH;YAEA,IAAIn6D,QAAQ,CAAColC,KAAK,KAAK+0B,YAAY,CAAC3kC,aAAa,EAAE;cACjDp/B,KAAK,CACH,mDAAmD,GACjD,+BAA+B,GAC/B,6DAA6D,GAC7D,8CAA8C,GAC9C,uBAAuB,EACzB6f,yBAAyB,CAACkkD,YAAY,CAAC,IAAI,UAC7C,CAAC;YACH;UACF;QACF;QAIA,IAAI;UACF15B,eAAe,CAAC9C,WAAW,EAAE39B,QAAQ,CAAC;QACxC,CAAC,CAAC,OAAO5J,KAAK,EAAE;UACd0jE,uBAAuB,CAACK,YAAY,EAAEA,YAAY,CAACnyD,MAAM,EAAE5R,KAAK,CAAC;QACnE;MACF;IACF;IAEA,SAASslE,wBAAwBA,CAACvB,YAAY,EAAE;MAC9C,IAAIl+D,IAAI,GAAGk+D,YAAY,CAACl+D,IAAI;MAC5B,IAAIiN,KAAK,GAAGixD,YAAY,CAACllC,aAAa;MACtC,IAAIj1B,QAAQ,GAAGm6D,YAAY,CAAClxD,SAAS;MAErC,IAAI;QACFkmB,WAAW,CAACnvB,QAAQ,EAAE/D,IAAI,EAAEiN,KAAK,EAAEixD,YAAY,CAAC;MAClD,CAAC,CAAC,OAAO/jE,KAAK,EAAE;QACd0jE,uBAAuB,CAACK,YAAY,EAAEA,YAAY,CAACnyD,MAAM,EAAE5R,KAAK,CAAC;MACnE;IACF;IAEA,SAASulE,oBAAoBA,CAACxB,YAAY,EAAEj2D,OAAO,EAAE;MACnD,IAAIo1D,mBAAmB,CAAC,CAAC,GAAGC,aAAa,EAAE;QACzC,IAAI;UACF,IAAIqC,sBAAsB,GAAGzB,YAAY,CAACllC,aAAa;YACrD4mC,QAAQ,GAAGD,sBAAsB,CAACC,QAAQ;YAC1CC,QAAQ,GAAGF,sBAAsB,CAACE,QAAQ;UAC5C,IAAI1c,cAAc,GAAG+a,YAAY,CAAClxD,SAAS,CAACm2C,cAAc;UAC1D,IAAIrB,UAAU,GAAGU,aAAa,CAAC,CAAC;UAChC,IAAIn1C,KAAK,GAAGpF,OAAO,KAAK,IAAI,GAAG,OAAO,GAAG,QAAQ;UAEjD,IAAIyO,+BAA+B,EAAE;YACnC,IAAI0rC,qBAAqB,CAAC,CAAC,EAAE;cAC3B/0C,KAAK,GAAG,eAAe;YACzB;UACF;UAEA,IAAI,OAAOwyD,QAAQ,KAAK,UAAU,EAAE;YAClCA,QAAQ,CACN3B,YAAY,CAACllC,aAAa,CAACknB,EAAE,EAC7B7yC,KAAK,EACL6wD,YAAY,CAAClb,cAAc,EAC3Bkb,YAAY,CAAChM,gBAAgB,EAC7BgM,YAAY,CAACvb,eAAe,EAC5Bb,UACF,CAAC;UACH;UAEA,IAAIrrC,yBAAyB,EAAE;YAC7B,IAAI,OAAOmpD,QAAQ,KAAK,UAAU,EAAE;cAClCA,QAAQ,CACN1B,YAAY,CAACllC,aAAa,CAACknB,EAAE,EAC7B7yC,KAAK,EACL81C,cAAc,EACdrB,UACF,CAAC;YACH;YAIAge,mCAAmC,CAAC5B,YAAY,CAAC;YAGjD,IAAIhgD,WAAW,GAAGggD,YAAY,CAACnyD,MAAM;YAErCszD,KAAK,EAAE,OAAOnhD,WAAW,KAAK,IAAI,EAAE;cAClC,QAAQA,WAAW,CAAClS,GAAG;gBACrB,KAAKrD,QAAQ;kBACX,IAAI2c,IAAI,GAAGpH,WAAW,CAAClR,SAAS;kBAChCsY,IAAI,CAAC69B,cAAc,IAAIA,cAAc;kBACrC,MAAMkc,KAAK;gBAEb,KAAKj2D,QAAQ;kBACX,IAAIg6C,eAAe,GAAGllC,WAAW,CAAClR,SAAS;kBAC3Co2C,eAAe,CAACD,cAAc,IAAIA,cAAc;kBAChD,MAAMkc,KAAK;cACf;cAEAnhD,WAAW,GAAGA,WAAW,CAACnS,MAAM;YAClC;UACF;QACF,CAAC,CAAC,OAAO5R,KAAK,EAAE;UACd0jE,uBAAuB,CAACK,YAAY,EAAEA,YAAY,CAACnyD,MAAM,EAAE5R,KAAK,CAAC;QACnE;MACF;IACF;IAEA,SAAS4lE,yBAAyBA,CAChCb,YAAY,EACZj3D,OAAO,EACPi2D,YAAY,EACZ8B,cAAc,EACd;MAGA,IAAIpjD,KAAK,GAAGshD,YAAY,CAACthD,KAAK;MAE9B,QAAQshD,YAAY,CAAClyD,GAAG;QACtB,KAAKxD,iBAAiB;QACtB,KAAKW,UAAU;QACf,KAAKI,mBAAmB;UAAE;YACxB02D,gCAAgC,CAACf,YAAY,EAAEhB,YAAY,CAAC;YAE5D,IAAIthD,KAAK,GAAGrC,MAAM,EAAE;cAClB+kD,uBAAuB,CAACpB,YAAY,EAAE9pB,MAAM,GAAGF,SAAS,CAAC;YAC3D;YAEA;UACF;QAEA,KAAKzrC,cAAc;UAAE;YACnBw3D,gCAAgC,CAACf,YAAY,EAAEhB,YAAY,CAAC;YAE5D,IAAIthD,KAAK,GAAGrC,MAAM,EAAE;cAClBglD,2BAA2B,CAACrB,YAAY,EAAEj2D,OAAO,CAAC;YACpD;YAEA,IAAI2U,KAAK,GAAGlC,QAAQ,EAAE;cACpB8kD,oBAAoB,CAACtB,YAAY,CAAC;YACpC;YAEA,IAAIthD,KAAK,GAAGhC,GAAG,EAAE;cACfkjD,eAAe,CAACI,YAAY,EAAEA,YAAY,CAACnyD,MAAM,CAAC;YACpD;YAEA;UACF;QAEA,KAAKpD,QAAQ;UAAE;YACbs3D,gCAAgC,CAACf,YAAY,EAAEhB,YAAY,CAAC;YAE5D,IAAIthD,KAAK,GAAGlC,QAAQ,EAAE;cAGpB,IAAIgnB,WAAW,GAAGw8B,YAAY,CAACx8B,WAAW;cAE1C,IAAIA,WAAW,KAAK,IAAI,EAAE;gBACxB,IAAI39B,QAAQ,GAAG,IAAI;gBAEnB,IAAIm6D,YAAY,CAAC1gD,KAAK,KAAK,IAAI,EAAE;kBAC/B,QAAQ0gD,YAAY,CAAC1gD,KAAK,CAACxR,GAAG;oBAC5B,KAAK9B,aAAa;oBAClB,KAAKrB,aAAa;sBAChB9E,QAAQ,GAAGiuB,iBAAiB,CAACksC,YAAY,CAAC1gD,KAAK,CAACxQ,SAAS,CAAC;sBAC1D;oBAEF,KAAKvE,cAAc;sBACjB1E,QAAQ,GAAGm6D,YAAY,CAAC1gD,KAAK,CAACxQ,SAAS;sBACvC;kBACJ;gBACF;gBAEA,IAAI;kBACFw3B,eAAe,CAAC9C,WAAW,EAAE39B,QAAQ,CAAC;gBACxC,CAAC,CAAC,OAAO5J,KAAK,EAAE;kBACd0jE,uBAAuB,CACrBK,YAAY,EACZA,YAAY,CAACnyD,MAAM,EACnB5R,KACF,CAAC;gBACH;cACF;YACF;YAEA;UACF;QAEA,KAAK8P,aAAa;QAElB,KAAKC,aAAa;QAClB,KAAKrB,aAAa;UAAE;YAClBo3D,gCAAgC,CAACf,YAAY,EAAEhB,YAAY,CAAC;YAK5D,IAAIj2D,OAAO,KAAK,IAAI,IAAI2U,KAAK,GAAGrC,MAAM,EAAE;cACtCklD,wBAAwB,CAACvB,YAAY,CAAC;YACxC;YAEA,IAAIthD,KAAK,GAAGhC,GAAG,EAAE;cACfkjD,eAAe,CAACI,YAAY,EAAEA,YAAY,CAACnyD,MAAM,CAAC;YACpD;YAEA;UACF;QAEA,KAAK3C,QAAQ;UAAE;YACb62D,gCAAgC,CAACf,YAAY,EAAEhB,YAAY,CAAC;YAG5D,IAAIthD,KAAK,GAAGrC,MAAM,EAAE;cAClBmlD,oBAAoB,CAACxB,YAAY,EAAEj2D,OAAO,CAAC;YAC7C;YAEA;UACF;QAEA,KAAKoB,iBAAiB;UAAE;YACtB42D,gCAAgC,CAACf,YAAY,EAAEhB,YAAY,CAAC;YAE5D;UACF;QAEA,KAAKr0D,kBAAkB;UAAE;YACvB,IAAIq2D,YAAY,GAAG,CAAChC,YAAY,CAACjlC,IAAI,GAAGtS,cAAc,MAAMD,MAAM;YAElE,IAAIw5C,YAAY,EAAE;cAChB,IAAI1jC,QAAQ,GAAG0hC,YAAY,CAAC3kC,aAAa,KAAK,IAAI;cAClD,IAAI4mC,2BAA2B,GAC7B3jC,QAAQ,IAAIqgC,wBAAwB;cAEtC,IAAIsD,2BAA2B,EAAC,CAAC,KAC5B;gBAEH,IAAIC,SAAS,GACXn4D,OAAO,KAAK,IAAI,IAAIA,OAAO,CAACsxB,aAAa,KAAK,IAAI;gBACpD,IAAI8mC,4BAA4B,GAC9BD,SAAS,IAAItD,yBAAyB;gBACxC,IAAIwD,4BAA4B,GAAGzD,wBAAwB;gBAC3D,IAAI0D,6BAA6B,GAAGzD,yBAAyB;gBAC7DD,wBAAwB,GAAGsD,2BAA2B;gBACtDrD,yBAAyB,GAAGuD,4BAA4B;gBAExD,IAAIvD,yBAAyB,IAAI,CAACyD,6BAA6B,EAAE;kBAK/D,IAAIC,4BAA4B,GAC9B,CAACtC,YAAY,CAAC1L,YAAY,GAAGr2C,UAAU,MAAMjC,SAAS;kBACxDumD,wCAAwC,CACtCvB,YAAY,EACZhB,YAAY,EACZsC,4BACF,CAAC;gBACH,CAAC,MAAM;kBACLP,gCAAgC,CAACf,YAAY,EAAEhB,YAAY,CAAC;gBAC9D;gBAEArB,wBAAwB,GAAGyD,4BAA4B;gBACvDxD,yBAAyB,GAAGyD,6BAA6B;cAC3D;YACF,CAAC,MAAM;cACLN,gCAAgC,CAACf,YAAY,EAAEhB,YAAY,CAAC;YAC9D;YAEA,IAAIthD,KAAK,GAAGhC,GAAG,EAAE;cACf,IAAI3N,KAAK,GAAGixD,YAAY,CAACllC,aAAa;cAEtC,IAAI/rB,KAAK,CAACgsB,IAAI,KAAK,QAAQ,EAAE;gBAC3B6kC,eAAe,CAACI,YAAY,EAAEA,YAAY,CAACnyD,MAAM,CAAC;cACpD,CAAC,MAAM;gBACLiyD,eAAe,CAACE,YAAY,EAAEA,YAAY,CAACnyD,MAAM,CAAC;cACpD;YACF;YAEA;UACF;QAEA;UAAS;YACPk0D,gCAAgC,CAACf,YAAY,EAAEhB,YAAY,CAAC;YAC5D;UACF;MACF;IACF;IAEA,SAASwC,uBAAuBA,CAACxC,YAAY,EAAE1hC,QAAQ,EAAE;MAEvD,IAAImkC,eAAe,GAAG,IAAI;MAE1B;QAGE,IAAIlkD,IAAI,GAAGyhD,YAAY;QAEvB,OAAO,IAAI,EAAE;UACX,IAAIzhD,IAAI,CAACzQ,GAAG,KAAKnD,aAAa,IAAI,KAAK,IAAI,KAAK,EAAE;YAChD,IAAI83D,eAAe,KAAK,IAAI,EAAE;cAC5BA,eAAe,GAAGlkD,IAAI;cAEtB,IAAI;gBACF,IAAI1Y,QAAQ,GAAG0Y,IAAI,CAACzP,SAAS;gBAE7B,IAAIwvB,QAAQ,EAAE;kBACZzI,YAAY,CAAChwB,QAAQ,CAAC;gBACxB,CAAC,MAAM;kBACLmwB,cAAc,CAACzX,IAAI,CAACzP,SAAS,EAAEyP,IAAI,CAACuc,aAAa,CAAC;gBACpD;cACF,CAAC,CAAC,OAAO7+B,KAAK,EAAE;gBACd0jE,uBAAuB,CACrBK,YAAY,EACZA,YAAY,CAACnyD,MAAM,EACnB5R,KACF,CAAC;cACH;YACF;UACF,CAAC,MAAM,IAAIsiB,IAAI,CAACzQ,GAAG,KAAKlD,QAAQ,EAAE;YAChC,IAAI63D,eAAe,KAAK,IAAI,EAAE;cAC5B,IAAI;gBACF,IAAI5S,SAAS,GAAGtxC,IAAI,CAACzP,SAAS;gBAE9B,IAAIwvB,QAAQ,EAAE;kBACZvI,gBAAgB,CAAC85B,SAAS,CAAC;gBAC7B,CAAC,MAAM;kBACL55B,kBAAkB,CAAC45B,SAAS,EAAEtxC,IAAI,CAACuc,aAAa,CAAC;gBACnD;cACF,CAAC,CAAC,OAAO7+B,KAAK,EAAE;gBACd0jE,uBAAuB,CACrBK,YAAY,EACZA,YAAY,CAACnyD,MAAM,EACnB5R,KACF,CAAC;cACH;YACF;UACF,CAAC,MAAM,IACL,CAACsiB,IAAI,CAACzQ,GAAG,KAAKnC,kBAAkB,IAC9B4S,IAAI,CAACzQ,GAAG,KAAKlC,qBAAqB,KACpC2S,IAAI,CAAC8c,aAAa,KAAK,IAAI,IAC3B9c,IAAI,KAAKyhD,YAAY,EACtB,CAAC,KACG,IAAIzhD,IAAI,CAACe,KAAK,KAAK,IAAI,EAAE;YAC5Bf,IAAI,CAACe,KAAK,CAACzR,MAAM,GAAG0Q,IAAI;YACxBA,IAAI,GAAGA,IAAI,CAACe,KAAK;YACjB;UACF;UAEA,IAAIf,IAAI,KAAKyhD,YAAY,EAAE;YACzB;UACF;UAEA,OAAOzhD,IAAI,CAACgB,OAAO,KAAK,IAAI,EAAE;YAC5B,IAAIhB,IAAI,CAAC1Q,MAAM,KAAK,IAAI,IAAI0Q,IAAI,CAAC1Q,MAAM,KAAKmyD,YAAY,EAAE;cACxD;YACF;YAEA,IAAIyC,eAAe,KAAKlkD,IAAI,EAAE;cAC5BkkD,eAAe,GAAG,IAAI;YACxB;YAEAlkD,IAAI,GAAGA,IAAI,CAAC1Q,MAAM;UACpB;UAEA,IAAI40D,eAAe,KAAKlkD,IAAI,EAAE;YAC5BkkD,eAAe,GAAG,IAAI;UACxB;UAEAlkD,IAAI,CAACgB,OAAO,CAAC1R,MAAM,GAAG0Q,IAAI,CAAC1Q,MAAM;UACjC0Q,IAAI,GAAGA,IAAI,CAACgB,OAAO;QACrB;MACF;IACF;IAEA,SAASsgD,eAAeA,CAACG,YAAY,EAAE;MACrC,IAAIryB,GAAG,GAAGqyB,YAAY,CAACryB,GAAG;MAE1B,IAAIA,GAAG,KAAK,IAAI,EAAE;QAChB,IAAI9nC,QAAQ,GAAGm6D,YAAY,CAAClxD,SAAS;QACrC,IAAI4zD,aAAa;QAEjB,QAAQ1C,YAAY,CAAClyD,GAAG;UACtB,KAAK/B,aAAa;UAClB,KAAKC,aAAa;UAClB,KAAKrB,aAAa;YAChB+3D,aAAa,GAAG5uC,iBAAiB,CAACjuB,QAAQ,CAAC;YAC3C;UAEF;YACE68D,aAAa,GAAG78D,QAAQ;QAC5B;QAEA,IAAI,OAAO8nC,GAAG,KAAK,UAAU,EAAE;UAC7B,IAAIuxB,aAAa,CAACc,YAAY,CAAC,EAAE;YAC/B,IAAI;cACF3a,sBAAsB,CAAC,CAAC;cACxB2a,YAAY,CAACD,UAAU,GAAGpyB,GAAG,CAAC+0B,aAAa,CAAC;YAC9C,CAAC,SAAS;cACR1d,0BAA0B,CAACgb,YAAY,CAAC;YAC1C;UACF,CAAC,MAAM;YACLA,YAAY,CAACD,UAAU,GAAGpyB,GAAG,CAAC+0B,aAAa,CAAC;UAC9C;QACF,CAAC,MAAM;UACL;YACE,IAAI,CAAC/0B,GAAG,CAAClvC,cAAc,CAAC,SAAS,CAAC,EAAE;cAClCxC,KAAK,CACH,yCAAyC,GACvC,wDAAwD,EAC1D6f,yBAAyB,CAACkkD,YAAY,CACxC,CAAC;YACH;UACF;UAEAryB,GAAG,CAAC5jC,OAAO,GAAG24D,aAAa;QAC7B;MACF;IACF;IAEA,SAASC,mBAAmBA,CAAC5mD,KAAK,EAAE;MAiBlC,IAAIxN,SAAS,GAAGwN,KAAK,CAACxN,SAAS;MAE/B,IAAIA,SAAS,KAAK,IAAI,EAAE;QACtBA,SAAS,CAACV,MAAM,GAAG,IAAI;MACzB;MAEAkO,KAAK,CAAClO,MAAM,GAAG,IAAI;IACrB;IAEA,SAAS+0D,uBAAuBA,CAAC7mD,KAAK,EAAE;MACtC,IAAIxN,SAAS,GAAGwN,KAAK,CAACxN,SAAS;MAE/B,IAAIA,SAAS,KAAK,IAAI,EAAE;QACtBwN,KAAK,CAACxN,SAAS,GAAG,IAAI;QACtBq0D,uBAAuB,CAACr0D,SAAS,CAAC;MACpC;MAOAwN,KAAK,CAACuD,KAAK,GAAG,IAAI;MAClBvD,KAAK,CAAC4yB,SAAS,GAAG,IAAI;MACtB5yB,KAAK,CAACwD,OAAO,GAAG,IAAI;MAEpBxD,KAAK,CAACjN,SAAS,GAAG,IAAI;MAEtB;QACEiN,KAAK,CAACgrB,WAAW,GAAG,IAAI;MAC1B;MAIAhrB,KAAK,CAAClO,MAAM,GAAG,IAAI;MACnBkO,KAAK,CAAChP,YAAY,GAAG,IAAI;MACzBgP,KAAK,CAAC+e,aAAa,GAAG,IAAI;MAC1B/e,KAAK,CAACsf,aAAa,GAAG,IAAI;MAC1Btf,KAAK,CAACmzB,YAAY,GAAG,IAAI;MACzBnzB,KAAK,CAACjN,SAAS,GAAG,IAAI;MAEtBiN,KAAK,CAACynB,WAAW,GAAG,IAAI;IAC1B;IAEA,SAASq/B,kBAAkBA,CAAC9mD,KAAK,EAAE;MACjC,IAAI4D,MAAM,GAAG5D,KAAK,CAAClO,MAAM;MAEzB,OAAO8R,MAAM,KAAK,IAAI,EAAE;QACtB,IAAImjD,YAAY,CAACnjD,MAAM,CAAC,EAAE;UACxB,OAAOA,MAAM;QACf;QAEAA,MAAM,GAAGA,MAAM,CAAC9R,MAAM;MACxB;MAEA,MAAM,IAAI5S,KAAK,CACb,uEAAuE,GACrE,iCACJ,CAAC;IACH;IAEA,SAAS6nE,YAAYA,CAAC/mD,KAAK,EAAE;MAC3B,OACEA,KAAK,CAACjO,GAAG,KAAKnD,aAAa,IAC3BoR,KAAK,CAACjO,GAAG,KAAKrD,QAAQ,IACtB,KAAK,IACL,KAAK,IACLsR,KAAK,CAACjO,GAAG,KAAKpD,UAAU;IAE5B;IAEA,SAASq4D,cAAcA,CAAChnD,KAAK,EAAE;MAK7B,IAAIwC,IAAI,GAAGxC,KAAK;MAEhBinD,QAAQ,EAAE,OAAO,IAAI,EAAE;QAErB,OAAOzkD,IAAI,CAACgB,OAAO,KAAK,IAAI,EAAE;UAC5B,IAAIhB,IAAI,CAAC1Q,MAAM,KAAK,IAAI,IAAIi1D,YAAY,CAACvkD,IAAI,CAAC1Q,MAAM,CAAC,EAAE;YAGrD,OAAO,IAAI;UACb;UAEA0Q,IAAI,GAAGA,IAAI,CAAC1Q,MAAM;QACpB;QAEA0Q,IAAI,CAACgB,OAAO,CAAC1R,MAAM,GAAG0Q,IAAI,CAAC1Q,MAAM;QACjC0Q,IAAI,GAAGA,IAAI,CAACgB,OAAO;QAEnB,OACEhB,IAAI,CAACzQ,GAAG,KAAKnD,aAAa,IAC1B4T,IAAI,CAACzQ,GAAG,KAAKlD,QAAQ,IACrB,IAAI,IACJ2T,IAAI,CAACzQ,GAAG,KAAKtC,kBAAkB,EAC/B;UAGA,IAAI+S,IAAI,CAACG,KAAK,GAAGxC,SAAS,EAAE;YAE1B,SAAS8mD,QAAQ;UACnB;UAGA,IAAIzkD,IAAI,CAACe,KAAK,KAAK,IAAI,IAAIf,IAAI,CAACzQ,GAAG,KAAKpD,UAAU,EAAE;YAClD,SAASs4D,QAAQ;UACnB,CAAC,MAAM;YACLzkD,IAAI,CAACe,KAAK,CAACzR,MAAM,GAAG0Q,IAAI;YACxBA,IAAI,GAAGA,IAAI,CAACe,KAAK;UACnB;QACF;QAEA,IAAI,EAAEf,IAAI,CAACG,KAAK,GAAGxC,SAAS,CAAC,EAAE;UAE7B,OAAOqC,IAAI,CAACzP,SAAS;QACvB;MACF;IACF;IAEA,SAASm0D,eAAeA,CAACjD,YAAY,EAAE;MACrC,IAAIhgD,WAAW,GAAG6iD,kBAAkB,CAAC7C,YAAY,CAAC;MAElD,QAAQhgD,WAAW,CAAClS,GAAG;QACrB,KAAK9B,aAAa;QAElB,KAAKrB,aAAa;UAAE;YAClB,IAAIu4D,OAAO,GAAGljD,WAAW,CAAClR,SAAS;YAEnC,IAAIkR,WAAW,CAACtB,KAAK,GAAGnC,YAAY,EAAE;cACpCyD,WAAW,CAACtB,KAAK,IAAI,CAACnC,YAAY;YACpC;YAEA,IAAI4mD,OAAO,GAAGJ,cAAc,CAAC/C,YAAY,CAAC;YAG1CoD,2BAA2B,CAACpD,YAAY,EAAEmD,OAAO,EAAED,OAAO,CAAC;YAC3D;UACF;QAEA,KAAKz4D,QAAQ;QACb,KAAKC,UAAU;UAAE;YACf,IAAI24D,QAAQ,GAAGrjD,WAAW,CAAClR,SAAS,CAACwhC,aAAa;YAElD,IAAIgzB,QAAQ,GAAGP,cAAc,CAAC/C,YAAY,CAAC;YAE3CuD,wCAAwC,CACtCvD,YAAY,EACZsD,QAAQ,EACRD,QACF,CAAC;YACD;UACF;QAEA;UACE,MAAM,IAAIpoE,KAAK,CACb,kEAAkE,GAChE,iCACJ,CAAC;MACL;IACF;IAEA,SAASsoE,wCAAwCA,CAAChlD,IAAI,EAAEilD,MAAM,EAAE7jD,MAAM,EAAE;MACtE,IAAI7R,GAAG,GAAGyQ,IAAI,CAACzQ,GAAG;MAClB,IAAI21D,MAAM,GAAG31D,GAAG,KAAKnD,aAAa,IAAImD,GAAG,KAAKlD,QAAQ;MAEtD,IAAI64D,MAAM,EAAE;QACV,IAAI30D,SAAS,GAAGyP,IAAI,CAACzP,SAAS;QAE9B,IAAI00D,MAAM,EAAE;UACV/tC,uBAAuB,CAAC9V,MAAM,CAAC;QACjC,CAAC,MAAM;UACLgV,sBAAsB,CAAChV,MAAM,EAAE7Q,SAAS,CAAC;QAC3C;MACF,CAAC,MAAM,IAAIhB,GAAG,KAAKpD,UAAU,IAAI,KAAK,EAAC,CAAC,KACnC;QACH,IAAI4U,KAAK,GAAGf,IAAI,CAACe,KAAK;QAEtB,IAAIA,KAAK,KAAK,IAAI,EAAE;UAClBikD,wCAAwC,CAACjkD,KAAK,EAAEkkD,MAAM,EAAE7jD,MAAM,CAAC;UAC/D,IAAIJ,OAAO,GAAGD,KAAK,CAACC,OAAO;UAE3B,OAAOA,OAAO,KAAK,IAAI,EAAE;YACvBgkD,wCAAwC,CAAChkD,OAAO,EAAEikD,MAAM,EAAE7jD,MAAM,CAAC;YACjEJ,OAAO,GAAGA,OAAO,CAACA,OAAO;UAC3B;QACF;MACF;IACF;IAEA,SAAS6jD,2BAA2BA,CAAC7kD,IAAI,EAAEilD,MAAM,EAAE7jD,MAAM,EAAE;MACzD,IAAI7R,GAAG,GAAGyQ,IAAI,CAACzQ,GAAG;MAClB,IAAI21D,MAAM,GAAG31D,GAAG,KAAKnD,aAAa,IAAImD,GAAG,KAAKlD,QAAQ;MAEtD,IAAI64D,MAAM,EAAE;QACV,IAAI30D,SAAS,GAAGyP,IAAI,CAACzP,SAAS;QAE9B,IAAI00D,MAAM,EAAE;UACVnuC,YAAY,CAAC1V,MAAM,EAAE7Q,SAAS,EAAE00D,MAAM,CAAC;QACzC,CAAC,MAAM;UACLjvC,WAAW,CAAC5U,MAAM,EAAE7Q,SAAS,CAAC;QAChC;MACF,CAAC,MAAM,IAAIhB,GAAG,KAAKpD,UAAU,IAAI,KAAK,EAAC,CAAC,KACnC;QACH,IAAI4U,KAAK,GAAGf,IAAI,CAACe,KAAK;QAEtB,IAAIA,KAAK,KAAK,IAAI,EAAE;UAClB8jD,2BAA2B,CAAC9jD,KAAK,EAAEkkD,MAAM,EAAE7jD,MAAM,CAAC;UAClD,IAAIJ,OAAO,GAAGD,KAAK,CAACC,OAAO;UAE3B,OAAOA,OAAO,KAAK,IAAI,EAAE;YACvB6jD,2BAA2B,CAAC7jD,OAAO,EAAEikD,MAAM,EAAE7jD,MAAM,CAAC;YACpDJ,OAAO,GAAGA,OAAO,CAACA,OAAO;UAC3B;QACF;MACF;IACF;IAKA,IAAImkD,UAAU,GAAG,IAAI;IACrB,IAAIC,qBAAqB,GAAG,KAAK;IAEjC,SAASC,qBAAqBA,CAACx8C,IAAI,EAAE+lB,WAAW,EAAE02B,YAAY,EAAE;MAC9D;QAgBE,IAAIlkD,MAAM,GAAGwtB,WAAW;QAExB22B,UAAU,EAAE,OAAOnkD,MAAM,KAAK,IAAI,EAAE;UAClC,QAAQA,MAAM,CAAC7R,GAAG;YAChB,KAAK9B,aAAa;YAClB,KAAKrB,aAAa;cAAE;gBAClB+4D,UAAU,GAAG/jD,MAAM,CAAC7Q,SAAS;gBAC7B60D,qBAAqB,GAAG,KAAK;gBAC7B,MAAMG,UAAU;cAClB;YAEA,KAAKr5D,QAAQ;cAAE;gBACbi5D,UAAU,GAAG/jD,MAAM,CAAC7Q,SAAS,CAACwhC,aAAa;gBAC3CqzB,qBAAqB,GAAG,IAAI;gBAC5B,MAAMG,UAAU;cAClB;YAEA,KAAKp5D,UAAU;cAAE;gBACfg5D,UAAU,GAAG/jD,MAAM,CAAC7Q,SAAS,CAACwhC,aAAa;gBAC3CqzB,qBAAqB,GAAG,IAAI;gBAC5B,MAAMG,UAAU;cAClB;UACF;UAEAnkD,MAAM,GAAGA,MAAM,CAAC9R,MAAM;QACxB;QAEA,IAAI61D,UAAU,KAAK,IAAI,EAAE;UACvB,MAAM,IAAIzoE,KAAK,CACb,iEAAiE,GAC/D,uCACJ,CAAC;QACH;QAEA8oE,4BAA4B,CAAC38C,IAAI,EAAE+lB,WAAW,EAAE02B,YAAY,CAAC;QAC7DH,UAAU,GAAG,IAAI;QACjBC,qBAAqB,GAAG,KAAK;MAC/B;MAEAhB,mBAAmB,CAACkB,YAAY,CAAC;IACnC;IAEA,SAASG,kCAAkCA,CACzChD,YAAY,EACZtB,sBAAsB,EACtB//C,MAAM,EACN;MAEA,IAAIL,KAAK,GAAGK,MAAM,CAACL,KAAK;MAExB,OAAOA,KAAK,KAAK,IAAI,EAAE;QACrBykD,4BAA4B,CAC1B/C,YAAY,EACZtB,sBAAsB,EACtBpgD,KACF,CAAC;QACDA,KAAK,GAAGA,KAAK,CAACC,OAAO;MACvB;IACF;IAEA,SAASwkD,4BAA4BA,CACnC/C,YAAY,EACZtB,sBAAsB,EACtBmE,YAAY,EACZ;MACA57C,eAAe,CAAC47C,YAAY,CAAC;MAI7B,QAAQA,YAAY,CAAC/1D,GAAG;QACtB,KAAK/B,aAAa;QAElB,KAAKC,aAAa;QAElB,KAAKrB,aAAa;UAAE;YAClB,IAAI,CAACi0D,yBAAyB,EAAE;cAC9BkB,eAAe,CAAC+D,YAAY,EAAEnE,sBAAsB,CAAC;YACvD;UACF;QAEA,KAAK90D,QAAQ;UAAE;YAIb;cACE,IAAIq5D,eAAe,GAAGP,UAAU;cAChC,IAAIQ,0BAA0B,GAAGP,qBAAqB;cACtDD,UAAU,GAAG,IAAI;cACjBM,kCAAkC,CAChChD,YAAY,EACZtB,sBAAsB,EACtBmE,YACF,CAAC;cACDH,UAAU,GAAGO,eAAe;cAC5BN,qBAAqB,GAAGO,0BAA0B;cAElD,IAAIR,UAAU,KAAK,IAAI,EAAE;gBAGvB,IAAIC,qBAAqB,EAAE;kBACzBhuC,wBAAwB,CAAC+tC,UAAU,EAAEG,YAAY,CAAC/0D,SAAS,CAAC;gBAC9D,CAAC,MAAM;kBACL4mB,WAAW,CAACguC,UAAU,EAAEG,YAAY,CAAC/0D,SAAS,CAAC;gBACjD;cACF;YACF;YAEA;UACF;QAEA,KAAKtD,kBAAkB;UAAE;YAGvB;cACE,IAAIk4D,UAAU,KAAK,IAAI,EAAE;gBACvB,IAAIC,qBAAqB,EAAE;kBACzBvxC,kCAAkC,CAAC,CAAC;gBACtC,CAAC,MAAM;kBACLD,qBAAqB,CAAC,CAAC;gBACzB;cACF;YACF;YAEA;UACF;QAEA,KAAKznB,UAAU;UAAE;YACf;cAEE,IAAIy5D,gBAAgB,GAAGT,UAAU;cACjC,IAAIU,2BAA2B,GAAGT,qBAAqB;cACvDD,UAAU,GAAGG,YAAY,CAAC/0D,SAAS,CAACwhC,aAAa;cACjDqzB,qBAAqB,GAAG,IAAI;cAC5BK,kCAAkC,CAChChD,YAAY,EACZtB,sBAAsB,EACtBmE,YACF,CAAC;cACDH,UAAU,GAAGS,gBAAgB;cAC7BR,qBAAqB,GAAGS,2BAA2B;YACrD;YAEA;UACF;QAEA,KAAK95D,iBAAiB;QACtB,KAAKW,UAAU;QACf,KAAKG,aAAa;QAClB,KAAKC,mBAAmB;UAAE;YACxB,IAAI,CAACuzD,yBAAyB,EAAE;cAC9B,IAAIp7B,WAAW,GAAGqgC,YAAY,CAACrgC,WAAW;cAE1C,IAAIA,WAAW,KAAK,IAAI,EAAE;gBACxB,IAAI4W,UAAU,GAAG5W,WAAW,CAAC4W,UAAU;gBAEvC,IAAIA,UAAU,KAAK,IAAI,EAAE;kBACvB,IAAI8D,WAAW,GAAG9D,UAAU,CAACpwC,IAAI;kBACjC,IAAIi0C,MAAM,GAAGC,WAAW;kBAExB,GAAG;oBACD,IAAIpwC,GAAG,GAAGmwC,MAAM,CAACnwC,GAAG;oBACpB,IAAIjM,IAAI,GAAGo8C,MAAM,CAACp8C,IAAI;oBACtB,IAAIs8C,OAAO,GAAGt8C,IAAI,CAACs8C,OAAO;oBAE1B,IAAIA,OAAO,KAAKn8C,SAAS,EAAE;sBACzB,IAAI,CAAC8L,GAAG,GAAGmoC,SAAS,MAAMF,OAAO,EAAE;wBACjCl0C,IAAI,CAACs8C,OAAO,GAAGn8C,SAAS;wBACxBk+D,iBAAiB,CACf2D,YAAY,EACZnE,sBAAsB,EACtBvhB,OACF,CAAC;sBACH,CAAC,MAAM,IAAI,CAACrwC,GAAG,GAAGooC,MAAM,MAAMH,OAAO,EAAE;wBACrC,IAAImpB,aAAa,CAAC2E,YAAY,CAAC,EAAE;0BAC/Bxe,sBAAsB,CAAC,CAAC;0BACxBxjD,IAAI,CAACs8C,OAAO,GAAGn8C,SAAS;0BACxBk+D,iBAAiB,CACf2D,YAAY,EACZnE,sBAAsB,EACtBvhB,OACF,CAAC;0BACD6G,0BAA0B,CAAC6e,YAAY,CAAC;wBAC1C,CAAC,MAAM;0BACLhiE,IAAI,CAACs8C,OAAO,GAAGn8C,SAAS;0BACxBk+D,iBAAiB,CACf2D,YAAY,EACZnE,sBAAsB,EACtBvhB,OACF,CAAC;wBACH;sBACF;oBACF;oBAEAF,MAAM,GAAGA,MAAM,CAACj0C,IAAI;kBACtB,CAAC,QAAQi0C,MAAM,KAAKC,WAAW;gBACjC;cACF;YACF;YAEA8lB,kCAAkC,CAChChD,YAAY,EACZtB,sBAAsB,EACtBmE,YACF,CAAC;YACD;UACF;QAEA,KAAKt5D,cAAc;UAAE;YACnB,IAAI,CAACq0D,yBAAyB,EAAE;cAC9BkB,eAAe,CAAC+D,YAAY,EAAEnE,sBAAsB,CAAC;cACrD,IAAI75D,QAAQ,GAAGg+D,YAAY,CAAC/0D,SAAS;cAErC,IAAI,OAAOjJ,QAAQ,CAAC25D,oBAAoB,KAAK,UAAU,EAAE;gBACvDC,8BAA8B,CAC5BoE,YAAY,EACZnE,sBAAsB,EACtB75D,QACF,CAAC;cACH;YACF;YAEAm+D,kCAAkC,CAChChD,YAAY,EACZtB,sBAAsB,EACtBmE,YACF,CAAC;YACD;UACF;QAEA,KAAKn4D,cAAc;UAAE;YACnBs4D,kCAAkC,CAChChD,YAAY,EACZtB,sBAAsB,EACtBmE,YACF,CAAC;YACD;UACF;QAEA,KAAKl4D,kBAAkB;UAAE;YACvBm0D,eAAe,CAAC+D,YAAY,EAAEnE,sBAAsB,CAAC;YAErD,IAAImE,YAAY,CAAC9oC,IAAI,GAAGtS,cAAc,EAAE;cAUtC,IAAI45C,6BAA6B,GAAGzD,yBAAyB;cAC7DA,yBAAyB,GACvByD,6BAA6B,IAC7BwB,YAAY,CAACxoC,aAAa,KAAK,IAAI;cACrC2oC,kCAAkC,CAChChD,YAAY,EACZtB,sBAAsB,EACtBmE,YACF,CAAC;cACDjF,yBAAyB,GAAGyD,6BAA6B;YAC3D,CAAC,MAAM;cACL2B,kCAAkC,CAChChD,YAAY,EACZtB,sBAAsB,EACtBmE,YACF,CAAC;YACH;YAEA;UACF;QAEA;UAAS;YACPG,kCAAkC,CAChChD,YAAY,EACZtB,sBAAsB,EACtBmE,YACF,CAAC;YACD;UACF;MACF;IACF;IAEA,SAASQ,sBAAsBA,CAACrE,YAAY,EAAE,CAAC;IAE/C,SAASsE,aAAaA,CAACtE,YAAY,EAAE;MAGnC,QAAQA,YAAY,CAAClyD,GAAG;QACtB,KAAK3C,iBAAiB;QACtB,KAAKM,qBAAqB;UAAE;YAC1B,IAAI84D,UAAU,GAAGvE,YAAY,CAAClxD,SAAS;YAEvC,IAAIy1D,UAAU,KAAK,IAAI,EAAE;cACvBA,UAAU,GAAGvE,YAAY,CAAClxD,SAAS,GAAG,IAAI+vD,eAAe,CAAC,CAAC;YAC7D;YAEA,OAAO0F,UAAU;UACnB;QAEA,KAAK54D,kBAAkB;UAAE;YACvB,IAAI9F,QAAQ,GAAGm6D,YAAY,CAAClxD,SAAS;YACrC,IAAI01D,WAAW,GAAG3+D,QAAQ,CAAC2+D,WAAW;YAEtC,IAAIA,WAAW,KAAK,IAAI,EAAE;cACxBA,WAAW,GAAG3+D,QAAQ,CAAC2+D,WAAW,GAAG,IAAI3F,eAAe,CAAC,CAAC;YAC5D;YAEA,OAAO2F,WAAW;UACpB;QAEA;UAAS;YACP,MAAM,IAAIvpE,KAAK,CACb,mCAAmC,GACjC+kE,YAAY,CAAClyD,GAAG,GAChB,eAAe,GACf,eACJ,CAAC;UACH;MACF;IACF;IAEA,SAAS22D,uBAAuBA,CAAC5+D,QAAQ,EAAE;MACzC,IAAIkW,KAAK,GAAGlW,QAAQ,CAAC8qD,QAAQ;MAE7B,IAAI50C,KAAK,KAAK,IAAI,EAAE;QAClB,MAAM,IAAI9gB,KAAK,CACb,+DACF,CAAC;MACH;MAEA,IAAI,CAAC4K,QAAQ,CAACipD,kBAAkB,GAAGp0B,iBAAiB,MAAM1e,SAAS,EAAE;QAEnE;MACF;MAGA,IAAIoL,IAAI,GAAG+W,8BAA8B,CAACpiB,KAAK,EAAEwN,QAAQ,CAAC;MAE1D,IAAInC,IAAI,KAAK,IAAI,EAAE;QACjBvhB,QAAQ,CAACipD,kBAAkB,IAAIp0B,iBAAiB;QAChDgjB,qBAAqB,CAACt2B,IAAI,EAAErL,KAAK,EAAEwN,QAAQ,CAAC;MAC9C;IACF;IACA,SAASm7C,uBAAuBA,CAAC7+D,QAAQ,EAAE;MACzC,IAAIkW,KAAK,GAAGlW,QAAQ,CAAC8qD,QAAQ;MAE7B,IAAI50C,KAAK,KAAK,IAAI,EAAE;QAClB,MAAM,IAAI9gB,KAAK,CACb,+DACF,CAAC;MACH;MAEA,IAAI,CAAC4K,QAAQ,CAACipD,kBAAkB,GAAGp0B,iBAAiB,MAAM1e,SAAS,EAAE;QAEnE;MACF;MAEA,IAAIoL,IAAI,GAAG+W,8BAA8B,CAACpiB,KAAK,EAAEwN,QAAQ,CAAC;MAE1D,IAAInC,IAAI,KAAK,IAAI,EAAE;QACjBvhB,QAAQ,CAACipD,kBAAkB,IAAI,CAACp0B,iBAAiB;QACjDgjB,qBAAqB,CAACt2B,IAAI,EAAErL,KAAK,EAAEwN,QAAQ,CAAC;MAC9C;IACF;IAEA,SAASo7C,4BAA4BA,CAAC3E,YAAY,EAAE1E,SAAS,EAAE;MAI7D,IAAIiJ,UAAU,GAAGD,aAAa,CAACtE,YAAY,CAAC;MAC5C1E,SAAS,CAAC5xD,OAAO,CAAC,UAAU8hD,QAAQ,EAAE;QAEpC,IAAIoZ,KAAK,GAAGC,oBAAoB,CAACntC,IAAI,CAAC,IAAI,EAAEsoC,YAAY,EAAExU,QAAQ,CAAC;QAEnE,IAAI,CAAC+Y,UAAU,CAACpzC,GAAG,CAACq6B,QAAQ,CAAC,EAAE;UAC7B+Y,UAAU,CAACxzC,GAAG,CAACy6B,QAAQ,CAAC;UAExB;YACE,IAAI9kC,iBAAiB,EAAE;cACrB,IAAIs4C,eAAe,KAAK,IAAI,IAAIC,cAAc,KAAK,IAAI,EAAE;gBAEvD1T,sBAAsB,CAAC0T,cAAc,EAAED,eAAe,CAAC;cACzD,CAAC,MAAM;gBACL,MAAM/jE,KAAK,CACT,qEACF,CAAC;cACH;YACF;UACF;UAEAuwD,QAAQ,CAACppB,IAAI,CAACwiC,KAAK,EAAEA,KAAK,CAAC;QAC7B;MACF,CAAC,CAAC;IACJ;IACA,SAASE,qBAAqBA,CAAC19C,IAAI,EAAE44C,YAAY,EAAE8B,cAAc,EAAE;MACjE9C,eAAe,GAAG8C,cAAc;MAChC7C,cAAc,GAAG73C,IAAI;MACrBkgB,eAAe,CAAC04B,YAAY,CAAC;MAC7B+E,4BAA4B,CAAC/E,YAAY,EAAE54C,IAAI,CAAC;MAChDkgB,eAAe,CAAC04B,YAAY,CAAC;MAC7BhB,eAAe,GAAG,IAAI;MACtBC,cAAc,GAAG,IAAI;IACvB;IAEA,SAAS+F,kCAAkCA,CAAC59C,IAAI,EAAEpH,WAAW,EAAEgM,KAAK,EAAE;MAGpE,IAAI2iB,SAAS,GAAG3uB,WAAW,CAAC2uB,SAAS;MAErC,IAAIA,SAAS,KAAK,IAAI,EAAE;QACtB,KAAK,IAAIzsC,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGysC,SAAS,CAAC/yC,MAAM,EAAEsG,CAAC,EAAE,EAAE;UACzC,IAAIwsC,aAAa,GAAGC,SAAS,CAACzsC,CAAC,CAAC;UAEhC,IAAI;YACF0hE,qBAAqB,CAACx8C,IAAI,EAAEpH,WAAW,EAAE0uB,aAAa,CAAC;UACzD,CAAC,CAAC,OAAOzyC,KAAK,EAAE;YACd0jE,uBAAuB,CAACjxB,aAAa,EAAE1uB,WAAW,EAAE/jB,KAAK,CAAC;UAC5D;QACF;MACF;MAEA,IAAIgpE,cAAc,GAAG19B,eAAe,CAAC,CAAC;MAEtC,IAAIvnB,WAAW,CAACs0C,YAAY,GAAGt2C,YAAY,EAAE;QAC3C,IAAIsB,KAAK,GAAGU,WAAW,CAACV,KAAK;QAE7B,OAAOA,KAAK,KAAK,IAAI,EAAE;UACrBgoB,eAAe,CAAChoB,KAAK,CAAC;UACtBylD,4BAA4B,CAACzlD,KAAK,EAAE8H,IAAI,CAAC;UACzC9H,KAAK,GAAGA,KAAK,CAACC,OAAO;QACvB;MACF;MAEA+nB,eAAe,CAAC29B,cAAc,CAAC;IACjC;IAEA,SAASF,4BAA4BA,CAAC/E,YAAY,EAAE54C,IAAI,EAAE4E,KAAK,EAAE;MAC/D,IAAIjiB,OAAO,GAAGi2D,YAAY,CAACzxD,SAAS;MACpC,IAAImQ,KAAK,GAAGshD,YAAY,CAACthD,KAAK;MAI9B,QAAQshD,YAAY,CAAClyD,GAAG;QACtB,KAAKxD,iBAAiB;QACtB,KAAKW,UAAU;QACf,KAAKG,aAAa;QAClB,KAAKC,mBAAmB;UAAE;YACxB25D,kCAAkC,CAAC59C,IAAI,EAAE44C,YAAY,CAAC;YACtDkF,2BAA2B,CAAClF,YAAY,CAAC;YAEzC,IAAIthD,KAAK,GAAGrC,MAAM,EAAE;cAClB,IAAI;gBACFukD,2BAA2B,CACzB3qB,SAAS,GAAGD,SAAS,EACrBgqB,YAAY,EACZA,YAAY,CAACnyD,MACf,CAAC;gBACDizD,yBAAyB,CAAC7qB,SAAS,GAAGD,SAAS,EAAEgqB,YAAY,CAAC;cAChE,CAAC,CAAC,OAAO/jE,KAAK,EAAE;gBACd0jE,uBAAuB,CAACK,YAAY,EAAEA,YAAY,CAACnyD,MAAM,EAAE5R,KAAK,CAAC;cACnE;cAMA,IAAIijE,aAAa,CAACc,YAAY,CAAC,EAAE;gBAC/B,IAAI;kBACF3a,sBAAsB,CAAC,CAAC;kBACxBub,2BAA2B,CACzB1qB,MAAM,GAAGF,SAAS,EAClBgqB,YAAY,EACZA,YAAY,CAACnyD,MACf,CAAC;gBACH,CAAC,CAAC,OAAO5R,KAAK,EAAE;kBACd0jE,uBAAuB,CACrBK,YAAY,EACZA,YAAY,CAACnyD,MAAM,EACnB5R,KACF,CAAC;gBACH;gBAEA+oD,0BAA0B,CAACgb,YAAY,CAAC;cAC1C,CAAC,MAAM;gBACL,IAAI;kBACFY,2BAA2B,CACzB1qB,MAAM,GAAGF,SAAS,EAClBgqB,YAAY,EACZA,YAAY,CAACnyD,MACf,CAAC;gBACH,CAAC,CAAC,OAAO5R,KAAK,EAAE;kBACd0jE,uBAAuB,CACrBK,YAAY,EACZA,YAAY,CAACnyD,MAAM,EACnB5R,KACF,CAAC;gBACH;cACF;YACF;YAEA;UACF;QAEA,KAAKsO,cAAc;UAAE;YACnBy6D,kCAAkC,CAAC59C,IAAI,EAAE44C,YAAY,CAAC;YACtDkF,2BAA2B,CAAClF,YAAY,CAAC;YAEzC,IAAIthD,KAAK,GAAGhC,GAAG,EAAE;cACf,IAAI3S,OAAO,KAAK,IAAI,EAAE;gBACpB+1D,eAAe,CAAC/1D,OAAO,EAAEA,OAAO,CAAC8D,MAAM,CAAC;cAC1C;YACF;YAEA,IAAI6Q,KAAK,GAAGlC,QAAQ,IAAImiD,wBAAwB,EAAE;cAChD,IAAIn7B,WAAW,GAAGw8B,YAAY,CAACx8B,WAAW;cAE1C,IAAIA,WAAW,KAAK,IAAI,EAAE;gBACxB0C,oBAAoB,CAAC1C,WAAW,CAAC;cACnC;YACF;YAEA;UACF;QAEA,KAAKz3B,aAAa;QAElB,KAAKC,aAAa;QAElB,KAAKrB,aAAa;UAAE;YAClBq6D,kCAAkC,CAAC59C,IAAI,EAAE44C,YAAY,CAAC;YACtDkF,2BAA2B,CAAClF,YAAY,CAAC;YAEzC,IAAIthD,KAAK,GAAGhC,GAAG,EAAE;cACf,IAAI3S,OAAO,KAAK,IAAI,EAAE;gBACpB+1D,eAAe,CAAC/1D,OAAO,EAAEA,OAAO,CAAC8D,MAAM,CAAC;cAC1C;YACF;YAEA;cAOE,IAAImyD,YAAY,CAACthD,KAAK,GAAGnC,YAAY,EAAE;gBACrC,IAAI1W,QAAQ,GAAGm6D,YAAY,CAAClxD,SAAS;gBAErC,IAAI;kBACF8mB,gBAAgB,CAAC/vB,QAAQ,CAAC;gBAC5B,CAAC,CAAC,OAAO5J,KAAK,EAAE;kBACd0jE,uBAAuB,CACrBK,YAAY,EACZA,YAAY,CAACnyD,MAAM,EACnB5R,KACF,CAAC;gBACH;cACF;cAEA,IAAIyiB,KAAK,GAAGrC,MAAM,EAAE;gBAClB,IAAI8oD,UAAU,GAAGnF,YAAY,CAAClxD,SAAS;gBAEvC,IAAIq2D,UAAU,IAAI,IAAI,EAAE;kBAEtB,IAAIlwC,QAAQ,GAAG+qC,YAAY,CAACllC,aAAa;kBAIzC,IAAI1F,QAAQ,GACVrrB,OAAO,KAAK,IAAI,GAAGA,OAAO,CAAC+wB,aAAa,GAAG7F,QAAQ;kBACrD,IAAInzB,IAAI,GAAGk+D,YAAY,CAACl+D,IAAI;kBAE5B,IAAIsjE,cAAc,GAAGpF,YAAY,CAACx8B,WAAW;kBAC7Cw8B,YAAY,CAACx8B,WAAW,GAAG,IAAI;kBAE/B,IAAI;oBACFtO,YAAY,CACViwC,UAAU,EACVC,cAAc,EACdtjE,IAAI,EACJszB,QAAQ,EACRH,QAAQ,EACR+qC,YACF,CAAC;kBACH,CAAC,CAAC,OAAO/jE,KAAK,EAAE;oBACd0jE,uBAAuB,CACrBK,YAAY,EACZA,YAAY,CAACnyD,MAAM,EACnB5R,KACF,CAAC;kBACH;gBACF;cACF;YACF;YAEA;UACF;QAEA,KAAK2O,QAAQ;UAAE;YACbo6D,kCAAkC,CAAC59C,IAAI,EAAE44C,YAAY,CAAC;YACtDkF,2BAA2B,CAAClF,YAAY,CAAC;YAEzC,IAAIthD,KAAK,GAAGrC,MAAM,EAAE;cAClB;gBACE,IAAI2jD,YAAY,CAAClxD,SAAS,KAAK,IAAI,EAAE;kBACnC,MAAM,IAAI7T,KAAK,CACb,iEAAiE,GAC/D,iDACJ,CAAC;gBACH;gBAEA,IAAI45B,YAAY,GAAGmrC,YAAY,CAAClxD,SAAS;gBACzC,IAAIimB,OAAO,GAAGirC,YAAY,CAACllC,aAAa;gBAIxC,IAAIhG,OAAO,GAAG/qB,OAAO,KAAK,IAAI,GAAGA,OAAO,CAAC+wB,aAAa,GAAG/F,OAAO;gBAEhE,IAAI;kBACFH,gBAAgB,CAACC,YAAY,EAAEC,OAAO,EAAEC,OAAO,CAAC;gBAClD,CAAC,CAAC,OAAO94B,KAAK,EAAE;kBACd0jE,uBAAuB,CACrBK,YAAY,EACZA,YAAY,CAACnyD,MAAM,EACnB5R,KACF,CAAC;gBACH;cACF;YACF;YAEA;UACF;QAEA,KAAKwO,QAAQ;UAAE;YACb;cACEu6D,kCAAkC,CAAC59C,IAAI,EAAE44C,YAAY,CAAC;cACtDkF,2BAA2B,CAAClF,YAAY,CAAC;YAC3C;YAEA;UACF;QAEA,KAAKt1D,UAAU;UAAE;YACf;cACEs6D,kCAAkC,CAAC59C,IAAI,EAAE44C,YAAY,CAAC;cACtDkF,2BAA2B,CAAClF,YAAY,CAAC;YAC3C;YAEA;UACF;QAEA,KAAK70D,iBAAiB;UAAE;YACtB65D,kCAAkC,CAAC59C,IAAI,EAAE44C,YAAY,CAAC;YACtDkF,2BAA2B,CAAClF,YAAY,CAAC;YAYzC,IAAInlC,cAAc,GAAGmlC,YAAY,CAAC1gD,KAAK;YAEvC,IAAIub,cAAc,CAACnc,KAAK,GAAG7B,UAAU,EAAE;cAErC,IAAIwoD,iBAAiB,GAAGrF,YAAY,CAAC3kC,aAAa,KAAK,IAAI;cAC3D,IAAIiqC,kBAAkB,GACpBv7D,OAAO,KAAK,IAAI,IAAIA,OAAO,CAACsxB,aAAa,KAAK,IAAI;cAEpD;gBACE,IAAIgqC,iBAAiB,IAAI,CAACC,kBAAkB,EAAE;kBAG5CC,wBAAwB,CAAC,CAAC;gBAC5B;cACF;YACF;YAEA,IAAI7mD,KAAK,GAAGrC,MAAM,EAAE;cAClB,IAAI;gBACFgoD,sBAAsB,CAACrE,YAAY,CAAC;cACtC,CAAC,CAAC,OAAO/jE,KAAK,EAAE;gBACd0jE,uBAAuB,CAACK,YAAY,EAAEA,YAAY,CAACnyD,MAAM,EAAE5R,KAAK,CAAC;cACnE;cAEA,IAAI2vD,UAAU,GAAGoU,YAAY,CAACx8B,WAAW;cAEzC,IAAIooB,UAAU,KAAK,IAAI,EAAE;gBACvBoU,YAAY,CAACx8B,WAAW,GAAG,IAAI;gBAC/BmhC,4BAA4B,CAAC3E,YAAY,EAAEpU,UAAU,CAAC;cACxD;YACF;YAEA;UACF;QAEA,KAAKjgD,kBAAkB;UAAE;YACvB,IAAI+S,KAAK,GAAGhC,GAAG,EAAE;cACf,IAAI3S,OAAO,KAAK,IAAI,EAAE;gBACpB+1D,eAAe,CAAC/1D,OAAO,EAAEA,OAAO,CAAC8D,MAAM,CAAC;cAC1C;YACF;YAEA,IAAIw3B,QAAQ,GAAG26B,YAAY,CAAC3kC,aAAa;YACzC,IAAIiD,QAAQ,GAAG+G,QAAQ,KAAK,IAAI;YAChC,IAAI68B,SAAS,GAAGn4D,OAAO,KAAK,IAAI,IAAIA,OAAO,CAACsxB,aAAa,KAAK,IAAI;YAElE,IAAI2kC,YAAY,CAACjlC,IAAI,GAAGtS,cAAc,EAAE;cAItC,IAAI25C,4BAA4B,GAAGzD,wBAAwB;cAC3D,IAAI0D,6BAA6B,GAAGzD,yBAAyB;cAC7DD,wBAAwB,GAAGyD,4BAA4B,IAAI9jC,QAAQ;cACnEsgC,yBAAyB,GACvByD,6BAA6B,IAAIH,SAAS;cAC5C8C,kCAAkC,CAAC59C,IAAI,EAAE44C,YAAY,CAAC;cACtDpB,yBAAyB,GAAGyD,6BAA6B;cACzD1D,wBAAwB,GAAGyD,4BAA4B;YACzD,CAAC,MAAM;cACL4C,kCAAkC,CAAC59C,IAAI,EAAE44C,YAAY,CAAC;YACxD;YAEAkF,2BAA2B,CAAClF,YAAY,CAAC;YACzC,IAAIxhC,iBAAiB,GAAGwhC,YAAY,CAAClxD,SAAS;YAE9C0vB,iBAAiB,CAACmyB,QAAQ,GAAGqP,YAAY;YAGzCxhC,iBAAiB,CAACC,WAAW,IAAI,CAAC/D,iBAAiB;YACnD8D,iBAAiB,CAACC,WAAW,IAC3BD,iBAAiB,CAACswB,kBAAkB,GAAGp0B,iBAAiB;YAE1D,IAAIhc,KAAK,GAAG7B,UAAU,EAAE;cAGtB,IAAIyhB,QAAQ,EAAE;gBACZE,iBAAiB,CAACC,WAAW,IAAI,CAAChE,gBAAgB;cACpD,CAAC,MAAM;gBACL+D,iBAAiB,CAACC,WAAW,IAAIhE,gBAAgB;cACnD;cAEA,IAAI6D,QAAQ,EAAE;gBACZ,IAAIknC,QAAQ,GAAGz7D,OAAO,KAAK,IAAI;gBAC/B,IAAI07D,4BAA4B,GAC9B9G,wBAAwB,IAAIC,yBAAyB;gBAKvD,IAAI4G,QAAQ,IAAI,CAACtD,SAAS,IAAI,CAACuD,4BAA4B,EAAE;kBAC3D,IAAI,CAACzF,YAAY,CAACjlC,IAAI,GAAGtS,cAAc,MAAMD,MAAM,EAAE;oBAEnDk9C,yCAAyC,CAAC1F,YAAY,CAAC;kBACzD;gBACF;cACF;cAEA,IAAI,CAACplC,iBAAiB,CAAColC,YAAY,CAAC,EAAE;gBAGpCwC,uBAAuB,CAACxC,YAAY,EAAE1hC,QAAQ,CAAC;cACjD;YACF;YAEA,IAAI5f,KAAK,GAAGrC,MAAM,EAAE;cAClB,IAAI0vC,cAAc,GAAGiU,YAAY,CAACx8B,WAAW;cAE7C,IAAIuoB,cAAc,KAAK,IAAI,EAAE;gBAC3B,IAAII,WAAW,GAAGJ,cAAc,CAACH,UAAU;gBAE3C,IAAIO,WAAW,KAAK,IAAI,EAAE;kBACxBJ,cAAc,CAACH,UAAU,GAAG,IAAI;kBAChC+Y,4BAA4B,CAAC3E,YAAY,EAAE7T,WAAW,CAAC;gBACzD;cACF;YACF;YAEA;UACF;QAEA,KAAK1gD,qBAAqB;UAAE;YAC1Bu5D,kCAAkC,CAAC59C,IAAI,EAAE44C,YAAY,CAAC;YACtDkF,2BAA2B,CAAClF,YAAY,CAAC;YAEzC,IAAIthD,KAAK,GAAGrC,MAAM,EAAE;cAClB,IAAIyhD,YAAY,GAAGkC,YAAY,CAACx8B,WAAW;cAE3C,IAAIs6B,YAAY,KAAK,IAAI,EAAE;gBACzBkC,YAAY,CAACx8B,WAAW,GAAG,IAAI;gBAC/BmhC,4BAA4B,CAAC3E,YAAY,EAAElC,YAAY,CAAC;cAC1D;YACF;YAEA;UACF;QAEA,KAAKpyD,cAAc;UAAE;YACnB;UACF;QAEA;UAAS;YACPs5D,kCAAkC,CAAC59C,IAAI,EAAE44C,YAAY,CAAC;YACtDkF,2BAA2B,CAAClF,YAAY,CAAC;YACzC;UACF;MACF;IACF;IAEA,SAASkF,2BAA2BA,CAAClF,YAAY,EAAE;MAIjD,IAAIthD,KAAK,GAAGshD,YAAY,CAACthD,KAAK;MAE9B,IAAIA,KAAK,GAAGxC,SAAS,EAAE;QACrB,IAAI;UACF+mD,eAAe,CAACjD,YAAY,CAAC;QAC/B,CAAC,CAAC,OAAO/jE,KAAK,EAAE;UACd0jE,uBAAuB,CAACK,YAAY,EAAEA,YAAY,CAACnyD,MAAM,EAAE5R,KAAK,CAAC;QACnE;QAKA+jE,YAAY,CAACthD,KAAK,IAAI,CAACxC,SAAS;MAClC;MAEA,IAAIwC,KAAK,GAAGtC,SAAS,EAAE;QACrB4jD,YAAY,CAACthD,KAAK,IAAI,CAACtC,SAAS;MAClC;IACF;IAEA,SAASupD,mBAAmBA,CAAC3F,YAAY,EAAE54C,IAAI,EAAE06C,cAAc,EAAE;MAC/D9C,eAAe,GAAG8C,cAAc;MAChC7C,cAAc,GAAG73C,IAAI;MACrB,IAAIrd,OAAO,GAAGi2D,YAAY,CAACzxD,SAAS;MACpCszD,yBAAyB,CAACz6C,IAAI,EAAErd,OAAO,EAAEi2D,YAAY,CAAC;MACtDhB,eAAe,GAAG,IAAI;MACtBC,cAAc,GAAG,IAAI;IACvB;IAEA,SAAS8C,gCAAgCA,CAAC36C,IAAI,EAAEpH,WAAW,EAAEgM,KAAK,EAAE;MAClE,IAAIi5C,cAAc,GAAG19B,eAAe,CAAC,CAAC;MAEtC,IAAIvnB,WAAW,CAACs0C,YAAY,GAAGr2C,UAAU,EAAE;QACzC,IAAIqB,KAAK,GAAGU,WAAW,CAACV,KAAK;QAE7B,OAAOA,KAAK,KAAK,IAAI,EAAE;UACrBgoB,eAAe,CAAChoB,KAAK,CAAC;UACtB,IAAIvV,OAAO,GAAGuV,KAAK,CAAC/Q,SAAS;UAC7BszD,yBAAyB,CAACz6C,IAAI,EAAErd,OAAO,EAAEuV,KAAK,CAAC;UAC/CA,KAAK,GAAGA,KAAK,CAACC,OAAO;QACvB;MACF;MAEA+nB,eAAe,CAAC29B,cAAc,CAAC;IACjC;IAEA,SAASW,sBAAsBA,CAAC5F,YAAY,EAAE;MAC5C,QAAQA,YAAY,CAAClyD,GAAG;QACtB,KAAKxD,iBAAiB;QACtB,KAAKW,UAAU;QACf,KAAKG,aAAa;QAClB,KAAKC,mBAAmB;UAAE;YAExB,IAAI6zD,aAAa,CAACc,YAAY,CAAC,EAAE;cAC/B,IAAI;gBACF3a,sBAAsB,CAAC,CAAC;gBACxBub,2BAA2B,CACzB1qB,MAAM,EACN8pB,YAAY,EACZA,YAAY,CAACnyD,MACf,CAAC;cACH,CAAC,SAAS;gBACRm3C,0BAA0B,CAACgb,YAAY,CAAC;cAC1C;YACF,CAAC,MAAM;cACLY,2BAA2B,CACzB1qB,MAAM,EACN8pB,YAAY,EACZA,YAAY,CAACnyD,MACf,CAAC;YACH;YAEA63D,yCAAyC,CAAC1F,YAAY,CAAC;YACvD;UACF;QAEA,KAAKz1D,cAAc;UAAE;YAEnBu1D,eAAe,CAACE,YAAY,EAAEA,YAAY,CAACnyD,MAAM,CAAC;YAClD,IAAIhI,QAAQ,GAAGm6D,YAAY,CAAClxD,SAAS;YAErC,IAAI,OAAOjJ,QAAQ,CAAC25D,oBAAoB,KAAK,UAAU,EAAE;cACvDC,8BAA8B,CAC5BO,YAAY,EACZA,YAAY,CAACnyD,MAAM,EACnBhI,QACF,CAAC;YACH;YAEA6/D,yCAAyC,CAAC1F,YAAY,CAAC;YACvD;UACF;QAEA,KAAKj0D,aAAa;QAClB,KAAKC,aAAa;QAClB,KAAKrB,aAAa;UAAE;YAElBm1D,eAAe,CAACE,YAAY,EAAEA,YAAY,CAACnyD,MAAM,CAAC;YAClD63D,yCAAyC,CAAC1F,YAAY,CAAC;YACvD;UACF;QAEA,KAAKr0D,kBAAkB;UAAE;YAEvBm0D,eAAe,CAACE,YAAY,EAAEA,YAAY,CAACnyD,MAAM,CAAC;YAClD,IAAIywB,QAAQ,GAAG0hC,YAAY,CAAC3kC,aAAa,KAAK,IAAI;YAElD,IAAIiD,QAAQ,EAAC,CAAC,KACT;cACHonC,yCAAyC,CAAC1F,YAAY,CAAC;YACzD;YAEA;UACF;QAEA;UAAS;YACP0F,yCAAyC,CAAC1F,YAAY,CAAC;YACvD;UACF;MACF;IACF;IAEA,SAAS0F,yCAAyCA,CAAC1lD,WAAW,EAAE;MAE9D,IAAIV,KAAK,GAAGU,WAAW,CAACV,KAAK;MAE7B,OAAOA,KAAK,KAAK,IAAI,EAAE;QACrBsmD,sBAAsB,CAACtmD,KAAK,CAAC;QAC7BA,KAAK,GAAGA,KAAK,CAACC,OAAO;MACvB;IACF;IAEA,SAASsmD,qBAAqBA,CAC5B7E,YAAY,EACZj3D,OAAO,EACPi2D,YAAY,EAGZsC,4BAA4B,EAC5B;MAEA,IAAI5jD,KAAK,GAAGshD,YAAY,CAACthD,KAAK;MAE9B,QAAQshD,YAAY,CAAClyD,GAAG;QACtB,KAAKxD,iBAAiB;QACtB,KAAKW,UAAU;QACf,KAAKI,mBAAmB;UAAE;YACxBk3D,wCAAwC,CACtCvB,YAAY,EACZhB,YAAY,EACZsC,4BACF,CAAC;YAEDlB,uBAAuB,CAACpB,YAAY,EAAE9pB,MAAM,CAAC;YAC7C;UACF;QAEA,KAAK3rC,cAAc;UAAE;YACnBg4D,wCAAwC,CACtCvB,YAAY,EACZhB,YAAY,EACZsC,4BACF,CAAC;YAED,IAAIz8D,QAAQ,GAAGm6D,YAAY,CAAClxD,SAAS;YAErC,IAAI,OAAOjJ,QAAQ,CAACojD,iBAAiB,KAAK,UAAU,EAAE;cACpD,IAAI;gBACFpjD,QAAQ,CAACojD,iBAAiB,CAAC,CAAC;cAC9B,CAAC,CAAC,OAAOhtD,KAAK,EAAE;gBACd0jE,uBAAuB,CAACK,YAAY,EAAEA,YAAY,CAACnyD,MAAM,EAAE5R,KAAK,CAAC;cACnE;YACF;YAGA,IAAIunC,WAAW,GAAGw8B,YAAY,CAACx8B,WAAW;YAE1C,IAAIA,WAAW,KAAK,IAAI,EAAE;cACxB6C,qBAAqB,CAAC7C,WAAW,EAAE39B,QAAQ,CAAC;YAC9C;YAEA,IAAIy8D,4BAA4B,IAAI5jD,KAAK,GAAGlC,QAAQ,EAAE;cACpD8kD,oBAAoB,CAACtB,YAAY,CAAC;YACpC;YAEAJ,eAAe,CAACI,YAAY,EAAEA,YAAY,CAACnyD,MAAM,CAAC;YAClD;UACF;QAQA,KAAK9B,aAAa;QAClB,KAAKC,aAAa;QAClB,KAAKrB,aAAa;UAAE;YAClB43D,wCAAwC,CACtCvB,YAAY,EACZhB,YAAY,EACZsC,4BACF,CAAC;YAKD,IACEA,4BAA4B,IAC5Bv4D,OAAO,KAAK,IAAI,IAChB2U,KAAK,GAAGrC,MAAM,EACd;cACAklD,wBAAwB,CAACvB,YAAY,CAAC;YACxC;YAEAJ,eAAe,CAACI,YAAY,EAAEA,YAAY,CAACnyD,MAAM,CAAC;YAClD;UACF;QAEA,KAAK3C,QAAQ;UAAE;YACbq3D,wCAAwC,CACtCvB,YAAY,EACZhB,YAAY,EACZsC,4BACF,CAAC;YAED,IAAIA,4BAA4B,IAAI5jD,KAAK,GAAGrC,MAAM,EAAE;cAClDmlD,oBAAoB,CAACxB,YAAY,EAAEj2D,OAAO,CAAC;YAC7C;YAEA;UACF;QAEA,KAAKoB,iBAAiB;UAAE;YACtBo3D,wCAAwC,CACtCvB,YAAY,EACZhB,YAAY,EACZsC,4BACF,CAAC;YAED;UACF;QAEA,KAAK32D,kBAAkB;UAAE;YACvB,IAAIm6D,cAAc,GAAG9F,YAAY,CAAC3kC,aAAa;YAC/C,IAAIiD,QAAQ,GAAGwnC,cAAc,KAAK,IAAI;YAEtC,IAAIxnC,QAAQ,EAAC,CAAC,KACT;cACHikC,wCAAwC,CACtCvB,YAAY,EACZhB,YAAY,EACZsC,4BACF,CAAC;YACH;YAEA1C,eAAe,CAACI,YAAY,EAAEA,YAAY,CAACnyD,MAAM,CAAC;YAClD;UACF;QAEA;UAAS;YACP00D,wCAAwC,CACtCvB,YAAY,EACZhB,YAAY,EACZsC,4BACF,CAAC;YACD;UACF;MACF;IACF;IAEA,SAASC,wCAAwCA,CAC/CvB,YAAY,EACZhhD,WAAW,EACXsiD,4BAA4B,EAC5B;MAIA,IAAIyD,uCAAuC,GACzCzD,4BAA4B,IAC5B,CAACtiD,WAAW,CAACs0C,YAAY,GAAGr2C,UAAU,MAAMjC,SAAS;MAEvD,IAAIipD,cAAc,GAAG19B,eAAe,CAAC,CAAC;MACtC,IAAIjoB,KAAK,GAAGU,WAAW,CAACV,KAAK;MAE7B,OAAOA,KAAK,KAAK,IAAI,EAAE;QACrB,IAAIvV,OAAO,GAAGuV,KAAK,CAAC/Q,SAAS;QAC7Bs3D,qBAAqB,CACnB7E,YAAY,EACZj3D,OAAO,EACPuV,KAAK,EACLymD,uCACF,CAAC;QACDzmD,KAAK,GAAGA,KAAK,CAACC,OAAO;MACvB;MAEA+nB,eAAe,CAAC29B,cAAc,CAAC;IACjC;IAEA,SAASe,6BAA6BA,CAAChG,YAAY,EAAEthB,SAAS,EAAE;MAC9D,IAAIwgB,aAAa,CAACc,YAAY,CAAC,EAAE;QAC/B1a,uBAAuB,CAAC,CAAC;QAEzB,IAAI;UACFwb,yBAAyB,CAACpiB,SAAS,EAAEshB,YAAY,CAAC;QACpD,CAAC,CAAC,OAAO/jE,KAAK,EAAE;UACd0jE,uBAAuB,CAACK,YAAY,EAAEA,YAAY,CAACnyD,MAAM,EAAE5R,KAAK,CAAC;QACnE;QAEAkpD,2BAA2B,CAAC6a,YAAY,CAAC;MAC3C,CAAC,MAAM;QACL,IAAI;UACFc,yBAAyB,CAACpiB,SAAS,EAAEshB,YAAY,CAAC;QACpD,CAAC,CAAC,OAAO/jE,KAAK,EAAE;UACd0jE,uBAAuB,CAACK,YAAY,EAAEA,YAAY,CAACnyD,MAAM,EAAE5R,KAAK,CAAC;QACnE;MACF;IACF;IAEA,SAASgqE,yBAAyBA,CAChC7+C,IAAI,EACJ44C,YAAY,EACZ8B,cAAc,EACdoE,oBAAoB,EACpB;MACA5+B,eAAe,CAAC04B,YAAY,CAAC;MAC7BmG,yBAAyB,CAAC/+C,IAAI,EAAE44C,YAAY,CAAC;MAC7C54B,iBAAiB,CAAC,CAAC;IACrB;IAEA,SAASg/B,sCAAsCA,CAC7Ch/C,IAAI,EACJpH,WAAW,EACX8hD,cAAc,EACdoE,oBAAoB,EACpB;MACA,IAAIjB,cAAc,GAAG19B,eAAe,CAAC,CAAC;MAEtC,IAAIvnB,WAAW,CAACs0C,YAAY,GAAGp2C,WAAW,EAAE;QAC1C,IAAIoB,KAAK,GAAGU,WAAW,CAACV,KAAK;QAE7B,OAAOA,KAAK,KAAK,IAAI,EAAE;UACrBgoB,eAAe,CAAChoB,KAAK,CAAC;UACtB6mD,yBAAyB,CAAC/+C,IAAI,EAAE9H,KAAK,CAAC;UACtCA,KAAK,GAAGA,KAAK,CAACC,OAAO;QACvB;MACF;MAEA+nB,eAAe,CAAC29B,cAAc,CAAC;IACjC;IAEA,SAASkB,yBAAyBA,CAChCnF,YAAY,EACZhB,YAAY,EACZ8B,cAAc,EACdoE,oBAAoB,EACpB;MAIA,IAAIxnD,KAAK,GAAGshD,YAAY,CAACthD,KAAK;MAE9B,QAAQshD,YAAY,CAAClyD,GAAG;QACtB,KAAKxD,iBAAiB;QACtB,KAAKW,UAAU;QACf,KAAKI,mBAAmB;UAAE;YACxB+6D,sCAAsC,CAACpF,YAAY,EAAEhB,YAAY,CAAC;YAElE,IAAIthD,KAAK,GAAG9B,SAAS,EAAE;cACrBopD,6BAA6B,CAAChG,YAAY,EAAE7pB,OAAO,GAAGH,SAAS,CAAC;YAClE;YAEA;UACF;QAEA,KAAKvrC,QAAQ;UAAE;YACb27D,sCAAsC,CAACpF,YAAY,EAAEhB,YAAY,CAAC;YAElE;UACF;QAEA,KAAKp0D,qBAAqB;UAAE;YAC1B;UACF;QAEA,KAAKD,kBAAkB;UAAE;YAEvB,IAAIoxD,UAAU,GAAGiD,YAAY,CAAClxD,SAAS;YACvC,IAAI41B,SAAS,GAAGs7B,YAAY,CAAC3kC,aAAa;YAC1C,IAAIiD,QAAQ,GAAGoG,SAAS,KAAK,IAAI;YAEjC,IAAIpG,QAAQ,EAAE;cACZ,IAAIy+B,UAAU,CAACt+B,WAAW,GAAG9D,gCAAgC,EAAE;gBAE7DyrC,sCAAsC,CACpCpF,YAAY,EACZhB,YACF,CAAC;cACH,CAAC,MAAM;gBACL,IAAIA,YAAY,CAACjlC,IAAI,GAAGtS,cAAc,EAAC,CAAC,KACnC;kBAEHs0C,UAAU,CAACt+B,WAAW,IAAI9D,gCAAgC;kBAC1DyrC,sCAAsC,CACpCpF,YAAY,EACZhB,YACF,CAAC;gBACH;cACF;YACF,CAAC,MAAM;cAEL,IAAIjD,UAAU,CAACt+B,WAAW,GAAG9D,gCAAgC,EAAE;gBAE7DyrC,sCAAsC,CACpCpF,YAAY,EACZhB,YACF,CAAC;cACH,CAAC,MAAM;gBAILjD,UAAU,CAACt+B,WAAW,IAAI9D,gCAAgC;gBAC1D0rC,0CAA0C,CACxCrF,YAAY,EACZhB,YACF,CAAC;cACH;YACF;YAEA;UACF;QAEA,KAAKn0D,cAAc;UAAE;YACnBu6D,sCAAsC,CAACpF,YAAY,EAAEhB,YAAY,CAAC;YAElE;UACF;QAEA,KAAKl0D,sBAAsB;QAE3B;UAAS;YACPs6D,sCAAsC,CAACpF,YAAY,EAAEhB,YAAY,CAAC;YAClE;UACF;MACF;IACF;IAEA,SAASqG,0CAA0CA,CACjDrF,YAAY,EACZhhD,WAAW,EACX8hD,cAAc,EACdoE,oBAAoB,EACpB5D,4BAA4B,EAC5B;MACA,IAAI2C,cAAc,GAAG19B,eAAe,CAAC,CAAC;MACtC,IAAIjoB,KAAK,GAAGU,WAAW,CAACV,KAAK;MAE7B,OAAOA,KAAK,KAAK,IAAI,EAAE;QACrBgnD,uBAAuB,CAACtF,YAAY,EAAE1hD,KAAK,CAAC;QAC5CA,KAAK,GAAGA,KAAK,CAACC,OAAO;MACvB;MAEA+nB,eAAe,CAAC29B,cAAc,CAAC;IACjC;IAEA,SAASqB,uBAAuBA,CAC9BtF,YAAY,EACZhB,YAAY,EACZ8B,cAAc,EACdoE,oBAAoB,EAGpB5D,4BAA4B,EAC5B;MACA,QAAQtC,YAAY,CAAClyD,GAAG;QACtB,KAAKxD,iBAAiB;QACtB,KAAKW,UAAU;QACf,KAAKI,mBAAmB;UAAE;YACxBg7D,0CAA0C,CACxCrF,YAAY,EACZhB,YACF,CAAC;YAEDgG,6BAA6B,CAAChG,YAAY,EAAE7pB,OAAO,CAAC;YACpD;UACF;QAQA,KAAKvqC,qBAAqB;UAAE;YAC1B;UACF;QAEA,KAAKD,kBAAkB;UAAE;YACvB,IAAI46D,UAAU,GAAGvG,YAAY,CAAClxD,SAAS;YACvC,IAAI41B,SAAS,GAAGs7B,YAAY,CAAC3kC,aAAa;YAC1C,IAAIiD,QAAQ,GAAGoG,SAAS,KAAK,IAAI;YAEjC,IAAIpG,QAAQ,EAAE;cACZ,IAAIioC,UAAU,CAAC9nC,WAAW,GAAG9D,gCAAgC,EAAE;gBAE7D0rC,0CAA0C,CACxCrF,YAAY,EACZhB,YACF,CAAC;cACH,CAAC,MAAM;gBACL,IAAIA,YAAY,CAACjlC,IAAI,GAAGtS,cAAc,EAAC,CAAC,KACnC;kBAEH89C,UAAU,CAAC9nC,WAAW,IAAI9D,gCAAgC;kBAC1D0rC,0CAA0C,CACxCrF,YAAY,EACZhB,YACF,CAAC;gBACH;cACF;YACF,CAAC,MAAM;cAOLuG,UAAU,CAAC9nC,WAAW,IAAI9D,gCAAgC;cAC1D0rC,0CAA0C,CACxCrF,YAAY,EACZhB,YACF,CAAC;YACH;YAEA;UACF;QAEA,KAAKn0D,cAAc;UAAE;YACnBw6D,0CAA0C,CACxCrF,YAAY,EACZhB,YACF,CAAC;YAED;UACF;QAEA,KAAKl0D,sBAAsB;QAE3B;UAAS;YACPu6D,0CAA0C,CACxCrF,YAAY,EACZhB,YACF,CAAC;YACD;UACF;MACF;IACF;IAEA,SAASwG,2BAA2BA,CAACxG,YAAY,EAAE;MACjD14B,eAAe,CAAC04B,YAAY,CAAC;MAC7ByG,2BAA2B,CAACzG,YAAY,CAAC;MACzC54B,iBAAiB,CAAC,CAAC;IACrB;IAWA,IAAIs/B,mBAAmB,GAAG1pD,mBAAmB;IAC7C,SAAS2pD,yBAAyBA,CAAC3G,YAAY,EAAE;MAC/C4G,gCAAgC,CAAC5G,YAAY,CAAC;IAChD;IAEA,SAAS6G,oCAAoCA,CAAC7mD,WAAW,EAAE;MACzD,IAAIA,WAAW,CAACs0C,YAAY,GAAGoS,mBAAmB,EAAE;QAClD,IAAIpnD,KAAK,GAAGU,WAAW,CAACV,KAAK;QAE7B,OAAOA,KAAK,KAAK,IAAI,EAAE;UACrBsnD,gCAAgC,CAACtnD,KAAK,CAAC;UACvCA,KAAK,GAAGA,KAAK,CAACC,OAAO;QACvB;MACF;IACF;IAEA,SAASqnD,gCAAgCA,CAAC7qD,KAAK,EAAE;MAC/C,QAAQA,KAAK,CAACjO,GAAG;QACf,KAAK/B,aAAa;UAAE;YAClB86D,oCAAoC,CAAC9qD,KAAK,CAAC;YAE3C,IAAIA,KAAK,CAAC2C,KAAK,GAAGgoD,mBAAmB,EAAE;cACrC,IAAI3qD,KAAK,CAACsf,aAAa,KAAK,IAAI,EAAE;gBAChC9I,eAAe,CAAC,CAAC;cACnB;YACF;YAEA;UACF;QAEA,KAAK5nB,aAAa;UAAE;YAClBk8D,oCAAoC,CAAC9qD,KAAK,CAAC;YAE3C;UACF;QAEA,KAAKtR,QAAQ;QACb,KAAKC,UAAU;UAAE;YACf;cACEm8D,oCAAoC,CAAC9qD,KAAK,CAAC;YAC7C;YAEA;UACF;QAEA,KAAKpQ,kBAAkB;UAAE;YACvB,IAAI2yB,QAAQ,GAAGviB,KAAK,CAACsf,aAAa,KAAK,IAAI;YAE3C,IAAIiD,QAAQ,EAAC,CAAC,KACT;cACH,IAAIv0B,OAAO,GAAGgS,KAAK,CAACxN,SAAS;cAC7B,IAAI2zD,SAAS,GAAGn4D,OAAO,KAAK,IAAI,IAAIA,OAAO,CAACsxB,aAAa,KAAK,IAAI;cAElE,IAAI6mC,SAAS,EAAE;gBAGb,IAAI4E,SAAS,GAAGJ,mBAAmB;gBACnCA,mBAAmB,GAAG/oD,gBAAgB;gBACtCkpD,oCAAoC,CAAC9qD,KAAK,CAAC;gBAC3C2qD,mBAAmB,GAAGI,SAAS;cACjC,CAAC,MAAM;gBACLD,oCAAoC,CAAC9qD,KAAK,CAAC;cAC7C;YACF;YAEA;UACF;QAEA;UAAS;YACP8qD,oCAAoC,CAAC9qD,KAAK,CAAC;UAC7C;MACF;IACF;IAEA,SAASgrD,uBAAuBA,CAAC/mD,WAAW,EAAE;MAW5C,IAAIgnD,aAAa,GAAGhnD,WAAW,CAACzR,SAAS;MAEzC,IAAIy4D,aAAa,KAAK,IAAI,EAAE;QAC1B,IAAIC,aAAa,GAAGD,aAAa,CAAC1nD,KAAK;QAEvC,IAAI2nD,aAAa,KAAK,IAAI,EAAE;UAC1BD,aAAa,CAAC1nD,KAAK,GAAG,IAAI;UAE1B,GAAG;YAED,IAAI4nD,eAAe,GAAGD,aAAa,CAAC1nD,OAAO;YAE3C0nD,aAAa,CAAC1nD,OAAO,GAAG,IAAI;YAC5B0nD,aAAa,GAAGC,eAAe;UACjC,CAAC,QAAQD,aAAa,KAAK,IAAI;QACjC;MACF;IACF;IAEA,SAASE,+BAA+BA,CACtCnH,YAAY,EACZN,sBAAsB,EACtBhhB,SAAS,EACT;MACA,IAAIwgB,aAAa,CAACc,YAAY,CAAC,EAAE;QAC/B1a,uBAAuB,CAAC,CAAC;QACzBsb,2BAA2B,CACzBliB,SAAS,EACTshB,YAAY,EACZN,sBACF,CAAC;QACDva,2BAA2B,CAAC6a,YAAY,CAAC;MAC3C,CAAC,MAAM;QACLY,2BAA2B,CACzBliB,SAAS,EACTshB,YAAY,EACZN,sBACF,CAAC;MACH;IACF;IAEA,SAAS0H,wCAAwCA,CAACpnD,WAAW,EAAE;MAG7D,IAAI2uB,SAAS,GAAG3uB,WAAW,CAAC2uB,SAAS;MAErC,IAAI,CAAC3uB,WAAW,CAACtB,KAAK,GAAGpC,aAAa,MAAMN,SAAS,EAAE;QACrD,IAAI2yB,SAAS,KAAK,IAAI,EAAE;UACtB,KAAK,IAAIzsC,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGysC,SAAS,CAAC/yC,MAAM,EAAEsG,CAAC,EAAE,EAAE;YACzC,IAAIwsC,aAAa,GAAGC,SAAS,CAACzsC,CAAC,CAAC;YAEhC68D,UAAU,GAAGrwB,aAAa;YAC1B24B,oDAAoD,CAClD34B,aAAa,EACb1uB,WACF,CAAC;UACH;QACF;QAEA+mD,uBAAuB,CAAC/mD,WAAW,CAAC;MACtC;MAEA,IAAIilD,cAAc,GAAG19B,eAAe,CAAC,CAAC;MAEtC,IAAIvnB,WAAW,CAACs0C,YAAY,GAAGp2C,WAAW,EAAE;QAC1C,IAAIoB,KAAK,GAAGU,WAAW,CAACV,KAAK;QAE7B,OAAOA,KAAK,KAAK,IAAI,EAAE;UACrBgoB,eAAe,CAAChoB,KAAK,CAAC;UACtBmnD,2BAA2B,CAACnnD,KAAK,CAAC;UAClCA,KAAK,GAAGA,KAAK,CAACC,OAAO;QACvB;MACF;MAEA+nB,eAAe,CAAC29B,cAAc,CAAC;IACjC;IAEA,SAASwB,2BAA2BA,CAACzG,YAAY,EAAE;MACjD,QAAQA,YAAY,CAAClyD,GAAG;QACtB,KAAKxD,iBAAiB;QACtB,KAAKW,UAAU;QACf,KAAKI,mBAAmB;UAAE;YACxB+7D,wCAAwC,CAACpH,YAAY,CAAC;YAEtD,IAAIA,YAAY,CAACthD,KAAK,GAAG9B,SAAS,EAAE;cAClCuqD,+BAA+B,CAC7BnH,YAAY,EACZA,YAAY,CAACnyD,MAAM,EACnBsoC,OAAO,GAAGH,SACZ,CAAC;YACH;YAEA;UACF;QAEA,KAAKrqC,kBAAkB;UAAE;YACvB,IAAI9F,QAAQ,GAAGm6D,YAAY,CAAClxD,SAAS;YACrC,IAAI41B,SAAS,GAAGs7B,YAAY,CAAC3kC,aAAa;YAC1C,IAAIiD,QAAQ,GAAGoG,SAAS,KAAK,IAAI;YAEjC,IACEpG,QAAQ,IACRz4B,QAAQ,CAAC44B,WAAW,GAAG9D,gCAAgC,KAEtDqlC,YAAY,CAACnyD,MAAM,KAAK,IAAI,IAC3BmyD,YAAY,CAACnyD,MAAM,CAACC,GAAG,KAAK3C,iBAAiB,CAAC,EAChD;cAKAtF,QAAQ,CAAC44B,WAAW,IAAI,CAAC9D,gCAAgC;cACzD2sC,2CAA2C,CAACtH,YAAY,CAAC;YAC3D,CAAC,MAAM;cACLoH,wCAAwC,CAACpH,YAAY,CAAC;YACxD;YAEA;UACF;QAEA;UAAS;YACPoH,wCAAwC,CAACpH,YAAY,CAAC;YACtD;UACF;MACF;IACF;IAEA,SAASsH,2CAA2CA,CAACtnD,WAAW,EAAE;MAGhE,IAAI2uB,SAAS,GAAG3uB,WAAW,CAAC2uB,SAAS;MAErC,IAAI,CAAC3uB,WAAW,CAACtB,KAAK,GAAGpC,aAAa,MAAMN,SAAS,EAAE;QACrD,IAAI2yB,SAAS,KAAK,IAAI,EAAE;UACtB,KAAK,IAAIzsC,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGysC,SAAS,CAAC/yC,MAAM,EAAEsG,CAAC,EAAE,EAAE;YACzC,IAAIwsC,aAAa,GAAGC,SAAS,CAACzsC,CAAC,CAAC;YAEhC68D,UAAU,GAAGrwB,aAAa;YAC1B24B,oDAAoD,CAClD34B,aAAa,EACb1uB,WACF,CAAC;UACH;QACF;QAEA+mD,uBAAuB,CAAC/mD,WAAW,CAAC;MACtC;MAEA,IAAIilD,cAAc,GAAG19B,eAAe,CAAC,CAAC;MAEtC,IAAIjoB,KAAK,GAAGU,WAAW,CAACV,KAAK;MAE7B,OAAOA,KAAK,KAAK,IAAI,EAAE;QACrBgoB,eAAe,CAAChoB,KAAK,CAAC;QACtBioD,uBAAuB,CAACjoD,KAAK,CAAC;QAC9BA,KAAK,GAAGA,KAAK,CAACC,OAAO;MACvB;MAEA+nB,eAAe,CAAC29B,cAAc,CAAC;IACjC;IAEA,SAASsC,uBAAuBA,CAACvH,YAAY,EAAE;MAC7C,QAAQA,YAAY,CAAClyD,GAAG;QACtB,KAAKxD,iBAAiB;QACtB,KAAKW,UAAU;QACf,KAAKI,mBAAmB;UAAE;YAExB87D,+BAA+B,CAC7BnH,YAAY,EACZA,YAAY,CAACnyD,MAAM,EACnBsoC,OACF,CAAC;YAGDmxB,2CAA2C,CAACtH,YAAY,CAAC;YACzD;UACF;QAEA,KAAKr0D,kBAAkB;UAAE;YACvB,IAAI9F,QAAQ,GAAGm6D,YAAY,CAAClxD,SAAS;YAErC,IAAIjJ,QAAQ,CAAC44B,WAAW,GAAG9D,gCAAgC,EAAE;cAC3D90B,QAAQ,CAAC44B,WAAW,IAAI,CAAC9D,gCAAgC;cACzD2sC,2CAA2C,CAACtH,YAAY,CAAC;YAC3D;YAEA;UACF;QAEA;UAAS;YACPsH,2CAA2C,CAACtH,YAAY,CAAC;YACzD;UACF;MACF;IACF;IAEA,SAASqH,oDAAoDA,CAC3DG,kBAAkB,EAClB9H,sBAAsB,EACtB;MACA,OAAOX,UAAU,KAAK,IAAI,EAAE;QAC1B,IAAIhjD,KAAK,GAAGgjD,UAAU;QAGtBz3B,eAAe,CAACvrB,KAAK,CAAC;QACtB0rD,4CAA4C,CAC1C1rD,KAAK,EACL2jD,sBACF,CAAC;QACDt4B,iBAAiB,CAAC,CAAC;QACnB,IAAI9nB,KAAK,GAAGvD,KAAK,CAACuD,KAAK;QAEvB,IAAIA,KAAK,KAAK,IAAI,EAAE;UAClBA,KAAK,CAACzR,MAAM,GAAGkO,KAAK;UACpBgjD,UAAU,GAAGz/C,KAAK;QACpB,CAAC,MAAM;UACLooD,uDAAuD,CACrDF,kBACF,CAAC;QACH;MACF;IACF;IAEA,SAASE,uDAAuDA,CAC9DF,kBAAkB,EAClB;MACA,OAAOzI,UAAU,KAAK,IAAI,EAAE;QAC1B,IAAIhjD,KAAK,GAAGgjD,UAAU;QACtB,IAAIx/C,OAAO,GAAGxD,KAAK,CAACwD,OAAO;QAC3B,IAAI4tB,WAAW,GAAGpxB,KAAK,CAAClO,MAAM;QAI9B+0D,uBAAuB,CAAC7mD,KAAK,CAAC;QAE9B,IAAIA,KAAK,KAAKyrD,kBAAkB,EAAE;UAChCzI,UAAU,GAAG,IAAI;UACjB;QACF;QAEA,IAAIx/C,OAAO,KAAK,IAAI,EAAE;UACpBA,OAAO,CAAC1R,MAAM,GAAGs/B,WAAW;UAC5B4xB,UAAU,GAAGx/C,OAAO;UACpB;QACF;QAEAw/C,UAAU,GAAG5xB,WAAW;MAC1B;IACF;IAEA,SAASs6B,4CAA4CA,CACnD19D,OAAO,EACP21D,sBAAsB,EACtB;MACA,QAAQ31D,OAAO,CAAC+D,GAAG;QACjB,KAAKxD,iBAAiB;QACtB,KAAKW,UAAU;QACf,KAAKI,mBAAmB;UAAE;YACxB87D,+BAA+B,CAC7Bp9D,OAAO,EACP21D,sBAAsB,EACtBvpB,OACF,CAAC;YACD;UACF;MACF;IACF;IAEA,SAASwxB,4BAA4BA,CAAC5rD,KAAK,EAAE;MAC3C;QAGE,QAAQA,KAAK,CAACjO,GAAG;UACf,KAAKxD,iBAAiB;UACtB,KAAKW,UAAU;UACf,KAAKI,mBAAmB;YAAE;cACxB,IAAI;gBACFy1D,yBAAyB,CAAC5qB,MAAM,GAAGF,SAAS,EAAEj6B,KAAK,CAAC;cACtD,CAAC,CAAC,OAAO9f,KAAK,EAAE;gBACd0jE,uBAAuB,CAAC5jD,KAAK,EAAEA,KAAK,CAAClO,MAAM,EAAE5R,KAAK,CAAC;cACrD;cAEA;YACF;UAEA,KAAKsO,cAAc;YAAE;cACnB,IAAI1E,QAAQ,GAAGkW,KAAK,CAACjN,SAAS;cAE9B,IAAI,OAAOjJ,QAAQ,CAACojD,iBAAiB,KAAK,UAAU,EAAE;gBACpD,IAAI;kBACFpjD,QAAQ,CAACojD,iBAAiB,CAAC,CAAC;gBAC9B,CAAC,CAAC,OAAOhtD,KAAK,EAAE;kBACd0jE,uBAAuB,CAAC5jD,KAAK,EAAEA,KAAK,CAAClO,MAAM,EAAE5R,KAAK,CAAC;gBACrD;cACF;cAEA;YACF;QACF;MACF;IACF;IAEA,SAAS2rE,6BAA6BA,CAAC7rD,KAAK,EAAE;MAC5C;QAGE,QAAQA,KAAK,CAACjO,GAAG;UACf,KAAKxD,iBAAiB;UACtB,KAAKW,UAAU;UACf,KAAKI,mBAAmB;YAAE;cACxB,IAAI;gBACFy1D,yBAAyB,CAAC3qB,OAAO,GAAGH,SAAS,EAAEj6B,KAAK,CAAC;cACvD,CAAC,CAAC,OAAO9f,KAAK,EAAE;gBACd0jE,uBAAuB,CAAC5jD,KAAK,EAAEA,KAAK,CAAClO,MAAM,EAAE5R,KAAK,CAAC;cACrD;cAEA;YACF;QACF;MACF;IACF;IAEA,SAAS4rE,8BAA8BA,CAAC9rD,KAAK,EAAE;MAC7C;QAGE,QAAQA,KAAK,CAACjO,GAAG;UACf,KAAKxD,iBAAiB;UACtB,KAAKW,UAAU;UACf,KAAKI,mBAAmB;YAAE;cACxB,IAAI;gBACFu1D,2BAA2B,CACzB1qB,MAAM,GAAGF,SAAS,EAClBj6B,KAAK,EACLA,KAAK,CAAClO,MACR,CAAC;cACH,CAAC,CAAC,OAAO5R,KAAK,EAAE;gBACd0jE,uBAAuB,CAAC5jD,KAAK,EAAEA,KAAK,CAAClO,MAAM,EAAE5R,KAAK,CAAC;cACrD;cAEA;YACF;UAEA,KAAKsO,cAAc;YAAE;cACnB,IAAI1E,QAAQ,GAAGkW,KAAK,CAACjN,SAAS;cAE9B,IAAI,OAAOjJ,QAAQ,CAAC25D,oBAAoB,KAAK,UAAU,EAAE;gBACvDC,8BAA8B,CAAC1jD,KAAK,EAAEA,KAAK,CAAClO,MAAM,EAAEhI,QAAQ,CAAC;cAC/D;cAEA;YACF;QACF;MACF;IACF;IAEA,SAASiiE,+BAA+BA,CAAC/rD,KAAK,EAAE;MAC9C;QAGE,QAAQA,KAAK,CAACjO,GAAG;UACf,KAAKxD,iBAAiB;UACtB,KAAKW,UAAU;UACf,KAAKI,mBAAmB;YAAE;cACxB,IAAI;gBACFu1D,2BAA2B,CACzBzqB,OAAO,GAAGH,SAAS,EACnBj6B,KAAK,EACLA,KAAK,CAAClO,MACR,CAAC;cACH,CAAC,CAAC,OAAO5R,KAAK,EAAE;gBACd0jE,uBAAuB,CAAC5jD,KAAK,EAAEA,KAAK,CAAClO,MAAM,EAAE5R,KAAK,CAAC;cACrD;YACF;QACF;MACF;IACF;IAEA,IAAI,OAAO8c,MAAM,KAAK,UAAU,IAAIA,MAAM,CAACC,GAAG,EAAE;MAC9C,IAAI+uD,SAAS,GAAGhvD,MAAM,CAACC,GAAG;MAC1B+uD,SAAS,CAAC,oBAAoB,CAAC;MAC/BA,SAAS,CAAC,2BAA2B,CAAC;MACtCA,SAAS,CAAC,eAAe,CAAC;MAC1BA,SAAS,CAAC,kBAAkB,CAAC;MAC7BA,SAAS,CAAC,eAAe,CAAC;IAC5B;IAEA,IAAIC,sBAAsB,GAAG1sE,oBAAoB,CAACwjC,oBAAoB;IACtE,SAASmpC,sBAAsBA,CAAClsD,KAAK,EAAE;MACrC;QAKE,IAAImsD,2BAA2B,GAC7B,OAAOC,wBAAwB,KAAK,WAAW,GAC3CA,wBAAwB,GACxBnmE,SAAS;QAEf,IAAIomE,aAAa,GAAG,OAAOC,IAAI,KAAK,WAAW;QAC/C,OAAOD,aAAa,IAAIF,2BAA2B,KAAK,KAAK;MAC/D;IACF;IACA,SAASI,0BAA0BA,CAAA,EAAG;MACpC;QACE,IAAIJ,2BAA2B,GAC7B,OAAOC,wBAAwB,KAAK,WAAW,GAC3CA,wBAAwB,GACxBnmE,SAAS;QAEf,IACE,CAACkmE,2BAA2B,IAC5BF,sBAAsB,CAACj+D,OAAO,KAAK,IAAI,EACvC;UAEA9N,KAAK,CACH,+DAA+D,GAC7D,UACJ,CAAC;QACH;QAEA,OAAOisE,2BAA2B;MACpC;IACF;IAEA,IAAIK,eAAe,GAAG,OAAO9xC,OAAO,KAAK,UAAU,GAAGA,OAAO,GAAGliB,GAAG;IACnE,IAAI8hC,sBAAsB,GAAG/6C,oBAAoB,CAAC+6C,sBAAsB;MACtEmyB,mBAAmB,GAAGltE,oBAAoB,CAAC+iB,iBAAiB;MAC5Dk4B,uBAAuB,GAAGj7C,oBAAoB,CAACi7C,uBAAuB;MACtEzX,oBAAoB,GAAGxjC,oBAAoB,CAACwjC,oBAAoB;IAClE,IAAIugC,SAAS,GAEX,CAAC;IACH,IAAIoJ,cAAc,GAEhB,CAAC;IACH,IAAIC,aAAa,GAEf,CAAC;IACH,IAAItJ,aAAa,GAEf,CAAC;IACH,IAAIuJ,cAAc,GAAG,CAAC;IACtB,IAAIC,gBAAgB,GAAG,CAAC;IACxB,IAAIC,WAAW,GAAG,CAAC;IACnB,IAAIC,aAAa,GAAG,CAAC;IACrB,IAAIC,sBAAsB,GAAG,CAAC;IAC9B,IAAIC,aAAa,GAAG,CAAC;IACrB,IAAIC,kBAAkB,GAAG,CAAC;IAE1B,IAAIC,gBAAgB,GAAG7J,SAAS;IAEhC,IAAIn/B,kBAAkB,GAAG,IAAI;IAE7B,IAAIvH,cAAc,GAAG,IAAI;IAEzB,IAAIwH,6BAA6B,GAAG/W,OAAO;IAC3C,IAAI+/C,YAAY,GAAG,CAAC;IACpB,IAAIC,gBAAgB,GAAG,CAAC;IACxB,IAAIC,eAAe,GAAG,CAAC;IACvB,IAAIC,oBAAoB,GAAG,CAAC;IAC5B,IAAIC,mBAAmB,GAAG,CAAC;IAC3B,IAAIC,qCAAqC,GAAG,CAAC;IAC7C,IAAIC,iCAAiC,GAAG,CAAC;IACzC,IAAIC,2BAA2B,GAAG,CAAC;IACnC,IAAIC,oBAAoB,GAAG,CAAC;IAK5B,IAAIC,6BAA6B,GAAGT,YAAY;IAChD,IAAIU,yBAAyB,GAAG,IAAI;IAIpC,IAAIC,uCAAuC,GAAG,KAAK;IASnD,IAAIC,oBAAoB,GAAG3gD,OAAO;IAElC,IAAI4gD,4BAA4B,GAAGrB,cAAc;IAEjD,IAAIsB,4BAA4B,GAAG,IAAI;IAGvC,IAAIC,8BAA8B,GAAG9gD,OAAO;IAE5C,IAAI+gD,yCAAyC,GAAG/gD,OAAO;IAEvD,IAAIghD,6BAA6B,GAAGhhD,OAAO;IAE3C,IAAIihD,0BAA0B,GAAGhhD,MAAM;IAEvC,IAAIihD,kCAAkC,GAAG,IAAI;IAG7C,IAAIC,mCAAmC,GAAG,IAAI;IAK9C,IAAIC,4BAA4B,GAAG,CAAC;IACpC,IAAIC,oBAAoB,GAAG,GAAG;IAG9B,IAAIC,kCAAkC,GAAGC,QAAQ;IAGjD,IAAIC,iBAAiB,GAAG,GAAG;IAC3B,IAAIC,yBAAyB,GAAG,IAAI;IAEpC,SAASC,gBAAgBA,CAAA,EAAG;MAC1BJ,kCAAkC,GAAGjmD,KAAK,CAAC,CAAC,GAAGmmD,iBAAiB;IAClE;IAEA,SAAShN,mBAAmBA,CAAA,EAAG;MAC7B,OAAO8M,kCAAkC;IAC3C;IACA,IAAIK,gBAAgB,GAAG,KAAK;IAC5B,IAAIC,kBAAkB,GAAG,IAAI;IAC7B,IAAIC,sCAAsC,GAAG,IAAI;IACjD,IAAIC,0BAA0B,GAAG,KAAK;IACtC,IAAIC,6BAA6B,GAAG,IAAI;IACxC,IAAIC,0BAA0B,GAAGhiD,OAAO;IACxC,IAAIiiD,6BAA6B,GAAG,EAAE;IAEtC,IAAIC,mBAAmB,GAAG,EAAE;IAC5B,IAAIC,iBAAiB,GAAG,CAAC;IACzB,IAAIC,qBAAqB,GAAG,IAAI;IAChC,IAAIC,wBAAwB,GAAG,KAAK;IACpC,IAAIC,qCAAqC,GAAG,KAAK;IACjD,IAAIC,2BAA2B,GAAG,EAAE;IACpC,IAAIC,wBAAwB,GAAG,CAAC;IAChC,IAAIC,4BAA4B,GAAG,IAAI;IACvC,IAAIC,wBAAwB,GAAG,KAAK;IACpC,SAAS7tC,qBAAqBA,CAAA,EAAG;MAC/B,OAAOiC,kBAAkB;IAC3B;IACA,SAASE,gCAAgCA,CAAA,EAAG;MAC1C,OAAOD,6BAA6B;IACtC;IACA,SAASS,yBAAyBA,CAAA,EAAG;MACnC,OAAOgpC,6BAA6B,KAAKP,eAAe;IAC1D;IACA,SAASlnB,iBAAiBA,CAACpmC,KAAK,EAAE;MAEhC,IAAIgf,IAAI,GAAGhf,KAAK,CAACgf,IAAI;MAErB,IAAI,CAACA,IAAI,GAAGtS,cAAc,MAAMD,MAAM,EAAE;QACtC,OAAOe,QAAQ;MACjB,CAAC,MAAM,IACL,CAAC2/C,gBAAgB,GAAGR,aAAa,MAAMrJ,SAAS,IAChDl/B,6BAA6B,KAAK/W,OAAO,EACzC;QAUA,OAAOwF,iBAAiB,CAACuR,6BAA6B,CAAC;MACzD;MAEA,IAAIwB,UAAU,GAAGi5B,wBAAwB,CAAC,CAAC;MAE3C,IAAIj5B,UAAU,KAAK,IAAI,EAAE;QACvB;UACE,IAAIoqC,qBAAqB,GAAGx1B,uBAAuB,CAAC5U,UAAU;UAE9D,IAAI,CAACoqC,qBAAqB,CAAC7qB,cAAc,EAAE;YACzC6qB,qBAAqB,CAAC7qB,cAAc,GAAG,IAAIrY,GAAG,CAAC,CAAC;UAClD;UAEAkjC,qBAAqB,CAAC7qB,cAAc,CAACnwB,GAAG,CAAChV,KAAK,CAAC;QACjD;QAEA,IAAIiwD,eAAe,GAAGxpC,uBAAuB,CAAC,CAAC;QAC/C,OAAOwpC,eAAe,KAAK3iD,MAAM,GAC7B2iD,eAAe,GAGftqC,qBAAqB,CAAC,CAAC;MAC7B;MAOA,IAAIjS,UAAU,GAAG8B,wBAAwB,CAAC,CAAC;MAE3C,IAAI9B,UAAU,KAAKpG,MAAM,EAAE;QACzB,OAAOoG,UAAU;MACnB;MAOA,IAAIw8C,SAAS,GAAG53C,uBAAuB,CAAC,CAAC;MACzC,OAAO43C,SAAS;IAClB;IAEA,SAASC,gBAAgBA,CAACnwD,KAAK,EAAE;MAK/B,IAAIgf,IAAI,GAAGhf,KAAK,CAACgf,IAAI;MAErB,IAAI,CAACA,IAAI,GAAGtS,cAAc,MAAMD,MAAM,EAAE;QACtC,OAAOe,QAAQ;MACjB;MAEA,OAAOoF,kBAAkB,CAAC,CAAC;IAC7B;IAEA,SAAS4xB,mBAAmBA,CAAA,EAAG;MAC7B,IAAI8pB,0BAA0B,KAAKhhD,MAAM,EAAE;QAWzC,IAAI8iD,cAAc,GAChBr9C,gBAAgB,CAACqR,6BAA6B,EAAE1U,aAAa,CAAC,IAC9D,CAACsR,cAAc,CAAC,CAAC;QAEnB,IAAIovC,cAAc,EAAE;UAGlB9B,0BAA0B,GAAG5+C,aAAa;QAC5C,CAAC,MAAM;UAEL4+C,0BAA0B,GAAG37C,uBAAuB,CAAC,CAAC;QACxD;MACF;MAEA,IAAI09C,eAAe,GAAGr3B,kBAAkB,CAAC,CAAC;MAE1C,IAAIq3B,eAAe,KAAK,IAAI,EAAE;QAI5BA,eAAe,CAAC1tD,KAAK,IAAIzB,QAAQ;MACnC;MAEA,OAAOotD,0BAA0B;IACnC;IACA,SAAShY,gBAAgBA,CAAA,EAAG;MAC1B,OAAOgY,0BAA0B;IACnC;IACA,SAAS3sB,qBAAqBA,CAACt2B,IAAI,EAAErL,KAAK,EAAEsR,IAAI,EAAE;MAChD;QACE,IAAIy+C,wBAAwB,EAAE;UAC5B7vE,KAAK,CAAC,+CAA+C,CAAC;QACxD;MACF;MAEA;QACE,IAAIwvE,wBAAwB,EAAE;UAC5BC,qCAAqC,GAAG,IAAI;QAC9C;MACF;MAGA,IAEGtkD,IAAI,KAAK8Y,kBAAkB,IAC1B0pC,6BAA6B,KAAKP,eAAe,IACnDjiD,IAAI,CAACyZ,mBAAmB,KAAK,IAAI,EACjC;QAGAwrC,iBAAiB,CAACjlD,IAAI,EAAEgC,OAAO,CAAC;QAChCkjD,iBAAiB,CACfllD,IAAI,EACJ+Y,6BAA6B,EAC7BkqC,0BACF,CAAC;MACH;MAEA76C,eAAe,CAACpI,IAAI,EAAEiG,IAAI,CAAC;MAE3B,IACE,CAAC67C,gBAAgB,GAAGR,aAAa,MAAMt/C,OAAO,IAC9ChC,IAAI,KAAK8Y,kBAAkB,EAC3B;QAMAqsC,gCAAgC,CAACxwD,KAAK,CAAC;MACzC,CAAC,MAAM;QAGL;UACE,IAAI2K,iBAAiB,EAAE;YACrBkK,kBAAkB,CAACxJ,IAAI,EAAErL,KAAK,EAAEsR,IAAI,CAAC;UACvC;QACF;QAEAm/C,iCAAiC,CAACzwD,KAAK,CAAC;QAExC,IAAIqL,IAAI,KAAK8Y,kBAAkB,EAAE;UAG/B,IAAI,CAACgpC,gBAAgB,GAAGR,aAAa,MAAMrJ,SAAS,EAAE;YACpD8K,yCAAyC,GAAGl7C,UAAU,CACpDk7C,yCAAyC,EACzC98C,IACF,CAAC;UACH;UAEA,IAAI28C,4BAA4B,KAAKjB,sBAAsB,EAAE;YAO3DuD,iBAAiB,CACfllD,IAAI,EACJ+Y,6BAA6B,EAC7BkqC,0BACF,CAAC;UACH;QACF;QAEA/qC,qBAAqB,CAAClY,IAAI,CAAC;QAE3B,IACEiG,IAAI,KAAK9D,QAAQ,IACjB2/C,gBAAgB,KAAK7J,SAAS,IAC9B,CAACtjD,KAAK,CAACgf,IAAI,GAAGtS,cAAc,MAAMD,MAAM,EACxC;UACA,IAAIsW,oBAAoB,CAACY,gBAAgB,EAAC,CAAC,KACtC;YAMHorC,gBAAgB,CAAC,CAAC;YAClBhrC,8BAA8B,CAAC,CAAC;UAClC;QACF;MACF;IACF;IACA,SAASiE,8BAA8BA,CAAChoB,KAAK,EAAE;MAG7C,OAAO,CAACmtD,gBAAgB,GAAGR,aAAa,MAAMrJ,SAAS;IACzD;IAGA,SAAS/9B,2BAA2BA,CAACla,IAAI,EAAEqlD,UAAU,EAAE;MACrD;QACEroB,qBAAqB,CAAC,CAAC;MACzB;MAEA,IAAI,CAAC8kB,gBAAgB,IAAIR,aAAa,GAAGtJ,aAAa,CAAC,MAAMC,SAAS,EAAE;QACtE,MAAM,IAAIpkE,KAAK,CAAC,gCAAgC,CAAC;MACnD;MAGA,IAAIumC,oBAAoB,GAAGpa,IAAI,CAACuZ,YAAY;MAC5C,IAAI+rC,sBAAsB,GAAGC,mBAAmB,CAAC,CAAC;MAElD,IAAID,sBAAsB,EAAE;QAG1B,IAAItlD,IAAI,CAACuZ,YAAY,KAAKa,oBAAoB,EAAE;UAI9C,OAAO,IAAI;QACb;MACF;MAIA,IAAIxV,KAAK,GAAGG,YAAY,CACtB/E,IAAI,EACJA,IAAI,KAAK8Y,kBAAkB,GAAGC,6BAA6B,GAAG/W,OAChE,CAAC;MAED,IAAI4C,KAAK,KAAK5C,OAAO,EAAE;QAErB,OAAO,IAAI;MACb;MAOA,IAAIwjD,eAAe,GACjB,CAACt+C,oBAAoB,CAAClH,IAAI,EAAE4E,KAAK,CAAC,IAClC,CAACwC,mBAAmB,CAACpH,IAAI,EAAE4E,KAAK,CAAC,IACjC,CAACygD,UAAU;MACb,IAAII,UAAU,GAAGD,eAAe,GAC5BE,oBAAoB,CAAC1lD,IAAI,EAAE4E,KAAK,CAAC,GACjC+gD,cAAc,CAAC3lD,IAAI,EAAE4E,KAAK,CAAC;MAE/B,IAAI6gD,UAAU,KAAKlE,cAAc,EAAE;QACjC,IAAIqE,mBAAmB,GAAGJ,eAAe;QAEzC,GAAG;UACD,IAAIC,UAAU,KAAK5D,kBAAkB,EAAE;YAIrCqD,iBAAiB,CAACllD,IAAI,EAAE4E,KAAK,EAAE3C,MAAM,CAAC;UACxC,CAAC,MAAM;YAOL,IAAI22C,YAAY,GAAG54C,IAAI,CAACrd,OAAO,CAACwE,SAAS;YAEzC,IACEy+D,mBAAmB,IACnB,CAACC,oCAAoC,CAACjN,YAAY,CAAC,EACnD;cAGA6M,UAAU,GAAGE,cAAc,CAAC3lD,IAAI,EAAE4E,KAAK,CAAC;cAGxCghD,mBAAmB,GAAG,KAAK;cAE3B;YACF;YAEA,IAAIH,UAAU,KAAKhE,WAAW,EAAE;cAC9B,IAAIh7C,wBAAwB,GAAG7B,KAAK;cACpC,IAAIkhD,eAAe,GAAGt/C,mCAAmC,CACvDxG,IAAI,EACJyG,wBACF,CAAC;cAED,IAAIq/C,eAAe,KAAK9jD,OAAO,EAAE;gBAC/B4C,KAAK,GAAGkhD,eAAe;gBACvBL,UAAU,GAAGM,0BAA0B,CACrC/lD,IAAI,EACJyG,wBAAwB,EACxBq/C,eACF,CAAC;gBACDF,mBAAmB,GAAG,KAAK;cAC7B;YACF;YAEA,IAAIH,UAAU,KAAKjE,gBAAgB,EAAE;cACnC,IAAIwE,UAAU,GAAGnD,4BAA4B;cAC7CoC,iBAAiB,CAACjlD,IAAI,EAAEgC,OAAO,CAAC;cAChCkjD,iBAAiB,CAACllD,IAAI,EAAE4E,KAAK,EAAE3C,MAAM,CAAC;cACtCiW,qBAAqB,CAAClY,IAAI,CAAC;cAC3B,MAAMgmD,UAAU;YAClB;YAGAhmD,IAAI,CAAC44C,YAAY,GAAGA,YAAY;YAChC54C,IAAI,CAACimD,aAAa,GAAGrhD,KAAK;YAC1BshD,sBAAsB,CAAClmD,IAAI,EAAEylD,UAAU,EAAE7M,YAAY,EAAEh0C,KAAK,CAAC;UAC/D;UAEA;QACF,CAAC,QAAQ,IAAI;MACf;MAEAsT,qBAAqB,CAAClY,IAAI,CAAC;MAC3B,OAAOma,sBAAsB,CAACna,IAAI,EAAEoa,oBAAoB,CAAC;IAC3D;IAEA,SAAS2rC,0BAA0BA,CACjC/lD,IAAI,EACJyG,wBAAwB,EACxBq/C,eAAe,EACf;MAIA,IAAIK,sBAAsB,GAAGjD,kCAAkC;MAC/D,IAAIkD,iBAAiB,GAAGryC,gBAAgB,CAAC/T,IAAI,CAAC;MAE9C,IAAIomD,iBAAiB,EAAE;QAYrB,IAAIC,kBAAkB,GAAGpB,iBAAiB,CAACjlD,IAAI,EAAE8lD,eAAe,CAAC;QACjEO,kBAAkB,CAAC/uD,KAAK,IAAIjC,iBAAiB;QAE7C;UACE4V,uBAAuB,CAAC,CAAC;QAC3B;MACF;MAEA,IAAIw6C,UAAU,GAAGE,cAAc,CAAC3lD,IAAI,EAAE8lD,eAAe,CAAC;MAEtD,IAAIL,UAAU,KAAKhE,WAAW,EAAE;QAE9B,IAAIiB,uCAAuC,IAAI,CAAC0D,iBAAiB,EAAE;UAcjEpmD,IAAI,CAAC0G,0BAA0B,GAAGmB,UAAU,CAC1C7H,IAAI,CAAC0G,0BAA0B,EAC/BD,wBACF,CAAC;UAIDs8C,yCAAyC,IAAIt8C,wBAAwB;UACrE,OAAOk7C,sBAAsB;QAC/B;QAIA,IAAI2E,uBAAuB,GAAGnD,mCAAmC;QACjEA,mCAAmC,GAAGgD,sBAAsB;QAG5D,IAAIG,uBAAuB,KAAK,IAAI,EAAE;UACpC5wC,sBAAsB,CAAC4wC,uBAAuB,CAAC;QACjD;MACF;MAEA,OAAOb,UAAU;IACnB;IAEA,SAAS/vC,sBAAsBA,CAACmD,MAAM,EAAE;MACtC,IAAIsqC,mCAAmC,KAAK,IAAI,EAAE;QAChDA,mCAAmC,GAAGtqC,MAAM;MAC9C,CAAC,MAAM;QAELsqC,mCAAmC,CAACvkE,IAAI,CAAChJ,KAAK,CAC5CutE,mCAAmC,EACnCtqC,MACF,CAAC;MACH;IACF;IAEA,SAASqtC,sBAAsBA,CAAClmD,IAAI,EAAEylD,UAAU,EAAE7M,YAAY,EAAEh0C,KAAK,EAAE;MAIrE,QAAQ6gD,UAAU;QAChB,KAAKlE,cAAc;QACnB,KAAKC,gBAAgB;UAAE;YACrB,MAAM,IAAI3tE,KAAK,CAAC,gDAAgD,CAAC;UACnE;QAEA,KAAK8tE,sBAAsB;UAAE;YAC3B,IAAI16C,uBAAuB,CAACrC,KAAK,CAAC,EAAE;cAIlCsgD,iBAAiB,CAACllD,IAAI,EAAE4E,KAAK,EAAEq+C,0BAA0B,CAAC;cAC1D;YACF;YAEA;UACF;QAEA,KAAKxB,WAAW;QAChB,KAAKC,aAAa;QAClB,KAAKE,aAAa;UAAE;YAClB;UACF;QAEA;UAAS;YACP,MAAM,IAAI/tE,KAAK,CAAC,2BAA2B,CAAC;UAC9C;MACF;MAEA,IAAI0yE,8BAA8B,CAAC,CAAC,EAAE;QAEpCC,UAAU,CACRxmD,IAAI,EACJmjD,mCAAmC,EACnCM,yBAAyB,EACzBR,0BACF,CAAC;MACH,CAAC,MAAM;QACL,IAAIn8C,mBAAmB,CAAClC,KAAK,CAAC,IAAI6gD,UAAU,KAAK/D,aAAa,EAAE;UAG9D,IAAI+E,cAAc,GAChBrD,4BAA4B,GAAGC,oBAAoB,GAAGhmD,KAAK,CAAC,CAAC;UAE/D,IAAIopD,cAAc,GAAG,EAAE,EAAE;YACvBvB,iBAAiB,CAACllD,IAAI,EAAE4E,KAAK,EAAEq+C,0BAA0B,CAAC;YAC1D,IAAI/9C,SAAS,GAAGH,YAAY,CAAC/E,IAAI,EAAEgC,OAAO,CAAC;YAE3C,IAAIkD,SAAS,KAAKlD,OAAO,EAAE;cAGzB;YACF;YAMAhC,IAAI,CAAC0mD,aAAa,GAAG/5C,eAAe,CAClCg6C,mBAAmB,CAACr2C,IAAI,CACtB,IAAI,EACJtQ,IAAI,EACJ44C,YAAY,EACZuK,mCAAmC,EACnCM,yBAAyB,EACzB7+C,KAAK,EACLq+C,0BACF,CAAC,EACDwD,cACF,CAAC;YACD;UACF;QACF;QAEAE,mBAAmB,CACjB3mD,IAAI,EACJ44C,YAAY,EACZuK,mCAAmC,EACnCM,yBAAyB,EACzB7+C,KAAK,EACLq+C,0BACF,CAAC;MACH;IACF;IAEA,SAAS0D,mBAAmBA,CAC1B3mD,IAAI,EACJ44C,YAAY,EACZgO,iBAAiB,EACjB/hB,WAAW,EACXjgC,KAAK,EACL2D,WAAW,EACX;MAGA,IAAIxB,0BAA0B,CAACnC,KAAK,CAAC,EAAE;QAKrC26C,yBAAyB,CAAC3G,YAAY,CAAC;QAIvC,IAAIiO,qBAAqB,GAAG93C,sBAAsB,CAAC,CAAC;QAEpD,IAAI83C,qBAAqB,KAAK,IAAI,EAAE;UAOlC7mD,IAAI,CAACyZ,mBAAmB,GAAGotC,qBAAqB,CAC9CL,UAAU,CAACl2C,IAAI,CAAC,IAAI,EAAEtQ,IAAI,EAAE4mD,iBAAiB,EAAE/hB,WAAW,CAC5D,CAAC;UACDqgB,iBAAiB,CAACllD,IAAI,EAAE4E,KAAK,EAAE2D,WAAW,CAAC;UAC3C;QACF;MACF;MAEAi+C,UAAU,CAACxmD,IAAI,EAAE4mD,iBAAiB,EAAE/hB,WAAW,EAAEt8B,WAAW,CAAC;IAC/D;IAEA,SAASs9C,oCAAoCA,CAACjN,YAAY,EAAE;MAI1D,IAAIzhD,IAAI,GAAGyhD,YAAY;MAEvB,OAAO,IAAI,EAAE;QACX,IAAIzhD,IAAI,CAACG,KAAK,GAAG5B,gBAAgB,EAAE;UACjC,IAAI0mB,WAAW,GAAGjlB,IAAI,CAACilB,WAAW;UAElC,IAAIA,WAAW,KAAK,IAAI,EAAE;YACxB,IAAI0qC,MAAM,GAAG1qC,WAAW,CAAC6W,MAAM;YAE/B,IAAI6zB,MAAM,KAAK,IAAI,EAAE;cACnB,KAAK,IAAIhsE,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGgsE,MAAM,CAACtyE,MAAM,EAAEsG,CAAC,EAAE,EAAE;gBACtC,IAAIi7C,KAAK,GAAG+wB,MAAM,CAAChsE,CAAC,CAAC;gBACrB,IAAIi6C,WAAW,GAAGgB,KAAK,CAAChB,WAAW;gBACnC,IAAIgyB,aAAa,GAAGhxB,KAAK,CAAC/kC,KAAK;gBAE/B,IAAI;kBACF,IAAI,CAAC8iB,QAAQ,CAACihB,WAAW,CAAC,CAAC,EAAEgyB,aAAa,CAAC,EAAE;oBAE3C,OAAO,KAAK;kBACd;gBACF,CAAC,CAAC,OAAOlyE,KAAK,EAAE;kBAGd,OAAO,KAAK;gBACd;cACF;YACF;UACF;QACF;QAEA,IAAIqjB,KAAK,GAAGf,IAAI,CAACe,KAAK;QAEtB,IAAIf,IAAI,CAAC+1C,YAAY,GAAGx3C,gBAAgB,IAAIwC,KAAK,KAAK,IAAI,EAAE;UAC1DA,KAAK,CAACzR,MAAM,GAAG0Q,IAAI;UACnBA,IAAI,GAAGe,KAAK;UACZ;QACF;QAEA,IAAIf,IAAI,KAAKyhD,YAAY,EAAE;UACzB,OAAO,IAAI;QACb;QAEA,OAAOzhD,IAAI,CAACgB,OAAO,KAAK,IAAI,EAAE;UAC5B,IAAIhB,IAAI,CAAC1Q,MAAM,KAAK,IAAI,IAAI0Q,IAAI,CAAC1Q,MAAM,KAAKmyD,YAAY,EAAE;YACxD,OAAO,IAAI;UACb;UAEAzhD,IAAI,GAAGA,IAAI,CAAC1Q,MAAM;QACpB;QAEA0Q,IAAI,CAACgB,OAAO,CAAC1R,MAAM,GAAG0Q,IAAI,CAAC1Q,MAAM;QACjC0Q,IAAI,GAAGA,IAAI,CAACgB,OAAO;MACrB;MAGA,OAAO,IAAI;IACb;IAEA,SAAS+sD,iBAAiBA,CAACllD,IAAI,EAAEmF,cAAc,EAAEoD,WAAW,EAAE;MAK5DpD,cAAc,GAAG2C,WAAW,CAC1B3C,cAAc,EACd69C,6BACF,CAAC;MACD79C,cAAc,GAAG2C,WAAW,CAC1B3C,cAAc,EACd49C,yCACF,CAAC;MACDz6C,mBAAmB,CAACtI,IAAI,EAAEmF,cAAc,EAAEoD,WAAW,CAAC;IACxD;IAGA,SAAS0Q,qBAAqBA,CAACjZ,IAAI,EAAE4E,KAAK,EAAE;MAC1C,IAAI,CAACk9C,gBAAgB,IAAIR,aAAa,GAAGtJ,aAAa,CAAC,MAAMC,SAAS,EAAE;QACtE,MAAM,IAAIpkE,KAAK,CAAC,gCAAgC,CAAC;MACnD;MAEA,IAAIyxE,sBAAsB,GAAGC,mBAAmB,CAAC,CAAC;MAElD,IAAID,sBAAsB,EAAE;QAO1BptC,qBAAqB,CAAClY,IAAI,CAAC;QAC3B,OAAO,IAAI;MACb;MAEA;QACEi9B,oBAAoB,CAAC,CAAC;MACxB;MAEA,IAAIwoB,UAAU,GAAGE,cAAc,CAAC3lD,IAAI,EAAE4E,KAAK,CAAC;MAE5C,IAAI5E,IAAI,CAACtZ,GAAG,KAAKysB,UAAU,IAAIsyC,UAAU,KAAKhE,WAAW,EAAE;QAKzD,IAAIh7C,wBAAwB,GAAG7B,KAAK;QACpC,IAAIkhD,eAAe,GAAGt/C,mCAAmC,CACvDxG,IAAI,EACJyG,wBACF,CAAC;QAED,IAAIq/C,eAAe,KAAK9jD,OAAO,EAAE;UAC/B4C,KAAK,GAAGkhD,eAAe;UACvBL,UAAU,GAAGM,0BAA0B,CACrC/lD,IAAI,EACJyG,wBAAwB,EACxBq/C,eACF,CAAC;QACH;MACF;MAEA,IAAIL,UAAU,KAAKjE,gBAAgB,EAAE;QACnC,IAAIwE,UAAU,GAAGnD,4BAA4B;QAC7CoC,iBAAiB,CAACjlD,IAAI,EAAEgC,OAAO,CAAC;QAChCkjD,iBAAiB,CAACllD,IAAI,EAAE4E,KAAK,EAAE3C,MAAM,CAAC;QACtCiW,qBAAqB,CAAClY,IAAI,CAAC;QAC3B,MAAMgmD,UAAU;MAClB;MAEA,IAAIP,UAAU,KAAK5D,kBAAkB,EAAE;QAIrCqD,iBAAiB,CAACllD,IAAI,EAAE4E,KAAK,EAAEq+C,0BAA0B,CAAC;QAC1D/qC,qBAAqB,CAAClY,IAAI,CAAC;QAC3B,OAAO,IAAI;MACb;MAGA,IAAI44C,YAAY,GAAG54C,IAAI,CAACrd,OAAO,CAACwE,SAAS;MACzC6Y,IAAI,CAAC44C,YAAY,GAAGA,YAAY;MAChC54C,IAAI,CAACimD,aAAa,GAAGrhD,KAAK;MAC1B4hD,UAAU,CACRxmD,IAAI,EACJmjD,mCAAmC,EACnCM,yBAAyB,EACzBR,0BACF,CAAC;MAGD/qC,qBAAqB,CAAClY,IAAI,CAAC;MAC3B,OAAO,IAAI;IACb;IACA,SAAS+3C,mBAAmBA,CAAA,EAAG;MAC7B,OAAO+J,gBAAgB;IACzB;IACA,SAASkF,cAAcA,CAAC1/D,EAAE,EAAE3O,CAAC,EAAE;MAC7B,IAAIsuE,oBAAoB,GAAGnF,gBAAgB;MAC3CA,gBAAgB,IAAIT,cAAc;MAElC,IAAI;QACF,OAAO/5D,EAAE,CAAC3O,CAAC,CAAC;MACd,CAAC,SAAS;QACRmpE,gBAAgB,GAAGmF,oBAAoB;QAGvC,IACEnF,gBAAgB,KAAK7J,SAAS,IAC9B,CAACvgC,oBAAoB,CAACY,gBAAgB,EACtC;UACAorC,gBAAgB,CAAC,CAAC;UAClBhrC,8BAA8B,CAAC,CAAC;QAClC;MACF;IACF;IAMA,SAASwuC,SAASA,CAAC5/D,EAAE,EAAE;MAGrB,IACEy8D,6BAA6B,KAAK,IAAI,IACtCA,6BAA6B,CAACr9D,GAAG,KAAKysB,UAAU,IAChD,CAAC2uC,gBAAgB,IAAIR,aAAa,GAAGtJ,aAAa,CAAC,MAAMC,SAAS,EAClE;QACAsN,mBAAmB,CAAC,CAAC;MACvB;MAEA,IAAI0B,oBAAoB,GAAGnF,gBAAgB;MAC3CA,gBAAgB,IAAIT,cAAc;MAClC,IAAI1nB,cAAc,GAAGxK,uBAAuB,CAAC5U,UAAU;MACvD,IAAImf,gBAAgB,GAAGvvB,wBAAwB,CAAC,CAAC;MAEjD,IAAI;QACFglB,uBAAuB,CAAC5U,UAAU,GAAG,IAAI;QACzCnQ,wBAAwB,CAAC7J,qBAAqB,CAAC;QAE/C,IAAIjZ,EAAE,EAAE;UACN,OAAOA,EAAE,CAAC,CAAC;QACb,CAAC,MAAM;UACL,OAAO1M,SAAS;QAClB;MACF,CAAC,SAAS;QACRwvB,wBAAwB,CAACsvB,gBAAgB,CAAC;QAC1CvK,uBAAuB,CAAC5U,UAAU,GAAGof,cAAc;QACnDmoB,gBAAgB,GAAGmF,oBAAoB;QAIvC,IACE,CAACnF,gBAAgB,IAAIR,aAAa,GAAGtJ,aAAa,CAAC,MACnDC,SAAS,EACT;UACAz/B,uBAAuB,CAAC,CAAC;QAC3B;MACF;IACF;IAKA,SAASmU,uBAAuBA,CAACw6B,uBAAuB,EAAE;MACxDxE,oBAAoB,GAAGwE,uBAAuB;IAChD;IACA,SAASz6B,uBAAuBA,CAAA,EAAG;MACjC,OAAOi2B,oBAAoB;IAC7B;IAEA,SAASyE,wBAAwBA,CAAA,EAAG;MAClC,IAAI71C,cAAc,KAAK,IAAI,EAAE;MAC7B,IAAI8lC,eAAe;MAEnB,IAAImL,6BAA6B,KAAKT,YAAY,EAAE;QAGlD1K,eAAe,GAAG9lC,cAAc,CAAC9qB,MAAM;MACzC,CAAC,MAAM;QAGL4gE,8BAA8B,CAAC91C,cAAc,CAAC;QAC9C8lC,eAAe,GAAG9lC,cAAc;MAClC;MAEA,OAAO8lC,eAAe,KAAK,IAAI,EAAE;QAC/B,IAAI10D,OAAO,GAAG00D,eAAe,CAAClwD,SAAS;QACvCiwD,qBAAqB,CAACz0D,OAAO,EAAE00D,eAAe,CAAC;QAC/CA,eAAe,GAAGA,eAAe,CAAC5wD,MAAM;MAC1C;MAEA8qB,cAAc,GAAG,IAAI;IACvB;IAEA,SAAS0zC,iBAAiBA,CAACjlD,IAAI,EAAE4E,KAAK,EAAE;MACtC5E,IAAI,CAAC44C,YAAY,GAAG,IAAI;MACxB54C,IAAI,CAACimD,aAAa,GAAGjkD,OAAO;MAC5B,IAAI0kD,aAAa,GAAG1mD,IAAI,CAAC0mD,aAAa;MAEtC,IAAIA,aAAa,KAAK35C,SAAS,EAAE;QAG/B/M,IAAI,CAAC0mD,aAAa,GAAG35C,SAAS;QAE9BF,aAAa,CAAC65C,aAAa,CAAC;MAC9B;MAEA,IAAIjtC,mBAAmB,GAAGzZ,IAAI,CAACyZ,mBAAmB;MAElD,IAAIA,mBAAmB,KAAK,IAAI,EAAE;QAChCzZ,IAAI,CAACyZ,mBAAmB,GAAG,IAAI;QAC/BA,mBAAmB,CAAC,CAAC;MACvB;MAEA2tC,wBAAwB,CAAC,CAAC;MAC1BtuC,kBAAkB,GAAG9Y,IAAI;MACzB,IAAIqmD,kBAAkB,GAAGt+B,oBAAoB,CAAC/nB,IAAI,CAACrd,OAAO,EAAE,IAAI,CAAC;MACjE4uB,cAAc,GAAG80C,kBAAkB;MACnCttC,6BAA6B,GAAGnU,KAAK;MACrC49C,6BAA6B,GAAGT,YAAY;MAC5CU,yBAAyB,GAAG,IAAI;MAChCC,uCAAuC,GAAG,KAAK;MAC/CE,4BAA4B,GAAGrB,cAAc;MAC7CsB,4BAA4B,GAAG,IAAI;MACnCC,8BAA8B,GAAG9gD,OAAO;MACxC+gD,yCAAyC,GAAG/gD,OAAO;MACnDghD,6BAA6B,GAAGhhD,OAAO;MACvCihD,0BAA0B,GAAGhhD,MAAM;MACnCihD,kCAAkC,GAAG,IAAI;MACzCC,mCAAmC,GAAG,IAAI;MAQ1CR,oBAAoB,GAAGh9C,iBAAiB,CAAC3F,IAAI,EAAE4E,KAAK,CAAC;MACrDoR,+BAA+B,CAAC,CAAC;MAEjC;QACEsK,uBAAuB,CAACK,sBAAsB,CAAC,CAAC;MAClD;MAEA,OAAO0lC,kBAAkB;IAC3B;IAEA,SAASgB,8BAA8BA,CAAC1yD,KAAK,EAAE;MAE7C09C,wBAAwB,CAAC,CAAC;MAC1B9f,kBAAkB,CAAC59B,KAAK,CAAC;MACzBs3B,4BAA4B,CAAC,CAAC;IAChC;IAEA,SAASq7B,WAAWA,CAACtnD,IAAI,EAAEunD,WAAW,EAAE;MAetCj1B,oBAAoB,CAAC,CAAC;MACtBtS,iBAAiB,CAAC,CAAC;MACnBohC,mBAAmB,CAACz+D,OAAO,GAAG,IAAI;MAElC,IAAI4kE,WAAW,KAAKvjC,iBAAiB,EAAE;QAMrCujC,WAAW,GAAGniC,oBAAoB,CAAC,CAAC;QACpCo9B,6BAA6B,GAC3BgF,4BAA4B,CAAC,CAAC,IAK9B,CAAC3gD,mBAAmB,CAACi8C,8BAA8B,CAAC,IACpD,CAACj8C,mBAAmB,CAACk8C,yCAAyC,CAAC,GAC3Dd,eAAe,GAGfC,oBAAoB;MAC5B,CAAC,MAAM,IAAIqF,WAAW,KAAKtjC,wBAAwB,EAAE;QACnDsjC,WAAW,GAAGniC,oBAAoB,CAAC,CAAC;QACpCo9B,6BAA6B,GAAGL,mBAAmB;MACrD,CAAC,MAAM,IAAIoF,WAAW,KAAKhiB,2BAA2B,EAAE;QAUtDid,6BAA6B,GAAGD,oBAAoB;MACtD,CAAC,MAAM;QAEL,IAAIkF,UAAU,GACZF,WAAW,KAAK,IAAI,IACpB,OAAOA,WAAW,KAAK,QAAQ,IAC/B,OAAOA,WAAW,CAACvsC,IAAI,KAAK,UAAU;QACxCwnC,6BAA6B,GAAGiF,UAAU,GAEtCpF,iCAAiC,GAEjCL,gBAAgB;MACtB;MAEAS,yBAAyB,GAAG8E,WAAW;MACvC,IAAIG,WAAW,GAAGn2C,cAAc;MAEhC,IAAIm2C,WAAW,KAAK,IAAI,EAAE;QAExB9E,4BAA4B,GAAGpB,gBAAgB;QAC/CqB,4BAA4B,GAAG0E,WAAW;QAC1C;MACF;MAEA,IAAIG,WAAW,CAAC/zC,IAAI,GAAGrS,WAAW,EAAE;QAIlCi8B,wCAAwC,CAACmqB,WAAW,EAAE,IAAI,CAAC;MAC7D;IACF;IAEA,SAASF,4BAA4BA,CAAA,EAAG;MAKtC,IAAIp6B,OAAO,GAAGO,kBAAkB,CAAC,CAAC;MAElC,IAAIP,OAAO,KAAK,IAAI,EAAE;QAMpB,OAAO,IAAI;MACb;MAIA,IAAInmB,uBAAuB,CAAC8R,6BAA6B,CAAC,EAAE;QAC1D,IAAImU,gBAAgB,CAAC,CAAC,KAAK,IAAI,EAAE;UAI/B,OAAO,IAAI;QACb,CAAC,MAAM;UAKL,OAAO,KAAK;QACd;MACF;MAEA,IACEpmB,mBAAmB,CAACiS,6BAA6B,CAAC,IAGlDrR,gBAAgB,CAACqR,6BAA6B,EAAE1U,aAAa,CAAC,EAC9D;QASA,OAAO+oB,OAAO,KAAKF,gBAAgB,CAAC,CAAC;MACvC;MAGA,OAAO,KAAK;IACd;IAEA,SAASy6B,cAAcA,CAACC,SAAS,EAAE;MACjC,IAAIzsB,cAAc,GAAGlM,sBAAsB,CAACtsC,OAAO;MACnDssC,sBAAsB,CAACtsC,OAAO,GAAGqvC,qBAAqB;MAEtD,IAAImJ,cAAc,KAAK,IAAI,EAAE;QAI3B,OAAOnJ,qBAAqB;MAC9B,CAAC,MAAM;QACL,OAAOmJ,cAAc;MACvB;IACF;IAEA,SAAS0sB,aAAaA,CAAC1sB,cAAc,EAAE;MACrClM,sBAAsB,CAACtsC,OAAO,GAAGw4C,cAAc;IACjD;IAEA,SAASgjB,wBAAwBA,CAAA,EAAG;MAClCiF,4BAA4B,GAAG/lD,KAAK,CAAC,CAAC;IACxC;IACA,SAASshB,sBAAsBA,CAAC1Y,IAAI,EAAE;MACpC68C,8BAA8B,GAAGj7C,UAAU,CACzC5B,IAAI,EACJ68C,8BACF,CAAC;IACH;IACA,SAASxe,gBAAgBA,CAAA,EAAG;MAC1B,IAAIse,4BAA4B,KAAKrB,cAAc,EAAE;QACnDqB,4BAA4B,GAAGlB,aAAa;MAC9C;IACF;IACA,SAASrd,+BAA+BA,CAAA,EAAG;MACzCue,4BAA4B,GAAGjB,sBAAsB;MAGrD,IACE,CAAC96C,mBAAmB,CAACi8C,8BAA8B,CAAC,IAClDj8C,mBAAmB,CAACk8C,yCAAyC,CAAC,KAChEjqC,kBAAkB,KAAK,IAAI,EAC3B;QAUAosC,iBAAiB,CACfpsC,kBAAkB,EAClBC,6BAA6B,EAC7BkqC,0BACF,CAAC;MACH;IACF;IACA,SAAShe,cAAcA,CAACpwD,KAAK,EAAE;MAC7B,IAAI+tE,4BAA4B,KAAKjB,sBAAsB,EAAE;QAC3DiB,4BAA4B,GAAGnB,WAAW;MAC5C;MAEA,IAAIyB,kCAAkC,KAAK,IAAI,EAAE;QAC/CA,kCAAkC,GAAG,CAACruE,KAAK,CAAC;MAC9C,CAAC,MAAM;QACLquE,kCAAkC,CAACtkE,IAAI,CAAC/J,KAAK,CAAC;MAChD;IACF;IAGA,SAASyhE,wBAAwBA,CAAA,EAAG;MAGlC,OAAOsM,4BAA4B,KAAKrB,cAAc;IACxD;IAIA,SAASoE,cAAcA,CAAC3lD,IAAI,EAAE4E,KAAK,EAAE;MACnC,IAAIqiD,oBAAoB,GAAGnF,gBAAgB;MAC3CA,gBAAgB,IAAIR,aAAa;MACjC,IAAInmB,cAAc,GAAGwsB,cAAc,CAAC,CAAC;MAGrC,IACE7uC,kBAAkB,KAAK9Y,IAAI,IAC3B+Y,6BAA6B,KAAKnU,KAAK,EACvC;QACA;UACE,IAAItF,iBAAiB,EAAE;YACrB,IAAIuK,gBAAgB,GAAG7J,IAAI,CAAC6J,gBAAgB;YAE5C,IAAIA,gBAAgB,CAACC,IAAI,GAAG,CAAC,EAAE;cAC7Bq6B,sBAAsB,CAACnkC,IAAI,EAAE+Y,6BAA6B,CAAC;cAC3DlP,gBAAgB,CAACG,KAAK,CAAC,CAAC;YAC1B;YAKAJ,2BAA2B,CAAC5J,IAAI,EAAE4E,KAAK,CAAC;UAC1C;QACF;QAEA6+C,yBAAyB,GAAGx5C,sBAAsB,CAAC,CAAC;QACpDg7C,iBAAiB,CAACjlD,IAAI,EAAE4E,KAAK,CAAC;MAChC;MAEA,IAAIkjD,iBAAiB,GAAG,KAAK;MAE7B/N,KAAK,EAAE,GAAG;QACR,IAAI;UACF,IACEyI,6BAA6B,KAAKT,YAAY,IAC9CxwC,cAAc,KAAK,IAAI,EACvB;YASA,IAAIw2C,UAAU,GAAGx2C,cAAc;YAC/B,IAAIg2C,WAAW,GAAG9E,yBAAyB;YAE3C,QAAQD,6BAA6B;cACnC,KAAKD,oBAAoB;gBAAE;kBAIzB6E,wBAAwB,CAAC,CAAC;kBAC1BxE,4BAA4B,GAAGf,kBAAkB;kBACjD,MAAM9H,KAAK;gBACb;cAEA,KAAKmI,oBAAoB;cACzB,KAAKD,eAAe;gBAAE;kBACpB,IAAI,CAAC6F,iBAAiB,IAAIn6B,kBAAkB,CAAC,CAAC,KAAK,IAAI,EAAE;oBACvDm6B,iBAAiB,GAAG,IAAI;kBAC1B;gBACF;cAEA;gBAAS;kBAEPtF,6BAA6B,GAAGT,YAAY;kBAC5CU,yBAAyB,GAAG,IAAI;kBAChCuF,sBAAsB,CAAChoD,IAAI,EAAE+nD,UAAU,EAAER,WAAW,CAAC;kBACrD;gBACF;YACF;UACF;UAEAU,YAAY,CAAC,CAAC;UACd;QACF,CAAC,CAAC,OAAOV,WAAW,EAAE;UACpBD,WAAW,CAACtnD,IAAI,EAAEunD,WAAW,CAAC;QAChC;MACF,CAAC,QAAQ,IAAI;MAOb,IAAIO,iBAAiB,EAAE;QACrB9nD,IAAI,CAAC6I,mBAAmB,EAAE;MAC5B;MAEAwpC,wBAAwB,CAAC,CAAC;MAC1ByP,gBAAgB,GAAGmF,oBAAoB;MACvCY,aAAa,CAAC1sB,cAAc,CAAC;MAE7B,IAAI5pB,cAAc,KAAK,IAAI,EAAE;QAE3B,MAAM,IAAI19B,KAAK,CACb,qEAAqE,GACnE,qCACJ,CAAC;MACH;MAEAilC,kBAAkB,GAAG,IAAI;MACzBC,6BAA6B,GAAG/W,OAAO;MAEvCgU,+BAA+B,CAAC,CAAC;MACjC,OAAO4sC,4BAA4B;IACrC;IAIA,SAASqF,YAAYA,CAAA,EAAG;MAEtB,OAAO12C,cAAc,KAAK,IAAI,EAAE;QAC9B22C,iBAAiB,CAAC32C,cAAc,CAAC;MACnC;IACF;IAEA,SAASm0C,oBAAoBA,CAAC1lD,IAAI,EAAE4E,KAAK,EAAE;MACzC,IAAIqiD,oBAAoB,GAAGnF,gBAAgB;MAC3CA,gBAAgB,IAAIR,aAAa;MACjC,IAAInmB,cAAc,GAAGwsB,cAAc,CAAC,CAAC;MAGrC,IACE7uC,kBAAkB,KAAK9Y,IAAI,IAC3B+Y,6BAA6B,KAAKnU,KAAK,EACvC;QACA;UACE,IAAItF,iBAAiB,EAAE;YACrB,IAAIuK,gBAAgB,GAAG7J,IAAI,CAAC6J,gBAAgB;YAE5C,IAAIA,gBAAgB,CAACC,IAAI,GAAG,CAAC,EAAE;cAC7Bq6B,sBAAsB,CAACnkC,IAAI,EAAE+Y,6BAA6B,CAAC;cAC3DlP,gBAAgB,CAACG,KAAK,CAAC,CAAC;YAC1B;YAKAJ,2BAA2B,CAAC5J,IAAI,EAAE4E,KAAK,CAAC;UAC1C;QACF;QAEA6+C,yBAAyB,GAAGx5C,sBAAsB,CAAC,CAAC;QACpDy5C,gBAAgB,CAAC,CAAC;QAClBuB,iBAAiB,CAACjlD,IAAI,EAAE4E,KAAK,CAAC;MAChC;MAEAm1C,KAAK,EAAE,GAAG;QACR,IAAI;UACF,IACEyI,6BAA6B,KAAKT,YAAY,IAC9CxwC,cAAc,KAAK,IAAI,EACvB;YAGA,IAAIw2C,UAAU,GAAGx2C,cAAc;YAC/B,IAAIg2C,WAAW,GAAG9E,yBAAyB;YAE3C0F,cAAc,EAAE,QAAQ3F,6BAA6B;cACnD,KAAKR,gBAAgB;gBAAE;kBAErBQ,6BAA6B,GAAGT,YAAY;kBAC5CU,yBAAyB,GAAG,IAAI;kBAChCuF,sBAAsB,CAAChoD,IAAI,EAAE+nD,UAAU,EAAER,WAAW,CAAC;kBACrD;gBACF;cAEA,KAAKtF,eAAe;gBAAE;kBACpB,IAAItnC,QAAQ,GAAG4sC,WAAW;kBAE1B,IAAIljC,kBAAkB,CAAC1J,QAAQ,CAAC,EAAE;oBAEhC6nC,6BAA6B,GAAGT,YAAY;oBAC5CU,yBAAyB,GAAG,IAAI;oBAChC2F,yBAAyB,CAACL,UAAU,CAAC;oBACrC;kBACF;kBAOA,IAAIM,YAAY,GAAG,SAAAA,CAAA,EAAY;oBAE7B,IACE7F,6BAA6B,KAAKP,eAAe,IACjDnpC,kBAAkB,KAAK9Y,IAAI,EAC3B;sBAEAwiD,6BAA6B,GAAGF,2BAA2B;oBAC7D;oBAIApqC,qBAAqB,CAAClY,IAAI,CAAC;kBAC7B,CAAC;kBAED2a,QAAQ,CAACK,IAAI,CAACqtC,YAAY,EAAEA,YAAY,CAAC;kBACzC,MAAMtO,KAAK;gBACb;cAEA,KAAKmI,oBAAoB;gBAAE;kBAIzBM,6BAA6B,GAAGF,2BAA2B;kBAC3D,MAAMvI,KAAK;gBACb;cAEA,KAAKoI,mBAAmB;gBAAE;kBACxBK,6BAA6B,GAC3BJ,qCAAqC;kBACvC,MAAMrI,KAAK;gBACb;cAEA,KAAKuI,2BAA2B;gBAAE;kBAChC,IAAIgG,SAAS,GAAGf,WAAW;kBAE3B,IAAIljC,kBAAkB,CAACikC,SAAS,CAAC,EAAE;oBAEjC9F,6BAA6B,GAAGT,YAAY;oBAC5CU,yBAAyB,GAAG,IAAI;oBAChC2F,yBAAyB,CAACL,UAAU,CAAC;kBACvC,CAAC,MAAM;oBAELvF,6BAA6B,GAAGT,YAAY;oBAC5CU,yBAAyB,GAAG,IAAI;oBAChCuF,sBAAsB,CAAChoD,IAAI,EAAE+nD,UAAU,EAAER,WAAW,CAAC;kBACvD;kBAEA;gBACF;cAEA,KAAKnF,qCAAqC;gBAAE;kBAC1C,QAAQ7wC,cAAc,CAAC7qB,GAAG;oBACxB,KAAKnD,aAAa;oBAClB,KAAKoB,aAAa;oBAClB,KAAKC,aAAa;sBAAE;wBAMlB,IAAI2jE,SAAS,GAAGh3C,cAAc;wBAC9B,IAAI72B,IAAI,GAAG6tE,SAAS,CAAC7tE,IAAI;wBACzB,IAAIiN,KAAK,GAAG4gE,SAAS,CAACzgC,YAAY;wBAClC,IAAI0gC,OAAO,GAAG15C,eAAe,CAACp0B,IAAI,EAAEiN,KAAK,CAAC;wBAE1C,IAAI6gE,OAAO,EAAE;0BAKXhG,6BAA6B,GAAGT,YAAY;0BAC5CU,yBAAyB,GAAG,IAAI;0BAChC,IAAItqD,OAAO,GAAGowD,SAAS,CAACpwD,OAAO;0BAE/B,IAAIA,OAAO,KAAK,IAAI,EAAE;4BACpBoZ,cAAc,GAAGpZ,OAAO;0BAC1B,CAAC,MAAM;4BACL,IAAI4tB,WAAW,GAAGwiC,SAAS,CAAC9hE,MAAM;4BAElC,IAAIs/B,WAAW,KAAK,IAAI,EAAE;8BACxBxU,cAAc,GAAGwU,WAAW;8BAC5B0iC,kBAAkB,CAAC1iC,WAAW,CAAC;4BACjC,CAAC,MAAM;8BACLxU,cAAc,GAAG,IAAI;4BACvB;0BACF;0BAEA,MAAM42C,cAAc;wBACtB;wBAEA;sBACF;oBAEA;sBAAS;wBAGP,IAAI,IAAI,EAAE;0BACRtzE,KAAK,CACH,yDAAyD,GACvD,yBACJ,CAAC;wBACH;wBAEA;sBACF;kBACF;kBAEA2tE,6BAA6B,GAAGT,YAAY;kBAC5CU,yBAAyB,GAAG,IAAI;kBAChCuF,sBAAsB,CAAChoD,IAAI,EAAE+nD,UAAU,EAAER,WAAW,CAAC;kBACrD;gBACF;cAEA,KAAKlF,iCAAiC;gBAAE;kBAKtCG,6BAA6B,GAAGT,YAAY;kBAC5CU,yBAAyB,GAAG,IAAI;kBAChCuF,sBAAsB,CAAChoD,IAAI,EAAE+nD,UAAU,EAAER,WAAW,CAAC;kBACrD;gBACF;cAEA,KAAKhF,oBAAoB;gBAAE;kBAIzB6E,wBAAwB,CAAC,CAAC;kBAC1BxE,4BAA4B,GAAGf,kBAAkB;kBACjD,MAAM9H,KAAK;gBACb;cAEA;gBAAS;kBACP,MAAM,IAAIlmE,KAAK,CACb,qDACF,CAAC;gBACH;YACF;UACF;UAEA,IAAI,IAAI,IAAI6jC,oBAAoB,CAAC/0B,OAAO,KAAK,IAAI,EAAE;YAMjDslE,YAAY,CAAC,CAAC;UAChB,CAAC,MAAM;YACLS,kBAAkB,CAAC,CAAC;UACtB;UAEA;QACF,CAAC,CAAC,OAAOnB,WAAW,EAAE;UACpBD,WAAW,CAACtnD,IAAI,EAAEunD,WAAW,CAAC;QAChC;MACF,CAAC,QAAQ,IAAI;MAEblV,wBAAwB,CAAC,CAAC;MAC1BwV,aAAa,CAAC1sB,cAAc,CAAC;MAC7B2mB,gBAAgB,GAAGmF,oBAAoB;MAEvC,IAAI11C,cAAc,KAAK,IAAI,EAAE;QAC3B,OAAOgwC,cAAc;MACvB,CAAC,MAAM;QACLzoC,kBAAkB,GAAG,IAAI;QACzBC,6BAA6B,GAAG/W,OAAO;QAEvCgU,+BAA+B,CAAC,CAAC;QAEjC,OAAO4sC,4BAA4B;MACrC;IACF;IAGA,SAAS8F,kBAAkBA,CAAA,EAAG;MAE5B,OAAOn3C,cAAc,KAAK,IAAI,IAAI,CAACtU,WAAW,CAAC,CAAC,EAAE;QAEhDirD,iBAAiB,CAAC32C,cAAc,CAAC;MACnC;IACF;IAEA,SAAS22C,iBAAiBA,CAACH,UAAU,EAAE;MAIrC,IAAIplE,OAAO,GAAGolE,UAAU,CAAC5gE,SAAS;MAClC+4B,eAAe,CAAC6nC,UAAU,CAAC;MAC3B,IAAInlE,IAAI;MAER,IAAI,CAACmlE,UAAU,CAACp0C,IAAI,GAAGrS,WAAW,MAAMF,MAAM,EAAE;QAC9Cg8B,kBAAkB,CAAC2qB,UAAU,CAAC;QAC9BnlE,IAAI,GAAG+lE,SAAS,CAAChmE,OAAO,EAAEolE,UAAU,EAAEpF,oBAAoB,CAAC;QAC3DplB,wCAAwC,CAACwqB,UAAU,EAAE,IAAI,CAAC;MAC5D,CAAC,MAAM;QACLnlE,IAAI,GAAG+lE,SAAS,CAAChmE,OAAO,EAAEolE,UAAU,EAAEpF,oBAAoB,CAAC;MAC7D;MAEA3iC,iBAAiB,CAAC,CAAC;MACnB+nC,UAAU,CAACr0C,aAAa,GAAGq0C,UAAU,CAACjgC,YAAY;MAElD,IAAIllC,IAAI,KAAK,IAAI,EAAE;QAEjB6lE,kBAAkB,CAACV,UAAU,CAAC;MAChC,CAAC,MAAM;QACLx2C,cAAc,GAAG3uB,IAAI;MACvB;MAEAw+D,mBAAmB,CAACz+D,OAAO,GAAG,IAAI;IACpC;IAEA,SAASylE,yBAAyBA,CAACL,UAAU,EAAE;MAI7C,IAAIplE,OAAO,GAAGolE,UAAU,CAAC5gE,SAAS;MAClC+4B,eAAe,CAAC6nC,UAAU,CAAC;MAC3B,IAAInlE,IAAI;MACRs9B,eAAe,CAAC6nC,UAAU,CAAC;MAC3B,IAAIa,eAAe,GAAG,CAACb,UAAU,CAACp0C,IAAI,GAAGrS,WAAW,MAAMF,MAAM;MAEhE,IAAIwnD,eAAe,EAAE;QACnBxrB,kBAAkB,CAAC2qB,UAAU,CAAC;MAChC;MAEA,QAAQA,UAAU,CAACrhE,GAAG;QACpB,KAAKtD,sBAAsB;UAAE;YAG3B2kE,UAAU,CAACrhE,GAAG,GAAGxD,iBAAiB;UACpC;QAEA,KAAKe,mBAAmB;QACxB,KAAKf,iBAAiB;UAAE;YAKtB,IAAIsuB,SAAS,GAAGu2C,UAAU,CAACrtE,IAAI;YAC/B,IAAIw2D,eAAe,GAAG6W,UAAU,CAACjgC,YAAY;YAC7C,IAAI4hB,aAAa,GACfqe,UAAU,CAACn/B,WAAW,KAAKpX,SAAS,GAChC0/B,eAAe,GACf9S,mBAAmB,CAAC5sB,SAAS,EAAE0/B,eAAe,CAAC;YACrD,IAAI16D,OAAO;YAEX;cACE,IAAIo7B,eAAe,GAAGN,kBAAkB,CACtCy2C,UAAU,EACVv2C,SAAS,EACT,IACF,CAAC;cACDh7B,OAAO,GAAGw7B,gBAAgB,CAAC+1C,UAAU,EAAEn2C,eAAe,CAAC;YACzD;YAEAhvB,IAAI,GAAG0lD,uBAAuB,CAC5B3lD,OAAO,EACPolE,UAAU,EACVre,aAAa,EACbl4B,SAAS,EACTh7B,OAAO,EACPuiC,6BACF,CAAC;YACD;UACF;QAEA,KAAKl1B,UAAU;UAAE;YAKf,IAAIstD,UAAU,GAAG4W,UAAU,CAACrtE,IAAI,CAACsZ,MAAM;YACvC,IAAIo9C,gBAAgB,GAAG2W,UAAU,CAACjgC,YAAY;YAE9C,IAAIupB,cAAc,GAChB0W,UAAU,CAACn/B,WAAW,KAAKuoB,UAAU,GACjCC,gBAAgB,GAChBhT,mBAAmB,CAAC+S,UAAU,EAAEC,gBAAgB,CAAC;YAEvDxuD,IAAI,GAAG0lD,uBAAuB,CAC5B3lD,OAAO,EACPolE,UAAU,EACV1W,cAAc,EACdF,UAAU,EACV4W,UAAU,CAACxhC,GAAG,EACdxN,6BACF,CAAC;YACD;UACF;QAEA,KAAKx1B,aAAa;UAAE;YAOlBgvC,kBAAkB,CAACw1B,UAAU,CAAC;UAChC;QAEA;UAAS;YASP3Q,qBAAqB,CAACz0D,OAAO,EAAEolE,UAAU,CAAC;YAC1CA,UAAU,GAAGx2C,cAAc,GAAG8a,mBAAmB,CAC/C07B,UAAU,EACVpF,oBACF,CAAC;YACD//D,IAAI,GAAG+lE,SAAS,CAAChmE,OAAO,EAAEolE,UAAU,EAAEpF,oBAAoB,CAAC;YAC3D;UACF;MACF;MAEA,IAAIiG,eAAe,EAAE;QACnBrrB,wCAAwC,CAACwqB,UAAU,EAAE,IAAI,CAAC;MAC5D;MAGA/nC,iBAAiB,CAAC,CAAC;MACnB+nC,UAAU,CAACr0C,aAAa,GAAGq0C,UAAU,CAACjgC,YAAY;MAElD,IAAIllC,IAAI,KAAK,IAAI,EAAE;QAEjB6lE,kBAAkB,CAACV,UAAU,CAAC;MAChC,CAAC,MAAM;QACLx2C,cAAc,GAAG3uB,IAAI;MACvB;MAEAw+D,mBAAmB,CAACz+D,OAAO,GAAG,IAAI;IACpC;IAEA,SAASqlE,sBAAsBA,CAAChoD,IAAI,EAAE+nD,UAAU,EAAER,WAAW,EAAE;MAM7DF,8BAA8B,CAACU,UAAU,CAAC;MAC1C,IAAIhiC,WAAW,GAAGgiC,UAAU,CAACthE,MAAM;MAEnC,IAAI;QAGF,IAAIoiE,QAAQ,GAAG3kB,cAAc,CAC3BlkC,IAAI,EACJ+lB,WAAW,EACXgiC,UAAU,EACVR,WAAW,EACXxuC,6BACF,CAAC;QAED,IAAI8vC,QAAQ,EAAE;UACZC,gBAAgB,CAACvB,WAAW,CAAC;UAC7B;QACF;MACF,CAAC,CAAC,OAAO1yE,KAAK,EAAE;QAKd,IAAIkxC,WAAW,KAAK,IAAI,EAAE;UACxBxU,cAAc,GAAGwU,WAAW;UAC5B,MAAMlxC,KAAK;QACb,CAAC,MAAM;UACLi0E,gBAAgB,CAACvB,WAAW,CAAC;UAC7B;QACF;MACF;MAEA,IAAIQ,UAAU,CAACzwD,KAAK,GAAGtB,UAAU,EAAE;QAEjC+yD,gBAAgB,CAAChB,UAAU,CAAC;MAC9B,CAAC,MAAM;QAULU,kBAAkB,CAACV,UAAU,CAAC;MAChC;IACF;IAEA,SAASe,gBAAgBA,CAACj0E,KAAK,EAAE;MAK/B+tE,4BAA4B,GAAGpB,gBAAgB;MAC/CqB,4BAA4B,GAAGhuE,KAAK;MAOpC08B,cAAc,GAAG,IAAI;IACvB;IAEA,SAASk3C,kBAAkBA,CAACV,UAAU,EAAE;MAGtC,IAAIpT,aAAa,GAAGoT,UAAU;MAE9B,GAAG;QACD;UACE,IAAI,CAACpT,aAAa,CAACr9C,KAAK,GAAGtB,UAAU,MAAMpB,SAAS,EAAE;YAGpD/f,KAAK,CACH,gEAAgE,GAC9D,gEACJ,CAAC;UACH;QACF;QAIA,IAAI8N,OAAO,GAAGgyD,aAAa,CAACxtD,SAAS;QACrC,IAAI4+B,WAAW,GAAG4uB,aAAa,CAACluD,MAAM;QACtCy5B,eAAe,CAACy0B,aAAa,CAAC;QAC9B,IAAI/xD,IAAI,GAAG,KAAK,CAAC;QAEjB,IAAI,CAAC+xD,aAAa,CAAChhC,IAAI,GAAGrS,WAAW,MAAMF,MAAM,EAAE;UACjDxe,IAAI,GAAG0yD,YAAY,CAAC3yD,OAAO,EAAEgyD,aAAa,EAAEgO,oBAAoB,CAAC;QACnE,CAAC,MAAM;UACLvlB,kBAAkB,CAACuX,aAAa,CAAC;UACjC/xD,IAAI,GAAG0yD,YAAY,CAAC3yD,OAAO,EAAEgyD,aAAa,EAAEgO,oBAAoB,CAAC;UAEjEplB,wCAAwC,CAACoX,aAAa,EAAE,KAAK,CAAC;QAChE;QAEA30B,iBAAiB,CAAC,CAAC;QAEnB,IAAIp9B,IAAI,KAAK,IAAI,EAAE;UAEjB2uB,cAAc,GAAG3uB,IAAI;UACrB;QACF;QAEA,IAAIomE,YAAY,GAAGrU,aAAa,CAACx8C,OAAO;QAExC,IAAI6wD,YAAY,KAAK,IAAI,EAAE;UAEzBz3C,cAAc,GAAGy3C,YAAY;UAC7B;QACF;QAGArU,aAAa,GAAG5uB,WAAW;QAE3BxU,cAAc,GAAGojC,aAAa;MAChC,CAAC,QAAQA,aAAa,KAAK,IAAI;MAE/B,IAAIiO,4BAA4B,KAAKrB,cAAc,EAAE;QACnDqB,4BAA4B,GAAGhB,aAAa;MAC9C;IACF;IAEA,SAASmH,gBAAgBA,CAAChB,UAAU,EAAE;MACpC,IAAIkB,cAAc,GAAGlB,UAAU;MAE/B,GAAG;QAID,IAAIplE,OAAO,GAAGsmE,cAAc,CAAC9hE,SAAS;QAItC,IAAIvE,IAAI,GAAGo0D,UAAU,CAACr0D,OAAO,EAAEsmE,cAAc,CAAC;QAE9C,IAAIrmE,IAAI,KAAK,IAAI,EAAE;UAMjBA,IAAI,CAAC0U,KAAK,IAAIvB,cAAc;UAC5Bwb,cAAc,GAAG3uB,IAAI;UACrB;QACF;QAEA,IAAI,CAACqmE,cAAc,CAACt1C,IAAI,GAAGrS,WAAW,MAAMF,MAAM,EAAE;UAElDm8B,wCAAwC,CAAC0rB,cAAc,EAAE,KAAK,CAAC;UAE/D,IAAIvrB,cAAc,GAAGurB,cAAc,CAACvrB,cAAc;UAClD,IAAIxlC,KAAK,GAAG+wD,cAAc,CAAC/wD,KAAK;UAEhC,OAAOA,KAAK,KAAK,IAAI,EAAE;YAErBwlC,cAAc,IAAIxlC,KAAK,CAACwlC,cAAc;YACtCxlC,KAAK,GAAGA,KAAK,CAACC,OAAO;UACvB;UAEA8wD,cAAc,CAACvrB,cAAc,GAAGA,cAAc;QAChD;QAIA,IAAI3X,WAAW,GAAGkjC,cAAc,CAACxiE,MAAM;QAEvC,IAAIs/B,WAAW,KAAK,IAAI,EAAE;UAKxBA,WAAW,CAACzuB,KAAK,IAAItB,UAAU;UAC/B+vB,WAAW,CAACmnB,YAAY,GAAGt4C,SAAS;UACpCmxB,WAAW,CAACwB,SAAS,GAAG,IAAI;QAC9B;QAMA0hC,cAAc,GAAGljC,WAAW;QAE5BxU,cAAc,GAAG03C,cAAc;MACjC,CAAC,QAAQA,cAAc,KAAK,IAAI;MAEhCrG,4BAA4B,GAAGf,kBAAkB;MACjDtwC,cAAc,GAAG,IAAI;IACvB;IAEA,SAASi1C,UAAUA,CAACxmD,IAAI,EAAE4mD,iBAAiB,EAAE/hB,WAAW,EAAEt8B,WAAW,EAAE;MAGrE,IAAI2gD,0BAA0B,GAAG/+C,wBAAwB,CAAC,CAAC;MAC3D,IAAIwvB,cAAc,GAAGxK,uBAAuB,CAAC5U,UAAU;MAEvD,IAAI;QACF4U,uBAAuB,CAAC5U,UAAU,GAAG,IAAI;QACzCnQ,wBAAwB,CAAC7J,qBAAqB,CAAC;QAC/C4oD,cAAc,CACZnpD,IAAI,EACJ4mD,iBAAiB,EACjB/hB,WAAW,EACXqkB,0BAA0B,EAC1B3gD,WACF,CAAC;MACH,CAAC,SAAS;QACR4mB,uBAAuB,CAAC5U,UAAU,GAAGof,cAAc;QACnDvvB,wBAAwB,CAAC8+C,0BAA0B,CAAC;MACtD;MAEA,OAAO,IAAI;IACb;IAEA,SAASC,cAAcA,CACrBnpD,IAAI,EACJ4mD,iBAAiB,EACjB/hB,WAAW,EACXukB,mBAAmB,EACnB7gD,WAAW,EACX;MACA,GAAG;QAODg9C,mBAAmB,CAAC,CAAC;MACvB,CAAC,QAAQxB,6BAA6B,KAAK,IAAI;MAE/CsF,uCAAuC,CAAC,CAAC;MAEzC,IAAI,CAACvH,gBAAgB,IAAIR,aAAa,GAAGtJ,aAAa,CAAC,MAAMC,SAAS,EAAE;QACtE,MAAM,IAAIpkE,KAAK,CAAC,gCAAgC,CAAC;MACnD;MAEA,IAAI+kE,YAAY,GAAG54C,IAAI,CAAC44C,YAAY;MACpC,IAAIh0C,KAAK,GAAG5E,IAAI,CAACimD,aAAa;MAE9B,IAAIrN,YAAY,KAAK,IAAI,EAAE;QACzB,OAAO,IAAI;MACb,CAAC,MAAM;QACL;UACE,IAAIh0C,KAAK,KAAK5C,OAAO,EAAE;YACrBntB,KAAK,CACH,oEAAoE,GAClE,eACJ,CAAC;UACH;QACF;MACF;MAEAmrB,IAAI,CAAC44C,YAAY,GAAG,IAAI;MACxB54C,IAAI,CAACimD,aAAa,GAAGjkD,OAAO;MAE5B,IAAI42C,YAAY,KAAK54C,IAAI,CAACrd,OAAO,EAAE;QACjC,MAAM,IAAI9O,KAAK,CACb,wEAAwE,GACtE,uCACJ,CAAC;MACH;MAGAmsB,IAAI,CAACuZ,YAAY,GAAG,IAAI;MACxBvZ,IAAI,CAAC2Z,gBAAgB,GAAG1X,MAAM;MAC9BjC,IAAI,CAACyZ,mBAAmB,GAAG,IAAI;MAG/B,IAAI9Q,cAAc,GAAGd,UAAU,CAC7B+wC,YAAY,CAACh0C,KAAK,EAClBg0C,YAAY,CAACzhC,UACf,CAAC;MAGD,IAAIpB,wBAAwB,GAAGM,2BAA2B,CAAC,CAAC;MAC5D1N,cAAc,GAAGd,UAAU,CAACc,cAAc,EAAEoN,wBAAwB,CAAC;MACrErN,gBAAgB,CAAC1I,IAAI,EAAE2I,cAAc,EAAEJ,WAAW,CAAC;MAEnD,IAAIvI,IAAI,KAAK8Y,kBAAkB,EAAE;QAE/BA,kBAAkB,GAAG,IAAI;QACzBvH,cAAc,GAAG,IAAI;QACrBwH,6BAA6B,GAAG/W,OAAO;MACzC;MAMA,IACE,CAAC42C,YAAY,CAAC1L,YAAY,GAAGp2C,WAAW,MAAMlC,SAAS,IACvD,CAACgkD,YAAY,CAACthD,KAAK,GAAGR,WAAW,MAAMlC,SAAS,EAChD;QACA,IAAI,CAACkvD,0BAA0B,EAAE;UAC/BA,0BAA0B,GAAG,IAAI;UACjCwF,gBAAgB,CAAC3rD,cAAc,EAAE,YAAY;YAC3C4nD,mBAAmB,CAAC,CAAC;YAIrB,OAAO,IAAI;UACb,CAAC,CAAC;QACJ;MACF;MAMA,IAAIgE,iBAAiB,GACnB,CAAC3Q,YAAY,CAAC1L,YAAY,IACvBv2C,kBAAkB,GAAGC,YAAY,GAAGC,UAAU,GAAGC,WAAW,CAAC,MAChElC,SAAS;MACX,IAAI40D,aAAa,GACf,CAAC5Q,YAAY,CAACthD,KAAK,IAChBX,kBAAkB,GAAGC,YAAY,GAAGC,UAAU,GAAGC,WAAW,CAAC,MAChElC,SAAS;MAEX,IAAI20D,iBAAiB,IAAIC,aAAa,EAAE;QACtC,IAAI7vB,cAAc,GAAGxK,uBAAuB,CAAC5U,UAAU;QACvD4U,uBAAuB,CAAC5U,UAAU,GAAG,IAAI;QACzC,IAAImf,gBAAgB,GAAGvvB,wBAAwB,CAAC,CAAC;QACjDC,wBAAwB,CAAC7J,qBAAqB,CAAC;QAC/C,IAAI0mD,oBAAoB,GAAGnF,gBAAgB;QAC3CA,gBAAgB,IAAI9J,aAAa;QAEjCoJ,mBAAmB,CAACz+D,OAAO,GAAG,IAAI;QAOlCq2D,2BAA2B,CAACh5C,IAAI,EAAE44C,YAAY,CAAC;QAE/C;UAGEzb,gBAAgB,CAAC,CAAC;QACpB;QAEAugB,qBAAqB,CAAC19C,IAAI,EAAE44C,YAAY,EAAEh0C,KAAK,CAAC;QAKhD5E,IAAI,CAACrd,OAAO,GAAGi2D,YAAY;QAE3B2F,mBAAmB,CAAC3F,YAAY,EAAE54C,IAAI,EAAE4E,KAAK,CAAC;QAG9CzH,YAAY,CAAC,CAAC;QACd2kD,gBAAgB,GAAGmF,oBAAoB;QAEvC78C,wBAAwB,CAACsvB,gBAAgB,CAAC;QAC1CvK,uBAAuB,CAAC5U,UAAU,GAAGof,cAAc;MACrD,CAAC,MAAM;QAEL35B,IAAI,CAACrd,OAAO,GAAGi2D,YAAY;QAI3B;UACEzb,gBAAgB,CAAC,CAAC;QACpB;MACF;MAEA,IAAIssB,yBAAyB,GAAG3F,0BAA0B;MAE1D,IAAIA,0BAA0B,EAAE;QAG9BA,0BAA0B,GAAG,KAAK;QAClCC,6BAA6B,GAAG/jD,IAAI;QACpCgkD,0BAA0B,GAAGp/C,KAAK;MACpC,CAAC,MAAM;QACL;UACE4/C,wBAAwB,GAAG,CAAC;UAC5BC,4BAA4B,GAAG,IAAI;QACrC;MACF;MAEA97C,cAAc,GAAG3I,IAAI,CAACiF,YAAY;MAWlC,IAAI0D,cAAc,KAAK3G,OAAO,EAAE;QAG9B6hD,sCAAsC,GAAG,IAAI;MAC/C;MAEA;QACE,IAAI,CAAC4F,yBAAyB,EAAE;UAC9BC,8BAA8B,CAAC1pD,IAAI,EAAE,KAAK,CAAC;QAC7C;MACF;MAEAG,YAAY,CAACy4C,YAAY,CAAClxD,SAAS,EAAE0hE,mBAAmB,CAAC;MAEzD;QACE,IAAI9pD,iBAAiB,EAAE;UACrBU,IAAI,CAAC6J,gBAAgB,CAACG,KAAK,CAAC,CAAC;QAC/B;MACF;MAGAkO,qBAAqB,CAAClY,IAAI,CAAC;MAE3B,IAAI4mD,iBAAiB,KAAK,IAAI,EAAE;QAG9B,IAAI+C,kBAAkB,GAAG3pD,IAAI,CAAC2pD,kBAAkB;QAEhD,KAAK,IAAI7uE,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAG8rE,iBAAiB,CAACpyE,MAAM,EAAEsG,CAAC,EAAE,EAAE;UACjD,IAAIsyD,gBAAgB,GAAGwZ,iBAAiB,CAAC9rE,CAAC,CAAC;UAC3C,IAAI+nD,SAAS,GAAG+mB,aAAa,CAC3Bxc,gBAAgB,CAAC5K,MAAM,EACvB4K,gBAAgB,CAACl4D,KACnB,CAAC;UACDy0E,kBAAkB,CAACvc,gBAAgB,CAACp8C,KAAK,EAAE6xC,SAAS,CAAC;QACvD;MACF;MAEA,IAAI8gB,gBAAgB,EAAE;QACpBA,gBAAgB,GAAG,KAAK;QACxB,IAAInzC,OAAO,GAAGozC,kBAAkB;QAChCA,kBAAkB,GAAG,IAAI;QACzB,MAAMpzC,OAAO;MACf;MASA,IACE5J,gBAAgB,CAACo9C,0BAA0B,CAAC,IAC5ChkD,IAAI,CAACtZ,GAAG,KAAKysB,UAAU,EACvB;QACAoyC,mBAAmB,CAAC,CAAC;MACvB;MAEA58C,cAAc,GAAG3I,IAAI,CAACiF,YAAY;MAKlC,IAEEyC,gBAAgB,CAAC9C,KAAK,EAAEL,WAAW,CAAC,IACpCmD,gBAAgB,CAACiB,cAAc,EAAElG,eAAe,CAAC,EACjD;QACA;UACEs6B,yBAAyB,CAAC,CAAC;QAC7B;QAGA,IAAI/8B,IAAI,KAAKokD,qBAAqB,EAAE;UAClCD,iBAAiB,EAAE;QACrB,CAAC,MAAM;UACLA,iBAAiB,GAAG,CAAC;UACrBC,qBAAqB,GAAGpkD,IAAI;QAC9B;MACF,CAAC,MAAM;QACLmkD,iBAAiB,GAAG,CAAC;MACvB;MAEA3rC,uBAAuB,CAAC,CAAC;MAEzB,OAAO,IAAI;IACb;IAEA,SAASoxC,aAAaA,CAACpnB,MAAM,EAAEO,cAAc,EAAE;MAC7C;QACE,IAAIF,SAAS,GAAG;UACdE,cAAc,EAAEA,cAAc;UAC9BP,MAAM,EAAEA;QACV,CAAC;QACDzrD,MAAM,CAACmB,cAAc,CAAC2qD,SAAS,EAAE,QAAQ,EAAE;UACzCzkD,YAAY,EAAE,KAAK;UACnB2gB,UAAU,EAAE,IAAI;UAChB7gB,GAAG,EAAE,SAAAA,CAAA,EAAY;YACfrJ,KAAK,CACH,oFAAoF,GAClF,gFAAgF,GAChF,wFACJ,CAAC;YAED,OAAO2tD,MAAM;UACf;QACF,CAAC,CAAC;QACF,OAAOK,SAAS;MAClB;IACF;IAEA,SAAS0iB,mBAAmBA,CAAA,EAAG;MAO7B,IAAIxB,6BAA6B,KAAK,IAAI,EAAE;QAC1C,IAAI8F,cAAc,GAAGp/C,oBAAoB,CAACu5C,0BAA0B,CAAC;QACrE,IAAI8F,QAAQ,GAAGv/C,kBAAkB,CAAC9J,oBAAoB,EAAEopD,cAAc,CAAC;QACvE,IAAIlwB,cAAc,GAAGxK,uBAAuB,CAAC5U,UAAU;QACvD,IAAImf,gBAAgB,GAAGvvB,wBAAwB,CAAC,CAAC;QAEjD,IAAI;UACFglB,uBAAuB,CAAC5U,UAAU,GAAG,IAAI;UACzCnQ,wBAAwB,CAAC0/C,QAAQ,CAAC;UAClC,OAAOC,uBAAuB,CAAC,CAAC;QAClC,CAAC,SAAS;UACR3/C,wBAAwB,CAACsvB,gBAAgB,CAAC;UAC1CvK,uBAAuB,CAAC5U,UAAU,GAAGof,cAAc;QACrD;MACF;MAEA,OAAO,KAAK;IACd;IACA,SAAS6gB,mCAAmCA,CAAC7lD,KAAK,EAAE;MAClD;QACEsvD,6BAA6B,CAACrlE,IAAI,CAAC+V,KAAK,CAAC;QAEzC,IAAI,CAACmvD,0BAA0B,EAAE;UAC/BA,0BAA0B,GAAG,IAAI;UACjCwF,gBAAgB,CAAC3rD,cAAc,EAAE,YAAY;YAC3C4nD,mBAAmB,CAAC,CAAC;YACrB,OAAO,IAAI;UACb,CAAC,CAAC;QACJ;MACF;IACF;IAEA,SAASwE,uBAAuBA,CAAA,EAAG;MACjC,IAAIhG,6BAA6B,KAAK,IAAI,EAAE;QAC1C,OAAO,KAAK;MACd;MACA,IAAI/jD,IAAI,GAAG+jD,6BAA6B;MACxCA,6BAA6B,GAAG,IAAI;MAIpCC,0BAA0B,GAAGhiD,OAAO;MAEpC,IAAI,CAAC8/C,gBAAgB,IAAIR,aAAa,GAAGtJ,aAAa,CAAC,MAAMC,SAAS,EAAE;QACtE,MAAM,IAAIpkE,KAAK,CACb,uDACF,CAAC;MACH;MAEA;QACEwwE,wBAAwB,GAAG,IAAI;QAC/BC,qCAAqC,GAAG,KAAK;MAC/C;MAEA,IAAI2C,oBAAoB,GAAGnF,gBAAgB;MAC3CA,gBAAgB,IAAI9J,aAAa;MACjCoH,2BAA2B,CAACp/C,IAAI,CAACrd,OAAO,CAAC;MACzCk8D,yBAAyB,CAAC7+C,IAAI,EAAEA,IAAI,CAACrd,OAAO,CAAC;MAE7C;QACE,IAAIqnE,eAAe,GAAG/F,6BAA6B;QACnDA,6BAA6B,GAAG,EAAE;QAElC,KAAK,IAAInpE,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGkvE,eAAe,CAACx1E,MAAM,EAAEsG,CAAC,EAAE,EAAE;UAC/C,IAAI6Z,KAAK,GAAGq1D,eAAe,CAAClvE,CAAC,CAAC;UAC9B6+D,4BAA4B,CAAC35C,IAAI,EAAErL,KAAK,CAAC;QAC3C;MACF;MAEA;QACE+0D,8BAA8B,CAAC1pD,IAAI,EAAE,IAAI,CAAC;MAC5C;MAEA8hD,gBAAgB,GAAGmF,oBAAoB;MACvCzuC,uBAAuB,CAAC,CAAC;MAEzB;QAGE,IAAI8rC,qCAAqC,EAAE;UACzC,IAAItkD,IAAI,KAAKykD,4BAA4B,EAAE;YACzCD,wBAAwB,EAAE;UAC5B,CAAC,MAAM;YACLA,wBAAwB,GAAG,CAAC;YAC5BC,4BAA4B,GAAGzkD,IAAI;UACrC;QACF,CAAC,MAAM;UACLwkD,wBAAwB,GAAG,CAAC;QAC9B;QAEAH,wBAAwB,GAAG,KAAK;QAChCC,qCAAqC,GAAG,KAAK;MAC/C;MAEA3jD,gBAAgB,CAACX,IAAI,CAAC;MAEtB;QACE,IAAItY,SAAS,GAAGsY,IAAI,CAACrd,OAAO,CAAC+E,SAAS;QACtCA,SAAS,CAACm2C,cAAc,GAAG,CAAC;QAC5Bn2C,SAAS,CAACs2C,qBAAqB,GAAG,CAAC;MACrC;MAEA,OAAO,IAAI;IACb;IAEA,SAASmH,kCAAkCA,CAAC1mD,QAAQ,EAAE;MACpD,OACEolE,sCAAsC,KAAK,IAAI,IAC/CA,sCAAsC,CAAC95C,GAAG,CAACtrB,QAAQ,CAAC;IAExD;IACA,SAASmlD,+BAA+BA,CAACnlD,QAAQ,EAAE;MACjD,IAAIolE,sCAAsC,KAAK,IAAI,EAAE;QACnDA,sCAAsC,GAAG,IAAIpiC,GAAG,CAAC,CAAChjC,QAAQ,CAAC,CAAC;MAC9D,CAAC,MAAM;QACLolE,sCAAsC,CAACl6C,GAAG,CAAClrB,QAAQ,CAAC;MACtD;IACF;IAEA,SAASwrE,2BAA2BA,CAACp1E,KAAK,EAAE;MAC1C,IAAI,CAAC8uE,gBAAgB,EAAE;QACrBA,gBAAgB,GAAG,IAAI;QACvBC,kBAAkB,GAAG/uE,KAAK;MAC5B;IACF;IAEA,IAAI2uD,eAAe,GAAGymB,2BAA2B;IAEjD,SAASC,6BAA6BA,CAACC,SAAS,EAAElzC,WAAW,EAAEpiC,KAAK,EAAE;MACpE,IAAIguD,SAAS,GAAGP,0BAA0B,CAACztD,KAAK,EAAEoiC,WAAW,CAAC;MAC9D,IAAIjO,MAAM,GAAGu6B,qBAAqB,CAAC4mB,SAAS,EAAEtnB,SAAS,EAAE1gC,QAAQ,CAAC;MAClE,IAAInC,IAAI,GAAGyc,aAAa,CAAC0tC,SAAS,EAAEnhD,MAAM,EAAE7G,QAAQ,CAAC;MAErD,IAAInC,IAAI,KAAK,IAAI,EAAE;QACjBoI,eAAe,CAACpI,IAAI,EAAEmC,QAAQ,CAAC;QAC/B+V,qBAAqB,CAAClY,IAAI,CAAC;MAC7B;IACF;IAEA,SAASu4C,uBAAuBA,CAC9BthC,WAAW,EACXqhC,sBAAsB,EACtB9nC,OAAO,EACP;MACA;QACE0nC,wBAAwB,CAAC1nC,OAAO,CAAC;QACjCipC,2BAA2B,CAAC,KAAK,CAAC;MACpC;MAEA,IAAIxiC,WAAW,CAACvwB,GAAG,KAAKrD,QAAQ,EAAE;QAGhC6mE,6BAA6B,CAACjzC,WAAW,EAAEA,WAAW,EAAEzG,OAAO,CAAC;QAChE;MACF;MAEA,IAAI7b,KAAK,GAAG2jD,sBAAsB;MAElC,OAAO3jD,KAAK,KAAK,IAAI,EAAE;QACrB,IAAIA,KAAK,CAACjO,GAAG,KAAKrD,QAAQ,EAAE;UAC1B6mE,6BAA6B,CAACv1D,KAAK,EAAEsiB,WAAW,EAAEzG,OAAO,CAAC;UAC1D;QACF,CAAC,MAAM,IAAI7b,KAAK,CAACjO,GAAG,KAAKvD,cAAc,EAAE;UACvC,IAAIqsB,IAAI,GAAG7a,KAAK,CAACja,IAAI;UACrB,IAAI+D,QAAQ,GAAGkW,KAAK,CAACjN,SAAS;UAE9B,IACE,OAAO8nB,IAAI,CAACqxB,wBAAwB,KAAK,UAAU,IAClD,OAAOpiD,QAAQ,CAACklD,iBAAiB,KAAK,UAAU,IAC/C,CAACwB,kCAAkC,CAAC1mD,QAAQ,CAAE,EAChD;YACA,IAAIokD,SAAS,GAAGP,0BAA0B,CAAC9xB,OAAO,EAAEyG,WAAW,CAAC;YAChE,IAAIjO,MAAM,GAAGy6B,sBAAsB,CAAC9uC,KAAK,EAAEkuC,SAAS,EAAE1gC,QAAQ,CAAC;YAC/D,IAAInC,IAAI,GAAGyc,aAAa,CAAC9nB,KAAK,EAAEqU,MAAM,EAAE7G,QAAQ,CAAC;YAEjD,IAAInC,IAAI,KAAK,IAAI,EAAE;cACjBoI,eAAe,CAACpI,IAAI,EAAEmC,QAAQ,CAAC;cAC/B+V,qBAAqB,CAAClY,IAAI,CAAC;YAC7B;YAEA;UACF;QACF;QAEArL,KAAK,GAAGA,KAAK,CAAClO,MAAM;MACtB;MAEA;QACE5R,KAAK,CACH,kEAAkE,GAChE,mEAAmE,GACnE,uEAAuE,GACvE,+DAA+D,GAC/D,sBAAsB,EACxB27B,OACF,CAAC;MACH;IACF;IACA,SAASi0B,kBAAkBA,CAACzkC,IAAI,EAAEokC,QAAQ,EAAEx/B,KAAK,EAAE;MAajD,IAAIwlD,SAAS,GAAGpqD,IAAI,CAACoqD,SAAS;MAC9B,IAAIC,SAAS;MAEb,IAAID,SAAS,KAAK,IAAI,EAAE;QACtBA,SAAS,GAAGpqD,IAAI,CAACoqD,SAAS,GAAG,IAAIjJ,eAAe,CAAC,CAAC;QAClDkJ,SAAS,GAAG,IAAI5oC,GAAG,CAAC,CAAC;QACrB2oC,SAAS,CAACtsE,GAAG,CAACsmD,QAAQ,EAAEimB,SAAS,CAAC;MACpC,CAAC,MAAM;QACLA,SAAS,GAAGD,SAAS,CAAClsE,GAAG,CAACkmD,QAAQ,CAAC;QAEnC,IAAIimB,SAAS,KAAKzvE,SAAS,EAAE;UAC3ByvE,SAAS,GAAG,IAAI5oC,GAAG,CAAC,CAAC;UACrB2oC,SAAS,CAACtsE,GAAG,CAACsmD,QAAQ,EAAEimB,SAAS,CAAC;QACpC;MACF;MAEA,IAAI,CAACA,SAAS,CAACtgD,GAAG,CAACnF,KAAK,CAAC,EAAE;QACzB89C,uCAAuC,GAAG,IAAI;QAE9C2H,SAAS,CAAC1gD,GAAG,CAAC/E,KAAK,CAAC;QACpB,IAAI0lD,IAAI,GAAGC,iBAAiB,CAACj6C,IAAI,CAAC,IAAI,EAAEtQ,IAAI,EAAEokC,QAAQ,EAAEx/B,KAAK,CAAC;QAE9D;UACE,IAAItF,iBAAiB,EAAE;YAErB6kC,sBAAsB,CAACnkC,IAAI,EAAE4E,KAAK,CAAC;UACrC;QACF;QAEAw/B,QAAQ,CAACppB,IAAI,CAACsvC,IAAI,EAAEA,IAAI,CAAC;MAC3B;IACF;IAEA,SAASC,iBAAiBA,CAACvqD,IAAI,EAAEokC,QAAQ,EAAEh/B,WAAW,EAAE;MACtD,IAAIglD,SAAS,GAAGpqD,IAAI,CAACoqD,SAAS;MAE9B,IAAIA,SAAS,KAAK,IAAI,EAAE;QAGtBA,SAAS,CAAC58D,MAAM,CAAC42C,QAAQ,CAAC;MAC5B;MAEA37B,cAAc,CAACzI,IAAI,EAAEoF,WAAW,CAAC;MACjColD,4CAA4C,CAACxqD,IAAI,CAAC;MAElD,IACE8Y,kBAAkB,KAAK9Y,IAAI,IAC3B2H,eAAe,CAACoR,6BAA6B,EAAE3T,WAAW,CAAC,EAC3D;QAQA,IACEw9C,4BAA4B,KAAKjB,sBAAsB,IACtDiB,4BAA4B,KAAKlB,aAAa,IAC7C56C,mBAAmB,CAACiS,6BAA6B,CAAC,IAClD1b,KAAK,CAAC,CAAC,GAAG+lD,4BAA4B,GAAGC,oBAAqB,EAChE;UAGA,IAAI,CAACvB,gBAAgB,GAAGR,aAAa,MAAMrJ,SAAS,EAAE;YACpDgN,iBAAiB,CAACjlD,IAAI,EAAEgC,OAAO,CAAC;UAClC;QACF,CAAC,MAAM;UAGLghD,6BAA6B,GAAGn7C,UAAU,CACxCm7C,6BAA6B,EAC7B59C,WACF,CAAC;QACH;MACF;MAEA8S,qBAAqB,CAAClY,IAAI,CAAC;IAC7B;IAEA,SAASyqD,qBAAqBA,CAACC,aAAa,EAAEngB,SAAS,EAAE;MAKvD,IAAIA,SAAS,KAAKtoC,MAAM,EAAE;QAGxBsoC,SAAS,GAAGua,gBAAgB,CAAC4F,aAAa,CAAC;MAC7C;MAEA,IAAI1qD,IAAI,GAAG+W,8BAA8B,CAAC2zC,aAAa,EAAEngB,SAAS,CAAC;MAEnE,IAAIvqC,IAAI,KAAK,IAAI,EAAE;QACjBoI,eAAe,CAACpI,IAAI,EAAEuqC,SAAS,CAAC;QAChCryB,qBAAqB,CAAClY,IAAI,CAAC;MAC7B;IACF;IAEA,SAAS2tC,+BAA+BA,CAAC+c,aAAa,EAAE;MACtD,IAAI7f,aAAa,GAAG6f,aAAa,CAACz2C,aAAa;MAC/C,IAAIs2B,SAAS,GAAGtoC,MAAM;MAEtB,IAAI4oC,aAAa,KAAK,IAAI,EAAE;QAC1BN,SAAS,GAAGM,aAAa,CAACN,SAAS;MACrC;MAEAkgB,qBAAqB,CAACC,aAAa,EAAEngB,SAAS,CAAC;IACjD;IACA,SAASkT,oBAAoBA,CAACiN,aAAa,EAAEtmB,QAAQ,EAAE;MACrD,IAAImG,SAAS,GAAGtoC,MAAM;MAEtB,IAAIk7C,UAAU;MAEd,QAAQuN,aAAa,CAAChkE,GAAG;QACvB,KAAK3C,iBAAiB;UACpBo5D,UAAU,GAAGuN,aAAa,CAAChjE,SAAS;UACpC,IAAImjD,aAAa,GAAG6f,aAAa,CAACz2C,aAAa;UAE/C,IAAI42B,aAAa,KAAK,IAAI,EAAE;YAC1BN,SAAS,GAAGM,aAAa,CAACN,SAAS;UACrC;UAEA;QAEF,KAAKlmD,qBAAqB;UACxB84D,UAAU,GAAGuN,aAAa,CAAChjE,SAAS;UACpC;QAEF,KAAKnD,kBAAkB;UAAE;YACvB,IAAI9F,QAAQ,GAAGisE,aAAa,CAAChjE,SAAS;YACtCy1D,UAAU,GAAG1+D,QAAQ,CAAC2+D,WAAW;YACjC;UACF;QAEA;UACE,MAAM,IAAIvpE,KAAK,CACb,yCAAyC,GACvC,kCACJ,CAAC;MACL;MAEA,IAAIspE,UAAU,KAAK,IAAI,EAAE;QAGvBA,UAAU,CAAC3vD,MAAM,CAAC42C,QAAQ,CAAC;MAC7B;MAEAqmB,qBAAqB,CAACC,aAAa,EAAEngB,SAAS,CAAC;IACjD;IACA,SAASjzB,iCAAiCA,CAAA,EAAG;MAC3C,IAAI6sC,iBAAiB,GAAGD,mBAAmB,EAAE;QAC3CC,iBAAiB,GAAG,CAAC;QACrBK,wBAAwB,GAAG,CAAC;QAC5BJ,qBAAqB,GAAG,IAAI;QAC5BK,4BAA4B,GAAG,IAAI;QACnC,MAAM,IAAI5wE,KAAK,CACb,kEAAkE,GAChE,0DAA0D,GAC1D,mEAAmE,GACnE,yBACJ,CAAC;MACH;MAEA;QACE,IAAI2wE,wBAAwB,GAAGD,2BAA2B,EAAE;UAC1DC,wBAAwB,GAAG,CAAC;UAC5BC,4BAA4B,GAAG,IAAI;UAEnC5vE,KAAK,CACH,kEAAkE,GAChE,gEAAgE,GAChE,iEAAiE,GACjE,eACJ,CAAC;QACH;MACF;IACF;IAEA,SAASw0E,uCAAuCA,CAAA,EAAG;MACjD;QACE/oC,uBAAuB,CAACI,yBAAyB,CAAC,CAAC;QACnDJ,uBAAuB,CAACE,mCAAmC,CAAC,CAAC;MAC/D;IACF;IAEA,SAASkpC,8BAA8BA,CAAC1pD,IAAI,EAAE2qD,iBAAiB,EAAE;MAC/D;QACE;UACEC,oCAAoC,CAAC5qD,IAAI,CAACrd,OAAO,EAAEgoE,iBAAiB,CAAC;QACvE;MACF;IACF;IAEA,SAASC,oCAAoCA,CAACj2D,KAAK,EAAEg2D,iBAAiB,EAAE;MAItEzqC,eAAe,CAACvrB,KAAK,CAAC;MACtBk2D,kBAAkB,CAACl2D,KAAK,EAAE8B,cAAc,EAAEgqD,8BAA8B,CAAC;MAEzE,IAAIkK,iBAAiB,EAAE;QACrBE,kBAAkB,CAChBl2D,KAAK,EACL+B,eAAe,EACfgqD,+BACF,CAAC;MACH;MAEAmK,kBAAkB,CAACl2D,KAAK,EAAE8B,cAAc,EAAE8pD,4BAA4B,CAAC;MAEvE,IAAIoK,iBAAiB,EAAE;QACrBE,kBAAkB,CAChBl2D,KAAK,EACL+B,eAAe,EACf8pD,6BACF,CAAC;MACH;MAEAxgC,iBAAiB,CAAC,CAAC;IACrB;IAEA,SAAS6qC,kBAAkBA,CAAC3c,UAAU,EAAE7W,UAAU,EAAEyzB,cAAc,EAAE;MAClE,IAAInoE,OAAO,GAAGurD,UAAU;MACxB,IAAI6c,WAAW,GAAG,IAAI;MAEtB,OAAOpoE,OAAO,IAAI,IAAI,EAAE;QACtB,IAAIqoE,kBAAkB,GAAGroE,OAAO,CAACuqD,YAAY,GAAG7V,UAAU;QAE1D,IACE10C,OAAO,KAAKooE,WAAW,IACvBpoE,OAAO,CAACuV,KAAK,IAAI,IAAI,IACrB8yD,kBAAkB,KAAKp2D,SAAS,EAChC;UACAjS,OAAO,GAAGA,OAAO,CAACuV,KAAK;QACzB,CAAC,MAAM;UACL,IAAI,CAACvV,OAAO,CAAC2U,KAAK,GAAG+/B,UAAU,MAAMziC,SAAS,EAAE;YAC9Ck2D,cAAc,CAACnoE,OAAO,CAAC;UACzB;UAEA,IAAIA,OAAO,CAACwV,OAAO,KAAK,IAAI,EAAE;YAC5BxV,OAAO,GAAGA,OAAO,CAACwV,OAAO;UAC3B,CAAC,MAAM;YACLxV,OAAO,GAAGooE,WAAW,GAAGpoE,OAAO,CAAC8D,MAAM;UACxC;QACF;MACF;IACF;IAEA,IAAIwkE,2CAA2C,GAAG,IAAI;IACtD,SAASzzC,wCAAwCA,CAAC7iB,KAAK,EAAE;MACvD;QACE,IAAI,CAACmtD,gBAAgB,GAAGR,aAAa,MAAMrJ,SAAS,EAAE;UAEpD;QACF;QAEA,IAAI,EAAEtjD,KAAK,CAACgf,IAAI,GAAGtS,cAAc,CAAC,EAAE;UAClC;QACF;QAEA,IAAI3a,GAAG,GAAGiO,KAAK,CAACjO,GAAG;QAEnB,IACEA,GAAG,KAAKtD,sBAAsB,IAC9BsD,GAAG,KAAKrD,QAAQ,IAChBqD,GAAG,KAAKvD,cAAc,IACtBuD,GAAG,KAAKxD,iBAAiB,IACzBwD,GAAG,KAAK7C,UAAU,IAClB6C,GAAG,KAAK1C,aAAa,IACrB0C,GAAG,KAAKzC,mBAAmB,EAC3B;UAEA;QACF;QAGA,IAAIosB,aAAa,GACf3b,yBAAyB,CAACC,KAAK,CAAC,IAAI,gBAAgB;QAEtD,IAAIs2D,2CAA2C,KAAK,IAAI,EAAE;UACxD,IAAIA,2CAA2C,CAAClhD,GAAG,CAACsG,aAAa,CAAC,EAAE;YAClE;UACF;UAEA46C,2CAA2C,CAACthD,GAAG,CAAC0G,aAAa,CAAC;QAChE,CAAC,MAAM;UACL46C,2CAA2C,GAAG,IAAIxpC,GAAG,CAAC,CACpDpR,aAAa,CACd,CAAC;QACJ;QAEA,IAAIuvC,aAAa,GAAGj9D,OAAO;QAE3B,IAAI;UACFu9B,eAAe,CAACvrB,KAAK,CAAC;UAEtB9f,KAAK,CACH,6EAA6E,GAC3E,0EAA0E,GAC1E,8EAA8E,GAC9E,oBACJ,CAAC;QACH,CAAC,SAAS;UACR,IAAI+qE,aAAa,EAAE;YACjB1/B,eAAe,CAACvrB,KAAK,CAAC;UACxB,CAAC,MAAM;YACLqrB,iBAAiB,CAAC,CAAC;UACrB;QACF;MACF;IACF;IACA,IAAI2oC,SAAS;IAEb;MACE,IAAIuC,UAAU,GAAG,IAAI;MAErBvC,SAAS,GAAG,SAAAA,CAAUhmE,OAAO,EAAEolE,UAAU,EAAEnjD,KAAK,EAAE;QAMhD,IAAIumD,0BAA0B,GAAGC,0BAA0B,CACzDF,UAAU,EACVnD,UACF,CAAC;QAED,IAAI;UACF,OAAO/W,WAAW,CAACruD,OAAO,EAAEolE,UAAU,EAAEnjD,KAAK,CAAC;QAChD,CAAC,CAAC,OAAOymD,aAAa,EAAE;UACtB,IACEj2C,kCAAkC,CAAC,CAAC,IACpCi2C,aAAa,KAAKrnC,iBAAiB,IACnCqnC,aAAa,KAAK9lB,2BAA2B,IAC5C8lB,aAAa,KAAK,IAAI,IACrB,OAAOA,aAAa,KAAK,QAAQ,IACjC,OAAOA,aAAa,CAACrwC,IAAI,KAAK,UAAW,EAC3C;YAGA,MAAMqwC,aAAa;UACrB;UAIAhE,8BAA8B,CAACU,UAAU,CAAC;UAC1C3Q,qBAAqB,CAACz0D,OAAO,EAAEolE,UAAU,CAAC;UAE1CqD,0BAA0B,CAACrD,UAAU,EAAEoD,0BAA0B,CAAC;UAElE,IAAIpD,UAAU,CAACp0C,IAAI,GAAGrS,WAAW,EAAE;YAEjC87B,kBAAkB,CAAC2qB,UAAU,CAAC;UAChC;UAEArvE,qBAAqB,CACnB,IAAI,EACJs4D,WAAW,EACX,IAAI,EACJruD,OAAO,EACPolE,UAAU,EACVnjD,KACF,CAAC;UAED,IAAIxrB,cAAc,CAAC,CAAC,EAAE;YACpB,IAAIkyE,WAAW,GAAGpyE,gBAAgB,CAAC,CAAC;YAEpC,IACE,OAAOoyE,WAAW,KAAK,QAAQ,IAC/BA,WAAW,KAAK,IAAI,IACpBA,WAAW,CAACxzE,gBAAgB,IAC5B,OAAOuzE,aAAa,KAAK,QAAQ,IACjCA,aAAa,KAAK,IAAI,IACtB,CAACA,aAAa,CAACvzE,gBAAgB,EAC/B;cAEAuzE,aAAa,CAACvzE,gBAAgB,GAAG,IAAI;YACvC;UACF;UAGA,MAAMuzE,aAAa;QACrB;MACF,CAAC;IACH;IAEA,IAAIE,0BAA0B,GAAG,KAAK;IACtC,IAAIC,6CAA6C;IAEjD;MACEA,6CAA6C,GAAG,IAAI/pC,GAAG,CAAC,CAAC;IAC3D;IAEA,SAAS0jC,gCAAgCA,CAACxwD,KAAK,EAAE;MAC/C;QACE,IAAIkrB,WAAW,EAAE;UACf,QAAQlrB,KAAK,CAACjO,GAAG;YACf,KAAKxD,iBAAiB;YACtB,KAAKW,UAAU;YACf,KAAKI,mBAAmB;cAAE;gBACxB,IAAIwnE,sBAAsB,GACvBl6C,cAAc,IAAI7c,yBAAyB,CAAC6c,cAAc,CAAC,IAC5D,SAAS;gBAEX,IAAIm6C,SAAS,GAAGD,sBAAsB;gBAEtC,IACE,CAACD,6CAA6C,CAACzhD,GAAG,CAAC2hD,SAAS,CAAC,EAC7D;kBACAF,6CAA6C,CAAC7hD,GAAG,CAAC+hD,SAAS,CAAC;kBAC5D,IAAIC,qBAAqB,GACvBj3D,yBAAyB,CAACC,KAAK,CAAC,IAAI,SAAS;kBAE/C9f,KAAK,CACH,qDAAqD,GACnD,6EAA6E,GAC7E,oFAAoF,EACtF82E,qBAAqB,EACrBF,sBAAsB,EACtBA,sBACF,CAAC;gBACH;gBAEA;cACF;YAEA,KAAKtoE,cAAc;cAAE;gBACnB,IAAI,CAACooE,0BAA0B,EAAE;kBAC/B12E,KAAK,CACH,6DAA6D,GAC3D,oDAAoD,GACpD,8BACJ,CAAC;kBAED02E,0BAA0B,GAAG,IAAI;gBACnC;gBAEA;cACF;UACF;QACF;MACF;IACF;IAEA,SAASpnB,sBAAsBA,CAACnkC,IAAI,EAAE4E,KAAK,EAAE;MAC3C;QACE,IAAItF,iBAAiB,EAAE;UACrB,IAAIuK,gBAAgB,GAAG7J,IAAI,CAAC6J,gBAAgB;UAC5CA,gBAAgB,CAACvnB,OAAO,CAAC,UAAUspE,eAAe,EAAE;YAClDpiD,kBAAkB,CAACxJ,IAAI,EAAE4rD,eAAe,EAAEhnD,KAAK,CAAC;UAClD,CAAC,CAAC;QAGJ;MACF;IACF;IACA,IAAIinD,mBAAmB,GAAG,CAAC,CAAC;IAE5B,SAASvC,gBAAgBA,CAACjvC,aAAa,EAAEl4B,QAAQ,EAAE;MACjD;QAGE,IAAI2pE,QAAQ,GAAGp0C,oBAAoB,CAAC/0B,OAAO;QAE3C,IAAImpE,QAAQ,KAAK,IAAI,EAAE;UACrBA,QAAQ,CAACltE,IAAI,CAACuD,QAAQ,CAAC;UACvB,OAAO0pE,mBAAmB;QAC5B,CAAC,MAAM;UACL,OAAOhvD,kBAAkB,CAACwd,aAAa,EAAEl4B,QAAQ,CAAC;QACpD;MACF;IACF;IAEA,SAASokE,8BAA8BA,CAAA,EAAG;MAExC,OAAO7uC,oBAAoB,CAAC/0B,OAAO,KAAK,IAAI;IAC9C;IAEA,SAASyiE,iCAAiCA,CAACzwD,KAAK,EAAE;MAChD;QACE,IAAIA,KAAK,CAACgf,IAAI,GAAGtS,cAAc,EAAE;UAC/B,IAAI,CAAC6/C,0BAA0B,CAAC,CAAC,EAAE;YAEjC;UACF;QACF,CAAC,MAAM;UAEL,IAAI,CAACL,sBAAsB,CAAC,CAAC,EAAE;YAE7B;UACF;UAEA,IAAIiB,gBAAgB,KAAK7J,SAAS,EAAE;YAGlC;UACF;UAEA,IACEtjD,KAAK,CAACjO,GAAG,KAAKxD,iBAAiB,IAC/ByR,KAAK,CAACjO,GAAG,KAAK7C,UAAU,IACxB8Q,KAAK,CAACjO,GAAG,KAAKzC,mBAAmB,EACjC;YAGA;UACF;QACF;QAEA,IAAIyzB,oBAAoB,CAAC/0B,OAAO,KAAK,IAAI,EAAE;UACzC,IAAIi9D,aAAa,GAAGj9D,OAAO;UAE3B,IAAI;YACFu9B,eAAe,CAACvrB,KAAK,CAAC;YAEtB9f,KAAK,CACH,gEAAgE,GAC9D,+DAA+D,GAC/D,4BAA4B,GAC5B,eAAe,GACf,yCAAyC,GACzC,OAAO,GACP,gCAAgC,GAChC,mEAAmE,GACnE,iBAAiB,GACjB,6DAA6D,EAC/D6f,yBAAyB,CAACC,KAAK,CACjC,CAAC;UACH,CAAC,SAAS;YACR,IAAIirD,aAAa,EAAE;cACjB1/B,eAAe,CAACvrB,KAAK,CAAC;YACxB,CAAC,MAAM;cACLqrB,iBAAiB,CAAC,CAAC;YACrB;UACF;QACF;MACF;IACF;IAEA,SAASwqC,4CAA4CA,CAACxqD,IAAI,EAAE;MAC1D;QACE,IACEA,IAAI,CAACtZ,GAAG,KAAKysB,UAAU,IACvB+tC,0BAA0B,CAAC,CAAC,IAC5BxpC,oBAAoB,CAAC/0B,OAAO,KAAK,IAAI,EACrC;UACA9N,KAAK,CACH,qEAAqE,GACnE,kCAAkC,GAClC,oEAAoE,GACpE,oBAAoB,GACpB,eAAe,GACf,yCAAyC,GACzC,OAAO,GACP,gCAAgC,GAChC,mEAAmE,GACnE,iBAAiB,GACjB,6DACJ,CAAC;QACH;MACF;IACF;IAEA,SAAS4kE,2BAA2BA,CAACsS,SAAS,EAAE;MAC9C;QACErH,wBAAwB,GAAGqH,SAAS;MACtC;IACF;IAKA,IAAIC,aAAa,GAAG,IAAI;IACxB,IAAIC,gBAAgB,GAAG,IAAI;IAC3B,IAAIC,iBAAiB,GAAG,SAAAA,CAAU9+B,OAAO,EAAE;MACzC;QACE4+B,aAAa,GAAG5+B,OAAO;MACzB;IACF,CAAC;IACD,SAASyZ,8BAA8BA,CAACnsD,IAAI,EAAE;MAC5C;QACE,IAAIsxE,aAAa,KAAK,IAAI,EAAE;UAE1B,OAAOtxE,IAAI;QACb;QAEA,IAAIyxE,MAAM,GAAGH,aAAa,CAACtxE,IAAI,CAAC;QAEhC,IAAIyxE,MAAM,KAAKvxE,SAAS,EAAE;UACxB,OAAOF,IAAI;QACb;QAEA,OAAOyxE,MAAM,CAACxpE,OAAO;MACvB;IACF;IACA,SAASgnD,2BAA2BA,CAACjvD,IAAI,EAAE;MAEzC,OAAOmsD,8BAA8B,CAACnsD,IAAI,CAAC;IAC7C;IACA,SAASkvD,gCAAgCA,CAAClvD,IAAI,EAAE;MAC9C;QACE,IAAIsxE,aAAa,KAAK,IAAI,EAAE;UAE1B,OAAOtxE,IAAI;QACb;QAEA,IAAIyxE,MAAM,GAAGH,aAAa,CAACtxE,IAAI,CAAC;QAEhC,IAAIyxE,MAAM,KAAKvxE,SAAS,EAAE;UAExB,IACEF,IAAI,KAAK,IAAI,IACbA,IAAI,KAAKE,SAAS,IAClB,OAAOF,IAAI,CAACsZ,MAAM,KAAK,UAAU,EACjC;YAIA,IAAIo4D,aAAa,GAAGvlB,8BAA8B,CAACnsD,IAAI,CAACsZ,MAAM,CAAC;YAE/D,IAAItZ,IAAI,CAACsZ,MAAM,KAAKo4D,aAAa,EAAE;cACjC,IAAIC,aAAa,GAAG;gBAClBx4D,QAAQ,EAAE1B,sBAAsB;gBAChC6B,MAAM,EAAEo4D;cACV,CAAC;cAED,IAAI1xE,IAAI,CAAC8Y,WAAW,KAAK5Y,SAAS,EAAE;gBAClCyxE,aAAa,CAAC74D,WAAW,GAAG9Y,IAAI,CAAC8Y,WAAW;cAC9C;cAEA,OAAO64D,aAAa;YACtB;UACF;UAEA,OAAO3xE,IAAI;QACb;QAEA,OAAOyxE,MAAM,CAACxpE,OAAO;MACvB;IACF;IACA,SAASmmC,iCAAiCA,CAACn0B,KAAK,EAAEmb,OAAO,EAAE;MACzD;QACE,IAAIk8C,aAAa,KAAK,IAAI,EAAE;UAE1B,OAAO,KAAK;QACd;QAEA,IAAIM,QAAQ,GAAG33D,KAAK,CAACi0B,WAAW;QAChC,IAAI2jC,QAAQ,GAAGz8C,OAAO,CAACp1B,IAAI;QAE3B,IAAI8xE,oBAAoB,GAAG,KAAK;QAChC,IAAIC,gBAAgB,GAClB,OAAOF,QAAQ,KAAK,QAAQ,IAAIA,QAAQ,KAAK,IAAI,GAC7CA,QAAQ,CAAC14D,QAAQ,GACjB,IAAI;QAEV,QAAQc,KAAK,CAACjO,GAAG;UACf,KAAKvD,cAAc;YAAE;cACnB,IAAI,OAAOopE,QAAQ,KAAK,UAAU,EAAE;gBAClCC,oBAAoB,GAAG,IAAI;cAC7B;cAEA;YACF;UAEA,KAAKtpE,iBAAiB;YAAE;cACtB,IAAI,OAAOqpE,QAAQ,KAAK,UAAU,EAAE;gBAClCC,oBAAoB,GAAG,IAAI;cAC7B,CAAC,MAAM,IAAIC,gBAAgB,KAAKl6D,eAAe,EAAE;gBAK/Ci6D,oBAAoB,GAAG,IAAI;cAC7B;cAEA;YACF;UAEA,KAAK3oE,UAAU;YAAE;cACf,IAAI4oE,gBAAgB,KAAKt6D,sBAAsB,EAAE;gBAC/Cq6D,oBAAoB,GAAG,IAAI;cAC7B,CAAC,MAAM,IAAIC,gBAAgB,KAAKl6D,eAAe,EAAE;gBAC/Ci6D,oBAAoB,GAAG,IAAI;cAC7B;cAEA;YACF;UAEA,KAAKxoE,aAAa;UAClB,KAAKC,mBAAmB;YAAE;cACxB,IAAIwoE,gBAAgB,KAAKn6D,eAAe,EAAE;gBAGxCk6D,oBAAoB,GAAG,IAAI;cAC7B,CAAC,MAAM,IAAIC,gBAAgB,KAAKl6D,eAAe,EAAE;gBAC/Ci6D,oBAAoB,GAAG,IAAI;cAC7B;cAEA;YACF;UAEA;YACE,OAAO,KAAK;QAChB;QAEA,IAAIA,oBAAoB,EAAE;UAMxB,IAAIE,UAAU,GAAGV,aAAa,CAACM,QAAQ,CAAC;UAExC,IACEI,UAAU,KAAK9xE,SAAS,IACxB8xE,UAAU,KAAKV,aAAa,CAACO,QAAQ,CAAC,EACtC;YACA,OAAO,IAAI;UACb;QACF;QAEA,OAAO,KAAK;MACd;IACF;IACA,SAAS7oB,sCAAsCA,CAAC/uC,KAAK,EAAE;MACrD;QACE,IAAIq3D,aAAa,KAAK,IAAI,EAAE;UAE1B;QACF;QAEA,IAAI,OAAOtU,OAAO,KAAK,UAAU,EAAE;UACjC;QACF;QAEA,IAAIuU,gBAAgB,KAAK,IAAI,EAAE;UAC7BA,gBAAgB,GAAG,IAAIvU,OAAO,CAAC,CAAC;QAClC;QAEAuU,gBAAgB,CAACtiD,GAAG,CAAChV,KAAK,CAAC;MAC7B;IACF;IACA,IAAIg4D,eAAe,GAAG,SAAAA,CAAU3sD,IAAI,EAAEgJ,MAAM,EAAE;MAC5C;QACE,IAAIgjD,aAAa,KAAK,IAAI,EAAE;UAE1B;QACF;QAEA,IAAIY,aAAa,GAAG5jD,MAAM,CAAC4jD,aAAa;UACtCC,eAAe,GAAG7jD,MAAM,CAAC6jD,eAAe;QAC1CtH,mBAAmB,CAAC,CAAC;QACrB2B,SAAS,CAAC,YAAY;UACpB4F,qCAAqC,CACnC9sD,IAAI,CAACrd,OAAO,EACZkqE,eAAe,EACfD,aACF,CAAC;QACH,CAAC,CAAC;MACJ;IACF,CAAC;IACD,IAAIG,YAAY,GAAG,SAAAA,CAAU/sD,IAAI,EAAE8P,OAAO,EAAE;MAC1C;QACE,IAAI9P,IAAI,CAACxpB,OAAO,KAAKy6B,kBAAkB,EAAE;UAIvC;QACF;QAEAs0C,mBAAmB,CAAC,CAAC;QACrB2B,SAAS,CAAC,YAAY;UACpB8F,eAAe,CAACl9C,OAAO,EAAE9P,IAAI,EAAE,IAAI,EAAE,IAAI,CAAC;QAC5C,CAAC,CAAC;MACJ;IACF,CAAC;IAED,SAAS8sD,qCAAqCA,CAC5Cn4D,KAAK,EACLk4D,eAAe,EACfD,aAAa,EACb;MACA;QACE,IAAIzlE,SAAS,GAAGwN,KAAK,CAACxN,SAAS;UAC7B+Q,KAAK,GAAGvD,KAAK,CAACuD,KAAK;UACnBC,OAAO,GAAGxD,KAAK,CAACwD,OAAO;UACvBzR,GAAG,GAAGiO,KAAK,CAACjO,GAAG;UACfhM,IAAI,GAAGia,KAAK,CAACja,IAAI;QACnB,IAAIuyE,aAAa,GAAG,IAAI;QAExB,QAAQvmE,GAAG;UACT,KAAKxD,iBAAiB;UACtB,KAAKe,mBAAmB;UACxB,KAAKd,cAAc;YACjB8pE,aAAa,GAAGvyE,IAAI;YACpB;UAEF,KAAKmJ,UAAU;YACbopE,aAAa,GAAGvyE,IAAI,CAACsZ,MAAM;YAC3B;QACJ;QAEA,IAAIg4D,aAAa,KAAK,IAAI,EAAE;UAC1B,MAAM,IAAIn4E,KAAK,CACb,qDACF,CAAC;QACH;QAEA,IAAIq5E,WAAW,GAAG,KAAK;QACvB,IAAIC,YAAY,GAAG,KAAK;QAExB,IAAIF,aAAa,KAAK,IAAI,EAAE;UAC1B,IAAId,MAAM,GAAGH,aAAa,CAACiB,aAAa,CAAC;UAEzC,IAAId,MAAM,KAAKvxE,SAAS,EAAE;YACxB,IAAIgyE,aAAa,CAAC7iD,GAAG,CAACoiD,MAAM,CAAC,EAAE;cAC7BgB,YAAY,GAAG,IAAI;YACrB,CAAC,MAAM,IAAIN,eAAe,CAAC9iD,GAAG,CAACoiD,MAAM,CAAC,EAAE;cACtC,IAAIzlE,GAAG,KAAKvD,cAAc,EAAE;gBAC1BgqE,YAAY,GAAG,IAAI;cACrB,CAAC,MAAM;gBACLD,WAAW,GAAG,IAAI;cACpB;YACF;UACF;QACF;QAEA,IAAIjB,gBAAgB,KAAK,IAAI,EAAE;UAC7B,IACEA,gBAAgB,CAACliD,GAAG,CAACpV,KAAK,CAAC,IAC1BxN,SAAS,KAAK,IAAI,IAAI8kE,gBAAgB,CAACliD,GAAG,CAAC5iB,SAAS,CAAE,EACvD;YACAgmE,YAAY,GAAG,IAAI;UACrB;QACF;QAEA,IAAIA,YAAY,EAAE;UAChBx4D,KAAK,CAACs8C,kBAAkB,GAAG,IAAI;QACjC;QAEA,IAAIkc,YAAY,IAAID,WAAW,EAAE;UAC/B,IAAIltD,IAAI,GAAG+W,8BAA8B,CAACpiB,KAAK,EAAEwN,QAAQ,CAAC;UAE1D,IAAInC,IAAI,KAAK,IAAI,EAAE;YACjBs2B,qBAAqB,CAACt2B,IAAI,EAAErL,KAAK,EAAEwN,QAAQ,CAAC;UAC9C;QACF;QAEA,IAAIjK,KAAK,KAAK,IAAI,IAAI,CAACi1D,YAAY,EAAE;UACnCL,qCAAqC,CACnC50D,KAAK,EACL20D,eAAe,EACfD,aACF,CAAC;QACH;QAEA,IAAIz0D,OAAO,KAAK,IAAI,EAAE;UACpB20D,qCAAqC,CACnC30D,OAAO,EACP00D,eAAe,EACfD,aACF,CAAC;QACH;MACF;IACF;IAEA,IAAIQ,2BAA2B,GAAG,SAAAA,CAAUptD,IAAI,EAAEqtD,QAAQ,EAAE;MAC1D;QACE,IAAIC,aAAa,GAAG,IAAI7rC,GAAG,CAAC,CAAC;QAC7B,IAAI8rC,KAAK,GAAG,IAAI9rC,GAAG,CACjB4rC,QAAQ,CAAC/3E,GAAG,CAAC,UAAU62E,MAAM,EAAE;UAC7B,OAAOA,MAAM,CAACxpE,OAAO;QACvB,CAAC,CACH,CAAC;QACD6qE,6CAA6C,CAC3CxtD,IAAI,CAACrd,OAAO,EACZ4qE,KAAK,EACLD,aACF,CAAC;QACD,OAAOA,aAAa;MACtB;IACF,CAAC;IAED,SAASE,6CAA6CA,CACpD74D,KAAK,EACL44D,KAAK,EACLD,aAAa,EACb;MACA;QACE,IAAIp1D,KAAK,GAAGvD,KAAK,CAACuD,KAAK;UACrBC,OAAO,GAAGxD,KAAK,CAACwD,OAAO;UACvBzR,GAAG,GAAGiO,KAAK,CAACjO,GAAG;UACfhM,IAAI,GAAGia,KAAK,CAACja,IAAI;QACnB,IAAIuyE,aAAa,GAAG,IAAI;QAExB,QAAQvmE,GAAG;UACT,KAAKxD,iBAAiB;UACtB,KAAKe,mBAAmB;UACxB,KAAKd,cAAc;YACjB8pE,aAAa,GAAGvyE,IAAI;YACpB;UAEF,KAAKmJ,UAAU;YACbopE,aAAa,GAAGvyE,IAAI,CAACsZ,MAAM;YAC3B;QACJ;QAEA,IAAIy5D,QAAQ,GAAG,KAAK;QAEpB,IAAIR,aAAa,KAAK,IAAI,EAAE;UAC1B,IAAIM,KAAK,CAACxjD,GAAG,CAACkjD,aAAa,CAAC,EAAE;YAC5BQ,QAAQ,GAAG,IAAI;UACjB;QACF;QAEA,IAAIA,QAAQ,EAAE;UAIZC,kCAAkC,CAAC/4D,KAAK,EAAE24D,aAAa,CAAC;QAC1D,CAAC,MAAM;UAEL,IAAIp1D,KAAK,KAAK,IAAI,EAAE;YAClBs1D,6CAA6C,CAC3Ct1D,KAAK,EACLq1D,KAAK,EACLD,aACF,CAAC;UACH;QACF;QAEA,IAAIn1D,OAAO,KAAK,IAAI,EAAE;UACpBq1D,6CAA6C,CAC3Cr1D,OAAO,EACPo1D,KAAK,EACLD,aACF,CAAC;QACH;MACF;IACF;IAEA,SAASI,kCAAkCA,CAAC/4D,KAAK,EAAE24D,aAAa,EAAE;MAChE;QACE,IAAIK,kBAAkB,GAAGC,uCAAuC,CAC9Dj5D,KAAK,EACL24D,aACF,CAAC;QAED,IAAIK,kBAAkB,EAAE;UACtB;QACF;QAEA,IAAIx2D,IAAI,GAAGxC,KAAK;QAEhB,OAAO,IAAI,EAAE;UACX,QAAQwC,IAAI,CAACzQ,GAAG;YACd,KAAK9B,aAAa;YAClB,KAAKrB,aAAa;cAChB+pE,aAAa,CAAC3jD,GAAG,CAACxS,IAAI,CAACzP,SAAS,CAAC;cACjC;YAEF,KAAKpE,UAAU;cACbgqE,aAAa,CAAC3jD,GAAG,CAACxS,IAAI,CAACzP,SAAS,CAACwhC,aAAa,CAAC;cAC/C;YAEF,KAAK7lC,QAAQ;cACXiqE,aAAa,CAAC3jD,GAAG,CAACxS,IAAI,CAACzP,SAAS,CAACwhC,aAAa,CAAC;cAC/C;UACJ;UAEA,IAAI/xB,IAAI,CAAC1Q,MAAM,KAAK,IAAI,EAAE;YACxB,MAAM,IAAI5S,KAAK,CAAC,+BAA+B,CAAC;UAClD;UAEAsjB,IAAI,GAAGA,IAAI,CAAC1Q,MAAM;QACpB;MACF;IACF;IAEA,SAASmnE,uCAAuCA,CAACj5D,KAAK,EAAE24D,aAAa,EAAE;MACrE;QACE,IAAIn2D,IAAI,GAAGxC,KAAK;QAChB,IAAIg5D,kBAAkB,GAAG,KAAK;QAE9B,OAAO,IAAI,EAAE;UACX,IACEx2D,IAAI,CAACzQ,GAAG,KAAKnD,aAAa,IAC1B4T,IAAI,CAACzQ,GAAG,KAAK/B,aAAa,IAC1B,KAAK,EACL;YAEAgpE,kBAAkB,GAAG,IAAI;YACzBL,aAAa,CAAC3jD,GAAG,CAACxS,IAAI,CAACzP,SAAS,CAAC;UACnC,CAAC,MAAM,IAAIyP,IAAI,CAACe,KAAK,KAAK,IAAI,EAAE;YAC9Bf,IAAI,CAACe,KAAK,CAACzR,MAAM,GAAG0Q,IAAI;YACxBA,IAAI,GAAGA,IAAI,CAACe,KAAK;YACjB;UACF;UAEA,IAAIf,IAAI,KAAKxC,KAAK,EAAE;YAClB,OAAOg5D,kBAAkB;UAC3B;UAEA,OAAOx2D,IAAI,CAACgB,OAAO,KAAK,IAAI,EAAE;YAC5B,IAAIhB,IAAI,CAAC1Q,MAAM,KAAK,IAAI,IAAI0Q,IAAI,CAAC1Q,MAAM,KAAKkO,KAAK,EAAE;cACjD,OAAOg5D,kBAAkB;YAC3B;YAEAx2D,IAAI,GAAGA,IAAI,CAAC1Q,MAAM;UACpB;UAEA0Q,IAAI,CAACgB,OAAO,CAAC1R,MAAM,GAAG0Q,IAAI,CAAC1Q,MAAM;UACjC0Q,IAAI,GAAGA,IAAI,CAACgB,OAAO;QACrB;MACF;MAEA,OAAO,KAAK;IACd;IAEA,IAAI01D,iBAAiB;IAErB;MACEA,iBAAiB,GAAG,KAAK;MAEzB,IAAI;QACF,IAAIC,mBAAmB,GAAG/2E,MAAM,CAACg3E,iBAAiB,CAAC,CAAC,CAAC,CAAC;QAGtD,IAAI5gE,GAAG,CAAC,CAAC,CAAC2gE,mBAAmB,EAAE,IAAI,CAAC,CAAC,CAAC;QACtC,IAAIrsC,GAAG,CAAC,CAACqsC,mBAAmB,CAAC,CAAC;MAEhC,CAAC,CAAC,OAAO/0E,CAAC,EAAE;QAEV80E,iBAAiB,GAAG,IAAI;MAC1B;IACF;IAEA,SAASG,SAASA,CAACtnE,GAAG,EAAEohC,YAAY,EAAEh3B,GAAG,EAAE6iB,IAAI,EAAE;MAE/C,IAAI,CAACjtB,GAAG,GAAGA,GAAG;MACd,IAAI,CAACoK,GAAG,GAAGA,GAAG;MACd,IAAI,CAAC83B,WAAW,GAAG,IAAI;MACvB,IAAI,CAACluC,IAAI,GAAG,IAAI;MAChB,IAAI,CAACgN,SAAS,GAAG,IAAI;MAErB,IAAI,CAACjB,MAAM,GAAG,IAAI;MAClB,IAAI,CAACyR,KAAK,GAAG,IAAI;MACjB,IAAI,CAACC,OAAO,GAAG,IAAI;MACnB,IAAI,CAAC/I,KAAK,GAAG,CAAC;MACd,IAAI,CAACm3B,GAAG,GAAG,IAAI;MACf,IAAI,CAACoyB,UAAU,GAAG,IAAI;MACtB,IAAI,CAAC7wB,YAAY,GAAGA,YAAY;MAChC,IAAI,CAACpU,aAAa,GAAG,IAAI;MACzB,IAAI,CAAC0I,WAAW,GAAG,IAAI;MACvB,IAAI,CAACnI,aAAa,GAAG,IAAI;MACzB,IAAI,CAACtuB,YAAY,GAAG,IAAI;MACxB,IAAI,CAACguB,IAAI,GAAGA,IAAI;MAEhB,IAAI,CAACrc,KAAK,GAAG1C,SAAS;MACtB,IAAI,CAACs4C,YAAY,GAAGt4C,SAAS;MAC7B,IAAI,CAAC2yB,SAAS,GAAG,IAAI;MACrB,IAAI,CAAC3iB,KAAK,GAAG5C,OAAO;MACpB,IAAI,CAACmV,UAAU,GAAGnV,OAAO;MACzB,IAAI,CAAC7a,SAAS,GAAG,IAAI;MAErB;QAaE,IAAI,CAACu2C,cAAc,GAAGuwB,MAAM,CAACC,GAAG;QAChC,IAAI,CAAC7wB,eAAe,GAAG4wB,MAAM,CAACC,GAAG;QACjC,IAAI,CAACvwB,gBAAgB,GAAGswB,MAAM,CAACC,GAAG;QAClC,IAAI,CAACthB,gBAAgB,GAAGqhB,MAAM,CAACC,GAAG;QAIlC,IAAI,CAACxwB,cAAc,GAAG,CAAC;QACvB,IAAI,CAACL,eAAe,GAAG,CAAC,CAAC;QACzB,IAAI,CAACM,gBAAgB,GAAG,CAAC;QACzB,IAAI,CAACiP,gBAAgB,GAAG,CAAC;MAC3B;MAEA;QAEE,IAAI,CAACjtB,WAAW,GAAG,IAAI;QACvB,IAAI,CAACsxB,kBAAkB,GAAG,KAAK;QAC/B,IAAI,CAACxf,eAAe,GAAG,IAAI;QAE3B,IACE,CAACo8B,iBAAiB,IAClB,OAAO92E,MAAM,CAACg3E,iBAAiB,KAAK,UAAU,EAC9C;UACAh3E,MAAM,CAACg3E,iBAAiB,CAAC,IAAI,CAAC;QAChC;MACF;IACF;IAcA,SAASI,WAAWA,CAACznE,GAAG,EAAEohC,YAAY,EAAEh3B,GAAG,EAAE6iB,IAAI,EAAE;MAEjD,OAAO,IAAIq6C,SAAS,CAACtnE,GAAG,EAAEohC,YAAY,EAAEh3B,GAAG,EAAE6iB,IAAI,CAAC;IACpD;IAEA,SAASy6C,eAAeA,CAAC58C,SAAS,EAAE;MAClC,IAAI77B,SAAS,GAAG67B,SAAS,CAAC77B,SAAS;MACnC,OAAO,CAAC,EAAEA,SAAS,IAAIA,SAAS,CAACwwC,gBAAgB,CAAC;IACpD;IAEA,SAASugB,yBAAyBA,CAAChsD,IAAI,EAAE;MACvC,OACE,OAAOA,IAAI,KAAK,UAAU,IAC1B,CAAC0zE,eAAe,CAAC1zE,IAAI,CAAC,IACtBA,IAAI,CAAC4jD,YAAY,KAAK1jD,SAAS;IAEnC;IACA,SAAS6uD,uBAAuBA,CAACj4B,SAAS,EAAE;MAC1C,IAAI,OAAOA,SAAS,KAAK,UAAU,EAAE;QACnC,OAAO48C,eAAe,CAAC58C,SAAS,CAAC,GAAGruB,cAAc,GAAGD,iBAAiB;MACxE,CAAC,MAAM,IAAIsuB,SAAS,KAAK52B,SAAS,IAAI42B,SAAS,KAAK,IAAI,EAAE;QACxD,IAAI3d,QAAQ,GAAG2d,SAAS,CAAC3d,QAAQ;QAEjC,IAAIA,QAAQ,KAAK1B,sBAAsB,EAAE;UACvC,OAAOtO,UAAU;QACnB;QAEA,IAAIgQ,QAAQ,KAAKvB,eAAe,EAAE;UAChC,OAAOtO,aAAa;QACtB;MACF;MAEA,OAAOZ,sBAAsB;IAC/B;IAEA,SAAS2kC,oBAAoBA,CAACplC,OAAO,EAAEmlC,YAAY,EAAE;MACnD,IAAIvW,cAAc,GAAG5uB,OAAO,CAACwE,SAAS;MAEtC,IAAIoqB,cAAc,KAAK,IAAI,EAAE;QAM3BA,cAAc,GAAG48C,WAAW,CAC1BxrE,OAAO,CAAC+D,GAAG,EACXohC,YAAY,EACZnlC,OAAO,CAACmO,GAAG,EACXnO,OAAO,CAACgxB,IACV,CAAC;QACDpC,cAAc,CAACqX,WAAW,GAAGjmC,OAAO,CAACimC,WAAW;QAChDrX,cAAc,CAAC72B,IAAI,GAAGiI,OAAO,CAACjI,IAAI;QAClC62B,cAAc,CAAC7pB,SAAS,GAAG/E,OAAO,CAAC+E,SAAS;QAE5C;UAEE6pB,cAAc,CAACoO,WAAW,GAAGh9B,OAAO,CAACg9B,WAAW;UAChDpO,cAAc,CAACkgB,eAAe,GAAG9uC,OAAO,CAAC8uC,eAAe;QAC1D;QAEAlgB,cAAc,CAACpqB,SAAS,GAAGxE,OAAO;QAClCA,OAAO,CAACwE,SAAS,GAAGoqB,cAAc;MACpC,CAAC,MAAM;QACLA,cAAc,CAACuW,YAAY,GAAGA,YAAY;QAE1CvW,cAAc,CAAC72B,IAAI,GAAGiI,OAAO,CAACjI,IAAI;QAGlC62B,cAAc,CAACja,KAAK,GAAG1C,SAAS;QAEhC2c,cAAc,CAAC27B,YAAY,GAAGt4C,SAAS;QACvC2c,cAAc,CAACgW,SAAS,GAAG,IAAI;QAE/B;UAKEhW,cAAc,CAACmsB,cAAc,GAAG,CAAC;UACjCnsB,cAAc,CAAC8rB,eAAe,GAAG,CAAC,CAAC;QACrC;MACF;MAGA9rB,cAAc,CAACja,KAAK,GAAG3U,OAAO,CAAC2U,KAAK,GAAGP,UAAU;MACjDwa,cAAc,CAAC4F,UAAU,GAAGx0B,OAAO,CAACw0B,UAAU;MAC9C5F,cAAc,CAAC3M,KAAK,GAAGjiB,OAAO,CAACiiB,KAAK;MACpC2M,cAAc,CAACrZ,KAAK,GAAGvV,OAAO,CAACuV,KAAK;MACpCqZ,cAAc,CAACmC,aAAa,GAAG/wB,OAAO,CAAC+wB,aAAa;MACpDnC,cAAc,CAAC0C,aAAa,GAAGtxB,OAAO,CAACsxB,aAAa;MACpD1C,cAAc,CAAC6K,WAAW,GAAGz5B,OAAO,CAACy5B,WAAW;MAGhD,IAAIiyC,mBAAmB,GAAG1rE,OAAO,CAACgD,YAAY;MAC9C4rB,cAAc,CAAC5rB,YAAY,GACzB0oE,mBAAmB,KAAK,IAAI,GACxB,IAAI,GACJ;QACEzpD,KAAK,EAAEypD,mBAAmB,CAACzpD,KAAK;QAChCouC,YAAY,EAAEqb,mBAAmB,CAACrb;MACpC,CAAC;MAEPzhC,cAAc,CAACpZ,OAAO,GAAGxV,OAAO,CAACwV,OAAO;MACxCoZ,cAAc,CAACniB,KAAK,GAAGzM,OAAO,CAACyM,KAAK;MACpCmiB,cAAc,CAACgV,GAAG,GAAG5jC,OAAO,CAAC4jC,GAAG;MAChChV,cAAc,CAAConC,UAAU,GAAGh2D,OAAO,CAACg2D,UAAU;MAE9C;QACEpnC,cAAc,CAACosB,gBAAgB,GAAGh7C,OAAO,CAACg7C,gBAAgB;QAC1DpsB,cAAc,CAACq7B,gBAAgB,GAAGjqD,OAAO,CAACiqD,gBAAgB;MAC5D;MAEA;QACEr7B,cAAc,CAAC0/B,kBAAkB,GAAGtuD,OAAO,CAACsuD,kBAAkB;QAE9D,QAAQ1/B,cAAc,CAAC7qB,GAAG;UACxB,KAAKtD,sBAAsB;UAC3B,KAAKF,iBAAiB;UACtB,KAAKe,mBAAmB;YACtBstB,cAAc,CAAC72B,IAAI,GAAGmsD,8BAA8B,CAAClkD,OAAO,CAACjI,IAAI,CAAC;YAClE;UAEF,KAAKyI,cAAc;YACjBouB,cAAc,CAAC72B,IAAI,GAAGivD,2BAA2B,CAAChnD,OAAO,CAACjI,IAAI,CAAC;YAC/D;UAEF,KAAKmJ,UAAU;YACb0tB,cAAc,CAAC72B,IAAI,GAAGkvD,gCAAgC,CACpDjnD,OAAO,CAACjI,IACV,CAAC;YACD;QACJ;MACF;MAEA,OAAO62B,cAAc;IACvB;IAEA,SAAS8a,mBAAmBA,CAAC9a,cAAc,EAAE3L,WAAW,EAAE;MASxD2L,cAAc,CAACja,KAAK,IAAIP,UAAU,GAAGjC,SAAS;MAE9C,IAAInS,OAAO,GAAG4uB,cAAc,CAACpqB,SAAS;MAEtC,IAAIxE,OAAO,KAAK,IAAI,EAAE;QAEpB4uB,cAAc,CAAC4F,UAAU,GAAGnV,OAAO;QACnCuP,cAAc,CAAC3M,KAAK,GAAGgB,WAAW;QAClC2L,cAAc,CAACrZ,KAAK,GAAG,IAAI;QAC3BqZ,cAAc,CAAC27B,YAAY,GAAGt4C,SAAS;QACvC2c,cAAc,CAACmC,aAAa,GAAG,IAAI;QACnCnC,cAAc,CAAC0C,aAAa,GAAG,IAAI;QACnC1C,cAAc,CAAC6K,WAAW,GAAG,IAAI;QACjC7K,cAAc,CAAC5rB,YAAY,GAAG,IAAI;QAClC4rB,cAAc,CAAC7pB,SAAS,GAAG,IAAI;QAE/B;UAGE6pB,cAAc,CAACosB,gBAAgB,GAAG,CAAC;UACnCpsB,cAAc,CAACq7B,gBAAgB,GAAG,CAAC;QACrC;MACF,CAAC,MAAM;QAELr7B,cAAc,CAAC4F,UAAU,GAAGx0B,OAAO,CAACw0B,UAAU;QAC9C5F,cAAc,CAAC3M,KAAK,GAAGjiB,OAAO,CAACiiB,KAAK;QACpC2M,cAAc,CAACrZ,KAAK,GAAGvV,OAAO,CAACuV,KAAK;QACpCqZ,cAAc,CAAC27B,YAAY,GAAGt4C,SAAS;QACvC2c,cAAc,CAACgW,SAAS,GAAG,IAAI;QAC/BhW,cAAc,CAACmC,aAAa,GAAG/wB,OAAO,CAAC+wB,aAAa;QACpDnC,cAAc,CAAC0C,aAAa,GAAGtxB,OAAO,CAACsxB,aAAa;QACpD1C,cAAc,CAAC6K,WAAW,GAAGz5B,OAAO,CAACy5B,WAAW;QAEhD7K,cAAc,CAAC72B,IAAI,GAAGiI,OAAO,CAACjI,IAAI;QAGlC,IAAI2zE,mBAAmB,GAAG1rE,OAAO,CAACgD,YAAY;QAC9C4rB,cAAc,CAAC5rB,YAAY,GACzB0oE,mBAAmB,KAAK,IAAI,GACxB,IAAI,GACJ;UACEzpD,KAAK,EAAEypD,mBAAmB,CAACzpD,KAAK;UAChCouC,YAAY,EAAEqb,mBAAmB,CAACrb;QACpC,CAAC;QAEP;UAGEzhC,cAAc,CAACosB,gBAAgB,GAAGh7C,OAAO,CAACg7C,gBAAgB;UAC1DpsB,cAAc,CAACq7B,gBAAgB,GAAGjqD,OAAO,CAACiqD,gBAAgB;QAC5D;MACF;MAEA,OAAOr7B,cAAc;IACvB;IACA,SAAS+8C,mBAAmBA,CAC1B5nE,GAAG,EACH6nE,YAAY,EACZC,kCAAkC,EAClC;MACA,IAAI76C,IAAI;MAER,IAAIjtB,GAAG,KAAK0sB,cAAc,EAAE;QAC1BO,IAAI,GAAGtS,cAAc;QAErB,IAAIktD,YAAY,KAAK,IAAI,EAAE;UACzB56C,IAAI,IAAIpS,gBAAgB,GAAGC,iBAAiB;QAC9C;MACF,CAAC,MAAM;QACLmS,IAAI,GAAGvS,MAAM;MACf;MAEA,IAAI9B,iBAAiB,EAAE;QAIrBqU,IAAI,IAAIrS,WAAW;MACrB;MAEA,OAAO6sD,WAAW,CAAC9qE,QAAQ,EAAE,IAAI,EAAE,IAAI,EAAEswB,IAAI,CAAC;IAChD;IACA,SAASqzB,2BAA2BA,CAClCtsD,IAAI,EACJoW,GAAG,EACHg3B,YAAY,EACZpwB,KAAK,EACLic,IAAI,EACJ/O,KAAK,EACL;MACA,IAAI6pD,QAAQ,GAAGrrE,sBAAsB;MAErC,IAAIwjD,YAAY,GAAGlsD,IAAI;MAEvB,IAAI,OAAOA,IAAI,KAAK,UAAU,EAAE;QAC9B,IAAI0zE,eAAe,CAAC1zE,IAAI,CAAC,EAAE;UACzB+zE,QAAQ,GAAGtrE,cAAc;UAEzB;YACEyjD,YAAY,GAAG+C,2BAA2B,CAAC/C,YAAY,CAAC;UAC1D;QACF,CAAC,MAAM;UACL;YACEA,YAAY,GAAGC,8BAA8B,CAACD,YAAY,CAAC;UAC7D;QACF;MACF,CAAC,MAAM,IAAI,OAAOlsD,IAAI,KAAK,QAAQ,EAAE;QACnC;UACE+zE,QAAQ,GAAGlrE,aAAa;QAC1B;MACF,CAAC,MAAM;QACLmrE,MAAM,EAAE,QAAQh0E,IAAI;UAClB,KAAKoX,mBAAmB;YACtB,OAAOw3B,uBAAuB,CAC5BxB,YAAY,CAAC7nB,QAAQ,EACrB0T,IAAI,EACJ/O,KAAK,EACL9T,GACF,CAAC;UAEH,KAAKiB,sBAAsB;YACzB08D,QAAQ,GAAG/qE,IAAI;YACfiwB,IAAI,IAAIpS,gBAAgB;YAExB,IAAI,CAACoS,IAAI,GAAGtS,cAAc,MAAMD,MAAM,EAAE;cAEtCuS,IAAI,IAAInS,iBAAiB;YAC3B;YAEA;UAEF,KAAKxP,mBAAmB;YACtB,OAAO28D,uBAAuB,CAAC7mC,YAAY,EAAEnU,IAAI,EAAE/O,KAAK,EAAE9T,GAAG,CAAC;UAEhE,KAAKsB,mBAAmB;YACtB,OAAOw8D,uBAAuB,CAAC9mC,YAAY,EAAEnU,IAAI,EAAE/O,KAAK,EAAE9T,GAAG,CAAC;UAEhE,KAAKuB,wBAAwB;YAC3B,OAAOw8D,2BAA2B,CAAC/mC,YAAY,EAAEnU,IAAI,EAAE/O,KAAK,EAAE9T,GAAG,CAAC;UAEpE,KAAK4B,oBAAoB;YACvB,OAAOo6C,wBAAwB,CAAChlB,YAAY,EAAEnU,IAAI,EAAE/O,KAAK,EAAE9T,GAAG,CAAC;UAEjE,KAAK6B,wBAAwB;UAI7B,KAAKH,gBAAgB;UAIrB,KAAKI,gBAAgB;UAIrB,KAAKC,yBAAyB;UAI9B,KAAKJ,6BAA6B;UAIlC;YAAS;cACP,IAAI,OAAO/X,IAAI,KAAK,QAAQ,IAAIA,IAAI,KAAK,IAAI,EAAE;gBAC7C,QAAQA,IAAI,CAACmZ,QAAQ;kBACnB,KAAK5B,mBAAmB;oBACtBw8D,QAAQ,GAAG7qE,eAAe;oBAC1B,MAAM8qE,MAAM;kBAEd,KAAKx8D,kBAAkB;oBAErBu8D,QAAQ,GAAG9qE,eAAe;oBAC1B,MAAM+qE,MAAM;kBAEd,KAAKv8D,sBAAsB;oBACzBs8D,QAAQ,GAAG5qE,UAAU;oBAErB;sBACE+iD,YAAY,GACVgD,gCAAgC,CAAChD,YAAY,CAAC;oBAClD;oBAEA,MAAM8nB,MAAM;kBAEd,KAAKp8D,eAAe;oBAClBm8D,QAAQ,GAAGzqE,aAAa;oBACxB,MAAM0qE,MAAM;kBAEd,KAAKn8D,eAAe;oBAClBk8D,QAAQ,GAAGvqE,aAAa;oBACxB0iD,YAAY,GAAG,IAAI;oBACnB,MAAM8nB,MAAM;gBAChB;cACF;cAEA,IAAI/vD,IAAI,GAAG,EAAE;cAEb;gBACE,IACEjkB,IAAI,KAAKE,SAAS,IACjB,OAAOF,IAAI,KAAK,QAAQ,IACvBA,IAAI,KAAK,IAAI,IACb3D,MAAM,CAACwoC,IAAI,CAAC7kC,IAAI,CAAC,CAAClG,MAAM,KAAK,CAAE,EACjC;kBACAmqB,IAAI,IACF,4DAA4D,GAC5D,0DAA0D,GAC1D,gBAAgB;gBACpB;gBAEA,IAAIuQ,SAAS,GAAGxX,KAAK,GAAGhD,yBAAyB,CAACgD,KAAK,CAAC,GAAG,IAAI;gBAE/D,IAAIwX,SAAS,EAAE;kBACbvQ,IAAI,IAAI,kCAAkC,GAAGuQ,SAAS,GAAG,IAAI;gBAC/D;cACF;cAEA,MAAM,IAAIr7B,KAAK,CACb,2DAA2D,GACzD,6DAA6D,IAC5D,WAAW,IAAI6G,IAAI,IAAI,IAAI,GAAGA,IAAI,GAAG,OAAOA,IAAI,CAAC,GAAG,GAAG,GAAGikB,IAAI,CACnE,CAAC;YACH;QACF;MACF;MAEA,IAAIhK,KAAK,GAAGw5D,WAAW,CAACM,QAAQ,EAAE3mC,YAAY,EAAEh3B,GAAG,EAAE6iB,IAAI,CAAC;MAC1Dhf,KAAK,CAACi0B,WAAW,GAAGluC,IAAI;MACxBia,KAAK,CAACja,IAAI,GAAGksD,YAAY;MACzBjyC,KAAK,CAACiQ,KAAK,GAAGA,KAAK;MAEnB;QACEjQ,KAAK,CAACgrB,WAAW,GAAGjoB,KAAK;MAC3B;MAEA,OAAO/C,KAAK;IACd;IACA,SAASo0B,sBAAsBA,CAACjZ,OAAO,EAAE6D,IAAI,EAAE/O,KAAK,EAAE;MACpD,IAAIlN,KAAK,GAAG,IAAI;MAEhB;QACEA,KAAK,GAAGoY,OAAO,CAACC,MAAM;MACxB;MAEA,IAAIr1B,IAAI,GAAGo1B,OAAO,CAACp1B,IAAI;MACvB,IAAIoW,GAAG,GAAGgf,OAAO,CAAChf,GAAG;MACrB,IAAIg3B,YAAY,GAAGhY,OAAO,CAACnoB,KAAK;MAChC,IAAIgN,KAAK,GAAGqyC,2BAA2B,CACrCtsD,IAAI,EACJoW,GAAG,EACHg3B,YAAY,EACZpwB,KAAK,EACLic,IAAI,EACJ/O,KACF,CAAC;MAED;QACEjQ,KAAK,CAACgrB,WAAW,GAAG7P,OAAO,CAACC,MAAM;MACpC;MAEA,OAAOpb,KAAK;IACd;IACA,SAAS20B,uBAAuBA,CAACwlC,QAAQ,EAAEn7C,IAAI,EAAE/O,KAAK,EAAE9T,GAAG,EAAE;MAC3D,IAAI6D,KAAK,GAAGw5D,WAAW,CAAC1qE,QAAQ,EAAEqrE,QAAQ,EAAEh+D,GAAG,EAAE6iB,IAAI,CAAC;MACtDhf,KAAK,CAACiQ,KAAK,GAAGA,KAAK;MACnB,OAAOjQ,KAAK;IACd;IAEA,SAASg6D,uBAAuBA,CAAC7mC,YAAY,EAAEnU,IAAI,EAAE/O,KAAK,EAAE9T,GAAG,EAAE;MAC/D;QACE,IAAI,OAAOg3B,YAAY,CAAC8S,EAAE,KAAK,QAAQ,EAAE;UACvC/lD,KAAK,CACH,2FAA2F,EAC3F,OAAOizC,YAAY,CAAC8S,EACtB,CAAC;QACH;MACF;MAEA,IAAIjmC,KAAK,GAAGw5D,WAAW,CAACrqE,QAAQ,EAAEgkC,YAAY,EAAEh3B,GAAG,EAAE6iB,IAAI,GAAGrS,WAAW,CAAC;MACxE3M,KAAK,CAACi0B,WAAW,GAAG52B,mBAAmB;MACvC2C,KAAK,CAACiQ,KAAK,GAAGA,KAAK;MAEnB;QACEjQ,KAAK,CAACjN,SAAS,GAAG;UAChBm2C,cAAc,EAAE,CAAC;UACjBG,qBAAqB,EAAE;QACzB,CAAC;MACH;MAEA,OAAOrpC,KAAK;IACd;IAEA,SAASi6D,uBAAuBA,CAAC9mC,YAAY,EAAEnU,IAAI,EAAE/O,KAAK,EAAE9T,GAAG,EAAE;MAC/D,IAAI6D,KAAK,GAAGw5D,WAAW,CAACpqE,iBAAiB,EAAE+jC,YAAY,EAAEh3B,GAAG,EAAE6iB,IAAI,CAAC;MACnEhf,KAAK,CAACi0B,WAAW,GAAGx2B,mBAAmB;MACvCuC,KAAK,CAACiQ,KAAK,GAAGA,KAAK;MACnB,OAAOjQ,KAAK;IACd;IACA,SAASk6D,2BAA2BA,CAAC/mC,YAAY,EAAEnU,IAAI,EAAE/O,KAAK,EAAE9T,GAAG,EAAE;MACnE,IAAI6D,KAAK,GAAGw5D,WAAW,CAAC9pE,qBAAqB,EAAEyjC,YAAY,EAAEh3B,GAAG,EAAE6iB,IAAI,CAAC;MACvEhf,KAAK,CAACi0B,WAAW,GAAGv2B,wBAAwB;MAC5CsC,KAAK,CAACiQ,KAAK,GAAGA,KAAK;MACnB,OAAOjQ,KAAK;IACd;IACA,SAASm4C,wBAAwBA,CAAChlB,YAAY,EAAEnU,IAAI,EAAE/O,KAAK,EAAE9T,GAAG,EAAE;MAChE,IAAI6D,KAAK,GAAGw5D,WAAW,CAAC5pE,kBAAkB,EAAEujC,YAAY,EAAEh3B,GAAG,EAAE6iB,IAAI,CAAC;MACpEhf,KAAK,CAACi0B,WAAW,GAAGl2B,oBAAoB;MACxCiC,KAAK,CAACiQ,KAAK,GAAGA,KAAK;MACnB,IAAImqD,oBAAoB,GAAG;QACzB13C,WAAW,EAAEhE,gBAAgB;QAC7Bq0B,kBAAkB,EAAEr0B,gBAAgB;QACpC27C,eAAe,EAAE,IAAI;QACrB5R,WAAW,EAAE,IAAI;QACjB6R,YAAY,EAAE,IAAI;QAClB1lB,QAAQ,EAAE,IAAI;QACd2lB,MAAM,EAAE,SAAAA,CAAA,EAAY;UAClB,OAAO7R,uBAAuB,CAAC0R,oBAAoB,CAAC;QACtD,CAAC;QACDI,MAAM,EAAE,SAAAA,CAAA,EAAY;UAClB,OAAO7R,uBAAuB,CAACyR,oBAAoB,CAAC;QACtD;MACF,CAAC;MACDp6D,KAAK,CAACjN,SAAS,GAAGqnE,oBAAoB;MACtC,OAAOp6D,KAAK;IACd;IACA,SAAS8zB,mBAAmBA,CAAC2mC,OAAO,EAAEz7C,IAAI,EAAE/O,KAAK,EAAE;MACjD,IAAIjQ,KAAK,GAAGw5D,WAAW,CAAC3qE,QAAQ,EAAE4rE,OAAO,EAAE,IAAI,EAAEz7C,IAAI,CAAC;MACtDhf,KAAK,CAACiQ,KAAK,GAAGA,KAAK;MACnB,OAAOjQ,KAAK;IACd;IACA,SAASy0B,qBAAqBA,CAACH,MAAM,EAAEtV,IAAI,EAAE/O,KAAK,EAAE;MAClD,IAAIkjB,YAAY,GAAGmB,MAAM,CAAChpB,QAAQ,KAAK,IAAI,GAAGgpB,MAAM,CAAChpB,QAAQ,GAAG,EAAE;MAClE,IAAItL,KAAK,GAAGw5D,WAAW,CAAC7qE,UAAU,EAAEwkC,YAAY,EAAEmB,MAAM,CAACn4B,GAAG,EAAE6iB,IAAI,CAAC;MACnEhf,KAAK,CAACiQ,KAAK,GAAGA,KAAK;MACnBjQ,KAAK,CAACjN,SAAS,GAAG;QAChBwhC,aAAa,EAAED,MAAM,CAACC,aAAa;QACnCmmC,eAAe,EAAE,IAAI;QAErBlmC,cAAc,EAAEF,MAAM,CAACE;MACzB,CAAC;MACD,OAAOx0B,KAAK;IACd;IAEA,SAASy2D,0BAA0BA,CAACzvE,MAAM,EAAE4mD,MAAM,EAAE;MAClD,IAAI5mD,MAAM,KAAK,IAAI,EAAE;QAGnBA,MAAM,GAAGwyE,WAAW,CAAC/qE,sBAAsB,EAAE,IAAI,EAAE,IAAI,EAAEge,MAAM,CAAC;MAClE;MAMAzlB,MAAM,CAAC+K,GAAG,GAAG67C,MAAM,CAAC77C,GAAG;MACvB/K,MAAM,CAACmV,GAAG,GAAGyxC,MAAM,CAACzxC,GAAG;MACvBnV,MAAM,CAACitC,WAAW,GAAG2Z,MAAM,CAAC3Z,WAAW;MACvCjtC,MAAM,CAACjB,IAAI,GAAG6nD,MAAM,CAAC7nD,IAAI;MACzBiB,MAAM,CAAC+L,SAAS,GAAG66C,MAAM,CAAC76C,SAAS;MACnC/L,MAAM,CAAC8K,MAAM,GAAG87C,MAAM,CAAC97C,MAAM;MAC7B9K,MAAM,CAACuc,KAAK,GAAGqqC,MAAM,CAACrqC,KAAK;MAC3Bvc,MAAM,CAACwc,OAAO,GAAGoqC,MAAM,CAACpqC,OAAO;MAC/Bxc,MAAM,CAACyT,KAAK,GAAGmzC,MAAM,CAACnzC,KAAK;MAC3BzT,MAAM,CAAC4qC,GAAG,GAAGgc,MAAM,CAAChc,GAAG;MACvB5qC,MAAM,CAACg9D,UAAU,GAAGpW,MAAM,CAACoW,UAAU;MACrCh9D,MAAM,CAACmsC,YAAY,GAAGya,MAAM,CAACza,YAAY;MACzCnsC,MAAM,CAAC+3B,aAAa,GAAG6uB,MAAM,CAAC7uB,aAAa;MAC3C/3B,MAAM,CAACygC,WAAW,GAAGmmB,MAAM,CAACnmB,WAAW;MACvCzgC,MAAM,CAACs4B,aAAa,GAAGsuB,MAAM,CAACtuB,aAAa;MAC3Ct4B,MAAM,CAACgK,YAAY,GAAG48C,MAAM,CAAC58C,YAAY;MACzChK,MAAM,CAACg4B,IAAI,GAAG4uB,MAAM,CAAC5uB,IAAI;MACzBh4B,MAAM,CAAC2b,KAAK,GAAGirC,MAAM,CAACjrC,KAAK;MAC3B3b,MAAM,CAACuxD,YAAY,GAAG3K,MAAM,CAAC2K,YAAY;MACzCvxD,MAAM,CAAC4rC,SAAS,GAAGgb,MAAM,CAAChb,SAAS;MACnC5rC,MAAM,CAACipB,KAAK,GAAG29B,MAAM,CAAC39B,KAAK;MAC3BjpB,MAAM,CAACw7B,UAAU,GAAGorB,MAAM,CAACprB,UAAU;MACrCx7B,MAAM,CAACwL,SAAS,GAAGo7C,MAAM,CAACp7C,SAAS;MAEnC;QACExL,MAAM,CAAC+hD,cAAc,GAAG6E,MAAM,CAAC7E,cAAc;QAC7C/hD,MAAM,CAAC0hD,eAAe,GAAGkF,MAAM,CAAClF,eAAe;QAC/C1hD,MAAM,CAACgiD,gBAAgB,GAAG4E,MAAM,CAAC5E,gBAAgB;QACjDhiD,MAAM,CAACixD,gBAAgB,GAAGrK,MAAM,CAACqK,gBAAgB;MACnD;MAEAjxD,MAAM,CAACgkC,WAAW,GAAG4iB,MAAM,CAAC5iB,WAAW;MACvChkC,MAAM,CAACs1D,kBAAkB,GAAG1O,MAAM,CAAC0O,kBAAkB;MACrDt1D,MAAM,CAAC81C,eAAe,GAAG8Q,MAAM,CAAC9Q,eAAe;MAC/C,OAAO91C,MAAM;IACf;IAEA,SAAS2zE,aAAaA,CACpBpmC,aAAa,EACbxiC,GAAG,EACH6oE,OAAO,EACP50B,gBAAgB,EAChBgvB,kBAAkB,EAClB6F,SAAS,EACT;MACA,IAAI,CAAC9oE,GAAG,GAAGA,GAAG;MACd,IAAI,CAACwiC,aAAa,GAAGA,aAAa;MAClC,IAAI,CAACmmC,eAAe,GAAG,IAAI;MAC3B,IAAI,CAAC1sE,OAAO,GAAG,IAAI;MACnB,IAAI,CAACynE,SAAS,GAAG,IAAI;MACrB,IAAI,CAACxR,YAAY,GAAG,IAAI;MACxB,IAAI,CAAC8N,aAAa,GAAG35C,SAAS;MAC9B,IAAI,CAAC0M,mBAAmB,GAAG,IAAI;MAC/B,IAAI,CAACjjC,OAAO,GAAG,IAAI;MACnB,IAAI,CAACyyD,cAAc,GAAG,IAAI;MAC1B,IAAI,CAACrmD,IAAI,GAAG,IAAI;MAChB,IAAI,CAAC22B,YAAY,GAAG,IAAI;MACxB,IAAI,CAACI,gBAAgB,GAAG1X,MAAM;MAC9B,IAAI,CAACoE,eAAe,GAAG4B,aAAa,CAACzD,WAAW,CAAC;MACjD,IAAI,CAACS,YAAY,GAAGjD,OAAO;MAC3B,IAAI,CAACmD,cAAc,GAAGnD,OAAO;MAC7B,IAAI,CAACoD,WAAW,GAAGpD,OAAO;MAC1B,IAAI,CAACuE,YAAY,GAAGvE,OAAO;MAC3B,IAAI,CAACikD,aAAa,GAAGjkD,OAAO;MAC5B,IAAI,CAAC0E,0BAA0B,GAAG1E,OAAO;MACzC,IAAI,CAAC6G,mBAAmB,GAAG,CAAC;MAC5B,IAAI,CAAChD,cAAc,GAAG7D,OAAO;MAC7B,IAAI,CAAC+D,aAAa,GAAGkC,aAAa,CAACjG,OAAO,CAAC;MAC3C,IAAI,CAAC8G,aAAa,GAAGb,aAAa,CAAC,IAAI,CAAC;MACxC,IAAI,CAAC0yB,gBAAgB,GAAGA,gBAAgB;MACxC,IAAI,CAACgvB,kBAAkB,GAAGA,kBAAkB;MAE5C,IAAI,CAAC6F,SAAS,GAAGA,SAAS;MAC1B,IAAI,CAACC,qBAAqB,GAAG,IAAItiE,GAAG,CAAC,CAAC;MAEtC;QACE,IAAI,CAAC0wC,cAAc,GAAG,CAAC;QACvB,IAAI,CAACG,qBAAqB,GAAG,CAAC;MAChC;MAEA;QACE,IAAI,CAACn0B,gBAAgB,GAAG,IAAI4X,GAAG,CAAC,CAAC;QACjC,IAAIhY,sBAAsB,GAAI,IAAI,CAACA,sBAAsB,GAAG,EAAG;QAE/D,KAAK,IAAIslC,EAAE,GAAG,CAAC,EAAEA,EAAE,GAAGhtC,UAAU,EAAEgtC,EAAE,EAAE,EAAE;UACtCtlC,sBAAsB,CAAC7qB,IAAI,CAAC,IAAI6iC,GAAG,CAAC,CAAC,CAAC;QACxC;MACF;MAEA;QACE,QAAQ/6B,GAAG;UACT,KAAK0sB,cAAc;YACjB,IAAI,CAACs8C,cAAc,GAAGH,OAAO,GAAG,eAAe,GAAG,cAAc;YAChE;UAEF,KAAKp8C,UAAU;YACb,IAAI,CAACu8C,cAAc,GAAGH,OAAO,GAAG,WAAW,GAAG,UAAU;YACxD;QACJ;MACF;IACF;IAEA,SAASI,eAAeA,CACtBzmC,aAAa,EACbxiC,GAAG,EACH6oE,OAAO,EACPK,eAAe,EACfC,kBAAkB,EAClBtB,YAAY,EACZC,kCAAkC,EAIlC7zB,gBAAgB,EAChBgvB,kBAAkB,EAClBmG,mBAAmB,EACnBN,SAAS,EACT;MAEA,IAAIxvD,IAAI,GAAG,IAAIsvD,aAAa,CAC1BpmC,aAAa,EACbxiC,GAAG,EACH6oE,OAAO,EACP50B,gBAAgB,EAChBgvB,kBAAkB,EAClB6F,SACF,CAAC;MAGD,IAAIO,kBAAkB,GAAGzB,mBAAmB,CAAC5nE,GAAG,EAAE6nE,YAAY,CAAC;MAC/DvuD,IAAI,CAACrd,OAAO,GAAGotE,kBAAkB;MACjCA,kBAAkB,CAACroE,SAAS,GAAGsY,IAAI;MAEnC;QACE,IAAIgwD,aAAa,GAAG;UAClBlgD,OAAO,EAAE8/C,eAAe;UACxB17C,YAAY,EAAEq7C,OAAO;UACrBU,KAAK,EAAE;QACT,CAAC;QACDF,kBAAkB,CAAC97C,aAAa,GAAG+7C,aAAa;MAClD;MAEAn0C,qBAAqB,CAACk0C,kBAAkB,CAAC;MACzC,OAAO/vD,IAAI;IACb;IAEA,IAAIkwD,YAAY,GAAG,kCAAkC;IAErD,SAASC,cAAcA,CACrBlwD,QAAQ,EACRipB,aAAa,EACbC,cAAc,EACd;MACA,IAAIr4B,GAAG,GACLvc,SAAS,CAACC,MAAM,GAAG,CAAC,IAAID,SAAS,CAAC,CAAC,CAAC,KAAKqG,SAAS,GAC9CrG,SAAS,CAAC,CAAC,CAAC,GACZ,IAAI;MAEV;QACEkvC,sBAAsB,CAAC3yB,GAAG,CAAC;MAC7B;MAEA,OAAO;QAEL+C,QAAQ,EAAEhC,iBAAiB;QAC3Bf,GAAG,EAAEA,GAAG,IAAI,IAAI,GAAG,IAAI,GAAG,EAAE,GAAGA,GAAG;QAClCmP,QAAQ,EAAEA,QAAQ;QAClBipB,aAAa,EAAEA,aAAa;QAC5BC,cAAc,EAAEA;MAClB,CAAC;IACH;IAIA,IAAIinC,yBAAyB;IAC7B,IAAIC,gCAAgC;IAEpC;MACED,yBAAyB,GAAG,KAAK;MACjCC,gCAAgC,GAAG,CAAC,CAAC;IACvC;IAEA,SAASC,oBAAoBA,CAACC,eAAe,EAAE;MAC7C,IAAI,CAACA,eAAe,EAAE;QACpB,OAAOt/C,kBAAkB;MAC3B;MAEA,IAAItc,KAAK,GAAGzW,GAAG,CAACqyE,eAAe,CAAC;MAChC,IAAI99C,aAAa,GAAGS,0BAA0B,CAACve,KAAK,CAAC;MAErD,IAAIA,KAAK,CAACjO,GAAG,KAAKvD,cAAc,EAAE;QAChC,IAAIquB,SAAS,GAAG7c,KAAK,CAACja,IAAI;QAE1B,IAAIg3B,iBAAiB,CAACF,SAAS,CAAC,EAAE;UAChC,OAAOgB,mBAAmB,CAAC7d,KAAK,EAAE6c,SAAS,EAAEiB,aAAa,CAAC;QAC7D;MACF;MAEA,OAAOA,aAAa;IACtB;IAEA,SAAS+9C,2BAA2BA,CAAC/4D,SAAS,EAAEg5D,UAAU,EAAE;MAC1D;QACE,IAAI97D,KAAK,GAAGzW,GAAG,CAACuZ,SAAS,CAAC;QAE1B,IAAI9C,KAAK,KAAK/Z,SAAS,EAAE;UACvB,IAAI,OAAO6c,SAAS,CAACzD,MAAM,KAAK,UAAU,EAAE;YAC1C,MAAM,IAAIngB,KAAK,CAAC,gDAAgD,CAAC;UACnE,CAAC,MAAM;YACL,IAAI0rC,IAAI,GAAGxoC,MAAM,CAACwoC,IAAI,CAAC9nB,SAAS,CAAC,CAACwpB,IAAI,CAAC,GAAG,CAAC;YAC3C,MAAM,IAAIptC,KAAK,CACb,qDAAqD,GAAG0rC,IAC1D,CAAC;UACH;QACF;QAEA,IAAIgpC,SAAS,GAAGjwD,oBAAoB,CAAC3D,KAAK,CAAC;QAE3C,IAAI4zD,SAAS,KAAK,IAAI,EAAE;UACtB,OAAO,IAAI;QACb;QAEA,IAAIA,SAAS,CAAC50C,IAAI,GAAGpS,gBAAgB,EAAE;UACrC,IAAI8O,aAAa,GAAG3b,yBAAyB,CAACC,KAAK,CAAC,IAAI,WAAW;UAEnE,IAAI,CAAC07D,gCAAgC,CAAChgD,aAAa,CAAC,EAAE;YACpDggD,gCAAgC,CAAChgD,aAAa,CAAC,GAAG,IAAI;YACtD,IAAIuvC,aAAa,GAAGj9D,OAAO;YAE3B,IAAI;cACFu9B,eAAe,CAACqoC,SAAS,CAAC;cAE1B,IAAI5zD,KAAK,CAACgf,IAAI,GAAGpS,gBAAgB,EAAE;gBACjC1sB,KAAK,CACH,kCAAkC,GAChC,8DAA8D,GAC9D,oEAAoE,GACpE,2CAA2C,GAC3C,gDAAgD,EAClD47E,UAAU,EACVA,UAAU,EACVpgD,aACF,CAAC;cACH,CAAC,MAAM;gBACLx7B,KAAK,CACH,kCAAkC,GAChC,qEAAqE,GACrE,oEAAoE,GACpE,2CAA2C,GAC3C,gDAAgD,EAClD47E,UAAU,EACVA,UAAU,EACVpgD,aACF,CAAC;cACH;YACF,CAAC,SAAS;cAGR,IAAIuvC,aAAa,EAAE;gBACjB1/B,eAAe,CAAC0/B,aAAa,CAAC;cAChC,CAAC,MAAM;gBACL5/B,iBAAiB,CAAC,CAAC;cACrB;YACF;UACF;QACF;QAEA,OAAOtT,iBAAiB,CAAC67C,SAAS,CAAC7gE,SAAS,CAAC;MAC/C;IACF;IAEA,SAASgpE,eAAeA,CACtBxnC,aAAa,EACbxiC,GAAG,EACHmpE,kBAAkB,EAClBtB,YAAY,EACZC,kCAAkC,EAClC7zB,gBAAgB,EAChBgvB,kBAAkB,EAClBmG,mBAAmB,EACnB;MACA,IAAIP,OAAO,GAAG,KAAK;MACnB,IAAIK,eAAe,GAAG,IAAI;MAC1B,OAAOD,eAAe,CACpBzmC,aAAa,EACbxiC,GAAG,EACH6oE,OAAO,EACPK,eAAe,EACfC,kBAAkB,EAClBtB,YAAY,EACZC,kCAAkC,EAClC7zB,gBAAgB,EAChBgvB,kBAAkB,EAClBmG,mBAAmB,EACnB,IACF,CAAC;IACH;IACA,SAAS9C,eAAeA,CAACl9C,OAAO,EAAE83C,SAAS,EAAE2I,eAAe,EAAEpuE,QAAQ,EAAE;MACtE;QACE4d,cAAc,CAAC6nD,SAAS,EAAE93C,OAAO,CAAC;MACpC;MAEA,IAAI6gD,SAAS,GAAG/I,SAAS,CAACjlE,OAAO;MACjC,IAAIsjB,IAAI,GAAG80B,iBAAiB,CAAC41B,SAAS,CAAC;MAEvC,IAAIn6E,OAAO,GAAG85E,oBAAoB,CAACC,eAAe,CAAC;MAEnD,IAAI3I,SAAS,CAACpxE,OAAO,KAAK,IAAI,EAAE;QAC9BoxE,SAAS,CAACpxE,OAAO,GAAGA,OAAO;MAC7B,CAAC,MAAM;QACLoxE,SAAS,CAAC3e,cAAc,GAAGzyD,OAAO;MACpC;MAEA;QACE,IAAIqpC,WAAW,IAAIl9B,OAAO,KAAK,IAAI,IAAI,CAACytE,yBAAyB,EAAE;UACjEA,yBAAyB,GAAG,IAAI;UAEhCv7E,KAAK,CACH,+DAA+D,GAC7D,kEAAkE,GAClE,iEAAiE,GACjE,gCAAgC,EAClC6f,yBAAyB,CAAC/R,OAAO,CAAC,IAAI,SACxC,CAAC;QACH;MACF;MAEA,IAAIqmB,MAAM,GAAGwT,YAAY,CAACvW,IAAI,CAAC;MAG/B+C,MAAM,CAAC7U,OAAO,GAAG;QACf2b,OAAO,EAAEA;MACX,CAAC;MACD3tB,QAAQ,GAAGA,QAAQ,KAAKvH,SAAS,GAAG,IAAI,GAAGuH,QAAQ;MAEnD,IAAIA,QAAQ,KAAK,IAAI,EAAE;QACrB;UACE,IAAI,OAAOA,QAAQ,KAAK,UAAU,EAAE;YAClCtN,KAAK,CACH,sEAAsE,GACpE,iCAAiC,EACnCsN,QACF,CAAC;UACH;QACF;QAEA6mB,MAAM,CAAC7mB,QAAQ,GAAGA,QAAQ;MAC5B;MAEA,IAAI6d,IAAI,GAAGyc,aAAa,CAACk0C,SAAS,EAAE3nD,MAAM,EAAE/C,IAAI,CAAC;MAEjD,IAAIjG,IAAI,KAAK,IAAI,EAAE;QACjBs2B,qBAAqB,CAACt2B,IAAI,EAAE2wD,SAAS,EAAE1qD,IAAI,CAAC;QAC5C2W,mBAAmB,CAAC5c,IAAI,EAAE2wD,SAAS,EAAE1qD,IAAI,CAAC;MAC5C;MAEA,OAAOA,IAAI;IACb;IACA,SAAS2qD,qBAAqBA,CAAChJ,SAAS,EAAE;MACxC,IAAIiJ,cAAc,GAAGjJ,SAAS,CAACjlE,OAAO;MAEtC,IAAI,CAACkuE,cAAc,CAAC34D,KAAK,EAAE;QACzB,OAAO,IAAI;MACb;MAEA,QAAQ24D,cAAc,CAAC34D,KAAK,CAACxR,GAAG;QAC9B,KAAK9B,aAAa;QAClB,KAAKrB,aAAa;UAChB,OAAOmpB,iBAAiB,CAACmkD,cAAc,CAAC34D,KAAK,CAACxQ,SAAS,CAAC;QAE1D;UACE,OAAOmpE,cAAc,CAAC34D,KAAK,CAACxQ,SAAS;MACzC;IACF;IAEA,IAAIopE,eAAe,GAAG,SAAAA,CAAUn8D,KAAK,EAAE;MACrC,OAAO,IAAI;IACb,CAAC;IAED,SAAS6zC,WAAWA,CAAC7zC,KAAK,EAAE;MAC1B,OAAOm8D,eAAe,CAACn8D,KAAK,CAAC;IAC/B;IAEA,IAAIo8D,iBAAiB,GAAG,SAAAA,CAAUp8D,KAAK,EAAE;MACvC,OAAO,KAAK;IACd,CAAC;IAED,SAASw2C,aAAaA,CAACx2C,KAAK,EAAE;MAC5B,OAAOo8D,iBAAiB,CAACp8D,KAAK,CAAC;IACjC;IACA,IAAIq8D,iBAAiB,GAAG,IAAI;IAC5B,IAAIC,2BAA2B,GAAG,IAAI;IACtC,IAAIC,2BAA2B,GAAG,IAAI;IACtC,IAAIC,aAAa,GAAG,IAAI;IACxB,IAAIC,uBAAuB,GAAG,IAAI;IAClC,IAAIC,uBAAuB,GAAG,IAAI;IAClC,IAAIC,cAAc,GAAG,IAAI;IACzB,IAAIC,eAAe,GAAG,IAAI;IAC1B,IAAIC,kBAAkB,GAAG,IAAI;IAE7B;MACE,IAAIC,kBAAkB,GAAG,SAAAA,CAAU93D,GAAG,EAAEnS,IAAI,EAAE4H,KAAK,EAAE;QACnD,IAAI0B,GAAG,GAAGtJ,IAAI,CAAC4H,KAAK,CAAC;QACrB,IAAIsiE,OAAO,GAAGp4E,OAAO,CAACqgB,GAAG,CAAC,GAAGA,GAAG,CAACpiB,KAAK,CAAC,CAAC,GAAGiE,MAAM,CAAC,CAAC,CAAC,EAAEme,GAAG,CAAC;QAE1D,IAAIvK,KAAK,GAAG,CAAC,KAAK5H,IAAI,CAAChT,MAAM,EAAE;UAC7B,IAAI8E,OAAO,CAACo4E,OAAO,CAAC,EAAE;YACpBA,OAAO,CAACrkD,MAAM,CAACvc,GAAG,EAAE,CAAC,CAAC;UACxB,CAAC,MAAM;YACL,OAAO4gE,OAAO,CAAC5gE,GAAG,CAAC;UACrB;UAEA,OAAO4gE,OAAO;QAChB;QAEAA,OAAO,CAAC5gE,GAAG,CAAC,GAAG2gE,kBAAkB,CAAC93D,GAAG,CAAC7I,GAAG,CAAC,EAAEtJ,IAAI,EAAE4H,KAAK,GAAG,CAAC,CAAC;QAC5D,OAAOsiE,OAAO;MAChB,CAAC;MAED,IAAIC,cAAc,GAAG,SAAAA,CAAUh4D,GAAG,EAAEnS,IAAI,EAAE;QACxC,OAAOiqE,kBAAkB,CAAC93D,GAAG,EAAEnS,IAAI,EAAE,CAAC,CAAC;MACzC,CAAC;MAED,IAAIoqE,kBAAkB,GAAG,SAAAA,CAAUj4D,GAAG,EAAEk4D,OAAO,EAAEC,OAAO,EAAE1iE,KAAK,EAAE;QAC/D,IAAI2iE,MAAM,GAAGF,OAAO,CAACziE,KAAK,CAAC;QAC3B,IAAIsiE,OAAO,GAAGp4E,OAAO,CAACqgB,GAAG,CAAC,GAAGA,GAAG,CAACpiB,KAAK,CAAC,CAAC,GAAGiE,MAAM,CAAC,CAAC,CAAC,EAAEme,GAAG,CAAC;QAE1D,IAAIvK,KAAK,GAAG,CAAC,KAAKyiE,OAAO,CAACr9E,MAAM,EAAE;UAChC,IAAIw9E,MAAM,GAAGF,OAAO,CAAC1iE,KAAK,CAAC;UAE3BsiE,OAAO,CAACM,MAAM,CAAC,GAAGN,OAAO,CAACK,MAAM,CAAC;UAEjC,IAAIz4E,OAAO,CAACo4E,OAAO,CAAC,EAAE;YACpBA,OAAO,CAACrkD,MAAM,CAAC0kD,MAAM,EAAE,CAAC,CAAC;UAC3B,CAAC,MAAM;YACL,OAAOL,OAAO,CAACK,MAAM,CAAC;UACxB;QACF,CAAC,MAAM;UAELL,OAAO,CAACK,MAAM,CAAC,GAAGH,kBAAkB,CAElCj4D,GAAG,CAACo4D,MAAM,CAAC,EACXF,OAAO,EACPC,OAAO,EACP1iE,KAAK,GAAG,CACV,CAAC;QACH;QAEA,OAAOsiE,OAAO;MAChB,CAAC;MAED,IAAIO,cAAc,GAAG,SAAAA,CAAUt4D,GAAG,EAAEk4D,OAAO,EAAEC,OAAO,EAAE;QACpD,IAAID,OAAO,CAACr9E,MAAM,KAAKs9E,OAAO,CAACt9E,MAAM,EAAE;UACrCJ,IAAI,CAAC,mDAAmD,CAAC;UAEzD;QACF,CAAC,MAAM;UACL,KAAK,IAAI0G,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGg3E,OAAO,CAACt9E,MAAM,GAAG,CAAC,EAAEsG,CAAC,EAAE,EAAE;YAC3C,IAAI+2E,OAAO,CAAC/2E,CAAC,CAAC,KAAKg3E,OAAO,CAACh3E,CAAC,CAAC,EAAE;cAC7B1G,IAAI,CACF,0EACF,CAAC;cAED;YACF;UACF;QACF;QAEA,OAAOw9E,kBAAkB,CAACj4D,GAAG,EAAEk4D,OAAO,EAAEC,OAAO,EAAE,CAAC,CAAC;MACrD,CAAC;MAED,IAAII,eAAe,GAAG,SAAAA,CAAUv4D,GAAG,EAAEnS,IAAI,EAAE4H,KAAK,EAAE4B,KAAK,EAAE;QACvD,IAAI5B,KAAK,IAAI5H,IAAI,CAAChT,MAAM,EAAE;UACxB,OAAOwc,KAAK;QACd;QAEA,IAAIF,GAAG,GAAGtJ,IAAI,CAAC4H,KAAK,CAAC;QACrB,IAAIsiE,OAAO,GAAGp4E,OAAO,CAACqgB,GAAG,CAAC,GAAGA,GAAG,CAACpiB,KAAK,CAAC,CAAC,GAAGiE,MAAM,CAAC,CAAC,CAAC,EAAEme,GAAG,CAAC;QAE1D+3D,OAAO,CAAC5gE,GAAG,CAAC,GAAGohE,eAAe,CAACv4D,GAAG,CAAC7I,GAAG,CAAC,EAAEtJ,IAAI,EAAE4H,KAAK,GAAG,CAAC,EAAE4B,KAAK,CAAC;QAChE,OAAO0gE,OAAO;MAChB,CAAC;MAED,IAAIS,WAAW,GAAG,SAAAA,CAAUx4D,GAAG,EAAEnS,IAAI,EAAEwJ,KAAK,EAAE;QAC5C,OAAOkhE,eAAe,CAACv4D,GAAG,EAAEnS,IAAI,EAAE,CAAC,EAAEwJ,KAAK,CAAC;MAC7C,CAAC;MAED,IAAIohE,QAAQ,GAAG,SAAAA,CAAUz9D,KAAK,EAAEimC,EAAE,EAAE;QAGlC,IAAInL,WAAW,GAAG96B,KAAK,CAACsf,aAAa;QAErC,OAAOwb,WAAW,KAAK,IAAI,IAAImL,EAAE,GAAG,CAAC,EAAE;UACrCnL,WAAW,GAAGA,WAAW,CAAC7sC,IAAI;UAC9Bg4C,EAAE,EAAE;QACN;QAEA,OAAOnL,WAAW;MACpB,CAAC;MAEDuhC,iBAAiB,GAAG,SAAAA,CAAUr8D,KAAK,EAAEimC,EAAE,EAAEpzC,IAAI,EAAEwJ,KAAK,EAAE;QACpD,IAAIyO,IAAI,GAAG2yD,QAAQ,CAACz9D,KAAK,EAAEimC,EAAE,CAAC;QAE9B,IAAIn7B,IAAI,KAAK,IAAI,EAAE;UACjB,IAAIwe,QAAQ,GAAGk0C,WAAW,CAAC1yD,IAAI,CAACwU,aAAa,EAAEzsB,IAAI,EAAEwJ,KAAK,CAAC;UAC3DyO,IAAI,CAACwU,aAAa,GAAGgK,QAAQ;UAC7Bxe,IAAI,CAACqc,SAAS,GAAGmC,QAAQ;UAMzBtpB,KAAK,CAAC+e,aAAa,GAAGl4B,MAAM,CAAC,CAAC,CAAC,EAAEmZ,KAAK,CAAC+e,aAAa,CAAC;UACrD,IAAI1T,IAAI,GAAG+W,8BAA8B,CAACpiB,KAAK,EAAEwN,QAAQ,CAAC;UAE1D,IAAInC,IAAI,KAAK,IAAI,EAAE;YACjBs2B,qBAAqB,CAACt2B,IAAI,EAAErL,KAAK,EAAEwN,QAAQ,CAAC;UAC9C;QACF;MACF,CAAC;MAED8uD,2BAA2B,GAAG,SAAAA,CAAUt8D,KAAK,EAAEimC,EAAE,EAAEpzC,IAAI,EAAE;QACvD,IAAIiY,IAAI,GAAG2yD,QAAQ,CAACz9D,KAAK,EAAEimC,EAAE,CAAC;QAE9B,IAAIn7B,IAAI,KAAK,IAAI,EAAE;UACjB,IAAIwe,QAAQ,GAAG0zC,cAAc,CAAClyD,IAAI,CAACwU,aAAa,EAAEzsB,IAAI,CAAC;UACvDiY,IAAI,CAACwU,aAAa,GAAGgK,QAAQ;UAC7Bxe,IAAI,CAACqc,SAAS,GAAGmC,QAAQ;UAMzBtpB,KAAK,CAAC+e,aAAa,GAAGl4B,MAAM,CAAC,CAAC,CAAC,EAAEmZ,KAAK,CAAC+e,aAAa,CAAC;UACrD,IAAI1T,IAAI,GAAG+W,8BAA8B,CAACpiB,KAAK,EAAEwN,QAAQ,CAAC;UAE1D,IAAInC,IAAI,KAAK,IAAI,EAAE;YACjBs2B,qBAAqB,CAACt2B,IAAI,EAAErL,KAAK,EAAEwN,QAAQ,CAAC;UAC9C;QACF;MACF,CAAC;MAED+uD,2BAA2B,GAAG,SAAAA,CAAUv8D,KAAK,EAAEimC,EAAE,EAAEi3B,OAAO,EAAEC,OAAO,EAAE;QACnE,IAAIryD,IAAI,GAAG2yD,QAAQ,CAACz9D,KAAK,EAAEimC,EAAE,CAAC;QAE9B,IAAIn7B,IAAI,KAAK,IAAI,EAAE;UACjB,IAAIwe,QAAQ,GAAGg0C,cAAc,CAACxyD,IAAI,CAACwU,aAAa,EAAE49C,OAAO,EAAEC,OAAO,CAAC;UACnEryD,IAAI,CAACwU,aAAa,GAAGgK,QAAQ;UAC7Bxe,IAAI,CAACqc,SAAS,GAAGmC,QAAQ;UAMzBtpB,KAAK,CAAC+e,aAAa,GAAGl4B,MAAM,CAAC,CAAC,CAAC,EAAEmZ,KAAK,CAAC+e,aAAa,CAAC;UACrD,IAAI1T,IAAI,GAAG+W,8BAA8B,CAACpiB,KAAK,EAAEwN,QAAQ,CAAC;UAE1D,IAAInC,IAAI,KAAK,IAAI,EAAE;YACjBs2B,qBAAqB,CAACt2B,IAAI,EAAErL,KAAK,EAAEwN,QAAQ,CAAC;UAC9C;QACF;MACF,CAAC;MAEDgvD,aAAa,GAAG,SAAAA,CAAUx8D,KAAK,EAAEnN,IAAI,EAAEwJ,KAAK,EAAE;QAC5C2D,KAAK,CAACmzB,YAAY,GAAGqqC,WAAW,CAACx9D,KAAK,CAAC+e,aAAa,EAAElsB,IAAI,EAAEwJ,KAAK,CAAC;QAElE,IAAI2D,KAAK,CAACxN,SAAS,EAAE;UACnBwN,KAAK,CAACxN,SAAS,CAAC2gC,YAAY,GAAGnzB,KAAK,CAACmzB,YAAY;QACnD;QAEA,IAAI9nB,IAAI,GAAG+W,8BAA8B,CAACpiB,KAAK,EAAEwN,QAAQ,CAAC;QAE1D,IAAInC,IAAI,KAAK,IAAI,EAAE;UACjBs2B,qBAAqB,CAACt2B,IAAI,EAAErL,KAAK,EAAEwN,QAAQ,CAAC;QAC9C;MACF,CAAC;MAEDivD,uBAAuB,GAAG,SAAAA,CAAUz8D,KAAK,EAAEnN,IAAI,EAAE;QAC/CmN,KAAK,CAACmzB,YAAY,GAAG6pC,cAAc,CAACh9D,KAAK,CAAC+e,aAAa,EAAElsB,IAAI,CAAC;QAE9D,IAAImN,KAAK,CAACxN,SAAS,EAAE;UACnBwN,KAAK,CAACxN,SAAS,CAAC2gC,YAAY,GAAGnzB,KAAK,CAACmzB,YAAY;QACnD;QAEA,IAAI9nB,IAAI,GAAG+W,8BAA8B,CAACpiB,KAAK,EAAEwN,QAAQ,CAAC;QAE1D,IAAInC,IAAI,KAAK,IAAI,EAAE;UACjBs2B,qBAAqB,CAACt2B,IAAI,EAAErL,KAAK,EAAEwN,QAAQ,CAAC;QAC9C;MACF,CAAC;MAEDkvD,uBAAuB,GAAG,SAAAA,CAAU18D,KAAK,EAAEk9D,OAAO,EAAEC,OAAO,EAAE;QAC3Dn9D,KAAK,CAACmzB,YAAY,GAAGmqC,cAAc,CACjCt9D,KAAK,CAAC+e,aAAa,EACnBm+C,OAAO,EACPC,OACF,CAAC;QAED,IAAIn9D,KAAK,CAACxN,SAAS,EAAE;UACnBwN,KAAK,CAACxN,SAAS,CAAC2gC,YAAY,GAAGnzB,KAAK,CAACmzB,YAAY;QACnD;QAEA,IAAI9nB,IAAI,GAAG+W,8BAA8B,CAACpiB,KAAK,EAAEwN,QAAQ,CAAC;QAE1D,IAAInC,IAAI,KAAK,IAAI,EAAE;UACjBs2B,qBAAqB,CAACt2B,IAAI,EAAErL,KAAK,EAAEwN,QAAQ,CAAC;QAC9C;MACF,CAAC;MAEDmvD,cAAc,GAAG,SAAAA,CAAU38D,KAAK,EAAE;QAChC,IAAIqL,IAAI,GAAG+W,8BAA8B,CAACpiB,KAAK,EAAEwN,QAAQ,CAAC;QAE1D,IAAInC,IAAI,KAAK,IAAI,EAAE;UACjBs2B,qBAAqB,CAACt2B,IAAI,EAAErL,KAAK,EAAEwN,QAAQ,CAAC;QAC9C;MACF,CAAC;MAEDovD,eAAe,GAAG,SAAAA,CAAUc,kBAAkB,EAAE;QAC9CvB,eAAe,GAAGuB,kBAAkB;MACtC,CAAC;MAEDb,kBAAkB,GAAG,SAAAA,CAAUc,oBAAoB,EAAE;QACnDvB,iBAAiB,GAAGuB,oBAAoB;MAC1C,CAAC;IACH;IAEA,SAASC,uBAAuBA,CAAC59D,KAAK,EAAE;MACtC,IAAI4zD,SAAS,GAAGjwD,oBAAoB,CAAC3D,KAAK,CAAC;MAE3C,IAAI4zD,SAAS,KAAK,IAAI,EAAE;QACtB,OAAO,IAAI;MACb;MAEA,OAAOA,SAAS,CAAC7gE,SAAS;IAC5B;IAEA,SAAS8qE,4BAA4BA,CAAC/zE,QAAQ,EAAE;MAC9C,OAAO,IAAI;IACb;IAEA,SAASg0E,0BAA0BA,CAAA,EAAG;MACpC,OAAO9vE,OAAO;IAChB;IAEA,SAAS+vE,kBAAkBA,CAACC,cAAc,EAAE;MAC1C,IAAIC,uBAAuB,GAAGD,cAAc,CAACC,uBAAuB;MACpE,IAAI3jC,sBAAsB,GAAG/6C,oBAAoB,CAAC+6C,sBAAsB;MACxE,OAAO1vB,eAAe,CAAC;QACrBszD,UAAU,EAAEF,cAAc,CAACE,UAAU;QACrCC,OAAO,EAAEH,cAAc,CAACG,OAAO;QAC/BC,mBAAmB,EAAEJ,cAAc,CAACI,mBAAmB;QACvDC,cAAc,EAAEL,cAAc,CAACK,cAAc;QAC7ChC,iBAAiB,EAAEA,iBAAiB;QACpCC,2BAA2B,EAAEA,2BAA2B;QACxDC,2BAA2B,EAAEA,2BAA2B;QACxDC,aAAa,EAAEA,aAAa;QAC5BC,uBAAuB,EAAEA,uBAAuB;QAChDC,uBAAuB,EAAEA,uBAAuB;QAChDE,eAAe,EAAEA,eAAe;QAChCC,kBAAkB,EAAEA,kBAAkB;QACtCF,cAAc,EAAEA,cAAc;QAC9B2B,oBAAoB,EAAEhkC,sBAAsB;QAC5CsjC,uBAAuB,EAAEA,uBAAuB;QAChDK,uBAAuB,EACrBA,uBAAuB,IAAIJ,4BAA4B;QAEzDpF,2BAA2B,EAAEA,2BAA2B;QACxDT,eAAe,EAAEA,eAAe;QAChCI,YAAY,EAAEA,YAAY;QAC1Bb,iBAAiB,EAAEA,iBAAiB;QAEpC/rC,eAAe,EAAEsyC,0BAA0B;QAG3CS,iBAAiB,EAAEhD;MACrB,CAAC,CAAC;IACJ;IAEA,IAAIj5D,iBAAiB,GAAG/iB,oBAAoB,CAAC+iB,iBAAiB;IAC9D,SAASk8D,2BAA2BA,CAACC,iBAAiB,EAAE;MACtD;QACE,IAAI17D,KAAK,GAAGT,iBAAiB,CAACtU,OAAO;QAErC,IAAI+U,KAAK,KAAK,IAAI,IAAIA,KAAK,CAAChQ,SAAS,KAAK,IAAI,EAAE;UAC9C,IAAI,CAACgQ,KAAK,CAAChQ,SAAS,CAACkQ,wBAAwB,EAAE;YAC7C/iB,KAAK,CACH,sDAAsD,GACpD,mEAAmE,GACnE,oEAAoE,GACpE,iEAAiE,GACjE,6BAA6B,EAC/B+e,wBAAwB,CAAC8D,KAAK,CAAChd,IAAI,CAAC,IAAI,aAC1C,CAAC;UACH;UAEAgd,KAAK,CAAChQ,SAAS,CAACkQ,wBAAwB,GAAG,IAAI;QACjD;MACF;MAEA,IAAIw7D,iBAAiB,IAAI,IAAI,EAAE;QAC7B,OAAO,IAAI;MACb;MAEA,IACEA,iBAAiB,CAACvlE,SAAS,IAC3BulE,iBAAiB,CAACvlE,SAAS,CAACE,cAAc,EAC1C;QAEA,OAAOqlE,iBAAiB,CAACvlE,SAAS,CAACE,cAAc;MACnD;MAEA,IAAIqlE,iBAAiB,CAACxlE,UAAU,EAAE;QAGhC,OAAOwlE,iBAAiB;MAC1B;MAEA,IAAIC,YAAY;MAEhB;QACEA,YAAY,GAAG7C,2BAA2B,CACxC4C,iBAAiB,EACjB,6BACF,CAAC;MACH;MAIA,OAAOC,YAAY;IACrB;IACA,SAASC,cAAcA,CAACF,iBAAiB,EAAE;MACzC;QACE,IAAI17D,KAAK,GAAGT,iBAAiB,CAACtU,OAAO;QAErC,IAAI+U,KAAK,KAAK,IAAI,IAAIA,KAAK,CAAChQ,SAAS,KAAK,IAAI,EAAE;UAC9C,IAAI,CAACgQ,KAAK,CAAChQ,SAAS,CAACkQ,wBAAwB,EAAE;YAC7C/iB,KAAK,CACH,sDAAsD,GACpD,mEAAmE,GACnE,oEAAoE,GACpE,iEAAiE,GACjE,6BAA6B,EAC/B+e,wBAAwB,CAAC8D,KAAK,CAAChd,IAAI,CAAC,IAAI,aAC1C,CAAC;UACH;UAEAgd,KAAK,CAAChQ,SAAS,CAACkQ,wBAAwB,GAAG,IAAI;QACjD;MACF;MAEA,IAAIw7D,iBAAiB,IAAI,IAAI,EAAE;QAC7B,OAAO,IAAI;MACb;MAEA,IAAI,OAAOA,iBAAiB,KAAK,QAAQ,EAAE;QAEzC,OAAOA,iBAAiB;MAC1B;MAEA,IAAIA,iBAAiB,CAACxlE,UAAU,EAAE;QAChC,OAAOwlE,iBAAiB,CAACxlE,UAAU;MACrC;MAEA,IACEwlE,iBAAiB,CAACvlE,SAAS,IAAI,IAAI,IACnCulE,iBAAiB,CAACvlE,SAAS,CAACC,SAAS,IAAI,IAAI,EAC7C;QACA,OAAOslE,iBAAiB,CAACvlE,SAAS,CAACC,SAAS;MAC9C;MAEA,IAAIA,SAAS,GACX9Z,2BAA2B,CAACu/E,8BAA8B,CACxDH,iBACF,CAAC;MAEH,IAAItlE,SAAS,EAAE;QACb,OAAOA,SAAS;MAClB;MAEA,IAAIulE,YAAY;MAEhB;QACEA,YAAY,GAAG7C,2BAA2B,CACxC4C,iBAAiB,EACjB,gBACF,CAAC;MACH;MAEA,IAAIC,YAAY,IAAI,IAAI,EAAE;QAExB,OAAOA,YAAY;MACrB;MAEA,IAAIA,YAAY,CAACzlE,UAAU,IAAI,IAAI,EAAE;QAEnC,OAAOylE,YAAY,CAACzlE,UAAU;MAChC;MAEA,OAAO5Z,2BAA2B,CAACu/E,8BAA8B,CAC/DF,YACF,CAAC;IACH;IACA,SAASG,eAAeA,CAACC,MAAM,EAAEC,OAAO,EAAEj/E,IAAI,EAAE;MAC9C,IAAIqZ,SAAS,GACX2lE,MAAM,CAAC7lE,UAAU,IAAI,IAAI,GACrB6lE,MAAM,CAAC7lE,UAAU,GACjB5Z,2BAA2B,CAACu/E,8BAA8B,CAACE,MAAM,CAAC;MAExE,IAAI3lE,SAAS,IAAI,IAAI,EAAE;QACrB;UACEjZ,KAAK,CACH,qDAAqD,GACnD,yFACJ,CAAC;QACH;QAEA;MACF;MAEA,IAAIsiB,IAAI,GAAGnjB,2BAA2B,CAAC2/E,yBAAyB,CAACF,MAAM,CAAC;MAExE,IAAIt8D,IAAI,IAAI,IAAI,EAAE;QAChBy8D,qBAAqB,CAACJ,eAAe,CAACr8D,IAAI,EAAEu8D,OAAO,EAAEj/E,IAAI,CAAC;MAC5D,CAAC,MAAM;QACLT,2BAA2B,CAACyc,SAAS,CAACojE,0BAA0B,CAC9D/lE,SAAS,EACT4lE,OAAO,EACPj/E,IACF,CAAC;MACH;IACF;IACA,SAASq/E,sBAAsBA,CAACL,MAAM,EAAEM,SAAS,EAAE;MACjD,IAAIjmE,SAAS,GACX2lE,MAAM,CAAC7lE,UAAU,IAAI,IAAI,GACrB6lE,MAAM,CAAC7lE,UAAU,GACjB5Z,2BAA2B,CAACu/E,8BAA8B,CAACE,MAAM,CAAC;MAExE,IAAI3lE,SAAS,IAAI,IAAI,EAAE;QACrB;UACEjZ,KAAK,CACH,4DAA4D,GAC1D,yFACJ,CAAC;QACH;QAEA;MACF;MAEA,IAAIsiB,IAAI,GAAGnjB,2BAA2B,CAAC2/E,yBAAyB,CAACF,MAAM,CAAC;MAExE,IAAIt8D,IAAI,IAAI,IAAI,EAAE;QAChBy8D,qBAAqB,CAACE,sBAAsB,CAAC38D,IAAI,EAAE48D,SAAS,CAAC;MAC/D,CAAC,MAAM;QACL//E,2BAA2B,CAACggF,4BAA4B,CACtDlmE,SAAS,EACTimE,SACF,CAAC;MACH;IACF;IACA,SAASE,iCAAiCA,CAACpoD,sBAAsB,EAAE;MACjE,OAEEA,sBAAsB,IACtBA,sBAAsB,CAACnkB,SAAS,IAChCmkB,sBAAsB,CAACnkB,SAAS,CAACyP,IAAI;IAEzC;IAIA,SAAS+8D,qBAAqBA,CAACzoD,cAAc,EAAE0oD,aAAa,EAAE;MAC5D;QAEE,IAGE1oD,cAAc,CAAC/P,+BAA+B,IAE9Cy4D,aAAa,CAACz4D,+BAA+B,EAC7C;UACA,OAAO/C,gBAAgB,CAErB8S,cAAc,CAAC/P,+BAA+B,EAC9Cy4D,aAAa,CAACz4D,+BAChB,CAAC;QACH;QAEA,IAAI04D,4BAA4B,GAC9BpgF,2BAA2B,CAACqgF,2CAA2C,CACrE5oD,cACF,CAAC;QACH,IAAI6oD,2BAA2B,GAC7BtgF,2BAA2B,CAACqgF,2CAA2C,CACrEF,aACF,CAAC;QAEH,IACEC,4BAA4B,IAAI,IAAI,IACpCE,2BAA2B,IAAI,IAAI,EACnC;UACA,OAAO37D,gBAAgB,CACrBy7D,4BAA4B,EAC5BE,2BACF,CAAC;QACH;QAEA,OAAO,KAAK;MACd;IACF;IAEA,IAAIC,WAAW,GAAG,CAAC,CAAC;IAEpB;MACEx9E,MAAM,CAACm6B,MAAM,CAACqjD,WAAW,CAAC;IAC5B;IAEA,SAASC,eAAeA,CAACC,cAAc,EAAE;MACvC,OAAOA,cAAc,CAACn/E,GAAG,CAAC,UAAUqf,KAAK,EAAE;QACzC,OAAO;UACLre,IAAI,EAAEsd,wBAAwB,CAACe,KAAK,CAACja,IAAI,CAAC;UAC1Cg6E,gBAAgB,EAAE,SAAAA,CAAUpB,cAAc,EAAE;YAC1C,OAAO;cACL3rE,KAAK,EAAEgtE,YAAY,CAAChgE,KAAK,CAAC;cAC1BsH,OAAO,EAAE,SAAAA,CAAU9Z,QAAQ,EAAE;gBAE3B,IAAIomE,SAAS,GAAGjwD,oBAAoB,CAAC3D,KAAK,CAAC;gBAC3C,IAAIwC,IAAI,GACNoxD,SAAS,IAAI,IAAI,IACjBA,SAAS,CAAC7gE,SAAS,KAAK,IAAI,IAC5B6gE,SAAS,CAAC7gE,SAAS,CAACyP,IAAI;gBAE1B,IAAIA,IAAI,EAAE;kBACRy8D,qBAAqB,CAAC33D,OAAO,CAAC9E,IAAI,EAAEhV,QAAQ,CAAC;gBAC/C,CAAC,MAAM;kBACL,OAAOnO,2BAA2B,CAACyc,SAAS,CAACwL,OAAO,CAClD24D,WAAW,CAACjgE,KAAK,EAAE2+D,cAAc,CAAC,EAClCnxE,QACF,CAAC;gBACH;cACF;YACF,CAAC;UACH;QACF,CAAC;MACH,CAAC,CAAC;IACJ;IAEA,SAASyyE,WAAWA,CAACjgE,KAAK,EAAE2+D,cAAc,EAAE;MAC1C;QACE,IAAIuB,QAAQ;QAGZ,OAAOlgE,KAAK,EAAE;UACZ,IAAIA,KAAK,CAACjN,SAAS,KAAK,IAAI,IAAIiN,KAAK,CAACjO,GAAG,KAAKnD,aAAa,EAAE;YAC3DsxE,QAAQ,GAAGvB,cAAc,CAAC3+D,KAAK,CAACjN,SAAS,CAAC;UAC5C;UAEA,IAAImtE,QAAQ,EAAE;YACZ,OAAOA,QAAQ;UACjB;UAEAlgE,KAAK,GAAGA,KAAK,CAACuD,KAAK;QACrB;QAEA,OAAO,IAAI;MACb;IACF;IAEA,SAASy8D,YAAYA,CAAChgE,KAAK,EAAE;MAC3B,IAAImgE,IAAI,GAAGx8D,oBAAoB,CAAC3D,KAAK,CAAC;MAEtC,IAAImgE,IAAI,EAAE;QACR,OAAOA,IAAI,CAACphD,aAAa,IAAI6gD,WAAW;MAC1C;MAEA,OAAOA,WAAW;IACpB;IAEA,SAASQ,2BAA2BA,CAACC,eAAe,EAAE;MACpD;QAEE,IAAI,CAACA,eAAe,EAAE;UACpB,OAAO;YACLC,SAAS,EAAE,EAAE;YACbttE,KAAK,EAAE4sE,WAAW;YAClBW,aAAa,EAAE,IAAI;YACnBnyB,cAAc,EAAE;UAClB,CAAC;QACH;QAEA,IAAIpuC,KAAK,GAAGmD,6BAA6B,CAACk9D,eAAe,CAAC;QAC1D,IAAIP,cAAc,GAAGU,iBAAiB,CAACxgE,KAAK,CAAC;QAC7C,IAAIlW,QAAQ,GAAG22E,mBAAmB,CAACX,cAAc,CAAC;QAClD,IAAIQ,SAAS,GAAGT,eAAe,CAACC,cAAc,CAAC;QAC/C,IAAI9sE,KAAK,GAAGgtE,YAAY,CAACl2E,QAAQ,CAAC;QAClC,IAAIy2E,aAAa,GAAGT,cAAc,CAAC1pE,OAAO,CAACtM,QAAQ,CAAC;QACpD,IAAIskD,cAAc,GAChBpuC,KAAK,KAAK,IAAI,GAAGirB,2BAA2B,CAACjrB,KAAK,CAAC,GAAG,EAAE;QAC1D,OAAO;UACLqgE,eAAe,EAAEv2E,QAAQ;UACzBw2E,SAAS,EAAEA,SAAS;UACpBttE,KAAK,EAAEA,KAAK;UACZutE,aAAa,EAAEA,aAAa;UAC5BnyB,cAAc,EAAEA;QAClB,CAAC;MACH;IACF;IAEA,SAASoyB,iBAAiBA,CAAC12E,QAAQ,EAAE;MACnC,IAAIw2E,SAAS,GAAG,EAAE;MAClBI,mBAAmB,CAACJ,SAAS,EAAEx2E,QAAQ,CAAC;MACxC,OAAOw2E,SAAS;IAClB;IAEA,SAASG,mBAAmBA,CAACH,SAAS,EAAE;MACtC,KAAK,IAAIn6E,CAAC,GAAGm6E,SAAS,CAACzgF,MAAM,GAAG,CAAC,EAAEsG,CAAC,GAAG,CAAC,EAAEA,CAAC,EAAE,EAAE;QAC7C,IAAI2D,QAAQ,GAAGw2E,SAAS,CAACn6E,CAAC,CAAC;QAE3B,IAAI2D,QAAQ,CAACiI,GAAG,KAAKnD,aAAa,EAAE;UAClC,OAAO9E,QAAQ;QACjB;MACF;MAEA,OAAOw2E,SAAS,CAAC,CAAC,CAAC;IACrB;IAEA,SAASI,mBAAmBA,CAACJ,SAAS,EAAEx2E,QAAQ,EAAE;MAChD;QACE,IAAIA,QAAQ,EAAE;UACZw2E,SAAS,CAACx/E,OAAO,CAACgJ,QAAQ,CAAC;UAC3B42E,mBAAmB,CAACJ,SAAS,EAAEx2E,QAAQ,CAACkhC,WAAW,CAAC;QACtD;MACF;IACF;IAEA,SAAS21C,0BAA0BA,CAACC,OAAO,EAAE;MAC3C;QACE,IAAIP,eAAe,GAAGvnE,kBAAkB,CAAC8nE,OAAO,CAAC;QACjD,OAAOR,2BAA2B,CAACC,eAAe,CAAC;MACrD;IACF;IAEA,SAASQ,8BAA8BA,CACrClC,cAAc,EACdmC,aAAa,EACbC,SAAS,EACTC,SAAS,EACTxzE,QAAQ,EACR;MACA;QACE,IAAI6yE,eAAe,GAAG,IAAI;QAC1B,IAAIY,UAAU,GACZ5hF,2BAA2B,CAAC2/E,yBAAyB,CAAC8B,aAAa,CAAC;QAEtE,IAAIG,UAAU,EAAE;UAEdhC,qBAAqB,CAACiC,eAAe,CACnCD,UAAU,EACVF,SAAS,EACTC,SAAS,EACT,UAAU9pD,sBAAsB,EAAE;YAChC,IAAI1U,IAAI,GACN0U,sBAAsB,IAAI,IAAI,GAC1BooD,iCAAiC,CAACpoD,sBAAsB,CAAC,GACzD,IAAI;YAEV,IAAIA,sBAAsB,IAAI,IAAI,IAAI1U,IAAI,IAAI,IAAI,EAAE;cAClDhV,QAAQ,CACN3G,MAAM,CACJ;gBACEs6E,QAAQ,EAAEH,SAAS;gBACnBI,KAAK,EAAE;kBACLC,IAAI,EAAE,CAAC;kBACPC,GAAG,EAAE,CAAC;kBACNC,KAAK,EAAE,CAAC;kBACRC,MAAM,EAAE;gBACV;cACF,CAAC,EACDpB,2BAA2B,CAACC,eAAe,CAC7C,CACF,CAAC;cACD;YACF;YAEAA,eAAe,GACbnpD,sBAAsB,CAACnkB,SAAS,CAACmG,SAAS,CACvCge,sBAAsB;YAE3B,IAAIuqD,aAAa,GACfvqD,sBAAsB,CAACnkB,SAAS,CAACmG,SAAS,CAACC,SAAS;YACtD8lE,qBAAqB,CAAC33D,OAAO,CAC3B9E,IAAI,EACJ,UAAU5C,CAAC,EAAEsf,CAAC,EAAEqiD,KAAK,EAAEC,MAAM,EAAE11E,KAAK,EAAEE,KAAK,EAAE;cAC3C,IAAI01E,aAAa,GACftB,2BAA2B,CAACC,eAAe,CAAC;cAC9C7yE,QAAQ,CACN3G,MAAM,CAAC,CAAC,CAAC,EAAE66E,aAAa,EAAE;gBACxBP,QAAQ,EAAEH,SAAS;gBACnBI,KAAK,EAAE;kBACLC,IAAI,EAAEv1E,KAAK;kBACXw1E,GAAG,EAAEt1E,KAAK;kBACVu1E,KAAK,EAAEA,KAAK;kBACZC,MAAM,EAAEA;gBACV,CAAC;gBACDG,cAAc,EAAEF;cAClB,CAAC,CACH,CAAC;YACH,CACF,CAAC;UACH,CACF,CAAC;QACH,CAAC,MAAM,IAAIX,aAAa,CAAC/5D,+BAA+B,IAAI,IAAI,EAAE;UAEhE1nB,2BAA2B,CAACyc,SAAS,CAAC8lE,aAAa,CACjDjD,cAAc,CAACmC,aAAa,CAAC,EAC7B,CAACC,SAAS,EAAEC,SAAS,CAAC,EACtB,UAAUS,aAAa,EAAEJ,IAAI,EAAEC,GAAG,EAAEC,KAAK,EAAEC,MAAM,EAAE;YACjD,IAAIE,aAAa,GAAGtB,2BAA2B,CAC7CtnE,kBAAkB,CAAC2oE,aAAa,CAClC,CAAC;YACDj0E,QAAQ,CACN3G,MAAM,CAAC,CAAC,CAAC,EAAE66E,aAAa,EAAE;cACxBP,QAAQ,EAAEH,SAAS;cACnBI,KAAK,EAAE;gBACLC,IAAI,EAAEA,IAAI;gBACVC,GAAG,EAAEA,GAAG;gBACRC,KAAK,EAAEA,KAAK;gBACZC,MAAM,EAAEA;cACV,CAAC;cACDG,cAAc,EAAEF;YAClB,CAAC,CACH,CAAC;UACH,CACF,CAAC;QACH,CAAC,MAAM;UACLvhF,KAAK,CACH,oEACF,CAAC;UAED;QACF;MACF;IACF;IAEA,SAAS80E,kBAAkBA,CAACn5C,OAAO,EAAE;MAGnC37B,KAAK,CAAC27B,OAAO,CAAC;IAChB;IAEA,SAASxc,MAAMA,CAAC8b,OAAO,EAAE0mD,YAAY,EAAEr0E,QAAQ,EAAE;MAC/C,IAAI6d,IAAI,GAAGy2D,KAAK,CAACv4E,GAAG,CAACs4E,YAAY,CAAC;MAElC,IAAI,CAACx2D,IAAI,EAAE;QAGTA,IAAI,GAAG0wD,eAAe,CACpB8F,YAAY,EACZrjD,UAAU,EACV,IAAI,EACJ,KAAK,EACL,IAAI,EACJ,EAAE,EACFw2C,kBAAkB,EAClB,IACF,CAAC;QACD8M,KAAK,CAAC34E,GAAG,CAAC04E,YAAY,EAAEx2D,IAAI,CAAC;MAC/B;MAEAgtD,eAAe,CAACl9C,OAAO,EAAE9P,IAAI,EAAE,IAAI,EAAE7d,QAAQ,CAAC;MAC9C,OAAOyuE,qBAAqB,CAAC5wD,IAAI,CAAC;IACpC;IAEA,SAAS02D,sBAAsBA,CAACF,YAAY,EAAE;MAC5C,IAAIx2D,IAAI,GAAGy2D,KAAK,CAACv4E,GAAG,CAACs4E,YAAY,CAAC;MAElC,IAAIx2D,IAAI,EAAE;QAERgtD,eAAe,CAAC,IAAI,EAAEhtD,IAAI,EAAE,IAAI,EAAE,YAAY;UAC5Cy2D,KAAK,CAACjpE,MAAM,CAACgpE,YAAY,CAAC;QAC5B,CAAC,CAAC;MACJ;IACF;IAEA,SAASG,wCAAwCA,CAACH,YAAY,EAAE;MAC9DE,sBAAsB,CAACF,YAAY,CAAC;MAEpCxiF,2BAA2B,CAACyc,SAAS,CAACmmE,cAAc,CAACJ,YAAY,CAAC;IACpE;IAEA,SAASK,YAAYA,CAAC52D,QAAQ,EAAEu2D,YAAY,EAAE;MAC5C,IAAI1lE,GAAG,GACLvc,SAAS,CAACC,MAAM,GAAG,CAAC,IAAID,SAAS,CAAC,CAAC,CAAC,KAAKqG,SAAS,GAC9CrG,SAAS,CAAC,CAAC,CAAC,GACZ,IAAI;MACV,OAAO47E,cAAc,CAAClwD,QAAQ,EAAEu2D,YAAY,EAAE,IAAI,EAAE1lE,GAAG,CAAC;IAC1D;IAEAxC,yBAAyB,CAAC04D,cAAc,CAAC;IAEzC,SAAS8P,sCAAsCA,CAACC,QAAQ,EAAE;MACxD,IAAIpiE,KAAK,GAAGlH,kBAAkB,CAACspE,QAAQ,CAAC;MAExC,IAAI,CAACpiE,KAAK,EAAE;QACV,OAAO,EAAE;MACX;MAEA,OAAOirB,2BAA2B,CAACjrB,KAAK,CAAC;IAC3C;IAEA,IAAI8hE,KAAK,GAAG,IAAItpE,GAAG,CAAC,CAAC;IACrB,IAAI6pE,SAAS,GAAG;MACdF,sCAAsC,EACpCA;IACJ,CAAC;IACDpE,kBAAkB,CAAC;MACjBE,uBAAuB,EAAEnlE,kBAAkB;MAC3ColE,UAAU,EAAE,CAAC;MACbC,OAAO,EAAE5C,YAAY;MACrB6C,mBAAmB,EAAE,uBAAuB;MAC5CC,cAAc,EAAE;QACd+B,2BAA2B,EAAEA,2BAA2B;QACxDO,0BAA0B,EAAEA,0BAA0B;QACtDE,8BAA8B,EAAEA,8BAA8B,CAACllD,IAAI,CACjE,IAAI,EACJgjD,cACF;MACF;IACF,CAAC,CAAC;IAEF2D,OAAO,CAAC9iF,kDAAkD,GAAG6iF,SAAS;IACtEC,OAAO,CAACJ,YAAY,GAAGA,YAAY;IACnCI,OAAO,CAACzD,eAAe,GAAGA,eAAe;IACzCyD,OAAO,CAAC9D,2BAA2B,GAAGA,2BAA2B;IACjE8D,OAAO,CAAC3D,cAAc,GAAGA,cAAc;IACvC2D,OAAO,CAAClC,2BAA2B,GAAGA,2BAA2B;IACjEkC,OAAO,CAAC/C,qBAAqB,GAAGA,qBAAqB;IACrD+C,OAAO,CAACjjE,MAAM,GAAGA,MAAM;IACvBijE,OAAO,CAACnD,sBAAsB,GAAGA,sBAAsB;IACvDmD,OAAO,CAACP,sBAAsB,GAAGA,sBAAsB;IACvDO,OAAO,CAACN,wCAAwC,GAC9CA,wCAAwC;IAC1CM,OAAO,CAACC,uBAAuB,GAAG7oE,gBAAgB;IAElD,IACE,OAAO1a,8BAA8B,KAAK,WAAW,IACrD,OAAOA,8BAA8B,CAACwjF,0BAA0B,KAC9D,UAAU,EACZ;MACAxjF,8BAA8B,CAACwjF,0BAA0B,CAAC,IAAItjF,KAAK,CAAC,CAAC,CAAC;IACxE;EACF,CAAC,EAAE,CAAC;AACN","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}