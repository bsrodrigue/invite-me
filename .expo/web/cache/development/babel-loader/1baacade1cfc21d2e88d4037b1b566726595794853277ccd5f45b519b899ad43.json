{"ast":null,"code":"export default class EventEmitter {\n  #registry = {};\n  addListener(eventType, listener, context) {\n    if (typeof listener !== 'function') {\n      throw new TypeError('EventEmitter.addListener(...): 2nd argument must be a function.');\n    }\n    const registrations = allocate(this.#registry, eventType);\n    const registration = {\n      context,\n      listener,\n      remove() {\n        registrations.delete(registration);\n      }\n    };\n    registrations.add(registration);\n    return registration;\n  }\n  emit(eventType, ...args) {\n    const registrations = this.#registry[eventType];\n    if (registrations != null) {\n      for (const registration of Array.from(registrations)) {\n        registration.listener.apply(registration.context, args);\n      }\n    }\n  }\n  removeAllListeners(eventType) {\n    if (eventType == null) {\n      this.#registry = {};\n    } else {\n      delete this.#registry[eventType];\n    }\n  }\n  listenerCount(eventType) {\n    const registrations = this.#registry[eventType];\n    return registrations == null ? 0 : registrations.size;\n  }\n}\nfunction allocate(registry, eventType) {\n  let registrations = registry[eventType];\n  if (registrations == null) {\n    registrations = new Set();\n    registry[eventType] = registrations;\n  }\n  return registrations;\n}","map":{"version":3,"names":["EventEmitter","registry","addListener","eventType","listener","context","TypeError","registrations","allocate","registration","remove","delete","add","emit","args","Array","from","apply","removeAllListeners","listenerCount","size","Set"],"sources":["/home/rodo/workspace/passion/apps/muh-money/node_modules/react-native/Libraries/vendor/emitter/EventEmitter.js"],"sourcesContent":["/**\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @flow strict\n * @format\n */\n\nexport interface EventSubscription {\n  remove(): void;\n}\n\nexport interface IEventEmitter<TEventToArgsMap: {...}> {\n  addListener<TEvent: $Keys<TEventToArgsMap>>(\n    eventType: TEvent,\n    listener: (...args: TEventToArgsMap[TEvent]) => mixed,\n    context?: mixed,\n  ): EventSubscription;\n\n  emit<TEvent: $Keys<TEventToArgsMap>>(\n    eventType: TEvent,\n    ...args: TEventToArgsMap[TEvent]\n  ): void;\n\n  removeAllListeners<TEvent: $Keys<TEventToArgsMap>>(eventType?: ?TEvent): void;\n\n  listenerCount<TEvent: $Keys<TEventToArgsMap>>(eventType: TEvent): number;\n}\n\ninterface Registration<TArgs> {\n  +context: mixed;\n  +listener: (...args: TArgs) => mixed;\n  +remove: () => void;\n}\n\n// $FlowFixMe[deprecated-type]\ntype Registry<TEventToArgsMap: {...}> = $ObjMap<\n  TEventToArgsMap,\n  <TArgs>(TArgs) => Set<Registration<TArgs>>,\n>;\n\n/**\n * EventEmitter manages listeners and publishes events to them.\n *\n * EventEmitter accepts a single type parameter that defines the valid events\n * and associated listener argument(s).\n *\n * @example\n *\n *   const emitter = new EventEmitter<{\n *     success: [number, string],\n *     error: [Error],\n *   }>();\n *\n *   emitter.on('success', (statusCode, responseText) => {...});\n *   emitter.emit('success', 200, '...');\n *\n *   emitter.on('error', error => {...});\n *   emitter.emit('error', new Error('Resource not found'));\n *\n */\nexport default class EventEmitter<TEventToArgsMap: {...}>\n  implements IEventEmitter<TEventToArgsMap>\n{\n  #registry: Registry<TEventToArgsMap> = {};\n\n  /**\n   * Registers a listener that is called when the supplied event is emitted.\n   * Returns a subscription that has a `remove` method to undo registration.\n   */\n  addListener<TEvent: $Keys<TEventToArgsMap>>(\n    eventType: TEvent,\n    listener: (...args: TEventToArgsMap[TEvent]) => mixed,\n    context: mixed,\n  ): EventSubscription {\n    if (typeof listener !== 'function') {\n      throw new TypeError(\n        'EventEmitter.addListener(...): 2nd argument must be a function.',\n      );\n    }\n    const registrations = allocate<\n      TEventToArgsMap,\n      TEvent,\n      TEventToArgsMap[TEvent],\n    >(this.#registry, eventType);\n    const registration: Registration<TEventToArgsMap[TEvent]> = {\n      context,\n      listener,\n      remove(): void {\n        registrations.delete(registration);\n      },\n    };\n    registrations.add(registration);\n    return registration;\n  }\n\n  /**\n   * Emits the supplied event. Additional arguments supplied to `emit` will be\n   * passed through to each of the registered listeners.\n   *\n   * If a listener modifies the listeners registered for the same event, those\n   * changes will not be reflected in the current invocation of `emit`.\n   */\n  emit<TEvent: $Keys<TEventToArgsMap>>(\n    eventType: TEvent,\n    ...args: TEventToArgsMap[TEvent]\n  ): void {\n    const registrations: ?Set<Registration<TEventToArgsMap[TEvent]>> =\n      this.#registry[eventType];\n    if (registrations != null) {\n      // Copy `registrations` to take a snapshot when we invoke `emit`, in case\n      // registrations are added or removed when listeners are invoked.\n      for (const registration of Array.from(registrations)) {\n        registration.listener.apply(registration.context, args);\n      }\n    }\n  }\n\n  /**\n   * Removes all registered listeners.\n   */\n  removeAllListeners<TEvent: $Keys<TEventToArgsMap>>(\n    eventType?: ?TEvent,\n  ): void {\n    if (eventType == null) {\n      this.#registry = {};\n    } else {\n      delete this.#registry[eventType];\n    }\n  }\n\n  /**\n   * Returns the number of registered listeners for the supplied event.\n   */\n  listenerCount<TEvent: $Keys<TEventToArgsMap>>(eventType: TEvent): number {\n    const registrations: ?Set<Registration<mixed>> = this.#registry[eventType];\n    return registrations == null ? 0 : registrations.size;\n  }\n}\n\nfunction allocate<\n  TEventToArgsMap: {...},\n  TEvent: $Keys<TEventToArgsMap>,\n  TEventArgs: TEventToArgsMap[TEvent],\n>(\n  registry: Registry<TEventToArgsMap>,\n  eventType: TEvent,\n): Set<Registration<TEventArgs>> {\n  let registrations: ?Set<Registration<TEventArgs>> = registry[eventType];\n  if (registrations == null) {\n    registrations = new Set();\n    registry[eventType] = registrations;\n  }\n  return registrations;\n}\n"],"mappings":"AA+DA,eAAe,MAAMA,YAAY,CAEjC;EACE,CAACC,QAAQ,GAA8B,CAAC,CAAC;EAMzCC,WAAWA,CACTC,SAAiB,EACjBC,QAAqD,EACrDC,OAAc,EACK;IACnB,IAAI,OAAOD,QAAQ,KAAK,UAAU,EAAE;MAClC,MAAM,IAAIE,SAAS,CACjB,iEACF,CAAC;IACH;IACA,MAAMC,aAAa,GAAGC,QAAQ,CAI5B,IAAI,CAAC,CAACP,QAAQ,EAAEE,SAAS,CAAC;IAC5B,MAAMM,YAAmD,GAAG;MAC1DJ,OAAO;MACPD,QAAQ;MACRM,MAAMA,CAAA,EAAS;QACbH,aAAa,CAACI,MAAM,CAACF,YAAY,CAAC;MACpC;IACF,CAAC;IACDF,aAAa,CAACK,GAAG,CAACH,YAAY,CAAC;IAC/B,OAAOA,YAAY;EACrB;EASAI,IAAIA,CACFV,SAAiB,EACjB,GAAGW,IAA6B,EAC1B;IACN,MAAMP,aAA0D,GAC9D,IAAI,CAAC,CAACN,QAAQ,CAACE,SAAS,CAAC;IAC3B,IAAII,aAAa,IAAI,IAAI,EAAE;MAGzB,KAAK,MAAME,YAAY,IAAIM,KAAK,CAACC,IAAI,CAACT,aAAa,CAAC,EAAE;QACpDE,YAAY,CAACL,QAAQ,CAACa,KAAK,CAACR,YAAY,CAACJ,OAAO,EAAES,IAAI,CAAC;MACzD;IACF;EACF;EAKAI,kBAAkBA,CAChBf,SAAmB,EACb;IACN,IAAIA,SAAS,IAAI,IAAI,EAAE;MACrB,IAAI,CAAC,CAACF,QAAQ,GAAG,CAAC,CAAC;IACrB,CAAC,MAAM;MACL,OAAO,IAAI,CAAC,CAACA,QAAQ,CAACE,SAAS,CAAC;IAClC;EACF;EAKAgB,aAAaA,CAAiChB,SAAiB,EAAU;IACvE,MAAMI,aAAwC,GAAG,IAAI,CAAC,CAACN,QAAQ,CAACE,SAAS,CAAC;IAC1E,OAAOI,aAAa,IAAI,IAAI,GAAG,CAAC,GAAGA,aAAa,CAACa,IAAI;EACvD;AACF;AAEA,SAASZ,QAAQA,CAKfP,QAAmC,EACnCE,SAAiB,EACc;EAC/B,IAAII,aAA6C,GAAGN,QAAQ,CAACE,SAAS,CAAC;EACvE,IAAII,aAAa,IAAI,IAAI,EAAE;IACzBA,aAAa,GAAG,IAAIc,GAAG,CAAC,CAAC;IACzBpB,QAAQ,CAACE,SAAS,CAAC,GAAGI,aAAa;EACrC;EACA,OAAOA,aAAa;AACtB","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}