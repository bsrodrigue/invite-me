{"ast":null,"code":"function getContentCSS() {\n  return `\n    <style>\n        video {max-width: 98%;margin-left:auto;margin-right:auto;display: block;}\n        img {max-width: 98%;vertical-align: middle;}\n        table {width: 100% !important;}\n        table td {width: inherit;}\n        table span { font-size: 12px !important; }\n        .x-todo li {list-style:none;}\n        .x-todo-box {position: relative; left: -24px;}\n        .x-todo-box input{position: absolute;}\n        blockquote{border-left: 6px solid #ddd;padding: 5px 0 5px 10px;margin: 15px 0 15px 15px;}\n        hr{display: block;height: 0; border: 0;border-top: 1px solid #ccc; margin: 15px 0; padding: 0;}\n        pre{padding: 10px 5px 10px 10px;margin: 15px 0;display: block;line-height: 18px;background: #F0F0F0;border-radius: 6px;font-size: 13px; font-family: 'monaco', 'Consolas', \"Liberation Mono\", Courier, monospace; word-break: break-all; word-wrap: break-word;overflow-x: auto;}\n        pre code {display: block;font-size: inherit;white-space: pre-wrap;color: inherit;}\n    </style>\n    `;\n}\nfunction createHTML(options = {}) {\n  const {\n    backgroundColor = '#FFF',\n    color = '#000033',\n    caretColor = '',\n    placeholderColor = '#a9a9a9',\n    contentCSSText = '',\n    cssText = '',\n    initialCSSText = '',\n    pasteAsPlainText = false,\n    pasteListener = false,\n    keyDownListener = false,\n    keyUpListener = false,\n    inputListener = false,\n    autoCapitalize = 'off',\n    enterKeyHint = '',\n    initialFocus = false,\n    autoCorrect = false,\n    defaultParagraphSeparator = 'div',\n    firstFocusEnd = true,\n    useContainer = true,\n    styleWithCSS = false\n  } = options;\n  return `\n<!DOCTYPE html>\n<html>\n<head>\n    <title>RN Rich Text Editor</title>\n    <meta name=\"viewport\" content=\"user-scalable=1.0,initial-scale=1.0,minimum-scale=1.0,maximum-scale=1.0\">\n    <style>\n        ${initialCSSText}\n        * {outline: 0px solid transparent;-webkit-tap-highlight-color: rgba(0,0,0,0);-webkit-touch-callout: none;box-sizing: border-box;}\n        html, body { margin: 0; padding: 0;font-family: Arial, Helvetica, sans-serif; font-size:1em; height: 100%}\n        body { overflow-y: hidden; -webkit-overflow-scrolling: touch;background-color: ${backgroundColor};caret-color: ${caretColor};}\n        .content {font-family: Arial, Helvetica, sans-serif;color: ${color}; width: 100%;${!useContainer ? 'height:100%;' : ''}-webkit-overflow-scrolling: touch;padding-left: 0;padding-right: 0;}\n        .pell { height: 100%;} .pell-content { outline: 0; overflow-y: auto;padding: 10px;height: 100%;${contentCSSText}}\n    </style>\n    <style>\n        [placeholder]:empty:before { content: attr(placeholder); color: ${placeholderColor};}\n        [placeholder]:empty:focus:before { content: attr(placeholder);color: ${placeholderColor};display:block;}\n    </style>\n    ${getContentCSS()}\n    <style>${cssText}</style>\n</head>\n<body>\n<div class=\"content\"><div id=\"editor\" class=\"pell\"/></div>\n<script>\n    var __DEV__ = !!${window.__DEV__};\n    var _ = (function (exports) {\n        var anchorNode, focusNode, anchorOffset, focusOffset, _focusCollapse = false, cNode;\n        var _log = console.log;\n        var placeholderColor = '${placeholderColor}';\n        var _randomID = 99;\n        var generateId = function (){\n            return \"auto_\" + (++ _randomID);\n        }\n\n        var body = document.body, docEle = document.documentElement;\n        var defaultParagraphSeparatorString = 'defaultParagraphSeparator';\n        var formatBlock = 'formatBlock';\n        var editor = null, editorFoucs = false, o_height = 0, compositionStatus = 0, paragraphStatus = 0, enterStatus = 0;\n        function addEventListener(parent, type, listener) {\n            return parent.addEventListener(type, listener);\n        };\n        function appendChild(parent, child) {\n            return parent.appendChild(child);\n        };\n        function createElement(tag) {\n            return document.createElement(tag);\n        };\n        function queryCommandState(command) {\n            return document.queryCommandState(command);\n        };\n        function queryCommandValue(command) {\n            return document.queryCommandValue(command);\n        };\n        function query(command){\n            return document.querySelector(command);\n        }\n        function querys(command){\n            return document.querySelectorAll(command);\n        }\n\n        function exec(command) {\n            var value = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;\n            return document.execCommand(command, false, value);\n        };\n\n        function asyncExec(command){\n            var args = Array.prototype.slice.call(arguments);\n            setTimeout(function(){\n                exec.apply(null, args);\n            }, 0);\n        }\n\n        function _postMessage(data){\n            exports.window.postMessage(JSON.stringify(data));\n        }\n        function postAction(data){\n            editor.content.contentEditable === 'true' && _postMessage(data);\n        };\n\n        exports.isRN && (\n            console.log = function (){\n                var data = Array.prototype.slice.call(arguments);\n                __DEV__ && _log.apply(null, data);\n                __DEV__ && postAction({type: 'LOG', data});\n            }\n        )\n\n        function formatParagraph(async){\n            (async ? asyncExec: exec)(formatBlock, '<' + editor.paragraphSeparator + '>' );\n        }\n\n        function getNodeByClass(node, className){\n            return node ? (node.nodeType === Node.ELEMENT_NODE && node.classList.contains(className)? node : getNodeByClass(node.parentNode, className)): node;\n        }\n\n        function getNodeByName(node, name){\n            return node? (node.nodeType === Node.ELEMENT_NODE && node.nodeName === name? node: getNodeByName(node.parentNode, name)): node;\n        }\n\n        function setCollapse(node){\n            var selection = window.getSelection();\n            selection.selectAllChildren(node);\n            selection.collapseToEnd();\n        }\n\n        function checkboxNode(node){\n            return getNodeByClass(node, 'x-todo');\n        }\n\n        function execCheckboxList (node, html){\n            var html = createCheckbox(node ? node.innerHTML: '');\n            var HTML = \"<ol class='x-todo'><li>\"+ html +\"</li></ol>\"\n            var foNode;\n            if (node){\n                node.innerHTML = HTML;\n                foNode = node.firstChild;\n            } else {\n                exec(\"insertHTML\", HTML);\n            }\n\n            foNode && setTimeout(function (){\n                setCollapse(foNode);\n            });\n        }\n\n        var _checkboxFlag = 0; // 1 = add checkbox; 2 = cancel checkbox\n        function cancelCheckboxList(box){\n            _checkboxFlag = 2;\n            exec(\"insertOrderedList\");\n            setCollapse(box);\n        }\n\n        function createCheckbox(end){\n            var html = '<span contenteditable=\"false\" class=\"x-todo-box\"><input type=\"checkbox\"></span>';\n            if (end && typeof end !== 'boolean'){\n                html += end;\n            } else if(end !== false){\n                html += \"<br/>\"\n            }\n            return html;\n        }\n\n        function insertCheckbox (node){\n            var li = getNodeByName(node, 'LI');\n            li.insertBefore(document.createRange().createContextualFragment(createCheckbox(false)), li.firstChild);\n            setCollapse(node);\n        }\n\n        function getCheckbox (node){\n            return getNodeByClass(node, \"x-todo-box\");\n        }\n\n        function saveSelection(){\n            var sel = window.getSelection();\n            currentSelection = sel;\n            anchorNode = sel.anchorNode;\n            anchorOffset = sel.anchorOffset;\n            focusNode = sel.focusNode;\n            focusOffset = sel.focusOffset;\n        }\n\n        function focusCurrent(){\n            editor.content.focus();\n            try {\n                var selection = window.getSelection();\n                if (anchorNode){\n                    if (anchorNode !== selection.anchorNode && !selection.containsNode(anchorNode)){\n                        _focusCollapse = true;\n                        selection.collapse(anchorNode, anchorOffset);\n                    }\n                } else if(${firstFocusEnd} && !_focusCollapse ){\n                    _focusCollapse = true;\n                    selection.selectAllChildren(editor.content);\n                    selection.collapseToEnd();\n                }\n            } catch(e){\n                console.log(e)\n            }\n        }\n\n        var _keyDown = false;\n        function handleChange (event){\n            var node = anchorNode;\n            Actions.UPDATE_HEIGHT();\n            Actions.UPDATE_OFFSET_Y();\n            if (_keyDown){\n                if(_checkboxFlag === 1 && checkboxNode(node)){\n                    _checkboxFlag = 0;\n                    var sib = node.previousSibling;\n                    if (!sib || sib.childNodes.length > 1){\n                        insertCheckbox(node);\n                    }\n                } else if(_checkboxFlag === 2){\n                    _checkboxFlag = 0;\n                    var sp = createElement(editor.paragraphSeparator);\n                    var br = createElement('br');\n                    sp.appendChild(br);\n                    setTimeout(function (){\n                        if (!node.classList.contains(\"x-todo-box\")){\n                            node = node.parentNode.previousSibling;\n                        }\n                        node.parentNode.replaceChild(sp, node);\n                        setCollapse(sp);\n                    });\n                }\n            }\n        }\n\n        function adjustNestedElements() {\n            // adjust ul/ol if we use p separator\n            // since nesting is not valid for p\n            if (editor.paragraphSeparator == 'p') {\n                var selection = window.getSelection();\n\n                let lists = document.querySelectorAll(\"ol, ul\");\n                for (let i = 0; i < lists.length; i++) {\n                    let ele = lists[i];\n                    let parentNode = ele.parentNode;\n                    if (parentNode.tagName === 'P' && parentNode.lastChild === parentNode.firstChild) {\n                        parentNode.insertAdjacentElement('beforebegin', ele);\n                        parentNode.remove()\n                    }\n                }\n\n                selection.collapse(anchorNode, anchorOffset);\n            }\n        }\n\n        var Actions = {\n            bold: { state: function() { return queryCommandState('bold'); }, result: function() { return exec('bold'); }},\n            italic: { state: function() { return queryCommandState('italic'); }, result: function() { return exec('italic'); }},\n            underline: { state: function() { return queryCommandState('underline'); }, result: function() { return exec('underline'); }},\n            strikeThrough: { state: function() { return queryCommandState('strikeThrough'); }, result: function() { return exec('strikeThrough'); }},\n            subscript: { state: function() { return queryCommandState('subscript'); }, result: function() { return exec('subscript'); }},\n            superscript: { state: function() { return queryCommandState('superscript'); }, result: function() { return exec('superscript'); }},\n            heading1: { state: function() { return queryCommandValue(formatBlock) === 'h1'; }, result: function() { return exec(formatBlock, '<h1>'); }},\n            heading2: { state: function() { return queryCommandValue(formatBlock) === 'h2'; }, result: function() { return exec(formatBlock, '<h2>'); }},\n            heading3: { state: function() { return queryCommandValue(formatBlock) === 'h3'; }, result: function() { return exec(formatBlock, '<h3>'); }},\n            heading4: { state: function() { return queryCommandValue(formatBlock) === 'h4'; }, result: function() { return exec(formatBlock, '<h4>'); }},\n            heading5: { state: function() { return queryCommandValue(formatBlock) === 'h5'; }, result: function() { return exec(formatBlock, '<h5>'); }},\n            heading6: { state: function() { return queryCommandValue(formatBlock) === 'h6'; }, result: function() { return exec(formatBlock, '<h6>'); }},\n            paragraph: { state: function() { return queryCommandValue(formatBlock) === 'p'; }, result: function() { return exec(formatBlock, '<p>'); }},\n            quote: { result: function() { return exec(formatBlock, '<blockquote>'); }},\n            removeFormat: { result: function() { return exec('removeFormat'); }},\n            orderedList: {\n                state: function() { return !checkboxNode(window.getSelection().anchorNode) && queryCommandState('insertOrderedList'); },\n                result: function() {\n                    if (!!checkboxNode(window.getSelection().anchorNode)) return;\n\n                    let flag = exec('insertOrderedList');\n                    adjustNestedElements();\n                    return flag;\n                }\n            },\n            unorderedList: {\n                state: function() { return queryCommandState('insertUnorderedList');},\n                result: function() {\n                    if (!!checkboxNode(window.getSelection().anchorNode)) return;\n\n                    let flag =  exec('insertUnorderedList');\n                    adjustNestedElements();\n                    return flag;\n                }\n            },\n            code: { result: function(type) {\n                var flag = exec(formatBlock, '<pre>');\n                var node = anchorNode.nodeName === \"PRE\" ? anchorNode: anchorNode.parentNode;\n                if (node.nodeName === 'PRE'){\n                    type && node.setAttribute(\"type\", type);\n                    node.innerHTML = \"<code type='\"+(type || '') +\"'>\" + node.innerHTML + \"</code>\";\n                    // var br = createElement(\"br\");\n                    // node.parentNode.insertBefore(br, node.nextSibling);\n                    setTimeout(function (){\n                        setCollapse(node.firstChild);\n                    });\n                }\n                return flag;\n             }},\n            line: { result: function() { return exec('insertHorizontalRule'); }},\n            redo: { result: function() { return exec('redo'); }},\n            undo: { result: function() { return exec('undo'); }},\n            indent: { result: function() { return exec('indent'); }},\n            outdent: { result: function() { return exec('outdent'); }},\n            outdent: { result: function() { return exec('outdent'); }},\n            justifyCenter: {  state: function() { return queryCommandState('justifyCenter'); }, result: function() { return exec('justifyCenter'); }},\n            justifyLeft: { state: function() { return queryCommandState('justifyLeft'); }, result: function() { return exec('justifyLeft'); }},\n            justifyRight: { state: function() { return queryCommandState('justifyRight'); }, result: function() { return exec('justifyRight'); }},\n            justifyFull: { state: function() { return queryCommandState('justifyFull'); }, result: function() { return exec('justifyFull'); }},\n            hiliteColor: {  state: function() { return queryCommandValue('backColor'); }, result: function(color) { return exec('backColor', color); }},\n            foreColor: { state: function() { return queryCommandValue('foreColor'); }, result: function(color) { return exec('foreColor', color); }},\n            fontSize: { state: function() { return queryCommandValue('fontSize'); }, result: function(size) { return exec('fontSize', size); }},\n            fontName: { result: function(name) { return exec('fontName', name); }},\n            link: {\n                // result: function(data) {\n                //     data = data || {};\n                //     var title = data.title;\n                //     title = title || window.getSelection().toString();\n                //     // title = title || window.prompt('Enter the link title');\n                //     var url = data.url || window.prompt('Enter the link URL');\n                //     if (url){\n                //         exec('insertHTML', \"<a href='\"+ url +\"'>\"+(title || url)+\"</a>\");\n                //     }\n                // }\n                result: function(data) {\n                    var sel = document.getSelection();\n                    data = data || {};\n                    var url = data.url || window.prompt('Enter the link URL');\n\n                    if (url) {\n                        var el = document.createElement(\"a\");\n                        el.setAttribute(\"href\", url);\n\n                        var title = data.title || sel.toString() || url;\n                        el.text = title;\n\n                        // when adding a link, if our current node is empty, it may have a <br>\n                        // if so, replace it with '' so the added link doesn't end up with an extra space.\n                        // Also, if totally empty, we must format the paragraph to add the link into the container.\n                        var mustFormat = false;\n                        if (sel.anchorNode && sel.anchorNode.innerHTML === '<br>') {\n                            sel.anchorNode.innerHTML = '';\n                        } else if (!sel.anchorNode || sel.anchorNode === editor.content) {\n                            mustFormat = true;\n                        }\n\n                        // insert like this so we can replace current selection, if any\n                        var range = sel.getRangeAt(0);\n                        range.deleteContents();\n                        range.insertNode(el);\n\n                        // restore cursor to end\n                        range.setStartAfter(el);\n                        range.setEndAfter(el);\n                        sel.removeAllRanges();\n                        sel.addRange(range);\n\n                        // format paragraph if needed\n                        if (mustFormat){\n                            formatParagraph();\n                        }\n\n                        // save selection, and fire on change to our webview\n                        saveSelection();\n                        editor.settings.onChange();\n                    }\n                }\n            },\n            image: {\n                result: function(url, style) {\n                    if (url){\n                        exec('insertHTML', \"<img style='\"+ (style || '')+\"' src='\"+ url +\"'/>\");\n                        Actions.UPDATE_HEIGHT();\n                    }\n                }\n            },\n            html: {\n                result: function (html){\n                    if (html){\n                        exec('insertHTML', html);\n                        Actions.UPDATE_HEIGHT();\n                    }\n                }\n            },\n            text: { result: function (text){ text && exec('insertText', text); }},\n            video: {\n                result: function(url, style) {\n                    if (url) {\n                        var thumbnail = url.replace(/.(mp4|m3u8)/g, '') + '-thumbnail';\n                        var html = \"<br><div style='\"+ (style || '')+\"'><video src='\"+ url +\"' poster='\"+ thumbnail + \"' controls><source src='\"+ url +\"' type='video/mp4'>No video tag support</video></div><br>\";\n                        exec('insertHTML', html);\n                        Actions.UPDATE_HEIGHT();\n                    }\n                }\n            },\n            checkboxList: {\n                state: function(){return checkboxNode(window.getSelection().anchorNode)},\n                result: function() {\n                    if (queryCommandState('insertOrderedList')) return;\n                    var pNode;\n                    if (anchorNode){\n                        pNode = anchorNode.parentNode;\n                        if (anchorNode === editor.content) pNode = null;\n                    }\n\n                    if (anchorNode === editor.content || queryCommandValue(formatBlock) === ''){\n                        formatParagraph();\n                    }\n                    var box = checkboxNode(anchorNode);\n                    if (!!box){\n                        cancelCheckboxList(box.parentNode);\n                    } else {\n                        !queryCommandState('insertOrderedList') && execCheckboxList(pNode);\n                    }\n                }\n            },\n            content: {\n                setDisable: function(dis){ this.blur(); editor.content.contentEditable = !dis},\n                setHtml: function(html) { editor.content.innerHTML = html; Actions.UPDATE_HEIGHT(); },\n                getHtml: function() { return editor.content.innerHTML; },\n                blur: function() { editor.content.blur(); },\n                focus: function() { focusCurrent(); },\n                postHtml: function (){ postAction({type: 'CONTENT_HTML_RESPONSE', data: editor.content.innerHTML}); },\n                setPlaceholder: function(placeholder){ editor.content.setAttribute(\"placeholder\", placeholder) },\n\n                setContentStyle: function(styles) {\n                    styles = styles || {};\n                    var bgColor = styles.backgroundColor, color = styles.color, pColor = styles.placeholderColor;\n                    if (bgColor && bgColor !== body.style.backgroundColor) body.style.backgroundColor = bgColor;\n                    if (color && color !== editor.content.style.color) editor.content.style.color = color;\n                    if (pColor && pColor !== placeholderColor){\n                        var rule1=\"[placeholder]:empty:before {content:attr(placeholder);color:\"+pColor+\";}\";\n                        var rule2=\"[placeholder]:empty:focus:before{content:attr(placeholder);color:\"+pColor+\";}\";\n                        try {\n                            document.styleSheets[1].deleteRule(0);document.styleSheets[1].deleteRule(0);\n                            document.styleSheets[1].insertRule(rule1); document.styleSheets[1].insertRule(rule2);\n                            placeholderColor = pColor;\n                        } catch (e){\n                            console.log(\"set placeholderColor error!\")\n                        }\n                    }\n                },\n\n                commandDOM: function (command){\n                    try {new Function(\"$\", command)(exports.document.querySelector.bind(exports.document))} catch(e){console.log(e.message)};\n                },\n                command: function (command){\n                    try {new Function(\"$\", command)(exports.document)} catch(e){console.log(e.message)};\n                }\n            },\n\n            init: function (){\n                if (${useContainer}){\n                    // setInterval(Actions.UPDATE_HEIGHT, 150);\n                    Actions.UPDATE_HEIGHT();\n                } else {\n                    // react-native-webview There is a bug in the body and html height setting of a certain version of 100%\n                    // body.style.height = docEle.clientHeight + 'px';\n                }\n            },\n\n            UPDATE_HEIGHT: function() {\n                if (!${useContainer}) return;\n                // var height = Math.max(docEle.scrollHeight, body.scrollHeight);\n                var height = editor.content.scrollHeight;\n                if (o_height !== height){\n                    _postMessage({type: 'OFFSET_HEIGHT', data: o_height = height});\n                }\n            },\n\n            UPDATE_OFFSET_Y: function (){\n                if (!${useContainer}) return;\n                var node = anchorNode || window.getSelection().anchorNode;\n                var sel = window.getSelection();\n                if (node){\n                    var siblingOffset = (node.nextSibling && node.nextSibling.offsetTop) || (node.previousSibling && node.previousSibling.offsetTop)\n                    var rectOffset = null;\n                    if (sel.rangeCount > 0) {\n                        var range = sel.getRangeAt(0);\n                        var rect = range.getClientRects()[0];\n                        rectOffset = rect ? rect.y : null;\n                    }\n\n                    var offsetY = node.offsetTop || siblingOffset || rectOffset || node.parentNode.offsetTop;\n                    if (offsetY){\n                        _postMessage({type: 'OFFSET_Y', data: offsetY});\n                    }\n                }\n            }\n        };\n\n        var init = function init(settings) {\n\n            var paragraphSeparator = settings[defaultParagraphSeparatorString];\n            var content = settings.element.content = createElement('div');\n            content.id = 'content';\n            content.contentEditable = true;\n            content.spellcheck = false;\n            content.autofocus = ${initialFocus};\n            content.enterKeyHint = '${enterKeyHint}';\n            content.autocapitalize = '${autoCapitalize}';\n            content.autocorrect = ${autoCorrect};\n            content.autocomplete = 'off';\n            content.className = \"pell-content\";\n            content.oninput = function (_ref) {\n                // var firstChild = _ref.target.firstChild;\n                if ((anchorNode === void 0 || anchorNode === content) && queryCommandValue(formatBlock) === ''){\n                    if ( !compositionStatus ){\n                        formatParagraph(true);\n                        paragraphStatus = 0;\n                    } else {\n                        paragraphStatus = 1;\n                    }\n                } else if (content.innerHTML === '<br>'){\n                    content.innerHTML = '';\n                } else if (enterStatus && queryCommandValue(formatBlock) === 'blockquote') {\n                    formatParagraph();\n                }\n\n                saveSelection();\n                handleChange(_ref);\n                settings.onChange();\n                ${inputListener} && postAction({type: \"ON_INPUT\", data: {inputType: _ref.inputType, data: _ref.data}});\n            };\n            appendChild(settings.element, content);\n\n            if (settings.styleWithCSS) exec('styleWithCSS');\n            exec(defaultParagraphSeparatorString, paragraphSeparator);\n\n            var actionsHandler = [];\n            for (var k in Actions){\n                if (typeof Actions[k] === 'object' && Actions[k].state){\n                    actionsHandler[k] = Actions[k]\n                }\n            }\n\n            function handler() {\n                var activeTools = [];\n                for(var k in actionsHandler){\n                    const state =  Actions[k].state() \n                    if ( state ){\n                        activeTools.push(typeof state === \"boolean\" ? k : {type: k, value: Actions[k].state()});\n                    }\n                }\n                postAction({type: 'SELECTION_CHANGE', data: activeTools});\n            };\n\n            var _handleStateDT = null;\n            function handleState(){\n                clearTimeout(_handleStateDT);\n                _handleStateDT = setTimeout(function (){\n                    handler();\n                    saveSelection();\n                }, 50);\n            }\n\n            function handleSelecting(event){\n                event.stopPropagation();\n                handleState();\n            }\n\n            function postKeyAction(event, type){\n                postAction({type: type, data: {keyCode: event.keyCode, key: event.key}});\n            }\n            function handleKeyup(event){\n                enterStatus = 0;\n                _keyDown = false;\n                if (event.keyCode === 8) handleSelecting (event);\n                ${keyUpListener} && postKeyAction(event, \"CONTENT_KEYUP\")\n            }\n            function handleKeydown(event){\n                _keyDown = true;\n                 handleState();\n                if (event.key === 'Enter'){\n                    enterStatus = 1; // set enter true\n                    var box;\n                    var block = queryCommandValue(formatBlock);\n                    if (anchorNode.innerHTML === '<br>' && anchorNode.parentNode !== editor.content){\n                        // setCollapse(editor.content);\n                    } else if (queryCommandState('insertOrderedList') && !!(box = checkboxNode(anchorNode))){\n                        var node = anchorNode && anchorNode.childNodes[1];\n                        if (node && node.nodeName === 'BR'){\n                            cancelCheckboxList(box.parentNode);\n                            event.preventDefault();\n                        } else{\n                            // add checkbox\n                            _checkboxFlag = 1;\n                        }\n                    }\n                    if (block === 'pre' && anchorNode.innerHTML === '<br>'){\n                        // code end enter new line (Unfinished)\n                        if (!anchorNode.nextSibling){\n                            event.preventDefault();\n                            var node = anchorNode.parentNode;\n                            var br = createElement(\"br\");\n                            node.parentNode.insertBefore(br, node.nextSibling);\n                            setTimeout(function (){\n                                setCollapse(br);\n                            });\n                        }\n                    }\n                }\n                ${keyDownListener} && postKeyAction(event, \"CONTENT_KEYDOWN\");\n            }\n            function handleFocus (){\n                editorFoucs = true;\n                setTimeout(function (){\n                    Actions.UPDATE_OFFSET_Y();\n                });\n                postAction({type: 'CONTENT_FOCUSED'});\n            }\n            function handleBlur (){\n                editorFoucs = false;\n                postAction({type: 'SELECTION_CHANGE', data: []});\n                postAction({type: 'CONTENT_BLUR'});\n            }\n            function handleClick(event){\n                var ele = event.target;\n                if (ele.nodeName === 'INPUT' && ele.type === 'checkbox'){\n                    // Set whether the checkbox is selected by default\n                    if (ele.checked) ele.setAttribute('checked', '');\n                    else ele.removeAttribute('checked');\n                }\n                if (ele.nodeName === 'A' && ele.getAttribute('href')) {\n                    postAction({type: 'LINK_TOUCHED', data: ele.getAttribute('href')});\n                }\n            }\n            addEventListener(content, 'touchcancel', handleSelecting);\n            addEventListener(content, 'mouseup', handleSelecting);\n            addEventListener(content, 'touchend', handleSelecting);\n            addEventListener(content, 'keyup', handleKeyup);\n            addEventListener(content, 'click', handleClick);\n            addEventListener(content, 'keydown', handleKeydown);\n            addEventListener(content, 'blur', handleBlur);\n            addEventListener(content, 'focus', handleFocus);\n            addEventListener(content, 'paste', function (e) {\n                // get text representation of clipboard\n                var text = (e.originalEvent || e).clipboardData.getData('text/plain');\n\n                ${pasteListener} && postAction({type: 'CONTENT_PASTED', data: text});\n                if (${pasteAsPlainText}) {\n                    // cancel paste\n                    e.preventDefault();\n                    // insert text manually\n                    exec(\"insertText\", text);\n                }\n            });\n            addEventListener(content, 'compositionstart', function(event){\n                compositionStatus = 1;\n            })\n            addEventListener(content, 'compositionend', function (event){\n                compositionStatus = 0;\n                paragraphStatus && formatParagraph(true);\n            })\n\n            var message = function (event){\n                var msgData = JSON.parse(event.data), action = Actions[msgData.type];\n                if (action ){\n                    if ( action[msgData.name]){\n                        var flag = msgData.name === 'result';\n                        // insert image or link need current focus\n                        flag && focusCurrent();\n                        action[msgData.name](msgData.data, msgData.options);\n                        flag && handleState();\n                    } else {\n                        action(msgData.data, msgData.options);\n                    }\n                }\n            };\n            document.addEventListener(\"message\", message , false);\n            window.addEventListener(\"message\", message , false);\n            document.addEventListener('mouseup', function (event) {\n                event.preventDefault();\n                Actions.content.focus();\n                handleSelecting(event);\n            });\n            return {content, paragraphSeparator: paragraphSeparator, settings};\n        };\n\n        var _handleCTime = null;\n        editor = init({\n            element: document.getElementById('editor'),\n            defaultParagraphSeparator: '${defaultParagraphSeparator}',\n            styleWithCSS: ${styleWithCSS},\n            onChange: function (){\n                clearTimeout(_handleCTime);\n                _handleCTime = setTimeout(function(){\n                    var html = Actions.content.getHtml();\n                    postAction({type: 'CONTENT_CHANGE', data: html});\n                }, 50);\n            }\n        })\n        return {\n            sendEvent: function (type, data){\n                event.preventDefault();\n                event.stopPropagation();\n                var id = event.currentTarget.id;\n                if ( !id ) event.currentTarget.id = id = generateId();\n                _postMessage({type, id, data});\n            }\n        }\n    })({\n        window: window.ReactNativeWebView || window.parent,\n        isRN: !!window.ReactNativeWebView ,\n        document: document\n    });\n</script>\n</body>\n</html>\n`;\n}\nconst HTML = createHTML();\nexport { HTML, createHTML, getContentCSS };","map":{"version":3,"names":["getContentCSS","createHTML","options","backgroundColor","color","caretColor","placeholderColor","contentCSSText","cssText","initialCSSText","pasteAsPlainText","pasteListener","keyDownListener","keyUpListener","inputListener","autoCapitalize","enterKeyHint","initialFocus","autoCorrect","defaultParagraphSeparator","firstFocusEnd","useContainer","styleWithCSS","window","__DEV__","HTML"],"sources":["/home/rodo/workspace/passion/apps/muh-money/node_modules/react-native-pell-rich-editor/src/editor.js"],"sourcesContent":["function getContentCSS() {\n  /*img {max-width: 98%;margin-left:auto;margin-right:auto;display: block;}*/\n  return `\n    <style>\n        video {max-width: 98%;margin-left:auto;margin-right:auto;display: block;}\n        img {max-width: 98%;vertical-align: middle;}\n        table {width: 100% !important;}\n        table td {width: inherit;}\n        table span { font-size: 12px !important; }\n        .x-todo li {list-style:none;}\n        .x-todo-box {position: relative; left: -24px;}\n        .x-todo-box input{position: absolute;}\n        blockquote{border-left: 6px solid #ddd;padding: 5px 0 5px 10px;margin: 15px 0 15px 15px;}\n        hr{display: block;height: 0; border: 0;border-top: 1px solid #ccc; margin: 15px 0; padding: 0;}\n        pre{padding: 10px 5px 10px 10px;margin: 15px 0;display: block;line-height: 18px;background: #F0F0F0;border-radius: 6px;font-size: 13px; font-family: 'monaco', 'Consolas', \"Liberation Mono\", Courier, monospace; word-break: break-all; word-wrap: break-word;overflow-x: auto;}\n        pre code {display: block;font-size: inherit;white-space: pre-wrap;color: inherit;}\n    </style>\n    `;\n}\n\nfunction createHTML(options = {}) {\n  const {\n    backgroundColor = '#FFF',\n    color = '#000033',\n    caretColor = '',\n    placeholderColor = '#a9a9a9',\n    contentCSSText = '',\n    cssText = '',\n    initialCSSText = '',\n    pasteAsPlainText = false,\n    pasteListener = false,\n    keyDownListener = false,\n    keyUpListener = false,\n    inputListener = false,\n    autoCapitalize = 'off',\n    enterKeyHint = '',\n    initialFocus = false,\n    autoCorrect = false,\n    defaultParagraphSeparator = 'div',\n    // When first gaining focus, the cursor moves to the end of the text\n    firstFocusEnd = true,\n    useContainer = true,\n    styleWithCSS = false,\n  } = options;\n  //ERROR: HTML height not 100%;\n  return `\n<!DOCTYPE html>\n<html>\n<head>\n    <title>RN Rich Text Editor</title>\n    <meta name=\"viewport\" content=\"user-scalable=1.0,initial-scale=1.0,minimum-scale=1.0,maximum-scale=1.0\">\n    <style>\n        ${initialCSSText}\n        * {outline: 0px solid transparent;-webkit-tap-highlight-color: rgba(0,0,0,0);-webkit-touch-callout: none;box-sizing: border-box;}\n        html, body { margin: 0; padding: 0;font-family: Arial, Helvetica, sans-serif; font-size:1em; height: 100%}\n        body { overflow-y: hidden; -webkit-overflow-scrolling: touch;background-color: ${backgroundColor};caret-color: ${caretColor};}\n        .content {font-family: Arial, Helvetica, sans-serif;color: ${color}; width: 100%;${\n    !useContainer ? 'height:100%;' : ''\n  }-webkit-overflow-scrolling: touch;padding-left: 0;padding-right: 0;}\n        .pell { height: 100%;} .pell-content { outline: 0; overflow-y: auto;padding: 10px;height: 100%;${contentCSSText}}\n    </style>\n    <style>\n        [placeholder]:empty:before { content: attr(placeholder); color: ${placeholderColor};}\n        [placeholder]:empty:focus:before { content: attr(placeholder);color: ${placeholderColor};display:block;}\n    </style>\n    ${getContentCSS()}\n    <style>${cssText}</style>\n</head>\n<body>\n<div class=\"content\"><div id=\"editor\" class=\"pell\"/></div>\n<script>\n    var __DEV__ = !!${window.__DEV__};\n    var _ = (function (exports) {\n        var anchorNode, focusNode, anchorOffset, focusOffset, _focusCollapse = false, cNode;\n        var _log = console.log;\n        var placeholderColor = '${placeholderColor}';\n        var _randomID = 99;\n        var generateId = function (){\n            return \"auto_\" + (++ _randomID);\n        }\n\n        var body = document.body, docEle = document.documentElement;\n        var defaultParagraphSeparatorString = 'defaultParagraphSeparator';\n        var formatBlock = 'formatBlock';\n        var editor = null, editorFoucs = false, o_height = 0, compositionStatus = 0, paragraphStatus = 0, enterStatus = 0;\n        function addEventListener(parent, type, listener) {\n            return parent.addEventListener(type, listener);\n        };\n        function appendChild(parent, child) {\n            return parent.appendChild(child);\n        };\n        function createElement(tag) {\n            return document.createElement(tag);\n        };\n        function queryCommandState(command) {\n            return document.queryCommandState(command);\n        };\n        function queryCommandValue(command) {\n            return document.queryCommandValue(command);\n        };\n        function query(command){\n            return document.querySelector(command);\n        }\n        function querys(command){\n            return document.querySelectorAll(command);\n        }\n\n        function exec(command) {\n            var value = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;\n            return document.execCommand(command, false, value);\n        };\n\n        function asyncExec(command){\n            var args = Array.prototype.slice.call(arguments);\n            setTimeout(function(){\n                exec.apply(null, args);\n            }, 0);\n        }\n\n        function _postMessage(data){\n            exports.window.postMessage(JSON.stringify(data));\n        }\n        function postAction(data){\n            editor.content.contentEditable === 'true' && _postMessage(data);\n        };\n\n        exports.isRN && (\n            console.log = function (){\n                var data = Array.prototype.slice.call(arguments);\n                __DEV__ && _log.apply(null, data);\n                __DEV__ && postAction({type: 'LOG', data});\n            }\n        )\n\n        function formatParagraph(async){\n            (async ? asyncExec: exec)(formatBlock, '<' + editor.paragraphSeparator + '>' );\n        }\n\n        function getNodeByClass(node, className){\n            return node ? (node.nodeType === Node.ELEMENT_NODE && node.classList.contains(className)? node : getNodeByClass(node.parentNode, className)): node;\n        }\n\n        function getNodeByName(node, name){\n            return node? (node.nodeType === Node.ELEMENT_NODE && node.nodeName === name? node: getNodeByName(node.parentNode, name)): node;\n        }\n\n        function setCollapse(node){\n            var selection = window.getSelection();\n            selection.selectAllChildren(node);\n            selection.collapseToEnd();\n        }\n\n        function checkboxNode(node){\n            return getNodeByClass(node, 'x-todo');\n        }\n\n        function execCheckboxList (node, html){\n            var html = createCheckbox(node ? node.innerHTML: '');\n            var HTML = \"<ol class='x-todo'><li>\"+ html +\"</li></ol>\"\n            var foNode;\n            if (node){\n                node.innerHTML = HTML;\n                foNode = node.firstChild;\n            } else {\n                exec(\"insertHTML\", HTML);\n            }\n\n            foNode && setTimeout(function (){\n                setCollapse(foNode);\n            });\n        }\n\n        var _checkboxFlag = 0; // 1 = add checkbox; 2 = cancel checkbox\n        function cancelCheckboxList(box){\n            _checkboxFlag = 2;\n            exec(\"insertOrderedList\");\n            setCollapse(box);\n        }\n\n        function createCheckbox(end){\n            var html = '<span contenteditable=\"false\" class=\"x-todo-box\"><input type=\"checkbox\"></span>';\n            if (end && typeof end !== 'boolean'){\n                html += end;\n            } else if(end !== false){\n                html += \"<br/>\"\n            }\n            return html;\n        }\n\n        function insertCheckbox (node){\n            var li = getNodeByName(node, 'LI');\n            li.insertBefore(document.createRange().createContextualFragment(createCheckbox(false)), li.firstChild);\n            setCollapse(node);\n        }\n\n        function getCheckbox (node){\n            return getNodeByClass(node, \"x-todo-box\");\n        }\n\n        function saveSelection(){\n            var sel = window.getSelection();\n            currentSelection = sel;\n            anchorNode = sel.anchorNode;\n            anchorOffset = sel.anchorOffset;\n            focusNode = sel.focusNode;\n            focusOffset = sel.focusOffset;\n        }\n\n        function focusCurrent(){\n            editor.content.focus();\n            try {\n                var selection = window.getSelection();\n                if (anchorNode){\n                    if (anchorNode !== selection.anchorNode && !selection.containsNode(anchorNode)){\n                        _focusCollapse = true;\n                        selection.collapse(anchorNode, anchorOffset);\n                    }\n                } else if(${firstFocusEnd} && !_focusCollapse ){\n                    _focusCollapse = true;\n                    selection.selectAllChildren(editor.content);\n                    selection.collapseToEnd();\n                }\n            } catch(e){\n                console.log(e)\n            }\n        }\n\n        var _keyDown = false;\n        function handleChange (event){\n            var node = anchorNode;\n            Actions.UPDATE_HEIGHT();\n            Actions.UPDATE_OFFSET_Y();\n            if (_keyDown){\n                if(_checkboxFlag === 1 && checkboxNode(node)){\n                    _checkboxFlag = 0;\n                    var sib = node.previousSibling;\n                    if (!sib || sib.childNodes.length > 1){\n                        insertCheckbox(node);\n                    }\n                } else if(_checkboxFlag === 2){\n                    _checkboxFlag = 0;\n                    var sp = createElement(editor.paragraphSeparator);\n                    var br = createElement('br');\n                    sp.appendChild(br);\n                    setTimeout(function (){\n                        if (!node.classList.contains(\"x-todo-box\")){\n                            node = node.parentNode.previousSibling;\n                        }\n                        node.parentNode.replaceChild(sp, node);\n                        setCollapse(sp);\n                    });\n                }\n            }\n        }\n\n        function adjustNestedElements() {\n            // adjust ul/ol if we use p separator\n            // since nesting is not valid for p\n            if (editor.paragraphSeparator == 'p') {\n                var selection = window.getSelection();\n\n                let lists = document.querySelectorAll(\"ol, ul\");\n                for (let i = 0; i < lists.length; i++) {\n                    let ele = lists[i];\n                    let parentNode = ele.parentNode;\n                    if (parentNode.tagName === 'P' && parentNode.lastChild === parentNode.firstChild) {\n                        parentNode.insertAdjacentElement('beforebegin', ele);\n                        parentNode.remove()\n                    }\n                }\n\n                selection.collapse(anchorNode, anchorOffset);\n            }\n        }\n\n        var Actions = {\n            bold: { state: function() { return queryCommandState('bold'); }, result: function() { return exec('bold'); }},\n            italic: { state: function() { return queryCommandState('italic'); }, result: function() { return exec('italic'); }},\n            underline: { state: function() { return queryCommandState('underline'); }, result: function() { return exec('underline'); }},\n            strikeThrough: { state: function() { return queryCommandState('strikeThrough'); }, result: function() { return exec('strikeThrough'); }},\n            subscript: { state: function() { return queryCommandState('subscript'); }, result: function() { return exec('subscript'); }},\n            superscript: { state: function() { return queryCommandState('superscript'); }, result: function() { return exec('superscript'); }},\n            heading1: { state: function() { return queryCommandValue(formatBlock) === 'h1'; }, result: function() { return exec(formatBlock, '<h1>'); }},\n            heading2: { state: function() { return queryCommandValue(formatBlock) === 'h2'; }, result: function() { return exec(formatBlock, '<h2>'); }},\n            heading3: { state: function() { return queryCommandValue(formatBlock) === 'h3'; }, result: function() { return exec(formatBlock, '<h3>'); }},\n            heading4: { state: function() { return queryCommandValue(formatBlock) === 'h4'; }, result: function() { return exec(formatBlock, '<h4>'); }},\n            heading5: { state: function() { return queryCommandValue(formatBlock) === 'h5'; }, result: function() { return exec(formatBlock, '<h5>'); }},\n            heading6: { state: function() { return queryCommandValue(formatBlock) === 'h6'; }, result: function() { return exec(formatBlock, '<h6>'); }},\n            paragraph: { state: function() { return queryCommandValue(formatBlock) === 'p'; }, result: function() { return exec(formatBlock, '<p>'); }},\n            quote: { result: function() { return exec(formatBlock, '<blockquote>'); }},\n            removeFormat: { result: function() { return exec('removeFormat'); }},\n            orderedList: {\n                state: function() { return !checkboxNode(window.getSelection().anchorNode) && queryCommandState('insertOrderedList'); },\n                result: function() {\n                    if (!!checkboxNode(window.getSelection().anchorNode)) return;\n\n                    let flag = exec('insertOrderedList');\n                    adjustNestedElements();\n                    return flag;\n                }\n            },\n            unorderedList: {\n                state: function() { return queryCommandState('insertUnorderedList');},\n                result: function() {\n                    if (!!checkboxNode(window.getSelection().anchorNode)) return;\n\n                    let flag =  exec('insertUnorderedList');\n                    adjustNestedElements();\n                    return flag;\n                }\n            },\n            code: { result: function(type) {\n                var flag = exec(formatBlock, '<pre>');\n                var node = anchorNode.nodeName === \"PRE\" ? anchorNode: anchorNode.parentNode;\n                if (node.nodeName === 'PRE'){\n                    type && node.setAttribute(\"type\", type);\n                    node.innerHTML = \"<code type='\"+(type || '') +\"'>\" + node.innerHTML + \"</code>\";\n                    // var br = createElement(\"br\");\n                    // node.parentNode.insertBefore(br, node.nextSibling);\n                    setTimeout(function (){\n                        setCollapse(node.firstChild);\n                    });\n                }\n                return flag;\n             }},\n            line: { result: function() { return exec('insertHorizontalRule'); }},\n            redo: { result: function() { return exec('redo'); }},\n            undo: { result: function() { return exec('undo'); }},\n            indent: { result: function() { return exec('indent'); }},\n            outdent: { result: function() { return exec('outdent'); }},\n            outdent: { result: function() { return exec('outdent'); }},\n            justifyCenter: {  state: function() { return queryCommandState('justifyCenter'); }, result: function() { return exec('justifyCenter'); }},\n            justifyLeft: { state: function() { return queryCommandState('justifyLeft'); }, result: function() { return exec('justifyLeft'); }},\n            justifyRight: { state: function() { return queryCommandState('justifyRight'); }, result: function() { return exec('justifyRight'); }},\n            justifyFull: { state: function() { return queryCommandState('justifyFull'); }, result: function() { return exec('justifyFull'); }},\n            hiliteColor: {  state: function() { return queryCommandValue('backColor'); }, result: function(color) { return exec('backColor', color); }},\n            foreColor: { state: function() { return queryCommandValue('foreColor'); }, result: function(color) { return exec('foreColor', color); }},\n            fontSize: { state: function() { return queryCommandValue('fontSize'); }, result: function(size) { return exec('fontSize', size); }},\n            fontName: { result: function(name) { return exec('fontName', name); }},\n            link: {\n                // result: function(data) {\n                //     data = data || {};\n                //     var title = data.title;\n                //     title = title || window.getSelection().toString();\n                //     // title = title || window.prompt('Enter the link title');\n                //     var url = data.url || window.prompt('Enter the link URL');\n                //     if (url){\n                //         exec('insertHTML', \"<a href='\"+ url +\"'>\"+(title || url)+\"</a>\");\n                //     }\n                // }\n                result: function(data) {\n                    var sel = document.getSelection();\n                    data = data || {};\n                    var url = data.url || window.prompt('Enter the link URL');\n\n                    if (url) {\n                        var el = document.createElement(\"a\");\n                        el.setAttribute(\"href\", url);\n\n                        var title = data.title || sel.toString() || url;\n                        el.text = title;\n\n                        // when adding a link, if our current node is empty, it may have a <br>\n                        // if so, replace it with '' so the added link doesn't end up with an extra space.\n                        // Also, if totally empty, we must format the paragraph to add the link into the container.\n                        var mustFormat = false;\n                        if (sel.anchorNode && sel.anchorNode.innerHTML === '<br>') {\n                            sel.anchorNode.innerHTML = '';\n                        } else if (!sel.anchorNode || sel.anchorNode === editor.content) {\n                            mustFormat = true;\n                        }\n\n                        // insert like this so we can replace current selection, if any\n                        var range = sel.getRangeAt(0);\n                        range.deleteContents();\n                        range.insertNode(el);\n\n                        // restore cursor to end\n                        range.setStartAfter(el);\n                        range.setEndAfter(el);\n                        sel.removeAllRanges();\n                        sel.addRange(range);\n\n                        // format paragraph if needed\n                        if (mustFormat){\n                            formatParagraph();\n                        }\n\n                        // save selection, and fire on change to our webview\n                        saveSelection();\n                        editor.settings.onChange();\n                    }\n                }\n            },\n            image: {\n                result: function(url, style) {\n                    if (url){\n                        exec('insertHTML', \"<img style='\"+ (style || '')+\"' src='\"+ url +\"'/>\");\n                        Actions.UPDATE_HEIGHT();\n                    }\n                }\n            },\n            html: {\n                result: function (html){\n                    if (html){\n                        exec('insertHTML', html);\n                        Actions.UPDATE_HEIGHT();\n                    }\n                }\n            },\n            text: { result: function (text){ text && exec('insertText', text); }},\n            video: {\n                result: function(url, style) {\n                    if (url) {\n                        var thumbnail = url.replace(/.(mp4|m3u8)/g, '') + '-thumbnail';\n                        var html = \"<br><div style='\"+ (style || '')+\"'><video src='\"+ url +\"' poster='\"+ thumbnail + \"' controls><source src='\"+ url +\"' type='video/mp4'>No video tag support</video></div><br>\";\n                        exec('insertHTML', html);\n                        Actions.UPDATE_HEIGHT();\n                    }\n                }\n            },\n            checkboxList: {\n                state: function(){return checkboxNode(window.getSelection().anchorNode)},\n                result: function() {\n                    if (queryCommandState('insertOrderedList')) return;\n                    var pNode;\n                    if (anchorNode){\n                        pNode = anchorNode.parentNode;\n                        if (anchorNode === editor.content) pNode = null;\n                    }\n\n                    if (anchorNode === editor.content || queryCommandValue(formatBlock) === ''){\n                        formatParagraph();\n                    }\n                    var box = checkboxNode(anchorNode);\n                    if (!!box){\n                        cancelCheckboxList(box.parentNode);\n                    } else {\n                        !queryCommandState('insertOrderedList') && execCheckboxList(pNode);\n                    }\n                }\n            },\n            content: {\n                setDisable: function(dis){ this.blur(); editor.content.contentEditable = !dis},\n                setHtml: function(html) { editor.content.innerHTML = html; Actions.UPDATE_HEIGHT(); },\n                getHtml: function() { return editor.content.innerHTML; },\n                blur: function() { editor.content.blur(); },\n                focus: function() { focusCurrent(); },\n                postHtml: function (){ postAction({type: 'CONTENT_HTML_RESPONSE', data: editor.content.innerHTML}); },\n                setPlaceholder: function(placeholder){ editor.content.setAttribute(\"placeholder\", placeholder) },\n\n                setContentStyle: function(styles) {\n                    styles = styles || {};\n                    var bgColor = styles.backgroundColor, color = styles.color, pColor = styles.placeholderColor;\n                    if (bgColor && bgColor !== body.style.backgroundColor) body.style.backgroundColor = bgColor;\n                    if (color && color !== editor.content.style.color) editor.content.style.color = color;\n                    if (pColor && pColor !== placeholderColor){\n                        var rule1=\"[placeholder]:empty:before {content:attr(placeholder);color:\"+pColor+\";}\";\n                        var rule2=\"[placeholder]:empty:focus:before{content:attr(placeholder);color:\"+pColor+\";}\";\n                        try {\n                            document.styleSheets[1].deleteRule(0);document.styleSheets[1].deleteRule(0);\n                            document.styleSheets[1].insertRule(rule1); document.styleSheets[1].insertRule(rule2);\n                            placeholderColor = pColor;\n                        } catch (e){\n                            console.log(\"set placeholderColor error!\")\n                        }\n                    }\n                },\n\n                commandDOM: function (command){\n                    try {new Function(\"$\", command)(exports.document.querySelector.bind(exports.document))} catch(e){console.log(e.message)};\n                },\n                command: function (command){\n                    try {new Function(\"$\", command)(exports.document)} catch(e){console.log(e.message)};\n                }\n            },\n\n            init: function (){\n                if (${useContainer}){\n                    // setInterval(Actions.UPDATE_HEIGHT, 150);\n                    Actions.UPDATE_HEIGHT();\n                } else {\n                    // react-native-webview There is a bug in the body and html height setting of a certain version of 100%\n                    // body.style.height = docEle.clientHeight + 'px';\n                }\n            },\n\n            UPDATE_HEIGHT: function() {\n                if (!${useContainer}) return;\n                // var height = Math.max(docEle.scrollHeight, body.scrollHeight);\n                var height = editor.content.scrollHeight;\n                if (o_height !== height){\n                    _postMessage({type: 'OFFSET_HEIGHT', data: o_height = height});\n                }\n            },\n\n            UPDATE_OFFSET_Y: function (){\n                if (!${useContainer}) return;\n                var node = anchorNode || window.getSelection().anchorNode;\n                var sel = window.getSelection();\n                if (node){\n                    var siblingOffset = (node.nextSibling && node.nextSibling.offsetTop) || (node.previousSibling && node.previousSibling.offsetTop)\n                    var rectOffset = null;\n                    if (sel.rangeCount > 0) {\n                        var range = sel.getRangeAt(0);\n                        var rect = range.getClientRects()[0];\n                        rectOffset = rect ? rect.y : null;\n                    }\n\n                    var offsetY = node.offsetTop || siblingOffset || rectOffset || node.parentNode.offsetTop;\n                    if (offsetY){\n                        _postMessage({type: 'OFFSET_Y', data: offsetY});\n                    }\n                }\n            }\n        };\n\n        var init = function init(settings) {\n\n            var paragraphSeparator = settings[defaultParagraphSeparatorString];\n            var content = settings.element.content = createElement('div');\n            content.id = 'content';\n            content.contentEditable = true;\n            content.spellcheck = false;\n            content.autofocus = ${initialFocus};\n            content.enterKeyHint = '${enterKeyHint}';\n            content.autocapitalize = '${autoCapitalize}';\n            content.autocorrect = ${autoCorrect};\n            content.autocomplete = 'off';\n            content.className = \"pell-content\";\n            content.oninput = function (_ref) {\n                // var firstChild = _ref.target.firstChild;\n                if ((anchorNode === void 0 || anchorNode === content) && queryCommandValue(formatBlock) === ''){\n                    if ( !compositionStatus ){\n                        formatParagraph(true);\n                        paragraphStatus = 0;\n                    } else {\n                        paragraphStatus = 1;\n                    }\n                } else if (content.innerHTML === '<br>'){\n                    content.innerHTML = '';\n                } else if (enterStatus && queryCommandValue(formatBlock) === 'blockquote') {\n                    formatParagraph();\n                }\n\n                saveSelection();\n                handleChange(_ref);\n                settings.onChange();\n                ${inputListener} && postAction({type: \"ON_INPUT\", data: {inputType: _ref.inputType, data: _ref.data}});\n            };\n            appendChild(settings.element, content);\n\n            if (settings.styleWithCSS) exec('styleWithCSS');\n            exec(defaultParagraphSeparatorString, paragraphSeparator);\n\n            var actionsHandler = [];\n            for (var k in Actions){\n                if (typeof Actions[k] === 'object' && Actions[k].state){\n                    actionsHandler[k] = Actions[k]\n                }\n            }\n\n            function handler() {\n                var activeTools = [];\n                for(var k in actionsHandler){\n                    const state =  Actions[k].state() \n                    if ( state ){\n                        activeTools.push(typeof state === \"boolean\" ? k : {type: k, value: Actions[k].state()});\n                    }\n                }\n                postAction({type: 'SELECTION_CHANGE', data: activeTools});\n            };\n\n            var _handleStateDT = null;\n            function handleState(){\n                clearTimeout(_handleStateDT);\n                _handleStateDT = setTimeout(function (){\n                    handler();\n                    saveSelection();\n                }, 50);\n            }\n\n            function handleSelecting(event){\n                event.stopPropagation();\n                handleState();\n            }\n\n            function postKeyAction(event, type){\n                postAction({type: type, data: {keyCode: event.keyCode, key: event.key}});\n            }\n            function handleKeyup(event){\n                enterStatus = 0;\n                _keyDown = false;\n                if (event.keyCode === 8) handleSelecting (event);\n                ${keyUpListener} && postKeyAction(event, \"CONTENT_KEYUP\")\n            }\n            function handleKeydown(event){\n                _keyDown = true;\n                 handleState();\n                if (event.key === 'Enter'){\n                    enterStatus = 1; // set enter true\n                    var box;\n                    var block = queryCommandValue(formatBlock);\n                    if (anchorNode.innerHTML === '<br>' && anchorNode.parentNode !== editor.content){\n                        // setCollapse(editor.content);\n                    } else if (queryCommandState('insertOrderedList') && !!(box = checkboxNode(anchorNode))){\n                        var node = anchorNode && anchorNode.childNodes[1];\n                        if (node && node.nodeName === 'BR'){\n                            cancelCheckboxList(box.parentNode);\n                            event.preventDefault();\n                        } else{\n                            // add checkbox\n                            _checkboxFlag = 1;\n                        }\n                    }\n                    if (block === 'pre' && anchorNode.innerHTML === '<br>'){\n                        // code end enter new line (Unfinished)\n                        if (!anchorNode.nextSibling){\n                            event.preventDefault();\n                            var node = anchorNode.parentNode;\n                            var br = createElement(\"br\");\n                            node.parentNode.insertBefore(br, node.nextSibling);\n                            setTimeout(function (){\n                                setCollapse(br);\n                            });\n                        }\n                    }\n                }\n                ${keyDownListener} && postKeyAction(event, \"CONTENT_KEYDOWN\");\n            }\n            function handleFocus (){\n                editorFoucs = true;\n                setTimeout(function (){\n                    Actions.UPDATE_OFFSET_Y();\n                });\n                postAction({type: 'CONTENT_FOCUSED'});\n            }\n            function handleBlur (){\n                editorFoucs = false;\n                postAction({type: 'SELECTION_CHANGE', data: []});\n                postAction({type: 'CONTENT_BLUR'});\n            }\n            function handleClick(event){\n                var ele = event.target;\n                if (ele.nodeName === 'INPUT' && ele.type === 'checkbox'){\n                    // Set whether the checkbox is selected by default\n                    if (ele.checked) ele.setAttribute('checked', '');\n                    else ele.removeAttribute('checked');\n                }\n                if (ele.nodeName === 'A' && ele.getAttribute('href')) {\n                    postAction({type: 'LINK_TOUCHED', data: ele.getAttribute('href')});\n                }\n            }\n            addEventListener(content, 'touchcancel', handleSelecting);\n            addEventListener(content, 'mouseup', handleSelecting);\n            addEventListener(content, 'touchend', handleSelecting);\n            addEventListener(content, 'keyup', handleKeyup);\n            addEventListener(content, 'click', handleClick);\n            addEventListener(content, 'keydown', handleKeydown);\n            addEventListener(content, 'blur', handleBlur);\n            addEventListener(content, 'focus', handleFocus);\n            addEventListener(content, 'paste', function (e) {\n                // get text representation of clipboard\n                var text = (e.originalEvent || e).clipboardData.getData('text/plain');\n\n                ${pasteListener} && postAction({type: 'CONTENT_PASTED', data: text});\n                if (${pasteAsPlainText}) {\n                    // cancel paste\n                    e.preventDefault();\n                    // insert text manually\n                    exec(\"insertText\", text);\n                }\n            });\n            addEventListener(content, 'compositionstart', function(event){\n                compositionStatus = 1;\n            })\n            addEventListener(content, 'compositionend', function (event){\n                compositionStatus = 0;\n                paragraphStatus && formatParagraph(true);\n            })\n\n            var message = function (event){\n                var msgData = JSON.parse(event.data), action = Actions[msgData.type];\n                if (action ){\n                    if ( action[msgData.name]){\n                        var flag = msgData.name === 'result';\n                        // insert image or link need current focus\n                        flag && focusCurrent();\n                        action[msgData.name](msgData.data, msgData.options);\n                        flag && handleState();\n                    } else {\n                        action(msgData.data, msgData.options);\n                    }\n                }\n            };\n            document.addEventListener(\"message\", message , false);\n            window.addEventListener(\"message\", message , false);\n            document.addEventListener('mouseup', function (event) {\n                event.preventDefault();\n                Actions.content.focus();\n                handleSelecting(event);\n            });\n            return {content, paragraphSeparator: paragraphSeparator, settings};\n        };\n\n        var _handleCTime = null;\n        editor = init({\n            element: document.getElementById('editor'),\n            defaultParagraphSeparator: '${defaultParagraphSeparator}',\n            styleWithCSS: ${styleWithCSS},\n            onChange: function (){\n                clearTimeout(_handleCTime);\n                _handleCTime = setTimeout(function(){\n                    var html = Actions.content.getHtml();\n                    postAction({type: 'CONTENT_CHANGE', data: html});\n                }, 50);\n            }\n        })\n        return {\n            sendEvent: function (type, data){\n                event.preventDefault();\n                event.stopPropagation();\n                var id = event.currentTarget.id;\n                if ( !id ) event.currentTarget.id = id = generateId();\n                _postMessage({type, id, data});\n            }\n        }\n    })({\n        window: window.ReactNativeWebView || window.parent,\n        isRN: !!window.ReactNativeWebView ,\n        document: document\n    });\n</script>\n</body>\n</html>\n`;\n}\n\nconst HTML = createHTML();\nexport {HTML, createHTML, getContentCSS};\n"],"mappings":"AAAA,SAASA,aAAaA,CAAA,EAAG;EAEvB,OAAO;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AAEA,SAASC,UAAUA,CAACC,OAAO,GAAG,CAAC,CAAC,EAAE;EAChC,MAAM;IACJC,eAAe,GAAG,MAAM;IACxBC,KAAK,GAAG,SAAS;IACjBC,UAAU,GAAG,EAAE;IACfC,gBAAgB,GAAG,SAAS;IAC5BC,cAAc,GAAG,EAAE;IACnBC,OAAO,GAAG,EAAE;IACZC,cAAc,GAAG,EAAE;IACnBC,gBAAgB,GAAG,KAAK;IACxBC,aAAa,GAAG,KAAK;IACrBC,eAAe,GAAG,KAAK;IACvBC,aAAa,GAAG,KAAK;IACrBC,aAAa,GAAG,KAAK;IACrBC,cAAc,GAAG,KAAK;IACtBC,YAAY,GAAG,EAAE;IACjBC,YAAY,GAAG,KAAK;IACpBC,WAAW,GAAG,KAAK;IACnBC,yBAAyB,GAAG,KAAK;IAEjCC,aAAa,GAAG,IAAI;IACpBC,YAAY,GAAG,IAAI;IACnBC,YAAY,GAAG;EACjB,CAAC,GAAGpB,OAAO;EAEX,OAAO;AACT;AACA;AACA;AACA;AACA;AACA;AACA,UAAUO,cAAc;AACxB;AACA;AACA,yFAAyFN,eAAe,iBAAiBE,UAAU;AACnI,qEAAqED,KAAK,iBACtE,CAACiB,YAAY,GAAG,cAAc,GAAG,EAAE;AACvC,yGACyGd,cAAc;AACvH;AACA;AACA,0EAA0ED,gBAAgB;AAC1F,+EAA+EA,gBAAgB;AAC/F;AACA,MAAMN,aAAa,CAAC,CAAC;AACrB,aAAaQ,OAAO;AACpB;AACA;AACA;AACA;AACA,sBAAsBe,MAAM,CAACC,OAAO;AACpC;AACA;AACA;AACA,kCAAkClB,gBAAgB;AAClc,aAAa;AACzsBAAsBC,YAAY;AAClC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,uBAAuBA,YAAY;AACnC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,uBAAuBA,YAAY;AACnC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,kCAAkCJ,YAAY;AAC9C,sCAAsCD,YAAY;AAClD,wCAAwCD,cAAc;AACtD,oCAAoCG,WAAW;AAC/C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,kBAAkBJ,aAAa;AAC/B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,kBAAkBD,aAAa;AAC/B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,kBAAkBD,eAAe;AACjC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,kBAAkBD,aAAa;AAC/B,sBAAsBD,gBAAgB;AACtC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,0CAA0CS,yBAAyB;AACnE,4BAA4BG,YAAY;AACxC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAAC;AACD;AAEA,MAAMG,IAAI,GAAGxB,UAAU,CAAC,CAAC;AACzB,SAAQwB,IAAI,EAAExB,UAAU,EAAED,aAAa","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}