{"ast":null,"code":"import _defineProperty from \"@babel/runtime/helpers/defineProperty\";\nimport _objectWithoutProperties from \"@babel/runtime/helpers/objectWithoutProperties\";\nconst _excluded = [\"style\"];\nvar _jsxFileName = \"/home/rodo/workspace/passion/apps/muh-money/node_modules/react-native/Libraries/Animated/createAnimatedComponent.js\";\nfunction ownKeys(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }\nfunction _objectSpread(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? ownKeys(Object(t), !0).forEach(function (r) { _defineProperty(e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; }\nimport View from '../Components/View/View';\nimport useMergeRefs from '../Utilities/useMergeRefs';\nimport useAnimatedProps from './useAnimatedProps';\nimport * as React from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default function createAnimatedComponent(Component) {\n  const AnimatedComponent = React.forwardRef((props, forwardedRef) => {\n    const [reducedProps, callbackRef] = useAnimatedProps(props);\n    const ref = useMergeRefs(callbackRef, forwardedRef);\n    const {\n      passthroughAnimatedPropExplicitValues,\n      style\n    } = reducedProps;\n    const _ref = passthroughAnimatedPropExplicitValues ?? {},\n      {\n        style: passthroughStyle\n      } = _ref,\n      passthroughProps = _objectWithoutProperties(_ref, _excluded);\n    const mergedStyle = _objectSpread(_objectSpread({}, style), passthroughStyle);\n    return _jsxDEV(Component, _objectSpread(_objectSpread(_objectSpread({}, reducedProps), passthroughProps), {}, {\n      style: mergedStyle,\n      ref: ref\n    }), void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 52,\n      columnNumber: 9\n    }, this);\n  });\n  AnimatedComponent.displayName = `Animated(${Component.displayName || 'Anonymous'})`;\n  return AnimatedComponent;\n}","map":{"version":3,"names":["View","useMergeRefs","useAnimatedProps","React","jsxDEV","_jsxDEV","createAnimatedComponent","Component","AnimatedComponent","forwardRef","props","forwardedRef","reducedProps","callbackRef","ref","passthroughAnimatedPropExplicitValues","style","_ref","passthroughStyle","passthroughProps","_objectWithoutProperties","_excluded","mergedStyle","_objectSpread","fileName","_jsxFileName","lineNumber","columnNumber","displayName"],"sources":["/home/rodo/workspace/passion/apps/muh-money/node_modules/react-native/Libraries/Animated/createAnimatedComponent.js"],"sourcesContent":["/**\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @flow\n * @format\n */\n\nimport View from '../Components/View/View';\nimport useMergeRefs from '../Utilities/useMergeRefs';\nimport useAnimatedProps from './useAnimatedProps';\nimport * as React from 'react';\n\n// $FlowFixMe[deprecated-type]\nexport type AnimatedProps<Props: {...}> = $ObjMap<\n  Props &\n    $ReadOnly<{\n      passthroughAnimatedPropExplicitValues?: React.ElementConfig<typeof View>,\n    }>,\n  () => any,\n>;\n\nexport type AnimatedComponentType<\n  Props: {...},\n  +Instance = mixed,\n> = React.AbstractComponent<AnimatedProps<Props>, Instance>;\n\nexport default function createAnimatedComponent<TProps: {...}, TInstance>(\n  Component: React.AbstractComponent<TProps, TInstance>,\n): AnimatedComponentType<TProps, TInstance> {\n  const AnimatedComponent = React.forwardRef<AnimatedProps<TProps>, TInstance>(\n    (props, forwardedRef) => {\n      const [reducedProps, callbackRef] = useAnimatedProps<TProps, TInstance>(\n        // $FlowFixMe[incompatible-call]\n        props,\n      );\n      const ref = useMergeRefs<TInstance>(callbackRef, forwardedRef);\n\n      // Some components require explicit passthrough values for animation\n      // to work properly. For example, if an animated component is\n      // transformed and Pressable, onPress will not work after transform\n      // without these passthrough values.\n      // $FlowFixMe[prop-missing]\n      const {passthroughAnimatedPropExplicitValues, style} = reducedProps;\n      const {style: passthroughStyle, ...passthroughProps} =\n        passthroughAnimatedPropExplicitValues ?? {};\n      const mergedStyle = {...style, ...passthroughStyle};\n\n      return (\n        <Component\n          {...reducedProps}\n          {...passthroughProps}\n          style={mergedStyle}\n          ref={ref}\n        />\n      );\n    },\n  );\n\n  AnimatedComponent.displayName = `Animated(${\n    Component.displayName || 'Anonymous'\n  })`;\n\n  return AnimatedComponent;\n}\n"],"mappings":";;;;;;AAUA,OAAOA,IAAI,MAAM,yBAAyB;AAC1C,OAAOC,YAAY,MAAM,2BAA2B;AACpD,OAAOC,gBAAgB,MAAM,oBAAoB;AACjD,OAAO,KAAKC,KAAK,MAAM,OAAO;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAgB/B,eAAe,SAASC,uBAAuBA,CAC7CC,SAAqD,EACX;EAC1C,MAAMC,iBAAiB,GAAGL,KAAK,CAACM,UAAU,CACxC,CAACC,KAAK,EAAEC,YAAY,KAAK;IACvB,MAAM,CAACC,YAAY,EAAEC,WAAW,CAAC,GAAGX,gBAAgB,CAElDQ,KACF,CAAC;IACD,MAAMI,GAAG,GAAGb,YAAY,CAAYY,WAAW,EAAEF,YAAY,CAAC;IAO9D,MAAM;MAACI,qCAAqC;MAAEC;IAAK,CAAC,GAAGJ,YAAY;IACnE,MAAAK,IAAA,GACEF,qCAAqC,IAAI,CAAC,CAAC;MADvC;QAACC,KAAK,EAAEE;MAAqC,CAAC,GAAAD,IAAA;MAAjBE,gBAAgB,GAAAC,wBAAA,CAAAH,IAAA,EAAAI,SAAA;IAEnD,MAAMC,WAAW,GAAAC,aAAA,CAAAA,aAAA,KAAOP,KAAK,GAAKE,gBAAgB,CAAC;IAEnD,OACEb,OAAA,CAACE,SAAS,EAAAgB,aAAA,CAAAA,aAAA,CAAAA,aAAA,KACJX,YAAY,GACZO,gBAAgB;MACpBH,KAAK,EAAEM,WAAY;MACnBR,GAAG,EAAEA;IAAI;MAAAU,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACV,CAAC;EAEN,CACF,CAAC;EAEDnB,iBAAiB,CAACoB,WAAW,GAAG,YAC9BrB,SAAS,CAACqB,WAAW,IAAI,WAAW,GACnC;EAEH,OAAOpB,iBAAiB;AAC1B","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}