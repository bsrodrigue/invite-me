{"ast":null,"code":"import { useState } from \"react\";\nimport { notify } from \"../lib\";\nfunction handleError(error) {\n  notify.error(error);\n  console.error(error);\n}\nfunction handleSuccess(message) {\n  message && notify.success(message);\n}\nexport default function useCall(callback, options) {\n  const [isLoading, setIsLoading] = useState(false);\n  const [data, setData] = useState(null);\n  const call = async args => {\n    try {\n      setIsLoading(true);\n      const data = await callback(args);\n      handleSuccess(options?.successMessage);\n      setData(data);\n      options?.onSuccess?.(data);\n      return data;\n    } catch (error) {\n      const strapiError = error;\n      handleError(options?.errorMessage || strapiError?.error?.message || error || \"unknown-error\");\n      options?.onError?.();\n    } finally {\n      setIsLoading(false);\n    }\n  };\n  return {\n    isLoading,\n    call,\n    data\n  };\n}","map":{"version":3,"names":["useState","notify","handleError","error","console","handleSuccess","message","success","useCall","callback","options","isLoading","setIsLoading","data","setData","call","args","successMessage","onSuccess","strapiError","errorMessage","onError"],"sources":["/home/rodo/workspace/passion/apps/muh-money/src/api/useCall.ts"],"sourcesContent":["import { useState } from \"react\";\nimport { notify } from \"../lib\";\nimport { StrapiError } from \"../types\";\n\nfunction handleError(error: any) {\n  notify.error(error);\n  console.error(error);\n}\n\nfunction handleSuccess(message: string) {\n  message && notify.success(message);\n}\n\nexport default function useCall<R, P>(\n  callback: (args?: P) => R,\n  options?: {\n    onSuccess?: (result?: Awaited<R>) => void,\n    onError?: (result?: Awaited<any>) => void,\n    successMessage?: string,\n    errorMessage?: string,\n  }\n) {\n  const [isLoading, setIsLoading] = useState(false);\n  const [data, setData] = useState<Awaited<R>>(null);\n\n  const call = async (args?: P) => {\n    try {\n      setIsLoading(true);\n      const data = await callback(args)\n      handleSuccess(options?.successMessage);\n      setData(data);\n      options?.onSuccess?.(data);\n      return data;\n    } catch (error) {\n      const strapiError = error as StrapiError;\n      handleError(options?.errorMessage || strapiError?.error?.message || error || \"unknown-error\");\n      options?.onError?.();\n    }\n    finally {\n      setIsLoading(false);\n    }\n  }\n\n\n  return { isLoading, call, data };\n}\n"],"mappings":"AAAA,SAASA,QAAQ,QAAQ,OAAO;AAChC,SAASC,MAAM,QAAQ,QAAQ;AAG/B,SAASC,WAAWA,CAACC,KAAU,EAAE;EAC/BF,MAAM,CAACE,KAAK,CAACA,KAAK,CAAC;EACnBC,OAAO,CAACD,KAAK,CAACA,KAAK,CAAC;AACtB;AAEA,SAASE,aAAaA,CAACC,OAAe,EAAE;EACtCA,OAAO,IAAIL,MAAM,CAACM,OAAO,CAACD,OAAO,CAAC;AACpC;AAEA,eAAe,SAASE,OAAOA,CAC7BC,QAAyB,EACzBC,OAKC,EACD;EACA,MAAM,CAACC,SAAS,EAAEC,YAAY,CAAC,GAAGZ,QAAQ,CAAC,KAAK,CAAC;EACjD,MAAM,CAACa,IAAI,EAAEC,OAAO,CAAC,GAAGd,QAAQ,CAAa,IAAI,CAAC;EAElD,MAAMe,IAAI,GAAG,MAAOC,IAAQ,IAAK;IAC/B,IAAI;MACFJ,YAAY,CAAC,IAAI,CAAC;MAClB,MAAMC,IAAI,GAAG,MAAMJ,QAAQ,CAACO,IAAI,CAAC;MACjCX,aAAa,CAACK,OAAO,EAAEO,cAAc,CAAC;MACtCH,OAAO,CAACD,IAAI,CAAC;MACbH,OAAO,EAAEQ,SAAS,GAAGL,IAAI,CAAC;MAC1B,OAAOA,IAAI;IACb,CAAC,CAAC,OAAOV,KAAK,EAAE;MACd,MAAMgB,WAAW,GAAGhB,KAAoB;MACxCD,WAAW,CAACQ,OAAO,EAAEU,YAAY,IAAID,WAAW,EAAEhB,KAAK,EAAEG,OAAO,IAAIH,KAAK,IAAI,eAAe,CAAC;MAC7FO,OAAO,EAAEW,OAAO,GAAG,CAAC;IACtB,CAAC,SACO;MACNT,YAAY,CAAC,KAAK,CAAC;IACrB;EACF,CAAC;EAGD,OAAO;IAAED,SAAS;IAAEI,IAAI;IAAEF;EAAK,CAAC;AAClC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}