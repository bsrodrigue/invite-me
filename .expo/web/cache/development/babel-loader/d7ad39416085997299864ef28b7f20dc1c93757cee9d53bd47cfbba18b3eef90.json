{"ast":null,"code":"'use strict';\n\nvar _defineProperty = require(\"@babel/runtime/helpers/defineProperty\");\nfunction ownKeys(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }\nfunction _objectSpread(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? ownKeys(Object(t), !0).forEach(function (r) { _defineProperty(e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; }\nclass FormData {\n  constructor() {\n    this._parts = [];\n  }\n  append(key, value) {\n    this._parts.push([key, value]);\n  }\n  getAll(key) {\n    return this._parts.filter(([name]) => name === key).map(([, value]) => value);\n  }\n  getParts() {\n    return this._parts.map(([name, value]) => {\n      const contentDisposition = 'form-data; name=\"' + name + '\"';\n      const headers = {\n        'content-disposition': contentDisposition\n      };\n      if (typeof value === 'object' && !Array.isArray(value) && value) {\n        if (typeof value.name === 'string') {\n          headers['content-disposition'] += `; filename=\"${value.name}\"; filename*=utf-8''${encodeURI(value.name)}`;\n        }\n        if (typeof value.type === 'string') {\n          headers['content-type'] = value.type;\n        }\n        return _objectSpread(_objectSpread({}, value), {}, {\n          headers,\n          fieldName: name\n        });\n      }\n      return {\n        string: String(value),\n        headers,\n        fieldName: name\n      };\n    });\n  }\n}\nmodule.exports = FormData;","map":{"version":3,"names":["_defineProperty","require","ownKeys","e","r","t","Object","keys","getOwnPropertySymbols","o","filter","getOwnPropertyDescriptor","enumerable","push","apply","_objectSpread","arguments","length","forEach","getOwnPropertyDescriptors","defineProperties","defineProperty","FormData","constructor","_parts","append","key","value","getAll","name","map","getParts","contentDisposition","headers","Array","isArray","encodeURI","type","fieldName","string","String","module","exports"],"sources":["/home/rodo/workspace/passion/apps/muh-money/node_modules/react-native/Libraries/Network/FormData.js"],"sourcesContent":["/**\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @format\n * @flow strict\n */\n\n'use strict';\n\ntype FormDataValue = string | {name?: string, type?: string, uri: string};\ntype FormDataNameValuePair = [string, FormDataValue];\n\ntype Headers = {[name: string]: string, ...};\ntype FormDataPart =\n  | {\n      string: string,\n      headers: Headers,\n      ...\n    }\n  | {\n      uri: string,\n      headers: Headers,\n      name?: string,\n      type?: string,\n      ...\n    };\n\n/**\n * Polyfill for XMLHttpRequest2 FormData API, allowing multipart POST requests\n * with mixed data (string, native files) to be submitted via XMLHttpRequest.\n *\n * Example:\n *\n *   var photo = {\n *     uri: uriFromCameraRoll,\n *     type: 'image/jpeg',\n *     name: 'photo.jpg',\n *   };\n *\n *   var body = new FormData();\n *   body.append('authToken', 'secret');\n *   body.append('photo', photo);\n *   body.append('title', 'A beautiful photo!');\n *\n *   xhr.open('POST', serverURL);\n *   xhr.send(body);\n */\nclass FormData {\n  _parts: Array<FormDataNameValuePair>;\n\n  constructor() {\n    this._parts = [];\n  }\n\n  append(key: string, value: FormDataValue) {\n    // The XMLHttpRequest spec doesn't specify if duplicate keys are allowed.\n    // MDN says that any new values should be appended to existing values.\n    // In any case, major browsers allow duplicate keys, so that's what we'll do\n    // too. They'll simply get appended as additional form data parts in the\n    // request body, leaving the server to deal with them.\n    this._parts.push([key, value]);\n  }\n\n  getAll(key: string): Array<FormDataValue> {\n    return this._parts\n      .filter(([name]) => name === key)\n      .map(([, value]) => value);\n  }\n\n  getParts(): Array<FormDataPart> {\n    return this._parts.map(([name, value]) => {\n      const contentDisposition = 'form-data; name=\"' + name + '\"';\n\n      const headers: Headers = {'content-disposition': contentDisposition};\n\n      // The body part is a \"blob\", which in React Native just means\n      // an object with a `uri` attribute. Optionally, it can also\n      // have a `name` and `type` attribute to specify filename and\n      // content type (cf. web Blob interface.)\n      if (typeof value === 'object' && !Array.isArray(value) && value) {\n        if (typeof value.name === 'string') {\n          headers['content-disposition'] += `; filename=\"${\n            value.name\n          }\"; filename*=utf-8''${encodeURI(value.name)}`;\n        }\n        if (typeof value.type === 'string') {\n          headers['content-type'] = value.type;\n        }\n        return {...value, headers, fieldName: name};\n      }\n      // Convert non-object values to strings as per FormData.append() spec\n      return {string: String(value), headers, fieldName: name};\n    });\n  }\n}\n\nmodule.exports = FormData;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}