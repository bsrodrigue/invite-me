{"ast":null,"code":"'use strict';\n\nimport Platform from '../Utilities/Platform';\nimport RCTDeviceEventEmitter from './RCTDeviceEventEmitter';\nimport invariant from 'invariant';\nexport default class NativeEventEmitter {\n  constructor(nativeModule) {\n    if (Platform.OS === 'ios') {\n      invariant(nativeModule != null, '`new NativeEventEmitter()` requires a non-null argument.');\n    }\n    const hasAddListener = !!nativeModule && typeof nativeModule.addListener === 'function';\n    const hasRemoveListeners = !!nativeModule && typeof nativeModule.removeListeners === 'function';\n    if (nativeModule && hasAddListener && hasRemoveListeners) {\n      this._nativeModule = nativeModule;\n    } else if (nativeModule != null) {\n      if (!hasAddListener) {\n        console.warn('`new NativeEventEmitter()` was called with a non-null argument without the required `addListener` method.');\n      }\n      if (!hasRemoveListeners) {\n        console.warn('`new NativeEventEmitter()` was called with a non-null argument without the required `removeListeners` method.');\n      }\n    }\n  }\n  addListener(eventType, listener, context) {\n    this._nativeModule?.addListener(eventType);\n    let subscription = RCTDeviceEventEmitter.addListener(eventType, listener, context);\n    return {\n      remove: () => {\n        if (subscription != null) {\n          this._nativeModule?.removeListeners(1);\n          subscription.remove();\n          subscription = null;\n        }\n      }\n    };\n  }\n  emit(eventType, ...args) {\n    RCTDeviceEventEmitter.emit(eventType, ...args);\n  }\n  removeAllListeners(eventType) {\n    invariant(eventType != null, '`NativeEventEmitter.removeAllListener()` requires a non-null argument.');\n    this._nativeModule?.removeListeners(this.listenerCount(eventType));\n    RCTDeviceEventEmitter.removeAllListeners(eventType);\n  }\n  listenerCount(eventType) {\n    return RCTDeviceEventEmitter.listenerCount(eventType);\n  }\n}","map":{"version":3,"names":["Platform","RCTDeviceEventEmitter","invariant","NativeEventEmitter","constructor","nativeModule","OS","hasAddListener","addListener","hasRemoveListeners","removeListeners","_nativeModule","console","warn","eventType","listener","context","subscription","remove","emit","args","removeAllListeners","listenerCount"],"sources":["/home/rodo/workspace/passion/apps/muh-money/node_modules/react-native/Libraries/EventEmitter/NativeEventEmitter.js"],"sourcesContent":["/**\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @flow strict-local\n * @format\n */\n\n'use strict';\n\nimport type {\n  EventSubscription,\n  IEventEmitter,\n} from '../vendor/emitter/EventEmitter';\n\nimport Platform from '../Utilities/Platform';\nimport RCTDeviceEventEmitter from './RCTDeviceEventEmitter';\nimport invariant from 'invariant';\n\ninterface NativeModule {\n  addListener(eventType: string): void;\n  removeListeners(count: number): void;\n}\n\nexport type {EventSubscription};\n\n/**\n * `NativeEventEmitter` is intended for use by Native Modules to emit events to\n * JavaScript listeners. If a `NativeModule` is supplied to the constructor, it\n * will be notified (via `addListener` and `removeListeners`) when the listener\n * count changes to manage \"native memory\".\n *\n * Currently, all native events are fired via a global `RCTDeviceEventEmitter`.\n * This means event names must be globally unique, and it means that call sites\n * can theoretically listen to `RCTDeviceEventEmitter` (although discouraged).\n */\nexport default class NativeEventEmitter<TEventToArgsMap: {...}>\n  implements IEventEmitter<TEventToArgsMap>\n{\n  _nativeModule: ?NativeModule;\n\n  constructor(nativeModule: ?NativeModule) {\n    if (Platform.OS === 'ios') {\n      invariant(\n        nativeModule != null,\n        '`new NativeEventEmitter()` requires a non-null argument.',\n      );\n    }\n\n    const hasAddListener =\n      // $FlowFixMe[method-unbinding] added when improving typing for this parameters\n      !!nativeModule && typeof nativeModule.addListener === 'function';\n    const hasRemoveListeners =\n      // $FlowFixMe[method-unbinding] added when improving typing for this parameters\n      !!nativeModule && typeof nativeModule.removeListeners === 'function';\n\n    if (nativeModule && hasAddListener && hasRemoveListeners) {\n      this._nativeModule = nativeModule;\n    } else if (nativeModule != null) {\n      if (!hasAddListener) {\n        console.warn(\n          '`new NativeEventEmitter()` was called with a non-null argument without the required `addListener` method.',\n        );\n      }\n      if (!hasRemoveListeners) {\n        console.warn(\n          '`new NativeEventEmitter()` was called with a non-null argument without the required `removeListeners` method.',\n        );\n      }\n    }\n  }\n\n  addListener<TEvent: $Keys<TEventToArgsMap>>(\n    eventType: TEvent,\n    listener: (...args: $ElementType<TEventToArgsMap, TEvent>) => mixed,\n    context?: mixed,\n  ): EventSubscription {\n    this._nativeModule?.addListener(eventType);\n    let subscription: ?EventSubscription = RCTDeviceEventEmitter.addListener(\n      eventType,\n      listener,\n      context,\n    );\n\n    return {\n      remove: () => {\n        if (subscription != null) {\n          this._nativeModule?.removeListeners(1);\n          // $FlowFixMe[incompatible-use]\n          subscription.remove();\n          subscription = null;\n        }\n      },\n    };\n  }\n\n  emit<TEvent: $Keys<TEventToArgsMap>>(\n    eventType: TEvent,\n    ...args: $ElementType<TEventToArgsMap, TEvent>\n  ): void {\n    // Generally, `RCTDeviceEventEmitter` is directly invoked. But this is\n    // included for completeness.\n    RCTDeviceEventEmitter.emit(eventType, ...args);\n  }\n\n  removeAllListeners<TEvent: $Keys<TEventToArgsMap>>(\n    eventType?: ?TEvent,\n  ): void {\n    invariant(\n      eventType != null,\n      '`NativeEventEmitter.removeAllListener()` requires a non-null argument.',\n    );\n    this._nativeModule?.removeListeners(this.listenerCount(eventType));\n    RCTDeviceEventEmitter.removeAllListeners(eventType);\n  }\n\n  listenerCount<TEvent: $Keys<TEventToArgsMap>>(eventType: TEvent): number {\n    return RCTDeviceEventEmitter.listenerCount(eventType);\n  }\n}\n"],"mappings":"AAUA,YAAY;;AAOZ,OAAOA,QAAQ,MAAM,uBAAuB;AAC5C,OAAOC,qBAAqB,MAAM,yBAAyB;AAC3D,OAAOC,SAAS,MAAM,WAAW;AAmBjC,eAAe,MAAMC,kBAAkB,CAEvC;EAGEC,WAAWA,CAACC,YAA2B,EAAE;IACvC,IAAIL,QAAQ,CAACM,EAAE,KAAK,KAAK,EAAE;MACzBJ,SAAS,CACPG,YAAY,IAAI,IAAI,EACpB,0DACF,CAAC;IACH;IAEA,MAAME,cAAc,GAElB,CAAC,CAACF,YAAY,IAAI,OAAOA,YAAY,CAACG,WAAW,KAAK,UAAU;IAClE,MAAMC,kBAAkB,GAEtB,CAAC,CAACJ,YAAY,IAAI,OAAOA,YAAY,CAACK,eAAe,KAAK,UAAU;IAEtE,IAAIL,YAAY,IAAIE,cAAc,IAAIE,kBAAkB,EAAE;MACxD,IAAI,CAACE,aAAa,GAAGN,YAAY;IACnC,CAAC,MAAM,IAAIA,YAAY,IAAI,IAAI,EAAE;MAC/B,IAAI,CAACE,cAAc,EAAE;QACnBK,OAAO,CAACC,IAAI,CACV,2GACF,CAAC;MACH;MACA,IAAI,CAACJ,kBAAkB,EAAE;QACvBG,OAAO,CAACC,IAAI,CACV,+GACF,CAAC;MACH;IACF;EACF;EAEAL,WAAWA,CACTM,SAAiB,EACjBC,QAAmE,EACnEC,OAAe,EACI;IACnB,IAAI,CAACL,aAAa,EAAEH,WAAW,CAACM,SAAS,CAAC;IAC1C,IAAIG,YAAgC,GAAGhB,qBAAqB,CAACO,WAAW,CACtEM,SAAS,EACTC,QAAQ,EACRC,OACF,CAAC;IAED,OAAO;MACLE,MAAM,EAAEA,CAAA,KAAM;QACZ,IAAID,YAAY,IAAI,IAAI,EAAE;UACxB,IAAI,CAACN,aAAa,EAAED,eAAe,CAAC,CAAC,CAAC;UAEtCO,YAAY,CAACC,MAAM,CAAC,CAAC;UACrBD,YAAY,GAAG,IAAI;QACrB;MACF;IACF,CAAC;EACH;EAEAE,IAAIA,CACFL,SAAiB,EACjB,GAAGM,IAA2C,EACxC;IAGNnB,qBAAqB,CAACkB,IAAI,CAACL,SAAS,EAAE,GAAGM,IAAI,CAAC;EAChD;EAEAC,kBAAkBA,CAChBP,SAAmB,EACb;IACNZ,SAAS,CACPY,SAAS,IAAI,IAAI,EACjB,wEACF,CAAC;IACD,IAAI,CAACH,aAAa,EAAED,eAAe,CAAC,IAAI,CAACY,aAAa,CAACR,SAAS,CAAC,CAAC;IAClEb,qBAAqB,CAACoB,kBAAkB,CAACP,SAAS,CAAC;EACrD;EAEAQ,aAAaA,CAAiCR,SAAiB,EAAU;IACvE,OAAOb,qBAAqB,CAACqB,aAAa,CAACR,SAAS,CAAC;EACvD;AACF","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}