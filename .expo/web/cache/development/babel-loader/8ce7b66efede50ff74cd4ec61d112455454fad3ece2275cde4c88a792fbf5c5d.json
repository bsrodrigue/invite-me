{"ast":null,"code":"import invariant from 'invariant';\nexport default class ChildListCollection {\n  _cellKeyToChildren = new Map();\n  _childrenToCellKey = new Map();\n  add(list, cellKey) {\n    invariant(!this._childrenToCellKey.has(list), 'Trying to add already present child list');\n    const cellLists = this._cellKeyToChildren.get(cellKey) ?? new Set();\n    cellLists.add(list);\n    this._cellKeyToChildren.set(cellKey, cellLists);\n    this._childrenToCellKey.set(list, cellKey);\n  }\n  remove(list) {\n    const cellKey = this._childrenToCellKey.get(list);\n    invariant(cellKey != null, 'Trying to remove non-present child list');\n    this._childrenToCellKey.delete(list);\n    const cellLists = this._cellKeyToChildren.get(cellKey);\n    invariant(cellLists, '_cellKeyToChildren should contain cellKey');\n    cellLists.delete(list);\n    if (cellLists.size === 0) {\n      this._cellKeyToChildren.delete(cellKey);\n    }\n  }\n  forEach(fn) {\n    for (const listSet of this._cellKeyToChildren.values()) {\n      for (const list of listSet) {\n        fn(list);\n      }\n    }\n  }\n  forEachInCell(cellKey, fn) {\n    const listSet = this._cellKeyToChildren.get(cellKey) ?? [];\n    for (const list of listSet) {\n      fn(list);\n    }\n  }\n  anyInCell(cellKey, fn) {\n    const listSet = this._cellKeyToChildren.get(cellKey) ?? [];\n    for (const list of listSet) {\n      if (fn(list)) {\n        return true;\n      }\n    }\n    return false;\n  }\n  size() {\n    return this._childrenToCellKey.size;\n  }\n}","map":{"version":3,"names":["invariant","ChildListCollection","_cellKeyToChildren","Map","_childrenToCellKey","add","list","cellKey","has","cellLists","get","Set","set","remove","delete","size","forEach","fn","listSet","values","forEachInCell","anyInCell"],"sources":["/home/rodo/workspace/passion/apps/muh-money/node_modules/@react-native/virtualized-lists/Lists/ChildListCollection.js"],"sourcesContent":["/**\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @flow strict\n * @format\n */\n\nimport invariant from 'invariant';\n\nexport default class ChildListCollection<TList> {\n  _cellKeyToChildren: Map<string, Set<TList>> = new Map();\n  _childrenToCellKey: Map<TList, string> = new Map();\n\n  add(list: TList, cellKey: string): void {\n    invariant(\n      !this._childrenToCellKey.has(list),\n      'Trying to add already present child list',\n    );\n\n    const cellLists = this._cellKeyToChildren.get(cellKey) ?? new Set();\n    cellLists.add(list);\n    this._cellKeyToChildren.set(cellKey, cellLists);\n\n    this._childrenToCellKey.set(list, cellKey);\n  }\n\n  remove(list: TList): void {\n    const cellKey = this._childrenToCellKey.get(list);\n    invariant(cellKey != null, 'Trying to remove non-present child list');\n    this._childrenToCellKey.delete(list);\n\n    const cellLists = this._cellKeyToChildren.get(cellKey);\n    invariant(cellLists, '_cellKeyToChildren should contain cellKey');\n    cellLists.delete(list);\n\n    if (cellLists.size === 0) {\n      this._cellKeyToChildren.delete(cellKey);\n    }\n  }\n\n  forEach(fn: TList => void): void {\n    for (const listSet of this._cellKeyToChildren.values()) {\n      for (const list of listSet) {\n        fn(list);\n      }\n    }\n  }\n\n  forEachInCell(cellKey: string, fn: TList => void): void {\n    const listSet = this._cellKeyToChildren.get(cellKey) ?? [];\n    for (const list of listSet) {\n      fn(list);\n    }\n  }\n\n  anyInCell(cellKey: string, fn: TList => boolean): boolean {\n    const listSet = this._cellKeyToChildren.get(cellKey) ?? [];\n    for (const list of listSet) {\n      if (fn(list)) {\n        return true;\n      }\n    }\n    return false;\n  }\n\n  size(): number {\n    return this._childrenToCellKey.size;\n  }\n}\n"],"mappings":"AAUA,OAAOA,SAAS,MAAM,WAAW;AAEjC,eAAe,MAAMC,mBAAmB,CAAQ;EAC9CC,kBAAkB,GAA4B,IAAIC,GAAG,CAAC,CAAC;EACvDC,kBAAkB,GAAuB,IAAID,GAAG,CAAC,CAAC;EAElDE,GAAGA,CAACC,IAAW,EAAEC,OAAe,EAAQ;IACtCP,SAAS,CACP,CAAC,IAAI,CAACI,kBAAkB,CAACI,GAAG,CAACF,IAAI,CAAC,EAClC,0CACF,CAAC;IAED,MAAMG,SAAS,GAAG,IAAI,CAACP,kBAAkB,CAACQ,GAAG,CAACH,OAAO,CAAC,IAAI,IAAII,GAAG,CAAC,CAAC;IACnEF,SAAS,CAACJ,GAAG,CAACC,IAAI,CAAC;IACnB,IAAI,CAACJ,kBAAkB,CAACU,GAAG,CAACL,OAAO,EAAEE,SAAS,CAAC;IAE/C,IAAI,CAACL,kBAAkB,CAACQ,GAAG,CAACN,IAAI,EAAEC,OAAO,CAAC;EAC5C;EAEAM,MAAMA,CAACP,IAAW,EAAQ;IACxB,MAAMC,OAAO,GAAG,IAAI,CAACH,kBAAkB,CAACM,GAAG,CAACJ,IAAI,CAAC;IACjDN,SAAS,CAACO,OAAO,IAAI,IAAI,EAAE,yCAAyC,CAAC;IACrE,IAAI,CAACH,kBAAkB,CAACU,MAAM,CAACR,IAAI,CAAC;IAEpC,MAAMG,SAAS,GAAG,IAAI,CAACP,kBAAkB,CAACQ,GAAG,CAACH,OAAO,CAAC;IACtDP,SAAS,CAACS,SAAS,EAAE,2CAA2C,CAAC;IACjEA,SAAS,CAACK,MAAM,CAACR,IAAI,CAAC;IAEtB,IAAIG,SAAS,CAACM,IAAI,KAAK,CAAC,EAAE;MACxB,IAAI,CAACb,kBAAkB,CAACY,MAAM,CAACP,OAAO,CAAC;IACzC;EACF;EAEAS,OAAOA,CAACC,EAAiB,EAAQ;IAC/B,KAAK,MAAMC,OAAO,IAAI,IAAI,CAAChB,kBAAkB,CAACiB,MAAM,CAAC,CAAC,EAAE;MACtD,KAAK,MAAMb,IAAI,IAAIY,OAAO,EAAE;QAC1BD,EAAE,CAACX,IAAI,CAAC;MACV;IACF;EACF;EAEAc,aAAaA,CAACb,OAAe,EAAEU,EAAiB,EAAQ;IACtD,MAAMC,OAAO,GAAG,IAAI,CAAChB,kBAAkB,CAACQ,GAAG,CAACH,OAAO,CAAC,IAAI,EAAE;IAC1D,KAAK,MAAMD,IAAI,IAAIY,OAAO,EAAE;MAC1BD,EAAE,CAACX,IAAI,CAAC;IACV;EACF;EAEAe,SAASA,CAACd,OAAe,EAAEU,EAAoB,EAAW;IACxD,MAAMC,OAAO,GAAG,IAAI,CAAChB,kBAAkB,CAACQ,GAAG,CAACH,OAAO,CAAC,IAAI,EAAE;IAC1D,KAAK,MAAMD,IAAI,IAAIY,OAAO,EAAE;MAC1B,IAAID,EAAE,CAACX,IAAI,CAAC,EAAE;QACZ,OAAO,IAAI;MACb;IACF;IACA,OAAO,KAAK;EACd;EAEAS,IAAIA,CAAA,EAAW;IACb,OAAO,IAAI,CAACX,kBAAkB,CAACW,IAAI;EACrC;AACF","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}