{"ast":null,"code":"'use strict';\n\nconst {\n  hasNativeConstructor\n} = require('../Utilities/FeatureDetection');\nconst {\n  polyfillGlobal\n} = require('../Utilities/PolyfillFunctions');\nlet hasNativeGenerator;\ntry {\n  hasNativeGenerator = hasNativeConstructor(function* () {}, 'GeneratorFunction');\n} catch {\n  hasNativeGenerator = false;\n}\nif (!hasNativeGenerator) {\n  polyfillGlobal('regeneratorRuntime', () => {\n    delete global.regeneratorRuntime;\n    return require('regenerator-runtime/runtime');\n  });\n}","map":{"version":3,"names":["hasNativeConstructor","require","polyfillGlobal","hasNativeGenerator","global","regeneratorRuntime"],"sources":["/home/rodo/workspace/passion/apps/muh-money/node_modules/react-native/Libraries/Core/setUpRegeneratorRuntime.js"],"sourcesContent":["/**\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @flow strict-local\n * @format\n */\n\n'use strict';\n\nconst {hasNativeConstructor} = require('../Utilities/FeatureDetection');\nconst {polyfillGlobal} = require('../Utilities/PolyfillFunctions');\n\n/**\n * Set up regenerator.\n * You can use this module directly, or just require InitializeCore.\n */\n\nlet hasNativeGenerator;\ntry {\n  // If this function was lowered by regenerator-transform, it will try to\n  // access `global.regeneratorRuntime` which doesn't exist yet and will throw.\n  hasNativeGenerator = hasNativeConstructor(\n    function* () {},\n    'GeneratorFunction',\n  );\n} catch {\n  // In this case, we know generators are not provided natively.\n  hasNativeGenerator = false;\n}\n\n// If generators are provided natively, which suggests that there was no\n// regenerator-transform, then there is no need to set up the runtime.\nif (!hasNativeGenerator) {\n  polyfillGlobal('regeneratorRuntime', () => {\n    // The require just sets up the global, so make sure when we first\n    // invoke it the global does not exist\n    delete global.regeneratorRuntime;\n\n    // regenerator-runtime/runtime exports the regeneratorRuntime object, so we\n    // can return it safely.\n    return require('regenerator-runtime/runtime'); // flowlint-line untyped-import:off\n  });\n}\n"],"mappings":"AAUA,YAAY;;AAEZ,MAAM;EAACA;AAAoB,CAAC,GAAGC,OAAO,CAAC,+BAA+B,CAAC;AACvE,MAAM;EAACC;AAAc,CAAC,GAAGD,OAAO,CAAC,gCAAgC,CAAC;AAOlE,IAAIE,kBAAkB;AACtB,IAAI;EAGFA,kBAAkB,GAAGH,oBAAoB,CACvC,aAAa,CAAC,CAAC,EACf,mBACF,CAAC;AACH,CAAC,CAAC,MAAM;EAENG,kBAAkB,GAAG,KAAK;AAC5B;AAIA,IAAI,CAACA,kBAAkB,EAAE;EACvBD,cAAc,CAAC,oBAAoB,EAAE,MAAM;IAGzC,OAAOE,MAAM,CAACC,kBAAkB;IAIhC,OAAOJ,OAAO,CAAC,6BAA6B,CAAC;EAC/C,CAAC,CAAC;AACJ","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}