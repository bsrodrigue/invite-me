{"ast":null,"code":"import { useEffect, useState } from 'react';\nimport { loadAsync, isLoaded } from './Font';\nfunction isMapLoaded(map) {\n  if (typeof map === 'string') {\n    return isLoaded(map);\n  } else {\n    return Object.keys(map).every(fontFamily => isLoaded(fontFamily));\n  }\n}\nfunction useRuntimeFonts(map) {\n  const [loaded, setLoaded] = useState(isMapLoaded(map));\n  const [error, setError] = useState(null);\n  useEffect(() => {\n    loadAsync(map).then(() => setLoaded(true)).catch(setError);\n  }, []);\n  return [loaded, error];\n}\nfunction useStaticFonts(map) {\n  loadAsync(map);\n  return [true, null];\n}\nexport const useFonts = false ? useStaticFonts : useRuntimeFonts;","map":{"version":3,"names":["useEffect","useState","loadAsync","isLoaded","isMapLoaded","map","Object","keys","every","fontFamily","useRuntimeFonts","loaded","setLoaded","error","setError","then","catch","useStaticFonts","useFonts"],"sources":["/home/rodo/workspace/passion/apps/muh-money/node_modules/expo-font/src/FontHooks.ts"],"sourcesContent":["import { useEffect, useState } from 'react';\n\nimport { loadAsync, isLoaded } from './Font';\nimport { FontSource } from './Font.types';\n\nfunction isMapLoaded(map: string | Record<string, FontSource>) {\n  if (typeof map === 'string') {\n    return isLoaded(map);\n  } else {\n    return Object.keys(map).every((fontFamily) => isLoaded(fontFamily));\n  }\n}\n\nfunction useRuntimeFonts(map: string | Record<string, FontSource>): [boolean, Error | null] {\n  const [loaded, setLoaded] = useState(\n    // For web rehydration, we need to check if the fonts are already loaded during the static render.\n    // Native will also benefit from this optimization.\n    isMapLoaded(map)\n  );\n  const [error, setError] = useState<Error | null>(null);\n\n  useEffect(() => {\n    loadAsync(map)\n      .then(() => setLoaded(true))\n      .catch(setError);\n  }, []);\n\n  return [loaded, error];\n}\n\nfunction useStaticFonts(map: string | Record<string, FontSource>): [boolean, Error | null] {\n  loadAsync(map);\n  return [true, null];\n}\n\n// @needsAudit\n/**\n * ```ts\n * const [loaded, error] = useFonts({ ... });\n * ```\n * Load a map of fonts with [`loadAsync`](#loadasyncfontfamilyorfontmap-source). This returns a `boolean` if the fonts are\n * loaded and ready to use. It also returns an error if something went wrong, to use in development.\n *\n * > Note, the fonts are not \"reloaded\" when you dynamically change the font map.\n *\n * @param map A map of `fontFamily`s to [`FontSource`](#fontsource)s. After loading the font you can\n * use the key in the `fontFamily` style prop of a `Text` element.\n *\n * @return\n * - __loaded__ (`boolean`) - A boolean to detect if the font for `fontFamily` has finished\n * loading.\n * - __error__ (`Error | null`) - An error encountered when loading the fonts.\n */\nexport const useFonts: (map: string | Record<string, FontSource>) => [boolean, Error | null] =\n  typeof window === 'undefined' ? useStaticFonts : useRuntimeFonts;\n"],"mappings":"AAAA,SAASA,SAAS,EAAEC,QAAQ,QAAQ,OAAO;AAE3C,SAASC,SAAS,EAAEC,QAAQ,QAAQ,QAAQ;AAG5C,SAASC,WAAWA,CAACC,GAAwC;EAC3D,IAAI,OAAOA,GAAG,KAAK,QAAQ,EAAE;IAC3B,OAAOF,QAAQ,CAACE,GAAG,CAAC;GACrB,MAAM;IACL,OAAOC,MAAM,CAACC,IAAI,CAACF,GAAG,CAAC,CAACG,KAAK,CAAEC,UAAU,IAAKN,QAAQ,CAACM,UAAU,CAAC,CAAC;;AAEvE;AAEA,SAASC,eAAeA,CAACL,GAAwC;EAC/D,MAAM,CAACM,MAAM,EAAEC,SAAS,CAAC,GAAGX,QAAQ,CAGlCG,WAAW,CAACC,GAAG,CAAC,CACjB;EACD,MAAM,CAACQ,KAAK,EAAEC,QAAQ,CAAC,GAAGb,QAAQ,CAAe,IAAI,CAAC;EAEtDD,SAAS,CAAC,MAAK;IACbE,SAAS,CAACG,GAAG,CAAC,CACXU,IAAI,CAAC,MAAMH,SAAS,CAAC,IAAI,CAAC,CAAC,CAC3BI,KAAK,CAACF,QAAQ,CAAC;EACpB,CAAC,EAAE,EAAE,CAAC;EAEN,OAAO,CAACH,MAAM,EAAEE,KAAK,CAAC;AACxB;AAEA,SAASI,cAAcA,CAACZ,GAAwC;EAC9DH,SAAS,CAACG,GAAG,CAAC;EACd,OAAO,CAAC,IAAI,EAAE,IAAI,CAAC;AACrB;AAoBA,OAAO,MAAMa,QAAQ,GACnB,QAAgCD,cAAc,GAAGP,eAAe","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}