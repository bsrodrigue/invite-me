{"ast":null,"code":"import { CodedError, Platform, UnavailabilityError } from 'expo-modules-core';\nimport ExpoFontLoader from './ExpoFontLoader';\nimport { FontDisplay } from './Font.types';\nimport { getAssetForSource, loadSingleFontAsync, fontFamilyNeedsScoping, getNativeFontName } from './FontLoader';\nimport { loaded, loadPromises } from './memory';\nimport { registerStaticFont } from './server';\nexport function processFontFamily(fontFamily) {\n  if (!fontFamily || !fontFamilyNeedsScoping(fontFamily)) {\n    return fontFamily;\n  }\n  if (!isLoaded(fontFamily)) {\n    if (__DEV__) {\n      if (isLoading(fontFamily)) {\n        console.warn(`You started loading the font \"${fontFamily}\", but used it before it finished loading. You need to wait for Font.loadAsync to complete before using the font.`);\n      } else {\n        console.warn(`fontFamily \"${fontFamily}\" is not a system font and has not been loaded through expo-font.`);\n      }\n    }\n  }\n  return `ExpoFont-${getNativeFontName(fontFamily)}`;\n}\nexport function isLoaded(fontFamily) {\n  if (Platform.OS === 'web') {\n    return fontFamily in loaded || !!ExpoFontLoader.isLoaded(fontFamily);\n  }\n  return fontFamily in loaded || ExpoFontLoader.customNativeFonts?.includes(fontFamily);\n}\nexport function isLoading(fontFamily) {\n  return fontFamily in loadPromises;\n}\nexport function loadAsync(fontFamilyOrFontMap, source) {\n  const isServer = Platform.OS === 'web' && false;\n  if (typeof fontFamilyOrFontMap === 'object') {\n    if (source) {\n      return Promise.reject(new CodedError(`ERR_FONT_API`, `No fontFamily can be used for the provided source: ${source}. The second argument of \\`loadAsync()\\` can only be used with a \\`string\\` value as the first argument.`));\n    }\n    const fontMap = fontFamilyOrFontMap;\n    const names = Object.keys(fontMap);\n    if (isServer) {\n      names.map(name => registerStaticFont(name, fontMap[name]));\n      return Promise.resolve();\n    }\n    return Promise.all(names.map(name => loadFontInNamespaceAsync(name, fontMap[name]))).then(() => {});\n  }\n  if (isServer) {\n    registerStaticFont(fontFamilyOrFontMap, source);\n    return Promise.resolve();\n  }\n  return loadFontInNamespaceAsync(fontFamilyOrFontMap, source);\n}\nasync function loadFontInNamespaceAsync(fontFamily, source) {\n  if (!source) {\n    throw new CodedError(`ERR_FONT_SOURCE`, `Cannot load null or undefined font source: { \"${fontFamily}\": ${source} }. Expected asset of type \\`FontSource\\` for fontFamily of name: \"${fontFamily}\"`);\n  }\n  if (loaded[fontFamily]) {\n    return;\n  }\n  if (loadPromises.hasOwnProperty(fontFamily)) {\n    return loadPromises[fontFamily];\n  }\n  const asset = getAssetForSource(source);\n  loadPromises[fontFamily] = (async () => {\n    try {\n      await loadSingleFontAsync(fontFamily, asset);\n      loaded[fontFamily] = true;\n    } finally {\n      delete loadPromises[fontFamily];\n    }\n  })();\n  await loadPromises[fontFamily];\n}\nexport async function unloadAllAsync() {\n  if (!ExpoFontLoader.unloadAllAsync) {\n    throw new UnavailabilityError('expo-font', 'unloadAllAsync');\n  }\n  if (Object.keys(loadPromises).length) {\n    throw new CodedError(`ERR_UNLOAD`, `Cannot unload fonts while they're still loading: ${Object.keys(loadPromises).join(', ')}`);\n  }\n  for (const fontFamily of Object.keys(loaded)) {\n    delete loaded[fontFamily];\n  }\n  await ExpoFontLoader.unloadAllAsync();\n}\nexport async function unloadAsync(fontFamilyOrFontMap, options) {\n  if (!ExpoFontLoader.unloadAsync) {\n    throw new UnavailabilityError('expo-font', 'unloadAsync');\n  }\n  if (typeof fontFamilyOrFontMap === 'object') {\n    if (options) {\n      throw new CodedError(`ERR_FONT_API`, `No fontFamily can be used for the provided options: ${options}. The second argument of \\`unloadAsync()\\` can only be used with a \\`string\\` value as the first argument.`);\n    }\n    const fontMap = fontFamilyOrFontMap;\n    const names = Object.keys(fontMap);\n    await Promise.all(names.map(name => unloadFontInNamespaceAsync(name, fontMap[name])));\n    return;\n  }\n  return await unloadFontInNamespaceAsync(fontFamilyOrFontMap, options);\n}\nasync function unloadFontInNamespaceAsync(fontFamily, options) {\n  if (!loaded[fontFamily]) {\n    return;\n  } else {\n    delete loaded[fontFamily];\n  }\n  const nativeFontName = getNativeFontName(fontFamily);\n  if (!nativeFontName) {\n    throw new CodedError(`ERR_FONT_FAMILY`, `Cannot unload an empty name`);\n  }\n  await ExpoFontLoader.unloadAsync(nativeFontName, options);\n}\nexport { FontDisplay };","map":{"version":3,"names":["CodedError","Platform","UnavailabilityError","ExpoFontLoader","FontDisplay","getAssetForSource","loadSingleFontAsync","fontFamilyNeedsScoping","getNativeFontName","loaded","loadPromises","registerStaticFont","processFontFamily","fontFamily","isLoaded","__DEV__","isLoading","console","warn","OS","customNativeFonts","includes","loadAsync","fontFamilyOrFontMap","source","isServer","Promise","reject","fontMap","names","Object","keys","map","name","resolve","all","loadFontInNamespaceAsync","then","hasOwnProperty","asset","unloadAllAsync","length","join","unloadAsync","options","unloadFontInNamespaceAsync","nativeFontName"],"sources":["/home/rodo/workspace/passion/apps/muh-money/node_modules/expo-font/src/Font.ts"],"sourcesContent":["import { CodedError, Platform, UnavailabilityError } from 'expo-modules-core';\n\nimport ExpoFontLoader from './ExpoFontLoader';\nimport { FontDisplay, FontSource, FontResource, UnloadFontOptions } from './Font.types';\nimport {\n  getAssetForSource,\n  loadSingleFontAsync,\n  fontFamilyNeedsScoping,\n  getNativeFontName,\n} from './FontLoader';\nimport { loaded, loadPromises } from './memory';\nimport { registerStaticFont } from './server';\n\n// @needsAudit\n// note(brentvatne): at some point we may want to warn if this is called outside of a managed app.\n/**\n * Used to transform font family names to the scoped name. This does not need to\n * be called in standalone or bare apps but it will return unscoped font family\n * names if it is called in those contexts.\n *\n * @param fontFamily Name of font to process.\n * @returns Returns a name processed for use with the [current workflow](https://docs.expo.dev/archive/managed-vs-bare/).\n */\nexport function processFontFamily(fontFamily: string | null): string | null {\n  if (!fontFamily || !fontFamilyNeedsScoping(fontFamily)) {\n    return fontFamily;\n  }\n\n  if (!isLoaded(fontFamily)) {\n    if (__DEV__) {\n      if (isLoading(fontFamily)) {\n        console.warn(\n          `You started loading the font \"${fontFamily}\", but used it before it finished loading. You need to wait for Font.loadAsync to complete before using the font.`\n        );\n      } else {\n        console.warn(\n          `fontFamily \"${fontFamily}\" is not a system font and has not been loaded through expo-font.`\n        );\n      }\n    }\n  }\n\n  return `ExpoFont-${getNativeFontName(fontFamily)}`;\n}\n\n// @needsAudit\n/**\n * Synchronously detect if the font for `fontFamily` has finished loading.\n *\n * @param fontFamily The name used to load the `FontResource`.\n * @return Returns `true` if the font has fully loaded.\n */\nexport function isLoaded(fontFamily: string): boolean {\n  if (Platform.OS === 'web') {\n    return fontFamily in loaded || !!ExpoFontLoader.isLoaded(fontFamily);\n  }\n  return fontFamily in loaded || ExpoFontLoader.customNativeFonts?.includes(fontFamily);\n}\n\n// @needsAudit\n/**\n * Synchronously detect if the font for `fontFamily` is still being loaded.\n *\n * @param fontFamily The name used to load the `FontResource`.\n * @returns Returns `true` if the font is still loading.\n */\nexport function isLoading(fontFamily: string): boolean {\n  return fontFamily in loadPromises;\n}\n\n// @needsAudit\n/**\n * Highly efficient method for loading fonts from static or remote resources which can then be used\n * with the platform's native text elements. In the browser this generates a `@font-face` block in\n * a shared style sheet for fonts. No CSS is needed to use this method.\n *\n * @param fontFamilyOrFontMap string or map of values that can be used as the [`fontFamily`](https://reactnative.dev/docs/text#style)\n * style prop with React Native Text elements.\n * @param source the font asset that should be loaded into the `fontFamily` namespace.\n *\n * @return Returns a promise that fulfils when the font has loaded. Often you may want to wrap the\n * method in a `try/catch/finally` to ensure the app continues if the font fails to load.\n */\nexport function loadAsync(\n  fontFamilyOrFontMap: string | Record<string, FontSource>,\n  source?: FontSource\n): Promise<void> {\n  // NOTE(EvanBacon): Static render pass on web must be synchronous to collect all fonts.\n  // Because of this, `loadAsync` doesn't use the `async` keyword and deviates from the\n  // standard Expo SDK style guide.\n  const isServer = Platform.OS === 'web' && typeof window === 'undefined';\n\n  if (typeof fontFamilyOrFontMap === 'object') {\n    if (source) {\n      return Promise.reject(\n        new CodedError(\n          `ERR_FONT_API`,\n          `No fontFamily can be used for the provided source: ${source}. The second argument of \\`loadAsync()\\` can only be used with a \\`string\\` value as the first argument.`\n        )\n      );\n    }\n    const fontMap = fontFamilyOrFontMap;\n    const names = Object.keys(fontMap);\n\n    if (isServer) {\n      names.map((name) => registerStaticFont(name, fontMap[name]));\n      return Promise.resolve();\n    }\n\n    return Promise.all(names.map((name) => loadFontInNamespaceAsync(name, fontMap[name]))).then(\n      () => {}\n    );\n  }\n\n  if (isServer) {\n    registerStaticFont(fontFamilyOrFontMap, source);\n    return Promise.resolve();\n  }\n\n  return loadFontInNamespaceAsync(fontFamilyOrFontMap, source);\n}\n\nasync function loadFontInNamespaceAsync(\n  fontFamily: string,\n  source?: FontSource | null\n): Promise<void> {\n  if (!source) {\n    throw new CodedError(\n      `ERR_FONT_SOURCE`,\n      `Cannot load null or undefined font source: { \"${fontFamily}\": ${source} }. Expected asset of type \\`FontSource\\` for fontFamily of name: \"${fontFamily}\"`\n    );\n  }\n\n  if (loaded[fontFamily]) {\n    return;\n  }\n\n  if (loadPromises.hasOwnProperty(fontFamily)) {\n    return loadPromises[fontFamily];\n  }\n\n  // Important: we want all callers that concurrently try to load the same font to await the same\n  // promise. If we're here, we haven't created the promise yet. To ensure we create only one\n  // promise in the program, we need to create the promise synchronously without yielding the event\n  // loop from this point.\n\n  const asset = getAssetForSource(source);\n  loadPromises[fontFamily] = (async () => {\n    try {\n      await loadSingleFontAsync(fontFamily, asset);\n      loaded[fontFamily] = true;\n    } finally {\n      delete loadPromises[fontFamily];\n    }\n  })();\n\n  await loadPromises[fontFamily];\n}\n\n// @needsAudit\n/**\n * Unloads all the custom fonts. This is used for testing.\n */\nexport async function unloadAllAsync(): Promise<void> {\n  if (!ExpoFontLoader.unloadAllAsync) {\n    throw new UnavailabilityError('expo-font', 'unloadAllAsync');\n  }\n\n  if (Object.keys(loadPromises).length) {\n    throw new CodedError(\n      `ERR_UNLOAD`,\n      `Cannot unload fonts while they're still loading: ${Object.keys(loadPromises).join(', ')}`\n    );\n  }\n\n  for (const fontFamily of Object.keys(loaded)) {\n    delete loaded[fontFamily];\n  }\n\n  await ExpoFontLoader.unloadAllAsync();\n}\n\n// @needsAudit\n/**\n * Unload custom fonts matching the `fontFamily`s and display values provided.\n * Because fonts are automatically unloaded on every platform this is mostly used for testing.\n *\n * @param fontFamilyOrFontMap The name or names of the custom fonts that will be unloaded.\n * @param options When `fontFamilyOrFontMap` is a string, this should be the font source used to load\n * the custom font originally.\n */\nexport async function unloadAsync(\n  fontFamilyOrFontMap: string | Record<string, UnloadFontOptions>,\n  options?: UnloadFontOptions\n): Promise<void> {\n  if (!ExpoFontLoader.unloadAsync) {\n    throw new UnavailabilityError('expo-font', 'unloadAsync');\n  }\n  if (typeof fontFamilyOrFontMap === 'object') {\n    if (options) {\n      throw new CodedError(\n        `ERR_FONT_API`,\n        `No fontFamily can be used for the provided options: ${options}. The second argument of \\`unloadAsync()\\` can only be used with a \\`string\\` value as the first argument.`\n      );\n    }\n    const fontMap = fontFamilyOrFontMap;\n    const names = Object.keys(fontMap);\n    await Promise.all(names.map((name) => unloadFontInNamespaceAsync(name, fontMap[name])));\n    return;\n  }\n\n  return await unloadFontInNamespaceAsync(fontFamilyOrFontMap, options);\n}\n\nasync function unloadFontInNamespaceAsync(\n  fontFamily: string,\n  options?: UnloadFontOptions | null\n): Promise<void> {\n  if (!loaded[fontFamily]) {\n    return;\n  } else {\n    delete loaded[fontFamily];\n  }\n\n  // Important: we want all callers that concurrently try to load the same font to await the same\n  // promise. If we're here, we haven't created the promise yet. To ensure we create only one\n  // promise in the program, we need to create the promise synchronously without yielding the event\n  // loop from this point.\n\n  const nativeFontName = getNativeFontName(fontFamily);\n\n  if (!nativeFontName) {\n    throw new CodedError(`ERR_FONT_FAMILY`, `Cannot unload an empty name`);\n  }\n\n  await ExpoFontLoader.unloadAsync(nativeFontName, options);\n}\n\nexport { FontDisplay, FontSource, FontResource, UnloadFontOptions };\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}