{"ast":null,"code":"import _defineProperty from \"@babel/runtime/helpers/defineProperty\";\nfunction ownKeys(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }\nfunction _objectSpread(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? ownKeys(Object(t), !0).forEach(function (r) { _defineProperty(e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; }\nimport { loadAsync } from \"expo-font\";\nimport * as SplashScreen from \"expo-splash-screen\";\nimport { useEffect, useState } from \"react\";\nimport client from \"../api/client\";\nimport { getJwtExpirationDate } from \"../lib/jwt\";\nimport { useAsyncStorage } from \"../lib/storage\";\nimport { useAccountStore, useBudgetStore, useUserStore } from \"../stores\";\nimport { useTransactionStore } from \"../stores/transaction.store\";\nexport default function useCachedResources() {\n  const [isLoadingComplete, setLoadingComplete] = useState(false);\n  const [session, setSession] = useState(null);\n  const [onboarding, setOnboarding] = useState();\n  const {\n    getData\n  } = useAsyncStorage();\n  const {\n    init: initAccounts\n  } = useAccountStore();\n  const {\n    init: initTransactions\n  } = useTransactionStore();\n  const {\n    init: initBudgets\n  } = useBudgetStore();\n  const {\n    update\n  } = useUserStore();\n  const quicksandFontConfig = {\n    \"font-regular\": require(\"../assets/fonts/Quicksand-Regular.ttf\"),\n    \"font-300\": require(\"../assets/fonts/Quicksand-Light.ttf\"),\n    \"font-500\": require(\"../assets/fonts/Quicksand-Medium.ttf\"),\n    \"font-600\": require(\"../assets/fonts/Quicksand-SemiBold.ttf\"),\n    \"font-700\": require(\"../assets/fonts/Quicksand-Bold.ttf\")\n  };\n  async function loadData() {\n    const accounts = await getData(\"accounts\");\n    const budgets = await getData(\"budgets\");\n    const transactions = await getData(\"transactions\");\n    const avatar = JSON.parse(await getData(\"avatar\"));\n    const username = JSON.parse(await getData(\"username\"));\n    update({\n      avatar,\n      username\n    });\n    const data = [accounts, budgets, transactions];\n    return data.map(item => {\n      const parsed = JSON.parse(item);\n      return parsed ?? [];\n    });\n  }\n  useEffect(() => {\n    async function loadResourcesAndDataAsync() {\n      try {\n        SplashScreen.preventAutoHideAsync();\n        await loadAsync(_objectSpread({}, quicksandFontConfig));\n        const [accounts, budgets, transactions] = await loadData();\n        initAccounts(accounts);\n        initBudgets(budgets);\n        initTransactions(transactions);\n        const jsonSession = await getData(\"session\");\n        const session = JSON.parse(jsonSession);\n        let expirationDate = null;\n        if (session?.token) {\n          expirationDate = getJwtExpirationDate(session.token);\n        }\n        if (expirationDate !== null && new Date() < expirationDate) {\n          client.defaults.headers.common.Authorization = `Bearer ${session.token}`;\n          setSession(session);\n        }\n        const onboarding = await getData(\"onboarding\");\n        setOnboarding(JSON.parse(onboarding));\n      } finally {\n        setLoadingComplete(true);\n        SplashScreen.hideAsync();\n      }\n    }\n    loadResourcesAndDataAsync();\n  }, []);\n  return {\n    isLoadingComplete,\n    session,\n    onboarding\n  };\n}","map":{"version":3,"names":["loadAsync","SplashScreen","useEffect","useState","client","getJwtExpirationDate","useAsyncStorage","useAccountStore","useBudgetStore","useUserStore","useTransactionStore","useCachedResources","isLoadingComplete","setLoadingComplete","session","setSession","onboarding","setOnboarding","getData","init","initAccounts","initTransactions","initBudgets","update","quicksandFontConfig","require","loadData","accounts","budgets","transactions","avatar","JSON","parse","username","data","map","item","parsed","loadResourcesAndDataAsync","preventAutoHideAsync","_objectSpread","jsonSession","expirationDate","token","Date","defaults","headers","common","Authorization","hideAsync"],"sources":["/home/rodo/workspace/passion/apps/muh-money/src/hooks/useCachedResources.ts"],"sourcesContent":["import { loadAsync } from \"expo-font\";\nimport * as SplashScreen from \"expo-splash-screen\";\nimport { useEffect, useState } from \"react\";\nimport client from \"../api/client\";\nimport { getJwtExpirationDate } from \"../lib/jwt\";\nimport { useAsyncStorage } from \"../lib/storage\";\nimport { Session } from \"../types/auth\";\nimport { useAccountStore, useBudgetStore, useUserStore } from \"../stores\";\nimport { useTransactionStore } from \"../stores/transaction.store\";\n\nexport default function useCachedResources() {\n  const [isLoadingComplete, setLoadingComplete] = useState(false);\n  const [session, setSession] = useState<Session>(null);\n  const [onboarding, setOnboarding] = useState();\n  const { getData } = useAsyncStorage();\n  const { init: initAccounts } = useAccountStore();\n  const { init: initTransactions } = useTransactionStore();\n  const { init: initBudgets } = useBudgetStore();\n  const { update } = useUserStore();\n\n  const quicksandFontConfig = {\n    \"font-regular\": require(\"../assets/fonts/Quicksand-Regular.ttf\"),\n    \"font-300\": require(\"../assets/fonts/Quicksand-Light.ttf\"),\n    \"font-500\": require(\"../assets/fonts/Quicksand-Medium.ttf\"),\n    \"font-600\": require(\"../assets/fonts/Quicksand-SemiBold.ttf\"),\n    \"font-700\": require(\"../assets/fonts/Quicksand-Bold.ttf\"),\n  };\n\n  async function loadData() {\n    const accounts = await getData(\"accounts\");\n    const budgets = await getData(\"budgets\");\n    const transactions = await getData(\"transactions\");\n\n    const avatar = JSON.parse(await getData(\"avatar\"));\n    const username = JSON.parse(await getData(\"username\"));\n\n    update({ avatar, username });\n\n    const data = [accounts, budgets, transactions];\n\n    return data.map((item) => {\n      const parsed = JSON.parse(item);\n\n      return parsed ?? [];\n    });\n  }\n\n  useEffect(() => {\n    async function loadResourcesAndDataAsync() {\n      try {\n\n        SplashScreen.preventAutoHideAsync();\n\n        await loadAsync({\n          ...quicksandFontConfig,\n        });\n\n        const [accounts, budgets, transactions] = await loadData();\n\n        initAccounts(accounts);\n        initBudgets(budgets);\n        initTransactions(transactions);\n\n        const jsonSession = await getData(\"session\");\n        const session = JSON.parse(jsonSession) as Session;\n\n        let expirationDate = null;\n\n        if (session?.token) {\n          expirationDate = getJwtExpirationDate(session.token);\n        }\n\n        if (expirationDate !== null && new Date() < expirationDate) {\n          client.defaults.headers.common.Authorization = `Bearer ${session.token}`\n          setSession(session);\n        }\n\n        const onboarding = await getData(\"onboarding\");\n        setOnboarding(JSON.parse(onboarding));\n\n      } finally {\n        setLoadingComplete(true);\n        SplashScreen.hideAsync();\n      }\n    }\n\n    loadResourcesAndDataAsync();\n  }, []);\n\n  return { isLoadingComplete, session, onboarding };\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}