{"ast":null,"code":"import * as LogBoxSymbolication from './LogBoxSymbolication';\nclass LogBoxLog {\n  symbolicated = {\n    error: null,\n    stack: null,\n    status: 'NONE'\n  };\n  constructor(data) {\n    this.level = data.level;\n    this.type = data.type;\n    this.message = data.message;\n    this.stack = data.stack;\n    this.category = data.category;\n    this.componentStack = data.componentStack;\n    this.codeFrame = data.codeFrame;\n    this.isComponentError = data.isComponentError;\n    this.extraData = data.extraData;\n    this.count = 1;\n  }\n  incrementCount() {\n    this.count += 1;\n  }\n  getAvailableStack() {\n    return this.symbolicated.status === 'COMPLETE' ? this.symbolicated.stack : this.stack;\n  }\n  retrySymbolicate(callback) {\n    if (this.symbolicated.status !== 'COMPLETE') {\n      LogBoxSymbolication.deleteStack(this.stack);\n      this.handleSymbolicate(callback);\n    }\n  }\n  symbolicate(callback) {\n    if (this.symbolicated.status === 'NONE') {\n      this.handleSymbolicate(callback);\n    }\n  }\n  handleSymbolicate(callback) {\n    if (this.symbolicated.status !== 'PENDING') {\n      this.updateStatus(null, null, null, callback);\n      LogBoxSymbolication.symbolicate(this.stack, this.extraData).then(data => {\n        this.updateStatus(null, data?.stack, data?.codeFrame, callback);\n      }, error => {\n        this.updateStatus(error, null, null, callback);\n      });\n    }\n  }\n  updateStatus(error, stack, codeFrame, callback) {\n    const lastStatus = this.symbolicated.status;\n    if (error != null) {\n      this.symbolicated = {\n        error,\n        stack: null,\n        status: 'FAILED'\n      };\n    } else if (stack != null) {\n      if (codeFrame) {\n        this.codeFrame = codeFrame;\n      }\n      this.symbolicated = {\n        error: null,\n        stack,\n        status: 'COMPLETE'\n      };\n    } else {\n      this.symbolicated = {\n        error: null,\n        stack: null,\n        status: 'PENDING'\n      };\n    }\n    if (callback && lastStatus !== this.symbolicated.status) {\n      callback(this.symbolicated.status);\n    }\n  }\n}\nexport default LogBoxLog;","map":{"version":3,"names":["LogBoxSymbolication","LogBoxLog","symbolicated","error","stack","status","constructor","data","level","type","message","category","componentStack","codeFrame","isComponentError","extraData","count","incrementCount","getAvailableStack","retrySymbolicate","callback","deleteStack","handleSymbolicate","symbolicate","updateStatus","then","lastStatus"],"sources":["/home/rodo/workspace/passion/apps/muh-money/node_modules/react-native/Libraries/LogBox/Data/LogBoxLog.js"],"sourcesContent":["/**\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @flow strict\n * @format\n */\n\nimport type {Stack} from './LogBoxSymbolication';\nimport type {\n  Category,\n  CodeFrame,\n  ComponentStack,\n  Message,\n} from './parseLogBoxLog';\n\nimport * as LogBoxSymbolication from './LogBoxSymbolication';\n\ntype SymbolicationStatus = 'NONE' | 'PENDING' | 'COMPLETE' | 'FAILED';\n\nexport type LogLevel = 'warn' | 'error' | 'fatal' | 'syntax';\n\nexport type LogBoxLogData = $ReadOnly<{|\n  level: LogLevel,\n  type?: ?string,\n  message: Message,\n  stack: Stack,\n  category: string,\n  componentStack: ComponentStack,\n  codeFrame?: ?CodeFrame,\n  isComponentError: boolean,\n  extraData?: mixed,\n|}>;\n\nclass LogBoxLog {\n  message: Message;\n  type: ?string;\n  category: Category;\n  componentStack: ComponentStack;\n  stack: Stack;\n  count: number;\n  level: LogLevel;\n  codeFrame: ?CodeFrame;\n  isComponentError: boolean;\n  extraData: mixed | void;\n  symbolicated:\n    | $ReadOnly<{|error: null, stack: null, status: 'NONE'|}>\n    | $ReadOnly<{|error: null, stack: null, status: 'PENDING'|}>\n    | $ReadOnly<{|error: null, stack: Stack, status: 'COMPLETE'|}>\n    | $ReadOnly<{|error: Error, stack: null, status: 'FAILED'|}> = {\n    error: null,\n    stack: null,\n    status: 'NONE',\n  };\n\n  constructor(data: LogBoxLogData) {\n    this.level = data.level;\n    this.type = data.type;\n    this.message = data.message;\n    this.stack = data.stack;\n    this.category = data.category;\n    this.componentStack = data.componentStack;\n    this.codeFrame = data.codeFrame;\n    this.isComponentError = data.isComponentError;\n    this.extraData = data.extraData;\n    this.count = 1;\n  }\n\n  incrementCount(): void {\n    this.count += 1;\n  }\n\n  getAvailableStack(): Stack {\n    return this.symbolicated.status === 'COMPLETE'\n      ? this.symbolicated.stack\n      : this.stack;\n  }\n\n  retrySymbolicate(callback?: (status: SymbolicationStatus) => void): void {\n    if (this.symbolicated.status !== 'COMPLETE') {\n      LogBoxSymbolication.deleteStack(this.stack);\n      this.handleSymbolicate(callback);\n    }\n  }\n\n  symbolicate(callback?: (status: SymbolicationStatus) => void): void {\n    if (this.symbolicated.status === 'NONE') {\n      this.handleSymbolicate(callback);\n    }\n  }\n\n  handleSymbolicate(callback?: (status: SymbolicationStatus) => void): void {\n    if (this.symbolicated.status !== 'PENDING') {\n      this.updateStatus(null, null, null, callback);\n      LogBoxSymbolication.symbolicate(this.stack, this.extraData).then(\n        data => {\n          this.updateStatus(null, data?.stack, data?.codeFrame, callback);\n        },\n        error => {\n          this.updateStatus(error, null, null, callback);\n        },\n      );\n    }\n  }\n\n  updateStatus(\n    error: ?Error,\n    stack: ?Stack,\n    codeFrame: ?CodeFrame,\n    callback?: (status: SymbolicationStatus) => void,\n  ): void {\n    const lastStatus = this.symbolicated.status;\n    if (error != null) {\n      this.symbolicated = {\n        error,\n        stack: null,\n        status: 'FAILED',\n      };\n    } else if (stack != null) {\n      if (codeFrame) {\n        this.codeFrame = codeFrame;\n      }\n\n      this.symbolicated = {\n        error: null,\n        stack,\n        status: 'COMPLETE',\n      };\n    } else {\n      this.symbolicated = {\n        error: null,\n        stack: null,\n        status: 'PENDING',\n      };\n    }\n\n    if (callback && lastStatus !== this.symbolicated.status) {\n      callback(this.symbolicated.status);\n    }\n  }\n}\n\nexport default LogBoxLog;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}