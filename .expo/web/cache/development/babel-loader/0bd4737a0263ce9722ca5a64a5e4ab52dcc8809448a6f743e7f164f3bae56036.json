{"ast":null,"code":"var _jsxFileName = \"/home/rodo/workspace/passion/apps/muh-money/node_modules/react-native/Libraries/Debugging/DebuggingOverlay.js\";\nimport View from '../Components/View/View';\nimport UIManager from '../ReactNative/UIManager';\nimport StyleSheet from '../StyleSheet/StyleSheet';\nimport DebuggingOverlayNativeComponent, { Commands } from './DebuggingOverlayNativeComponent';\nimport * as React from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst {\n  useRef,\n  useImperativeHandle\n} = React;\nconst isNativeComponentReady = UIManager.hasViewManagerConfig('DebuggingOverlay');\nfunction DebuggingOverlay(_props, ref) {\n  useImperativeHandle(ref, () => ({\n    highlightTraceUpdates(updates) {\n      if (!isNativeComponentReady) {\n        return;\n      }\n      const nonEmptyRectangles = updates.filter(({\n        rectangle,\n        color\n      }) => rectangle.width >= 0 && rectangle.height >= 0);\n      if (nativeComponentRef.current != null) {\n        Commands.highlightTraceUpdates(nativeComponentRef.current, nonEmptyRectangles);\n      }\n    },\n    highlightElements(elements) {\n      if (!isNativeComponentReady) {\n        return;\n      }\n      if (nativeComponentRef.current != null) {\n        Commands.highlightElements(nativeComponentRef.current, elements);\n      }\n    },\n    clearElementsHighlight() {\n      if (!isNativeComponentReady) {\n        return;\n      }\n      if (nativeComponentRef.current != null) {\n        Commands.clearElementsHighlights(nativeComponentRef.current);\n      }\n    }\n  }), []);\n  const nativeComponentRef = useRef(null);\n  return isNativeComponentReady && _jsxDEV(View, {\n    pointerEvents: \"none\",\n    style: styles.overlay,\n    children: _jsxDEV(DebuggingOverlayNativeComponent, {\n      ref: nativeComponentRef,\n      style: styles.overlay\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 86,\n      columnNumber: 9\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 85,\n    columnNumber: 7\n  }, this);\n}\nconst styles = StyleSheet.create({\n  overlay: {\n    position: 'absolute',\n    top: 0,\n    bottom: 0,\n    left: 0,\n    right: 0\n  }\n});\nconst DebuggingOverlayWithForwardedRef = React.forwardRef(DebuggingOverlay);\nexport default DebuggingOverlayWithForwardedRef;","map":{"version":3,"names":["View","UIManager","StyleSheet","DebuggingOverlayNativeComponent","Commands","React","jsxDEV","_jsxDEV","useRef","useImperativeHandle","isNativeComponentReady","hasViewManagerConfig","DebuggingOverlay","_props","ref","highlightTraceUpdates","updates","nonEmptyRectangles","filter","rectangle","color","width","height","nativeComponentRef","current","highlightElements","elements","clearElementsHighlight","clearElementsHighlights","pointerEvents","style","styles","overlay","children","fileName","_jsxFileName","lineNumber","columnNumber","create","position","top","bottom","left","right","DebuggingOverlayWithForwardedRef","forwardRef"],"sources":["/home/rodo/workspace/passion/apps/muh-money/node_modules/react-native/Libraries/Debugging/DebuggingOverlay.js"],"sourcesContent":["/**\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @flow strict-local\n * @format\n */\n\nimport type {\n  ElementRectangle,\n  TraceUpdate,\n} from './DebuggingOverlayNativeComponent';\n\nimport View from '../Components/View/View';\nimport UIManager from '../ReactNative/UIManager';\nimport StyleSheet from '../StyleSheet/StyleSheet';\nimport DebuggingOverlayNativeComponent, {\n  Commands,\n} from './DebuggingOverlayNativeComponent';\nimport * as React from 'react';\n\nconst {useRef, useImperativeHandle} = React;\nconst isNativeComponentReady =\n  UIManager.hasViewManagerConfig('DebuggingOverlay');\n\ntype DebuggingOverlayHandle = {\n  highlightTraceUpdates(updates: TraceUpdate[]): void,\n  highlightElements(elements: ElementRectangle[]): void,\n  clearElementsHighlight(): void,\n};\n\nfunction DebuggingOverlay(\n  _props: {},\n  ref: React.RefSetter<DebuggingOverlayHandle>,\n): React.Node {\n  useImperativeHandle(\n    ref,\n    () => ({\n      highlightTraceUpdates(updates) {\n        if (!isNativeComponentReady) {\n          return;\n        }\n\n        const nonEmptyRectangles = updates.filter(\n          ({rectangle, color}) => rectangle.width >= 0 && rectangle.height >= 0,\n        );\n\n        if (nativeComponentRef.current != null) {\n          Commands.highlightTraceUpdates(\n            nativeComponentRef.current,\n            nonEmptyRectangles,\n          );\n        }\n      },\n      highlightElements(elements) {\n        if (!isNativeComponentReady) {\n          return;\n        }\n\n        if (nativeComponentRef.current != null) {\n          Commands.highlightElements(nativeComponentRef.current, elements);\n        }\n      },\n      clearElementsHighlight() {\n        if (!isNativeComponentReady) {\n          return;\n        }\n\n        if (nativeComponentRef.current != null) {\n          Commands.clearElementsHighlights(nativeComponentRef.current);\n        }\n      },\n    }),\n    [],\n  );\n\n  const nativeComponentRef = useRef<React.ElementRef<\n    typeof DebuggingOverlayNativeComponent,\n  > | null>(null);\n\n  return (\n    isNativeComponentReady && (\n      <View pointerEvents=\"none\" style={styles.overlay}>\n        <DebuggingOverlayNativeComponent\n          ref={nativeComponentRef}\n          style={styles.overlay}\n        />\n      </View>\n    )\n  );\n}\n\nconst styles = StyleSheet.create({\n  overlay: {\n    position: 'absolute',\n    top: 0,\n    bottom: 0,\n    left: 0,\n    right: 0,\n  },\n});\n\nconst DebuggingOverlayWithForwardedRef: React.AbstractComponent<\n  {},\n  DebuggingOverlayHandle,\n  React.Node,\n> = React.forwardRef(DebuggingOverlay);\n\nexport default DebuggingOverlayWithForwardedRef;\n"],"mappings":";AAeA,OAAOA,IAAI,MAAM,yBAAyB;AAC1C,OAAOC,SAAS,MAAM,0BAA0B;AAChD,OAAOC,UAAU,MAAM,0BAA0B;AACjD,OAAOC,+BAA+B,IACpCC,QAAQ,QACH,mCAAmC;AAC1C,OAAO,KAAKC,KAAK,MAAM,OAAO;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAE/B,MAAM;EAACC,MAAM;EAAEC;AAAmB,CAAC,GAAGJ,KAAK;AAC3C,MAAMK,sBAAsB,GAC1BT,SAAS,CAACU,oBAAoB,CAAC,kBAAkB,CAAC;AAQpD,SAASC,gBAAgBA,CACvBC,MAAU,EACVC,GAA4C,EAChC;EACZL,mBAAmB,CACjBK,GAAG,EACH,OAAO;IACLC,qBAAqBA,CAACC,OAAO,EAAE;MAC7B,IAAI,CAACN,sBAAsB,EAAE;QAC3B;MACF;MAEA,MAAMO,kBAAkB,GAAGD,OAAO,CAACE,MAAM,CACvC,CAAC;QAACC,SAAS;QAAEC;MAAK,CAAC,KAAKD,SAAS,CAACE,KAAK,IAAI,CAAC,IAAIF,SAAS,CAACG,MAAM,IAAI,CACtE,CAAC;MAED,IAAIC,kBAAkB,CAACC,OAAO,IAAI,IAAI,EAAE;QACtCpB,QAAQ,CAACW,qBAAqB,CAC5BQ,kBAAkB,CAACC,OAAO,EAC1BP,kBACF,CAAC;MACH;IACF,CAAC;IACDQ,iBAAiBA,CAACC,QAAQ,EAAE;MAC1B,IAAI,CAAChB,sBAAsB,EAAE;QAC3B;MACF;MAEA,IAAIa,kBAAkB,CAACC,OAAO,IAAI,IAAI,EAAE;QACtCpB,QAAQ,CAACqB,iBAAiB,CAACF,kBAAkB,CAACC,OAAO,EAAEE,QAAQ,CAAC;MAClE;IACF,CAAC;IACDC,sBAAsBA,CAAA,EAAG;MACvB,IAAI,CAACjB,sBAAsB,EAAE;QAC3B;MACF;MAEA,IAAIa,kBAAkB,CAACC,OAAO,IAAI,IAAI,EAAE;QACtCpB,QAAQ,CAACwB,uBAAuB,CAACL,kBAAkB,CAACC,OAAO,CAAC;MAC9D;IACF;EACF,CAAC,CAAC,EACF,EACF,CAAC;EAED,MAAMD,kBAAkB,GAAGf,MAAM,CAEvB,IAAI,CAAC;EAEf,OACEE,sBAAsB,IACpBH,OAAA,CAACP,IAAI;IAAC6B,aAAa,EAAC,MAAM;IAACC,KAAK,EAAEC,MAAM,CAACC,OAAQ;IAAAC,QAAA,EAC/C1B,OAAA,CAACJ,+BAA+B;MAC9BW,GAAG,EAAES,kBAAmB;MACxBO,KAAK,EAAEC,MAAM,CAACC;IAAQ;MAAAE,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACvB;EAAC;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACE,CACP;AAEL;AAEA,MAAMN,MAAM,GAAG7B,UAAU,CAACoC,MAAM,CAAC;EAC/BN,OAAO,EAAE;IACPO,QAAQ,EAAE,UAAU;IACpBC,GAAG,EAAE,CAAC;IACNC,MAAM,EAAE,CAAC;IACTC,IAAI,EAAE,CAAC;IACPC,KAAK,EAAE;EACT;AACF,CAAC,CAAC;AAEF,MAAMC,gCAIL,GAAGvC,KAAK,CAACwC,UAAU,CAACjC,gBAAgB,CAAC;AAEtC,eAAegC,gCAAgC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}