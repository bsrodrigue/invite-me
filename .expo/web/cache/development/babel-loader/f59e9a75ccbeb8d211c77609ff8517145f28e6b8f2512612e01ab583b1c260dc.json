{"ast":null,"code":"'use strict';\n\nimport NativeAnimatedHelper from '../NativeAnimatedHelper';\nimport AnimatedProps from '../nodes/AnimatedProps';\nlet startNativeAnimationNextId = 1;\nexport default class Animation {\n  start(fromValue, onUpdate, onEnd, previousAnimation, animatedValue) {}\n  stop() {\n    if (this._nativeId) {\n      NativeAnimatedHelper.API.stopAnimation(this._nativeId);\n    }\n  }\n  __getNativeAnimationConfig() {\n    throw new Error('This animation type cannot be offloaded to native');\n  }\n  __debouncedOnEnd(result) {\n    const onEnd = this.__onEnd;\n    this.__onEnd = null;\n    onEnd && onEnd(result);\n  }\n  __findAnimatedPropsNodes(node) {\n    const result = [];\n    if (node instanceof AnimatedProps) {\n      result.push(node);\n      return result;\n    }\n    for (const child of node.__getChildren()) {\n      result.push(...this.__findAnimatedPropsNodes(child));\n    }\n    return result;\n  }\n  __startNativeAnimation(animatedValue) {\n    const startNativeAnimationWaitId = `${startNativeAnimationNextId}:startAnimation`;\n    startNativeAnimationNextId += 1;\n    NativeAnimatedHelper.API.setWaitingForIdentifier(startNativeAnimationWaitId);\n    try {\n      const config = this.__getNativeAnimationConfig();\n      animatedValue.__makeNative(config.platformConfig);\n      this._nativeId = NativeAnimatedHelper.generateNewAnimationId();\n      NativeAnimatedHelper.API.startAnimatingNode(this._nativeId, animatedValue.__getNativeTag(), config, result => {\n        this.__debouncedOnEnd(result);\n        const {\n          value\n        } = result;\n        if (value != null) {\n          animatedValue.__onAnimatedValueUpdateReceived(value);\n          this.__findAnimatedPropsNodes(animatedValue).forEach(node => node.update());\n        }\n      });\n    } catch (e) {\n      throw e;\n    } finally {\n      NativeAnimatedHelper.API.unsetWaitingForIdentifier(startNativeAnimationWaitId);\n    }\n  }\n}","map":{"version":3,"names":["NativeAnimatedHelper","AnimatedProps","startNativeAnimationNextId","Animation","start","fromValue","onUpdate","onEnd","previousAnimation","animatedValue","stop","_nativeId","API","stopAnimation","__getNativeAnimationConfig","Error","__debouncedOnEnd","result","__onEnd","__findAnimatedPropsNodes","node","push","child","__getChildren","__startNativeAnimation","startNativeAnimationWaitId","setWaitingForIdentifier","config","__makeNative","platformConfig","generateNewAnimationId","startAnimatingNode","__getNativeTag","value","__onAnimatedValueUpdateReceived","forEach","update","e","unsetWaitingForIdentifier"],"sources":["/home/rodo/workspace/passion/apps/muh-money/node_modules/react-native/Libraries/Animated/animations/Animation.js"],"sourcesContent":["/**\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @flow\n * @format\n */\n\n'use strict';\n\nimport type {PlatformConfig} from '../AnimatedPlatformConfig';\nimport type AnimatedNode from '../nodes/AnimatedNode';\nimport type AnimatedValue from '../nodes/AnimatedValue';\n\nimport NativeAnimatedHelper from '../NativeAnimatedHelper';\nimport AnimatedProps from '../nodes/AnimatedProps';\n\nexport type EndResult = {finished: boolean, value?: number, ...};\nexport type EndCallback = (result: EndResult) => void;\n\nexport type AnimationConfig = {\n  isInteraction?: boolean,\n  useNativeDriver: boolean,\n  platformConfig?: PlatformConfig,\n  onComplete?: ?EndCallback,\n  iterations?: number,\n};\n\nlet startNativeAnimationNextId = 1;\n\n// Important note: start() and stop() will only be called at most once.\n// Once an animation has been stopped or finished its course, it will\n// not be reused.\nexport default class Animation {\n  __active: boolean;\n  __isInteraction: boolean;\n  __onEnd: ?EndCallback;\n  __iterations: number;\n\n  _nativeId: number;\n\n  start(\n    fromValue: number,\n    onUpdate: (value: number) => void,\n    onEnd: ?EndCallback,\n    previousAnimation: ?Animation,\n    animatedValue: AnimatedValue,\n  ): void {}\n\n  stop(): void {\n    if (this._nativeId) {\n      NativeAnimatedHelper.API.stopAnimation(this._nativeId);\n    }\n  }\n\n  __getNativeAnimationConfig(): any {\n    // Subclasses that have corresponding animation implementation done in native\n    // should override this method\n    throw new Error('This animation type cannot be offloaded to native');\n  }\n\n  // Helper function for subclasses to make sure onEnd is only called once.\n  __debouncedOnEnd(result: EndResult): void {\n    const onEnd = this.__onEnd;\n    this.__onEnd = null;\n    onEnd && onEnd(result);\n  }\n\n  __findAnimatedPropsNodes(node: AnimatedNode): Array<AnimatedProps> {\n    const result = [];\n\n    if (node instanceof AnimatedProps) {\n      result.push(node);\n      return result;\n    }\n\n    for (const child of node.__getChildren()) {\n      result.push(...this.__findAnimatedPropsNodes(child));\n    }\n\n    return result;\n  }\n\n  __startNativeAnimation(animatedValue: AnimatedValue): void {\n    const startNativeAnimationWaitId = `${startNativeAnimationNextId}:startAnimation`;\n    startNativeAnimationNextId += 1;\n    NativeAnimatedHelper.API.setWaitingForIdentifier(\n      startNativeAnimationWaitId,\n    );\n    try {\n      const config = this.__getNativeAnimationConfig();\n      animatedValue.__makeNative(config.platformConfig);\n      this._nativeId = NativeAnimatedHelper.generateNewAnimationId();\n      NativeAnimatedHelper.API.startAnimatingNode(\n        this._nativeId,\n        animatedValue.__getNativeTag(),\n        config,\n        result => {\n          this.__debouncedOnEnd(result);\n\n          // When using natively driven animations, once the animation completes,\n          // we need to ensure that the JS side nodes are synced with the updated\n          // values.\n          const {value} = result;\n          if (value != null) {\n            animatedValue.__onAnimatedValueUpdateReceived(value);\n\n            // Once the JS side node is synced with the updated values, trigger an\n            // update on the AnimatedProps nodes to call any registered callbacks.\n            this.__findAnimatedPropsNodes(animatedValue).forEach(node =>\n              node.update(),\n            );\n          }\n        },\n      );\n    } catch (e) {\n      throw e;\n    } finally {\n      NativeAnimatedHelper.API.unsetWaitingForIdentifier(\n        startNativeAnimationWaitId,\n      );\n    }\n  }\n}\n"],"mappings":"AAUA,YAAY;;AAMZ,OAAOA,oBAAoB,MAAM,yBAAyB;AAC1D,OAAOC,aAAa,MAAM,wBAAwB;AAalD,IAAIC,0BAA0B,GAAG,CAAC;AAKlC,eAAe,MAAMC,SAAS,CAAC;EAQ7BC,KAAKA,CACHC,SAAiB,EACjBC,QAAiC,EACjCC,KAAmB,EACnBC,iBAA6B,EAC7BC,aAA4B,EACtB,CAAC;EAETC,IAAIA,CAAA,EAAS;IACX,IAAI,IAAI,CAACC,SAAS,EAAE;MAClBX,oBAAoB,CAACY,GAAG,CAACC,aAAa,CAAC,IAAI,CAACF,SAAS,CAAC;IACxD;EACF;EAEAG,0BAA0BA,CAAA,EAAQ;IAGhC,MAAM,IAAIC,KAAK,CAAC,mDAAmD,CAAC;EACtE;EAGAC,gBAAgBA,CAACC,MAAiB,EAAQ;IACxC,MAAMV,KAAK,GAAG,IAAI,CAACW,OAAO;IAC1B,IAAI,CAACA,OAAO,GAAG,IAAI;IACnBX,KAAK,IAAIA,KAAK,CAACU,MAAM,CAAC;EACxB;EAEAE,wBAAwBA,CAACC,IAAkB,EAAwB;IACjE,MAAMH,MAAM,GAAG,EAAE;IAEjB,IAAIG,IAAI,YAAYnB,aAAa,EAAE;MACjCgB,MAAM,CAACI,IAAI,CAACD,IAAI,CAAC;MACjB,OAAOH,MAAM;IACf;IAEA,KAAK,MAAMK,KAAK,IAAIF,IAAI,CAACG,aAAa,CAAC,CAAC,EAAE;MACxCN,MAAM,CAACI,IAAI,CAAC,GAAG,IAAI,CAACF,wBAAwB,CAACG,KAAK,CAAC,CAAC;IACtD;IAEA,OAAOL,MAAM;EACf;EAEAO,sBAAsBA,CAACf,aAA4B,EAAQ;IACzD,MAAMgB,0BAA0B,GAAG,GAAGvB,0BAA0B,iBAAiB;IACjFA,0BAA0B,IAAI,CAAC;IAC/BF,oBAAoB,CAACY,GAAG,CAACc,uBAAuB,CAC9CD,0BACF,CAAC;IACD,IAAI;MACF,MAAME,MAAM,GAAG,IAAI,CAACb,0BAA0B,CAAC,CAAC;MAChDL,aAAa,CAACmB,YAAY,CAACD,MAAM,CAACE,cAAc,CAAC;MACjD,IAAI,CAAClB,SAAS,GAAGX,oBAAoB,CAAC8B,sBAAsB,CAAC,CAAC;MAC9D9B,oBAAoB,CAACY,GAAG,CAACmB,kBAAkB,CACzC,IAAI,CAACpB,SAAS,EACdF,aAAa,CAACuB,cAAc,CAAC,CAAC,EAC9BL,MAAM,EACNV,MAAM,IAAI;QACR,IAAI,CAACD,gBAAgB,CAACC,MAAM,CAAC;QAK7B,MAAM;UAACgB;QAAK,CAAC,GAAGhB,MAAM;QACtB,IAAIgB,KAAK,IAAI,IAAI,EAAE;UACjBxB,aAAa,CAACyB,+BAA+B,CAACD,KAAK,CAAC;UAIpD,IAAI,CAACd,wBAAwB,CAACV,aAAa,CAAC,CAAC0B,OAAO,CAACf,IAAI,IACvDA,IAAI,CAACgB,MAAM,CAAC,CACd,CAAC;QACH;MACF,CACF,CAAC;IACH,CAAC,CAAC,OAAOC,CAAC,EAAE;MACV,MAAMA,CAAC;IACT,CAAC,SAAS;MACRrC,oBAAoB,CAACY,GAAG,CAAC0B,yBAAyB,CAChDb,0BACF,CAAC;IACH;EACF;AACF","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}