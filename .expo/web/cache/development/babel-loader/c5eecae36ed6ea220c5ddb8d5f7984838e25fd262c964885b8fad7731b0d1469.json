{"ast":null,"code":"'use strict';\n\nimport _defineProperty2 from \"@babel/runtime/helpers/defineProperty\";\nfunction ownKeys(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }\nfunction _objectSpread(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? ownKeys(Object(t), !0).forEach(function (r) { _defineProperty2(e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; }\nfunction _classPrivateFieldInitSpec(obj, privateMap, value) {\n  _checkPrivateRedeclaration(obj, privateMap);\n  privateMap.set(obj, value);\n}\nfunction _checkPrivateRedeclaration(obj, privateCollection) {\n  if (privateCollection.has(obj)) {\n    throw new TypeError(\"Cannot initialize the same private elements twice on an object\");\n  }\n}\nfunction _defineProperty(obj, key, value) {\n  key = _toPropertyKey(key);\n  if (key in obj) {\n    Object.defineProperty(obj, key, {\n      value: value,\n      enumerable: true,\n      configurable: true,\n      writable: true\n    });\n  } else {\n    obj[key] = value;\n  }\n  return obj;\n}\nfunction _toPropertyKey(t) {\n  var i = _toPrimitive(t, \"string\");\n  return \"symbol\" == typeof i ? i : i + \"\";\n}\nfunction _toPrimitive(t, r) {\n  if (\"object\" != typeof t || !t) return t;\n  var e = t[Symbol.toPrimitive];\n  if (void 0 !== e) {\n    var i = e.call(t, r || \"default\");\n    if (\"object\" != typeof i) return i;\n    throw new TypeError(\"@@toPrimitive must return a primitive value.\");\n  }\n  return (\"string\" === r ? String : Number)(t);\n}\nfunction _classPrivateFieldGet(s, a) {\n  return s.get(_assertClassBrand(s, a));\n}\nfunction _classPrivateFieldSet(s, a, r) {\n  return s.set(_assertClassBrand(s, a), r), r;\n}\nfunction _assertClassBrand(e, t, n) {\n  if (\"function\" == typeof e ? e === t : e.has(t)) return arguments.length < 3 ? t : n;\n  throw new TypeError(\"Private element is not present on this object\");\n}\nimport { registerEventHandler, unregisterEventHandler } from './core';\nimport { shouldBeUseWeb } from './PlatformChecker';\nconst SHOULD_BE_USE_WEB = shouldBeUseWeb();\nfunction jsListener(eventName, handler) {\n  return evt => {\n    handler(_objectSpread(_objectSpread({}, evt.nativeEvent), {}, {\n      eventName\n    }));\n  };\n}\nvar _viewTags = new WeakMap();\nvar _registrations = new WeakMap();\nclass WorkletEventHandlerNative {\n  constructor(worklet, eventNames) {\n    _defineProperty(this, \"eventNames\", void 0);\n    _defineProperty(this, \"worklet\", void 0);\n    _classPrivateFieldInitSpec(this, _viewTags, void 0);\n    _classPrivateFieldInitSpec(this, _registrations, void 0);\n    this.worklet = worklet;\n    this.eventNames = eventNames;\n    _classPrivateFieldSet(_viewTags, this, new Set());\n    _classPrivateFieldSet(_registrations, this, new Map());\n  }\n  updateEventHandler(newWorklet, newEvents) {\n    this.worklet = newWorklet;\n    this.eventNames = newEvents;\n    _classPrivateFieldGet(_registrations, this).forEach(registrationIDs => {\n      registrationIDs.forEach(id => unregisterEventHandler(id));\n    });\n    Array.from(_classPrivateFieldGet(_viewTags, this)).forEach(tag => {\n      const newRegistrations = this.eventNames.map(eventName => registerEventHandler(this.worklet, eventName, tag));\n      _classPrivateFieldGet(_registrations, this).set(tag, newRegistrations);\n    });\n  }\n  registerForEvents(viewTag, fallbackEventName) {\n    _classPrivateFieldGet(_viewTags, this).add(viewTag);\n    const newRegistrations = this.eventNames.map(eventName => registerEventHandler(this.worklet, eventName, viewTag));\n    _classPrivateFieldGet(_registrations, this).set(viewTag, newRegistrations);\n    if (this.eventNames.length === 0 && fallbackEventName) {\n      const newRegistration = registerEventHandler(this.worklet, fallbackEventName, viewTag);\n      _classPrivateFieldGet(_registrations, this).set(viewTag, [newRegistration]);\n    }\n  }\n  unregisterFromEvents(viewTag) {\n    var _classPrivateFieldGet2;\n    _classPrivateFieldGet(_viewTags, this).delete(viewTag);\n    (_classPrivateFieldGet2 = _classPrivateFieldGet(_registrations, this).get(viewTag)) === null || _classPrivateFieldGet2 === void 0 || _classPrivateFieldGet2.forEach(id => {\n      unregisterEventHandler(id);\n    });\n    _classPrivateFieldGet(_registrations, this).delete(viewTag);\n  }\n}\nclass WorkletEventHandlerWeb {\n  constructor(worklet, eventNames = []) {\n    _defineProperty(this, \"eventNames\", void 0);\n    _defineProperty(this, \"listeners\", void 0);\n    _defineProperty(this, \"worklet\", void 0);\n    this.worklet = worklet;\n    this.eventNames = eventNames;\n    this.listeners = {};\n    this.setupWebListeners();\n  }\n  setupWebListeners() {\n    this.listeners = {};\n    this.eventNames.forEach(eventName => {\n      this.listeners[eventName] = jsListener(eventName, this.worklet);\n    });\n  }\n  updateEventHandler(newWorklet, newEvents) {\n    this.worklet = newWorklet;\n    this.eventNames = newEvents;\n    this.setupWebListeners();\n  }\n  registerForEvents(_viewTag, _fallbackEventName) {}\n  unregisterFromEvents(_viewTag) {}\n}\nexport const WorkletEventHandler = SHOULD_BE_USE_WEB ? WorkletEventHandlerWeb : WorkletEventHandlerNative;","map":{"version":3,"names":["_defineProperty2","ownKeys","e","r","t","Object","keys","getOwnPropertySymbols","o","filter","getOwnPropertyDescriptor","enumerable","push","apply","_objectSpread","arguments","length","forEach","getOwnPropertyDescriptors","defineProperties","defineProperty","_classPrivateFieldInitSpec","obj","privateMap","value","_checkPrivateRedeclaration","set","privateCollection","has","TypeError","_defineProperty","key","_toPropertyKey","configurable","writable","i","_toPrimitive","Symbol","toPrimitive","call","String","Number","_classPrivateFieldGet","s","a","get","_assertClassBrand","_classPrivateFieldSet","n","registerEventHandler","unregisterEventHandler","shouldBeUseWeb","SHOULD_BE_USE_WEB","jsListener","eventName","handler","evt","nativeEvent","_viewTags","WeakMap","_registrations","WorkletEventHandlerNative","constructor","worklet","eventNames","Set","Map","updateEventHandler","newWorklet","newEvents","registrationIDs","id","Array","from","tag","newRegistrations","map","registerForEvents","viewTag","fallbackEventName","add","newRegistration","unregisterFromEvents","_classPrivateFieldGet2","delete","WorkletEventHandlerWeb","listeners","setupWebListeners","_viewTag","_fallbackEventName","WorkletEventHandler"],"sources":["/home/rodo/workspace/passion/apps/muh-money/node_modules/react-native-reanimated/lib/module/reanimated2/WorkletEventHandler.ts"],"sourcesContent":["'use strict';\nimport type { NativeSyntheticEvent } from 'react-native';\nimport { registerEventHandler, unregisterEventHandler } from './core';\nimport type {\n  EventPayload,\n  ReanimatedEvent,\n  IWorkletEventHandler,\n} from './hook/commonTypes';\nimport { shouldBeUseWeb } from './PlatformChecker';\n\nconst SHOULD_BE_USE_WEB = shouldBeUseWeb();\n\ntype JSEvent<Event extends object> = NativeSyntheticEvent<EventPayload<Event>>;\n\n// In JS implementation (e.g. for web) we don't use Reanimated's\n// event emitter, therefore we have to handle here\n// the event that came from React Native and convert it.\nfunction jsListener<Event extends object>(\n  eventName: string,\n  handler: (event: ReanimatedEvent<Event>) => void\n) {\n  return (evt: JSEvent<Event>) => {\n    handler({ ...evt.nativeEvent, eventName } as ReanimatedEvent<Event>);\n  };\n}\n\nclass WorkletEventHandlerNative<Event extends object>\n  implements IWorkletEventHandler<Event>\n{\n  eventNames: string[];\n  worklet: (event: ReanimatedEvent<Event>) => void;\n  #viewTags: Set<number>;\n  #registrations: Map<number, number[]>; // keys are viewTags, values are arrays of registration ID's for each viewTag\n  constructor(\n    worklet: (event: ReanimatedEvent<Event>) => void,\n    eventNames: string[]\n  ) {\n    this.worklet = worklet;\n    this.eventNames = eventNames;\n    this.#viewTags = new Set<number>();\n    this.#registrations = new Map<number, number[]>();\n  }\n\n  updateEventHandler(\n    newWorklet: (event: ReanimatedEvent<Event>) => void,\n    newEvents: string[]\n  ): void {\n    // Update worklet and event names\n    this.worklet = newWorklet;\n    this.eventNames = newEvents;\n\n    // Detach all events\n    this.#registrations.forEach((registrationIDs) => {\n      registrationIDs.forEach((id) => unregisterEventHandler(id));\n      // No need to remove registrationIDs from map, since it gets overwritten when attaching\n    });\n\n    // Attach new events with new worklet\n    Array.from(this.#viewTags).forEach((tag) => {\n      const newRegistrations = this.eventNames.map((eventName) =>\n        registerEventHandler(this.worklet, eventName, tag)\n      );\n      this.#registrations.set(tag, newRegistrations);\n    });\n  }\n\n  registerForEvents(viewTag: number, fallbackEventName?: string): void {\n    this.#viewTags.add(viewTag);\n\n    const newRegistrations = this.eventNames.map((eventName) =>\n      registerEventHandler(this.worklet, eventName, viewTag)\n    );\n    this.#registrations.set(viewTag, newRegistrations);\n\n    if (this.eventNames.length === 0 && fallbackEventName) {\n      const newRegistration = registerEventHandler(\n        this.worklet,\n        fallbackEventName,\n        viewTag\n      );\n      this.#registrations.set(viewTag, [newRegistration]);\n    }\n  }\n\n  unregisterFromEvents(viewTag: number): void {\n    this.#viewTags.delete(viewTag);\n    this.#registrations.get(viewTag)?.forEach((id) => {\n      unregisterEventHandler(id);\n    });\n    this.#registrations.delete(viewTag);\n  }\n}\n\nclass WorkletEventHandlerWeb<Event extends object>\n  implements IWorkletEventHandler<Event>\n{\n  eventNames: string[];\n  listeners:\n    | Record<string, (event: ReanimatedEvent<ReanimatedEvent<Event>>) => void>\n    | Record<string, (event: JSEvent<Event>) => void>;\n\n  worklet: (event: ReanimatedEvent<Event>) => void;\n\n  constructor(\n    worklet: (event: ReanimatedEvent<Event>) => void,\n    eventNames: string[] = []\n  ) {\n    this.worklet = worklet;\n    this.eventNames = eventNames;\n    this.listeners = {};\n    this.setupWebListeners();\n  }\n\n  setupWebListeners() {\n    this.listeners = {};\n    this.eventNames.forEach((eventName) => {\n      this.listeners[eventName] = jsListener(eventName, this.worklet);\n    });\n  }\n\n  updateEventHandler(\n    newWorklet: (event: ReanimatedEvent<Event>) => void,\n    newEvents: string[]\n  ): void {\n    // Update worklet and event names\n    this.worklet = newWorklet;\n    this.eventNames = newEvents;\n    this.setupWebListeners();\n  }\n\n  registerForEvents(_viewTag: number, _fallbackEventName?: string): void {\n    // noop\n  }\n\n  unregisterFromEvents(_viewTag: number): void {\n    // noop\n  }\n}\n\nexport const WorkletEventHandler = SHOULD_BE_USE_WEB\n  ? WorkletEventHandlerWeb\n  : WorkletEventHandlerNative;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}