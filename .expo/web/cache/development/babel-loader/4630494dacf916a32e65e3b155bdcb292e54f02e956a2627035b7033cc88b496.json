{"ast":null,"code":"'use strict';\n\nimport { isJest } from './PlatformChecker';\nimport { runOnUI } from './threads';\nimport { isSharedValue } from './isSharedValue';\nconst IS_JEST = isJest();\nconst _worklet_5405073416202_init_data = {\n  code: \"function createMapperRegistry(){const{IS_JEST,isSharedValue}=this.__closure;const mappers=new Map();let sortedMappers=[];let runRequested=false;let processingMappers=false;function updateMappersOrder(){const pre=new Map();mappers.forEach(function(mapper){if(mapper.outputs){for(const output of mapper.outputs){const preMappers=pre.get(output);if(preMappers===undefined){pre.set(output,[mapper]);}else{preMappers.push(mapper);}}}});const visited=new Set();const newOrder=[];function dfs(mapper){visited.add(mapper);for(const input of mapper.inputs){const preMappers=pre.get(input);if(preMappers){for(const preMapper of preMappers){if(!visited.has(preMapper)){dfs(preMapper);}}}}newOrder.push(mapper);}mappers.forEach(function(mapper){if(!visited.has(mapper)){dfs(mapper);}});sortedMappers=newOrder;}function mapperRun(){runRequested=false;if(processingMappers){return;}try{processingMappers=true;if(mappers.size!==sortedMappers.length){updateMappersOrder();}for(const mapper of sortedMappers){if(mapper.dirty){mapper.dirty=false;mapper.worklet();}}}finally{processingMappers=false;}}function maybeRequestUpdates(){if(IS_JEST){mapperRun();}else if(!runRequested){if(processingMappers){requestAnimationFrame(mapperRun);}else{queueMicrotask(mapperRun);}runRequested=true;}}function extractInputs(inputs,resultArray){if(Array.isArray(inputs)){for(const input of inputs){input&&extractInputs(input,resultArray);}}else if(isSharedValue(inputs)){resultArray.push(inputs);}else if(Object.getPrototypeOf(inputs)===Object.prototype){for(const element of Object.values(inputs)){element&&extractInputs(element,resultArray);}}return resultArray;}return{start:function(mapperID,worklet,inputs,outputs){const mapper={id:mapperID,dirty:true,worklet:worklet,inputs:extractInputs(inputs,[]),outputs:outputs};mappers.set(mapper.id,mapper);sortedMappers=[];for(const sv of mapper.inputs){sv.addListener(mapper.id,function(){mapper.dirty=true;maybeRequestUpdates();});}maybeRequestUpdates();},stop:function(mapperID){const mapper=mappers.get(mapperID);if(mapper){mappers.delete(mapper.id);sortedMappers=[];for(const sv of mapper.inputs){sv.removeListener(mapper.id);}}}};}\",\n  location: \"/home/rodo/workspace/passion/apps/muh-money/node_modules/react-native-reanimated/lib/module/reanimated2/mappers.js\",\n  sourceMap: \"{\\\"version\\\":3,\\\"names\\\":[\\\"createMapperRegistry\\\",\\\"IS_JEST\\\",\\\"isSharedValue\\\",\\\"__closure\\\",\\\"mappers\\\",\\\"Map\\\",\\\"sortedMappers\\\",\\\"runRequested\\\",\\\"processingMappers\\\",\\\"updateMappersOrder\\\",\\\"pre\\\",\\\"forEach\\\",\\\"mapper\\\",\\\"outputs\\\",\\\"output\\\",\\\"preMappers\\\",\\\"get\\\",\\\"undefined\\\",\\\"set\\\",\\\"push\\\",\\\"visited\\\",\\\"Set\\\",\\\"newOrder\\\",\\\"dfs\\\",\\\"add\\\",\\\"input\\\",\\\"inputs\\\",\\\"preMapper\\\",\\\"has\\\",\\\"mapperRun\\\",\\\"size\\\",\\\"length\\\",\\\"dirty\\\",\\\"worklet\\\",\\\"maybeRequestUpdates\\\",\\\"requestAnimationFrame\\\",\\\"queueMicrotask\\\",\\\"extractInputs\\\",\\\"resultArray\\\",\\\"Array\\\",\\\"isArray\\\",\\\"Object\\\",\\\"getPrototypeOf\\\",\\\"prototype\\\",\\\"element\\\",\\\"values\\\",\\\"start\\\",\\\"mapperID\\\",\\\"id\\\",\\\"sv\\\",\\\"addListener\\\",\\\"stop\\\",\\\"delete\\\",\\\"removeListener\\\"],\\\"sources\\\":[\\\"/home/rodo/workspace/passion/apps/muh-money/node_modules/react-native-reanimated/lib/module/reanimated2/mappers.js\\\"],\\\"mappings\\\":\\\"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\\\",\\\"ignoreList\\\":[]}\",\n  version: \"3.10.1\"\n};\nconst createMapperRegistry = function () {\n  const _e = [new global.Error(), -3, -27];\n  const createMapperRegistry = function () {\n    const mappers = new Map();\n    let sortedMappers = [];\n    let runRequested = false;\n    let processingMappers = false;\n    function updateMappersOrder() {\n      const pre = new Map();\n      mappers.forEach(mapper => {\n        if (mapper.outputs) {\n          for (const output of mapper.outputs) {\n            const preMappers = pre.get(output);\n            if (preMappers === undefined) {\n              pre.set(output, [mapper]);\n            } else {\n              preMappers.push(mapper);\n            }\n          }\n        }\n      });\n      const visited = new Set();\n      const newOrder = [];\n      function dfs(mapper) {\n        visited.add(mapper);\n        for (const input of mapper.inputs) {\n          const preMappers = pre.get(input);\n          if (preMappers) {\n            for (const preMapper of preMappers) {\n              if (!visited.has(preMapper)) {\n                dfs(preMapper);\n              }\n            }\n          }\n        }\n        newOrder.push(mapper);\n      }\n      mappers.forEach(mapper => {\n        if (!visited.has(mapper)) {\n          dfs(mapper);\n        }\n      });\n      sortedMappers = newOrder;\n    }\n    function mapperRun() {\n      runRequested = false;\n      if (processingMappers) {\n        return;\n      }\n      try {\n        processingMappers = true;\n        if (mappers.size !== sortedMappers.length) {\n          updateMappersOrder();\n        }\n        for (const mapper of sortedMappers) {\n          if (mapper.dirty) {\n            mapper.dirty = false;\n            mapper.worklet();\n          }\n        }\n      } finally {\n        processingMappers = false;\n      }\n    }\n    function maybeRequestUpdates() {\n      if (IS_JEST) {\n        mapperRun();\n      } else if (!runRequested) {\n        if (processingMappers) {\n          requestAnimationFrame(mapperRun);\n        } else {\n          queueMicrotask(mapperRun);\n        }\n        runRequested = true;\n      }\n    }\n    function extractInputs(inputs, resultArray) {\n      if (Array.isArray(inputs)) {\n        for (const input of inputs) {\n          input && extractInputs(input, resultArray);\n        }\n      } else if (isSharedValue(inputs)) {\n        resultArray.push(inputs);\n      } else if (Object.getPrototypeOf(inputs) === Object.prototype) {\n        for (const element of Object.values(inputs)) {\n          element && extractInputs(element, resultArray);\n        }\n      }\n      return resultArray;\n    }\n    return {\n      start: (mapperID, worklet, inputs, outputs) => {\n        const mapper = {\n          id: mapperID,\n          dirty: true,\n          worklet,\n          inputs: extractInputs(inputs, []),\n          outputs\n        };\n        mappers.set(mapper.id, mapper);\n        sortedMappers = [];\n        for (const sv of mapper.inputs) {\n          sv.addListener(mapper.id, () => {\n            mapper.dirty = true;\n            maybeRequestUpdates();\n          });\n        }\n        maybeRequestUpdates();\n      },\n      stop: mapperID => {\n        const mapper = mappers.get(mapperID);\n        if (mapper) {\n          mappers.delete(mapper.id);\n          sortedMappers = [];\n          for (const sv of mapper.inputs) {\n            sv.removeListener(mapper.id);\n          }\n        }\n      }\n    };\n  };\n  createMapperRegistry.__closure = {\n    IS_JEST,\n    isSharedValue\n  };\n  createMapperRegistry.__workletHash = 5405073416202;\n  createMapperRegistry.__initData = _worklet_5405073416202_init_data;\n  createMapperRegistry.__stackDetails = _e;\n  return createMapperRegistry;\n}();\nlet MAPPER_ID = 9999;\nconst _worklet_16857838132571_init_data = {\n  code: \"function anonymous(){const{createMapperRegistry,mapperID,worklet,inputs,outputs}=this.__closure;let mapperRegistry=global.__mapperRegistry;if(mapperRegistry===undefined){mapperRegistry=global.__mapperRegistry=createMapperRegistry();}mapperRegistry.start(mapperID,worklet,inputs,outputs);}\",\n  location: \"/home/rodo/workspace/passion/apps/muh-money/node_modules/react-native-reanimated/lib/module/reanimated2/mappers.js\",\n  sourceMap: \"{\\\"version\\\":3,\\\"names\\\":[\\\"anonymous\\\",\\\"createMapperRegistry\\\",\\\"mapperID\\\",\\\"worklet\\\",\\\"inputs\\\",\\\"outputs\\\",\\\"__closure\\\",\\\"mapperRegistry\\\",\\\"global\\\",\\\"__mapperRegistry\\\",\\\"undefined\\\",\\\"start\\\"],\\\"sources\\\":[\\\"/home/rodo/workspace/passion/apps/muh-money/node_modules/react-native-reanimated/lib/module/reanimated2/mappers.js\\\"],\\\"mappings\\\":\\\"AA0KU,SAAAA,SAAMA,CAAA,QAAAC,oBAAA,CAAAC,QAAA,CAAAC,OAAA,CAAAC,MAAA,CAAAC,OAAA,OAAAC,SAAA,CACZ,GAAI,CAAAC,cAAc,CAAGC,MAAM,CAACC,gBAAgB,CAC5C,GAAIF,cAAc,GAAKG,SAAS,CAAE,CAChCH,cAAc,CAAGC,MAAM,CAACC,gBAAgB,CAAGR,oBAAoB,CAAC,CAAC,CACnE,CACAM,cAAc,CAACI,KAAK,CAACT,QAAQ,CAAEC,OAAO,CAAEC,MAAM,CAAEC,OAAO,CAAC,CAC1D\\\",\\\"ignoreList\\\":[]}\",\n  version: \"3.10.1\"\n};\nexport function startMapper(worklet, inputs = [], outputs = []) {\n  const mapperID = MAPPER_ID += 1;\n  runOnUI(function () {\n    const _e = [new global.Error(), -6, -27];\n    const anonymous = function () {\n      let mapperRegistry = global.__mapperRegistry;\n      if (mapperRegistry === undefined) {\n        mapperRegistry = global.__mapperRegistry = createMapperRegistry();\n      }\n      mapperRegistry.start(mapperID, worklet, inputs, outputs);\n    };\n    anonymous.__closure = {\n      createMapperRegistry,\n      mapperID,\n      worklet,\n      inputs,\n      outputs\n    };\n    anonymous.__workletHash = 16857838132571;\n    anonymous.__initData = _worklet_16857838132571_init_data;\n    anonymous.__stackDetails = _e;\n    return anonymous;\n  }())();\n  return mapperID;\n}\nconst _worklet_13820995592470_init_data = {\n  code: \"function anonymous(){const{mapperID}=this.__closure;const mapperRegistry=global.__mapperRegistry;mapperRegistry===null||mapperRegistry===void 0||mapperRegistry.stop(mapperID);}\",\n  location: \"/home/rodo/workspace/passion/apps/muh-money/node_modules/react-native-reanimated/lib/module/reanimated2/mappers.js\",\n  sourceMap: \"{\\\"version\\\":3,\\\"names\\\":[\\\"anonymous\\\",\\\"mapperID\\\",\\\"__closure\\\",\\\"mapperRegistry\\\",\\\"global\\\",\\\"__mapperRegistry\\\",\\\"stop\\\"],\\\"sources\\\":[\\\"/home/rodo/workspace/passion/apps/muh-money/node_modules/react-native-reanimated/lib/module/reanimated2/mappers.js\\\"],\\\"mappings\\\":\\\"AAoLU,SAAAA,SAAMA,CAAA,QAAAC,QAAA,OAAAC,SAAA,CACZ,KAAM,CAAAC,cAAc,CAAGC,MAAM,CAACC,gBAAgB,CAC9CF,cAAc,GAAK,IAAI,EAAIA,cAAc,GAAK,IAAK,EAAC,EAAIA,cAAc,CAACG,IAAI,CAACL,QAAQ,CAAC,CACvF\\\",\\\"ignoreList\\\":[]}\",\n  version: \"3.10.1\"\n};\nexport function stopMapper(mapperID) {\n  runOnUI(function () {\n    const _e = [new global.Error(), -2, -27];\n    const anonymous = function () {\n      const mapperRegistry = global.__mapperRegistry;\n      mapperRegistry === null || mapperRegistry === void 0 || mapperRegistry.stop(mapperID);\n    };\n    anonymous.__closure = {\n      mapperID\n    };\n    anonymous.__workletHash = 13820995592470;\n    anonymous.__initData = _worklet_13820995592470_init_data;\n    anonymous.__stackDetails = _e;\n    return anonymous;\n  }())();\n}","map":{"version":3,"names":["isJest","runOnUI","isSharedValue","IS_JEST","_worklet_5405073416202_init_data","code","location","sourceMap","version","createMapperRegistry","_e","global","Error","mappers","Map","sortedMappers","runRequested","processingMappers","updateMappersOrder","pre","forEach","mapper","outputs","output","preMappers","get","undefined","set","push","visited","Set","newOrder","dfs","add","input","inputs","preMapper","has","mapperRun","size","length","dirty","worklet","maybeRequestUpdates","requestAnimationFrame","queueMicrotask","extractInputs","resultArray","Array","isArray","Object","getPrototypeOf","prototype","element","values","start","mapperID","id","sv","addListener","stop","delete","removeListener","__closure","__workletHash","__initData","__stackDetails","MAPPER_ID","_worklet_16857838132571_init_data","startMapper","anonymous","mapperRegistry","__mapperRegistry","_worklet_13820995592470_init_data","stopMapper"],"sources":["/home/rodo/workspace/passion/apps/muh-money/node_modules/react-native-reanimated/lib/module/reanimated2/mappers.ts"],"sourcesContent":["'use strict';\nimport type {\n  MapperRawInputs,\n  MapperOutputs,\n  SharedValue,\n} from './commonTypes';\nimport { isJest } from './PlatformChecker';\nimport { runOnUI } from './threads';\nimport { isSharedValue } from './isSharedValue';\n\nconst IS_JEST = isJest();\n\ntype MapperExtractedInputs = SharedValue[];\n\ntype Mapper = {\n  id: number;\n  dirty: boolean;\n  worklet: () => void;\n  inputs: MapperExtractedInputs;\n  outputs?: MapperOutputs;\n};\n\nfunction createMapperRegistry() {\n  'worklet';\n  const mappers = new Map<number, Mapper>();\n  let sortedMappers: Mapper[] = [];\n\n  let runRequested = false;\n  let processingMappers = false;\n\n  function updateMappersOrder() {\n    // sort mappers topologically\n    // the algorithm here takes adventage of a fact that the topological order\n    // of a transposed graph is a reverse topological order of the original graph\n    // The graph in our case consists of mappers and an edge between two mappers\n    // A and B exists if there is a shared value that's on A's output lists and on\n    // B's input list.\n    //\n    // We don't need however to calculate that graph as it is easier to work with\n    // the transposed version of it that can be calculated ad-hoc. For the transposed\n    // version to be traversed we use \"pre\" map that maps share value to mappers that\n    // output that shared value. Then we can infer all the outgoing edges for a given\n    // mapper simply by scanning it's input list and checking if any of the shared values\n    // from that list exists in the \"pre\" map. If they do, then we have an edge between\n    // that mapper and the mappers from the \"pre\" list for the given shared value.\n    //\n    // For topological sorting we use a dfs-based approach that requires the graph to\n    // be traversed in dfs order and each node after being processed lands at the\n    // beginning of the topological order list. Since we traverse a transposed graph,\n    // instead of reversing that order we can use a normal array and push processed\n    // mappers to the end. There is no need to reverse that array after we are done.\n    const pre = new Map(); // map from sv -> mapper that outputs that sv\n    mappers.forEach((mapper) => {\n      if (mapper.outputs) {\n        for (const output of mapper.outputs) {\n          const preMappers = pre.get(output);\n          if (preMappers === undefined) {\n            pre.set(output, [mapper]);\n          } else {\n            preMappers.push(mapper);\n          }\n        }\n      }\n    });\n    const visited = new Set();\n    const newOrder: Mapper[] = [];\n    function dfs(mapper: Mapper) {\n      visited.add(mapper);\n      for (const input of mapper.inputs) {\n        const preMappers = pre.get(input);\n        if (preMappers) {\n          for (const preMapper of preMappers) {\n            if (!visited.has(preMapper)) {\n              dfs(preMapper);\n            }\n          }\n        }\n      }\n      newOrder.push(mapper);\n    }\n    mappers.forEach((mapper) => {\n      if (!visited.has(mapper)) {\n        dfs(mapper);\n      }\n    });\n    sortedMappers = newOrder;\n  }\n\n  function mapperRun() {\n    runRequested = false;\n    if (processingMappers) {\n      return;\n    }\n    try {\n      processingMappers = true;\n      if (mappers.size !== sortedMappers.length) {\n        updateMappersOrder();\n      }\n      for (const mapper of sortedMappers) {\n        if (mapper.dirty) {\n          mapper.dirty = false;\n          mapper.worklet();\n        }\n      }\n    } finally {\n      processingMappers = false;\n    }\n  }\n\n  function maybeRequestUpdates() {\n    if (IS_JEST) {\n      // On Jest environment we avoid using queueMicrotask as that'd require test\n      // to advance the clock manually. This on other hand would require tests\n      // to know how many times mappers need to run. As we don't want tests to\n      // make any assumptions on that number it is easier to execute mappers\n      // immediately for testing purposes and only expect test to advance timers\n      // if they want to make any assertions on the effects of animations being run.\n      mapperRun();\n    } else if (!runRequested) {\n      if (processingMappers) {\n        // In general, we should avoid having mappers trigger updates as this may\n        // result in unpredictable behavior. Specifically, the updated value can\n        // be read by mappers that run later in the same frame but previous mappers\n        // would access the old value. Updating mappers during the mapper-run phase\n        // breaks the order in which we should execute the mappers. However, doing\n        // that is still a possibility and there are some instances where people use\n        // the API in that way, hence we need to prevent mapper-run phase falling into\n        // an infinite loop. We do that by detecting when mapper-run is requested while\n        // we are already in mapper-run phase, and in that case we use `requestAnimationFrame`\n        // instead of `queueMicrotask` which will schedule mapper run for the next\n        // frame instead of queuing another set of updates in the same frame.\n        requestAnimationFrame(mapperRun);\n      } else {\n        queueMicrotask(mapperRun);\n      }\n      runRequested = true;\n    }\n  }\n\n  function extractInputs(\n    inputs: unknown,\n    resultArray: MapperExtractedInputs\n  ): MapperExtractedInputs {\n    if (Array.isArray(inputs)) {\n      for (const input of inputs) {\n        input && extractInputs(input, resultArray);\n      }\n    } else if (isSharedValue(inputs)) {\n      resultArray.push(inputs);\n    } else if (Object.getPrototypeOf(inputs) === Object.prototype) {\n      // we only extract inputs recursively from \"plain\" objects here, if object\n      // is of a derivative class (e.g. HostObject on web, or Map) we don't scan\n      // it recursively\n      for (const element of Object.values(inputs as Record<string, unknown>)) {\n        element && extractInputs(element, resultArray);\n      }\n    }\n    return resultArray;\n  }\n\n  return {\n    start: (\n      mapperID: number,\n      worklet: () => void,\n      inputs: MapperRawInputs,\n      outputs?: MapperOutputs\n    ) => {\n      const mapper: Mapper = {\n        id: mapperID,\n        dirty: true,\n        worklet,\n        inputs: extractInputs(inputs, []),\n        outputs,\n      };\n      mappers.set(mapper.id, mapper);\n      sortedMappers = [];\n      for (const sv of mapper.inputs) {\n        sv.addListener(mapper.id, () => {\n          mapper.dirty = true;\n          maybeRequestUpdates();\n        });\n      }\n      maybeRequestUpdates();\n    },\n    stop: (mapperID: number) => {\n      const mapper = mappers.get(mapperID);\n      if (mapper) {\n        mappers.delete(mapper.id);\n        sortedMappers = [];\n        for (const sv of mapper.inputs) {\n          sv.removeListener(mapper.id);\n        }\n      }\n    },\n  };\n}\n\nlet MAPPER_ID = 9999;\n\nexport function startMapper(\n  worklet: () => void,\n  inputs: MapperRawInputs = [],\n  outputs: MapperOutputs = []\n): number {\n  const mapperID = (MAPPER_ID += 1);\n\n  runOnUI(() => {\n    let mapperRegistry = global.__mapperRegistry;\n    if (mapperRegistry === undefined) {\n      mapperRegistry = global.__mapperRegistry = createMapperRegistry();\n    }\n    mapperRegistry.start(mapperID, worklet, inputs, outputs);\n  })();\n\n  return mapperID;\n}\n\nexport function stopMapper(mapperID: number): void {\n  runOnUI(() => {\n    const mapperRegistry = global.__mapperRegistry;\n    mapperRegistry?.stop(mapperID);\n  })();\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}