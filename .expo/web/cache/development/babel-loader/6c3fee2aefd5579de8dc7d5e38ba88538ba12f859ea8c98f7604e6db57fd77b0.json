{"ast":null,"code":"import _objectWithoutProperties from \"@babel/runtime/helpers/objectWithoutProperties\";\nconst _excluded = [\"headers\"];\nimport Blob from '../Blob/Blob';\nimport BlobManager from '../Blob/BlobManager';\nimport NativeEventEmitter from '../EventEmitter/NativeEventEmitter';\nimport binaryToBase64 from '../Utilities/binaryToBase64';\nimport Platform from '../Utilities/Platform';\nimport NativeWebSocketModule from './NativeWebSocketModule';\nimport WebSocketEvent from './WebSocketEvent';\nimport base64 from 'base64-js';\nimport EventTarget from 'event-target-shim';\nimport invariant from 'invariant';\nconst CONNECTING = 0;\nconst OPEN = 1;\nconst CLOSING = 2;\nconst CLOSED = 3;\nconst CLOSE_NORMAL = 1000;\nconst CLOSE_ABNORMAL = 1006;\nconst WEBSOCKET_EVENTS = ['close', 'error', 'message', 'open'];\nlet nextWebSocketId = 0;\nclass WebSocket extends EventTarget(...WEBSOCKET_EVENTS) {\n  static CONNECTING = CONNECTING;\n  static OPEN = OPEN;\n  static CLOSING = CLOSING;\n  static CLOSED = CLOSED;\n  CONNECTING = CONNECTING;\n  OPEN = OPEN;\n  CLOSING = CLOSING;\n  CLOSED = CLOSED;\n  readyState = CONNECTING;\n  constructor(url, protocols, options) {\n    super();\n    this.url = url;\n    if (typeof protocols === 'string') {\n      protocols = [protocols];\n    }\n    const _ref = options || {},\n      {\n        headers = {}\n      } = _ref,\n      unrecognized = _objectWithoutProperties(_ref, _excluded);\n    if (unrecognized && typeof unrecognized.origin === 'string') {\n      console.warn('Specifying `origin` as a WebSocket connection option is deprecated. Include it under `headers` instead.');\n      headers.origin = unrecognized.origin;\n      delete unrecognized.origin;\n    }\n    if (Object.keys(unrecognized).length > 0) {\n      console.warn('Unrecognized WebSocket connection option(s) `' + Object.keys(unrecognized).join('`, `') + '`. ' + 'Did you mean to put these under `headers`?');\n    }\n    if (!Array.isArray(protocols)) {\n      protocols = null;\n    }\n    this._eventEmitter = new NativeEventEmitter(Platform.OS !== 'ios' ? null : NativeWebSocketModule);\n    this._socketId = nextWebSocketId++;\n    this._registerEvents();\n    NativeWebSocketModule.connect(url, protocols, {\n      headers\n    }, this._socketId);\n  }\n  get binaryType() {\n    return this._binaryType;\n  }\n  set binaryType(binaryType) {\n    if (binaryType !== 'blob' && binaryType !== 'arraybuffer') {\n      throw new Error(\"binaryType must be either 'blob' or 'arraybuffer'\");\n    }\n    if (this._binaryType === 'blob' || binaryType === 'blob') {\n      invariant(BlobManager.isAvailable, 'Native module BlobModule is required for blob support');\n      if (binaryType === 'blob') {\n        BlobManager.addWebSocketHandler(this._socketId);\n      } else {\n        BlobManager.removeWebSocketHandler(this._socketId);\n      }\n    }\n    this._binaryType = binaryType;\n  }\n  close(code, reason) {\n    if (this.readyState === this.CLOSING || this.readyState === this.CLOSED) {\n      return;\n    }\n    this.readyState = this.CLOSING;\n    this._close(code, reason);\n  }\n  send(data) {\n    if (this.readyState === this.CONNECTING) {\n      throw new Error('INVALID_STATE_ERR');\n    }\n    if (data instanceof Blob) {\n      invariant(BlobManager.isAvailable, 'Native module BlobModule is required for blob support');\n      BlobManager.sendOverSocket(data, this._socketId);\n      return;\n    }\n    if (typeof data === 'string') {\n      NativeWebSocketModule.send(data, this._socketId);\n      return;\n    }\n    if (data instanceof ArrayBuffer || ArrayBuffer.isView(data)) {\n      NativeWebSocketModule.sendBinary(binaryToBase64(data), this._socketId);\n      return;\n    }\n    throw new Error('Unsupported data type');\n  }\n  ping() {\n    if (this.readyState === this.CONNECTING) {\n      throw new Error('INVALID_STATE_ERR');\n    }\n    NativeWebSocketModule.ping(this._socketId);\n  }\n  _close(code, reason) {\n    const statusCode = typeof code === 'number' ? code : CLOSE_NORMAL;\n    const closeReason = typeof reason === 'string' ? reason : '';\n    NativeWebSocketModule.close(statusCode, closeReason, this._socketId);\n    if (BlobManager.isAvailable && this._binaryType === 'blob') {\n      BlobManager.removeWebSocketHandler(this._socketId);\n    }\n  }\n  _unregisterEvents() {\n    this._subscriptions.forEach(e => e.remove());\n    this._subscriptions = [];\n  }\n  _registerEvents() {\n    this._subscriptions = [this._eventEmitter.addListener('websocketMessage', ev => {\n      if (ev.id !== this._socketId) {\n        return;\n      }\n      let data = ev.data;\n      switch (ev.type) {\n        case 'binary':\n          data = base64.toByteArray(ev.data).buffer;\n          break;\n        case 'blob':\n          data = BlobManager.createFromOptions(ev.data);\n          break;\n      }\n      this.dispatchEvent(new WebSocketEvent('message', {\n        data\n      }));\n    }), this._eventEmitter.addListener('websocketOpen', ev => {\n      if (ev.id !== this._socketId) {\n        return;\n      }\n      this.readyState = this.OPEN;\n      this.protocol = ev.protocol;\n      this.dispatchEvent(new WebSocketEvent('open'));\n    }), this._eventEmitter.addListener('websocketClosed', ev => {\n      if (ev.id !== this._socketId) {\n        return;\n      }\n      this.readyState = this.CLOSED;\n      this.dispatchEvent(new WebSocketEvent('close', {\n        code: ev.code,\n        reason: ev.reason\n      }));\n      this._unregisterEvents();\n      this.close();\n    }), this._eventEmitter.addListener('websocketFailed', ev => {\n      if (ev.id !== this._socketId) {\n        return;\n      }\n      this.readyState = this.CLOSED;\n      this.dispatchEvent(new WebSocketEvent('error', {\n        message: ev.message\n      }));\n      this.dispatchEvent(new WebSocketEvent('close', {\n        code: CLOSE_ABNORMAL,\n        reason: ev.message\n      }));\n      this._unregisterEvents();\n      this.close();\n    })];\n  }\n}\nmodule.exports = WebSocket;","map":{"version":3,"names":["Blob","BlobManager","NativeEventEmitter","binaryToBase64","Platform","NativeWebSocketModule","WebSocketEvent","base64","EventTarget","invariant","CONNECTING","OPEN","CLOSING","CLOSED","CLOSE_NORMAL","CLOSE_ABNORMAL","WEBSOCKET_EVENTS","nextWebSocketId","WebSocket","readyState","constructor","url","protocols","options","_ref","headers","unrecognized","_objectWithoutProperties","_excluded","origin","console","warn","Object","keys","length","join","Array","isArray","_eventEmitter","OS","_socketId","_registerEvents","connect","binaryType","_binaryType","Error","isAvailable","addWebSocketHandler","removeWebSocketHandler","close","code","reason","_close","send","data","sendOverSocket","ArrayBuffer","isView","sendBinary","ping","statusCode","closeReason","_unregisterEvents","_subscriptions","forEach","e","remove","addListener","ev","id","type","toByteArray","buffer","createFromOptions","dispatchEvent","protocol","message","module","exports"],"sources":["/home/rodo/workspace/passion/apps/muh-money/node_modules/react-native/Libraries/WebSocket/WebSocket.js"],"sourcesContent":["/**\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @format\n * @flow\n */\n\nimport type {BlobData} from '../Blob/BlobTypes';\nimport type {EventSubscription} from '../vendor/emitter/EventEmitter';\n\nimport Blob from '../Blob/Blob';\nimport BlobManager from '../Blob/BlobManager';\nimport NativeEventEmitter from '../EventEmitter/NativeEventEmitter';\nimport binaryToBase64 from '../Utilities/binaryToBase64';\nimport Platform from '../Utilities/Platform';\nimport NativeWebSocketModule from './NativeWebSocketModule';\nimport WebSocketEvent from './WebSocketEvent';\nimport base64 from 'base64-js';\nimport EventTarget from 'event-target-shim';\nimport invariant from 'invariant';\n\ntype ArrayBufferView =\n  | Int8Array\n  | Uint8Array\n  | Uint8ClampedArray\n  | Int16Array\n  | Uint16Array\n  | Int32Array\n  | Uint32Array\n  | Float32Array\n  | Float64Array\n  | DataView;\n\ntype BinaryType = 'blob' | 'arraybuffer';\n\nconst CONNECTING = 0;\nconst OPEN = 1;\nconst CLOSING = 2;\nconst CLOSED = 3;\n\nconst CLOSE_NORMAL = 1000;\n\n// Abnormal closure where no code is provided in a control frame\n// https://www.rfc-editor.org/rfc/rfc6455.html#section-7.1.5\nconst CLOSE_ABNORMAL = 1006;\n\nconst WEBSOCKET_EVENTS = ['close', 'error', 'message', 'open'];\n\nlet nextWebSocketId = 0;\n\ntype WebSocketEventDefinitions = {\n  websocketOpen: [{id: number, protocol: string}],\n  websocketClosed: [{id: number, code: number, reason: string}],\n  websocketMessage: [\n    | {type: 'binary', id: number, data: string}\n    | {type: 'text', id: number, data: string}\n    | {type: 'blob', id: number, data: BlobData},\n  ],\n  websocketFailed: [{id: number, message: string}],\n};\n\n/**\n * Browser-compatible WebSockets implementation.\n *\n * See https://developer.mozilla.org/en-US/docs/Web/API/WebSocket\n * See https://github.com/websockets/ws\n */\nclass WebSocket extends (EventTarget(...WEBSOCKET_EVENTS): any) {\n  static CONNECTING: number = CONNECTING;\n  static OPEN: number = OPEN;\n  static CLOSING: number = CLOSING;\n  static CLOSED: number = CLOSED;\n\n  CONNECTING: number = CONNECTING;\n  OPEN: number = OPEN;\n  CLOSING: number = CLOSING;\n  CLOSED: number = CLOSED;\n\n  _socketId: number;\n  _eventEmitter: NativeEventEmitter<WebSocketEventDefinitions>;\n  _subscriptions: Array<EventSubscription>;\n  _binaryType: ?BinaryType;\n\n  onclose: ?Function;\n  onerror: ?Function;\n  onmessage: ?Function;\n  onopen: ?Function;\n\n  bufferedAmount: number;\n  extension: ?string;\n  protocol: ?string;\n  readyState: number = CONNECTING;\n  url: ?string;\n\n  constructor(\n    url: string,\n    protocols: ?string | ?Array<string>,\n    options: ?{headers?: {origin?: string, ...}, ...},\n  ) {\n    super();\n    this.url = url;\n    if (typeof protocols === 'string') {\n      protocols = [protocols];\n    }\n\n    const {headers = {}, ...unrecognized} = options || {};\n\n    // Preserve deprecated backwards compatibility for the 'origin' option\n    // $FlowFixMe[prop-missing]\n    if (unrecognized && typeof unrecognized.origin === 'string') {\n      console.warn(\n        'Specifying `origin` as a WebSocket connection option is deprecated. Include it under `headers` instead.',\n      );\n      /* $FlowFixMe[prop-missing] (>=0.54.0 site=react_native_fb,react_native_\n       * oss) This comment suppresses an error found when Flow v0.54 was\n       * deployed. To see the error delete this comment and run Flow. */\n      headers.origin = unrecognized.origin;\n      /* $FlowFixMe[prop-missing] (>=0.54.0 site=react_native_fb,react_native_\n       * oss) This comment suppresses an error found when Flow v0.54 was\n       * deployed. To see the error delete this comment and run Flow. */\n      delete unrecognized.origin;\n    }\n\n    // Warn about and discard anything else\n    if (Object.keys(unrecognized).length > 0) {\n      console.warn(\n        'Unrecognized WebSocket connection option(s) `' +\n          Object.keys(unrecognized).join('`, `') +\n          '`. ' +\n          'Did you mean to put these under `headers`?',\n      );\n    }\n\n    if (!Array.isArray(protocols)) {\n      protocols = null;\n    }\n\n    this._eventEmitter = new NativeEventEmitter(\n      // T88715063: NativeEventEmitter only used this parameter on iOS. Now it uses it on all platforms, so this code was modified automatically to preserve its behavior\n      // If you want to use the native module on other platforms, please remove this condition and test its behavior\n      Platform.OS !== 'ios' ? null : NativeWebSocketModule,\n    );\n    this._socketId = nextWebSocketId++;\n    this._registerEvents();\n    NativeWebSocketModule.connect(url, protocols, {headers}, this._socketId);\n  }\n\n  get binaryType(): ?BinaryType {\n    return this._binaryType;\n  }\n\n  set binaryType(binaryType: BinaryType): void {\n    if (binaryType !== 'blob' && binaryType !== 'arraybuffer') {\n      throw new Error(\"binaryType must be either 'blob' or 'arraybuffer'\");\n    }\n    if (this._binaryType === 'blob' || binaryType === 'blob') {\n      invariant(\n        BlobManager.isAvailable,\n        'Native module BlobModule is required for blob support',\n      );\n      if (binaryType === 'blob') {\n        BlobManager.addWebSocketHandler(this._socketId);\n      } else {\n        BlobManager.removeWebSocketHandler(this._socketId);\n      }\n    }\n    this._binaryType = binaryType;\n  }\n\n  close(code?: number, reason?: string): void {\n    if (this.readyState === this.CLOSING || this.readyState === this.CLOSED) {\n      return;\n    }\n\n    this.readyState = this.CLOSING;\n    this._close(code, reason);\n  }\n\n  send(data: string | ArrayBuffer | ArrayBufferView | Blob): void {\n    if (this.readyState === this.CONNECTING) {\n      throw new Error('INVALID_STATE_ERR');\n    }\n\n    if (data instanceof Blob) {\n      invariant(\n        BlobManager.isAvailable,\n        'Native module BlobModule is required for blob support',\n      );\n      BlobManager.sendOverSocket(data, this._socketId);\n      return;\n    }\n\n    if (typeof data === 'string') {\n      NativeWebSocketModule.send(data, this._socketId);\n      return;\n    }\n\n    if (data instanceof ArrayBuffer || ArrayBuffer.isView(data)) {\n      NativeWebSocketModule.sendBinary(binaryToBase64(data), this._socketId);\n      return;\n    }\n\n    throw new Error('Unsupported data type');\n  }\n\n  ping(): void {\n    if (this.readyState === this.CONNECTING) {\n      throw new Error('INVALID_STATE_ERR');\n    }\n\n    NativeWebSocketModule.ping(this._socketId);\n  }\n\n  _close(code?: number, reason?: string): void {\n    // See https://developer.mozilla.org/en-US/docs/Web/API/CloseEvent\n    const statusCode = typeof code === 'number' ? code : CLOSE_NORMAL;\n    const closeReason = typeof reason === 'string' ? reason : '';\n    NativeWebSocketModule.close(statusCode, closeReason, this._socketId);\n\n    if (BlobManager.isAvailable && this._binaryType === 'blob') {\n      BlobManager.removeWebSocketHandler(this._socketId);\n    }\n  }\n\n  _unregisterEvents(): void {\n    this._subscriptions.forEach(e => e.remove());\n    this._subscriptions = [];\n  }\n\n  _registerEvents(): void {\n    this._subscriptions = [\n      this._eventEmitter.addListener('websocketMessage', ev => {\n        if (ev.id !== this._socketId) {\n          return;\n        }\n        let data: Blob | BlobData | ArrayBuffer | string = ev.data;\n        switch (ev.type) {\n          case 'binary':\n            data = base64.toByteArray(ev.data).buffer;\n            break;\n          case 'blob':\n            data = BlobManager.createFromOptions(ev.data);\n            break;\n        }\n        this.dispatchEvent(new WebSocketEvent('message', {data}));\n      }),\n      this._eventEmitter.addListener('websocketOpen', ev => {\n        if (ev.id !== this._socketId) {\n          return;\n        }\n        this.readyState = this.OPEN;\n        this.protocol = ev.protocol;\n        this.dispatchEvent(new WebSocketEvent('open'));\n      }),\n      this._eventEmitter.addListener('websocketClosed', ev => {\n        if (ev.id !== this._socketId) {\n          return;\n        }\n        this.readyState = this.CLOSED;\n        this.dispatchEvent(\n          new WebSocketEvent('close', {\n            code: ev.code,\n            reason: ev.reason,\n            // TODO: missing `wasClean` (exposed on iOS as `clean` but missing on Android)\n          }),\n        );\n        this._unregisterEvents();\n        this.close();\n      }),\n      this._eventEmitter.addListener('websocketFailed', ev => {\n        if (ev.id !== this._socketId) {\n          return;\n        }\n        this.readyState = this.CLOSED;\n        this.dispatchEvent(\n          new WebSocketEvent('error', {\n            message: ev.message,\n          }),\n        );\n        this.dispatchEvent(\n          new WebSocketEvent('close', {\n            code: CLOSE_ABNORMAL,\n            reason: ev.message,\n            // TODO: Expose `wasClean`\n          }),\n        );\n        this._unregisterEvents();\n        this.close();\n      }),\n    ];\n  }\n}\n\nmodule.exports = WebSocket;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}