{"ast":null,"code":"'use strict';\n\nimport InteractionManager from '../../Interaction/InteractionManager';\nimport NativeAnimatedHelper from '../NativeAnimatedHelper';\nimport AnimatedInterpolation from './AnimatedInterpolation';\nimport AnimatedWithChildren from './AnimatedWithChildren';\nconst NativeAnimatedAPI = NativeAnimatedHelper.API;\nexport function flushValue(rootNode) {\n  const leaves = new Set();\n  function findAnimatedStyles(node) {\n    if (typeof node.update === 'function') {\n      leaves.add(node);\n    } else {\n      node.__getChildren().forEach(findAnimatedStyles);\n    }\n  }\n  findAnimatedStyles(rootNode);\n  leaves.forEach(leaf => leaf.update());\n}\nfunction _executeAsAnimatedBatch(id, operation) {\n  NativeAnimatedAPI.setWaitingForIdentifier(id);\n  operation();\n  NativeAnimatedAPI.unsetWaitingForIdentifier(id);\n}\nexport default class AnimatedValue extends AnimatedWithChildren {\n  constructor(value, config) {\n    super();\n    if (typeof value !== 'number') {\n      throw new Error('AnimatedValue: Attempting to set value to undefined');\n    }\n    this._startingValue = this._value = value;\n    this._offset = 0;\n    this._animation = null;\n    if (config && config.useNativeDriver) {\n      this.__makeNative();\n    }\n  }\n  __detach() {\n    if (this.__isNative) {\n      NativeAnimatedAPI.getValue(this.__getNativeTag(), value => {\n        this._value = value - this._offset;\n      });\n    }\n    this.stopAnimation();\n    super.__detach();\n  }\n  __getValue() {\n    return this._value + this._offset;\n  }\n  setValue(value) {\n    if (this._animation) {\n      this._animation.stop();\n      this._animation = null;\n    }\n    this._updateValue(value, !this.__isNative);\n    if (this.__isNative) {\n      _executeAsAnimatedBatch(this.__getNativeTag().toString(), () => NativeAnimatedAPI.setAnimatedNodeValue(this.__getNativeTag(), value));\n    }\n  }\n  setOffset(offset) {\n    this._offset = offset;\n    if (this.__isNative) {\n      NativeAnimatedAPI.setAnimatedNodeOffset(this.__getNativeTag(), offset);\n    }\n  }\n  flattenOffset() {\n    this._value += this._offset;\n    this._offset = 0;\n    if (this.__isNative) {\n      NativeAnimatedAPI.flattenAnimatedNodeOffset(this.__getNativeTag());\n    }\n  }\n  extractOffset() {\n    this._offset += this._value;\n    this._value = 0;\n    if (this.__isNative) {\n      NativeAnimatedAPI.extractAnimatedNodeOffset(this.__getNativeTag());\n    }\n  }\n  stopAnimation(callback) {\n    this.stopTracking();\n    this._animation && this._animation.stop();\n    this._animation = null;\n    if (callback) {\n      if (this.__isNative) {\n        NativeAnimatedAPI.getValue(this.__getNativeTag(), callback);\n      } else {\n        callback(this.__getValue());\n      }\n    }\n  }\n  resetAnimation(callback) {\n    this.stopAnimation(callback);\n    this._value = this._startingValue;\n    if (this.__isNative) {\n      NativeAnimatedAPI.setAnimatedNodeValue(this.__getNativeTag(), this._startingValue);\n    }\n  }\n  __onAnimatedValueUpdateReceived(value) {\n    this._updateValue(value, false);\n  }\n  interpolate(config) {\n    return new AnimatedInterpolation(this, config);\n  }\n  animate(animation, callback) {\n    let handle = null;\n    if (animation.__isInteraction) {\n      handle = InteractionManager.createInteractionHandle();\n    }\n    const previousAnimation = this._animation;\n    this._animation && this._animation.stop();\n    this._animation = animation;\n    animation.start(this._value, value => {\n      this._updateValue(value, true);\n    }, result => {\n      this._animation = null;\n      if (handle !== null) {\n        InteractionManager.clearInteractionHandle(handle);\n      }\n      callback && callback(result);\n    }, previousAnimation, this);\n  }\n  stopTracking() {\n    this._tracking && this._tracking.__detach();\n    this._tracking = null;\n  }\n  track(tracking) {\n    this.stopTracking();\n    this._tracking = tracking;\n    this._tracking && this._tracking.update();\n  }\n  _updateValue(value, flush) {\n    if (value === undefined) {\n      throw new Error('AnimatedValue: Attempting to set value to undefined');\n    }\n    this._value = value;\n    if (flush) {\n      flushValue(this);\n    }\n    this.__callListeners(this.__getValue());\n  }\n  __getNativeConfig() {\n    return {\n      type: 'value',\n      value: this._value,\n      offset: this._offset\n    };\n  }\n}","map":{"version":3,"names":["InteractionManager","NativeAnimatedHelper","AnimatedInterpolation","AnimatedWithChildren","NativeAnimatedAPI","API","flushValue","rootNode","leaves","Set","findAnimatedStyles","node","update","add","__getChildren","forEach","leaf","_executeAsAnimatedBatch","id","operation","setWaitingForIdentifier","unsetWaitingForIdentifier","AnimatedValue","constructor","value","config","Error","_startingValue","_value","_offset","_animation","useNativeDriver","__makeNative","__detach","__isNative","getValue","__getNativeTag","stopAnimation","__getValue","setValue","stop","_updateValue","toString","setAnimatedNodeValue","setOffset","offset","setAnimatedNodeOffset","flattenOffset","flattenAnimatedNodeOffset","extractOffset","extractAnimatedNodeOffset","callback","stopTracking","resetAnimation","__onAnimatedValueUpdateReceived","interpolate","animate","animation","handle","__isInteraction","createInteractionHandle","previousAnimation","start","result","clearInteractionHandle","_tracking","track","tracking","flush","undefined","__callListeners","__getNativeConfig","type"],"sources":["/home/rodo/workspace/passion/apps/muh-money/node_modules/react-native/Libraries/Animated/nodes/AnimatedValue.js"],"sourcesContent":["/**\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @flow\n * @format\n */\n\n'use strict';\n\nimport type Animation, {EndCallback} from '../animations/Animation';\nimport type {InterpolationConfigType} from './AnimatedInterpolation';\nimport type AnimatedNode from './AnimatedNode';\nimport type AnimatedTracking from './AnimatedTracking';\n\nimport InteractionManager from '../../Interaction/InteractionManager';\nimport NativeAnimatedHelper from '../NativeAnimatedHelper';\nimport AnimatedInterpolation from './AnimatedInterpolation';\nimport AnimatedWithChildren from './AnimatedWithChildren';\n\nexport type AnimatedValueConfig = $ReadOnly<{\n  useNativeDriver: boolean,\n}>;\n\nconst NativeAnimatedAPI = NativeAnimatedHelper.API;\n\n/**\n * Animated works by building a directed acyclic graph of dependencies\n * transparently when you render your Animated components.\n *\n *               new Animated.Value(0)\n *     .interpolate()        .interpolate()    new Animated.Value(1)\n *         opacity               translateY      scale\n *          style                         transform\n *         View#234                         style\n *                                         View#123\n *\n * A) Top Down phase\n * When an Animated.Value is updated, we recursively go down through this\n * graph in order to find leaf nodes: the views that we flag as needing\n * an update.\n *\n * B) Bottom Up phase\n * When a view is flagged as needing an update, we recursively go back up\n * in order to build the new value that it needs. The reason why we need\n * this two-phases process is to deal with composite props such as\n * transform which can receive values from multiple parents.\n */\nexport function flushValue(rootNode: AnimatedNode): void {\n  const leaves = new Set<{update: () => void, ...}>();\n  function findAnimatedStyles(node: AnimatedNode) {\n    // $FlowFixMe[prop-missing]\n    if (typeof node.update === 'function') {\n      leaves.add((node: any));\n    } else {\n      node.__getChildren().forEach(findAnimatedStyles);\n    }\n  }\n  findAnimatedStyles(rootNode);\n  leaves.forEach(leaf => leaf.update());\n}\n\n/**\n * Some operations are executed only on batch end, which is _mostly_ scheduled when\n * Animated component props change. For some of the changes which require immediate execution\n * (e.g. setValue), we create a separate batch in case none is scheduled.\n */\nfunction _executeAsAnimatedBatch(id: string, operation: () => void) {\n  NativeAnimatedAPI.setWaitingForIdentifier(id);\n  operation();\n  NativeAnimatedAPI.unsetWaitingForIdentifier(id);\n}\n\n/**\n * Standard value for driving animations.  One `Animated.Value` can drive\n * multiple properties in a synchronized fashion, but can only be driven by one\n * mechanism at a time.  Using a new mechanism (e.g. starting a new animation,\n * or calling `setValue`) will stop any previous ones.\n *\n * See https://reactnative.dev/docs/animatedvalue\n */\nexport default class AnimatedValue extends AnimatedWithChildren {\n  _value: number;\n  _startingValue: number;\n  _offset: number;\n  _animation: ?Animation;\n  _tracking: ?AnimatedTracking;\n\n  constructor(value: number, config?: ?AnimatedValueConfig) {\n    super();\n    if (typeof value !== 'number') {\n      throw new Error('AnimatedValue: Attempting to set value to undefined');\n    }\n    this._startingValue = this._value = value;\n    this._offset = 0;\n    this._animation = null;\n    if (config && config.useNativeDriver) {\n      this.__makeNative();\n    }\n  }\n\n  __detach() {\n    if (this.__isNative) {\n      NativeAnimatedAPI.getValue(this.__getNativeTag(), value => {\n        this._value = value - this._offset;\n      });\n    }\n    this.stopAnimation();\n    super.__detach();\n  }\n\n  __getValue(): number {\n    return this._value + this._offset;\n  }\n\n  /**\n   * Directly set the value.  This will stop any animations running on the value\n   * and update all the bound properties.\n   *\n   * See https://reactnative.dev/docs/animatedvalue#setvalue\n   */\n  setValue(value: number): void {\n    if (this._animation) {\n      this._animation.stop();\n      this._animation = null;\n    }\n    this._updateValue(\n      value,\n      !this.__isNative /* don't perform a flush for natively driven values */,\n    );\n    if (this.__isNative) {\n      _executeAsAnimatedBatch(this.__getNativeTag().toString(), () =>\n        NativeAnimatedAPI.setAnimatedNodeValue(this.__getNativeTag(), value),\n      );\n    }\n  }\n\n  /**\n   * Sets an offset that is applied on top of whatever value is set, whether via\n   * `setValue`, an animation, or `Animated.event`.  Useful for compensating\n   * things like the start of a pan gesture.\n   *\n   * See https://reactnative.dev/docs/animatedvalue#setoffset\n   */\n  setOffset(offset: number): void {\n    this._offset = offset;\n    if (this.__isNative) {\n      NativeAnimatedAPI.setAnimatedNodeOffset(this.__getNativeTag(), offset);\n    }\n  }\n\n  /**\n   * Merges the offset value into the base value and resets the offset to zero.\n   * The final output of the value is unchanged.\n   *\n   * See https://reactnative.dev/docs/animatedvalue#flattenoffset\n   */\n  flattenOffset(): void {\n    this._value += this._offset;\n    this._offset = 0;\n    if (this.__isNative) {\n      NativeAnimatedAPI.flattenAnimatedNodeOffset(this.__getNativeTag());\n    }\n  }\n\n  /**\n   * Sets the offset value to the base value, and resets the base value to zero.\n   * The final output of the value is unchanged.\n   *\n   * See https://reactnative.dev/docs/animatedvalue#extractoffset\n   */\n  extractOffset(): void {\n    this._offset += this._value;\n    this._value = 0;\n    if (this.__isNative) {\n      NativeAnimatedAPI.extractAnimatedNodeOffset(this.__getNativeTag());\n    }\n  }\n\n  /**\n   * Stops any running animation or tracking. `callback` is invoked with the\n   * final value after stopping the animation, which is useful for updating\n   * state to match the animation position with layout.\n   *\n   * See https://reactnative.dev/docs/animatedvalue#stopanimation\n   */\n  stopAnimation(callback?: ?(value: number) => void): void {\n    this.stopTracking();\n    this._animation && this._animation.stop();\n    this._animation = null;\n    if (callback) {\n      if (this.__isNative) {\n        NativeAnimatedAPI.getValue(this.__getNativeTag(), callback);\n      } else {\n        callback(this.__getValue());\n      }\n    }\n  }\n\n  /**\n   * Stops any animation and resets the value to its original.\n   *\n   * See https://reactnative.dev/docs/animatedvalue#resetanimation\n   */\n  resetAnimation(callback?: ?(value: number) => void): void {\n    this.stopAnimation(callback);\n    this._value = this._startingValue;\n    if (this.__isNative) {\n      NativeAnimatedAPI.setAnimatedNodeValue(\n        this.__getNativeTag(),\n        this._startingValue,\n      );\n    }\n  }\n\n  __onAnimatedValueUpdateReceived(value: number): void {\n    this._updateValue(value, false /*flush*/);\n  }\n\n  /**\n   * Interpolates the value before updating the property, e.g. mapping 0-1 to\n   * 0-10.\n   */\n  interpolate<OutputT: number | string>(\n    config: InterpolationConfigType<OutputT>,\n  ): AnimatedInterpolation<OutputT> {\n    return new AnimatedInterpolation(this, config);\n  }\n\n  /**\n   * Typically only used internally, but could be used by a custom Animation\n   * class.\n   *\n   * See https://reactnative.dev/docs/animatedvalue#animate\n   */\n  animate(animation: Animation, callback: ?EndCallback): void {\n    let handle = null;\n    if (animation.__isInteraction) {\n      handle = InteractionManager.createInteractionHandle();\n    }\n    const previousAnimation = this._animation;\n    this._animation && this._animation.stop();\n    this._animation = animation;\n    animation.start(\n      this._value,\n      value => {\n        // Natively driven animations will never call into that callback, therefore we can always\n        // pass flush = true to allow the updated value to propagate to native with setNativeProps\n        this._updateValue(value, true /* flush */);\n      },\n      result => {\n        this._animation = null;\n        if (handle !== null) {\n          InteractionManager.clearInteractionHandle(handle);\n        }\n        callback && callback(result);\n      },\n      previousAnimation,\n      this,\n    );\n  }\n\n  /**\n   * Typically only used internally.\n   */\n  stopTracking(): void {\n    this._tracking && this._tracking.__detach();\n    this._tracking = null;\n  }\n\n  /**\n   * Typically only used internally.\n   */\n  track(tracking: AnimatedTracking): void {\n    this.stopTracking();\n    this._tracking = tracking;\n    // Make sure that the tracking animation starts executing\n    this._tracking && this._tracking.update();\n  }\n\n  _updateValue(value: number, flush: boolean): void {\n    if (value === undefined) {\n      throw new Error('AnimatedValue: Attempting to set value to undefined');\n    }\n\n    this._value = value;\n    if (flush) {\n      flushValue(this);\n    }\n    this.__callListeners(this.__getValue());\n  }\n\n  __getNativeConfig(): Object {\n    return {\n      type: 'value',\n      value: this._value,\n      offset: this._offset,\n    };\n  }\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}