{"ast":null,"code":"import uuid from '../uuid';\nclass EventEmitter {\n  addListener(eventName, listener) {\n    if (!this.listeners) {\n      this.listeners = new Map();\n    }\n    if (!this.listeners?.has(eventName)) {\n      this.listeners?.set(eventName, new Set());\n    }\n    this.listeners?.get(eventName)?.add(listener);\n    return {\n      remove: () => {\n        this.removeListener(eventName, listener);\n      }\n    };\n  }\n  removeListener(eventName, listener) {\n    this.listeners?.get(eventName)?.delete(listener);\n  }\n  removeAllListeners(eventName) {\n    this.listeners?.get(eventName)?.clear();\n  }\n  emit(eventName, ...args) {\n    this.listeners?.get(eventName)?.forEach(listener => listener(...args));\n  }\n  listenerCount(eventName) {\n    return this.listeners?.get(eventName)?.size ?? 0;\n  }\n}\nexport class NativeModule extends EventEmitter {}\nclass SharedObject extends EventEmitter {\n  release() {\n    throw new Error('Method not implemented.');\n  }\n}\nglobalThis.expo = {\n  EventEmitter,\n  NativeModule,\n  SharedObject,\n  modules: {},\n  uuidv4: uuid.v4,\n  uuidv5: uuid.v5,\n  getViewConfig: () => {\n    throw new Error('Method not implemented.');\n  },\n  reloadAppAsync: async () => {\n    window.location.reload();\n  }\n};","map":{"version":3,"names":["uuid","EventEmitter","addListener","eventName","listener","listeners","Map","has","set","Set","get","add","remove","removeListener","delete","removeAllListeners","clear","emit","args","forEach","listenerCount","size","NativeModule","SharedObject","release","Error","globalThis","expo","modules","uuidv4","v4","uuidv5","v5","getViewConfig","reloadAppAsync","window","location","reload"],"sources":["/home/rodo/workspace/passion/apps/muh-money/node_modules/expo-modules-core/src/web/CoreModule.ts"],"sourcesContent":["import type {\n  EventEmitter as EventEmitterType,\n  EventSubscription,\n  EventsMap,\n} from '../ts-declarations/EventEmitter';\nimport type { NativeModule as NativeModuleType } from '../ts-declarations/NativeModule';\nimport type { SharedObject as SharedObjectType } from '../ts-declarations/SharedObject';\nimport uuid from '../uuid';\n\nclass EventEmitter<TEventsMap extends EventsMap> implements EventEmitterType {\n  private listeners?: Map<keyof TEventsMap, Set<Function>>;\n\n  addListener<EventName extends keyof TEventsMap>(\n    eventName: EventName,\n    listener: TEventsMap[EventName]\n  ): EventSubscription {\n    if (!this.listeners) {\n      this.listeners = new Map();\n    }\n    if (!this.listeners?.has(eventName)) {\n      this.listeners?.set(eventName, new Set());\n    }\n    this.listeners?.get(eventName)?.add(listener);\n\n    return {\n      remove: () => {\n        this.removeListener(eventName, listener);\n      },\n    };\n  }\n\n  removeListener<EventName extends keyof TEventsMap>(\n    eventName: EventName,\n    listener: TEventsMap[EventName]\n  ): void {\n    this.listeners?.get(eventName)?.delete(listener);\n  }\n\n  removeAllListeners<EventName extends keyof TEventsMap>(eventName: EventName): void {\n    this.listeners?.get(eventName)?.clear();\n  }\n\n  emit<EventName extends keyof TEventsMap>(\n    eventName: EventName,\n    ...args: Parameters<TEventsMap[EventName]>\n  ): void {\n    this.listeners?.get(eventName)?.forEach((listener) => listener(...args));\n  }\n\n  listenerCount<EventName extends keyof TEventsMap>(eventName: EventName): number {\n    return this.listeners?.get(eventName)?.size ?? 0;\n  }\n}\n\nexport class NativeModule<TEventsMap extends Record<never, never>>\n  extends EventEmitter<TEventsMap>\n  implements NativeModuleType\n{\n  [key: string]: any;\n  ViewPrototype?: object | undefined;\n  __expo_module_name__?: string;\n}\n\nclass SharedObject<TEventsMap extends Record<never, never>>\n  extends EventEmitter<TEventsMap>\n  implements SharedObjectType\n{\n  release(): void {\n    throw new Error('Method not implemented.');\n  }\n}\n\nglobalThis.expo = {\n  EventEmitter,\n  NativeModule,\n  SharedObject,\n  modules: {},\n  uuidv4: uuid.v4,\n  uuidv5: uuid.v5,\n  getViewConfig: () => {\n    throw new Error('Method not implemented.');\n  },\n  reloadAppAsync: async () => {\n    window.location.reload();\n  },\n};\n"],"mappings":"AAOA,OAAOA,IAAI,MAAM,SAAS;AAE1B,MAAMC,YAAY;EAGhBC,WAAWA,CACTC,SAAoB,EACpBC,QAA+B;IAE/B,IAAI,CAAC,IAAI,CAACC,SAAS,EAAE;MACnB,IAAI,CAACA,SAAS,GAAG,IAAIC,GAAG,EAAE;;IAE5B,IAAI,CAAC,IAAI,CAACD,SAAS,EAAEE,GAAG,CAACJ,SAAS,CAAC,EAAE;MACnC,IAAI,CAACE,SAAS,EAAEG,GAAG,CAACL,SAAS,EAAE,IAAIM,GAAG,EAAE,CAAC;;IAE3C,IAAI,CAACJ,SAAS,EAAEK,GAAG,CAACP,SAAS,CAAC,EAAEQ,GAAG,CAACP,QAAQ,CAAC;IAE7C,OAAO;MACLQ,MAAM,EAAEA,CAAA,KAAK;QACX,IAAI,CAACC,cAAc,CAACV,SAAS,EAAEC,QAAQ,CAAC;MAC1C;KACD;EACH;EAEAS,cAAcA,CACZV,SAAoB,EACpBC,QAA+B;IAE/B,IAAI,CAACC,SAAS,EAAEK,GAAG,CAACP,SAAS,CAAC,EAAEW,MAAM,CAACV,QAAQ,CAAC;EAClD;EAEAW,kBAAkBA,CAAqCZ,SAAoB;IACzE,IAAI,CAACE,SAAS,EAAEK,GAAG,CAACP,SAAS,CAAC,EAAEa,KAAK,EAAE;EACzC;EAEAC,IAAIA,CACFd,SAAoB,EACpB,GAAGe,IAAuC;IAE1C,IAAI,CAACb,SAAS,EAAEK,GAAG,CAACP,SAAS,CAAC,EAAEgB,OAAO,CAAEf,QAAQ,IAAKA,QAAQ,CAAC,GAAGc,IAAI,CAAC,CAAC;EAC1E;EAEAE,aAAaA,CAAqCjB,SAAoB;IACpE,OAAO,IAAI,CAACE,SAAS,EAAEK,GAAG,CAACP,SAAS,CAAC,EAAEkB,IAAI,IAAI,CAAC;EAClD;;AAGF,OAAM,MAAOC,YACX,SAAQrB,YAAwB;AAQlC,MAAMsB,YACJ,SAAQtB,YAAwB;EAGhCuB,OAAOA,CAAA;IACL,MAAM,IAAIC,KAAK,CAAC,yBAAyB,CAAC;EAC5C;;AAGFC,UAAU,CAACC,IAAI,GAAG;EAChB1B,YAAY;EACZqB,YAAY;EACZC,YAAY;EACZK,OAAO,EAAE,EAAE;EACXC,MAAM,EAAE7B,IAAI,CAAC8B,EAAE;EACfC,MAAM,EAAE/B,IAAI,CAACgC,EAAE;EACfC,aAAa,EAAEA,CAAA,KAAK;IAClB,MAAM,IAAIR,KAAK,CAAC,yBAAyB,CAAC;EAC5C,CAAC;EACDS,cAAc,EAAE,MAAAA,CAAA,KAAW;IACzBC,MAAM,CAACC,QAAQ,CAACC,MAAM,EAAE;EAC1B;CACD","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}