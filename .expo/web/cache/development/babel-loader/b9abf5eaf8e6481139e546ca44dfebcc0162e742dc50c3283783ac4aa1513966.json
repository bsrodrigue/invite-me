{"ast":null,"code":"'use strict';\n\nimport _defineProperty from \"@babel/runtime/helpers/defineProperty\";\nfunction ownKeys(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }\nfunction _objectSpread(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? ownKeys(Object(t), !0).forEach(function (r) { _defineProperty(e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; }\nimport * as ReactNativeFeatureFlags from '../../src/private/featureflags/ReactNativeFeatureFlags';\nimport { isPublicInstance as isFabricPublicInstance } from '../ReactNative/ReactFabricPublicInstance/ReactFabricPublicInstanceUtils';\nimport useRefEffect from '../Utilities/useRefEffect';\nimport { AnimatedEvent } from './AnimatedEvent';\nimport NativeAnimatedHelper from './NativeAnimatedHelper';\nimport AnimatedProps from './nodes/AnimatedProps';\nimport { useCallback, useEffect, useLayoutEffect, useMemo, useReducer, useRef } from 'react';\nexport default function useAnimatedProps(props) {\n  const [, scheduleUpdate] = useReducer(count => count + 1, 0);\n  const onUpdateRef = useRef(null);\n  const timerRef = useRef(null);\n  const node = useMemo(() => new AnimatedProps(props, () => onUpdateRef.current?.()), [props]);\n  const useNativePropsInFabric = ReactNativeFeatureFlags.shouldUseSetNativePropsInFabric();\n  useAnimatedPropsLifecycle(node);\n  const refEffect = useCallback(instance => {\n    node.setNativeView(instance);\n    onUpdateRef.current = () => {\n      if (process.env.NODE_ENV === 'test' || typeof instance !== 'object' || typeof instance?.setNativeProps !== 'function' || isFabricInstance(instance) && !useNativePropsInFabric) {\n        scheduleUpdate();\n      } else if (!node.__isNative) {\n        instance.setNativeProps(node.__getAnimatedValue());\n        if (isFabricInstance(instance)) {\n          if (timerRef.current != null) {\n            clearTimeout(timerRef.current);\n          }\n          timerRef.current = setTimeout(() => {\n            timerRef.current = null;\n            scheduleUpdate();\n          }, 48);\n        }\n      }\n    };\n    const target = getEventTarget(instance);\n    const events = [];\n    for (const propName in props) {\n      const propValue = props[propName];\n      if (propValue instanceof AnimatedEvent && propValue.__isNative) {\n        propValue.__attach(target, propName);\n        events.push([propName, propValue]);\n      }\n    }\n    return () => {\n      onUpdateRef.current = null;\n      for (const [propName, propValue] of events) {\n        propValue.__detach(target, propName);\n      }\n    };\n  }, [props, node, useNativePropsInFabric]);\n  const callbackRef = useRefEffect(refEffect);\n  return [reduceAnimatedProps(node), callbackRef];\n}\nfunction reduceAnimatedProps(node) {\n  return _objectSpread(_objectSpread({}, node.__getValue()), {}, {\n    collapsable: false\n  });\n}\nfunction useAnimatedPropsLifecycle(node) {\n  const prevNodeRef = useRef(null);\n  const isUnmountingRef = useRef(false);\n  useEffect(() => {\n    NativeAnimatedHelper.API.flushQueue();\n  });\n  useLayoutEffect(() => {\n    isUnmountingRef.current = false;\n    return () => {\n      isUnmountingRef.current = true;\n    };\n  }, []);\n  useLayoutEffect(() => {\n    node.__attach();\n    if (prevNodeRef.current != null) {\n      const prevNode = prevNodeRef.current;\n      prevNode.__restoreDefaultValues();\n      prevNode.__detach();\n      prevNodeRef.current = null;\n    }\n    return () => {\n      if (isUnmountingRef.current) {\n        node.__detach();\n      } else {\n        prevNodeRef.current = node;\n      }\n    };\n  }, [node]);\n}\nfunction getEventTarget(instance) {\n  return typeof instance === 'object' && typeof instance?.getScrollableNode === 'function' ? instance.getScrollableNode() : instance;\n}\nfunction isFabricInstance(instance) {\n  return isFabricPublicInstance(instance) || isFabricPublicInstance(instance?.getNativeScrollRef?.()) || isFabricPublicInstance(instance?.getScrollResponder?.()?.getNativeScrollRef?.());\n}","map":{"version":3,"names":["_defineProperty","ownKeys","e","r","t","Object","keys","getOwnPropertySymbols","o","filter","getOwnPropertyDescriptor","enumerable","push","apply","_objectSpread","arguments","length","forEach","getOwnPropertyDescriptors","defineProperties","defineProperty","ReactNativeFeatureFlags","isPublicInstance","isFabricPublicInstance","useRefEffect","AnimatedEvent","NativeAnimatedHelper","AnimatedProps","useCallback","useEffect","useLayoutEffect","useMemo","useReducer","useRef","useAnimatedProps","props","scheduleUpdate","count","onUpdateRef","timerRef","node","current","useNativePropsInFabric","shouldUseSetNativePropsInFabric","useAnimatedPropsLifecycle","refEffect","instance","setNativeView","process","env","NODE_ENV","setNativeProps","isFabricInstance","__isNative","__getAnimatedValue","clearTimeout","setTimeout","target","getEventTarget","events","propName","propValue","__attach","__detach","callbackRef","reduceAnimatedProps","__getValue","collapsable","prevNodeRef","isUnmountingRef","API","flushQueue","prevNode","__restoreDefaultValues","getScrollableNode","getNativeScrollRef","getScrollResponder"],"sources":["/home/rodo/workspace/passion/apps/muh-money/node_modules/react-native/Libraries/Animated/useAnimatedProps.js"],"sourcesContent":["/**\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @flow strict-local\n * @format\n */\n\n'use strict';\n\nimport * as ReactNativeFeatureFlags from '../../src/private/featureflags/ReactNativeFeatureFlags';\nimport {isPublicInstance as isFabricPublicInstance} from '../ReactNative/ReactFabricPublicInstance/ReactFabricPublicInstanceUtils';\nimport useRefEffect from '../Utilities/useRefEffect';\nimport {AnimatedEvent} from './AnimatedEvent';\nimport NativeAnimatedHelper from './NativeAnimatedHelper';\nimport AnimatedProps from './nodes/AnimatedProps';\nimport {\n  useCallback,\n  useEffect,\n  useLayoutEffect,\n  useMemo,\n  useReducer,\n  useRef,\n} from 'react';\n\ntype ReducedProps<TProps> = {\n  ...TProps,\n  collapsable: boolean,\n  ...\n};\ntype CallbackRef<T> = T => mixed;\n\nexport default function useAnimatedProps<TProps: {...}, TInstance>(\n  props: TProps,\n): [ReducedProps<TProps>, CallbackRef<TInstance | null>] {\n  const [, scheduleUpdate] = useReducer<number, void>(count => count + 1, 0);\n  const onUpdateRef = useRef<?() => void>(null);\n  const timerRef = useRef<TimeoutID | null>(null);\n\n  // TODO: Only invalidate `node` if animated props or `style` change. In the\n  // previous implementation, we permitted `style` to override props with the\n  // same name property name as styles, so we can probably continue doing that.\n  // The ordering of other props *should* not matter.\n  const node = useMemo(\n    () => new AnimatedProps(props, () => onUpdateRef.current?.()),\n    [props],\n  );\n  const useNativePropsInFabric =\n    ReactNativeFeatureFlags.shouldUseSetNativePropsInFabric();\n  useAnimatedPropsLifecycle(node);\n\n  // TODO: This \"effect\" does three things:\n  //\n  //   1) Call `setNativeView`.\n  //   2) Update `onUpdateRef`.\n  //   3) Update listeners for `AnimatedEvent` props.\n  //\n  // Ideally, each of these would be separate \"effects\" so that they are not\n  // unnecessarily re-run when irrelevant dependencies change. For example, we\n  // should be able to hoist all `AnimatedEvent` props and only do #3 if either\n  // the `AnimatedEvent` props change or `instance` changes.\n  //\n  // But there is no way to transparently compose three separate callback refs,\n  // so we just combine them all into one for now.\n  const refEffect = useCallback(\n    (instance: TInstance) => {\n      // NOTE: This may be called more often than necessary (e.g. when `props`\n      // changes), but `setNativeView` already optimizes for that.\n      node.setNativeView(instance);\n\n      // NOTE: When using the JS animation driver, this callback is called on\n      // every animation frame. When using the native driver, this callback is\n      // called when the animation completes.\n      onUpdateRef.current = () => {\n        if (\n          process.env.NODE_ENV === 'test' ||\n          typeof instance !== 'object' ||\n          typeof instance?.setNativeProps !== 'function' ||\n          (isFabricInstance(instance) && !useNativePropsInFabric)\n        ) {\n          // Schedule an update for this component to update `reducedProps`,\n          // but do not compute it immediately. If a parent also updated, we\n          // need to merge those new props in before updating.\n          scheduleUpdate();\n        } else if (!node.__isNative) {\n          // $FlowIgnore[not-a-function] - Assume it's still a function.\n          // $FlowFixMe[incompatible-use]\n          instance.setNativeProps(node.__getAnimatedValue());\n          if (isFabricInstance(instance)) {\n            // Keeping state of Fiber tree and Shadow tree in sync.\n            //\n            // This is done by calling `scheduleUpdate` which will trigger a commit.\n            // However, React commit is not fast enough to drive animations.\n            // This is where setNativeProps comes in handy but the state between\n            // Fiber tree and Shadow tree needs to be kept in sync.\n            // The goal is to call `scheduleUpdate` as little as possible to maintain\n            // performance but frequently enough to keep state in sync.\n            // Debounce is set to 48ms, which is 3 * the duration of a frame.\n            // 3 frames was the highest value where flickering state was not observed.\n            if (timerRef.current != null) {\n              clearTimeout(timerRef.current);\n            }\n            timerRef.current = setTimeout(() => {\n              timerRef.current = null;\n              scheduleUpdate();\n            }, 48);\n          }\n        }\n      };\n\n      const target = getEventTarget(instance);\n      const events = [];\n\n      for (const propName in props) {\n        const propValue = props[propName];\n        if (propValue instanceof AnimatedEvent && propValue.__isNative) {\n          propValue.__attach(target, propName);\n          events.push([propName, propValue]);\n        }\n      }\n\n      return () => {\n        onUpdateRef.current = null;\n\n        for (const [propName, propValue] of events) {\n          propValue.__detach(target, propName);\n        }\n      };\n    },\n    [props, node, useNativePropsInFabric],\n  );\n  const callbackRef = useRefEffect<TInstance>(refEffect);\n\n  return [reduceAnimatedProps<TProps>(node), callbackRef];\n}\n\nfunction reduceAnimatedProps<TProps>(\n  node: AnimatedProps,\n): ReducedProps<TProps> {\n  // Force `collapsable` to be false so that the native view is not flattened.\n  // Flattened views cannot be accurately referenced by the native driver.\n  return {\n    ...node.__getValue(),\n    collapsable: false,\n  };\n}\n\n/**\n * Manages the lifecycle of the supplied `AnimatedProps` by invoking `__attach`\n * and `__detach`. However, this is more complicated because `AnimatedProps`\n * uses reference counting to determine when to recursively detach its children\n * nodes. So in order to optimize this, we avoid detaching until the next attach\n * unless we are unmounting.\n */\nfunction useAnimatedPropsLifecycle(node: AnimatedProps): void {\n  const prevNodeRef = useRef<?AnimatedProps>(null);\n  const isUnmountingRef = useRef<boolean>(false);\n\n  useEffect(() => {\n    // It is ok for multiple components to call `flushQueue` because it noops\n    // if the queue is empty. When multiple animated components are mounted at\n    // the same time. Only first component flushes the queue and the others will noop.\n    NativeAnimatedHelper.API.flushQueue();\n  });\n\n  useLayoutEffect(() => {\n    isUnmountingRef.current = false;\n    return () => {\n      isUnmountingRef.current = true;\n    };\n  }, []);\n\n  useLayoutEffect(() => {\n    node.__attach();\n    if (prevNodeRef.current != null) {\n      const prevNode = prevNodeRef.current;\n      // TODO: Stop restoring default values (unless `reset` is called).\n      prevNode.__restoreDefaultValues();\n      prevNode.__detach();\n      prevNodeRef.current = null;\n    }\n    return () => {\n      if (isUnmountingRef.current) {\n        // NOTE: Do not restore default values on unmount, see D18197735.\n        node.__detach();\n      } else {\n        prevNodeRef.current = node;\n      }\n    };\n  }, [node]);\n}\n\nfunction getEventTarget<TInstance>(instance: TInstance): TInstance {\n  return typeof instance === 'object' &&\n    typeof instance?.getScrollableNode === 'function'\n    ? // $FlowFixMe[incompatible-use] - Legacy instance assumptions.\n      instance.getScrollableNode()\n    : instance;\n}\n\n// $FlowFixMe[unclear-type] - Legacy instance assumptions.\nfunction isFabricInstance(instance: any): boolean {\n  return (\n    isFabricPublicInstance(instance) ||\n    // Some components have a setNativeProps function but aren't a host component\n    // such as lists like FlatList and SectionList. These should also use\n    // forceUpdate in Fabric since setNativeProps doesn't exist on the underlying\n    // host component. This crazy hack is essentially special casing those lists and\n    // ScrollView itself to use forceUpdate in Fabric.\n    // If these components end up using forwardRef then these hacks can go away\n    // as instance would actually be the underlying host component and the above check\n    // would be sufficient.\n    isFabricPublicInstance(instance?.getNativeScrollRef?.()) ||\n    isFabricPublicInstance(\n      instance?.getScrollResponder?.()?.getNativeScrollRef?.(),\n    )\n  );\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}