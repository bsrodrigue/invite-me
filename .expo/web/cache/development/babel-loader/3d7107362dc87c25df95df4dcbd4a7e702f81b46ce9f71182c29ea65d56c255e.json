{"ast":null,"code":"import NativeEventEmitter from '../EventEmitter/NativeEventEmitter';\nimport Platform from '../Utilities/Platform';\nimport NativeIntentAndroid from './NativeIntentAndroid';\nimport NativeLinkingManager from './NativeLinkingManager';\nimport invariant from 'invariant';\nimport nullthrows from 'nullthrows';\nclass Linking extends NativeEventEmitter {\n  constructor() {\n    super(Platform.OS === 'ios' ? nullthrows(NativeLinkingManager) : undefined);\n  }\n  addEventListener(eventType, listener, context) {\n    return this.addListener(eventType, listener);\n  }\n  openURL(url) {\n    this._validateURL(url);\n    if (Platform.OS === 'android') {\n      return nullthrows(NativeIntentAndroid).openURL(url);\n    } else {\n      return nullthrows(NativeLinkingManager).openURL(url);\n    }\n  }\n  canOpenURL(url) {\n    this._validateURL(url);\n    if (Platform.OS === 'android') {\n      return nullthrows(NativeIntentAndroid).canOpenURL(url);\n    } else {\n      return nullthrows(NativeLinkingManager).canOpenURL(url);\n    }\n  }\n  openSettings() {\n    if (Platform.OS === 'android') {\n      return nullthrows(NativeIntentAndroid).openSettings();\n    } else {\n      return nullthrows(NativeLinkingManager).openSettings();\n    }\n  }\n  getInitialURL() {\n    return Platform.OS === 'android' ? nullthrows(NativeIntentAndroid).getInitialURL() : nullthrows(NativeLinkingManager).getInitialURL();\n  }\n  sendIntent(action, extras) {\n    if (Platform.OS === 'android') {\n      return nullthrows(NativeIntentAndroid).sendIntent(action, extras);\n    } else {\n      return new Promise((resolve, reject) => reject(new Error('Unsupported')));\n    }\n  }\n  _validateURL(url) {\n    invariant(typeof url === 'string', 'Invalid URL: should be a string. Was: ' + url);\n    invariant(url, 'Invalid URL: cannot be empty');\n  }\n}\nmodule.exports = new Linking();","map":{"version":3,"names":["NativeEventEmitter","Platform","NativeIntentAndroid","NativeLinkingManager","invariant","nullthrows","Linking","constructor","OS","undefined","addEventListener","eventType","listener","context","addListener","openURL","url","_validateURL","canOpenURL","openSettings","getInitialURL","sendIntent","action","extras","Promise","resolve","reject","Error","module","exports"],"sources":["/home/rodo/workspace/passion/apps/muh-money/node_modules/react-native/Libraries/Linking/Linking.js"],"sourcesContent":["/**\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @format\n * @flow strict-local\n */\n\nimport type {EventSubscription} from '../vendor/emitter/EventEmitter';\n\nimport NativeEventEmitter from '../EventEmitter/NativeEventEmitter';\nimport Platform from '../Utilities/Platform';\nimport NativeIntentAndroid from './NativeIntentAndroid';\nimport NativeLinkingManager from './NativeLinkingManager';\nimport invariant from 'invariant';\nimport nullthrows from 'nullthrows';\n\ntype LinkingEventDefinitions = {\n  url: [{url: string}],\n};\n\n/**\n * `Linking` gives you a general interface to interact with both incoming\n * and outgoing app links.\n *\n * See https://reactnative.dev/docs/linking\n */\nclass Linking extends NativeEventEmitter<LinkingEventDefinitions> {\n  constructor() {\n    super(Platform.OS === 'ios' ? nullthrows(NativeLinkingManager) : undefined);\n  }\n\n  /**\n   * Add a handler to Linking changes by listening to the `url` event type\n   * and providing the handler\n   *\n   * See https://reactnative.dev/docs/linking#addeventlistener\n   */\n  addEventListener<K: $Keys<LinkingEventDefinitions>>(\n    eventType: K,\n    listener: (...$ElementType<LinkingEventDefinitions, K>) => mixed,\n    context: $FlowFixMe,\n  ): EventSubscription {\n    return this.addListener(eventType, listener);\n  }\n\n  /**\n   * Try to open the given `url` with any of the installed apps.\n   *\n   * See https://reactnative.dev/docs/linking#openurl\n   */\n  openURL(url: string): Promise<void> {\n    this._validateURL(url);\n    if (Platform.OS === 'android') {\n      return nullthrows(NativeIntentAndroid).openURL(url);\n    } else {\n      return nullthrows(NativeLinkingManager).openURL(url);\n    }\n  }\n\n  /**\n   * Determine whether or not an installed app can handle a given URL.\n   *\n   * See https://reactnative.dev/docs/linking#canopenurl\n   */\n  canOpenURL(url: string): Promise<boolean> {\n    this._validateURL(url);\n    if (Platform.OS === 'android') {\n      return nullthrows(NativeIntentAndroid).canOpenURL(url);\n    } else {\n      return nullthrows(NativeLinkingManager).canOpenURL(url);\n    }\n  }\n\n  /**\n   * Open app settings.\n   *\n   * See https://reactnative.dev/docs/linking#opensettings\n   */\n  openSettings(): Promise<void> {\n    if (Platform.OS === 'android') {\n      return nullthrows(NativeIntentAndroid).openSettings();\n    } else {\n      return nullthrows(NativeLinkingManager).openSettings();\n    }\n  }\n\n  /**\n   * If the app launch was triggered by an app link,\n   * it will give the link url, otherwise it will give `null`\n   *\n   * See https://reactnative.dev/docs/linking#getinitialurl\n   */\n  getInitialURL(): Promise<?string> {\n    return Platform.OS === 'android'\n      ? nullthrows(NativeIntentAndroid).getInitialURL()\n      : nullthrows(NativeLinkingManager).getInitialURL();\n  }\n\n  /*\n   * Launch an Android intent with extras (optional)\n   *\n   * @platform android\n   *\n   * See https://reactnative.dev/docs/linking#sendintent\n   */\n  sendIntent(\n    action: string,\n    extras?: Array<{\n      key: string,\n      value: string | number | boolean,\n      ...\n    }>,\n  ): Promise<void> {\n    if (Platform.OS === 'android') {\n      return nullthrows(NativeIntentAndroid).sendIntent(action, extras);\n    } else {\n      return new Promise((resolve, reject) => reject(new Error('Unsupported')));\n    }\n  }\n\n  _validateURL(url: string): void {\n    invariant(\n      typeof url === 'string',\n      'Invalid URL: should be a string. Was: ' + url,\n    );\n    invariant(url, 'Invalid URL: cannot be empty');\n  }\n}\n\nmodule.exports = (new Linking(): Linking);\n"],"mappings":"AAYA,OAAOA,kBAAkB,MAAM,oCAAoC;AACnE,OAAOC,QAAQ,MAAM,uBAAuB;AAC5C,OAAOC,mBAAmB,MAAM,uBAAuB;AACvD,OAAOC,oBAAoB,MAAM,wBAAwB;AACzD,OAAOC,SAAS,MAAM,WAAW;AACjC,OAAOC,UAAU,MAAM,YAAY;AAYnC,MAAMC,OAAO,SAASN,kBAAkB,CAA0B;EAChEO,WAAWA,CAAA,EAAG;IACZ,KAAK,CAACN,QAAQ,CAACO,EAAE,KAAK,KAAK,GAAGH,UAAU,CAACF,oBAAoB,CAAC,GAAGM,SAAS,CAAC;EAC7E;EAQAC,gBAAgBA,CACdC,SAAY,EACZC,QAAgE,EAChEC,OAAmB,EACA;IACnB,OAAO,IAAI,CAACC,WAAW,CAACH,SAAS,EAAEC,QAAQ,CAAC;EAC9C;EAOAG,OAAOA,CAACC,GAAW,EAAiB;IAClC,IAAI,CAACC,YAAY,CAACD,GAAG,CAAC;IACtB,IAAIf,QAAQ,CAACO,EAAE,KAAK,SAAS,EAAE;MAC7B,OAAOH,UAAU,CAACH,mBAAmB,CAAC,CAACa,OAAO,CAACC,GAAG,CAAC;IACrD,CAAC,MAAM;MACL,OAAOX,UAAU,CAACF,oBAAoB,CAAC,CAACY,OAAO,CAACC,GAAG,CAAC;IACtD;EACF;EAOAE,UAAUA,CAACF,GAAW,EAAoB;IACxC,IAAI,CAACC,YAAY,CAACD,GAAG,CAAC;IACtB,IAAIf,QAAQ,CAACO,EAAE,KAAK,SAAS,EAAE;MAC7B,OAAOH,UAAU,CAACH,mBAAmB,CAAC,CAACgB,UAAU,CAACF,GAAG,CAAC;IACxD,CAAC,MAAM;MACL,OAAOX,UAAU,CAACF,oBAAoB,CAAC,CAACe,UAAU,CAACF,GAAG,CAAC;IACzD;EACF;EAOAG,YAAYA,CAAA,EAAkB;IAC5B,IAAIlB,QAAQ,CAACO,EAAE,KAAK,SAAS,EAAE;MAC7B,OAAOH,UAAU,CAACH,mBAAmB,CAAC,CAACiB,YAAY,CAAC,CAAC;IACvD,CAAC,MAAM;MACL,OAAOd,UAAU,CAACF,oBAAoB,CAAC,CAACgB,YAAY,CAAC,CAAC;IACxD;EACF;EAQAC,aAAaA,CAAA,EAAqB;IAChC,OAAOnB,QAAQ,CAACO,EAAE,KAAK,SAAS,GAC5BH,UAAU,CAACH,mBAAmB,CAAC,CAACkB,aAAa,CAAC,CAAC,GAC/Cf,UAAU,CAACF,oBAAoB,CAAC,CAACiB,aAAa,CAAC,CAAC;EACtD;EASAC,UAAUA,CACRC,MAAc,EACdC,MAIE,EACa;IACf,IAAItB,QAAQ,CAACO,EAAE,KAAK,SAAS,EAAE;MAC7B,OAAOH,UAAU,CAACH,mBAAmB,CAAC,CAACmB,UAAU,CAACC,MAAM,EAAEC,MAAM,CAAC;IACnE,CAAC,MAAM;MACL,OAAO,IAAIC,OAAO,CAAC,CAACC,OAAO,EAAEC,MAAM,KAAKA,MAAM,CAAC,IAAIC,KAAK,CAAC,aAAa,CAAC,CAAC,CAAC;IAC3E;EACF;EAEAV,YAAYA,CAACD,GAAW,EAAQ;IAC9BZ,SAAS,CACP,OAAOY,GAAG,KAAK,QAAQ,EACvB,wCAAwC,GAAGA,GAC7C,CAAC;IACDZ,SAAS,CAACY,GAAG,EAAE,8BAA8B,CAAC;EAChD;AACF;AAEAY,MAAM,CAACC,OAAO,GAAI,IAAIvB,OAAO,CAAC,CAAW","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}