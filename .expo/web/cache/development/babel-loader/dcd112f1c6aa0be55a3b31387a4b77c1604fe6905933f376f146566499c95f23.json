{"ast":null,"code":"import NativeFileReaderModule from './NativeFileReaderModule';\nimport { toByteArray } from 'base64-js';\nimport EventTarget from 'event-target-shim';\nconst READER_EVENTS = ['abort', 'error', 'load', 'loadstart', 'loadend', 'progress'];\nconst EMPTY = 0;\nconst LOADING = 1;\nconst DONE = 2;\nclass FileReader extends EventTarget(...READER_EVENTS) {\n  static EMPTY = EMPTY;\n  static LOADING = LOADING;\n  static DONE = DONE;\n  EMPTY = EMPTY;\n  LOADING = LOADING;\n  DONE = DONE;\n  _aborted = false;\n  constructor() {\n    super();\n    this._reset();\n  }\n  _reset() {\n    this._readyState = EMPTY;\n    this._error = null;\n    this._result = null;\n  }\n  _setReadyState(newState) {\n    this._readyState = newState;\n    this.dispatchEvent({\n      type: 'readystatechange'\n    });\n    if (newState === DONE) {\n      if (this._aborted) {\n        this.dispatchEvent({\n          type: 'abort'\n        });\n      } else if (this._error) {\n        this.dispatchEvent({\n          type: 'error'\n        });\n      } else {\n        this.dispatchEvent({\n          type: 'load'\n        });\n      }\n      this.dispatchEvent({\n        type: 'loadend'\n      });\n    }\n  }\n  readAsArrayBuffer(blob) {\n    this._aborted = false;\n    if (blob == null) {\n      throw new TypeError(\"Failed to execute 'readAsArrayBuffer' on 'FileReader': parameter 1 is not of type 'Blob'\");\n    }\n    NativeFileReaderModule.readAsDataURL(blob.data).then(text => {\n      if (this._aborted) {\n        return;\n      }\n      const base64 = text.split(',')[1];\n      const typedArray = toByteArray(base64);\n      this._result = typedArray.buffer;\n      this._setReadyState(DONE);\n    }, error => {\n      if (this._aborted) {\n        return;\n      }\n      this._error = error;\n      this._setReadyState(DONE);\n    });\n  }\n  readAsDataURL(blob) {\n    this._aborted = false;\n    if (blob == null) {\n      throw new TypeError(\"Failed to execute 'readAsDataURL' on 'FileReader': parameter 1 is not of type 'Blob'\");\n    }\n    NativeFileReaderModule.readAsDataURL(blob.data).then(text => {\n      if (this._aborted) {\n        return;\n      }\n      this._result = text;\n      this._setReadyState(DONE);\n    }, error => {\n      if (this._aborted) {\n        return;\n      }\n      this._error = error;\n      this._setReadyState(DONE);\n    });\n  }\n  readAsText(blob, encoding = 'UTF-8') {\n    this._aborted = false;\n    if (blob == null) {\n      throw new TypeError(\"Failed to execute 'readAsText' on 'FileReader': parameter 1 is not of type 'Blob'\");\n    }\n    NativeFileReaderModule.readAsText(blob.data, encoding).then(text => {\n      if (this._aborted) {\n        return;\n      }\n      this._result = text;\n      this._setReadyState(DONE);\n    }, error => {\n      if (this._aborted) {\n        return;\n      }\n      this._error = error;\n      this._setReadyState(DONE);\n    });\n  }\n  abort() {\n    this._aborted = true;\n    if (this._readyState !== EMPTY && this._readyState !== DONE) {\n      this._reset();\n      this._setReadyState(DONE);\n    }\n    this._reset();\n  }\n  get readyState() {\n    return this._readyState;\n  }\n  get error() {\n    return this._error;\n  }\n  get result() {\n    return this._result;\n  }\n}\nmodule.exports = FileReader;","map":{"version":3,"names":["NativeFileReaderModule","toByteArray","EventTarget","READER_EVENTS","EMPTY","LOADING","DONE","FileReader","_aborted","constructor","_reset","_readyState","_error","_result","_setReadyState","newState","dispatchEvent","type","readAsArrayBuffer","blob","TypeError","readAsDataURL","data","then","text","base64","split","typedArray","buffer","error","readAsText","encoding","abort","readyState","result","module","exports"],"sources":["/home/rodo/workspace/passion/apps/muh-money/node_modules/react-native/Libraries/Blob/FileReader.js"],"sourcesContent":["/**\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @flow\n * @format\n */\n\nimport type Blob from './Blob';\n\nimport NativeFileReaderModule from './NativeFileReaderModule';\nimport {toByteArray} from 'base64-js';\nimport EventTarget from 'event-target-shim';\n\ntype ReadyState =\n  | 0 // EMPTY\n  | 1 // LOADING\n  | 2; // DONE\n\ntype ReaderResult = string | ArrayBuffer;\n\nconst READER_EVENTS = [\n  'abort',\n  'error',\n  'load',\n  'loadstart',\n  'loadend',\n  'progress',\n];\n\nconst EMPTY = 0;\nconst LOADING = 1;\nconst DONE = 2;\n\nclass FileReader extends (EventTarget(...READER_EVENTS): any) {\n  static EMPTY: number = EMPTY;\n  static LOADING: number = LOADING;\n  static DONE: number = DONE;\n\n  EMPTY: number = EMPTY;\n  LOADING: number = LOADING;\n  DONE: number = DONE;\n\n  _readyState: ReadyState;\n  _error: ?Error;\n  _result: ?ReaderResult;\n  _aborted: boolean = false;\n\n  constructor() {\n    super();\n    this._reset();\n  }\n\n  _reset(): void {\n    this._readyState = EMPTY;\n    this._error = null;\n    this._result = null;\n  }\n\n  _setReadyState(newState: ReadyState) {\n    this._readyState = newState;\n    this.dispatchEvent({type: 'readystatechange'});\n    if (newState === DONE) {\n      if (this._aborted) {\n        this.dispatchEvent({type: 'abort'});\n      } else if (this._error) {\n        this.dispatchEvent({type: 'error'});\n      } else {\n        this.dispatchEvent({type: 'load'});\n      }\n      this.dispatchEvent({type: 'loadend'});\n    }\n  }\n\n  readAsArrayBuffer(blob: ?Blob): void {\n    this._aborted = false;\n\n    if (blob == null) {\n      throw new TypeError(\n        \"Failed to execute 'readAsArrayBuffer' on 'FileReader': parameter 1 is not of type 'Blob'\",\n      );\n    }\n\n    NativeFileReaderModule.readAsDataURL(blob.data).then(\n      (text: string) => {\n        if (this._aborted) {\n          return;\n        }\n\n        const base64 = text.split(',')[1];\n        const typedArray = toByteArray(base64);\n\n        this._result = typedArray.buffer;\n        this._setReadyState(DONE);\n      },\n      error => {\n        if (this._aborted) {\n          return;\n        }\n        this._error = error;\n        this._setReadyState(DONE);\n      },\n    );\n  }\n\n  readAsDataURL(blob: ?Blob): void {\n    this._aborted = false;\n\n    if (blob == null) {\n      throw new TypeError(\n        \"Failed to execute 'readAsDataURL' on 'FileReader': parameter 1 is not of type 'Blob'\",\n      );\n    }\n\n    NativeFileReaderModule.readAsDataURL(blob.data).then(\n      (text: string) => {\n        if (this._aborted) {\n          return;\n        }\n        this._result = text;\n        this._setReadyState(DONE);\n      },\n      error => {\n        if (this._aborted) {\n          return;\n        }\n        this._error = error;\n        this._setReadyState(DONE);\n      },\n    );\n  }\n\n  readAsText(blob: ?Blob, encoding: string = 'UTF-8'): void {\n    this._aborted = false;\n\n    if (blob == null) {\n      throw new TypeError(\n        \"Failed to execute 'readAsText' on 'FileReader': parameter 1 is not of type 'Blob'\",\n      );\n    }\n\n    NativeFileReaderModule.readAsText(blob.data, encoding).then(\n      (text: string) => {\n        if (this._aborted) {\n          return;\n        }\n        this._result = text;\n        this._setReadyState(DONE);\n      },\n      error => {\n        if (this._aborted) {\n          return;\n        }\n        this._error = error;\n        this._setReadyState(DONE);\n      },\n    );\n  }\n\n  abort() {\n    this._aborted = true;\n    // only call onreadystatechange if there is something to abort, as per spec\n    if (this._readyState !== EMPTY && this._readyState !== DONE) {\n      this._reset();\n      this._setReadyState(DONE);\n    }\n    // Reset again after, in case modified in handler\n    this._reset();\n  }\n\n  get readyState(): ReadyState {\n    return this._readyState;\n  }\n\n  get error(): ?Error {\n    return this._error;\n  }\n\n  get result(): ?ReaderResult {\n    return this._result;\n  }\n}\n\nmodule.exports = FileReader;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}