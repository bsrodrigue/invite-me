{"ast":null,"code":"'use strict';\n\nconst XMLHttpRequest = require('../Network/XMLHttpRequest');\nconst InspectorAgent = require('./InspectorAgent');\nconst JSInspector = require('./JSInspector');\nclass Interceptor {\n  constructor(agent) {\n    this._agent = agent;\n    this._requests = new Map();\n  }\n  getData(requestId) {\n    return this._requests.get(requestId);\n  }\n  requestSent(id, url, method, headers) {\n    const requestId = String(id);\n    this._requests.set(requestId, '');\n    const request = {\n      url,\n      method,\n      headers,\n      initialPriority: 'Medium'\n    };\n    const event = {\n      requestId,\n      documentURL: '',\n      frameId: '1',\n      loaderId: '1',\n      request,\n      timestamp: JSInspector.getTimestamp(),\n      initiator: {\n        type: 'other'\n      },\n      type: 'Other'\n    };\n    this._agent.sendEvent('requestWillBeSent', event);\n  }\n  responseReceived(id, url, status, headers) {\n    const requestId = String(id);\n    const response = {\n      url,\n      status,\n      statusText: String(status),\n      headers,\n      requestHeaders: {},\n      mimeType: this._getMimeType(headers),\n      connectionReused: false,\n      connectionId: -1,\n      encodedDataLength: 0,\n      securityState: 'unknown'\n    };\n    const event = {\n      requestId,\n      frameId: '1',\n      loaderId: '1',\n      timestamp: JSInspector.getTimestamp(),\n      type: 'Other',\n      response\n    };\n    this._agent.sendEvent('responseReceived', event);\n  }\n  dataReceived(id, data) {\n    const requestId = String(id);\n    const existingData = this._requests.get(requestId) || '';\n    this._requests.set(requestId, existingData.concat(data));\n    const event = {\n      requestId,\n      timestamp: JSInspector.getTimestamp(),\n      dataLength: data.length,\n      encodedDataLength: data.length\n    };\n    this._agent.sendEvent('dataReceived', event);\n  }\n  loadingFinished(id, encodedDataLength) {\n    const event = {\n      requestId: String(id),\n      timestamp: JSInspector.getTimestamp(),\n      encodedDataLength: encodedDataLength\n    };\n    this._agent.sendEvent('loadingFinished', event);\n  }\n  loadingFailed(id, error) {\n    const event = {\n      requestId: String(id),\n      timestamp: JSInspector.getTimestamp(),\n      type: 'Other',\n      errorText: error\n    };\n    this._agent.sendEvent('loadingFailed', event);\n  }\n  _getMimeType(headers) {\n    const contentType = headers['Content-Type'] || '';\n    return contentType.split(';')[0];\n  }\n}\nclass NetworkAgent extends InspectorAgent {\n  static DOMAIN = 'Network';\n  enable({\n    maxResourceBufferSize,\n    maxTotalBufferSize\n  }) {\n    this._interceptor = new Interceptor(this);\n    XMLHttpRequest.setInterceptor(this._interceptor);\n  }\n  disable() {\n    XMLHttpRequest.setInterceptor(null);\n    this._interceptor = null;\n  }\n  getResponseBody({\n    requestId\n  }) {\n    return {\n      body: this.interceptor().getData(requestId),\n      base64Encoded: false\n    };\n  }\n  interceptor() {\n    if (this._interceptor) {\n      return this._interceptor;\n    } else {\n      throw Error('_interceptor can not be null');\n    }\n  }\n}\nmodule.exports = NetworkAgent;","map":{"version":3,"names":["XMLHttpRequest","require","InspectorAgent","JSInspector","Interceptor","constructor","agent","_agent","_requests","Map","getData","requestId","get","requestSent","id","url","method","headers","String","set","request","initialPriority","event","documentURL","frameId","loaderId","timestamp","getTimestamp","initiator","type","sendEvent","responseReceived","status","response","statusText","requestHeaders","mimeType","_getMimeType","connectionReused","connectionId","encodedDataLength","securityState","dataReceived","data","existingData","concat","dataLength","length","loadingFinished","loadingFailed","error","errorText","contentType","split","NetworkAgent","DOMAIN","enable","maxResourceBufferSize","maxTotalBufferSize","_interceptor","setInterceptor","disable","getResponseBody","body","interceptor","base64Encoded","Error","module","exports"],"sources":["/home/rodo/workspace/passion/apps/muh-money/node_modules/react-native/Libraries/JSInspector/NetworkAgent.js"],"sourcesContent":["/**\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @format\n * @flow strict-local\n */\n\n'use strict';\n\nimport type EventSender from './InspectorAgent';\n\nconst XMLHttpRequest = require('../Network/XMLHttpRequest');\nconst InspectorAgent = require('./InspectorAgent');\nconst JSInspector = require('./JSInspector');\n\ntype RequestId = string;\n\ntype LoaderId = string;\ntype FrameId = string;\ntype Timestamp = number;\n\ntype Headers = {[string]: string};\n\n// We don't currently care about this\ntype ResourceTiming = null;\n\ntype ResourceType =\n  | 'Document'\n  | 'Stylesheet'\n  | 'Image'\n  | 'Media'\n  | 'Font'\n  | 'Script'\n  | 'TextTrack'\n  | 'XHR'\n  | 'Fetch'\n  | 'EventSource'\n  | 'WebSocket'\n  | 'Manifest'\n  | 'Other';\n\ntype SecurityState =\n  | 'unknown'\n  | 'neutral'\n  | 'insecure'\n  | 'warning'\n  | 'secure'\n  | 'info';\ntype BlockedReason =\n  | 'csp'\n  | 'mixed-content'\n  | 'origin'\n  | 'inspector'\n  | 'subresource-filter'\n  | 'other';\n\ntype StackTrace = null;\n\ntype Initiator = {\n  type: 'script' | 'other',\n  stackTrace?: StackTrace,\n  url?: string,\n  lineNumber?: number,\n  ...\n};\n\ntype ResourcePriority = 'VeryLow' | 'Low' | 'Medium' | 'High' | 'VeryHigh';\n\ntype Request = {\n  url: string,\n  method: string,\n  headers: Headers,\n  postData?: string,\n  mixedContentType?: 'blockable' | 'optionally-blockable' | 'none',\n  initialPriority: ResourcePriority,\n  ...\n};\n\ntype Response = {\n  url: string,\n  status: number,\n  statusText: string,\n  headers: Headers,\n  headersText?: string,\n  mimeType: string,\n  requestHeaders?: Headers,\n  requestHeadersText?: string,\n  connectionReused: boolean,\n  connectionId: number,\n  fromDiskCache?: boolean,\n  encodedDataLength: number,\n  timing?: ResourceTiming,\n  securityState: SecurityState,\n  ...\n};\n\ntype RequestWillBeSentEvent = {\n  requestId: RequestId,\n  frameId: FrameId,\n  loaderId: LoaderId,\n  documentURL: string,\n  request: Request,\n  timestamp: Timestamp,\n  initiator: Initiator,\n  redirectResponse?: Response,\n  // This is supposed to be optional but the inspector crashes without it,\n  // see https://bugs.chromium.org/p/chromium/issues/detail?id=653138\n  type: ResourceType,\n  ...\n};\n\ntype ResponseReceivedEvent = {\n  requestId: RequestId,\n  frameId: FrameId,\n  loaderId: LoaderId,\n  timestamp: Timestamp,\n  type: ResourceType,\n  response: Response,\n  ...\n};\n\ntype DataReceived = {\n  requestId: RequestId,\n  timestamp: Timestamp,\n  dataLength: number,\n  encodedDataLength: number,\n  ...\n};\n\ntype LoadingFinishedEvent = {\n  requestId: RequestId,\n  timestamp: Timestamp,\n  encodedDataLength: number,\n  ...\n};\n\ntype LoadingFailedEvent = {\n  requestId: RequestId,\n  timestamp: Timestamp,\n  type: ResourceType,\n  errorText: string,\n  canceled?: boolean,\n  blockedReason?: BlockedReason,\n  ...\n};\n\nclass Interceptor {\n  _agent: NetworkAgent;\n  _requests: Map<string, string>;\n\n  constructor(agent: NetworkAgent) {\n    this._agent = agent;\n    this._requests = new Map();\n  }\n\n  getData(requestId: string): ?string {\n    return this._requests.get(requestId);\n  }\n\n  requestSent(id: number, url: string, method: string, headers: Headers) {\n    const requestId = String(id);\n    this._requests.set(requestId, '');\n\n    const request: Request = {\n      url,\n      method,\n      headers,\n      initialPriority: 'Medium',\n    };\n    const event: RequestWillBeSentEvent = {\n      requestId,\n      documentURL: '',\n      frameId: '1',\n      loaderId: '1',\n      request,\n      timestamp: JSInspector.getTimestamp(),\n      initiator: {\n        // TODO(blom): Get stack trace\n        // If type is 'script' the inspector will try to execute\n        // `stack.callFrames[0]`\n        type: 'other',\n      },\n      type: 'Other',\n    };\n    this._agent.sendEvent('requestWillBeSent', event);\n  }\n\n  responseReceived(id: number, url: string, status: number, headers: Headers) {\n    const requestId = String(id);\n    const response: Response = {\n      url,\n      status,\n      statusText: String(status),\n      headers,\n      // TODO(blom) refined headers, can we get this?\n      requestHeaders: {},\n      mimeType: this._getMimeType(headers),\n      connectionReused: false,\n      connectionId: -1,\n      encodedDataLength: 0,\n      securityState: 'unknown',\n    };\n\n    const event: ResponseReceivedEvent = {\n      requestId,\n      frameId: '1',\n      loaderId: '1',\n      timestamp: JSInspector.getTimestamp(),\n      type: 'Other',\n      response,\n    };\n    this._agent.sendEvent('responseReceived', event);\n  }\n\n  dataReceived(id: number, data: string) {\n    const requestId = String(id);\n    const existingData = this._requests.get(requestId) || '';\n    this._requests.set(requestId, existingData.concat(data));\n    const event: DataReceived = {\n      requestId,\n      timestamp: JSInspector.getTimestamp(),\n      dataLength: data.length,\n      encodedDataLength: data.length,\n    };\n    this._agent.sendEvent('dataReceived', event);\n  }\n\n  loadingFinished(id: number, encodedDataLength: number) {\n    const event: LoadingFinishedEvent = {\n      requestId: String(id),\n      timestamp: JSInspector.getTimestamp(),\n      encodedDataLength: encodedDataLength,\n    };\n    this._agent.sendEvent('loadingFinished', event);\n  }\n\n  loadingFailed(id: number, error: string) {\n    const event: LoadingFailedEvent = {\n      requestId: String(id),\n      timestamp: JSInspector.getTimestamp(),\n      type: 'Other',\n      errorText: error,\n    };\n    this._agent.sendEvent('loadingFailed', event);\n  }\n\n  _getMimeType(headers: Headers): string {\n    const contentType = headers['Content-Type'] || '';\n    return contentType.split(';')[0];\n  }\n}\n\ntype EnableArgs = {\n  maxResourceBufferSize?: number,\n  maxTotalBufferSize?: number,\n  ...\n};\n\nclass NetworkAgent extends InspectorAgent {\n  static DOMAIN: $TEMPORARY$string<'Network'> = 'Network';\n\n  _sendEvent: EventSender;\n  _interceptor: ?Interceptor;\n\n  enable({maxResourceBufferSize, maxTotalBufferSize}: EnableArgs) {\n    this._interceptor = new Interceptor(this);\n    XMLHttpRequest.setInterceptor(this._interceptor);\n  }\n\n  disable() {\n    XMLHttpRequest.setInterceptor(null);\n    this._interceptor = null;\n  }\n\n  getResponseBody({requestId}: {requestId: RequestId, ...}): {\n    body: ?string,\n    base64Encoded: boolean,\n    ...\n  } {\n    return {body: this.interceptor().getData(requestId), base64Encoded: false};\n  }\n\n  interceptor(): Interceptor {\n    if (this._interceptor) {\n      return this._interceptor;\n    } else {\n      throw Error('_interceptor can not be null');\n    }\n  }\n}\n\nmodule.exports = NetworkAgent;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}