{"ast":null,"code":"import Platform from '../Utilities/Platform';\nimport RCTAlertManager from './RCTAlertManager';\nclass Alert {\n  static alert(title, message, buttons, options) {\n    if (Platform.OS === 'ios') {\n      Alert.prompt(title, message, buttons, 'default', undefined, undefined, options);\n    } else if (Platform.OS === 'android') {\n      const NativeDialogManagerAndroid = require('../NativeModules/specs/NativeDialogManagerAndroid').default;\n      if (!NativeDialogManagerAndroid) {\n        return;\n      }\n      const constants = NativeDialogManagerAndroid.getConstants();\n      const config = {\n        title: title || '',\n        message: message || '',\n        cancelable: false\n      };\n      if (options && options.cancelable) {\n        config.cancelable = options.cancelable;\n      }\n      const defaultPositiveText = 'OK';\n      const validButtons = buttons ? buttons.slice(0, 3) : [{\n        text: defaultPositiveText\n      }];\n      const buttonPositive = validButtons.pop();\n      const buttonNegative = validButtons.pop();\n      const buttonNeutral = validButtons.pop();\n      if (buttonNeutral) {\n        config.buttonNeutral = buttonNeutral.text || '';\n      }\n      if (buttonNegative) {\n        config.buttonNegative = buttonNegative.text || '';\n      }\n      if (buttonPositive) {\n        config.buttonPositive = buttonPositive.text || defaultPositiveText;\n      }\n      const onAction = (action, buttonKey) => {\n        if (action === constants.buttonClicked) {\n          if (buttonKey === constants.buttonNeutral) {\n            buttonNeutral.onPress && buttonNeutral.onPress();\n          } else if (buttonKey === constants.buttonNegative) {\n            buttonNegative.onPress && buttonNegative.onPress();\n          } else if (buttonKey === constants.buttonPositive) {\n            buttonPositive.onPress && buttonPositive.onPress();\n          }\n        } else if (action === constants.dismissed) {\n          options && options.onDismiss && options.onDismiss();\n        }\n      };\n      const onError = errorMessage => console.warn(errorMessage);\n      NativeDialogManagerAndroid.showAlert(config, onError, onAction);\n    }\n  }\n  static prompt(title, message, callbackOrButtons, type = 'plain-text', defaultValue, keyboardType, options) {\n    if (Platform.OS === 'ios') {\n      let callbacks = [];\n      const buttons = [];\n      let cancelButtonKey;\n      let destructiveButtonKey;\n      let preferredButtonKey;\n      if (typeof callbackOrButtons === 'function') {\n        callbacks = [callbackOrButtons];\n      } else if (Array.isArray(callbackOrButtons)) {\n        callbackOrButtons.forEach((btn, index) => {\n          callbacks[index] = btn.onPress;\n          if (btn.style === 'cancel') {\n            cancelButtonKey = String(index);\n          } else if (btn.style === 'destructive') {\n            destructiveButtonKey = String(index);\n          }\n          if (btn.isPreferred) {\n            preferredButtonKey = String(index);\n          }\n          if (btn.text || index < (callbackOrButtons || []).length - 1) {\n            const btnDef = {};\n            btnDef[index] = btn.text || '';\n            buttons.push(btnDef);\n          }\n        });\n      }\n      RCTAlertManager.alertWithArgs({\n        title: title || '',\n        message: message || undefined,\n        buttons,\n        type: type || undefined,\n        defaultValue,\n        cancelButtonKey,\n        destructiveButtonKey,\n        preferredButtonKey,\n        keyboardType,\n        userInterfaceStyle: options?.userInterfaceStyle || undefined\n      }, (id, value) => {\n        const cb = callbacks[id];\n        cb && cb(value);\n      });\n    }\n  }\n}\nmodule.exports = Alert;","map":{"version":3,"names":["Platform","RCTAlertManager","Alert","alert","title","message","buttons","options","OS","prompt","undefined","NativeDialogManagerAndroid","require","default","constants","getConstants","config","cancelable","defaultPositiveText","validButtons","slice","text","buttonPositive","pop","buttonNegative","buttonNeutral","onAction","action","buttonKey","buttonClicked","onPress","dismissed","onDismiss","onError","errorMessage","console","warn","showAlert","callbackOrButtons","type","defaultValue","keyboardType","callbacks","cancelButtonKey","destructiveButtonKey","preferredButtonKey","Array","isArray","forEach","btn","index","style","String","isPreferred","length","btnDef","push","alertWithArgs","userInterfaceStyle","id","value","cb","module","exports"],"sources":["/home/rodo/workspace/passion/apps/muh-money/node_modules/react-native/Libraries/Alert/Alert.js"],"sourcesContent":["/**\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @format\n * @flow\n */\n\nimport type {DialogOptions} from '../NativeModules/specs/NativeDialogManagerAndroid';\n\nimport Platform from '../Utilities/Platform';\nimport RCTAlertManager from './RCTAlertManager';\n\nexport type AlertType =\n  | 'default'\n  | 'plain-text'\n  | 'secure-text'\n  | 'login-password';\nexport type AlertButtonStyle = 'default' | 'cancel' | 'destructive';\nexport type Buttons = Array<{\n  text?: string,\n  onPress?: ?Function,\n  isPreferred?: boolean,\n  style?: AlertButtonStyle,\n  ...\n}>;\n\ntype Options = {\n  cancelable?: ?boolean,\n  userInterfaceStyle?: 'unspecified' | 'light' | 'dark',\n  onDismiss?: ?() => void,\n  ...\n};\n\n/**\n * Launches an alert dialog with the specified title and message.\n *\n * See https://reactnative.dev/docs/alert\n */\nclass Alert {\n  static alert(\n    title: ?string,\n    message?: ?string,\n    buttons?: Buttons,\n    options?: Options,\n  ): void {\n    if (Platform.OS === 'ios') {\n      Alert.prompt(\n        title,\n        message,\n        buttons,\n        'default',\n        undefined,\n        undefined,\n        options,\n      );\n    } else if (Platform.OS === 'android') {\n      const NativeDialogManagerAndroid =\n        require('../NativeModules/specs/NativeDialogManagerAndroid').default;\n      if (!NativeDialogManagerAndroid) {\n        return;\n      }\n      const constants = NativeDialogManagerAndroid.getConstants();\n\n      const config: DialogOptions = {\n        title: title || '',\n        message: message || '',\n        cancelable: false,\n      };\n\n      if (options && options.cancelable) {\n        config.cancelable = options.cancelable;\n      }\n      // At most three buttons (neutral, negative, positive). Ignore rest.\n      // The text 'OK' should be probably localized. iOS Alert does that in native.\n      const defaultPositiveText = 'OK';\n      const validButtons: Buttons = buttons\n        ? buttons.slice(0, 3)\n        : [{text: defaultPositiveText}];\n      const buttonPositive = validButtons.pop();\n      const buttonNegative = validButtons.pop();\n      const buttonNeutral = validButtons.pop();\n\n      if (buttonNeutral) {\n        config.buttonNeutral = buttonNeutral.text || '';\n      }\n      if (buttonNegative) {\n        config.buttonNegative = buttonNegative.text || '';\n      }\n      if (buttonPositive) {\n        config.buttonPositive = buttonPositive.text || defaultPositiveText;\n      }\n\n      /* $FlowFixMe[missing-local-annot] The type annotation(s) required by\n       * Flow's LTI update could not be added via codemod */\n      const onAction = (action, buttonKey) => {\n        if (action === constants.buttonClicked) {\n          if (buttonKey === constants.buttonNeutral) {\n            buttonNeutral.onPress && buttonNeutral.onPress();\n          } else if (buttonKey === constants.buttonNegative) {\n            buttonNegative.onPress && buttonNegative.onPress();\n          } else if (buttonKey === constants.buttonPositive) {\n            buttonPositive.onPress && buttonPositive.onPress();\n          }\n        } else if (action === constants.dismissed) {\n          options && options.onDismiss && options.onDismiss();\n        }\n      };\n      const onError = (errorMessage: string) => console.warn(errorMessage);\n      NativeDialogManagerAndroid.showAlert(config, onError, onAction);\n    }\n  }\n\n  static prompt(\n    title: ?string,\n    message?: ?string,\n    callbackOrButtons?: ?(((text: string) => void) | Buttons),\n    type?: ?AlertType = 'plain-text',\n    defaultValue?: string,\n    keyboardType?: string,\n    options?: Options,\n  ): void {\n    if (Platform.OS === 'ios') {\n      let callbacks: Array<?any> = [];\n      const buttons = [];\n      let cancelButtonKey;\n      let destructiveButtonKey;\n      let preferredButtonKey;\n      if (typeof callbackOrButtons === 'function') {\n        callbacks = [callbackOrButtons];\n      } else if (Array.isArray(callbackOrButtons)) {\n        callbackOrButtons.forEach((btn, index) => {\n          callbacks[index] = btn.onPress;\n          if (btn.style === 'cancel') {\n            cancelButtonKey = String(index);\n          } else if (btn.style === 'destructive') {\n            destructiveButtonKey = String(index);\n          }\n          if (btn.isPreferred) {\n            preferredButtonKey = String(index);\n          }\n          if (btn.text || index < (callbackOrButtons || []).length - 1) {\n            const btnDef: {[number]: string} = {};\n            btnDef[index] = btn.text || '';\n            buttons.push(btnDef);\n          }\n        });\n      }\n\n      RCTAlertManager.alertWithArgs(\n        {\n          title: title || '',\n          message: message || undefined,\n          buttons,\n          type: type || undefined,\n          defaultValue,\n          cancelButtonKey,\n          destructiveButtonKey,\n          preferredButtonKey,\n          keyboardType,\n          userInterfaceStyle: options?.userInterfaceStyle || undefined,\n        },\n        (id, value) => {\n          const cb = callbacks[id];\n          cb && cb(value);\n        },\n      );\n    }\n  }\n}\n\nmodule.exports = Alert;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}