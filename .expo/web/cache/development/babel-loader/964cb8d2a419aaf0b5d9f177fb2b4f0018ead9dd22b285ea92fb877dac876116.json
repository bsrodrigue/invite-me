{"ast":null,"code":"import warnOnce from '../../../../Libraries/Utilities/warnOnce';\nimport NativePerformanceObserver from './NativePerformanceObserver';\nimport { PerformanceEntry } from './PerformanceEntry';\nimport PerformanceEventTiming from './PerformanceEventTiming';\nimport { performanceEntryTypeToRaw, rawToPerformanceEntry, rawToPerformanceEntryType } from './RawPerformanceEntry';\nexport class PerformanceObserverEntryList {\n  constructor(entries) {\n    this._entries = entries;\n  }\n  getEntries() {\n    return this._entries;\n  }\n  getEntriesByType(type) {\n    return this._entries.filter(entry => entry.entryType === type);\n  }\n  getEntriesByName(name, type) {\n    if (type === undefined) {\n      return this._entries.filter(entry => entry.name === name);\n    } else {\n      return this._entries.filter(entry => entry.name === name && entry.entryType === type);\n    }\n  }\n}\nconst observerCountPerEntryType = new Map();\nconst registeredObservers = new Map();\nlet isOnPerformanceEntryCallbackSet = false;\nconst onPerformanceEntry = () => {\n  if (!NativePerformanceObserver) {\n    return;\n  }\n  const entryResult = NativePerformanceObserver.popPendingEntries();\n  const rawEntries = entryResult?.entries ?? [];\n  const droppedEntriesCount = entryResult?.droppedEntriesCount;\n  if (rawEntries.length === 0) {\n    return;\n  }\n  const entries = rawEntries.map(rawToPerformanceEntry);\n  for (const [observer, observerConfig] of registeredObservers.entries()) {\n    const entriesForObserver = entries.filter(entry => {\n      if (!observerConfig.entryTypes.has(entry.entryType)) {\n        return false;\n      }\n      const durationThreshold = observerConfig.entryTypes.get(entry.entryType);\n      return entry.duration >= (durationThreshold ?? 0);\n    });\n    observerConfig.callback(new PerformanceObserverEntryList(entriesForObserver), observer, droppedEntriesCount);\n  }\n};\nexport function warnNoNativePerformanceObserver() {\n  warnOnce('missing-native-performance-observer', 'Missing native implementation of PerformanceObserver');\n}\nfunction applyDurationThresholds() {\n  const durationThresholds = Array.from(registeredObservers.values()).map(config => config.entryTypes).reduce((accumulator, currentValue) => union(accumulator, currentValue), new Map());\n  for (const [entryType, durationThreshold] of durationThresholds) {\n    NativePerformanceObserver?.setDurationThreshold(performanceEntryTypeToRaw(entryType), durationThreshold ?? 0);\n  }\n}\nfunction getSupportedPerformanceEntryTypes() {\n  if (!NativePerformanceObserver) {\n    return Object.freeze([]);\n  }\n  if (!NativePerformanceObserver.getSupportedPerformanceEntryTypes) {\n    return Object.freeze(['mark', 'measure', 'event']);\n  }\n  return Object.freeze(NativePerformanceObserver.getSupportedPerformanceEntryTypes().map(rawToPerformanceEntryType));\n}\nexport default class PerformanceObserver {\n  constructor(callback) {\n    this._callback = callback;\n  }\n  observe(options) {\n    if (!NativePerformanceObserver) {\n      warnNoNativePerformanceObserver();\n      return;\n    }\n    this._validateObserveOptions(options);\n    let requestedEntryTypes;\n    if (options.entryTypes) {\n      this._type = 'multiple';\n      requestedEntryTypes = new Map(options.entryTypes.map(t => [t, undefined]));\n    } else {\n      this._type = 'single';\n      requestedEntryTypes = new Map([[options.type, options.durationThreshold]]);\n    }\n    const currentEntryTypes = registeredObservers.get(this)?.entryTypes;\n    const nextEntryTypes = currentEntryTypes ? union(requestedEntryTypes, currentEntryTypes) : requestedEntryTypes;\n    if (currentEntryTypes && currentEntryTypes.size === nextEntryTypes.size) {\n      return;\n    }\n    registeredObservers.set(this, {\n      callback: this._callback,\n      entryTypes: nextEntryTypes\n    });\n    if (!isOnPerformanceEntryCallbackSet) {\n      NativePerformanceObserver.setOnPerformanceEntryCallback(onPerformanceEntry);\n      isOnPerformanceEntryCallbackSet = true;\n    }\n    const newEntryTypes = currentEntryTypes ? difference(new Set(requestedEntryTypes.keys()), new Set(currentEntryTypes.keys())) : new Set(requestedEntryTypes.keys());\n    for (const type of newEntryTypes) {\n      if (!observerCountPerEntryType.has(type)) {\n        const rawType = performanceEntryTypeToRaw(type);\n        NativePerformanceObserver.startReporting(rawType);\n      }\n      observerCountPerEntryType.set(type, (observerCountPerEntryType.get(type) ?? 0) + 1);\n    }\n    applyDurationThresholds();\n  }\n  disconnect() {\n    if (!NativePerformanceObserver) {\n      warnNoNativePerformanceObserver();\n      return;\n    }\n    const observerConfig = registeredObservers.get(this);\n    if (!observerConfig) {\n      return;\n    }\n    for (const type of observerConfig.entryTypes.keys()) {\n      const numberOfObserversForThisType = observerCountPerEntryType.get(type) ?? 0;\n      if (numberOfObserversForThisType === 1) {\n        observerCountPerEntryType.delete(type);\n        NativePerformanceObserver.stopReporting(performanceEntryTypeToRaw(type));\n      } else if (numberOfObserversForThisType !== 0) {\n        observerCountPerEntryType.set(type, numberOfObserversForThisType - 1);\n      }\n    }\n    registeredObservers.delete(this);\n    if (registeredObservers.size === 0) {\n      NativePerformanceObserver.setOnPerformanceEntryCallback(undefined);\n      isOnPerformanceEntryCallbackSet = false;\n    }\n    applyDurationThresholds();\n  }\n  _validateObserveOptions(options) {\n    const {\n      type,\n      entryTypes,\n      durationThreshold\n    } = options;\n    if (!type && !entryTypes) {\n      throw new TypeError(\"Failed to execute 'observe' on 'PerformanceObserver': An observe() call must not include both entryTypes and type arguments.\");\n    }\n    if (entryTypes && type) {\n      throw new TypeError(\"Failed to execute 'observe' on 'PerformanceObserver': An observe() call must include either entryTypes or type arguments.\");\n    }\n    if (this._type === 'multiple' && type) {\n      throw new Error(\"Failed to execute 'observe' on 'PerformanceObserver': This observer has performed observe({entryTypes:...}, therefore it cannot perform observe({type:...})\");\n    }\n    if (this._type === 'single' && entryTypes) {\n      throw new Error(\"Failed to execute 'observe' on 'PerformanceObserver': This PerformanceObserver has performed observe({type:...}, therefore it cannot perform observe({entryTypes:...})\");\n    }\n    if (entryTypes && durationThreshold !== undefined) {\n      throw new TypeError(\"Failed to execute 'observe' on 'PerformanceObserver': An observe() call must not include both entryTypes and durationThreshold arguments.\");\n    }\n  }\n  static supportedEntryTypes = getSupportedPerformanceEntryTypes();\n}\nfunction union(a, b) {\n  const res = new Map();\n  for (const [k, v] of a) {\n    if (!b.has(k)) {\n      res.set(k, v);\n    } else {\n      res.set(k, Math.min(v ?? 0, b.get(k) ?? 0));\n    }\n  }\n  return res;\n}\nfunction difference(a, b) {\n  return new Set([...a].filter(x => !b.has(x)));\n}\nexport { PerformanceEventTiming };","map":{"version":3,"names":["warnOnce","NativePerformanceObserver","PerformanceEntry","PerformanceEventTiming","performanceEntryTypeToRaw","rawToPerformanceEntry","rawToPerformanceEntryType","PerformanceObserverEntryList","constructor","entries","_entries","getEntries","getEntriesByType","type","filter","entry","entryType","getEntriesByName","name","undefined","observerCountPerEntryType","Map","registeredObservers","isOnPerformanceEntryCallbackSet","onPerformanceEntry","entryResult","popPendingEntries","rawEntries","droppedEntriesCount","length","map","observer","observerConfig","entriesForObserver","entryTypes","has","durationThreshold","get","duration","callback","warnNoNativePerformanceObserver","applyDurationThresholds","durationThresholds","Array","from","values","config","reduce","accumulator","currentValue","union","setDurationThreshold","getSupportedPerformanceEntryTypes","Object","freeze","PerformanceObserver","_callback","observe","options","_validateObserveOptions","requestedEntryTypes","_type","t","currentEntryTypes","nextEntryTypes","size","set","setOnPerformanceEntryCallback","newEntryTypes","difference","Set","keys","rawType","startReporting","disconnect","numberOfObserversForThisType","delete","stopReporting","TypeError","Error","supportedEntryTypes","a","b","res","k","v","Math","min","x"],"sources":["/home/rodo/workspace/passion/apps/muh-money/node_modules/react-native/src/private/webapis/performance/PerformanceObserver.js"],"sourcesContent":["/**\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @format\n * @flow strict\n */\n\nimport type {HighResTimeStamp, PerformanceEntryType} from './PerformanceEntry';\n\nimport warnOnce from '../../../../Libraries/Utilities/warnOnce';\nimport NativePerformanceObserver from './NativePerformanceObserver';\nimport {PerformanceEntry} from './PerformanceEntry';\nimport PerformanceEventTiming from './PerformanceEventTiming';\nimport {\n  performanceEntryTypeToRaw,\n  rawToPerformanceEntry,\n  rawToPerformanceEntryType,\n} from './RawPerformanceEntry';\n\nexport type PerformanceEntryList = $ReadOnlyArray<PerformanceEntry>;\n\nexport class PerformanceObserverEntryList {\n  _entries: PerformanceEntryList;\n\n  constructor(entries: PerformanceEntryList) {\n    this._entries = entries;\n  }\n\n  getEntries(): PerformanceEntryList {\n    return this._entries;\n  }\n\n  getEntriesByType(type: PerformanceEntryType): PerformanceEntryList {\n    return this._entries.filter(entry => entry.entryType === type);\n  }\n\n  getEntriesByName(\n    name: string,\n    type?: PerformanceEntryType,\n  ): PerformanceEntryList {\n    if (type === undefined) {\n      return this._entries.filter(entry => entry.name === name);\n    } else {\n      return this._entries.filter(\n        entry => entry.name === name && entry.entryType === type,\n      );\n    }\n  }\n}\n\nexport type PerformanceObserverCallback = (\n  list: PerformanceObserverEntryList,\n  observer: PerformanceObserver,\n  // The number of buffered entries which got dropped from the buffer due to the buffer being full:\n  droppedEntryCount?: number,\n) => void;\n\nexport type PerformanceObserverInit =\n  | {\n      entryTypes: Array<PerformanceEntryType>,\n    }\n  | {\n      type: PerformanceEntryType,\n      durationThreshold?: HighResTimeStamp,\n    };\n\ntype PerformanceObserverConfig = {|\n  callback: PerformanceObserverCallback,\n  // Map of {entryType: durationThreshold}\n  entryTypes: $ReadOnlyMap<PerformanceEntryType, ?number>,\n|};\n\nconst observerCountPerEntryType: Map<PerformanceEntryType, number> = new Map();\nconst registeredObservers: Map<PerformanceObserver, PerformanceObserverConfig> =\n  new Map();\nlet isOnPerformanceEntryCallbackSet: boolean = false;\n\n// This is a callback that gets scheduled and periodically called from the native side\nconst onPerformanceEntry = () => {\n  if (!NativePerformanceObserver) {\n    return;\n  }\n  const entryResult = NativePerformanceObserver.popPendingEntries();\n  const rawEntries = entryResult?.entries ?? [];\n  const droppedEntriesCount = entryResult?.droppedEntriesCount;\n  if (rawEntries.length === 0) {\n    return;\n  }\n  const entries = rawEntries.map(rawToPerformanceEntry);\n  for (const [observer, observerConfig] of registeredObservers.entries()) {\n    const entriesForObserver: PerformanceEntryList = entries.filter(entry => {\n      if (!observerConfig.entryTypes.has(entry.entryType)) {\n        return false;\n      }\n      const durationThreshold = observerConfig.entryTypes.get(entry.entryType);\n      return entry.duration >= (durationThreshold ?? 0);\n    });\n    observerConfig.callback(\n      new PerformanceObserverEntryList(entriesForObserver),\n      observer,\n      droppedEntriesCount,\n    );\n  }\n};\n\nexport function warnNoNativePerformanceObserver() {\n  warnOnce(\n    'missing-native-performance-observer',\n    'Missing native implementation of PerformanceObserver',\n  );\n}\n\nfunction applyDurationThresholds() {\n  const durationThresholds: Map<PerformanceEntryType, ?number> = Array.from(\n    registeredObservers.values(),\n  )\n    .map(config => config.entryTypes)\n    .reduce(\n      (accumulator, currentValue) => union(accumulator, currentValue),\n      new Map(),\n    );\n\n  for (const [entryType, durationThreshold] of durationThresholds) {\n    NativePerformanceObserver?.setDurationThreshold(\n      performanceEntryTypeToRaw(entryType),\n      durationThreshold ?? 0,\n    );\n  }\n}\n\nfunction getSupportedPerformanceEntryTypes(): $ReadOnlyArray<PerformanceEntryType> {\n  if (!NativePerformanceObserver) {\n    return Object.freeze([]);\n  }\n  if (!NativePerformanceObserver.getSupportedPerformanceEntryTypes) {\n    // fallback if getSupportedPerformanceEntryTypes is not defined on native side\n    return Object.freeze(['mark', 'measure', 'event']);\n  }\n  return Object.freeze(\n    NativePerformanceObserver.getSupportedPerformanceEntryTypes().map(\n      rawToPerformanceEntryType,\n    ),\n  );\n}\n\n/**\n * Implementation of the PerformanceObserver interface for RN,\n * corresponding to the standard in https://www.w3.org/TR/performance-timeline/\n *\n * @example\n * const observer = new PerformanceObserver((list, _observer) => {\n *   const entries = list.getEntries();\n *   entries.forEach(entry => {\n *     reportEvent({\n *       eventName: entry.name,\n *       startTime: entry.startTime,\n *       endTime: entry.startTime + entry.duration,\n *       processingStart: entry.processingStart,\n *       processingEnd: entry.processingEnd,\n *       interactionId: entry.interactionId,\n *     });\n *   });\n * });\n * observer.observe({ type: \"event\" });\n */\nexport default class PerformanceObserver {\n  _callback: PerformanceObserverCallback;\n  _type: 'single' | 'multiple' | void;\n\n  constructor(callback: PerformanceObserverCallback) {\n    this._callback = callback;\n  }\n\n  observe(options: PerformanceObserverInit): void {\n    if (!NativePerformanceObserver) {\n      warnNoNativePerformanceObserver();\n      return;\n    }\n\n    this._validateObserveOptions(options);\n\n    let requestedEntryTypes;\n\n    if (options.entryTypes) {\n      this._type = 'multiple';\n      requestedEntryTypes = new Map(\n        options.entryTypes.map(t => [t, undefined]),\n      );\n    } else {\n      this._type = 'single';\n      requestedEntryTypes = new Map([\n        [options.type, options.durationThreshold],\n      ]);\n    }\n\n    // The same observer may receive multiple calls to \"observe\", so we need\n    // to check what is new on this call vs. previous ones.\n    const currentEntryTypes = registeredObservers.get(this)?.entryTypes;\n    const nextEntryTypes = currentEntryTypes\n      ? union(requestedEntryTypes, currentEntryTypes)\n      : requestedEntryTypes;\n\n    // This `observe` call is a no-op because there are no new things to observe.\n    if (currentEntryTypes && currentEntryTypes.size === nextEntryTypes.size) {\n      return;\n    }\n\n    registeredObservers.set(this, {\n      callback: this._callback,\n      entryTypes: nextEntryTypes,\n    });\n\n    if (!isOnPerformanceEntryCallbackSet) {\n      NativePerformanceObserver.setOnPerformanceEntryCallback(\n        onPerformanceEntry,\n      );\n      isOnPerformanceEntryCallbackSet = true;\n    }\n\n    // We only need to start listenening to new entry types being observed in\n    // this observer.\n    const newEntryTypes = currentEntryTypes\n      ? difference(\n          new Set(requestedEntryTypes.keys()),\n          new Set(currentEntryTypes.keys()),\n        )\n      : new Set(requestedEntryTypes.keys());\n    for (const type of newEntryTypes) {\n      if (!observerCountPerEntryType.has(type)) {\n        const rawType = performanceEntryTypeToRaw(type);\n        NativePerformanceObserver.startReporting(rawType);\n      }\n      observerCountPerEntryType.set(\n        type,\n        (observerCountPerEntryType.get(type) ?? 0) + 1,\n      );\n    }\n    applyDurationThresholds();\n  }\n\n  disconnect(): void {\n    if (!NativePerformanceObserver) {\n      warnNoNativePerformanceObserver();\n      return;\n    }\n\n    const observerConfig = registeredObservers.get(this);\n    if (!observerConfig) {\n      return;\n    }\n\n    // Disconnect this observer\n    for (const type of observerConfig.entryTypes.keys()) {\n      const numberOfObserversForThisType =\n        observerCountPerEntryType.get(type) ?? 0;\n      if (numberOfObserversForThisType === 1) {\n        observerCountPerEntryType.delete(type);\n        NativePerformanceObserver.stopReporting(\n          performanceEntryTypeToRaw(type),\n        );\n      } else if (numberOfObserversForThisType !== 0) {\n        observerCountPerEntryType.set(type, numberOfObserversForThisType - 1);\n      }\n    }\n\n    // Disconnect all observers if this was the last one\n    registeredObservers.delete(this);\n    if (registeredObservers.size === 0) {\n      NativePerformanceObserver.setOnPerformanceEntryCallback(undefined);\n      isOnPerformanceEntryCallbackSet = false;\n    }\n\n    applyDurationThresholds();\n  }\n\n  _validateObserveOptions(options: PerformanceObserverInit): void {\n    const {type, entryTypes, durationThreshold} = options;\n\n    if (!type && !entryTypes) {\n      throw new TypeError(\n        \"Failed to execute 'observe' on 'PerformanceObserver': An observe() call must not include both entryTypes and type arguments.\",\n      );\n    }\n\n    if (entryTypes && type) {\n      throw new TypeError(\n        \"Failed to execute 'observe' on 'PerformanceObserver': An observe() call must include either entryTypes or type arguments.\",\n      );\n    }\n\n    if (this._type === 'multiple' && type) {\n      throw new Error(\n        \"Failed to execute 'observe' on 'PerformanceObserver': This observer has performed observe({entryTypes:...}, therefore it cannot perform observe({type:...})\",\n      );\n    }\n\n    if (this._type === 'single' && entryTypes) {\n      throw new Error(\n        \"Failed to execute 'observe' on 'PerformanceObserver': This PerformanceObserver has performed observe({type:...}, therefore it cannot perform observe({entryTypes:...})\",\n      );\n    }\n\n    if (entryTypes && durationThreshold !== undefined) {\n      throw new TypeError(\n        \"Failed to execute 'observe' on 'PerformanceObserver': An observe() call must not include both entryTypes and durationThreshold arguments.\",\n      );\n    }\n  }\n\n  static supportedEntryTypes: $ReadOnlyArray<PerformanceEntryType> =\n    getSupportedPerformanceEntryTypes();\n}\n\n// As a Set union, except if value exists in both, we take minimum\nfunction union<T>(\n  a: $ReadOnlyMap<T, ?number>,\n  b: $ReadOnlyMap<T, ?number>,\n): Map<T, ?number> {\n  const res = new Map<T, ?number>();\n  for (const [k, v] of a) {\n    if (!b.has(k)) {\n      res.set(k, v);\n    } else {\n      res.set(k, Math.min(v ?? 0, b.get(k) ?? 0));\n    }\n  }\n  return res;\n}\n\nfunction difference<T>(a: $ReadOnlySet<T>, b: $ReadOnlySet<T>): Set<T> {\n  return new Set([...a].filter(x => !b.has(x)));\n}\n\nexport {PerformanceEventTiming};\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}