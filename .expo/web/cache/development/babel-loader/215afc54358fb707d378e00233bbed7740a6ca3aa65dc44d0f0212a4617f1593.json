{"ast":null,"code":"import getNativeComponentAttributes from '../ReactNative/getNativeComponentAttributes';\nimport UIManager from '../ReactNative/UIManager';\nimport * as ReactNativeViewConfigRegistry from '../Renderer/shims/ReactNativeViewConfigRegistry';\nimport verifyComponentAttributeEquivalence from '../Utilities/verifyComponentAttributeEquivalence';\nimport * as StaticViewConfigValidator from './StaticViewConfigValidator';\nimport { createViewConfig } from './ViewConfig';\nimport invariant from 'invariant';\nimport * as React from 'react';\nlet getRuntimeConfig;\nexport function setRuntimeConfigProvider(runtimeConfigProvider) {\n  if (getRuntimeConfig === undefined) {\n    getRuntimeConfig = runtimeConfigProvider;\n  }\n}\nexport function get(name, viewConfigProvider) {\n  ReactNativeViewConfigRegistry.register(name, () => {\n    const {\n      native,\n      strict,\n      verify\n    } = getRuntimeConfig?.(name) ?? {\n      native: !global.RN$Bridgeless,\n      strict: false,\n      verify: false\n    };\n    let viewConfig;\n    if (native) {\n      viewConfig = getNativeComponentAttributes(name);\n    } else {\n      viewConfig = createViewConfig(viewConfigProvider());\n      if (viewConfig == null) {\n        viewConfig = getNativeComponentAttributes(name);\n      }\n    }\n    if (verify) {\n      const nativeViewConfig = native ? viewConfig : getNativeComponentAttributes(name);\n      const staticViewConfig = native ? createViewConfig(viewConfigProvider()) : viewConfig;\n      if (strict) {\n        const validationOutput = StaticViewConfigValidator.validate(name, nativeViewConfig, staticViewConfig);\n        if (validationOutput.type === 'invalid') {\n          console.error(StaticViewConfigValidator.stringifyValidationResult(name, validationOutput));\n        }\n      } else {\n        verifyComponentAttributeEquivalence(nativeViewConfig, staticViewConfig);\n      }\n    }\n    return viewConfig;\n  });\n  return name;\n}\nexport function getWithFallback_DEPRECATED(name, viewConfigProvider) {\n  if (getRuntimeConfig == null) {\n    if (hasNativeViewConfig(name)) {\n      return get(name, viewConfigProvider);\n    }\n  } else {\n    if (getRuntimeConfig(name) != null) {\n      return get(name, viewConfigProvider);\n    }\n  }\n  const FallbackNativeComponent = function (props) {\n    return null;\n  };\n  FallbackNativeComponent.displayName = `Fallback(${name})`;\n  return FallbackNativeComponent;\n}\nfunction hasNativeViewConfig(name) {\n  invariant(getRuntimeConfig == null, 'Unexpected invocation!');\n  return UIManager.getViewManagerConfig(name) != null;\n}\nexport function unstable_hasStaticViewConfig(name) {\n  const {\n    native\n  } = getRuntimeConfig?.(name) ?? {\n    native: true\n  };\n  return !native;\n}","map":{"version":3,"names":["getNativeComponentAttributes","UIManager","ReactNativeViewConfigRegistry","verifyComponentAttributeEquivalence","StaticViewConfigValidator","createViewConfig","invariant","React","getRuntimeConfig","setRuntimeConfigProvider","runtimeConfigProvider","undefined","get","name","viewConfigProvider","register","native","strict","verify","global","RN$Bridgeless","viewConfig","nativeViewConfig","staticViewConfig","validationOutput","validate","type","console","error","stringifyValidationResult","getWithFallback_DEPRECATED","hasNativeViewConfig","FallbackNativeComponent","props","displayName","getViewManagerConfig","unstable_hasStaticViewConfig"],"sources":["/home/rodo/workspace/passion/apps/muh-money/node_modules/react-native/Libraries/NativeComponent/NativeComponentRegistry.js"],"sourcesContent":["/**\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @flow strict-local\n * @format\n */\n\nimport type {\n  HostComponent,\n  PartialViewConfig,\n} from '../Renderer/shims/ReactNativeTypes';\n\nimport getNativeComponentAttributes from '../ReactNative/getNativeComponentAttributes';\nimport UIManager from '../ReactNative/UIManager';\nimport * as ReactNativeViewConfigRegistry from '../Renderer/shims/ReactNativeViewConfigRegistry';\nimport verifyComponentAttributeEquivalence from '../Utilities/verifyComponentAttributeEquivalence';\nimport * as StaticViewConfigValidator from './StaticViewConfigValidator';\nimport {createViewConfig} from './ViewConfig';\nimport invariant from 'invariant';\nimport * as React from 'react';\n\nlet getRuntimeConfig;\n\n/**\n * Configures a function that is called to determine whether a given component\n * should be registered using reflection of the native component at runtime.\n *\n * The provider should return null if the native component is unavailable in\n * the current environment.\n */\nexport function setRuntimeConfigProvider(\n  runtimeConfigProvider: (name: string) => ?{\n    native: boolean,\n    strict: boolean,\n    verify: boolean,\n  },\n): void {\n  if (getRuntimeConfig === undefined) {\n    getRuntimeConfig = runtimeConfigProvider;\n  }\n}\n\n/**\n * Gets a `NativeComponent` that can be rendered by React Native.\n *\n * The supplied `viewConfigProvider` may or may not be invoked and utilized,\n * depending on how `setRuntimeConfigProvider` is configured.\n */\nexport function get<Config>(\n  name: string,\n  viewConfigProvider: () => PartialViewConfig,\n): HostComponent<Config> {\n  ReactNativeViewConfigRegistry.register(name, () => {\n    const {native, strict, verify} = getRuntimeConfig?.(name) ?? {\n      native: !global.RN$Bridgeless,\n      strict: false,\n      verify: false,\n    };\n\n    let viewConfig;\n    if (native) {\n      viewConfig = getNativeComponentAttributes(name);\n    } else {\n      viewConfig = createViewConfig(viewConfigProvider());\n      if (viewConfig == null) {\n        viewConfig = getNativeComponentAttributes(name);\n      }\n    }\n\n    if (verify) {\n      const nativeViewConfig = native\n        ? viewConfig\n        : getNativeComponentAttributes(name);\n      const staticViewConfig = native\n        ? createViewConfig(viewConfigProvider())\n        : viewConfig;\n\n      if (strict) {\n        const validationOutput = StaticViewConfigValidator.validate(\n          name,\n          nativeViewConfig,\n          staticViewConfig,\n        );\n\n        if (validationOutput.type === 'invalid') {\n          console.error(\n            StaticViewConfigValidator.stringifyValidationResult(\n              name,\n              validationOutput,\n            ),\n          );\n        }\n      } else {\n        verifyComponentAttributeEquivalence(nativeViewConfig, staticViewConfig);\n      }\n    }\n\n    return viewConfig;\n  });\n\n  // $FlowFixMe[incompatible-return] `NativeComponent` is actually string!\n  return name;\n}\n\n/**\n * Same as `NativeComponentRegistry.get(...)`, except this will check either\n * the `setRuntimeConfigProvider` configuration or use native reflection (slow)\n * to determine whether this native component is available.\n *\n * If the native component is not available, a stub component is returned. Note\n * that the return value of this is not `HostComponent` because the returned\n * component instance is not guaranteed to have native methods.\n */\nexport function getWithFallback_DEPRECATED<Config>(\n  name: string,\n  viewConfigProvider: () => PartialViewConfig,\n): React.AbstractComponent<Config> {\n  if (getRuntimeConfig == null) {\n    // `getRuntimeConfig == null` when static view configs are disabled\n    // If `setRuntimeConfigProvider` is not configured, use native reflection.\n    if (hasNativeViewConfig(name)) {\n      return get<Config>(name, viewConfigProvider);\n    }\n  } else {\n    // If there is no runtime config, then the native component is unavailable.\n    if (getRuntimeConfig(name) != null) {\n      return get<Config>(name, viewConfigProvider);\n    }\n  }\n\n  const FallbackNativeComponent = function (props: Config): React.Node {\n    return null;\n  };\n  FallbackNativeComponent.displayName = `Fallback(${name})`;\n  return FallbackNativeComponent;\n}\n\nfunction hasNativeViewConfig(name: string): boolean {\n  invariant(getRuntimeConfig == null, 'Unexpected invocation!');\n  return UIManager.getViewManagerConfig(name) != null;\n}\n\n/**\n * Unstable API. Do not use!\n *\n * This method returns if there is a StaticViewConfig registered for the\n * component name received as a parameter.\n */\nexport function unstable_hasStaticViewConfig(name: string): boolean {\n  const {native} = getRuntimeConfig?.(name) ?? {\n    native: true,\n  };\n  return !native;\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}