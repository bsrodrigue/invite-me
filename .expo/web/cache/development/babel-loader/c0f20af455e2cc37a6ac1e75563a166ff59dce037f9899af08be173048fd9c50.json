{"ast":null,"code":"'use strict';\n\nclass Blob {\n  constructor(parts = [], options) {\n    const BlobManager = require('./BlobManager');\n    this.data = BlobManager.createFromParts(parts, options).data;\n  }\n  set data(data) {\n    this._data = data;\n  }\n  get data() {\n    if (!this._data) {\n      throw new Error('Blob has been closed and is no longer available');\n    }\n    return this._data;\n  }\n  slice(start, end, contentType = '') {\n    const BlobManager = require('./BlobManager');\n    let {\n      offset,\n      size\n    } = this.data;\n    if (typeof start === 'number') {\n      if (start > size) {\n        start = size;\n      }\n      offset += start;\n      size -= start;\n      if (typeof end === 'number') {\n        if (end < 0) {\n          end = this.size + end;\n        }\n        if (end > this.size) {\n          end = this.size;\n        }\n        size = end - start;\n      }\n    }\n    return BlobManager.createFromOptions({\n      blobId: this.data.blobId,\n      offset,\n      size,\n      type: contentType,\n      __collector: this.data.__collector\n    });\n  }\n  close() {\n    const BlobManager = require('./BlobManager');\n    BlobManager.release(this.data.blobId);\n    this.data = null;\n  }\n  get size() {\n    return this.data.size;\n  }\n  get type() {\n    return this.data.type || '';\n  }\n}\nmodule.exports = Blob;","map":{"version":3,"names":["Blob","constructor","parts","options","BlobManager","require","data","createFromParts","_data","Error","slice","start","end","contentType","offset","size","createFromOptions","blobId","type","__collector","close","release","module","exports"],"sources":["/home/rodo/workspace/passion/apps/muh-money/node_modules/react-native/Libraries/Blob/Blob.js"],"sourcesContent":["/**\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @flow strict-local\n * @format\n */\n\n'use strict';\n\nimport type {BlobData, BlobOptions} from './BlobTypes';\n\n/**\n * Opaque JS representation of some binary data in native.\n *\n * The API is modeled after the W3C Blob API, with one caveat\n * regarding explicit deallocation. Refer to the `close()`\n * method for further details.\n *\n * Example usage in a React component:\n *\n *   class WebSocketImage extends React.Component {\n *      state = {blob: null};\n *      componentDidMount() {\n *        let ws = this.ws = new WebSocket(...);\n *        ws.binaryType = 'blob';\n *        ws.onmessage = (event) => {\n *          if (this.state.blob) {\n *            this.state.blob.close();\n *          }\n *          this.setState({blob: event.data});\n *        };\n *      }\n *      componentUnmount() {\n *        if (this.state.blob) {\n *          this.state.blob.close();\n *        }\n *        this.ws.close();\n *      }\n *      render() {\n *        if (!this.state.blob) {\n *          return <View />;\n *        }\n *        return <Image source={{uri: URL.createObjectURL(this.state.blob)}} />;\n *      }\n *   }\n *\n * Reference: https://developer.mozilla.org/en-US/docs/Web/API/Blob\n */\nclass Blob {\n  _data: ?BlobData;\n\n  /**\n   * Constructor for JS consumers.\n   * Currently we only support creating Blobs from other Blobs.\n   * Reference: https://developer.mozilla.org/en-US/docs/Web/API/Blob/Blob\n   */\n  constructor(parts: Array<Blob | string> = [], options?: BlobOptions) {\n    const BlobManager = require('./BlobManager');\n    this.data = BlobManager.createFromParts(parts, options).data;\n  }\n\n  /*\n   * This method is used to create a new Blob object containing\n   * the data in the specified range of bytes of the source Blob.\n   * Reference: https://developer.mozilla.org/en-US/docs/Web/API/Blob/slice\n   */\n  // $FlowFixMe[unsafe-getters-setters]\n  set data(data: ?BlobData) {\n    this._data = data;\n  }\n\n  // $FlowFixMe[unsafe-getters-setters]\n  get data(): BlobData {\n    if (!this._data) {\n      throw new Error('Blob has been closed and is no longer available');\n    }\n\n    return this._data;\n  }\n\n  slice(start?: number, end?: number, contentType: string = ''): Blob {\n    const BlobManager = require('./BlobManager');\n    let {offset, size} = this.data;\n\n    if (typeof start === 'number') {\n      if (start > size) {\n        // $FlowFixMe[reassign-const]\n        start = size;\n      }\n      offset += start;\n      size -= start;\n\n      if (typeof end === 'number') {\n        if (end < 0) {\n          // $FlowFixMe[reassign-const]\n          end = this.size + end;\n        }\n        if (end > this.size) {\n          // $FlowFixMe[reassign-const]\n          end = this.size;\n        }\n        size = end - start;\n      }\n    }\n    return BlobManager.createFromOptions({\n      blobId: this.data.blobId,\n      offset,\n      size,\n      type: contentType,\n      /* Since `blob.slice()` creates a new view onto the same binary\n       * data as the original blob, we should re-use the same collector\n       * object so that the underlying resource gets deallocated when\n       * the last view into the data is released, not the first.\n       */\n      __collector: this.data.__collector,\n    });\n  }\n\n  /**\n   * This method is in the standard, but not actually implemented by\n   * any browsers at this point. It's important for how Blobs work in\n   * React Native, however, since we cannot de-allocate resources automatically,\n   * so consumers need to explicitly de-allocate them.\n   *\n   * Note that the semantics around Blobs created via `blob.slice()`\n   * and `new Blob([blob])` are different. `blob.slice()` creates a\n   * new *view* onto the same binary data, so calling `close()` on any\n   * of those views is enough to deallocate the data, whereas\n   * `new Blob([blob, ...])` actually copies the data in memory.\n   */\n  close() {\n    const BlobManager = require('./BlobManager');\n    BlobManager.release(this.data.blobId);\n    this.data = null;\n  }\n\n  /**\n   * Size of the data contained in the Blob object, in bytes.\n   */\n  // $FlowFixMe[unsafe-getters-setters]\n  get size(): number {\n    return this.data.size;\n  }\n\n  /*\n   * String indicating the MIME type of the data contained in the Blob.\n   * If the type is unknown, this string is empty.\n   */\n  // $FlowFixMe[unsafe-getters-setters]\n  get type(): string {\n    return this.data.type || '';\n  }\n}\n\nmodule.exports = Blob;\n"],"mappings":"AAUA,YAAY;;AAyCZ,MAAMA,IAAI,CAAC;EAQTC,WAAWA,CAACC,KAA2B,GAAG,EAAE,EAAEC,OAAqB,EAAE;IACnE,MAAMC,WAAW,GAAGC,OAAO,CAAC,eAAe,CAAC;IAC5C,IAAI,CAACC,IAAI,GAAGF,WAAW,CAACG,eAAe,CAACL,KAAK,EAAEC,OAAO,CAAC,CAACG,IAAI;EAC9D;EAQA,IAAIA,IAAIA,CAACA,IAAe,EAAE;IACxB,IAAI,CAACE,KAAK,GAAGF,IAAI;EACnB;EAGA,IAAIA,IAAIA,CAAA,EAAa;IACnB,IAAI,CAAC,IAAI,CAACE,KAAK,EAAE;MACf,MAAM,IAAIC,KAAK,CAAC,iDAAiD,CAAC;IACpE;IAEA,OAAO,IAAI,CAACD,KAAK;EACnB;EAEAE,KAAKA,CAACC,KAAc,EAAEC,GAAY,EAAEC,WAAmB,GAAG,EAAE,EAAQ;IAClE,MAAMT,WAAW,GAAGC,OAAO,CAAC,eAAe,CAAC;IAC5C,IAAI;MAACS,MAAM;MAAEC;IAAI,CAAC,GAAG,IAAI,CAACT,IAAI;IAE9B,IAAI,OAAOK,KAAK,KAAK,QAAQ,EAAE;MAC7B,IAAIA,KAAK,GAAGI,IAAI,EAAE;QAEhBJ,KAAK,GAAGI,IAAI;MACd;MACAD,MAAM,IAAIH,KAAK;MACfI,IAAI,IAAIJ,KAAK;MAEb,IAAI,OAAOC,GAAG,KAAK,QAAQ,EAAE;QAC3B,IAAIA,GAAG,GAAG,CAAC,EAAE;UAEXA,GAAG,GAAG,IAAI,CAACG,IAAI,GAAGH,GAAG;QACvB;QACA,IAAIA,GAAG,GAAG,IAAI,CAACG,IAAI,EAAE;UAEnBH,GAAG,GAAG,IAAI,CAACG,IAAI;QACjB;QACAA,IAAI,GAAGH,GAAG,GAAGD,KAAK;MACpB;IACF;IACA,OAAOP,WAAW,CAACY,iBAAiB,CAAC;MACnCC,MAAM,EAAE,IAAI,CAACX,IAAI,CAACW,MAAM;MACxBH,MAAM;MACNC,IAAI;MACJG,IAAI,EAAEL,WAAW;MAMjBM,WAAW,EAAE,IAAI,CAACb,IAAI,CAACa;IACzB,CAAC,CAAC;EACJ;EAcAC,KAAKA,CAAA,EAAG;IACN,MAAMhB,WAAW,GAAGC,OAAO,CAAC,eAAe,CAAC;IAC5CD,WAAW,CAACiB,OAAO,CAAC,IAAI,CAACf,IAAI,CAACW,MAAM,CAAC;IACrC,IAAI,CAACX,IAAI,GAAG,IAAI;EAClB;EAMA,IAAIS,IAAIA,CAAA,EAAW;IACjB,OAAO,IAAI,CAACT,IAAI,CAACS,IAAI;EACvB;EAOA,IAAIG,IAAIA,CAAA,EAAW;IACjB,OAAO,IAAI,CAACZ,IAAI,CAACY,IAAI,IAAI,EAAE;EAC7B;AACF;AAEAI,MAAM,CAACC,OAAO,GAAGvB,IAAI","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}