{"ast":null,"code":"var _jsxFileName = \"/home/rodo/workspace/passion/apps/muh-money/src/components/CreateAccountForm/CreateAccountForm.tsx\";\nimport { useTheme } from '@rneui/themed';\nimport { useState } from 'react';\nimport Text from \"react-native-web/dist/exports/Text\";\nimport { ExpandingView } from '../ExpandingView';\nimport { Row } from '../Row';\nimport { FilterBadge } from '../FilterBadge';\nimport { TextInput } from '../Input';\nimport { Button } from '../Button';\nimport { accountTypes } from '../../constants';\nimport Crypto from '../../lib/crypto';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default function CreateAccountForm({\n  onCreate\n}) {\n  const {\n    theme: {\n      colors: {\n        primary\n      }\n    }\n  } = useTheme();\n  const [accountType, setAccountType] = useState(\"Cash\");\n  const [title, setTitle] = useState(\"\");\n  const [initialAmount, setInitialAmount] = useState(\"\");\n  const onSubmit = () => {\n    const uuid = Crypto.generateRandomUUID();\n    const data = {\n      uuid,\n      type: accountType,\n      title,\n      balance: parseFloat(initialAmount)\n    };\n    onCreate(data);\n  };\n  return _jsxDEV(ExpandingView, {\n    style: {\n      paddingHorizontal: 10\n    },\n    children: [_jsxDEV(Row, {\n      style: {\n        justifyContent: \"space-between\",\n        alignItems: \"center\"\n      },\n      children: _jsxDEV(Text, {\n        style: {\n          fontWeight: \"bold\",\n          fontSize: 18\n        },\n        children: \"Create Account\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 36,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 35,\n      columnNumber: 7\n    }, this), _jsxDEV(Row, {\n      style: {\n        gap: 5,\n        marginVertical: 10\n      },\n      children: accountTypes.map((filter, index) => _jsxDEV(FilterBadge, {\n        onPress: value => setAccountType(value),\n        activeColor: primary,\n        label: filter,\n        active: accountType === filter\n      }, index, false, {\n        fileName: _jsxFileName,\n        lineNumber: 41,\n        columnNumber: 11\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 39,\n      columnNumber: 7\n    }, this), _jsxDEV(TextInput, {\n      label: `${accountType} name`,\n      onChangeText: setTitle\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 48,\n      columnNumber: 7\n    }, this), _jsxDEV(TextInput, {\n      label: `Initial Amount`,\n      onChangeText: setInitialAmount,\n      keyboardType: \"numeric\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 49,\n      columnNumber: 7\n    }, this), _jsxDEV(Button, {\n      title: \"Submit\",\n      onPress: onSubmit\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 51,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 34,\n    columnNumber: 5\n  }, this);\n}","map":{"version":3,"names":["useTheme","useState","Text","ExpandingView","Row","FilterBadge","TextInput","Button","accountTypes","Crypto","jsxDEV","_jsxDEV","CreateAccountForm","onCreate","theme","colors","primary","accountType","setAccountType","title","setTitle","initialAmount","setInitialAmount","onSubmit","uuid","generateRandomUUID","data","type","balance","parseFloat","style","paddingHorizontal","children","justifyContent","alignItems","fontWeight","fontSize","fileName","_jsxFileName","lineNumber","columnNumber","gap","marginVertical","map","filter","index","onPress","value","activeColor","label","active","onChangeText","keyboardType"],"sources":["/home/rodo/workspace/passion/apps/muh-money/src/components/CreateAccountForm/CreateAccountForm.tsx"],"sourcesContent":["import { useTheme } from '@rneui/themed';\nimport { useState } from 'react';\nimport { Text } from 'react-native';\nimport { ExpandingView } from '../ExpandingView';\nimport { Row } from '../Row';\nimport { FilterBadge } from '../FilterBadge';\nimport { TextInput } from '../Input';\nimport { Button } from '../Button';\nimport { Account, AccountType } from '../../types/models';\nimport { accountTypes } from '../../constants';\nimport Crypto from '../../lib/crypto';\n\ninterface CreateAccountFormProps {\n  onCreate: (account: Account) => void;\n}\n\nexport default function CreateAccountForm({ onCreate }: CreateAccountFormProps) {\n  const { theme: { colors: { primary } } } = useTheme();\n  const [accountType, setAccountType] = useState<AccountType>(\"Cash\");\n  const [title, setTitle] = useState(\"\");\n  const [initialAmount, setInitialAmount] = useState(\"\");\n\n  const onSubmit = () => {\n    const uuid = Crypto.generateRandomUUID();\n    const data: Account = {\n      uuid,\n      type: accountType,\n      title, balance: parseFloat(initialAmount),\n    };\n    onCreate(data);\n  }\n\n  return (\n    <ExpandingView style={{ paddingHorizontal: 10 }}>\n      <Row style={{ justifyContent: \"space-between\", alignItems: \"center\" }}>\n        <Text style={{ fontWeight: \"bold\", fontSize: 18 }}>Create Account</Text>\n      </Row>\n\n      <Row style={{ gap: 5, marginVertical: 10 }}>\n        {accountTypes.map((filter, index) => (\n          <FilterBadge\n            onPress={(value) => setAccountType(value as AccountType)}\n            activeColor={primary} label={filter}\n            active={accountType === filter} key={index} />\n        ))}\n      </Row>\n\n      <TextInput label={`${accountType} name`} onChangeText={setTitle} />\n      <TextInput label={`Initial Amount`} onChangeText={setInitialAmount} keyboardType=\"numeric\" />\n\n      <Button title=\"Submit\" onPress={onSubmit} />\n    </ExpandingView>\n  );\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}